#ifndef _HC_NET_SDK_H_
#define _HC_NET_SDK_H_



#ifndef _WINDOWS_
    #if (defined(_WIN32) || defined(_WIN64))
        #include <winsock2.h>
        #include <windows.h>    
    #endif
#endif

#ifndef __PLAYRECT_defined
#define __PLAYRECT_defined
typedef struct __PLAYRECT
{
    int x;                               
    int y;                                  
    int uWidth;                            
    int uHeight;                            
}PLAYRECT;
#endif

#if (defined(_WIN32)) //windows
#define NET_DVR_API  extern "C"__declspec(dllimport)
typedef  unsigned __int64 UINT64;
typedef  signed __int64 INT64;
#elif defined(__linux__) || defined(__APPLE__) //linux
typedef     unsigned int    DWORD;
typedef     unsigned short  WORD;
typedef     unsigned short  USHORT;
typedef     short           SHORT;
typedef     int             LONG;
typedef      unsigned char    BYTE;
#define     BOOL int
typedef     unsigned int       UINT;
typedef     void*             LPVOID;
typedef     void*             HANDLE;
typedef     unsigned int*  LPDWORD; 
typedef  unsigned long long UINT64;
typedef  signed long long INT64;

#ifndef    TRUE
#define    TRUE    1
#endif
#ifndef    FALSE
#define       FALSE 0
#endif
#ifndef    NULL
#define       NULL 0
#endif

#define __stdcall 
#define CALLBACK  

#define NET_DVR_API extern "C"
typedef unsigned int   COLORKEY;
typedef unsigned int   COLORREF;

#ifndef __HWND_defined
#define __HWND_defined
#if defined(__linux__)
typedef unsigned int HWND;
#else
typedef void* HWND;
#endif
#endif


#ifndef __HDC_defined
#define __HDC_defined
#if defined(__linux__)
typedef struct __DC
{
    void*   surface;        //SDL Surface
    HWND    hWnd;           // HDC window handle
}DC;
typedef DC* HDC;
#else
typedef void* HDC;
#endif
#endif

typedef struct tagInitInfo
{
    int uWidth; 
    int uHeight; 
}INITINFO; 
#endif

//ºê¶¨Òå
#define MAX_NAMELEN			    16		//DVR±¾µØµÇÂ½Ãû
#define MAX_RIGHT			    32		//Éè±¸Ö§³ÖµÄÈ¨ÏÞ£¨1-12±íÊ¾±¾µØÈ¨ÏÞ£¬13-32±íÊ¾Ô¶³ÌÈ¨ÏÞ£©
#define NAME_LEN			    32      //ÓÃ»§Ãû³¤¶È
#define PASSWD_LEN			    16      //ÃÜÂë³¤¶È
#define MAX_PASSWD_LEN_EX		    64      //ÃÜÂë³¤¶È64Î»
#define GUID_LEN				16      //GUID³¤¶È
#define DEV_TYPE_NAME_LEN		24      //Éè±¸ÀàÐÍÃû³Æ³¤¶È
#define SERIALNO_LEN		    48      //ÐòÁÐºÅ³¤¶È
#define MACADDR_LEN			    6       //macµØÖ·³¤¶È
#define MAC_ADDRESS_NUM         48      //MacµØÖ·³¤¶È
#define MAX_SENCE_NUM           16      //³¡¾°Êý
#define RULE_REGION_MAX         128      //×î´óÇøÓò
#define MAX_ETHERNET		    2       //Éè±¸¿ÉÅäÒÔÌ«ÍøÂç
#define MAX_NETWORK_CARD        4       //Éè±¸¿ÉÅä×î´óÍø¿¨ÊýÄ¿
#define PATHNAME_LEN            128     //Â·¾¶³¤¶È
#define MAX_PRESET_V13          16      //Ô¤ÖÃµã
#define MAX_TEST_COMMAND_NUM   32      //²úÏß²âÊÔ±£Áô×Ö¶Î³¤¶È
#define MAX_NUMBER_LEN            32        //ºÅÂë×î´ó³¤¶È
#define MAX_NAME_LEN            128        //Éè±¸Ãû³Æ×î´ó³¤¶È
#define MAX_INDEX_LED           8       //LEDË÷Òý×î´óÖµ 2013-11-19
#define    MAX_CUSTOM_DIR            64      //×Ô¶¨ÒåÄ¿Â¼×î´ó³¤¶È
#define URL_LEN_V40             256        //×î´óURL³¤¶È
#define CLOUD_NAME_LEN          48      //ÔÆ´æ´¢·þÎñÆ÷ÓÃ»§Ãû³¤¶È
#define CLOUD_PASSWD_LEN        48      //ÔÆ´æ´¢·þÎñÆ÷ÃÜÂë³¤¶È
#define MAX_SENSORNAME_LEN      64      //´«¸ÐÆ÷Ãû³Æ³¤¶È
#define MAX_SENSORCHAN_LEN      32      //´«¸ÐÆ÷Í¨µÀ³¤¶È
#define MAX_DESCRIPTION_LEN     32      //´«¸ÐÆ÷ÃèÊö³¤¶È
#define MAX_DEVNAME_LEN_EX      64      //Éè±¸Ãû³Æ³¤¶ÈÀ©Õ¹
#define MAX_FILE_PATH_LEN       256     //ÎÄ¼þÂ·¾¶³¤¶È 
#define MAX_TMEVOICE_LEN        64      //TMEÓïÒô²¥±¨ÄÚÈÝ³¤¶È

#define MAX_NUM_INPUT_BOARD     512     //ÊäÈë°å×î´ó¸öÊý
#define MAX_SHIPSDETE_REGION_NUM    8 // ´¬Ö»¼ì²âÇøÓòÁÐ±í×î´óÊýÄ¿

#define MAX_RES_NUM_ONE_VS_INPUT_CHAN  8  //Ò»¸öÐéÄâÆÁÊäÈëÍ¨µÀÖ§³ÖµÄ·Ö±æÂÊµÄ×î´óÊýÁ¿
#define MAX_VS_INPUT_CHAN_NUM  16  //ÐéÄâÆÁÊäÈëÍ¨µÀ×î´óÊýÁ¿

//Ð¡¼ä¾àLED¿ØÖÆÆ÷
#define  MAX_LEN_TEXT_CONTENT    128  //×Ö·ûÄÚÈÝ³¤¶È
#define  MAX_NUM_INPUT_SOURCE_TEXT    32    //ÐÅºÅÔ´¿Éµþ¼ÓµÄÎÄ±¾ÊýÁ¿
#define  MAX_NUM_OUTPUT_CHANNEL  512  //LEDÇøÓò°üº¬µÄÊä³ö¿Ú¸öÊý

//×Ó´°¿Ú½âÂëOSD
#define MAX_LEN_OSD_CONTENT  256  //OSDÐÅÏ¢×î´ó³¤¶È
#define MAX_NUM_OSD_ONE_SUBWND  8  //µ¥¸ö×Ó´°¿ÚÖ§³ÖµÄ×î´óOSDÊýÁ¿
#define MAX_NUM_SPLIT_WND  64 //µ¥¸ö´°¿ÚÖ§³ÖµÄ×î´ó·ÖÆÁ´°¿ÚÊýÁ¿£¨¼´×Ó´°¿ÚÊýÁ¿£©

//2013-11-19
#define MAX_DEVNAME_LEN         32      //Éè±¸Ãû³Æ×î´ó³¤¶È
#define MAX_LED_INFO            256     //ÆÁÄ»×ÖÌåÏÔÊ¾ÐÅÏ¢×î´ó³¤¶È
#define MAX_TIME_LEN            32      //Ê±¼ä×î´ó³¤¶È
#define MAX_CARD_LEN            24      //¿¨ºÅ×î´ó³¤¶È
#define MAX_OPERATORNAME_LEN    32      //²Ù×÷ÈËÔ±Ãû³Æ×î´ó³¤¶È

#define THERMOMETRY_ALARMRULE_NUM 40     //ÈÈ³ÉÏñ±¨¾¯¹æÔòÊý
#define MAX_THERMOMETRY_REGION_NUM  40  //ÈÈ¶ÈÍ¼¼ì²âÇøÓò×î´óÖ§³ÖÊý
#define MAX_THERMOMETRY_DIFFCOMPARISON_NUM  40 //ÈÈ³ÉÏñÎÂ²î±¨¾¯¹æÔòÊý
#define MAX_SHIPS_NUM           20      //´¬Ö»¼ì²â×î´ó´¬Ö»Êý
#define KEY_WORD_NUM             3 //¹Ø¼ü×Ö¸öÊý
#define KEY_WORD_LEN            128  //¹Ø¼ü×Ö³¤¶È
//Òì²½µÇÂ¼»Øµ÷×´Ì¬ºê¶¨Òå
#define ASYN_LOGIN_SUCC            1        //Òì²½µÇÂ¼³É¹¦
#define ASYN_LOGIN_FAILED        0        //Òì²½µÇÂ¼Ê§°Ü


#define MAX_TIMESEGMENT_V30        8       //9000Éè±¸×î´óÊ±¼ä¶ÎÊý
#define MAX_TIMESEGMENT            4       //8000Éè±¸×î´óÊ±¼ä¶ÎÊý
#define MAX_ICR_NUM             8       //×¥ÅÄ»úºìÍâÂË¹âÆ¬Ô¤ÖÃµãÊý2013-07-09

#define MAX_SHELTERNUM            4       //8000Éè±¸×î´óÕÚµ²ÇøÓòÊý
#define MAX_DAYS                7       //Ã¿ÖÜÌìÊý
#define PHONENUMBER_LEN            32      //pppoe²¦ºÅºÅÂë×î´ó³¤¶È
#define MAX_ACCESSORY_CARD      256      //Åä¼þ°åÐÅÏ¢×î´ó³¤¶È
#define MAX_DISKNUM_V30            33        //9000Éè±¸×î´óÓ²ÅÌÊý/* ×î¶à33¸öÓ²ÅÌ(°üÀ¨16¸öÄÚÖÃSATAÓ²ÅÌ¡¢1¸öeSATAÓ²ÅÌºÍ16¸öNFSÅÌ) */
#define MAX_DISKNUM                16      //8000Éè±¸×î´óÓ²ÅÌÊý
#define MAX_DISKNUM_V10            8       //1.2°æ±¾Ö®Ç°°æ±¾

#define MAX_WINDOW_V30            32      //9000Éè±¸±¾µØÏÔÊ¾×î´ó²¥·Å´°¿ÚÊý
#define MAX_WINDOW_V40            64      //Netra 2.3.1À©Õ¹
#define MAX_WINDOW                16      //8000Éè±¸×î´óÓ²ÅÌÊý
#define MAX_VGA_V30                4       //9000Éè±¸×î´ó¿É½ÓVGAÊý
#define MAX_VGA                    1       //8000Éè±¸×î´ó¿É½ÓVGAÊý

#define MAX_USERNUM_V30            32      //9000Éè±¸×î´óÓÃ»§Êý
#define MAX_USERNUM                16      //8000Éè±¸×î´óÓÃ»§Êý
#define MAX_EXCEPTIONNUM_V30    32      //9000Éè±¸×î´óÒì³£´¦ÀíÊý
#define MAX_EXCEPTIONNUM        16      //8000Éè±¸×î´óÒì³£´¦ÀíÊý
#define MAX_LINK                6       //8000Éè±¸µ¥Í¨µÀ×î´óÊÓÆµÁ÷Á¬½ÓÊý
#define MAX_ITC_EXCEPTIONOUT    32      //×¥ÅÄ»ú×î´ó±¨¾¯Êä³ö
#define MAX_SCREEN_DISPLAY_LEN            512    //ÆÁÄ»ÏÔÊ¾×Ö·û³¤¶È

#define MAX_DECPOOLNUM            4       //µ¥Â·½âÂëÆ÷Ã¿¸ö½âÂëÍ¨µÀ×î´ó¿ÉÑ­»·½âÂëÊý
#define MAX_DECNUM                4       //µ¥Â·½âÂëÆ÷µÄ×î´ó½âÂëÍ¨µÀÊý£¨Êµ¼ÊÖ»ÓÐÒ»¸ö£¬ÆäËûÈý¸ö±£Áô£©
#define MAX_TRANSPARENTNUM        2       //µ¥Â·½âÂëÆ÷¿ÉÅäÖÃ×î´óÍ¸Ã÷Í¨µÀÊý
#define MAX_CYCLE_CHAN            16      //µ¥Â·½âÂëÆ÷×î´óÂÖÑ²Í¨µÀÊý
#define MAX_CYCLE_CHAN_V30      64      //×î´óÂÖÑ²Í¨µÀÊý£¨À©Õ¹£©
#define MAX_DIRNAME_LENGTH        80      //×î´óÄ¿Â¼³¤¶È
#define MAX_WINDOWS                16      //×î´ó´°¿ÚÊý


#define MAX_STRINGNUM_V30        8        //9000Éè±¸×î´óOSD×Ö·ûÐÐÊýÊý
#define MAX_STRINGNUM            4       //8000Éè±¸×î´óOSD×Ö·ûÐÐÊýÊý
#define MAX_STRINGNUM_EX        8       //8000¶¨ÖÆÀ©Õ¹
#define MAX_AUXOUT_V30            16      //9000Éè±¸×î´ó¸¨ÖúÊä³öÊý
#define MAX_AUXOUT                4       //8000Éè±¸×î´ó¸¨ÖúÊä³öÊý
#define MAX_HD_GROUP            16      //9000Éè±¸×î´óÓ²ÅÌ×éÊý
#define MAX_HD_GROUP_V40        32      //Éè±¸×î´óÓ²ÅÌ×éÊý
#define MAX_NFS_DISK            8       //8000Éè±¸×î´óNFSÓ²ÅÌÊý

#define IW_ESSID_MAX_SIZE        32      //WIFIµÄSSIDºÅ³¤¶È
#define IW_ENCODING_TOKEN_MAX    32      //WIFIÃÜËø×î´ó×Ö½ÚÊý
#define MAX_SERIAL_NUM            64        //×î¶àÖ§³ÖµÄÍ¸Ã÷Í¨µÀÂ·Êý
#define MAX_DDNS_NUMS            10      //9000Éè±¸×î´ó¿ÉÅäddnsÊý
#define MAX_DOMAIN_NAME            64        /* ×î´óÓòÃû³¤¶È */
#define MAX_EMAIL_ADDR_LEN        48      //×î´óemailµØÖ·³¤¶È
#define MAX_EMAIL_PWD_LEN        32      //×î´óemailÃÜÂë³¤¶È
#define MAX_SLAVECAMERA_NUM     8       //´ÓÉãÏñ»ú¸öÊý
#define MAX_CALIB_NUM           6       //±ê¶¨µãµÄ¸öÊý
#define MAX_CALIB_NUM_EX        20      //À©Õ¹±ê¶¨µãµÄ¸öÊý   
#define MAX_LEDDISPLAYINFO_LEN  1024    //×î´óLEDÆÁÏÔÊ¾³¤¶È
#define MAX_PEOPLE_DETECTION_NUM    8  //×î´óÈËÔ±¼ì²âÇøÓòÊý
#define MAXPROGRESS                100     //»Ø·ÅÊ±µÄ×î´ó°Ù·ÖÂÊ
#define MAX_SERIALNUM            2       //8000Éè±¸Ö§³ÖµÄ´®¿ÚÊý 1-232£¬ 2-485
#define CARDNUM_LEN                20      //¿¨ºÅ³¤¶È
#define CARDNUM_LEN_OUT            32      //Íâ²¿½á¹¹Ìå¿¨ºÅ³¤¶È
#define MAX_VIDEOOUT_V30        4       //9000Éè±¸µÄÊÓÆµÊä³öÊý
#define MAX_VIDEOOUT            2       //8000Éè±¸µÄÊÓÆµÊä³öÊý

#define MAX_PRESET_V30            256        /* 9000Éè±¸Ö§³ÖµÄÔÆÌ¨Ô¤ÖÃµãÊý */
#define MAX_TRACK_V30            256        /* 9000Éè±¸Ö§³ÖµÄÔÆÌ¨¹ì¼£Êý */
#define MAX_CRUISE_V30            256        /* 9000Éè±¸Ö§³ÖµÄÔÆÌ¨Ñ²º½Êý */
#define MAX_PRESET                128        /* 8000Éè±¸Ö§³ÖµÄÔÆÌ¨Ô¤ÖÃµãÊý */
#define MAX_TRACK                128        /* 8000Éè±¸Ö§³ÖµÄÔÆÌ¨¹ì¼£Êý */
#define MAX_CRUISE                128        /* 8000Éè±¸Ö§³ÖµÄÔÆÌ¨Ñ²º½Êý */

#define MAX_PRESET_V40            300        /* ÔÆÌ¨Ö§³ÖµÄ×î´óÔ¤ÖÃµãÊý */
#define MAX_CRUISE_POINT_NUM    128     /* ×î´óÖ§³ÖµÄÑ²º½µãµÄ¸öÊý */

#define CRUISE_MAX_PRESET_NUMS    32         /* Ò»ÌõÑ²º½×î¶àµÄÑ²º½µã */
#define MAX_FACE_PIC_NUM        30      /*ÈËÁ³×ÓÍ¼¸öÊý*/
#define LOCKGATE_TIME_NUM       4       //ËøÕ¢Ê±¼ä¶Î¸öÊý

#define MAX_SERIAL_PORT         8       //9000Éè±¸Ö§³Ö232´®¿ÚÊý
#define MAX_PREVIEW_MODE        8       /* Éè±¸Ö§³Ö×î´óÔ¤ÀÀÄ£Ê½ÊýÄ¿ 1»­Ãæ,4»­Ãæ,9»­Ãæ,16»­Ãæ.... */
#define MAX_MATRIXOUT           16      /* ×î´óÄ£Äâ¾ØÕóÊä³ö¸öÊý */
#define LOG_INFO_LEN            11840   /* ÈÕÖ¾¸½¼ÓÐÅÏ¢ */
#define DESC_LEN                16      /* ÔÆÌ¨ÃèÊö×Ö·û´®³¤¶È */
#define PTZ_PROTOCOL_NUM        200     /* 9000×î´óÖ§³ÖµÄÔÆÌ¨Ð­ÒéÊý */
#define IPC_PROTOCOL_NUM        50   //ipc Ð­Òé×î´ó¸öÊý

#define MAX_AUDIO                1       //8000ÓïÒô¶Ô½²Í¨µÀÊý
#define MAX_AUDIO_V30            2       //9000ÓïÒô¶Ô½²Í¨µÀÊý
#define MAX_CHANNUM                16      //8000Éè±¸×î´óÍ¨µÀÊý
#define MAX_ALARMIN                16      //8000Éè±¸×î´ó±¨¾¯ÊäÈëÊý
#define MAX_ALARMOUT            4       //8000Éè±¸×î´ó±¨¾¯Êä³öÊý
//9000 IPC½ÓÈë
#define MAX_ANALOG_CHANNUM      32      //×î´ó32¸öÄ£ÄâÍ¨µÀ
#define MAX_ANALOG_ALARMOUT     32      //×î´ó32Â·Ä£Äâ±¨¾¯Êä³ö 
#define MAX_ANALOG_ALARMIN      32      //×î´ó32Â·Ä£Äâ±¨¾¯ÊäÈë

#define MAX_IP_DEVICE           32      //ÔÊÐí½ÓÈëµÄ×î´óIPÉè±¸Êý
#define MAX_IP_DEVICE_V40       64      // ÔÊÐí½ÓÈëµÄ×î´óIPÉè±¸Êý ×î¶à¿ÉÌí¼Ó64¸ö IVMS 2000µÈÐÂÉè±¸
#define MAX_IP_CHANNEL          32      //ÔÊÐí¼ÓÈëµÄ×î¶àIPÍ¨µÀÊý
#define MAX_IP_ALARMIN          128     //ÔÊÐí¼ÓÈëµÄ×î¶à±¨¾¯ÊäÈëÊý
#define MAX_IP_ALARMOUT         64      //ÔÊÐí¼ÓÈëµÄ×î¶à±¨¾¯Êä³öÊý
#define MAX_IP_ALARMIN_V40      4096    //ÔÊÐí¼ÓÈëµÄ×î¶à±¨¾¯ÊäÈëÊý
#define MAX_IP_ALARMOUT_V40     4096    //ÔÊÐí¼ÓÈëµÄ×î¶à±¨¾¯Êä³öÊý

#define MAX_RECORD_FILE_NUM     20      // Ã¿´ÎÉ¾³ý»òÕß¿ÌÂ¼µÄ×î´óÎÄ¼þÊý
//SDK_V31 ATM
#define MAX_ACTION_TYPE            12        //×Ô¶¨ÒåÐ­Òéµþ¼Ó½»Ò×ÐÐÎª×î´óÐÐÎª¸öÊý 
#define MAX_ATM_PROTOCOL_NUM    256   //Ã¿ÖÖÊäÈë·½Ê½¶ÔÓ¦µÄATM×î´óÐ­ÒéÊý
#define ATM_CUSTOM_PROTO        1025   //×Ô¶¨ÒåÐ­Òé ÖµÎª1025
#define ATM_PROTOCOL_SORT       4       //ATMÐ­Òé¶ÎÊý 
#define ATM_DESC_LEN            32      //ATMÃèÊö×Ö·û´®³¤¶È
// SDK_V31 ATM


#define MAX_IPV6_LEN              64   //IPv6µØÖ·×î´ó³¤¶È
#define MAX_EVENTID_LEN         64   //ÊÂ¼þID³¤¶È

#define INVALID_VALUE_UINT32    0xffffffff   //ÎÞÐ§Öµ
#define MAX_CHANNUM_V40         512
#define MAX_MULTI_AREA_NUM      24

//SDK Â¼²¥Ö÷»ú
#define COURSE_NAME_LEN                32    //¿Î³ÌÃû³Æ
#define INSTRUCTOR_NAME_LEN            16    //ÊÚ¿Î½ÌÊ¦
#define COURSE_DESCRIPTION_LEN        256    //¿Î³ÌÐÅÏ¢

#define MAX_TIMESEGMENT_V40            16    //Ã¿½Ú¿ÎÐÅÏ¢


#define MAX_MIX_CHAN_NUM        16    /*Ä¿Ç°Ö§³ÖµÄ×î´ó»ìÒôÍ¨µÀÊý£¬±³¾°Í¨µÀ + MIC + LINE IN + ×î¶à4¸öÐ¡»­Ãæ*/ 
#define MAX_LINE_IN_CHAN_NUM    16    //×î´óline inÍ¨µÀÊý
#define MAX_MIC_CHAN_NUM        16    //×î´óMICÍ¨µÀÊý
#define INQUEST_CASE_NO_LEN        64    //ÉóÑ¶°¸¼þ±àºÅ³¤¶È
#define INQUEST_CASE_NAME_LEN    64    //ÉóÑ¶°¸¼þÃû³Æ³¤¶È
#define CUSTOM_INFO_LEN            64    //×Ô¶¨ÒåÐÅÏ¢³¤¶È
#define INQUEST_CASE_LEN        64    //ÉóÑ¶ÐÅÏ¢³¤¶È


#define MAX_FILE_ID_LEN         128    //ÊÓÍ¼¿âÏîÄ¿ÖÐÎÄ¼þIDµÄ×î´ó³¤¶È
#define MAX_PIC_NAME_LEN        128 //Í¼Æ¬Ãû³Æ³¤¶È

/* ×î´óÖ§³ÖµÄÍ¨µÀÊý ×î´óÄ£Äâ¼ÓÉÏ×î´óIPÖ§³Ö */
#define MAX_CHANNUM_V30               ( MAX_ANALOG_CHANNUM + MAX_IP_CHANNEL )//64
#define MAX_ALARMOUT_V40             (MAX_IP_ALARMOUT_V40 +MAX_ANALOG_ALARMOUT) //4128
#define MAX_ALARMOUT_V30              ( MAX_ANALOG_ALARMOUT + MAX_IP_ALARMOUT )//96
#define MAX_ALARMIN_V30               ( MAX_ANALOG_ALARMIN + MAX_IP_ALARMIN )//160
#define MAX_ALARMIN_V40             (MAX_IP_ALARMIN_V40 +MAX_ANALOG_ALARMOUT) //4128
#define MAX_ANALOG_ALARM_WITH_VOLT_LIMIT    16 //ÊÜµçÑ¹ÏÞ¶¨µÄÄ£Äâ±¨¾¯×î´óÊäÈëÊý

#define MAX_ROIDETECT_NUM       8    //Ö§³ÖµÄROIÇøÓòÊý
#define MAX_LANERECT_NUM        5    //×î´ó³µÅÆÊ¶±ðÇøÓòÊý
#define MAX_FORTIFY_NUM         10   //×î´ó²¼·À¸öÊý
#define MAX_INTERVAL_NUM        4    //×î´óÊ±¼ä¼ä¸ô¸öÊý
#define MAX_CHJC_NUM            3    //×î´ó³µÁ¾Ê¡·Ý¼ò³Æ×Ö·û¸öÊý
#define MAX_VL_NUM              5    //×î´óÐéÄâÏßÈ¦¸öÊý
#define MAX_DRIVECHAN_NUM       16   //×î´ó³µµÀÊý
#define MAX_COIL_NUM            3    //×î´óÏßÈ¦¸öÊý
#define MAX_SIGNALLIGHT_NUM     6   //×î´óÐÅºÅµÆ¸öÊý
#define LEN_16                    16
#define LEN_32                    32
#define LEN_31                    31 
#define MAX_CABINET_COUNT       8    //×î´óÖ§³Ö»ú¹ñÊýÁ¿
#define MAX_ID_LEN              48
#define MAX_PARKNO_LEN          16
#define MAX_ALARMREASON_LEN     32
#define MAX_UPGRADE_INFO_LEN    48 //»ñÈ¡Éý¼¶ÎÄ¼þÆ¥ÅäÐÅÏ¢(Ä£ºýÉý¼¶)
#define MAX_CUSTOMDIR_LEN       32 //×Ô¶¨ÒåÄ¿Â¼³¤¶È
#define MAX_LED_INFO_LEN        512//LEDÄÚÈÝ³¤¶È
#define MAX_VOICE_INFO_LEN      128//ÓïÒô²¥±¨ÄÚÈÝ³¤¶È
#define MAX_LITLE_INFO_LEN      64 //Ö½Æ±±êÌâÄÚÈÝ³¤¶È
#define MAX_CUSTOM_INFO_LEN     64 //Ö½Æ±×Ô¶¨ÒåÐÅÏ¢ÄÚÈÝ³¤¶È
#define MAX_PHONE_NUM_LEN       16 //ÁªÏµµç»°ÄÚÈÝ³¤¶È
#define MAX_APP_SERIALNUM_LEN   32 //Ó¦ÓÃÐòÁÐºÅ³¤¶È

#define AUDIOTALKTYPE_G722       0
#define AUDIOTALKTYPE_G711_MU    1
#define AUDIOTALKTYPE_G711_A     2
#define AUDIOTALKTYPE_MP2L2      5
#define AUDIOTALKTYPE_G726         6
#define AUDIOTALKTYPE_AAC         7
#define AUDIOTALKTYPE_PCM         8

//packet type
#define FILE_HEAD            0 //file head
#define VIDEO_I_FRAME        1 //video I frame
#define VIDEO_B_FRAME        2 //video B frame
#define VIDEO_P_FRAME        3 //video P frame
#define AUDIO_PACKET        10 //audio packet
#define PRIVT_PACKET        11 //private packet
//E frame
#define HIK_H264_E_FRAME    (1 << 6)   // ÒÔÇ°EÖ¡²»ÓÃÁË,ÉîPÖ¡Ò²Ã»ÓÃµ½
#define MAX_TRANSPARENT_CHAN_NUM      4   //Ã¿¸ö´®¿ÚÔÊÐí½¨Á¢µÄ×î´óÍ¸Ã÷Í¨µÀÊý
#define MAX_TRANSPARENT_ACCESS_NUM    4   //Ã¿¸ö¼àÌý¶Ë¿ÚÔÊÐí½ÓÈëµÄ×î´óÖ÷»úÊý

//ITS
#define MAX_PARKING_STATUS       8    //³µÎ»×´Ì¬ 0´ú±íÎÞ³µ£¬1´ú±íÓÐ³µ£¬2´ú±íÑ¹Ïß(ÓÅÏÈ¼¶×î¸ß), 3ÌØÊâ³µÎ» 
#define MAX_PARKING_NUM             4    //Ò»¸öÍ¨µÀ×î´ó4¸ö³µÎ» (´Ó×óµ½ÓÒ³µÎ» Êý×é0¡«3)

#define MAX_ITS_SCENE_NUM        16   //×î´ó³¡¾°ÊýÁ¿
#define MAX_SCENE_TIMESEG_NUM    16   //×î´ó³¡¾°Ê±¼ä¶ÎÊýÁ¿
#define MAX_IVMS_IP_CHANNEL      128  //×î´óIPÍ¨µÀÊý
#define DEVICE_ID_LEN            48   //Éè±¸±àºÅ³¤¶È
#define MONITORSITE_ID_LEN       48   //¼à²âµã±àºÅ³¤¶È
#define MAX_AUXAREA_NUM          16   //¸¨ÖúÇøÓò×î´óÊýÄ¿
#define MAX_SLAVE_CHANNEL_NUM    16   //×î´ó´ÓÍ¨µÀÊýÁ¿
#define MAX_DEVDESC_LEN          64   //Éè±¸ÃèÊöÐÅÏ¢×î´ó³¤¶È



#define MAX_SECRETKEY_LEN           512     //×î´óÃØÔ¿³¤¶È
#define MAX_INDEX_CODE_LEN          64      //×î´óÐòºÅ³¤¶È
#define MAX_ILLEGAL_LEN          64     //Î¥·¨´úÂë×î´ó×Ö·û³¤¶È
#define CODE_LEN        64  //ÊÚÈ¨Âë
#define ALIAS_LEN       32  //±ðÃû£¬Ö»¶Á
#define MAX_SCH_TASKS_NUM        10

#define MAX_SERVERID_LEN            64 //×î´ó·þÎñÆ÷IDµÄ³¤¶È
#define MAX_SERVERDOMAIN_LEN        128 //·þÎñÆ÷ÓòÃû×î´ó³¤¶È
#define MAX_AUTHENTICATEID_LEN      64 //ÈÏÖ¤ID×î´ó³¤¶È
#define MAX_AUTHENTICATEPASSWD_LEN  32 //ÈÏÖ¤ÃÜÂë×î´ó³¤¶È
#define MAX_SERVERNAME_LEN          64 //×î´ó·þÎñÆ÷ÓÃ»§Ãû 
#define MAX_COMPRESSIONID_LEN       64 //±àÂëIDµÄ×î´ó³¤¶È
#define MAX_SIPSERVER_ADDRESS_LEN   128 //SIP·þÎñÆ÷µØÖ·Ö§³ÖÓòÃûºÍIPµØÖ·
//Ñ¹Ïß±¨¾¯
#define MAX_PlATE_NO_LEN            32   //³µÅÆºÅÂë×î´ó³¤¶È 2013-09-27
#define UPNP_PORT_NUM                12      //upnp¶Ë¿ÚÓ³Éä¶Ë¿ÚÊýÄ¿

#define MAX_PEOPLE_DETECTION_NUM    8  //×î´óÈËÔ±¼ì²âÇøÓòÊý

#define MAX_NOTICE_NUMBER_LEN       32   //¹«¸æ±àºÅ×î´ó³¤¶È
#define MAX_NOTICE_THEME_LEN        64   //¹«¸æÖ÷Ìâ×î´ó³¤¶È
#define MAX_NOTICE_DETAIL_LEN       1024 //¹«¸æÏêÇé×î´ó³¤¶È
#define MAX_NOTICE_PIC_NUM          6    //¹«¸æÐÅÏ¢×î´óÍ¼Æ¬ÊýÁ¿
#define MAX_DEV_NUMBER_LEN          32   //Éè±¸±àºÅ×î´ó³¤¶È



#define HOLIDAY_GROUP_NAME_LEN          32  //¼ÙÈÕ×éÃû³Æ³¤¶È
#define MAX_HOLIDAY_PLAN_NUM            16  //¼ÙÈÕ×é×î´ó¼ÙÈÕ¼Æ»®Êý
#define TEMPLATE_NAME_LEN               32  //¼Æ»®Ä£°åÃû³Æ³¤¶È
#define MAX_HOLIDAY_GROUP_NUM           16   //¼Æ»®Ä£°å×î´ó¼ÙÈÕ×éÊý
#define DOOR_NAME_LEN                   32  //ÃÅÃû³Æ
#define STRESS_PASSWORD_LEN             8   //Ð²ÆÈÃÜÂë³¤¶È
#define SUPER_PASSWORD_LEN              8   //Ð²ÆÈÃÜÂë³¤¶È
#define GROUP_NAME_LEN                  32  //Èº×éÃû³Æ³¤¶È
#define GROUP_COMBINATION_NUM           8   //Èº×é×éºÏÊý
#define MULTI_CARD_GROUP_NUM            4   //µ¥ÃÅ×î´ó¶àÖØ¿¨×éÊý
#define ACS_CARD_NO_LEN                 32  //ÃÅ½û¿¨ºÅ³¤¶È
#define CARD_PASSWORD_LEN               8   //¿¨ÃÜÂë³¤¶È
#define MAX_DOOR_NUM                    32  //×î´óÃÅÊý
#define MAX_CARD_RIGHT_PLAN_NUM         4   //¿¨È¨ÏÞ×î´ó¼Æ»®¸öÊý
#define MAX_GROUP_NUM_128               128 //×î´óÈº×éÊý
#define MAX_CARD_READER_NUM             64  //×î´ó¶Á¿¨Æ÷Êý
#define MAX_SNEAK_PATH_NODE             8   //×î´óºóÐø¶Á¿¨Æ÷Êý
#define MAX_MULTI_DOOR_INTERLOCK_GROUP  8   //×î´ó¶àÃÅ»¥Ëø×éÊý
#define MAX_INTER_LOCK_DOOR_NUM         8   //Ò»¸ö¶àÃÅ»¥Ëø×éÖÐ×î´ó»¥ËøÃÅÊý
#define MAX_CASE_SENSOR_NUM             8   //×î´ócase sensor´¥·¢Æ÷Êý
#define MAX_DOOR_NUM_256                256 //×î´óÃÅÊý
#define MAX_READER_ROUTE_NUM            16  //×î´óË¢¿¨Ñ­ÐòÂ·¾¶ 
#define MAX_FINGER_PRINT_NUM            10  //×î´óÖ¸ÎÆ¸öÊý
#define MAX_CARD_READER_NUM_512            512 //×î´ó¶Á¿¨Æ÷Êý

#define ERROR_MSG_LEN      32 //ÏÂ·¢´íÎóÐÅÏ¢

#define PER_RING_PORT_NUM                2   //Ã¿¸ö»·µÄ¶Ë¿ÚÊý
#define SENSORNAME_LEN                  32  //´«¸ÐÆ÷Ãû³Æ³¤¶È
#define MAX_SENSORDESCR_LEN             64  //´«¸ÐÆ÷ÃèÊö³¤¶È
#define MAX_DNS_SERVER_NUM              2 //×î´óDNS¸öÊý

#define WEP_KEY_MAX_SIZE                32 //×î´óWEP¼ÓÃÜÃÜÔ¿³¤¶È
#define WEP_KEY_MAX_NUM                 4  //×î´óWEP¼ÓÃÜÃÜÔ¿¸öÊý
#define WPA_KEY_MAX_SIZE                64 //×î´óWPA¹²ÏíÃÜÔ¿³¤¶È

#define MAX_SINGLE_FTPPICNAME_LEN       20 //×î´óµ¥¸öFTPÍ¨µÀÃû³Æ
#define MAX_CAMNAME_LEN                 32 //×î´óÍ¨µÀÃû³Æ
#define MAX_FTPNAME_NUM                 12 //TFPÃû³ÆÊý


#define MAX_IDCODE_LEN      128 //  Ê¶±ðÂë×î´ó³¤¶È
#define MAX_VERSIIN_LEN     64  //°æ±¾×î´ó³¤¶È
#define MAX_IDCODE_NUM      32  // Ê¶±ðÂë¸öÊý
#define SDK_LEN_2048        2048

#define RECT_POINT_NUM                    4    //¾ØÐÎ½ÇÊý

#define MAX_PUBLIC_KEY_LEN 512 // ×î´ó¹«Ô¿³¤¶È
#define CHIP_SERIALNO_LEN 32 //¼ÓÃÜÐ¾Æ¬ÐòÁÐºÅ³¤¶È
#define ENCRYPT_DEV_ID_LEN        20  //Éè±¸ID³¤¶È

//MCUÏà¹ØµÄ
#define MAX_SEARCH_ID_LEN               36  //ËÑË÷±êÊ¶·û×î´ó³¤¶È
#define TERMINAL_NAME_LEN               64  //ÖÕ¶ËÃû³Æ³¤¶È
#define MAX_URL_LEN                     512 //URL³¤¶È
#define REGISTER_NAME_LEN               64 //ÖÕ¶Ë×¢²áGKÃû³Æ×î´ó³¤¶È

//¹âÏË
#define MAX_PORT_NUM            64  //×î´ó¶Ë¿ÚÊý
#define MAX_SINGLE_CARD_PORT_NO 4   //¹âÏËÊÕ·¢Æ÷µ¥¿¨×î´ó¶Ë¿ÚÊý
#define MAX_FUNC_CARD_NUM       32  //¹âÏËÊÕ·¢Æ÷×î´ó¹¦ÄÜ¿¨Êý
#define MAX_FC_CARD_NUM         33  //¹âÏËÊÕ·¢Æ÷×î´ó¿¨Êý
#define MAX_REMARKS_LEN         128 //×¢ÊÍ×î´ó³¤¶È
#define MAX_OUTPUT_PORT_NUM                32    //µ¥Â·Êä³ö°üº¬µÄ×î´óÊä³ö¶Ë¿ÚÊý
#define MAX_SINGLE_PORT_RECVCARD_NUM    64    //µ¥¸ö¶Ë¿ÚÁ¬½ÓµÄ×î´ó½ÓÊÕ¿¨Êý
#define MAX_GAMMA_X_VALUE                256    //GAMMA±íXÖáÈ¡Öµ¸öÊý

#define ABNORMAL_INFO_NUM               4		//Òì³£Ê±¼ä¶Î¸öÊý

#define PLAYLIST_NAME_LEN                64            //²¥·Å±íÃû³Æ³¤¶È 
#define PLAYLIST_ITEM_NUM                64            //²¥·ÅÏîÊýÄ¿  
/*******************È«¾Ö´íÎóÂë begin**********************/    
#define NET_DVR_NOERROR                     0    //Ã»ÓÐ´íÎó
#define NET_DVR_PASSWORD_ERROR                 1    //ÓÃ»§ÃûÃÜÂë´íÎó
#define NET_DVR_NOENOUGHPRI                 2    //È¨ÏÞ²»×ã
#define NET_DVR_NOINIT                         3    //Ã»ÓÐ³õÊ¼»¯
#define NET_DVR_CHANNEL_ERROR                 4    //Í¨µÀºÅ´íÎó
#define NET_DVR_OVER_MAXLINK                 5    //Á¬½Óµ½DVRµÄ¿Í»§¶Ë¸öÊý³¬¹ý×î´ó
#define NET_DVR_VERSIONNOMATCH                6    //°æ±¾²»Æ¥Åä
#define NET_DVR_NETWORK_FAIL_CONNECT        7    //Á¬½Ó·þÎñÆ÷Ê§°Ü
#define NET_DVR_NETWORK_SEND_ERROR            8    //Ïò·þÎñÆ÷·¢ËÍÊ§°Ü
#define NET_DVR_NETWORK_RECV_ERROR            9    //´Ó·þÎñÆ÷½ÓÊÕÊý¾ÝÊ§°Ü
#define NET_DVR_NETWORK_RECV_TIMEOUT        10    //´Ó·þÎñÆ÷½ÓÊÕÊý¾Ý³¬Ê±
#define NET_DVR_NETWORK_ERRORDATA            11    //´«ËÍµÄÊý¾ÝÓÐÎó
#define NET_DVR_ORDER_ERROR                    12    //µ÷ÓÃ´ÎÐò´íÎó
#define NET_DVR_OPERNOPERMIT                13    //ÎÞ´ËÈ¨ÏÞ
#define NET_DVR_COMMANDTIMEOUT                14    //DVRÃüÁîÖ´ÐÐ³¬Ê±
#define NET_DVR_ERRORSERIALPORT                15    //´®¿ÚºÅ´íÎó
#define NET_DVR_ERRORALARMPORT                16    //±¨¾¯¶Ë¿Ú´íÎó
#define NET_DVR_PARAMETER_ERROR             17  //²ÎÊý´íÎó
#define NET_DVR_CHAN_EXCEPTION                18    //·þÎñÆ÷Í¨µÀ´¦ÓÚ´íÎó×´Ì¬
#define NET_DVR_NODISK                        19    //Ã»ÓÐÓ²ÅÌ
#define NET_DVR_ERRORDISKNUM                20    //Ó²ÅÌºÅ´íÎó
#define NET_DVR_DISK_FULL                    21    //·þÎñÆ÷Ó²ÅÌÂú
#define NET_DVR_DISK_ERROR                    22    //·þÎñÆ÷Ó²ÅÌ³ö´í
#define NET_DVR_NOSUPPORT                    23    //·þÎñÆ÷²»Ö§³Ö
#define NET_DVR_BUSY                        24    //·þÎñÆ÷Ã¦
#define NET_DVR_MODIFY_FAIL                    25    //·þÎñÆ÷ÐÞ¸Ä²»³É¹¦
#define NET_DVR_PASSWORD_FORMAT_ERROR        26    //ÃÜÂëÊäÈë¸ñÊ½²»ÕýÈ·
#define NET_DVR_DISK_FORMATING                27    //Ó²ÅÌÕýÔÚ¸ñÊ½»¯£¬²»ÄÜÆô¶¯²Ù×÷
#define NET_DVR_DVRNORESOURCE                28    //DVR×ÊÔ´²»×ã
#define    NET_DVR_DVROPRATEFAILED                29  //DVR²Ù×÷Ê§°Ü
#define NET_DVR_OPENHOSTSOUND_FAIL             30  //´ò¿ªPCÉùÒôÊ§°Ü
#define NET_DVR_DVRVOICEOPENED                 31  //·þÎñÆ÷ÓïÒô¶Ô½²±»Õ¼ÓÃ
#define    NET_DVR_TIMEINPUTERROR                32  //Ê±¼äÊäÈë²»ÕýÈ·
#define    NET_DVR_NOSPECFILE                    33  //»Ø·ÅÊ±·þÎñÆ÷Ã»ÓÐÖ¸¶¨µÄÎÄ¼þ
#define NET_DVR_CREATEFILE_ERROR            34    //´´½¨ÎÄ¼þ³ö´í
#define    NET_DVR_FILEOPENFAIL                35  //´ò¿ªÎÄ¼þ³ö´í
#define    NET_DVR_OPERNOTFINISH                36  //ÉÏ´ÎµÄ²Ù×÷»¹Ã»ÓÐÍê³É
#define    NET_DVR_GETPLAYTIMEFAIL                37  //»ñÈ¡µ±Ç°²¥·ÅµÄÊ±¼ä³ö´í
#define    NET_DVR_PLAYFAIL                    38  //²¥·Å³ö´í
#define NET_DVR_FILEFORMAT_ERROR            39  //ÎÄ¼þ¸ñÊ½²»ÕýÈ·
#define NET_DVR_DIR_ERROR                    40    //Â·¾¶´íÎó
#define NET_DVR_ALLOC_RESOURCE_ERROR        41  //×ÊÔ´·ÖÅä´íÎó
#define NET_DVR_AUDIO_MODE_ERROR            42    //Éù¿¨Ä£Ê½´íÎó
#define NET_DVR_NOENOUGH_BUF                43    //»º³åÇøÌ«Ð¡
#define NET_DVR_CREATESOCKET_ERROR             44    //´´½¨SOCKET³ö´í
#define NET_DVR_SETSOCKET_ERROR                45    //ÉèÖÃSOCKET³ö´í
#define NET_DVR_MAX_NUM                        46    //¸öÊý´ïµ½×î´ó
#define NET_DVR_USERNOTEXIST                47    //ÓÃ»§²»´æÔÚ
#define NET_DVR_WRITEFLASHERROR                48  //Ð´FLASH³ö´í
#define NET_DVR_UPGRADEFAIL                    49  //DVRÉý¼¶Ê§°Ü
#define NET_DVR_CARDHAVEINIT                50  //½âÂë¿¨ÒÑ¾­³õÊ¼»¯¹ý
#define NET_DVR_PLAYERFAILED                51    //µ÷ÓÃ²¥·Å¿âÖÐÄ³¸öº¯ÊýÊ§°Ü
#define NET_DVR_MAX_USERNUM                    52  //Éè±¸¶ËÓÃ»§Êý´ïµ½×î´ó
#define NET_DVR_GETLOCALIPANDMACFAIL        53  //»ñµÃ¿Í»§¶ËµÄIPµØÖ·»òÎïÀíµØÖ·Ê§°Ü
#define NET_DVR_NOENCODEING                    54    //¸ÃÍ¨µÀÃ»ÓÐ±àÂë
#define NET_DVR_IPMISMATCH                    55    //IPµØÖ·²»Æ¥Åä
#define NET_DVR_MACMISMATCH                    56    //MACµØÖ·²»Æ¥Åä
#define NET_DVR_UPGRADELANGMISMATCH            57    //Éý¼¶ÎÄ¼þÓïÑÔ²»Æ¥Åä
#define NET_DVR_MAX_PLAYERPORT                58    //²¥·ÅÆ÷Â·Êý´ïµ½×î´ó
#define NET_DVR_NOSPACEBACKUP                59    //±¸·ÝÉè±¸ÖÐÃ»ÓÐ×ã¹»¿Õ¼ä½øÐÐ±¸·Ý
#define NET_DVR_NODEVICEBACKUP                60    //Ã»ÓÐÕÒµ½Ö¸¶¨µÄ±¸·ÝÉè±¸
#define NET_DVR_PICTURE_BITS_ERROR            61    //Í¼ÏñËØÎ»Êý²»·û£¬ÏÞ24É«
#define NET_DVR_PICTURE_DIMENSION_ERROR        62    //Í¼Æ¬¸ß*¿í³¬ÏÞ£¬ ÏÞ128*256
#define NET_DVR_PICTURE_SIZ_ERROR            63    //Í¼Æ¬´óÐ¡³¬ÏÞ£¬ÏÞ100K
#define NET_DVR_LOADPLAYERSDKFAILED            64    //ÔØÈëµ±Ç°Ä¿Â¼ÏÂPlayer Sdk³ö´í
#define NET_DVR_LOADPLAYERSDKPROC_ERROR        65    //ÕÒ²»µ½Player SdkÖÐÄ³¸öº¯ÊýÈë¿Ú
#define NET_DVR_LOADDSSDKFAILED                66    //ÔØÈëµ±Ç°Ä¿Â¼ÏÂDSsdk³ö´í
#define NET_DVR_LOADDSSDKPROC_ERROR            67    //ÕÒ²»µ½DsSdkÖÐÄ³¸öº¯ÊýÈë¿Ú
#define NET_DVR_DSSDK_ERROR                    68    //µ÷ÓÃÓ²½âÂë¿âDsSdkÖÐÄ³¸öº¯ÊýÊ§°Ü
#define NET_DVR_VOICEMONOPOLIZE                69    //Éù¿¨±»¶ÀÕ¼
#define NET_DVR_JOINMULTICASTFAILED            70    //¼ÓÈë¶à²¥×éÊ§°Ü
#define NET_DVR_CREATEDIR_ERROR                71    //½¨Á¢ÈÕÖ¾ÎÄ¼þÄ¿Â¼Ê§°Ü
#define NET_DVR_BINDSOCKET_ERROR            72    //°ó¶¨Ì×½Ó×ÖÊ§°Ü
#define NET_DVR_SOCKETCLOSE_ERROR            73    //socketÁ¬½ÓÖÐ¶Ï£¬´Ë´íÎóÍ¨³£ÊÇÓÉÓÚÁ¬½ÓÖÐ¶Ï»òÄ¿µÄµØ²»¿É´ï
#define NET_DVR_USERID_ISUSING                74    //×¢ÏúÊ±ÓÃ»§IDÕýÔÚ½øÐÐÄ³²Ù×÷
#define NET_DVR_SOCKETLISTEN_ERROR            75    //¼àÌýÊ§°Ü
#define NET_DVR_PROGRAM_EXCEPTION            76    //³ÌÐòÒì³£
#define NET_DVR_WRITEFILE_FAILED            77    //Ð´ÎÄ¼þÊ§°Ü
#define NET_DVR_FORMAT_READONLY                78  //½ûÖ¹¸ñÊ½»¯Ö»¶ÁÓ²ÅÌ
#define NET_DVR_WITHSAMEUSERNAME            79  //ÓÃ»§ÅäÖÃ½á¹¹ÖÐ´æÔÚÏàÍ¬µÄÓÃ»§Ãû
#define NET_DVR_DEVICETYPE_ERROR            80  /*µ¼Èë²ÎÊýÊ±Éè±¸ÐÍºÅ²»Æ¥Åä*/
#define NET_DVR_LANGUAGE_ERROR              81  /*µ¼Èë²ÎÊýÊ±ÓïÑÔ²»Æ¥Åä*/
#define NET_DVR_PARAVERSION_ERROR           82  /*µ¼Èë²ÎÊýÊ±Èí¼þ°æ±¾²»Æ¥Åä*/
#define NET_DVR_IPCHAN_NOTALIVE             83  /*Ô¤ÀÀÊ±Íâ½ÓIPÍ¨µÀ²»ÔÚÏß*/
#define NET_DVR_RTSP_SDK_ERROR                84    /*¼ÓÔØ¸ßÇåIPCÍ¨Ñ¶¿âStreamTransClient.dllÊ§°Ü*/
#define NET_DVR_CONVERT_SDK_ERROR            85    /*¼ÓÔØ×ªÂë¿âÊ§°Ü*/
#define NET_DVR_IPC_COUNT_OVERFLOW            86  /*³¬³ö×î´óµÄip½ÓÈëÍ¨µÀÊý*/
#define NET_DVR_MAX_ADD_NUM                 87  /*Ìí¼Ó±êÇ©(Ò»¸öÎÄ¼þÆ¬¶Î64)µÈ¸öÊý´ïµ½×î´ó*/
#define NET_DVR_PARAMMODE_ERROR             88 //Í¼ÏñÔöÇ¿ÒÇ£¬²ÎÊýÄ£Ê½´íÎó£¨ÓÃÓÚÓ²¼þÉèÖÃÊ±£¬¿Í»§¶Ë½øÐÐÈí¼þÉèÖÃÊ±´íÎóÖµ£©
#define NET_DVR_CODESPITTER_OFFLINE            89 //ÊÓÆµ×ÛºÏÆ½Ì¨£¬Âë·ÖÆ÷²»ÔÚÏß
#define NET_DVR_BACKUP_COPYING                90  //Éè±¸ÕýÔÚ±¸·Ý
#define NET_DVR_CHAN_NOTSUPPORT             91  // Í¨µÀ²»Ö§³Ö¸Ã²Ù×÷
#define NET_DVR_CALLINEINVALID              92  // ¸ß¶ÈÏßÎ»ÖÃÌ«¼¯ÖÐ»ò³¤¶ÈÏß²»¹»ÇãÐ± 
#define NET_DVR_CALCANCELCONFLICT           93  // È¡Ïû±ê¶¨³åÍ»£¬Èç¹ûÉèÖÃÁË¹æÔò¼°È«¾ÖµÄÊµ¼Ê´óÐ¡³ß´ç¹ýÂË
#define NET_DVR_CALPOINTOUTRANGE            94     // ±ê¶¨µã³¬³ö·¶Î§ 
#define NET_DVR_FILTERRECTINVALID           95  // ³ß´ç¹ýÂËÆ÷²»·ûºÏÒªÇó
#define NET_DVR_DDNS_DEVOFFLINE             96  //Éè±¸Ã»ÓÐ×¢²áµ½ddnsÉÏ
#define NET_DVR_DDNS_INTER_ERROR            97  //DDNS ·þÎñÆ÷ÄÚ²¿´íÎó
#define NET_DVR_FUNCTION_NOT_SUPPORT_OS     98  //´Ë¹¦ÄÜ²»Ö§³Ö¸Ã²Ù×÷ÏµÍ³
#define NET_DVR_DEC_CHAN_REBIND             99  //½âÂëÍ¨µÀ°ó¶¨ÏÔÊ¾Êä³ö´ÎÊýÊÜÏÞ
#define NET_DVR_INTERCOM_SDK_ERROR          100 //¼ÓÔØµ±Ç°Ä¿Â¼ÏÂµÄÓïÒô¶Ô½²¿âÊ§°Ü
#define NET_DVR_NO_CURRENT_UPDATEFILE       101 //Ã»ÓÐÕýÈ·µÄÉý¼¶°ü  
#define NET_DVR_USER_NOT_SUCC_LOGIN         102  //ÓÃ»§»¹Ã»µÇÂ½³É¹¦
#define NET_DVR_USE_LOG_SWITCH_FILE            103  //ÕýÔÚÊ¹ÓÃÈÕÖ¾¿ª¹ØÎÄ¼þ
#define NET_DVR_POOL_PORT_EXHAUST            104  //¶Ë¿Ú³ØÖÐÓÃÓÚ°ó¶¨µÄ¶Ë¿ÚÒÑºÄ¾¡
#define    NET_DVR_PACKET_TYPE_NOT_SUPPORT        105    //ÂëÁ÷·â×°¸ñÊ½´íÎó
#define NET_DVR_IPPARA_IPID_ERROR           106  //IP½ÓÈëÅäÖÃÊ±IPIDÓÐÎó

#define NET_DVR_LOAD_HCPREVIEW_SDK_ERROR           107         //Ô¤ÀÀ×é¼þ¼ÓÔØÊ§°Ü
#define NET_DVR_LOAD_HCVOICETALK_SDK_ERROR         108         //ÓïÒô×é¼þ¼ÓÔØÊ§°Ü
#define NET_DVR_LOAD_HCALARM_SDK_ERROR             109         //±¨¾¯×é¼þ¼ÓÔØÊ§°Ü
#define NET_DVR_LOAD_HCPLAYBACK_SDK_ERROR          110         //»Ø·Å×é¼þ¼ÓÔØÊ§°Ü
#define NET_DVR_LOAD_HCDISPLAY_SDK_ERROR           111         //ÏÔÊ¾×é¼þ¼ÓÔØÊ§°Ü
#define NET_DVR_LOAD_HCINDUSTRY_SDK_ERROR          112         //ÐÐÒµÓ¦ÓÃ×é¼þ¼ÓÔØÊ§°Ü
#define NET_DVR_LOAD_HCGENERALCFGMGR_SDK_ERROR     113         //Í¨ÓÃÅäÖÃ¹ÜÀí×é¼þ¼ÓÔØÊ§°Ü
#define NET_DVR_LOAD_HCCOREDEVCFG_SDK_ERROR        114         //Éè±¸ÅäÖÃºËÐÄ×é¼þ¼ÓÔØÊ§°Ü

#define NET_DVR_CORE_VER_MISMATCH                  121    //µ¥¶À¼ÓÔØ×é¼þÊ±£¬×é¼þÓëcore°æ±¾²»Æ¥Åä
#define NET_DVR_CORE_VER_MISMATCH_HCPREVIEW        122    //Ô¤ÀÀ×é¼þÓëcore°æ±¾²»Æ¥Åä
#define NET_DVR_CORE_VER_MISMATCH_HCVOICETALK      123    //ÓïÒô×é¼þÓëcore°æ±¾²»Æ¥Åä
#define NET_DVR_CORE_VER_MISMATCH_HCALARM          124    //±¨¾¯×é¼þÓëcore°æ±¾²»Æ¥Åä
#define NET_DVR_CORE_VER_MISMATCH_HCPLAYBACK       125    //»Ø·Å×é¼þÓëcore°æ±¾²»Æ¥Åä
#define NET_DVR_CORE_VER_MISMATCH_HCDISPLAY        126    //ÏÔÊ¾×é¼þÓëcore°æ±¾²»Æ¥Åä
#define NET_DVR_CORE_VER_MISMATCH_HCINDUSTRY       127    //ÐÐÒµÓ¦ÓÃ×é¼þÓëcore°æ±¾²»Æ¥Åä
#define NET_DVR_CORE_VER_MISMATCH_HCGENERALCFGMGR  128    //Í¨ÓÃÅäÖÃ¹ÜÀí×é¼þÓëcore°æ±¾²»Æ¥Åä

#define NET_DVR_COM_VER_MISMATCH_HCPREVIEW         136    //Ô¤ÀÀ×é¼þÓëHCNetSDK°æ±¾²»Æ¥Åä
#define NET_DVR_COM_VER_MISMATCH_HCVOICETALK       137    //ÓïÒô×é¼þÓëHCNetSDK°æ±¾²»Æ¥Åä
#define NET_DVR_COM_VER_MISMATCH_HCALARM           138    //±¨¾¯×é¼þÓëHCNetSDK°æ±¾²»Æ¥Åä
#define NET_DVR_COM_VER_MISMATCH_HCPLAYBACK        139    //»Ø·Å×é¼þÓëHCNetSDK°æ±¾²»Æ¥Åä
#define NET_DVR_COM_VER_MISMATCH_HCDISPLAY         140    //ÏÔÊ¾×é¼þÓëHCNetSDK°æ±¾²»Æ¥Åä
#define NET_DVR_COM_VER_MISMATCH_HCINDUSTRY        141    //ÐÐÒµÓ¦ÓÃ×é¼þÓëHCNetSDK°æ±¾²»Æ¥Åä
#define NET_DVR_COM_VER_MISMATCH_HCGENERALCFGMGR   142    //Í¨ÓÃÅäÖÃ¹ÜÀí×é¼þÓëHCNetSDK°æ±¾²»Æ¥Åä

#define NET_DVR_ALIAS_DUPLICATE                150    //±ðÃûÖØ¸´  //2011-08-31 Í¨¹ý±ðÃû»òÕßÐòÁÐºÅÀ´·ÃÎÊÉè±¸µÄÐÂ°æ±¾ddnsµÄÅäÖÃ
#define    NET_DVR_INVALID_COMMUNICATION        151    //ÎÞÐ§Í¨ÐÅ
#define    NET_DVR_USERNAME_NOT_EXIST            152    //ÓÃ»§Ãû²»´æÔÚ£¨ÓÃ»§Ãû²»´æÔÚ£¬IPC5.1.7ÖÐ·¢²¼³öÈ¥ÁË£¬ËùÒÔÉ¾²»µô¡£ºóÐøµÄ²úÆ·Õâ¸ö´íÎóÂëÓÃ²»ÉÏ£©
#define    NET_DVR_USER_LOCKED                    153 //ÓÃ»§±»Ëø¶¨
#define NET_DVR_INVALID_USERID              154 //ÎÞÐ§ÓÃ»§ID
#define NET_DVR_LOW_LOGIN_VERSION           155 //µÇÂ¼°æ±¾µÍ
#define NET_DVR_LOAD_LIBEAY32_DLL_ERROR     156 //¼ÓÔØlibeay32.dll¿âÊ§°Ü
#define NET_DVR_LOAD_SSLEAY32_DLL_ERROR     157 //¼ÓÔØssleay32.dll¿âÊ§°Ü
#define NET_ERR_LOAD_LIBICONV           158 //¼ÓÔØlibiconv¿âÊ§°Ü

#define NET_DVR_SERVER_NOT_EXIST         164 //¶ÔÓ¦µÄ·þÎñÆ÷ÕÒ²»µ½,²éÕÒÊ±ÊäÈëµÄ¹ú¼Ò±àºÅ»òÕß·þÎñÆ÷ÀàÐÍ´íÎó
#define NET_DVR_TEST_SERVER_FAIL_CONNECT            165    //Á¬½Ó²âÊÔ·þÎñÆ÷Ê§°Ü
#define NET_DVR_NAS_SERVER_INVALID_DIR                166    //NAS·þÎñÆ÷¹ÒÔØÄ¿Â¼Ê§°Ü£¬Ä¿Â¼ÎÞÐ§
#define NET_DVR_NAS_SERVER_NOENOUGH_PRI                167    //NAS·þÎñÆ÷¹ÒÔØÄ¿Â¼Ê§°Ü£¬Ã»ÓÐÈ¨ÏÞ
#define NET_DVR_EMAIL_SERVER_NOT_CONFIG_DNS            168    //·þÎñÆ÷Ê¹ÓÃÓòÃû£¬µ«ÊÇÃ»ÓÐÅäÖÃDNS£¬¿ÉÄÜÔì³ÉÓòÃûÎÞÐ§¡£
#define    NET_DVR_EMAIL_SERVER_NOT_CONFIG_GATEWAY        169    //Ã»ÓÐÅäÖÃÍø¹Ø£¬¿ÉÄÜÔì³É·¢ËÍÓÊ¼þÊ§°Ü¡£
#define    NET_DVR_TEST_SERVER_PASSWORD_ERROR            170    //ÓÃ»§ÃûÃÜÂë²»ÕýÈ·£¬²âÊÔ·þÎñÆ÷µÄÓÃ»§Ãû»òÃÜÂë´íÎó
#define    NET_DVR_EMAIL_SERVER_CONNECT_EXCEPTION_WITH_SMTP    171    //Éè±¸ºÍsmtp·þÎñÆ÷½»»¥Òì³£
#define    NET_DVR_FTP_SERVER_FAIL_CREATE_DIR            172    //FTP·þÎñÆ÷´´½¨Ä¿Â¼Ê§°Ü
#define    NET_DVR_FTP_SERVER_NO_WRITE_PIR                173    //FTP·þÎñÆ÷Ã»ÓÐÐ´ÈëÈ¨ÏÞ
#define    NET_DVR_IP_CONFLICT                            174    //IP³åÍ»
#define NET_DVR_INSUFFICIENT_STORAGEPOOL_SPACE      175  //´æ´¢³Ø¿Õ¼äÒÑÂú
#define NET_DVR_STORAGEPOOL_INVALID      176  //ÔÆ·þÎñÆ÷´æ´¢³ØÎÞÐ§,Ã»ÓÐÅäÖÃ´æ´¢³Ø»òÕß´æ´¢³ØID´íÎó
#define NET_DVR_EFFECTIVENESS_REBOOT     177  //ÉúÐ§ÐèÒªÖØÆô
#define NET_ERR_ANR_ARMING_EXIST         178  //¶ÏÍøÐø´«²¼·ÀÁ¬½ÓÒÑ¾­´æÔÚ(¸Ã´íÎóÂëÊÇÔÚHIKË½ÓÐ²¼·ÀÁ¬½Ó½¨Á¢µÄÇé¿öÏÂ£¬ÖØ¸´²¼·ÀµÄ¶ÏÍøÐø´«¹¦ÄÜÊ±£¬·µ»Ø¡£)
#define NET_ERR_UPLOADLINK_EXIST         179  //¶ÏÍøÐø´«ÉÏ´«Á¬½ÓÒÑ¾­´æÔÚ(EHOMEÐ­ÒéºÍHIK SDKÐ­ÒéÊÇ²»ÄÜÍ¬Ê±Ö§³Ö¶ÏÍøÐø´«µÄ£¬µ±Ò»¸öÐ­Òé´æÔÚµÄÊ±ºò£¬ÁíÍâÒ»¸öÁ¬½Ó½¨Á¢»°£¬±¨´íÕâ¸ö´íÎóÂë¡£)
#define NET_ERR_INCORRECT_FILE_FORMAT    180  //µ¼ÈëÎÄ¼þ¸ñÊ½²»ÕýÈ·
#define NET_ERR_INCORRECT_FILE_CONTENT   181  //µ¼ÈëÎÄ¼þÄÚÈÝ²»ÕýÈ·
#define NET_ERR_MAX_HRUDP_LINK           182 //HRUDP Á¬½ÓÊý ³¬¹ýÉè±¸ÏÞÖÆ
// 2010-5-28
// ÕóÁÐ´íÎóÂë
#define RAID_ERROR_INDEX                    200
#define NET_DVR_NAME_NOT_ONLY               (RAID_ERROR_INDEX + 0)  // Ãû³ÆÒÑ´æÔÚ
#define NET_DVR_OVER_MAX_ARRAY              (RAID_ERROR_INDEX + 1 ) // ÕóÁÐ´ïµ½ÉÏÏÞ
#define NET_DVR_OVER_MAX_VD                 (RAID_ERROR_INDEX + 2 ) // ÐéÄâ´ÅÅÌ´ïµ½ÉÏÏÞ
#define NET_DVR_VD_SLOT_EXCEED              (RAID_ERROR_INDEX + 3 ) // ÐéÄâ´ÅÅÌ²ÛÎ»ÒÑÂú
#define NET_DVR_PD_STATUS_INVALID           (RAID_ERROR_INDEX + 4 ) // ÖØ½¨ÕóÁÐËùÐèÎïÀí´ÅÅÌ×´Ì¬´íÎó
#define NET_DVR_PD_BE_DEDICATE_SPARE        (RAID_ERROR_INDEX + 5 ) // ÖØ½¨ÕóÁÐËùÐèÎïÀí´ÅÅÌÎªÖ¸¶¨ÈÈ±¸
#define NET_DVR_PD_NOT_FREE                 (RAID_ERROR_INDEX + 6 ) // ÖØ½¨ÕóÁÐËùÐèÎïÀí´ÅÅÌ·Ç¿ÕÏÐ
#define NET_DVR_CANNOT_MIG2NEWMODE          (RAID_ERROR_INDEX + 7 ) // ²»ÄÜ´Óµ±Ç°µÄÕóÁÐÀàÐÍÇ¨ÒÆµ½ÐÂµÄÕóÁÐÀàÐÍ
#define NET_DVR_MIG_PAUSE                   (RAID_ERROR_INDEX + 8 ) // Ç¨ÒÆ²Ù×÷ÒÑÔÝÍ£
#define NET_DVR_MIG_CANCEL                  (RAID_ERROR_INDEX + 9 ) // ÕýÔÚÖ´ÐÐµÄÇ¨ÒÆ²Ù×÷ÒÑÈ¡Ïû
#define NET_DVR_EXIST_VD                    (RAID_ERROR_INDEX + 10) // ÕóÁÐÉÏÕóÁÐÉÏ´æÔÚÐéÄâ´ÅÅÌ£¬ÎÞ·¨É¾³ýÕóÁÐ
#define NET_DVR_TARGET_IN_LD_FUNCTIONAL     (RAID_ERROR_INDEX + 11) // ¶ÔÏóÎïÀí´ÅÅÌÎªÐéÄâ´ÅÅÌ×é³É²¿·ÖÇÒ¹¤×÷Õý³£
#define NET_DVR_HD_IS_ASSIGNED_ALREADY      (RAID_ERROR_INDEX + 12) // Ö¸¶¨µÄÎïÀí´ÅÅÌ±»·ÖÅäÎªÐéÄâ´ÅÅÌ
#define NET_DVR_INVALID_HD_COUNT            (RAID_ERROR_INDEX + 13) // ÎïÀí´ÅÅÌÊýÁ¿ÓëÖ¸¶¨µÄRAIDµÈ¼¶²»Æ¥Åä
#define NET_DVR_LD_IS_FUNCTIONAL            (RAID_ERROR_INDEX + 14) // ÕóÁÐÕý³££¬ÎÞ·¨ÖØ½¨
#define NET_DVR_BGA_RUNNING                 (RAID_ERROR_INDEX + 15) // ´æÔÚÕýÔÚÖ´ÐÐµÄºóÌ¨ÈÎÎñ
#define NET_DVR_LD_NO_ATAPI                 (RAID_ERROR_INDEX + 16) // ÎÞ·¨ÓÃATAPIÅÌ´´½¨ÐéÄâ´ÅÅÌ
#define NET_DVR_MIGRATION_NOT_NEED          (RAID_ERROR_INDEX + 17) // ÕóÁÐÎÞÐèÇ¨ÒÆ
#define NET_DVR_HD_TYPE_MISMATCH            (RAID_ERROR_INDEX + 18) // ÎïÀí´ÅÅÌ²»ÊôÓÚÍ¬ÒâÀàÐÍ
#define NET_DVR_NO_LD_IN_DG                 (RAID_ERROR_INDEX + 19) // ÎÞÐéÄâ´ÅÅÌ£¬ÎÞ·¨½øÐÐ´ËÏî²Ù×÷
#define NET_DVR_NO_ROOM_FOR_SPARE           (RAID_ERROR_INDEX + 20) // ´ÅÅÌ¿Õ¼ä¹ýÐ¡£¬ÎÞ·¨±»Ö¸¶¨ÎªÈÈ±¸ÅÌ
#define NET_DVR_SPARE_IS_IN_MULTI_DG        (RAID_ERROR_INDEX + 21) // ´ÅÅÌÒÑ±»·ÖÅäÎªÄ³ÕóÁÐÈÈ±¸ÅÌ
#define NET_DVR_DG_HAS_MISSING_PD           (RAID_ERROR_INDEX + 22) // ÕóÁÐÈ±ÉÙÅÌ

// x86 64bit nvrÐÂÔö 2012-02-04
#define NET_DVR_NAME_EMPTY                    (RAID_ERROR_INDEX + 23) /*Ãû³ÆÎª¿Õ*/
#define NET_DVR_INPUT_PARAM                    (RAID_ERROR_INDEX + 24) /*ÊäÈë²ÎÊýÓÐÎó*/
#define NET_DVR_PD_NOT_AVAILABLE            (RAID_ERROR_INDEX + 25) /*ÎïÀí´ÅÅÌ²»¿ÉÓÃ*/
#define NET_DVR_ARRAY_NOT_AVAILABLE            (RAID_ERROR_INDEX + 26) /*ÕóÁÐ²»¿ÉÓÃ*/
#define NET_DVR_PD_COUNT                    (RAID_ERROR_INDEX + 27) /*ÎïÀí´ÅÅÌÊý²»ÕýÈ·*/
#define NET_DVR_VD_SMALL                    (RAID_ERROR_INDEX + 28) /*ÐéÄâ´ÅÅÌÌ«Ð¡*/
#define NET_DVR_NO_EXIST                    (RAID_ERROR_INDEX + 29) /*²»´æÔÚ*/
#define NET_DVR_NOT_SUPPORT                    (RAID_ERROR_INDEX + 30) /*²»Ö§³Ö¸Ã²Ù×÷*/
#define NET_DVR_NOT_FUNCTIONAL                 (RAID_ERROR_INDEX + 31) /*ÕóÁÐ×´Ì¬²»ÊÇÕý³£×´Ì¬*/
#define NET_DVR_DEV_NODE_NOT_FOUND            (RAID_ERROR_INDEX + 32) /*ÐéÄâ´ÅÅÌÉè±¸½Úµã²»´æÔÚ*/
#define NET_DVR_SLOT_EXCEED                    (RAID_ERROR_INDEX + 33) /*²ÛÎ»´ïµ½ÉÏÏÞ*/ 
#define NET_DVR_NO_VD_IN_ARRAY                (RAID_ERROR_INDEX + 34) /*ÕóÁÐÉÏ²»´æÔÚÐéÄâ´ÅÅÌ*/
#define NET_DVR_VD_SLOT_INVALID                (RAID_ERROR_INDEX + 35) /*ÐéÄâ´ÅÅÌ²ÛÎ»ÎÞÐ§*/
#define NET_DVR_PD_NO_ENOUGH_SPACE            (RAID_ERROR_INDEX + 36) /*ËùÐèÎïÀí´ÅÅÌ¿Õ¼ä²»×ã*/
#define NET_DVR_ARRAY_NONFUNCTION            (RAID_ERROR_INDEX + 37) /*Ö»ÓÐ´¦ÓÚÕý³£×´Ì¬µÄÕóÁÐ²ÅÄÜ½øÐÐÇ¨ÒÆ*/
#define NET_DVR_ARRAY_NO_ENOUGH_SPACE        (RAID_ERROR_INDEX + 38) /*ÕóÁÐ¿Õ¼ä²»×ã*/
#define NET_DVR_STOPPING_SCANNING_ARRAY        (RAID_ERROR_INDEX + 39) /*ÕýÔÚÖ´ÐÐ°²È«°ÎÅÌ»òÖØÐÂÉ¨Ãè*/
#define NET_DVR_NOT_SUPPORT_16T             (RAID_ERROR_INDEX + 40) /*²»Ö§³Ö´´½¨´óÓÚ16TµÄÕóÁÐ*/
#define NET_DVR_ARRAY_FORMATING             (RAID_ERROR_INDEX + 41) /*ÕýÔÚÖ´ÐÐ¸ñÊ½»¯µÄÕóÁÐÎÞ·¨É¾³ý*/ 
#define NET_DVR_QUICK_SETUP_PD_COUNT        (RAID_ERROR_INDEX + 42) /*Ò»¼üÅäÖÃÖÁÉÙÐèÒªÈý¿é¿ÕÏÐÅÌ*/ 

//Éè±¸Î´¼¤»îÊ±£¬µÇÂ¼Ê§°Ü£¬·µ»Ø´íÎóÂë
#define    NET_DVR_ERROR_DEVICE_NOT_ACTIVATED    250//Éè±¸Î´¼¤»î
//ÀÏSDK½ÓÐÂÉè±¸£¬ÉèÖÃÓÃ»§ÃÜÂë»òÕß¼¤»îµÄÊ±ºòÎª·çÏÕÃÜÂëÊ±£¬´íÎóÂë
#define  NET_DVR_ERROR_RISK_PASSWORD          251 //ÓÐ·çÏÕµÄÃÜÂë
//ÒÑ¼¤»îµÄÉè±¸£¬ÔÙ´Î¼¤»îÊ±·µ»Ø´íÎóÂë
#define    NET_DVR_ERROR_DEVICE_HAS_ACTIVATED    252//Éè±¸ÒÑ¼¤»î


// ÖÇÄÜ´íÎóÂë 
#define VCA_ERROR_INDEX                     300 // ÖÇÄÜ´íÎóÂëË÷Òý
#define NET_DVR_ID_ERROR                    (VCA_ERROR_INDEX + 0)   // ÅäÖÃID²»ºÏÀí
#define NET_DVR_POLYGON_ERROR               (VCA_ERROR_INDEX + 1)   // ¶à±ßÐÎ²»·ûºÏÒªÇó
#define NET_DVR_RULE_PARAM_ERROR            (VCA_ERROR_INDEX + 2)   // ¹æÔò²ÎÊý²»ºÏÀí
#define NET_DVR_RULE_CFG_CONFLICT           (VCA_ERROR_INDEX + 3)   // ÅäÖÃÐÅÏ¢³åÍ»
#define NET_DVR_CALIBRATE_NOT_READY         (VCA_ERROR_INDEX + 4)   // µ±Ç°Ã»ÓÐ±ê¶¨ÐÅÏ¢
#define NET_DVR_CAMERA_DATA_ERROR           (VCA_ERROR_INDEX + 5)   // ÉãÏñ»ú²ÎÊý²»ºÏÀí
#define NET_DVR_CALIBRATE_DATA_UNFIT        (VCA_ERROR_INDEX + 6)    // ³¤¶È²»¹»ÇãÐ±£¬²»ÀûÓÚ±ê¶¨
#define NET_DVR_CALIBRATE_DATA_CONFLICT     (VCA_ERROR_INDEX + 7)    // ±ê¶¨³ö´í£¬ÒÔÎªËùÓÐµã¹²Ïß»òÕßÎ»ÖÃÌ«¼¯ÖÐ
#define NET_DVR_CALIBRATE_CALC_FAIL         (VCA_ERROR_INDEX + 8)    // ÉãÏñ»ú±ê¶¨²ÎÊýÖµ¼ÆËãÊ§°Ü
#define    NET_DVR_CALIBRATE_LINE_OUT_RECT        (VCA_ERROR_INDEX + 9)    // ÊäÈëµÄÑù±¾±ê¶¨Ïß³¬³öÁËÑù±¾Íâ½Ó¾ØÐÎ¿ò
#define NET_DVR_ENTER_RULE_NOT_READY        (VCA_ERROR_INDEX + 10)    // Ã»ÓÐÉèÖÃ½øÈëÇøÓò
#define NET_DVR_AID_RULE_NO_INCLUDE_LANE    (VCA_ERROR_INDEX + 11)    // ½»Í¨ÊÂ¼þ¹æÔòÖÐÃ»ÓÐ°üÀ¨³µµÀ£¨ÌØÖµÓµ¶ÂºÍÄæÐÐ£©
#define NET_DVR_LANE_NOT_READY                (VCA_ERROR_INDEX + 12)    // µ±Ç°Ã»ÓÐÉèÖÃ³µµÀ
#define NET_DVR_RULE_INCLUDE_TWO_WAY        (VCA_ERROR_INDEX + 13)    // ÊÂ¼þ¹æÔòÖÐ°üº¬2ÖÖ²»Í¬·½Ïò
#define NET_DVR_LANE_TPS_RULE_CONFLICT      (VCA_ERROR_INDEX + 14)  // ³µµÀºÍÊý¾Ý¹æÔò³åÍ»
#define NET_DVR_NOT_SUPPORT_EVENT_TYPE      (VCA_ERROR_INDEX + 15)  // ²»Ö§³ÖµÄÊÂ¼þÀàÐÍ
#define NET_DVR_LANE_NO_WAY                 (VCA_ERROR_INDEX + 16)  // ³µµÀÃ»ÓÐ·½Ïò
#define NET_DVR_SIZE_FILTER_ERROR           (VCA_ERROR_INDEX + 17)  // ³ß´ç¹ýÂË¿ò²»ºÏÀí
#define NET_DVR_LIB_FFL_NO_FACE             (VCA_ERROR_INDEX + 18) // ÌØÕ÷µã¶¨Î»Ê±ÊäÈëµÄÍ¼ÏñÃ»ÓÐÈËÁ³
#define NET_DVR_LIB_FFL_IMG_TOO_SMALL       (VCA_ERROR_INDEX + 19) // ÌØÕ÷µã¶¨Î»Ê±ÊäÈëµÄÍ¼ÏñÌ«Ð¡
#define NET_DVR_LIB_FD_IMG_NO_FACE          (VCA_ERROR_INDEX + 20) // µ¥ÕÅÍ¼ÏñÈËÁ³¼ì²âÊ±ÊäÈëµÄÍ¼ÏñÃ»ÓÐÈËÁ³
#define NET_DVR_LIB_FACE_TOO_SMALL          (VCA_ERROR_INDEX + 21) // ½¨Ä£Ê±ÈËÁ³Ì«Ð¡
#define NET_DVR_LIB_FACE_QUALITY_TOO_BAD    (VCA_ERROR_INDEX + 22) // ½¨Ä£Ê±ÈËÁ³Í¼ÏñÖÊÁ¿Ì«²î
#define NET_DVR_KEY_PARAM_ERR               (VCA_ERROR_INDEX + 23) //¸ß¼¶²ÎÊýÉèÖÃ´íÎó
#define NET_DVR_CALIBRATE_DATA_ERR          (VCA_ERROR_INDEX + 24) //±ê¶¨Ñù±¾ÊýÄ¿´íÎó£¬»òÊý¾ÝÖµ´íÎó£¬»òÑù±¾µã³¬³öµØÆ½Ïß
#define NET_DVR_CALIBRATE_DISABLE_FAIL      (VCA_ERROR_INDEX + 25) //ËùÅäÖÃ¹æÔò²»ÔÊÐíÈ¡Ïû±ê¶¨
#define NET_DVR_VCA_LIB_FD_SCALE_OUTRANGE   (VCA_ERROR_INDEX + 26) //×î´ó¹ýÂË¿òµÄ¿í¸ß×îÐ¡Öµ³¬¹ý×îÐ¡¹ýÂË¿òµÄ¿í¸ß×î´óÖµÁ½±¶ÒÔÉÏ
#define NET_DVR_LIB_FD_REGION_TOO_LARGE     (VCA_ERROR_INDEX + 27) //µ±Ç°¼ì²âÇøÓò·¶Î§¹ý´ó¡£¼ì²âÇø×î´óÎªÍ¼ÏñµÄ2/3
#define NET_DVR_TRIAL_OVERDUE               (VCA_ERROR_INDEX + 28) //ÊÔÓÃ°æÆÀ¹ÀÆÚÒÑ½áÊø
#define NET_DVR_CONFIG_FILE_CONFLICT        (VCA_ERROR_INDEX + 29) //Éè±¸ÀàÐÍÓëÅäÖÃÎÄ¼þ³åÍ»£¨¼ÓÃÜ¹·ÀàÐÍÓëÏÖÓÐ·ÖÎöÒÇÅäÖÃ²»·û´íÎóÂëÌáÊ¾£©
//Ëã·¨¿âÏà¹Ø´íÎóÂë
#define NET_DVR_FR_FPL_FAIL                 (VCA_ERROR_INDEX + 30)   // ÈËÁ³ÌØÕ÷µã¶¨Î»Ê§°Ü
#define NET_DVR_FR_IQA_FAIL                 (VCA_ERROR_INDEX + 31)   // ÈËÁ³ÆÀ·ÖÊ§°Ü
#define NET_DVR_FR_FEM_FAIL                 (VCA_ERROR_INDEX + 32)   // ÈËÁ³ÌØÕ÷ÌáÈ¡Ê§°Ü
#define NET_DVR_FPL_DT_CONF_TOO_LOW         (VCA_ERROR_INDEX + 33)   // ÌØÕ÷µã¶¨Î»Ê±ÈËÁ³¼ì²âÖÃÐÅ¶È¹ýµÍ
#define NET_DVR_FPL_CONF_TOO_LOW            (VCA_ERROR_INDEX + 34)   // ÌØÕ÷µã¶¨Î»ÖÃÐÅ¶È¹ýµÍ
#define NET_DVR_E_DATA_SIZE                 (VCA_ERROR_INDEX + 35)  // Êý¾Ý³¤¶È²»Æ¥Åä
#define NET_DVR_FR_MODEL_VERSION_ERR        (VCA_ERROR_INDEX + 36)  // ÈËÁ³Ä£ÐÍÊý¾ÝÖÐµÄÄ£ÐÍ°æ±¾´íÎó
#define NET_DVR_FR_FD_FAIL                  (VCA_ERROR_INDEX + 37)  // Ê¶±ð¿âÖÐÈËÁ³¼ì²âÊ§°Ü
#define NET_DVR_FA_NORMALIZE_ERR            (VCA_ERROR_INDEX + 38)  // ÈËÁ³¹éÒ»»¯³ö´í
//ÆäËû´íÎóÂë
#define NET_DVR_DOG_PUSTREAM_NOT_MATCH      (VCA_ERROR_INDEX + 39)  // ¼ÓÃÜ¹·ÓëÇ°¶ËÈ¡Á÷Éè±¸ÀàÐÍ²»Æ¥Åä
#define NET_DVR_DEV_PUSTREAM_NOT_MATCH      (VCA_ERROR_INDEX + 40)  // Ç°¶ËÈ¡Á÷Éè±¸°æ±¾²»Æ¥Åä
#define NET_DVR_PUSTREAM_ALREADY_EXISTS     (VCA_ERROR_INDEX + 41)  // Éè±¸µÄÆäËûÍ¨µÀÒÑ¾­Ìí¼Ó¹ý¸ÃÇ°¶ËÉè±¸
#define NET_DVR_SEARCH_CONNECT_FAILED       (VCA_ERROR_INDEX + 42)  // Á¬½Ó¼ìË÷·þÎñÆ÷Ê§°Ü
#define NET_DVR_INSUFFICIENT_DISK_SPACE     (VCA_ERROR_INDEX + 43)  // ¿É´æ´¢µÄÓ²ÅÌ¿Õ¼ä²»×ã
#define NET_DVR_DATABASE_CONNECTION_FAILED  (VCA_ERROR_INDEX + 44)  // Êý¾Ý¿âÁ¬½ÓÊ§°Ü
#define NET_DVR_DATABASE_ADM_PW_ERROR       (VCA_ERROR_INDEX + 45)  // Êý¾Ý¿âÓÃ»§Ãû¡¢ÃÜÂë´íÎó
#define NET_DVR_DECODE_YUV                  (VCA_ERROR_INDEX + 46)  // ½âÂëÊ§°Ü
#define NET_DVR_IMAGE_RESOLUTION_ERROR      (VCA_ERROR_INDEX + 47)  //
#define NET_DVR_CHAN_WORKMODE_ERROR         (VCA_ERROR_INDEX + 48)  //

#define NET_DVR_RTSP_ERROR_NOENOUGHPRI          401  //ÎÞÈ¨ÏÞ£º·þÎñÆ÷·µ»Ø401Ê±£¬×ª³ÉÕâ¸ö´íÎóÂë
#define NET_DVR_RTSP_ERROR_ALLOC_RESOURCE       402  //·ÖÅä×ÊÔ´Ê§°Ü
#define NET_DVR_RTSP_ERROR_PARAMETER            403  //²ÎÊý´íÎó
#define NET_DVR_RTSP_ERROR_NO_URL               404  //Ö¸¶¨µÄURLµØÖ·²»´æÔÚ£º·þÎñÆ÷·µ»Ø404Ê±£¬×ª³ÉÕâ¸ö´íÎóÂë
#define NET_DVR_RTSP_ERROR_FORCE_STOP           406  //ÓÃ»§ÖÐÍ¾Ç¿ÐÐÍË³ö

#define NET_DVR_RTSP_GETPORTFAILED                407  //rtsp µÃµ½¶Ë¿Ú´íÎó
#define NET_DVR_RTSP_DESCRIBERROR                410  //rtsp decribe ½»»¥´íÎó
#define NET_DVR_RTSP_DESCRIBESENDTIMEOUT        411  //rtsp decribe ·¢ËÍ³¬Ê±
#define NET_DVR_RTSP_DESCRIBESENDERROR            412  //rtsp decribe ·¢ËÍÊ§°Ü
#define NET_DVR_RTSP_DESCRIBERECVTIMEOUT        413  //rtsp decribe ½ÓÊÕ³¬Ê±
#define NET_DVR_RTSP_DESCRIBERECVDATALOST        414  //rtsp decribe ½ÓÊÕÊý¾Ý´íÎó
#define NET_DVR_RTSP_DESCRIBERECVERROR            415  //rtsp decribe ½ÓÊÕÊ§°Ü
#define NET_DVR_RTSP_DESCRIBESERVERERR            416  //rtsp decribe ·þÎñÆ÷·µ»Ø´íÎó×´Ì¬

#define NET_DVR_RTSP_SETUPERROR                    420  //rtsp setup ½»»¥´íÎó
#define NET_DVR_RTSP_SETUPSENDTIMEOUT            421  //rtsp setup ·¢ËÍ³¬Ê±
#define NET_DVR_RTSP_SETUPSENDERROR                422  //rtsp setup ·¢ËÍ´íÎó
#define NET_DVR_RTSP_SETUPRECVTIMEOUT            423  //rtsp setup ½ÓÊÕ³¬Ê±
#define NET_DVR_RTSP_SETUPRECVDATALOST            424  //rtsp setup ½ÓÊÕÊý¾Ý´íÎó
#define NET_DVR_RTSP_SETUPRECVERROR                425  //rtsp setup ½ÓÊÕÊ§°Ü
#define NET_DVR_RTSP_OVER_MAX_CHAN                426  //³¬¹ý·þÎñÆ÷×î´óÁ¬½ÓÊý£¬»òÕß·þÎñÆ÷×ÊÔ´²»×ã£¬·þÎñÆ÷·µ»Ø453Ê±£¬×ª³ÉÕâ¸ö´íÎóÂë¡£
#define NET_DVR_RTSP_SETUPSERVERERR                427  //rtsp setup ·þÎñÆ÷·µ»Ø´íÎó×´Ì¬

#define NET_DVR_RTSP_PLAYERROR                    430  //rtsp play ½»»¥´íÎó
#define NET_DVR_RTSP_PLAYSENDTIMEOUT            431  //rtsp play ·¢ËÍ³¬Ê±
#define NET_DVR_RTSP_PLAYSENDERROR                432  //rtsp play ·¢ËÍ´íÎó
#define NET_DVR_RTSP_PLAYRECVTIMEOUT            433  //rtsp play ½ÓÊÕ³¬Ê±
#define NET_DVR_RTSP_PLAYRECVDATALOST            434  //rtsp play ½ÓÊÕÊý¾Ý´íÎó
#define NET_DVR_RTSP_PLAYRECVERROR                435  //rtsp play ½ÓÊÕÊ§°Ü
#define NET_DVR_RTSP_PLAYSERVERERR                436  //rtsp play ·þÎñÆ÷·µ»Ø´íÎó×´Ì¬

#define NET_DVR_RTSP_TEARDOWNERROR                440  //rtsp teardown ½»»¥´íÎó
#define NET_DVR_RTSP_TEARDOWNSENDTIMEOUT        441  //rtsp teardown ·¢ËÍ³¬Ê±
#define NET_DVR_RTSP_TEARDOWNSENDERROR            442  //rtsp teardown ·¢ËÍ´íÎó
#define NET_DVR_RTSP_TEARDOWNRECVTIMEOUT        443  //rtsp teardown ½ÓÊÕ³¬Ê±
#define NET_DVR_RTSP_TEARDOWNRECVDATALOST        444  //rtsp teardown ½ÓÊÕÊý¾Ý´íÎó
#define NET_DVR_RTSP_TEARDOWNRECVERROR            445  //rtsp teardown ½ÓÊÕÊ§°Ü
#define NET_DVR_RTSP_TEARDOWNSERVERERR            446  //rtsp teardown ·þÎñÆ÷·µ»Ø´íÎó×´Ì¬

#define  NET_PLAYM4_NOERROR                        500    //no error
#define     NET_PLAYM4_PARA_OVER                    501    //input parameter is invalid;
#define  NET_PLAYM4_ORDER_ERROR                    502    //The order of the function to be called is error.
#define     NET_PLAYM4_TIMER_ERROR                    503    //Create multimedia clock failed;
#define  NET_PLAYM4_DEC_VIDEO_ERROR                504    //Decode video data failed.
#define  NET_PLAYM4_DEC_AUDIO_ERROR                505    //Decode audio data failed.
#define     NET_PLAYM4_ALLOC_MEMORY_ERROR            506    //Allocate memory failed.
#define  NET_PLAYM4_OPEN_FILE_ERROR                507    //Open the file failed.
#define  NET_PLAYM4_CREATE_OBJ_ERROR            508    //Create thread or event failed
#define  NET_PLAYM4_CREATE_DDRAW_ERROR            509    //Create DirectDraw object failed.
#define  NET_PLAYM4_CREATE_OFFSCREEN_ERROR      510    //failed when creating off-screen surface.
#define  NET_PLAYM4_BUF_OVER                    511    //buffer is overflow
#define  NET_PLAYM4_CREATE_SOUND_ERROR            512    //failed when creating audio device.    
#define     NET_PLAYM4_SET_VOLUME_ERROR            513    //Set volume failed
#define  NET_PLAYM4_SUPPORT_FILE_ONLY            514    //The function only support play file.
#define  NET_PLAYM4_SUPPORT_STREAM_ONLY            515    //The function only support play stream.
#define  NET_PLAYM4_SYS_NOT_SUPPORT                516    //System not support.
#define  NET_PLAYM4_FILEHEADER_UNKNOWN          517    //No file header.
#define  NET_PLAYM4_VERSION_INCORRECT            518    //The version of decoder and encoder is not adapted.  
#define  NET_PALYM4_INIT_DECODER_ERROR          519    //Initialize decoder failed.
#define  NET_PLAYM4_CHECK_FILE_ERROR            520    //The file data is unknown.
#define  NET_PLAYM4_INIT_TIMER_ERROR            521    //Initialize multimedia clock failed.
#define     NET_PLAYM4_BLT_ERROR                    522    //Blt failed.
#define  NET_PLAYM4_UPDATE_ERROR                523    //Update failed.
#define  NET_PLAYM4_OPEN_FILE_ERROR_MULTI       524   //openfile error, streamtype is multi
#define  NET_PLAYM4_OPEN_FILE_ERROR_VIDEO       525   //openfile error, streamtype is video
#define  NET_PLAYM4_JPEG_COMPRESS_ERROR         526   //JPEG compress error
#define  NET_PLAYM4_EXTRACT_NOT_SUPPORT         527    //Don't support the version of this file.
#define  NET_PLAYM4_EXTRACT_DATA_ERROR          528    //extract video data failed.

//×ª·â×°¿â´íÎóÂë
#define  NET_CONVERT_ERROR_NOT_SUPPORT          581  //convert not support

//ÓïÒô¶Ô½²¿â´íÎóÂë
#define  NET_AUDIOINTERCOM_OK                   600  //ÎÞ´íÎó
#define  NET_AUDIOINTECOM_ERR_NOTSUPORT         601 //²»Ö§³Ö
#define  NET_AUDIOINTECOM_ERR_ALLOC_MEMERY      602 //ÄÚ´æÉêÇë´íÎó
#define  NET_AUDIOINTECOM_ERR_PARAMETER            603 //²ÎÊý´íÎó
#define  NET_AUDIOINTECOM_ERR_CALL_ORDER        604 //µ÷ÓÃ´ÎÐò´íÎó
#define  NET_AUDIOINTECOM_ERR_FIND_DEVICE       605 //Î´·¢ÏÖÉè±¸
#define  NET_AUDIOINTECOM_ERR_OPEN_DEVICE       606 //²»ÄÜ´ò¿ªÉè±¸ÚÀ
#define  NET_AUDIOINTECOM_ERR_NO_CONTEXT        607 //Éè±¸ÉÏÏÂÎÄ³ö´í
#define  NET_AUDIOINTECOM_ERR_NO_WAVFILE        608 //WAVÎÄ¼þ³ö´í
#define  NET_AUDIOINTECOM_ERR_INVALID_TYPE      609 //ÎÞÐ§µÄWAV²ÎÊýÀàÐÍ
#define  NET_AUDIOINTECOM_ERR_ENCODE_FAIL       610 //±àÂëÊ§°Ü
#define  NET_AUDIOINTECOM_ERR_DECODE_FAIL       611 //½âÂëÊ§°Ü
#define  NET_AUDIOINTECOM_ERR_NO_PLAYBACK       612 //²¥·ÅÊ§°Ü
#define  NET_AUDIOINTECOM_ERR_DENOISE_FAIL      613 //½µÔëÊ§°Ü
#define  NET_AUDIOINTECOM_ERR_UNKOWN            619 //Î´Öª´íÎó

#define NET_QOS_OK                                 700                    //no error
#define NET_QOS_ERROR                             (NET_QOS_OK - 1)        //qos error
#define NET_QOS_ERR_INVALID_ARGUMENTS             (NET_QOS_OK - 2)        //invalid arguments 
#define NET_QOS_ERR_SESSION_NOT_FOUND             (NET_QOS_OK - 3)        //session net found
#define NET_QOS_ERR_LIB_NOT_INITIALIZED          (NET_QOS_OK - 4)        //lib not initialized
#define NET_QOS_ERR_OUTOFMEM                     (NET_QOS_OK - 5)        //outtofmem
#define NET_QOS_ERR_PACKET_UNKNOW                (NET_QOS_OK - 10)        //packet unknow
#define NET_QOS_ERR_PACKET_VERSION               (NET_QOS_OK - 11)        //packet version error
#define NET_QOS_ERR_PACKET_LENGTH                (NET_QOS_OK - 12)        //packet length error
#define NET_QOS_ERR_PACKET_TOO_BIG               (NET_QOS_OK - 13)        //packet too big
#define NET_QOS_ERR_SCHEDPARAMS_INVALID_BANDWIDTH (NET_QOS_OK - 20)        //schedparams invalid bandwidth
#define NET_QOS_ERR_SCHEDPARAMS_BAD_FRACTION      (NET_QOS_OK - 21)        //schedparams bad fraction
#define NET_QOS_ERR_SCHEDPARAMS_BAD_MINIMUM_INTERVAL (NET_QOS_OK - 22)    //schedparams bad minimum interval

#define NET_ERROR_TRUNK_LINE                        711 //×ÓÏµÍ³ÒÑ±»Åä³É¸ÉÏß
#define NET_ERROR_MIXED_JOINT                        712 //²»ÄÜ½øÐÐ»ìºÏÆ´½Ó
#define NET_ERROR_DISPLAY_SWITCH                    713 //²»ÄÜ½øÐÐÏÔÊ¾Í¨µÀÇÐ»»
#define NET_ERROR_USED_BY_BIG_SCREEN                714 //½âÂë×ÊÔ´±»´óÆÁÕ¼ÓÃ
#define NET_ERROR_USE_OTHER_DEC_RESOURCE            715 //²»ÄÜÊ¹ÓÃÆäËû½âÂë×ÓÏµÍ³×ÊÔ´
#define NET_ERROR_DISP_MODE_SWITCH                  716 //ÏÔÊ¾Í¨µÀÏÔÊ¾×´Ì¬ÇÐ»»ÖÐ
#define NET_ERROR_SCENE_USING                        717    //³¡¾°ÕýÔÚÊ¹ÓÃ
#define NET_ERR_NO_ENOUGH_DEC_RESOURCE              718 //½âÂë×ÊÔ´²»×ã
#define NET_ERR_NO_ENOUGH_FREE_SHOW_RESOURCE        719 //³©ÏÔ×ÊÔ´²»×ã
#define NET_ERR_NO_ENOUGH_VIDEO_MEMORY              720 //ÏÔ´æ×ÊÔ´²»×ã
#define NET_ERR_MAX_VIDEO_NUM                       721 //Ò»ÍÏ¶à×ÊÔ´²»×ã
#define NET_ERR_WIN_COVER_FREE_SHOW_AND_NORMAL      722 //´°¿Ú¿çÔ½ÁË³©ÏÔÊä³ö¿ÚºÍ·Ç³©ÏÔÊä³ö¿Ú
#define NET_ERR_FREE_SHOW_WIN_SPLIT                 723 //³©ÏÔ´°¿Ú²»Ö§³Ö·ÖÆÁ
#define NET_ERR_INAPPROPRIATE_WIN_FREE_SHOW         724 //²»ÊÇÊä³ö¿ÚÕûÊý±¶µÄ´°¿Ú²»Ö§³Ö¿ªÆô³©ÏÔ
#define NET_DVR_TRANSPARENT_WIN_NOT_SUPPORT_SPLIT   725 //¿ªÆôÍ¸Ã÷¶ÈµÄ´°¿Ú²»Ö§³Ö·ÖÆÁ
#define NET_DVR_SPLIT_WIN_NOT_SUPPORT_TRANSPARENT   726 //¿ªÆô¶à·ÖÆÁµÄ´°¿Ú²»Ö§³ÖÍ¸Ã÷¶ÈÉèÖÃ
#define NET_ERR_MAX_LOGO_NUM                        727 //logoÊý´ïµ½ÉÏÏÞ
#define NET_ERR_MAX_WIN_LOOP_NUM                    728 //ÂÖÑ²´°¿ÚÊý´ïµ½ÉÏÏÞ
#define NET_ERR_VIRTUAL_LED_VERTICAL_CROSS          729 //ÐéÄâLED²»ÄÜ×ÝÏò¿çÆÁ
#define NET_ERR_MAX_VIRTUAL_LED_HEIGHT              730 //ÐéÄâLED¸ß¶È³¬ÏÞ
#define NET_ERR_VIRTUAL_LED_ILLEGAL_CHARACTER       731 //ÐéÄâLEDÄÚÈÝ°üº¬·Ç·¨×Ö·û
#define NET_ERR_BASEMAP_NOT_EXIST                   732 //µ×Í¼Í¼Æ¬²»´æÔÚ
#define NET_ERR_LED_NOT_SUPPORT_VIRTUAL_LED         733 //LEDÆÁÄ»²»Ö§³ÖÐéÄâLED
#define NET_ERR_LED_RESOLUTION_NOT_SUPPORT          734 //LED·Ö±æÂÊ²»Ö§³Ö
#define NET_ERR_PLAN_OVERDUE                        735    //Ô¤°¸³¬ÆÚ£¬²»ÄÜÔÙµ÷ÓÃ
#define NET_ERR_PROCESSER_MAX_SCREEN_BLK            736 //µ¥¸ö´¦ÀíÆ÷½ÓÈëµÄÐÅºÅ¿çÔ½µÄÆÁÄ»¸öÊý³¬ÏÞ

#define NET_ERR_TERMINAL_BUSY                        780    //ÖÕ¶ËÃ¦£¬ÖÕ¶Ë´¦ÓÚ»áÒéÖÐ

#define NET_ERR_DATA_RETURNED_ILLEGAL               790 //Éè±¸·µ»ØµÄÊý¾Ý²»ºÏ·¨
#define NET_DVR_FUNCTION_RESOURCE_USAGE_ERROR       791 //Éè±¸ÆäËü¹¦ÄÜÕ¼ÓÃ×ÊÔ´£¬µ¼ÖÂ¸Ã¹¦ÄÜÎÞ·¨¿ªÆô


#define NET_DVR_DEV_NET_OVERFLOW                    800    //ÍøÂçÁ÷Á¿³¬¹ýÉè±¸ÄÜÁ¦ÉÏÏÞ
#define NET_DVR_STATUS_RECORDFILE_WRITING_NOT_LOCK  801 //Â¼ÏñÎÄ¼þÔÚÂ¼Ïñ£¬ÎÞ·¨±»Ëø¶¨ 
#define NET_DVR_STATUS_CANT_FORMAT_LITTLE_DISK      802 //ÓÉÓÚÓ²ÅÌÌ«Ð¡ÎÞ·¨¸ñÊ½»¯

//N+1´íÎóÂë
#define NET_SDK_ERR_REMOTE_DISCONNECT                803 //Ô¶¶ËÎÞ·¨Á¬½Ó
#define NET_SDK_ERR_RD_ADD_RD                        804 //±¸»ú²»ÄÜÌí¼Ó±¸»ú
#define NET_SDK_ERR_BACKUP_DISK_EXCEPT                805 //±¸·ÝÅÌÒì³£
#define NET_SDK_ERR_RD_LIMIT                        806 //±¸»úÊýÒÑ´ïÉÏÏÞ
#define NET_SDK_ERR_ADDED_RD_IS_WD                    807 //Ìí¼ÓµÄ±¸»úÊÇ¹¤×÷»ú
#define NET_SDK_ERR_ADD_ORDER_WRONG                    808 //Ìí¼ÓË³Ðò³ö´í£¬±ÈÈçÃ»ÓÐ±»¹¤×÷»úÌí¼ÓÎª±¸»ú£¬¾ÍÌí¼Ó¹¤×÷»ú
#define NET_SDK_ERR_WD_ADD_WD                        809 //¹¤×÷»ú²»ÄÜÌí¼Ó¹¤×÷»ú
#define NET_SDK_ERR_WD_SERVICE_EXCETP                810 //¹¤×÷»úCVR·þÎñÒì³£
#define NET_SDK_ERR_RD_SERVICE_EXCETP                811 //±¸»úCVR·þÎñÒì³£
#define NET_SDK_ERR_ADDED_WD_IS_RD                    812 //Ìí¼ÓµÄ¹¤×÷»úÊÇ±¸»ú
#define NET_SDK_ERR_PERFORMANCE_LIMIT                813 //ÐÔÄÜ´ïµ½ÉÏÏÞ
#define NET_SDK_ERR_ADDED_DEVICE_EXIST                814 //Ìí¼ÓµÄÉè±¸ÒÑ¾­´æÔÚ

//ÉóÑ¶»ú´íÎóÂë
#define NET_SDK_ERR_INQUEST_RESUMING                815 //ÉóÑ¶»Ö¸´ÖÐ
#define NET_SDK_ERR_RECORD_BACKUPING                816 //ÉóÑ¶±¸·ÝÖÐ
#define NET_SDK_ERR_DISK_PLAYING                    817 //¹âÅÌ»Ø·ÅÖÐ
#define NET_SDK_ERR_INQUEST_STARTED                    818 //ÉóÑ¶ÒÑ¿ªÆô
#define NET_SDK_ERR_LOCAL_OPERATING                    819 //±¾µØ²Ù×÷½øÐÐÖÐ
#define NET_SDK_ERR_INQUEST_NOT_START                820 //ÉóÑ¶Î´¿ªÆô
//Netra3.1.0´íÎóÂë                
#define NET_SDK_ERR_CHAN_AUDIO_BIND                 821  //Í¨µÀÎ´°ó¶¨»ò°ó¶¨ÓïÒô¶Ô½²Ê§°Ü
//ÔÆ´æ´¢´íÎóÂë
#define NET_DVR_N_PLUS_ONE_MODE                     822 //Éè±¸µ±Ç°´¦ÓÚN+1Ä£Ê½
#define NET_DVR_CLOUD_STORAGE_OPENED                823 //ÔÆ´æ´¢Ä£Ê½ÒÑ¿ªÆô

#define NET_DVR_ERR_OPER_NOT_ALLOWED                824   //Éè±¸´¦ÓÚN+0±»½Ó¹Ü×´Ì¬£¬²»ÔÊÐí¸Ã²Ù×÷
#define NET_DVR_ERR_NEED_RELOCATE                    825   //Éè±¸´¦ÓÚN+0±»½Ó¹Ü×´Ì¬£¬ÐèÒª»ñÈ¡ÖØ¶¨ÏòÐÅÏ¢£¬ÔÙÖØÐÂ²Ù×÷

//Í¥ÉóÖ÷»ú´íÎóÂë
#define NET_SDK_ERR_IR_PORT_ERROR                   830 //ºìÍâÊä³ö¿Ú´íÎó
#define NET_SDK_ERR_IR_CMD_ERROR                    831 //ºìÍâÊä³ö¿ÚµÄÃüÁîºÅ´íÎó
#define NET_SDK_ERR_NOT_INQUESTING                  832 //Éè±¸´¦ÓÚ·ÇÉóÑ¶×´Ì¬
#define NET_SDK_ERR_INQUEST_NOT_PAUSED              833 //Éè±¸´¦ÓÚ·ÇÔÝÍ£×´Ì¬
#define NET_DVR_CHECK_PASSWORD_MISTAKE_ERROR        834 //Ð£ÑéÃÜÂë´íÎó
#define NET_DVR_CHECK_PASSWORD_NULL_ERROR           835 //Ð£ÑéÃÜÂë²»ÄÜÎª¿Õ
#define NET_DVR_UNABLE_CALIB_ERROR                  836  // µ±Ç°ÎÞ·¨±ê¶¨
#define NET_DVR_PLEASE_CALIB_ERROR                  837  //ÇëÏÈÍê³É±ê¶¨
#define NET_DVR_ERR_PANORAMIC_CAL_EMPTY             838 //FlashÖÐÈ«¾°±ê¶¨Îª¿Õ

//2011-10-25¶àÆÁ¿ØÖÆÆ÷´íÎóÂë£¨900-950£©
#define  NET_ERR_CUT_INPUTSTREAM_OVERLIMIT           900 //ÐÅºÅÔ´²Ã¼ôÊýÖµ³¬ÏÞ
#define  NET_ERR_WINCHAN_IDX                        901    // ¿ª´°Í¨µÀºÅ´íÎó
#define  NET_ERR_WIN_LAYER                            902    // ´°¿Ú²ãÊý´íÎó£¬µ¥¸öÆÁÄ»ÉÏ×î¶à¸²¸ÇµÄ´°¿Ú²ãÊý
#define  NET_ERR_WIN_BLK_NUM                        903    // ´°¿ÚµÄ¿éÊý´íÎó£¬µ¥¸ö´°¿Ú¿É¸²¸ÇµÄÆÁÄ»¸öÊý
#define  NET_ERR_OUTPUT_RESOLUTION                    904    // Êä³ö·Ö±æÂÊ´íÎó
#define  NET_ERR_LAYOUT                                905    // ²¼¾ÖºÅ´íÎó
#define  NET_ERR_INPUT_RESOLUTION                    906 // ÊäÈë·Ö±æÂÊ²»Ö§³Ö
#define  NET_ERR_SUBDEVICE_OFFLINE                  907 // ×ÓÉè±¸²»ÔÚÏß
#define  NET_ERR_NO_DECODE_CHAN                     908 // Ã»ÓÐ¿ÕÏÐ½âÂëÍ¨µÀ
#define  NET_ERR_MAX_WINDOW_ABILITY                 909 // ¿ª´°ÄÜÁ¦ÉÏÏÞ, ·Ö²¼Ê½¶àÆÁ¿ØÖÆÆ÷ÖÐ½âÂë×ÓÉè±¸ÄÜÁ¦ÉÏÏÞ»òÕßÏÔÊ¾´¦ÀíÆ÷ÄÜÁ¦ÉÏÏÞµ¼ÖÂ
#define  NET_ERR_ORDER_ERROR                        910 // µ÷ÓÃË³ÐòÓÐÎó
#define  NET_ERR_PLAYING_PLAN                        911 // ÕýÔÚÖ´ÐÐÔ¤°¸
#define  NET_ERR_DECODER_USED                        912 // ½âÂë°åÕýÔÚÊ¹ÓÃ
#define     NET_ERR_OUTPUT_BOARD_DATA_OVERFLOW            913    // Êä³ö°åÊý¾ÝÁ¿³¬ÏÞ
#define     NET_ERR_SAME_USER_NAME                        914    // ÓÃ»§ÃûÏàÍ¬
#define     NET_ERR_INVALID_USER_NAME                    915    // ÎÞÐ§ÓÃ»§Ãû
#define     NET_ERR_MATRIX_USING                        916    // ÊäÈë¾ØÕóÕýÔÚÊ¹ÓÃ
#define     NET_ERR_DIFFERENT_CHAN_TYPE                917    // Í¨µÀÀàÐÍ²»Í¬£¨¾ØÕóÊä³öÍ¨µÀºÍ¿ØÖÆÆ÷µÄÊäÈëÎª²»Í¬µÄÀàÐÍ£©
#define     NET_ERR_INPUT_CHAN_BINDED                    918    // ÊäÈëÍ¨µÀÒÑ¾­±»ÆäËû¾ØÕó°ó¶¨
#define     NET_ERR_BINDED_OUTPUT_CHAN_OVERFLOW        919    // ÕýÔÚÊ¹ÓÃµÄ¾ØÕóÊä³öÍ¨µÀ¸öÊý³¬¹ý¾ØÕóÓë¿ØÖÆÆ÷°ó¶¨µÄÍ¨µÀ¸öÊý
#define     NET_ERR_MAX_SIGNAL_NUM                        920    // ÊäÈëÐÅºÅÔ´¸öÊý´ïµ½ÉÏÏÞ
#define  NET_ERR_INPUT_CHAN_USING                    921    // ÊäÈëÍ¨µÀÕýÔÚÊ¹ÓÃ
#define  NET_ERR_MANAGER_LOGON                         922    // ¹ÜÀíÔ±ÒÑ¾­µÇÂ½£¬²Ù×÷Ê§°Ü
#define  NET_ERR_USERALREADY_LOGON                     923    // ¸ÃÓÃ»§ÒÑ¾­µÇÂ½£¬²Ù×÷Ê§°Ü
#define  NET_ERR_LAYOUT_INIT                         924    // ²¼¾ÖÕýÔÚ³õÊ¼»¯£¬²Ù×÷Ê§°Ü
#define     NET_ERR_BASEMAP_SIZE_NOT_MATCH                925    // µ×Í¼´óÐ¡²»·û 
#define  NET_ERR_WINDOW_OPERATING                    926    // ´°¿ÚÕýÔÚÖ´ÐÐÆäËû²Ù×÷£¬±¾´Î²Ù×÷Ê§°Ü
#define  NET_ERR_SIGNAL_UPLIMIT                        927 // ÐÅºÅÔ´¿ª´°¸öÊý´ïµ½ÉÏÏÞ
#define  NET_ERR_SIGNAL_MAX_ENLARGE_TIMES           928 // ÐÅºÅÔ´·Å´ó±¶Êý³¬ÏÞ 
#define  NET_ERR_ONE_SIGNAL_MULTI_CROSS             929 // µ¥¸öÐÅºÅÔ´²»ÄÜ¶à´Î¿çÆÁ
#define  NET_ERR_ULTRA_HD_SIGNAL_MULTI_WIN          930 // ³¬¸ßÇåÐÅºÅÔ´²»ÄÜÖØ¸´¿ª´° 
#define  NET_ERR_MAX_VIRTUAL_LED_WIDTH              931 //ÐéÄâLED¿í¶È´óÓÚÏÞÖÆÖµ
#define  NET_ERR_MAX_VIRTUAL_LED_WORD_LEN           932 //ÐéÄâLED×Ö·ûÊý´óÓÚÏÞÖÆÖµ
#define     NET_ERR_SINGLE_OUTPUTPARAM_CONFIG            933//²»Ö§³Öµ¥¸öÏÔÊ¾Êä³ö²ÎÊýÉèÖÃ
#define  NET_ERR_MULTI_WIN_BE_COVER                 934//¶à·ÖÆÁ´°¿Ú±»¸²¸Ç
#define  NET_ERR_WIN_NOT_EXIST                        935 //´°¿Ú²»´æÔÚ
#define  NET_ERR_WIN_MAX_SIGNALSOURCE                936//´°¿ÚÐÅºÅÔ´Êý³¬¹ýÏÞÖÆÖµ
#define  NET_ERR_MULTI_WIN_MOVE                        937//¶Ô¶à·ÖÆÁ´°¿ÚÒÆ¶¯
#define  NET_ERR_MULTI_WIN_YPBPR_SDI                938 // YPBPR ºÍSDIÐÅºÅÔ´²»Ö§³Ö9/16·ÖÆÁ      
#define  NET_ERR_DIFF_TYPE_OUTPUT_MIXUSE            939  //²»Í¬ÀàÐÍÊä³ö°å»ì²å
#define  NET_ERR_SPLIT_WIN_CROSS                    940//¶Ô¿çÆÁ´°¿Ú·ÖÆÁ
#define  NET_ERR_SPLIT_WIN_NOT_FULL_SCREEN            941  //¶ÔÎ´ÂúÆÁ´°¿Ú·ÖÆÁ
#define  NET_ERR_SPLIT_WIN_MANY_WIN                    942  //¶Ôµ¥¸öÊä³ö¿ÚÉÏÓÐ¶à¸ö´°¿ÚµÄ´°¿Ú·ÖÆÁ
#define  NET_ERR_WINDOW_SIZE_OVERLIMIT              943   //´°¿Ú´óÐ¡³¬ÏÞ
#define  NET_ERR_INPUTSTREAM_ALREADY_JOINT           944    //ÐÅºÅÔ´ÒÑ¼ÓÈëÆ´½Ó 
#define  NET_ERR_JOINT_INPUTSTREAM_OVERLIMIT          945    //Æ´½ÓÐÅºÅÔ´¸öÊý³¬ÏÞ      

#define  NET_ERR_LED_RESOLUTION                        946  //LED ·Ö±æÂÊ´óÓÚÊä³ö·Ö±æÂÊ
#define  NET_ERR_JOINT_SCALE_OVERLIMIT              947  //Æ´½ÓÐÅºÅÔ´µÄ¹æÄ£³¬ÏÞ
#define  NET_ERR_INPUTSTREAM_ALREADY_DECODE            948  //ÐÅºÅÔ´ÒÑÉÏÇ½
#define  NET_ERR_INPUTSTREAM_NOTSUPPORT_CAPTURE     949  //ÐÅºÅÔ´²»Ö§³Ö×¥Í¼
#define  NET_ERR_JOINT_NOTSUPPORT_SPLITWIN            950  //Æ´½ÓÐÅºÅÔ´²»Ö§³Ö·ÖÆÁ

//½âÂëÆ÷´íÎóÂë£¨951-999£©
#define NET_ERR_MAX_WIN_OVERLAP                        951 //´ïµ½×î´ó´°¿ÚÖØµþÊý
#define NET_ERR_STREAMID_CHAN_BOTH_VALID            952 //stream IDºÍÍ¨µÀºÅÍ¬Ê±ÓÐÐ§
#define NET_ERR_NO_ZERO_CHAN                        953 //Éè±¸ÎÞÁãÍ¨µÀ
#define NEED_RECONNECT                                955 //ÐèÒªÖØ¶¨Ïò£¨×ªÂë×ÓÏµÍ³Ê¹ÓÃ£©
#define NET_ERR_NO_STREAM_ID                        956 //Á÷ID²»´æÔÚ
#define NET_DVR_TRANS_NOT_START                        957 //×ªÂëÎ´Æô¶¯
#define NET_ERR_MAXNUM_STREAM_ID                    958 //Á÷IDÊý´ïµ½ÉÏÏÞ
#define NET_ERR_WORKMODE_MISMATCH                    959 //¹¤×÷Ä£Ê½²»Æ¥Åä
#define NET_ERR_MODE_IS_USING                        960 //ÒÑ¹¤×÷ÔÚµ±Ç°Ä£Ê½
#define NET_ERR_DEV_PROGRESSING                        961 //Éè±¸ÕýÔÚ´¦ÀíÖÐ
#define NET_ERR_PASSIVE_TRANSCODING                    962 //ÕýÔÚ±»¶¯×ªÂë

#define NET_ERR_RING_NOT_CONFIGURE                   964 //»·ÍøÎ´ÅäÖÃ

#define NET_ERR_CLOSE_WINDOW_FIRST                    971  //ÇÐ»»È«Ö¡ÂÊ³©ÏÔÊ±±ØÐëÏÈ¹Ø±Õ¶ÔÓ¦µÄÒÑÉÏÇ½µÄ´°¿Ú
#define NET_ERR_SPLIT_WINDOW_NUM_NOT_SUPPORT        972  //DVI/DP/HDMI/HDBase_TÊäÈëÔ´ÔÚÈ«Ö¡ÂÊ³©ÏÔÏÂ²»Ö§³Ö9/16»­Ãæ
#define NET_ERR_REACH_ONE_SIGNAL_PREVIEW_MAX_LINK   973  //µ¥ÐÅºÅÔ´»ØÏÔÁ¬½ÓÊýÁ¿³¬ÏÞ
#define NET_ERR_ONLY_SPLITWND_SUPPORT_AMPLIFICATION  974  //Ö»ÓÐ·ÖÆÁ´°¿ÚÖ§³Ö×Ó´°¿Ú·Å´ó
#define NET_DVR_ERR_WINDOW_SIZE_PLACE  975  //´°¿ÚÎ»ÖÃ´íÎó
#define NET_DVR_ERR_RGIONAL_RESTRICTIONS  976  //ÆÁÄ»¾àÀë³¬ÏÞ
#define NET_ERR_WNDZOOM_NOT_SUPPORT  977  //µ¥´°¿Ú²»Ö§³Ö×Ó´°¿ÚÈ«ÆÁ¹¦ÄÜ
#define NET_ERR_LED_SCREEN_SIZE  978  //LEDÆÁ¿í¸ß²»ÕýÈ·
#define NET_ERR_OPEN_WIN_IN_ERROR_AREA  979  //ÔÚ·Ç·¨ÇøÓò¿ª´°(°üÀ¨¿çLCD/LEDÆÁ)
#define NET_ERR_TITLE_WIN_NOT_SUPPORT_MOVE  980  //Æ½ÆÌÄ£Ê½²»Ö§³ÖÂþÓÎ
#define NET_ERR_TITLE_WIN_NOT_SUPPORT_COVER  981  //Æ½ÆÌÄ£Ê½²»Ö§³ÖÍ¼²ã¸²¸Ç
#define NET_ERR_TITLE_WIN_NOT_SUPPORT_SPLIT  982  //Æ½ÆÌÄ£Ê½²»Ö§³Ö·ÖÆÁ
#define NET_DVR_LED_WINDOWS_ALREADY_CLOSED  983  //LEDÇøÓòÄÚÊä³ö¿ÚµÄ·Ö±æÂÊ·¢Éú±ä»¯£¬Éè±¸ÒÑ¹Ø±Õ¸ÃÇøÓòÄÚµÄËùÓÐLED´°¿Ú
#define NET_DVR_ERR_CLOSE_WINDOWS  984  //²Ù×÷Ê§°Ü£¬ÇëÏÈ¹Ø±Õ´°¿Ú
#define NET_DVR_ERR_MATRIX_LOOP_ABILITY            985 //³¬³öÂÖÑ²½âÂëÄÜÁ¦ÏÞÖÆ
#define NET_DVR_ERR_MATRIX_LOOP_TIME           986 //ÂÖÑ²½âÂëÊ±¼ä²»Ö§³Ö
#define NET_DVR_ERR_LINKED_OUT_ABILITY           987 //Áª¶¯Í¨µÀÊý³¬¹ýÉÏÏÞ
//ÄÜÁ¦¼¯½âÎö¿â´íÎóÂë
#define XML_ABILITY_NOTSUPPORT                      1000  //²»Ö§³ÖÄÜÁ¦½Úµã»ñÈ¡
#define    XML_ANALYZE_NOENOUGH_BUF                    1001        //Êä³öÄÚ´æ²»×ã
#define    XML_ANALYZE_FIND_LOCALXML_ERROR                1002        //ÎÞ·¨ÕÒµ½¶ÔÓ¦µÄ±¾µØxml
#define    XML_ANALYZE_LOAD_LOCALXML_ERROR                1003        //¼ÓÔØ±¾µØxml³ö´í
#define    XML_NANLYZE_DVR_DATA_FORMAT_ERROR            1004        //Éè±¸ÄÜÁ¦Êý¾Ý¸ñÊ½´íÎó
#define    XML_ANALYZE_TYPE_ERROR                        1005        //ÄÜÁ¦¼¯ÀàÐÍ´íÎó
#define    XML_ANALYZE_XML_NODE_ERROR                    1006        //XMLÄÜÁ¦½Úµã¸ñÊ½´íÎó
#define XML_INPUT_PARAM_ERROR                       1007  //ÊäÈëµÄÄÜÁ¦XML½ÚµãÖµ´íÎó

#define NET_DVR_ERR_RETURNED_XML_DATA  1008  //Éè±¸·µ»ØµÄXMLÊý¾ÝÓÐÎó

//ÃñÓÃ´íÎóÂë£¨1100¡«1200£©
#define NET_ERR_PLT_USERID                          1100 //ÑéÖ¤Æ½Ì¨userid´íÎó
#define NET_ERR_TRANS_CHAN_START                    1101 //Í¸Ã÷Í¨µÀÒÑ´ò¿ª£¬µ±Ç°²Ù×÷ÎÞ·¨Íê³É
#define NET_ERR_DEV_UPGRADING                        1102 //Éè±¸ÕýÔÚÉý¼¶
#define NET_ERR_MISMATCH_UPGRADE_PACK_TYPE          1103 //Éý¼¶°üÀàÐÍ²»Æ¥Åä
#define NET_ERR_DEV_FORMATTING                      1104 //Éè±¸ÕýÔÚ¸ñÊ½»¯
#define NET_ERR_MISMATCH_UPGRADE_PACK_VERSION       1105 //Éý¼¶°ü°æ±¾²»Æ¥Åä

//2012-10-16 ±¨¾¯Éè±¸´íÎóÂë£¨1200~1300£©
#define NET_ERR_SEARCHING_MODULE                    1201 // ÕýÔÚËÑË÷Íâ½ÓÄ£¿é
#define NET_ERR_REGISTERING_MODULE                  1202 // ÕýÔÚ×¢²áÍâ½ÓÄ£¿é
#define NET_ERR_GETTING_ZONES                        1203 // ÕýÔÚ»ñÈ¡·ÀÇø²ÎÊý
#define NET_ERR_GETTING_TRIGGERS                    1204 // ÕýÔÚ»ñÈ¡´¥·¢Æ÷
#define NET_ERR_ARMED_STATUS                        1205 // ÏµÍ³´¦ÓÚ²¼·À×´Ì¬
#define    NET_ERR_PROGRAM_MODE_STATUS                    1206 // ÏµÍ³´¦ÓÚ±à³ÌÄ£Ê½
#define    NET_ERR_WALK_TEST_MODE_STATUS                1207 // ÏµÍ³´¦ÓÚ²½²âÄ£Ê½
#define    NET_ERR_BYPASS_STATUS                        1208 // ÅÔÂ·×´Ì¬
#define NET_ERR_DISABLED_MODULE_STATUS                1209 // ¹¦ÄÜÎ´Ê¹ÄÜ
#define    NET_ERR_NOT_SUPPORT_OPERATE_ZONE            1210 // ·ÀÇø²»Ö§³Ö¸Ã²Ù×÷
#define NET_ERR_NOT_SUPPORT_MOD_MODULE_ADDR            1211 // Ä£¿éµØÖ·²»ÄÜ±»ÐÞ¸Ä
#define NET_ERR_UNREGISTERED_MODULE                    1212 // Ä£¿éÎ´×¢²á
#define NET_ERR_PUBLIC_SUBSYSTEM_ASSOCIATE_SELF        1213 // ¹«¹²×ÓÏµÍ³¹ØÁª×ÔÉí
#define NET_ERR_EXCEEDS_ASSOCIATE_SUBSYSTEM_NUM        1214 // ³¬¹ý¹«¹²×ÓÏµÍ³×î´ó¹ØÁª¸öÊý
#define NET_ERR_BE_ASSOCIATED_BY_PUBLIC_SUBSYSTEM    1215 // ×ÓÏµÍ³±»ÆäËû¹«¹²×ÓÏµÍ³¹ØÁª
#define    NET_ERR_ZONE_FAULT_STATUS                    1216 // ·ÀÇø´¦ÓÚ¹ÊÕÏ×´Ì¬
#define NET_ERR_SAME_EVENT_TYPE                    1217 // ÊÂ¼þ´¥·¢±¨¾¯Êä³ö¿ªÆôºÍÊÂ¼þ´¥·¢±¨¾¯Êä³ö¹Ø±ÕÖÐÓÐÏàÍ¬ÊÂ¼þÀàÐÍ    
#define NET_ERR_ZONE_ALARM_STATUS                    1218 // ·ÀÇø´¦ÓÚ±¨¾¯×´Ì¬
#define NET_ERR_EXPANSION_BUS_SHORT_CIRCUIT            1219 //À©Õ¹×ÜÏß¶ÌÂ·
#define NET_ERR_PWD_CONFLICT                        1220  //ÃÜÂë³åÍ»


//ÐÅÏ¢·¢²¼Ö÷»ú
#define NET_ERR_GET_ALL_RETURN_OVER                    1300  //»ñÈ¡ËùÓÐ·µ»ØÊýÄ¿³¬ÏÞ
#define NET_ERR_RESOURCE_USING                      1301  //ÐÅÏ¢·¢²¼×ÊÔ´ÕýÔÚÊ¹ÓÃ£¬²»ÄÜÐÞ¸Ä
#define NET_ERR_FILE_SIZE_OVERLIMIT                    1302  //ÎÄ¼þ´óÐ¡³¬ÏÞ

//ÐÅÏ¢·¢²¼·þÎñÆ÷´íÎóÂë
#define NET_ERR_MATERIAL_NAME                       1303  //ËØ²ÄÃû³Æ·Ç·¨
#define NET_ERR_MATERIAL_NAME_LEN                   1304  //ËØ²ÄÃû³Æ³¤¶È·Ç·¨
#define NET_ERR_MATERIAL_REMARK                     1305  //ËØ²ÄÃèÊö·Ç·¨
#define NET_ERR_MATERIAL_REMARK_LEN                 1306  //ËØ²ÄÃèÊö³¤¶È·Ç·¨
#define NET_ERR_MATERIAL_SHARE_PROPERTY             1307  //ËØ²Ä¹²ÏíÊôÐÔ·Ç·¨
#define NET_ERR_UNSUPPORT_MATERIAL_TYPE             1308  //ËØ²ÄÀàÐÍ²»Ö§³Ö
#define NET_ERR_MATERIAL_NOT_EXIST                  1309  //ËØ²Ä²»´æÔÚ
#define NET_ERR_READ_FROM_DISK                      1310  //´ÓÓ²ÅÌ¶ÁÈ¡ËØ²ÄÎÄ¼þÊ§°Ü
#define NET_ERR_WRITE_TO_DISK                       1311  //ÏòÓ²ÅÌÐ´ËØ²ÄÎÄ¼þÊ§°Ü
#define NET_ERR_WRITE_DATA_BASE                     1312  //ËØ²ÄÐ´Êý¾Ý¿âÊ§°Ü

//¶àÆÁ»¥¶¯´íÎóÂë
#define    NET_ERR_MAX_SCREEN_CTRL_NUM                    1351    //ÆÁÄ»¿ØÖÆÁ¬½ÓÊý´ïµ½ÉÏÏÞ
#define    NET_ERR_FILE_NOT_EXIST                        1352    //ÎÄ¼þ²»´æÔÚ
#define NET_ERR_THUMBNAIL_NOT_EXIST                    1353    //ËõÂÔÍ¼²»´æÔÚ
#define NET_ERR_DEV_OPEN_FILE_FAIL                    1354    //Éè±¸¶Ë´ò¿ªÎÄ¼þÊ§°Ü
#define NET_ERR_SERVER_READ_FILE_FAIL                1355    //Éè±¸¶Ë¶ÁÈ¡ÎÄ¼þÊ§°Ü
#define NET_ERR_FILE_SIZE                            1356    //ÎÄ¼þ´óÐ¡´íÎó
#define    NET_ERR_FILE_NAME                            1357    //ÎÄ¼þÃû³Æ´íÎó£¬Îª¿Õ»ò²»ºÏ·¨

//2012-12-20×¥ÅÄ»ú´íÎóÂë£¨1400-1499£©
#define NET_DVR_ERR_LANENUM_EXCEED                  1400  //³µµÀÊý³¬³öÄÜÁ¦
#define NET_DVR_ERR_PRAREA_EXCEED                   1401  //ÅÆÊ¶ÇøÓò¹ý´ó
#define NET_DVR_ERR_LIGHT_PARAM                     1402  //ÐÅºÅµÆ½ÓÈë²ÎÊý´íÎó
#define NET_DVR_ERR_LANE_LINE_INVALID               1403  //³µµÀÏßÅäÖÃ´íÎó
#define NET_DVR_ERR_STOP_LINE_INVALID               1404  //Í£Ö¹ÏßÅäÖÃ´íÎó
#define NET_DVR_ERR_LEFTORRIGHT_LINE_INVALID        1405  //×ó/ÓÒ×ª·Ö½çÏßÅäÖÃ´íÎó
#define NET_DVR_ERR_LANE_NO_REPEAT                  1406  //µþ¼Ó³µµÀºÅÖØ¸´
#define NET_DVR_ERR_PRAREA_INVALID                  1407  //ÅÆÊ¶¶à±ßÐÎ²»·ûºÏÒªÇó
#define NET_DVR_ERR_LIGHT_NUM_EXCEED                1408  //ÊÓÆµ¼ì²â½»Í¨µÆÐÅºÅµÆÊýÄ¿³¬³ö×î´óÖµ
#define NET_DVR_ERR_SUBLIGHT_NUM_INVALID            1409  //ÊÓÆµ¼ì²â½»Í¨µÆÐÅºÅµÆ×ÓµÆÊýÄ¿²»ºÏ·¨
#define NET_DVR_ERR_LIGHT_AREASIZE_INVALID          1410  //ÊÓÆµ¼ì²â½»Í¨µÆÊäÈëÐÅºÅµÆ¿ò´óÐ¡²»ºÏ·¨
#define NET_DVR_ERR_LIGHT_COLOR_INVALID             1411  //ÊÓÆµ¼ì²â½»Í¨µÆÊäÈëÐÅºÅµÆÑÕÉ«²»ºÏ·¨
#define NET_DVR_ERR_LIGHT_DIRECTION_INVALID         1412  //ÊÓÆµ¼ì²â½»Í¨µÆÊäÈëµÆ·½ÏòÊôÐÔ²»ºÏ·¨
#define NET_DVR_ERR_LACK_IOABLITY                    1413  //IO¿ÚÊµ¼ÊÖ§³ÖµÄÄÜÁ¦²»×ã

#define NET_DVR_ERR_FTP_PORT                        1414  //FTP¶Ë¿ÚºÅ·Ç·¨£¨¶Ë¿ÚºÅÖØ¸´»òÕßÒì³££©
#define NET_DVR_ERR_FTP_CATALOGUE                   1415  //FTPÄ¿Â¼Ãû·Ç·¨£¨ÆôÓÃ¶à¼¶Ä¿Â¼£¬¶à¼¶Ä¿Â¼´«ÖµÎª¿Õ£©
#define NET_DVR_ERR_FTP_UPLOAD_TYPE                 1416  //FTPÉÏ´«ÀàÐÍ·Ç·¨£¨µ¥ftpÖ»Ö§³ÖÈ«²¿/Ë«ftpÖ»Ö§³Ö¿¨¿ÚºÍÎ¥ÕÂ£©
#define NET_DVR_ERR_FLASH_PARAM_WRITE               1417  //ÅäÖÃ²ÎÊýÊ±Ð´FLASHÊ§°Ü
#define NET_DVR_ERR_FLASH_PARAM_READ                1418  //ÅäÖÃ²ÎÊýÊ±¶ÁFLASHÊ§°Ü
#define NET_DVR_ERR_PICNAME_DELIMITER               1419  //FTPÍ¼Æ¬ÃüÃû·Ö¸ô·û·Ç·¨
#define NET_DVR_ERR_PICNAME_ITEM                    1420  //FTPÍ¼Æ¬ÃüÃûÏî·Ç·¨£¨ÀýÈç ·Ö¸ô·û£©
#define NET_DVR_ERR_PLATE_RECOGNIZE_TYPE            1421  //ÅÆÊ¶ÇøÓòÀàÐÍ·Ç·¨ £¨¾ØÐÎºÍ¶à±ßÐÎÓÐÐ§ÐÔÐ£Ñé£©
#define NET_DVR_ERR_CAPTURE_TIMES                   1422  //×¥ÅÄ´ÎÊý·Ç·¨ £¨ÓÐÐ§ÖµÊÇ0¡«5£©
#define NET_DVR_ERR_LOOP_DISTANCE                   1423  //ÏßÈ¦¾àÀë·Ç·¨ £¨ÓÐÐ§ÖµÊÇ0¡«2000ms£©
#define NET_DVR_ERR_LOOP_INPUT_STATUS               1424  //ÏßÈ¦ÊäÈë×´Ì¬·Ç·¨ £¨ÓÐÐ§Öµ£©
#define NET_DVR_ERR_RELATE_IO_CONFLICT              1425  //²âËÙ×éIO¹ØÁª³åÍ»
#define NET_DVR_ERR_INTERVAL_TIME                   1426  //Á¬ÅÄ¼ä¸ôÊ±¼ä·Ç·¨ £¨0¡«6000ms£©
#define NET_DVR_ERR_SIGN_SPEED                      1427  //±êÖ¾ÏÞËÙÖµ·Ç·¨£¨´ó³µ±êÖ¾ÏÞËÙ²»ÄÜ´óÓÚÐ¡³µ±êÖ¾ÏÞËÙ £©
#define NET_DVR_ERR_PIC_FLIP                        1428  //Í¼ÏñÅäÖÃ·­×ª £¨ÅäÖÃ½»»¥Ó°Ïì£©
#define NET_DVR_ERR_RELATE_LANE_NUMBER              1429  //¹ØÁª³µµÀÊý´íÎó (ÖØ¸´ ÓÐÐ§ÖµÐ£Ñé1¡«99)
#define NET_DVR_ERR_TRIGGER_MODE                    1430  //ÅäÖÃ×¥ÅÄ»ú´¥·¢Ä£Ê½·Ç·¨
#define NET_DVR_ERR_DELAY_TIME                      1431  //´¥·¢ÑÓÊ±Ê±¼ä´íÎó(2000ms)
#define NET_DVR_ERR_EXCEED_RS485_COUNT              1432  //³¬¹ý×î´ó485¸öÊýÏÞÖÆ
#define NET_DVR_ERR_RADAR_TYPE                      1433  //À×´ïÀàÐÍ´íÎó
#define NET_DVR_ERR_RADAR_ANGLE                     1434  //À×´ï½Ç¶È´íÎó
#define NET_DVR_ERR_RADAR_SPEED_VALID_TIME          1435  //À×´ïÓÐÐ§Ê±¼ä´íÎó
#define NET_DVR_ERR_RADAR_LINE_CORRECT              1436  //À×´ïÏßÐÔ½ÃÕý²ÎÊý´íÎó
#define NET_DVR_ERR_RADAR_CONST_CORRECT             1437  //À×´ï³£Á¿½ÃÕý²ÎÊý´íÎó
#define NET_DVR_ERR_RECORD_PARAM                    1438  //Â¼Ïñ²ÎÊýÎÞÐ§£¨Ô¤Â¼Ê±¼ä²»³¬¹ý10s£©
#define NET_DVR_ERR_LIGHT_WITHOUT_COLOR_AND_DIRECTION 1439   //ÊÓÆµ¼ì²âÐÅºÅµÆÅäÖÃÐÅºÅµÆ¸öÊý£¬µ«ÊÇÃ»ÓÐ¹´Ñ¡ÐÅºÅµÆ·½ÏòºÍÑÕÉ«µÄ
#define NET_DVR_ERR_LIGHT_WITHOUT_DETECTION_REGION   1440   //ÊÓÆµ¼ì²âÐÅºÅµÆÅäÖÃÐÅºÅµÆ¸öÊý£¬µ«ÊÇÃ»ÓÐ»­¼ì²âÇøÓò
#define NET_DVR_ERR_RECOGNIZE_PROVINCE_PARAM         1441   //ÅÆÊ¶²ÎÊýÊ¡·Ý²ÎÊýµÄºÏ·¨ÐÔ

#define NET_DVR_ERR_SPEED_TIMEOUT                 1442    //IO²âËÙ³¬Ê±Ê±¼ä·Ç·¨£¨ÓÐÐ§Öµ´óÓÚ0£©
#define NET_DVR_ERR_NTP_TIMEZONE                  1443    //ntpÊ±Çø²ÎÊý´íÎó
#define NET_DVR_ERR_NTP_INTERVAL_TIME             1444    //ntpÐ£Ê±¼ä¸ô´íÎó
#define NET_DVR_ERR_NETWORK_CARD_NUM              1445    //¿ÉÅäÖÃÍø¿¨ÊýÄ¿´íÎó
#define NET_DVR_ERR_DEFAULT_ROUTE                 1446    //Ä¬ÈÏÂ·ÓÉ´íÎó
#define NET_DVR_ERR_BONDING_WORK_MODE             1447    //bondingÍø¿¨¹¤×÷Ä£Ê½´íÎó
#define NET_DVR_ERR_SLAVE_CARD                    1448    //slaveÍø¿¨´íÎó
#define NET_DVR_ERR_PRIMARY_CARD                  1449    //PrimaryÍø¿¨´íÎó
#define NET_DVR_ERR_DHCP_PPOE_WORK                1450    //dhcpºÍpppoE²»ÄÜÍ¬Ê±Æô¶¯
#define NET_DVR_ERR_NET_INTERFACE                 1451    //ÍøÂç½Ó¿Ú´íÎó
#define NET_DVR_ERR_MTU                           1452    //MTU´íÎó
#define NET_DVR_ERR_NETMASK                       1453    //×ÓÍøÑÚÂë´íÎó
#define NET_DVR_ERR_IP_INVALID                    1454    //IPµØÖ·²»ºÏ·¨
#define NET_DVR_ERR_MULTICAST_IP_INVALID          1455    //¶à²¥µØÖ·²»ºÏ·¨
#define NET_DVR_ERR_GATEWAY_INVALID               1456    //Íø¹Ø²»ºÏ·¨
#define NET_DVR_ERR_DNS_INVALID                   1457    //DNS²»ºÏ·¨
#define NET_DVR_ERR_ALARMHOST_IP_INVALID          1458    //¸æ¾¯Ö÷»úµØÖ·²»ºÏ·¨
#define NET_DVR_ERR_IP_CONFLICT                   1459    //IP³åÍ»
#define NET_DVR_ERR_NETWORK_SEGMENT               1460    //IP²»Ö§³ÖÍ¬Íø¶Î
#define NET_DVR_ERR_NETPORT                       1461    //¶Ë¿Ú´íÎó

#define NET_DVR_ERR_PPPOE_NOSUPPORT               1462  //PPPOE²»Ö§³Ö
#define NET_DVR_ERR_DOMAINNAME_NOSUPPORT          1463  //ÓòÃû²»Ö§³Ö
#define NET_DVR_ERR_NO_SPEED                      1464  //Î´ÆôÓÃ²âËÙ¹¦ÄÜ 
#define NET_DVR_ERR_IOSTATUS_INVALID              1465  //IO×´Ì¬´íÎó
#define NET_DVR_ERR_BURST_INTERVAL_INVALID        1466  //Á¬ÅÄ¼ä¸ô·Ç·¨    
#define NET_DVR_ERR_RESERVE_MODE                  1467  //±¸ÓÃÄ£Ê½´íÎó

#define NET_DVR_ERR_LANE_NO                       1468  //µþ¼Ó³µµÀºÅ´íÎó
#define NET_DVR_ERR_COIL_AREA_TYPE                1469  //ÏßÈ¦ÇøÓòÀàÐÍ´íÎó
#define NET_DVR_ERR_TRIGGER_AREA_PARAM            1470  //´¥·¢ÇøÓò²ÎÊý´íÎó
#define NET_DVR_ERR_SPEED_LIMIT_PARAM             1471  //Î¥ÕÂÏÞËÙ²ÎÊý´íÎó
#define NET_DVR_ERR_LANE_PROTOCOL_TYPE            1472  //³µµÀ¹ØÁªÐ­ÒéÀàÐÍ´íÎó

#define NET_DVR_ERR_INTERVAL_TYPE                 1473  //Á¬ÅÄ¼ä¸ôÀàÐÍ·Ç·¨
#define NET_DVR_ERR_INTERVAL_DISTANCE             1474  //Á¬ÅÄ¼ä¸ô¾àÀë·Ç·¨
#define NET_DVR_ERR_RS485_ASSOCIATE_DEVTYPE       1475  //RS485¹ØÁªÀàÐÍ·Ç·¨
#define NET_DVR_ERR_RS485_ASSOCIATE_LANENO        1476  //RS485¹ØÁª³µµÀºÅ·Ç·¨
#define NET_DVR_ERR_LANENO_ASSOCIATE_MULTIRS485   1477  //³µµÀºÅ¹ØÁª¶à¸öRS485¿Ú
#define NET_DVR_ERR_LIGHT_DETECTION_REGION        1478  //ÊÓÆµ¼ì²âÐÅºÅµÆÅäÖÃÐÅºÅµÆ¸öÊý£¬µ«ÊÇ¼ì²âÇøÓò¿í»ò¸ßÎª0

#define NET_DVR_ERR_DN2D_NOSUPPORT            1479  //²»Ö§³Ö×¥ÅÄÖ¡2D½µÔë
#define NET_DVR_ERR_IRISMODE_NOSUPPORT        1480  //²»Ö§³ÖµÄ¾µÍ·ÀàÐÍ
#define NET_DVR_ERR_WB_NOSUPPORT              1481  //²»Ö§³ÖµÄ°×Æ½ºâÄ£Ê½
#define NET_DVR_ERR_IO_EFFECTIVENESS          1482  //IO¿ÚµÄÓÐÐ§ÐÔ
#define NET_DVR_ERR_LIGHTNO_MAX               1483  //ÐÅºÅµÆ¼ì²âÆ÷½ÓÈëºì/»ÆµÆ³¬ÏÞ(16)
#define NET_DVR_ERR_LIGHTNO_CONFLICT          1484  //ÐÅºÅµÆ¼ì²âÆ÷½ÓÈëºì/»ÆµÆ³åÍ»      

#define NET_DVR_ERR_CANCEL_LINE                1485  //Ö±ÐÐ´¥·¢Ïß
#define NET_DVR_ERR_STOP_LINE               1486  //´ýÐÐÇøÍ£Ö¹Ïß
#define NET_DVR_ERR_RUSH_REDLIGHT_LINE      1487  //´³ºìµÆ´¥·¢Ïß 
#define NET_DVR_ERR_IOOUTNO_MAX             1488  //IOÊä³ö¿Ú±àºÅÔ½½ç

#define NET_DVR_ERR_IOOUTNO_AHEADTIME_MAX    1489  //IOÊä³ö¿ÚÌáÇ°Ê±¼ä³¬ÏÞ
#define NET_DVR_ERR_IOOUTNO_IOWORKTIME      1490  //IOÊä³ö¿ÚÓÐÐ§³ÖÐøÊ±¼ä³¬ÏÞ
#define NET_DVR_ERR_IOOUTNO_FREQMULTI       1491  //IOÊä³ö¿ÚÂö³åÄ£Ê½ÏÂ±¶Æµ³ö´í
#define NET_DVR_ERR_IOOUTNO_DUTYRATE        1492  //IOÊä³ö¿ÚÂö³åÄ£Ê½ÏÂÕ¼¿Õ±È³ö´í
#define NET_DVR_ERR_VIDEO_WITH_EXPOSURE     1493  //ÒÔÆØÉÁÆðÐ§£¬¹¤×÷·½Ê½²»Ö§³ÖÊÓÆµ
#define NET_DVR_ERR_PLATE_BRIGHTNESS_WITHOUT_FLASHDET   1494  //³µÅÆÁÁ¶È×Ô¶¯Ê¹ÄÜÉÁ¹âµÆ½öÔÚ³µÅÆÁÁ¶È²¹³¥Ä£Ê½ÏÂÆðÐ§

#define NET_DVR_ERR_RECOGNIZE_TYPE_PARAM            1495 //Ê¶±ðÀàÐÍ·Ç·¨ ³µÅÆÊ¶±ð²ÎÊý£¨Èç´ó³µ¡¢Ð¡³µ¡¢±³Ïò¡¢ÕýÏò¡¢³µ±êÊ¶±ðµÈ£©
#define NET_DVR_ERR_PALTE_RECOGNIZE_AREA_PARAM      1496 //ÅÆÊ¶²ÎÊý·Ç·¨ ÅÆÊ¶ÇøÓòÅäÖÃÊ±ÅÐ¶Ï³ö´í
#define NET_DVR_ERR_PORT_CONFLICT                   1497 //¶Ë¿ÚÓÐ³åÍ»
#define NET_DVR_ERR_LOOP_IP                         1498 //IP²»ÄÜÉèÖÃÎª»Ø»·µØÖ·
#define NET_DVR_ERR_DRIVELINE_SENSITIVE             1499 //Ñ¹ÏßÁéÃô¶È³ö´í(ÊÓÆµµç¾¯Ä£Ê½ÏÂ)


//2013-3-6VQD´íÎóÂë£¨1500¡«1550£©
#define NET_ERR_VQD_TIME_CONFLICT                    1500 //VQDÕï¶ÏÊ±¼ä¶Î³åÍ»
#define NET_ERR_VQD_PLAN_NO_EXIST                    1501 //VQDÕï¶Ï¼Æ»®²»´æÔÚ
#define NET_ERR_VQD_CHAN_NO_EXIST                    1502 //VQD¼à¿Øµã²»´æÔÚ
#define NET_ERR_VQD_CHAN_MAX                        1503 //VQD¼Æ»®ÊýÒÑ´ïÉÏÏÞ
#define NET_ERR_VQD_TASK_MAX                        1504 //VQDÈÎÎñÊýÒÑ´ïÉÏÏÞ

//×¥ÅÄ»ú´íÎóÂëÐÂÔöÀ©Õ¹(1600~1900)
#define NET_DVR_ERR_EXCEED_MAX_CAPTURE_TIMES        1600 //×¥ÅÄÄ£Ê½ÎªÆµÉÁÊ±×î´ó×¥ÅÄÕÅÊýÎª2ÕÅ(IVTÄ£Ê½ÏÂ)
#define NET_DVR_ERR_REDAR_TYPE_CONFLICT             1601 //ÏàÍ¬485¿Ú¹ØÁªÀ×´ïÀàÐÍ³åÍ» 
#define NET_DVR_ERR_LICENSE_PLATE_NULL              1602 //³µÅÆºÅÎª¿Õ
#define NET_DVR_ERR_WRITE_DATABASE                  1603 //Ð´ÈëÊý¾Ý¿âÊ§°Ü
#define NET_DVR_ERR_LICENSE_EFFECTIVE_TIME          1604 //³µÅÆÓÐÐ§Ê±¼ä´íÎó
//ÊÓÆµµç¾¯
#define NET_DVR_ERR_PRERECORDED_STARTTIME_LONG      1605 //Ô¤Â¼¿ªÊ¼Ê±¼ä´óÓÚÎ¥·¨×¥ÅÄÕÅÊý
//»ìºÏ¿¨¿Ú
#define NET_DVR_ERR_TRIGGER_RULE_LINE               1606 //´¥·¢¹æÔòÏß´íÎó
#define NET_DVR_ERR_LEFTRIGHT_TRIGGERLINE_NOTVERTICAL 1607 //×ó/ÓÒ´¥·¢Ïß²»´¹Ö±
#define NET_DVR_ERR_FLASH_LAMP_MODE                 1608 //ÉÁ¹âµÆÉÁË¸Ä£Ê½´íÎó
#define NET_DVR_ERR_ILLEGAL_SNAPSHOT_NUM            1609 //Î¥ÕÂ×¥ÅÄÕÅÊý´íÎó
#define NET_DVR_ERR_ILLEGAL_DETECTION_TYPE          1610 //Î¥ÕÂ¼ì²âÀàÐÍ´íÎó
#define NET_DVR_ERR_POSITIVEBACK_TRIGGERLINE_HIGH   1611 //Õý±³Ïò´¥·¢Ïß¸ß¶È´íÎó
#define NET_DVR_ERR_MIXEDMODE_CAPTYPE_ALLTARGETS    1612 //»ìºÏÄ£Ê½ÏÂÖ»Ö§³Ö»ú·ÇÈË×¥ÅÄÀàÐÍ

#define NET_DVR_ERR_CARSIGNSPEED_GREATERTHAN_LIMITSPEED  1613//Ð¡³µ±êÖ¾ÏÞËÙ´óÓÚÏÞËÙÖµ
#define NET_DVR_ERR_BIGCARSIGNSPEED_GREATERTHAN_LIMITSPEED  1614//´ó³µ±êÖ¾ÏÞËÙ´óÓÚÏÞËÙÖµ
#define NET_DVR_ERR_BIGCARSIGNSPEED_GREATERTHAN_CARSIGNSPEED  1615//´ó³µ±êÖ¾ÏÞËÙ´óÓÚÐ¡³µ±êÖ¾ÏÞËÙÖµ
#define NET_DVR_ERR_BIGCARLIMITSPEED_GREATERTHAN_CARLIMITSPEED  1616//´ó³µÏÞËÙÖµ´óÓÚÐ¡³µÏÞËÙÖµ
#define NET_DVR_ERR_BIGCARLOWSPEEDLIMIT_GREATERTHAN_CARLOWSPEEDLIMIT  1617//´ó³µµÍËÙÏÞËÙÖµ´óÓÚÐ¡³µµÍËÙÏÞËÙÖµ
#define NET_DVR_ERR_CARLIMITSPEED_GREATERTHAN_EXCEPHIGHSPEED  1618//Ð¡³µÏÞËÙ´óÓÚÒì³£¸ßËÙÖµ
#define NET_DVR_ERR_BIGCARLIMITSPEED_GREATERTHAN_EXCEPHIGHSPEED  1619//´ó³µÏÞËÙ´óÓÚÒì³£¸ßËÙÖµ
#define NET_DVR_ERR_STOPLINE_MORETHAN_TRIGGERLINE  1620//Í£Ö¹Ïß³¬¹ýÖ±ÐÐ´¥·¢Ïß

//ÃÅ½ûÖ÷»ú´íÎóÂë
#define NET_ERR_TIME_OVERLAP                        1900 //Ê±¼ä¶ÎÖØµþ
#define NET_ERR_HOLIDAY_PLAN_OVERLAP                1901 //¼ÙÈÕ¼Æ»®ÖØµþ
#define NET_ERR_CARDNO_NOT_SORT                     1902 //¿¨ºÅÎ´ÅÅÐò
#define NET_ERR_CARDNO_NOT_EXIST                    1903 //¿¨ºÅ²»´æÔÚ
#define NET_ERR_ILLEGAL_CARDNO                      1904 //¿¨ºÅ´íÎó
#define NET_ERR_ZONE_ALARM                          1905 //·ÀÇø´¦ÓÚ²¼·À×´Ì¬(²ÎÊýÐÞ¸Ä²»ÔÊÐí)
#define NET_ERR_ZONE_OPERATION_NOT_SUPPORT          1906 //·ÀÇø²»Ö§³Ö¸Ã²Ù×÷
#define NET_ERR_INTERLOCK_ANTI_CONFLICT             1907 //¶àÃÅ»¥ËøºÍ·´Ç±»ØÍ¬Ê±ÅäÖÃ´íÎó
#define NET_ERR_DEVICE_CARD_FULL                    1908 //¿¨ÒÑÂú£¨¿¨´ïµ½10Wºó·µ»Ø£©
#define NET_ERR_HOLIDAY_GROUP_DOWNLOAD              1909 //¼ÙÈÕ×éÏÂÔØÊ§°Ü


//¿ÉÊÓ¶Ô½²´íÎóÂë
#define NET_DVR_ERR_OUTDOOR_COMMUNICATION		    1950 //ÓëÃÅ¿Ú»úÍ¨ÐÅÒì³£
#define NET_DVR_ERR_ROOMNO_UNDEFINED				1951 //Î´ÉèÖÃ·¿¼äºÅ
#define NET_DVR_ERR_NO_CALLING		                1952 //ÎÞºô½Ð
#define NET_DVR_ERR_RINGING				            1953 //ÏìÁå
#define NET_DVR_ERR_IS_CALLING_NOW		            1954 //ÕýÔÚÍ¨»°
#define NET_DVR_ERR_LOCK_PASSWORD_WRONG             1955//ÖÇÄÜËøÃÜÂë´íÎó
#define NET_DVR_ERR_CONTROL_LOCK_FAILURE            1956//¿ª¹ØËøÊ§°Ü    
#define NET_DVR_ERR_CONTROL_LOCK_OVERTIME           1957//¿ª¹ØËø³¬Ê±	
#define NET_DVR_ERR_LOCK_DEVICE_BUSY                1958//ÖÇÄÜËøÉè±¸·±Ã¦
#define NET_DVR_ERR_UNOPEN_REMOTE_LOCK_FUNCTION     1959//Ô¶³Ì¿ªËø¹¦ÄÜÎ´´ò¿ª


//ºó¶Ë´íÎóÂë £¨2100 - 3000£©
#define NET_DVR_ERR_FILE_NOT_COMPLETE               2100    //ÏÂÔØµÄÎÄ¼þ²»ÍêÕû
#define NET_DVR_ERR_IPC_EXIST                       2101    //¸ÃIPCÒÑ¾­´æÔÚ
#define NET_DVR_ERR_ADD_IPC                         2102    //¸ÃÍ¨µÀÒÑÌí¼ÓIPC
#define NET_DVR_ERR_OUT_OF_RES                      2103    //ÍøÂç´ø¿íÄÜÁ¦²»×ã
#define NET_DVR_ERR_CONFLICT_TO_LOCALIP             2104    //IPCµÄipµØÖ·¸úDVRµÄipµØÖ·³åÍ»
#define NET_DVR_ERR_IP_SET                          2105    //·Ç·¨ipµØÖ·
#define NET_DVR_ERR_PORT_SET                        2106    //·Ç·¨µÄ¶Ë¿ÚºÅ

//ÈÈ³ÉÏñ²úÏßÏà¹Ø´íÎóÂë£¨3001 - 3500£©
#define NET_DVR_ERR_NOTSUPPORT_DEICING    3001    //Éè±¸µ±Ç°×´Ì¬²»Ö§³Ö³ý±ù¹¦ÄÜ£¨Ö»ÔÚPOE+¡¢AC24V¡¢DC12V¹©µçÏÂÖ§³Ö³ý±ù¹¦ÄÜ£©
#define NET_DVR_ERR_THERMENABLE_CLOSE     3002    //²âÎÂ¹¦ÄÜ×ÜÊ¹ÄÜÎ´¿ªÆô¡£(¼´NET_DVR_THERMOMETRY_BASICPARAMÊ¹ÄÜÎ´¿ªÆô)
#define NET_DVR_ERR_NOTMEET_DEICING       3003    //µ±Ç°¿ÕÇ»ÎÂ¶È²»Âú×ãÊÖ¶¯³ý±ù¿ªÆôÌõ¼þ£¨Ðè¿ÕÇ»ÎÂ¶ÈÐ¡ÓÚ30¶È²Å¿É¿ªÆô£©
/*******************È«¾Ö´íÎóÂë end**********************/

/*************************************************
NET_DVR_IsSupport()·µ»ØÖµ
1£­9Î»·Ö±ð±íÊ¾ÒÔÏÂÐÅÏ¢£¨Î»ÓëÊÇTRUE)±íÊ¾Ö§³Ö£»
**************************************************/
#define NET_DVR_SUPPORT_DDRAW            0x01//Ö§³ÖDIRECTDRAW£¬Èç¹û²»Ö§³Ö£¬Ôò²¥·ÅÆ÷²»ÄÜ¹¤×÷£»
#define NET_DVR_SUPPORT_BLT                0x02//ÏÔ¿¨Ö§³ÖBLT²Ù×÷£¬Èç¹û²»Ö§³Ö£¬Ôò²¥·ÅÆ÷²»ÄÜ¹¤×÷£»
#define NET_DVR_SUPPORT_BLTFOURCC        0x04//ÏÔ¿¨BLTÖ§³ÖÑÕÉ«×ª»»£¬Èç¹û²»Ö§³Ö£¬²¥·ÅÆ÷»áÓÃÈí¼þ·½·¨×÷RGB×ª»»£»
#define NET_DVR_SUPPORT_BLTSHRINKX        0x08//ÏÔ¿¨BLTÖ§³ÖXÖáËõÐ¡£»Èç¹û²»Ö§³Ö£¬ÏµÍ³»áÓÃÈí¼þ·½·¨×ª»»£»
#define NET_DVR_SUPPORT_BLTSHRINKY        0x10//ÏÔ¿¨BLTÖ§³ÖYÖáËõÐ¡£»Èç¹û²»Ö§³Ö£¬ÏµÍ³»áÓÃÈí¼þ·½·¨×ª»»£»
#define NET_DVR_SUPPORT_BLTSTRETCHX        0x20//ÏÔ¿¨BLTÖ§³ÖXÖá·Å´ó£»Èç¹û²»Ö§³Ö£¬ÏµÍ³»áÓÃÈí¼þ·½·¨×ª»»£»
#define NET_DVR_SUPPORT_BLTSTRETCHY        0x40//ÏÔ¿¨BLTÖ§³ÖYÖá·Å´ó£»Èç¹û²»Ö§³Ö£¬ÏµÍ³»áÓÃÈí¼þ·½·¨×ª»»£»
#define NET_DVR_SUPPORT_SSE                0x80//CPUÖ§³ÖSSEÖ¸Áî£¬Intel Pentium3ÒÔÉÏÖ§³ÖSSEÖ¸Áî£»
#define NET_DVR_SUPPORT_MMX                0x100//CPUÖ§³ÖMMXÖ¸Áî¼¯£¬Intel Pentium3ÒÔÉÏÖ§³ÖSSEÖ¸Áî£»

/**********************ÔÆÌ¨¿ØÖÆÃüÁî begin*************************/    
#define LIGHT_PWRON        2    /* ½ÓÍ¨µÆ¹âµçÔ´ */
#define WIPER_PWRON        3    /* ½ÓÍ¨ÓêË¢¿ª¹Ø */
#define FAN_PWRON        4    /* ½ÓÍ¨·çÉÈ¿ª¹Ø */
#define HEATER_PWRON    5    /* ½ÓÍ¨¼ÓÈÈÆ÷¿ª¹Ø */
#define AUX_PWRON1        6    /* ½ÓÍ¨¸¨ÖúÉè±¸¿ª¹Ø */
#define AUX_PWRON2        7    /* ½ÓÍ¨¸¨ÖúÉè±¸¿ª¹Ø */
#define SET_PRESET        8    /* ÉèÖÃÔ¤ÖÃµã */
#define CLE_PRESET        9    /* Çå³ýÔ¤ÖÃµã */

#define ZOOM_IN            11    /* ½¹¾àÒÔËÙ¶ÈSS±ä´ó(±¶ÂÊ±ä´ó) */
#define ZOOM_OUT        12    /* ½¹¾àÒÔËÙ¶ÈSS±äÐ¡(±¶ÂÊ±äÐ¡) */
#define FOCUS_NEAR      13  /* ½¹µãÒÔËÙ¶ÈSSÇ°µ÷ */
#define FOCUS_FAR       14  /* ½¹µãÒÔËÙ¶ÈSSºóµ÷ */
#define IRIS_OPEN       15  /* ¹âÈ¦ÒÔËÙ¶ÈSSÀ©´ó */
#define IRIS_CLOSE      16  /* ¹âÈ¦ÒÔËÙ¶ÈSSËõÐ¡ */

#define TILT_UP            21    /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÉÏÑö */
#define TILT_DOWN        22    /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÏÂ¸© */
#define PAN_LEFT        23    /* ÔÆÌ¨ÒÔSSµÄËÙ¶È×ó×ª */
#define PAN_RIGHT        24    /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÓÒ×ª */
#define UP_LEFT            25    /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÉÏÑöºÍ×ó×ª */
#define UP_RIGHT        26    /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÉÏÑöºÍÓÒ×ª */
#define DOWN_LEFT        27    /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÏÂ¸©ºÍ×ó×ª */
#define DOWN_RIGHT        28    /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÏÂ¸©ºÍÓÒ×ª */
#define PAN_AUTO        29    /* ÔÆÌ¨ÒÔSSµÄËÙ¶È×óÓÒ×Ô¶¯É¨Ãè */

#define FILL_PRE_SEQ    30    /* ½«Ô¤ÖÃµã¼ÓÈëÑ²º½ÐòÁÐ */
#define SET_SEQ_DWELL    31    /* ÉèÖÃÑ²º½µãÍ£¶ÙÊ±¼ä */
#define SET_SEQ_SPEED    32    /* ÉèÖÃÑ²º½ËÙ¶È */
#define CLE_PRE_SEQ        33    /* ½«Ô¤ÖÃµã´ÓÑ²º½ÐòÁÐÖÐÉ¾³ý */
#define STA_MEM_CRUISE    34    /* ¿ªÊ¼¼ÇÂ¼¹ì¼£ */
#define STO_MEM_CRUISE    35    /* Í£Ö¹¼ÇÂ¼¹ì¼£ */
#define RUN_CRUISE        36    /* ¿ªÊ¼¹ì¼£ */
#define RUN_SEQ            37    /* ¿ªÊ¼Ñ²º½ */
#define STOP_SEQ        38    /* Í£Ö¹Ñ²º½ */
#define GOTO_PRESET        39    /* ¿ìÇò×ªµ½Ô¤ÖÃµã */

#define DEL_SEQ         43  /* É¾³ýÑ²º½Â·¾¶ */
#define STOP_CRUISE        44    /* Í£Ö¹¹ì¼£ */
#define DELETE_CRUISE    45    /* É¾³ýµ¥Ìõ¹ì¼£ */
#define DELETE_ALL_CRUISE 46/* É¾³ýËùÓÐ¹ì¼£ */

#define PAN_CIRCLE      50   /* ÔÆÌ¨ÒÔSSµÄËÙ¶È×Ô¶¯Ô²ÖÜÉ¨Ãè */
#define DRAG_PTZ        51   /* ÍÏ¶¯PTZ */
#define LINEAR_SCAN     52   /* ÇøÓòÉ¨Ãè */ //2014-03-15 
#define CLE_ALL_PRESET  53   /* Ô¤ÖÃµãÈ«²¿Çå³ý */ 
#define CLE_ALL_SEQ     54   /* Ñ²º½È«²¿Çå³ý */ 
#define CLE_ALL_CRUISE  55   /* ¹ì¼£È«²¿Çå³ý */ 

#define POPUP_MENU      56   /* ÏÔÊ¾²Ù×÷²Ëµ¥ */

#define TILT_DOWN_ZOOM_IN    58    /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÏÂ¸©&&½¹¾àÒÔËÙ¶ÈSS±ä´ó(±¶ÂÊ±ä´ó) */
#define TILT_DOWN_ZOOM_OUT  59  /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÏÂ¸©&&½¹¾àÒÔËÙ¶ÈSS±äÐ¡(±¶ÂÊ±äÐ¡) */
#define PAN_LEFT_ZOOM_IN    60  /* ÔÆÌ¨ÒÔSSµÄËÙ¶È×ó×ª&&½¹¾àÒÔËÙ¶ÈSS±ä´ó(±¶ÂÊ±ä´ó)*/
#define PAN_LEFT_ZOOM_OUT   61  /* ÔÆÌ¨ÒÔSSµÄËÙ¶È×ó×ª&&½¹¾àÒÔËÙ¶ÈSS±äÐ¡(±¶ÂÊ±äÐ¡)*/
#define PAN_RIGHT_ZOOM_IN    62  /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÓÒ×ª&&½¹¾àÒÔËÙ¶ÈSS±ä´ó(±¶ÂÊ±ä´ó) */
#define PAN_RIGHT_ZOOM_OUT  63  /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÓÒ×ª&&½¹¾àÒÔËÙ¶ÈSS±äÐ¡(±¶ÂÊ±äÐ¡) */
#define UP_LEFT_ZOOM_IN     64  /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÉÏÑöºÍ×ó×ª&&½¹¾àÒÔËÙ¶ÈSS±ä´ó(±¶ÂÊ±ä´ó)*/
#define UP_LEFT_ZOOM_OUT    65  /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÉÏÑöºÍ×ó×ª&&½¹¾àÒÔËÙ¶ÈSS±äÐ¡(±¶ÂÊ±äÐ¡)*/
#define UP_RIGHT_ZOOM_IN    66  /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÉÏÑöºÍÓÒ×ª&&½¹¾àÒÔËÙ¶ÈSS±ä´ó(±¶ÂÊ±ä´ó)*/
#define UP_RIGHT_ZOOM_OUT   67  /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÉÏÑöºÍÓÒ×ª&&½¹¾àÒÔËÙ¶ÈSS±äÐ¡(±¶ÂÊ±äÐ¡)*/
#define DOWN_LEFT_ZOOM_IN   68  /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÏÂ¸©ºÍ×ó×ª&&½¹¾àÒÔËÙ¶ÈSS±ä´ó(±¶ÂÊ±ä´ó) */
#define DOWN_LEFT_ZOOM_OUT  69  /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÏÂ¸©ºÍ×ó×ª&&½¹¾àÒÔËÙ¶ÈSS±äÐ¡(±¶ÂÊ±äÐ¡) */
#define DOWN_RIGHT_ZOOM_IN    70  /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÏÂ¸©ºÍÓÒ×ª&&½¹¾àÒÔËÙ¶ÈSS±ä´ó(±¶ÂÊ±ä´ó) */
#define DOWN_RIGHT_ZOOM_OUT    71  /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÏÂ¸©ºÍÓÒ×ª&&½¹¾àÒÔËÙ¶ÈSS±äÐ¡(±¶ÂÊ±äÐ¡) */
#define TILT_UP_ZOOM_IN        72    /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÉÏÑö&&½¹¾àÒÔËÙ¶ÈSS±ä´ó(±¶ÂÊ±ä´ó) */
#define TILT_UP_ZOOM_OUT    73    /* ÔÆÌ¨ÒÔSSµÄËÙ¶ÈÉÏÑö&&½¹¾àÒÔËÙ¶ÈSS±äÐ¡(±¶ÂÊ±äÐ¡) */
/**********************ÔÆÌ¨¿ØÖÆÃüÁî end*************************/

#define DVR_VEHICLE_CONTROL_LIST   0x1 //³µÁ¾ºÚ°×Ãûµ¥Êý¾ÝÀàÐÍ(·¢ËÍµÄÊý¾ÝÀàÐÍ)2013-11-04
    

/*************************************************
»Ø·ÅÊ±²¥·Å¿ØÖÆÃüÁîºê¶¨Òå 
NET_DVR_PlayBackControl
NET_DVR_PlayControlLocDisplay
NET_DVR_DecPlayBackCtrlµÄºê¶¨Òå
¾ßÌåÖ§³Ö²é¿´º¯ÊýËµÃ÷ºÍ´úÂë
**************************************************/    
#define NET_DVR_PLAYSTART        1//¿ªÊ¼²¥·Å
#define NET_DVR_PLAYSTOP        2//Í£Ö¹²¥·Å
#define NET_DVR_PLAYPAUSE        3//ÔÝÍ£²¥·Å
#define NET_DVR_PLAYRESTART        4//»Ö¸´²¥·Å
#define NET_DVR_PLAYFAST        5//¿ì·Å
#define NET_DVR_PLAYSLOW        6//Âý·Å
#define NET_DVR_PLAYNORMAL        7//Õý³£ËÙ¶È
#define NET_DVR_PLAYFRAME        8//µ¥Ö¡·Å
#define NET_DVR_PLAYSTARTAUDIO    9//´ò¿ªÉùÒô
#define NET_DVR_PLAYSTOPAUDIO    10//¹Ø±ÕÉùÒô
#define NET_DVR_PLAYAUDIOVOLUME    11//µ÷½ÚÒôÁ¿
#define NET_DVR_PLAYSETPOS        12//¸Ä±äÎÄ¼þ»Ø·ÅµÄ½ø¶È
#define NET_DVR_PLAYGETPOS        13//»ñÈ¡ÎÄ¼þ»Ø·ÅµÄ½ø¶È
#define NET_DVR_PLAYGETTIME        14//»ñÈ¡µ±Ç°ÒÑ¾­²¥·ÅµÄÊ±¼ä(°´ÎÄ¼þ»Ø·ÅµÄÊ±ºòÓÐÐ§)
#define NET_DVR_PLAYGETFRAME    15//»ñÈ¡µ±Ç°ÒÑ¾­²¥·ÅµÄÖ¡Êý(°´ÎÄ¼þ»Ø·ÅµÄÊ±ºòÓÐÐ§)
#define NET_DVR_GETTOTALFRAMES  16//»ñÈ¡µ±Ç°²¥·ÅÎÄ¼þ×ÜµÄÖ¡Êý(°´ÎÄ¼þ»Ø·ÅµÄÊ±ºòÓÐÐ§)
#define NET_DVR_GETTOTALTIME    17//»ñÈ¡µ±Ç°²¥·ÅÎÄ¼þ×ÜµÄÊ±¼ä(°´ÎÄ¼þ»Ø·ÅµÄÊ±ºòÓÐÐ§)
#define NET_DVR_THROWBFRAME        20//¶ªBÖ¡
#define NET_DVR_SETSPEED        24//ÉèÖÃÂëÁ÷ËÙ¶È
#define NET_DVR_KEEPALIVE        25//±£³ÖÓëÉè±¸µÄÐÄÌø(Èç¹û»Øµ÷×èÈû£¬½¨Òé2Ãë·¢ËÍÒ»´Î)
#define NET_DVR_PLAYSETTIME        26//°´¾ø¶ÔÊ±¼ä¶¨Î»
#define NET_DVR_PLAYGETTOTALLEN    27//»ñÈ¡°´Ê±¼ä»Ø·Å¶ÔÓ¦Ê±¼ä¶ÎÄÚµÄËùÓÐÎÄ¼þµÄ×Ü³¤¶È
#define NET_DVR_PLAY_FORWARD    29 //µ¹·ÅÇÐ»»ÎªÕý·Å
#define NET_DVR_PLAY_REVERSE    30 //Õý·ÅÇÐ»»Îªµ¹·Å
#define NET_DVR_SET_DECODEFFRAMETYPE 31 
#define NET_DVR_SET_TRANS_TYPE    32 //ÉèÖÃ×ªÂë¸ñÊ½
#define NET_DVR_PLAY_CONVERT    33 //»Ø·Å×ªÂë
#define NET_DVR_START_DRAWFRAME 34 //¿ªÊ¼³éÖ¡»Ø·Å
#define NET_DVR_STOP_DRAWFRAME  35 //Í£Ö¹³éÖ¡»Ø·Å


#define PLAYM4_DECODE_NORMAIL              0   //Õý³£½âÂë
#define PLAYM4_DECODE_KEY_FRAME            1   //Ö»½âIÖ¡
#define PLAYM4_DECODE_NONE                 2   //È«²»½â
#define PLAYM4_DECODE_TEMPORAL_LAYER_0     3   //½â1/2
#define PLAYM4_DECODE_TEMPORAL_LAYER_1     4   //½â1/4


//Ô¶³Ì°´¼ü¶¨ÒåÈçÏÂ£º
/* key value send to CONFIG program */
#define KEY_CODE_1      1
#define KEY_CODE_2      2
#define KEY_CODE_3      3
#define KEY_CODE_4      4
#define KEY_CODE_5      5
#define KEY_CODE_6      6
#define KEY_CODE_7      7
#define KEY_CODE_8      8
#define KEY_CODE_9      9
#define KEY_CODE_0      10
#define KEY_CODE_POWER  11
#define KEY_CODE_MENU   12
#define KEY_CODE_ENTER  13
#define KEY_CODE_CANCEL 14
#define KEY_CODE_UP     15
#define KEY_CODE_DOWN   16
#define KEY_CODE_LEFT   17
#define KEY_CODE_RIGHT  18
#define KEY_CODE_EDIT   19
#define KEY_CODE_ADD    20
#define KEY_CODE_MINUS  21
#define KEY_CODE_PLAY   22
#define KEY_CODE_REC    23
#define KEY_CODE_PAN    24
#define KEY_CODE_M      25
#define KEY_CODE_A      26
#define KEY_CODE_F1     27
#define KEY_CODE_F2     28

/* for PTZ control */
#define KEY_PTZ_UP_START        KEY_CODE_UP
#define KEY_PTZ_UP_STOP         32

#define KEY_PTZ_DOWN_START      KEY_CODE_DOWN
#define KEY_PTZ_DOWN_STOP       33

#define KEY_PTZ_LEFT_START      KEY_CODE_LEFT
#define KEY_PTZ_LEFT_STOP       34

#define KEY_PTZ_RIGHT_START     KEY_CODE_RIGHT
#define KEY_PTZ_RIGHT_STOP      35

#define KEY_PTZ_AP1_START       KEY_CODE_EDIT /*¹âÈ¦+*/
#define KEY_PTZ_AP1_STOP        36

#define KEY_PTZ_AP2_START       KEY_CODE_PAN /*¹âÈ¦-*/
#define KEY_PTZ_AP2_STOP        37

#define KEY_PTZ_FOCUS1_START    KEY_CODE_A /*¾Û½¹+*/
#define KEY_PTZ_FOCUS1_STOP     38

#define KEY_PTZ_FOCUS2_START    KEY_CODE_M /*¾Û½¹-*/
#define KEY_PTZ_FOCUS2_STOP     39

#define KEY_PTZ_B1_START        40 /*±ä±¶+*/
#define KEY_PTZ_B1_STOP         41

#define KEY_PTZ_B2_START        42 /*±ä±¶-*/
#define KEY_PTZ_B2_STOP         43

//9000ÐÂÔö
#define KEY_CODE_11             44
#define KEY_CODE_12             45
#define KEY_CODE_13             46
#define KEY_CODE_14             47
#define KEY_CODE_15             48
#define KEY_CODE_16             49



/*************************²ÎÊýÅäÖÃÃüÁî begin*******************************/
//ÓÃÓÚNET_DVR_SetDVRConfigºÍNET_DVR_GetDVRConfig,×¢ÒâÆä¶ÔÓ¦µÄÅäÖÃ½á¹¹

#define NET_DVR_GET_DEVICECFG        100        //»ñÈ¡Éè±¸²ÎÊý
#define NET_DVR_SET_DEVICECFG        101        //ÉèÖÃÉè±¸²ÎÊý
#define NET_DVR_GET_NETCFG            102        //»ñÈ¡ÍøÂç²ÎÊý
#define NET_DVR_SET_NETCFG            103        //ÉèÖÃÍøÂç²ÎÊý
#define NET_DVR_GET_PICCFG            104        //»ñÈ¡Í¼Ïó²ÎÊý
#define NET_DVR_SET_PICCFG            105        //ÉèÖÃÍ¼Ïó²ÎÊý
#define NET_DVR_GET_COMPRESSCFG        106        //»ñÈ¡Ñ¹Ëõ²ÎÊý
#define NET_DVR_SET_COMPRESSCFG        107        //ÉèÖÃÑ¹Ëõ²ÎÊý
#define NET_DVR_GET_RECORDCFG        108        //»ñÈ¡Â¼ÏñÊ±¼ä²ÎÊý
#define NET_DVR_SET_RECORDCFG        109        //ÉèÖÃÂ¼ÏñÊ±¼ä²ÎÊý
#define NET_DVR_GET_DECODERCFG        110        //»ñÈ¡½âÂëÆ÷²ÎÊý
#define NET_DVR_SET_DECODERCFG        111        //ÉèÖÃ½âÂëÆ÷²ÎÊý
#define NET_DVR_GET_RS232CFG         112        //»ñÈ¡232´®¿Ú²ÎÊý
#define NET_DVR_SET_RS232CFG        113        //ÉèÖÃ232´®¿Ú²ÎÊý
#define NET_DVR_GET_ALARMINCFG         114        //»ñÈ¡±¨¾¯ÊäÈë²ÎÊý
#define NET_DVR_SET_ALARMINCFG        115        //ÉèÖÃ±¨¾¯ÊäÈë²ÎÊý
#define NET_DVR_GET_ALARMOUTCFG     116        //»ñÈ¡±¨¾¯Êä³ö²ÎÊý
#define NET_DVR_SET_ALARMOUTCFG        117        //ÉèÖÃ±¨¾¯Êä³ö²ÎÊý
#define NET_DVR_GET_TIMECFG         118        //»ñÈ¡DVRÊ±¼ä
#define NET_DVR_SET_TIMECFG            119        //ÉèÖÃDVRÊ±¼ä
#define NET_DVR_GET_PREVIEWCFG         120        //»ñÈ¡Ô¤ÀÀ²ÎÊý
#define NET_DVR_SET_PREVIEWCFG        121        //ÉèÖÃÔ¤ÀÀ²ÎÊý
#define NET_DVR_GET_VIDEOOUTCFG     122        //»ñÈ¡ÊÓÆµÊä³ö²ÎÊý
#define NET_DVR_SET_VIDEOOUTCFG        123        //ÉèÖÃÊÓÆµÊä³ö²ÎÊý
#define NET_DVR_GET_USERCFG         124        //»ñÈ¡ÓÃ»§²ÎÊý
#define NET_DVR_SET_USERCFG            125        //ÉèÖÃÓÃ»§²ÎÊý
#define NET_DVR_GET_EXCEPTIONCFG     126        //»ñÈ¡Òì³£²ÎÊý
#define NET_DVR_SET_EXCEPTIONCFG    127        //ÉèÖÃÒì³£²ÎÊý
#define NET_DVR_GET_ZONEANDDST        128        //»ñÈ¡Ê±ÇøºÍÏÄÊ±ÖÆ²ÎÊý
#define NET_DVR_SET_ZONEANDDST        129        //ÉèÖÃÊ±ÇøºÍÏÄÊ±ÖÆ²ÎÊý

//×¢£º¸ÃÃüÁîÖ»Ö§³Ö4ÌõOSDµÄÀàÐÍ£¬Í¨³£ÓÃÓÚV30ÒÔÏÂµÄÉè±¸°æ±¾¡£
#define NET_DVR_GET_SHOWSTRING        130        //»ñÈ¡µþ¼Ó×Ö·û²ÎÊý
#define NET_DVR_SET_SHOWSTRING        131        //ÉèÖÃµþ¼Ó×Ö·û²ÎÊý

#define NET_DVR_GET_EVENTCOMPCFG    132        //»ñÈ¡ÊÂ¼þ´¥·¢Â¼Ïñ²ÎÊý
#define NET_DVR_SET_EVENTCOMPCFG    133        //ÉèÖÃÊÂ¼þ´¥·¢Â¼Ïñ²ÎÊý
#define NET_DVR_GET_FTPCFG            134        //»ñÈ¡×¥Í¼µÄFTP²ÎÊý(»ùÏß)
#define NET_DVR_SET_FTPCFG            135        //ÉèÖÃ×¥Í¼µÄFTP²ÎÊý(»ùÏß)
#define NET_DVR_GET_AUXOUTCFG        140        //»ñÈ¡±¨¾¯´¥·¢¸¨ÖúÊä³öÉèÖÃ(HSÉè±¸¸¨ÖúÊä³ö2006-02-28)
#define NET_DVR_SET_AUXOUTCFG        141        //ÉèÖÃ±¨¾¯´¥·¢¸¨ÖúÊä³öÉèÖÃ(HSÉè±¸¸¨ÖúÊä³ö2006-02-28)
#define NET_DVR_GET_PREVIEWCFG_AUX     142        //»ñÈ¡-sÏµÁÐË«Êä³öÔ¤ÀÀ²ÎÊý(-sÏµÁÐË«Êä³ö2006-04-13)
#define NET_DVR_SET_PREVIEWCFG_AUX    143        //ÉèÖÃ-sÏµÁÐË«Êä³öÔ¤ÀÀ²ÎÊý(-sÏµÁÐË«Êä³ö2006-04-13)

#define NET_DVR_GET_PASSWORD_MANAGE_CFG 144        //»ñÈ¡ÃÜÂë¹ÜÀíÅäÖÃ
#define NET_DVR_SET_PASSWORD_MANAGE_CFG    145        //ÉèÖÃÃÜÂë¹ÜÀíÅäÖÃ
#define NET_DVR_UNLOCK_USER             146        //ÓÃ»§½âËø
#define NET_DVR_GET_SECURITY_CFG         147        //»ñÈ¡°²È«ÈÏÖ¤ÅäÖÃ
#define NET_DVR_SET_SECURITY_CFG         148        //ÉèÖÃ°²È«ÈÏÖ¤ÅäÖÃ
#define    NET_DVR_GET_LOCKED_INFO_LIST    149        //»ñÈ¡ËùÓÐ±»Ëø¶¨ÐÅÏ¢


/*********************************ÖÇÄÜ²¿·Ö½Ó¿Ú begin***************************************/
//ÐÐÎª¶ÔÓ¦£¨NET_VCA_RULECFG£©
#define NET_DVR_SET_RULECFG            152    //ÉèÖÃÐÐÎª·ÖÎö¹æÔò
#define NET_DVR_GET_RULECFG            153    //»ñÈ¡ÐÐÎª·ÖÎö¹æÔò
//Çò»ú±ê¶¨²ÎÊý£¨NET_DVR_TRACK_CFG £©
#define NET_DVR_SET_TRACK_CFG       160//ÉèÖÃÇò»úµÄÅäÖÃ²ÎÊý 
#define NET_DVR_GET_TRACK_CFG       161//»ñÈ¡Çò»úµÄÅäÖÃ²ÎÊý

//ÖÇÄÜ·ÖÎöÒÇÈ¡Á÷ÅäÖÃ½á¹¹
#define NET_DVR_SET_IVMS_STREAMCFG    162        //ÉèÖÃÖÇÄÜ·ÖÎöÒÇÈ¡Á÷²ÎÊý
#define NET_DVR_GET_IVMS_STREAMCFG    163        //»ñÈ¡ÖÇÄÜ·ÖÎöÒÇÈ¡Á÷²ÎÊý
//ÖÇÄÜ¿ØÖÆ²ÎÊý½á¹¹
#define NET_DVR_SET_VCA_CTRLCFG        164     //ÉèÖÃÖÇÄÜ¿ØÖÆ²ÎÊý
#define NET_DVR_GET_VCA_CTRLCFG        165     //»ñÈ¡ÖÇÄÜ¿ØÖÆ²ÎÊý
//ÆÁ±ÎÇøÓòNET_VCA_MASK_REGION_LIST
#define NET_DVR_SET_VCA_MASK_REGION    166     //ÉèÖÃÆÁ±ÎÇøÓò²ÎÊý
#define NET_DVR_GET_VCA_MASK_REGION    167     //»ñÈ¡ÆÁ±ÎÇøÓò²ÎÊý

//ATM½øÈëÇøÓò NET_VCA_ENTER_REGION
#define NET_DVR_SET_VCA_ENTER_REGION 168     //ÉèÖÃ½øÈëÇøÓò²ÎÊý
#define NET_DVR_GET_VCA_ENTER_REGION 169     //»ñÈ¡½øÈëÇøÓò²ÎÊý

//±ê¶¨ÏßÅäÖÃNET_VCA_LINE_SEGMENT_LIST
#define NET_DVR_SET_VCA_LINE_SEGMENT 170     //ÉèÖÃ±ê¶¨Ïß
#define NET_DVR_GET_VCA_LINE_SEGMENT 171     //»ñÈ¡±ê¶¨Ïß

// ivmsÆÁ±ÎÇøÓòNET_IVMS_MASK_REGION_LIST
#define NET_DVR_SET_IVMS_MASK_REGION 172     //ÉèÖÃIVMSÆÁ±ÎÇøÓò²ÎÊý
#define NET_DVR_GET_IVMS_MASK_REGION 173     //»ñÈ¡IVMSÆÁ±ÎÇøÓò²ÎÊý
// ivms½øÈë¼ì²âÇøÓòNET_IVMS_ENTER_REGION
#define NET_DVR_SET_IVMS_ENTER_REGION 174     //ÉèÖÃIVMS½øÈëÇøÓò²ÎÊý
#define NET_DVR_GET_IVMS_ENTER_REGION 175     //»ñÈ¡IVMS½øÈëÇøÓò²ÎÊý

#define NET_DVR_SET_IVMS_BEHAVIORCFG  176    //ÉèÖÃÖÇÄÜ·ÖÎöÒÇÐÐÎª¹æÔò²ÎÊý
#define NET_DVR_GET_IVMS_BEHAVIORCFG  177    //»ñÈ¡ÖÇÄÜ·ÖÎöÒÇÐÐÎª¹æÔò²ÎÊý

// IVMS »Ø·Å¼ìË÷
#define NET_DVR_IVMS_SET_SEARCHCFG        178    //ÉèÖÃIVMS»Ø·Å¼ìË÷²ÎÊý
#define NET_DVR_IVMS_GET_SEARCHCFG        179    //»ñÈ¡IVMS»Ø·Å¼ìË÷²ÎÊý

#define NET_DVR_SET_POSITION_TRACK      180     // ÉèÖÃ³¡¾°¸ú×ÙÅäÖÃÐÅÏ¢
#define NET_DVR_GET_POSITION_TRACK      181     // »ñÈ¡³¡¾°¸ú×ÙÅäÖÃÐÅÏ¢

#define NET_DVR_SET_CALIBRATION         182    // ÉèÖÃ±ê¶¨ÐÅÏ¢
#define NET_DVR_GET_CALIBRATION         183    // »ñÈ¡±ê¶¨ÐÅÏ¢

#define NET_DVR_SET_PDC_RULECFG         184    // ÉèÖÃÈËÁ÷Á¿Í³¼Æ¹æÔò
#define NET_DVR_GET_PDC_RULECFG         185    // »ñÈ¡ÈËÁ÷Á¿Í³¼Æ¹æÔò

#define NET_DVR_SET_PU_STREAMCFG        186     // ÉèÖÃÇ°¶ÎÈ¡Á÷Éè±¸ÐÅÏ¢
#define NET_DVR_GET_PU_STREAMCFG        187     // »ñÈ¡Ç°¶ÎÈ¡Á÷Éè±¸ÐÅÏ¢

#define NET_VCA_SET_IVMS_BEHAVIOR_CFG        192  // ÉèÖÃIVMSÐÐÎª¹æÔòÅäÖÃ ²»´øÊ±¼ä¶Î
#define NET_VCA_GET_IVMS_BEHAVIOR_CFG        193  // »ñÈ¡IVMSÐÐÎª¹æÔòÅäÖÃ ²»´øÊ±¼ä¶Î

#define NET_VCA_SET_SIZE_FILTER         194     // ÉèÖÃÈ«¾Ö³ß´ç¹ýÂËÆ÷
#define NET_VCA_GET_SIZE_FILTER         195     // »ñÈ¡È«¾Ö³ß´ç¹ýÂËÆ÷

#define NET_DVR_SET_TRACK_PARAMCFG      196     // ÉèÖÃÇò»ú±¾µØ²Ëµ¥¹æÔò
#define NET_DVR_GET_TRACK_PARAMCFG      197     // »ñÈ¡Çò»ú±¾µØ²Ëµ¥¹æÔò

#define NET_DVR_SET_DOME_MOVEMENT_PARAM 198     // ÉèÖÃÇò»ú»úÐ¾²ÎÊý
#define NET_DVR_GET_DOME_MOVEMENT_PARAM 199     // »ñÈ¡Çò»ú»úÐ¾²ÎÊý

#define NET_DVR_GET_PICCFG_EX        200        //»ñÈ¡Í¼Ïó²ÎÊý(SDK_V14À©Õ¹ÃüÁî)
#define NET_DVR_SET_PICCFG_EX        201        //ÉèÖÃÍ¼Ïó²ÎÊý(SDK_V14À©Õ¹ÃüÁî)
#define NET_DVR_GET_USERCFG_EX         202        //»ñÈ¡ÓÃ»§²ÎÊý(SDK_V15À©Õ¹ÃüÁî)
#define NET_DVR_SET_USERCFG_EX        203        //ÉèÖÃÓÃ»§²ÎÊý(SDK_V15À©Õ¹ÃüÁî)
#define NET_DVR_GET_COMPRESSCFG_EX    204        //»ñÈ¡Ñ¹Ëõ²ÎÊý(SDK_V15À©Õ¹ÃüÁî2006-05-15)
#define NET_DVR_SET_COMPRESSCFG_EX    205        //ÉèÖÃÑ¹Ëõ²ÎÊý(SDK_V15À©Õ¹ÃüÁî2006-05-15)


#define NET_DVR_GET_NETAPPCFG        222        //»ñÈ¡ÍøÂçÓ¦ÓÃ²ÎÊý NTP/DDNS/EMAIL
#define NET_DVR_SET_NETAPPCFG        223        //ÉèÖÃÍøÂçÓ¦ÓÃ²ÎÊý NTP/DDNS/EMAIL
#define NET_DVR_GET_NTPCFG            224        //»ñÈ¡ÍøÂçÓ¦ÓÃ²ÎÊý NTP
#define NET_DVR_SET_NTPCFG            225        //ÉèÖÃÍøÂçÓ¦ÓÃ²ÎÊý NTP
#define NET_DVR_GET_DDNSCFG            226        //»ñÈ¡ÍøÂçÓ¦ÓÃ²ÎÊý DDNS
#define NET_DVR_SET_DDNSCFG            227        //ÉèÖÃÍøÂçÓ¦ÓÃ²ÎÊý DDNS
//¶ÔÓ¦NET_DVR_EMAILPARA
#define NET_DVR_GET_EMAILCFG        228        //»ñÈ¡ÍøÂçÓ¦ÓÃ²ÎÊý EMAIL
#define NET_DVR_SET_EMAILCFG        229        //ÉèÖÃÍøÂçÓ¦ÓÃ²ÎÊý EMAIL

#define NET_DVR_GET_NFSCFG            230        /* NFS disk config */
#define NET_DVR_SET_NFSCFG            231        /* NFS disk config */

/*×¢£º¸ÃÃüÁîÎª¶¨ÖÆ£¬Ö»Ö§³Ö8ÌõOSDµÄÀàÐÍ£¬²»»á¼æÈÝV30Éè±¸°æ±¾Ö®Ç°µÄ
NET_DVR_GET_SHOWSTRING ¡¢NET_DVR_SET_SHOWSTRING ÃüÁî¡££¨²»½¨ÒéÊ¹ÓÃ£©*/
#define NET_DVR_GET_SHOWSTRING_EX    238        //»ñÈ¡µþ¼Ó×Ö·û²ÎÊýÀ©Õ¹(Ö§³Ö8Ìõ×Ö·û)
#define NET_DVR_SET_SHOWSTRING_EX    239        //ÉèÖÃµþ¼Ó×Ö·û²ÎÊýÀ©Õ¹(Ö§³Ö8Ìõ×Ö·û)
#define NET_DVR_GET_NETCFG_OTHER    244        //»ñÈ¡ÍøÂç²ÎÊý
#define NET_DVR_SET_NETCFG_OTHER    245        //ÉèÖÃÍøÂç²ÎÊý

//¶ÔÓ¦NET_DVR_EMAILCFG½á¹¹
#define NET_DVR_GET_EMAILPARACFG    250        //Get EMAIL parameters
#define NET_DVR_SET_EMAILPARACFG    251        //Setup EMAIL parameters


#define NET_DVR_GET_DDNSCFG_EX        274    //»ñÈ¡À©Õ¹DDNS²ÎÊý
#define NET_DVR_SET_DDNSCFG_EX        275    //ÉèÖÃÀ©Õ¹DDNS²ÎÊý

#define    NET_DVR_SET_PTZPOS            292        //ÔÆÌ¨ÉèÖÃPTZÎ»ÖÃ
#define    NET_DVR_GET_PTZPOS            293        //ÔÆÌ¨»ñÈ¡PTZÎ»ÖÃ
#define    NET_DVR_GET_PTZSCOPE        294        //ÔÆÌ¨»ñÈ¡PTZ·¶Î§

#define NET_DVR_GET_AP_INFO_LIST    305//»ñÈ¡ÎÞÏßÍøÂç×ÊÔ´²ÎÊý
#define NET_DVR_SET_WIFI_CFG        306    //ÉèÖÃIP¼à¿ØÉè±¸ÎÞÏß²ÎÊý
#define NET_DVR_GET_WIFI_CFG        307    //»ñÈ¡IP¼à¿ØÉè±¸ÎÞÏß²ÎÊý
#define NET_DVR_SET_WIFI_WORKMODE    308    //ÉèÖÃIP¼à¿ØÉè±¸Íø¿Ú¹¤×÷Ä£Ê½²ÎÊý
#define NET_DVR_GET_WIFI_WORKMODE    309    //»ñÈ¡IP¼à¿ØÉè±¸Íø¿Ú¹¤×÷Ä£Ê½²ÎÊý
#define    NET_DVR_GET_WIFI_STATUS        310    //»ñÈ¡Éè±¸µ±Ç°wifiÁ¬½Ó×´Ì¬
/*********************************ÖÇÄÜ½»Í¨ÊÂ¼þbegin***************************************/
#define NET_DVR_GET_REFERENCE_REGION            400      //»ñÈ¡²Î¿¼ÇøÓò
#define NET_DVR_SET_REFERENCE_REGION            401      //ÉèÖÃ²Î¿¼ÇøÓò

#define NET_DVR_GET_TRAFFIC_MASK_REGION         402     //»ñÈ¡½»Í¨ÊÂ¼þÆÁ±ÎÇøÓò
#define NET_DVR_SET_TRAFFIC_MASK_REGION         403     //ÉèÖÃ½»Í¨ÊÂ¼þÆÁ±ÎÇøÓò
#define NET_DVR_SET_AID_RULECFG                 404     //ÉèÖÃ½»Í¨ÊÂ¼þ¹æÔò²ÎÊý
#define NET_DVR_GET_AID_RULECFG                 405     //»ñÈ¡½»Í¨ÊÂ¼þ¹æÔò²ÎÊý

#define NET_DVR_SET_TPS_RULECFG                 406     //ÉèÖÃ½»Í¨Í³¼Æ¹æÔò²ÎÊý
#define NET_DVR_GET_TPS_RULECFG                 407     //»ñÈ¡½»Í¨Í³¼Æ¹æÔò²ÎÊý

#define NET_DVR_SET_LANECFG                        408        //ÉèÖÃ³µµÀ¹æÔò
#define    NET_DVR_GET_LANECFG                        409        //»ñÈ¡³µµÀ¹æÔò
#define NET_DVR_GET_VCA_RULE_COLOR_CFG          410     //»ñÈ¡ÖÇÄÜ¹æÔò¹ØÁªµÄÑÕÉ«²ÎÊý
#define NET_DVR_SET_VCA_RULE_COLOR_CFG          411     //ÉèÖÃÖÇÄÜ¹æÔò¹ØÁªµÄÑÕÉ«²ÎÊý
#define NET_DVR_GET_SWITCH_LAMP_CFG             412     //»ñÈ¡¿ª¹ØµÆ¼ì²â¹æÔòÅäÖÃ²ÎÊý
#define NET_DVR_SET_SWITCH_LAMP_CFG             413     //ÉèÖÃ¿ª¹ØµÆ¼ì²â¹æÔòÅäÖÃ²ÎÊý 


/*********************************ÖÇÄÜ½»Í¨ÊÂ¼þend***************************************/
#define NET_DVR_SET_FACEDETECT_RULECFG          420         // ÉèÖÃÈËÁ³¼ì²â¹æÔò
#define NET_DVR_GET_FACEDETECT_RULECFG          421         // »ñÈ¡ÈËÁ³¼ì²â¹æÔò

#define NET_DVR_SET_VEHICLE_RECOG_TASK          422      //³µÁ¾¶þ´ÎÊ¶±ðÈÎÎñÌá½»
#define NET_DVR_GET_VEHICLE_RECOG_TASK          423      //³µÁ¾¶þ´ÎÊ¶±ðÈÎÎñ»ñÈ¡

#define NET_DVR_SET_TIMECORRECT			        432      //Ð£Ê±ÅäÖÃ£¨Ö»×öÐ£Ê±²Ù×÷£¬²»¼ÇÂ¼Ð£Ê±ÅäÖÃ eg.NET_DVR_SET_TIMECFG »áÐÞ¸ÄÉè±¸µÄÐ£Ê±ÅäÖÃ£¨NTPÐ£Ê±£¬»á±»ÐÞ¸ÄÎªÊÖ¶¯Ð£Ê±£©£©
#define	NET_DVR_GET_CONNECT_LIST	            433         //»ñÈ¡Á¬½ÓÉè±¸ÁÐ±íÐÅÏ¢

/***************************DS9000ÐÂÔöÃüÁî(_V30) begin *****************************/
//ÍøÂç(NET_DVR_NETCFG_V30½á¹¹)
#define NET_DVR_GET_NETCFG_V30                    1000        //»ñÈ¡ÍøÂç²ÎÊý
#define NET_DVR_SET_NETCFG_V30                    1001        //ÉèÖÃÍøÂç²ÎÊý

//Í¼Ïó(NET_DVR_PICCFG_V30½á¹¹)
#define NET_DVR_GET_PICCFG_V30                    1002        //»ñÈ¡Í¼Ïó²ÎÊý
#define NET_DVR_SET_PICCFG_V30                    1003        //ÉèÖÃÍ¼Ïó²ÎÊý

//Â¼ÏñÊ±¼ä(NET_DVR_RECORD_V30½á¹¹)
#define NET_DVR_GET_RECORDCFG_V30                1004        //»ñÈ¡Â¼Ïñ²ÎÊý
#define NET_DVR_SET_RECORDCFG_V30                1005        //ÉèÖÃÂ¼Ïñ²ÎÊý

//ÓÃ»§(NET_DVR_USER_V30½á¹¹)
#define NET_DVR_GET_USERCFG_V30                 1006        //»ñÈ¡ÓÃ»§²ÎÊý
#define NET_DVR_SET_USERCFG_V30                    1007        //ÉèÖÃÓÃ»§²ÎÊý

//Â¼ÏñÊ±¼ä(NET_DVR_RECORD_V40½á¹¹)
#define NET_DVR_GET_RECORDCFG_V40                1008        //»ñÈ¡Â¼Ïñ²ÎÊý(À©Õ¹)
#define NET_DVR_SET_RECORDCFG_V40                1009        //ÉèÖÃÂ¼Ïñ²ÎÊý(À©Õ¹)

//9000DDNS²ÎÊýÅäÖÃ(NET_DVR_DDNSPARA_V30½á¹¹)
#define     NET_DVR_GET_DDNSCFG_V30                1010        //»ñÈ¡DDNS(9000À©Õ¹)
#define     NET_DVR_SET_DDNSCFG_V30                1011        //ÉèÖÃDDNS(9000À©Õ¹)

//EMAIL¹¦ÄÜ(NET_DVR_EMAILCFG_V30½á¹¹)
#define NET_DVR_GET_EMAILCFG_V30                1012     //»ñÈ¡EMAIL²ÎÊý 
#define NET_DVR_SET_EMAILCFG_V30                1013     //ÉèÖÃEMAIL²ÎÊý 

#define NET_GET_CRUISEPOINT_V40                    1018     //»ñÈ¡Ñ²º½Â·¾¶ÅäÖÃ

//Ñ²º½²ÎÊý (NET_DVR_CRUISE_PARA½á¹¹)
#define     NET_DVR_GET_CRUISE                    1020        
#define     NET_DVR_SET_CRUISE                    1021        


//±¨¾¯ÊäÈë½á¹¹²ÎÊý (NET_DVR_ALARMINCFG_V30½á¹¹)
#define     NET_DVR_GET_ALARMINCFG_V30            1024        
#define     NET_DVR_SET_ALARMINCFG_V30            1025

//±¨¾¯Êä³ö½á¹¹²ÎÊý (NET_DVR_ALARMOUTCFG_V30½á¹¹)
#define     NET_DVR_GET_ALARMOUTCFG_V30            1026        
#define     NET_DVR_SET_ALARMOUTCFG_V30            1027

//ÊÓÆµÊä³ö½á¹¹²ÎÊý (NET_DVR_VIDEOOUT_V30½á¹¹)
#define     NET_DVR_GET_VIDEOOUTCFG_V30            1028        
#define     NET_DVR_SET_VIDEOOUTCFG_V30            1029


/*¸ÃÃüÁîÖ§³Ö8ÌõOSDµÄÀàÐÍ£¨¼´Éè±¸°æ±¾ÎªV30ÒÔÉÏÊ±£©£¬²¢»áÍ¨¹ýÉè±¸°æ±¾µÄÆ¥Åä£¬
Í¬Ê±¼æÈÝÖ®Ç°µÄNET_DVR_GET_SHOWSTRING ¡¢NET_DVR_SET_SHOWSTRING ÃüÁî¡££¨½¨ÒéÊ¹ÓÃ£©*/
//µþ¼Ó×Ö·û½á¹¹²ÎÊý (NET_DVR_SHOWSTRING_V30½á¹¹)
#define     NET_DVR_GET_SHOWSTRING_V30            1030        
#define     NET_DVR_SET_SHOWSTRING_V30            1031

//Òì³£½á¹¹²ÎÊý (NET_DVR_EXCEPTION_V30½á¹¹)
#define     NET_DVR_GET_EXCEPTIONCFG_V30        1034        
#define     NET_DVR_SET_EXCEPTIONCFG_V30        1035

//´®¿Ú232½á¹¹²ÎÊý (NET_DVR_RS232CFG_V30½á¹¹)
#define     NET_DVR_GET_RS232CFG_V30            1036        
#define     NET_DVR_SET_RS232CFG_V30            1037

//ÍøÂçÓ²ÅÌ½ÓÈë½á¹¹²ÎÊý (NET_DVR_NET_DISKCFG½á¹¹)
#define        NET_DVR_GET_NET_DISKCFG                1038        //ÍøÂçÓ²ÅÌ½ÓÈë»ñÈ¡
#define        NET_DVR_SET_NET_DISKCFG                1039        //ÍøÂçÓ²ÅÌ½ÓÈëÉèÖÃ
//Ñ¹Ëõ²ÎÊý (NET_DVR_COMPRESSIONCFG_V30½á¹¹)
#define     NET_DVR_GET_COMPRESSCFG_V30            1040        
#define     NET_DVR_SET_COMPRESSCFG_V30            1041        

//»ñÈ¡485½âÂëÆ÷²ÎÊý (NET_DVR_DECODERCFG_V30½á¹¹)
#define     NET_DVR_GET_DECODERCFG_V30            1042        //»ñÈ¡½âÂëÆ÷²ÎÊý
#define     NET_DVR_SET_DECODERCFG_V30            1043        //ÉèÖÃ½âÂëÆ÷²ÎÊý

//»ñÈ¡Ô¤ÀÀ²ÎÊý (NET_DVR_PREVIEWCFG_V30½á¹¹)
#define     NET_DVR_GET_PREVIEWCFG_V30            1044        //»ñÈ¡Ô¤ÀÀ²ÎÊý
#define     NET_DVR_SET_PREVIEWCFG_V30            1045        //ÉèÖÃÔ¤ÀÀ²ÎÊý

//¸¨ÖúÔ¤ÀÀ²ÎÊý (NET_DVR_PREVIEWCFG_AUX_V30½á¹¹)
#define     NET_DVR_GET_PREVIEWCFG_AUX_V30        1046        //»ñÈ¡¸¨ÖúÔ¤ÀÀ²ÎÊý
#define     NET_DVR_SET_PREVIEWCFG_AUX_V30        1047        //ÉèÖÃ¸¨ÖúÔ¤ÀÀ²ÎÊý

//IP½ÓÈëÅäÖÃ²ÎÊý £¨NET_DVR_IPPARACFG½á¹¹£©
#define     NET_DVR_GET_IPPARACFG               1048        //»ñÈ¡IP½ÓÈëÅäÖÃÐÅÏ¢ 
#define     NET_DVR_SET_IPPARACFG               1049        //ÉèÖÃIP½ÓÈëÅäÖÃÐÅÏ¢

//IP±¨¾¯ÊäÈë½ÓÈëÅäÖÃ²ÎÊý £¨NET_DVR_IPALARMINCFG½á¹¹£©
#define     NET_DVR_GET_IPALARMINCFG            1050        //»ñÈ¡IP±¨¾¯ÊäÈë½ÓÈëÅäÖÃÐÅÏ¢ 
#define     NET_DVR_SET_IPALARMINCFG            1051        //ÉèÖÃIP±¨¾¯ÊäÈë½ÓÈëÅäÖÃÐÅÏ¢

//IP±¨¾¯Êä³ö½ÓÈëÅäÖÃ²ÎÊý £¨NET_DVR_IPALARMOUTCFG½á¹¹£©
#define     NET_DVR_GET_IPALARMOUTCFG           1052        //»ñÈ¡IP±¨¾¯Êä³ö½ÓÈëÅäÖÃÐÅÏ¢ 
#define     NET_DVR_SET_IPALARMOUTCFG           1053        //ÉèÖÃIP±¨¾¯Êä³ö½ÓÈëÅäÖÃÐÅÏ¢

//Ó²ÅÌ¹ÜÀíµÄ²ÎÊý»ñÈ¡ (NET_DVR_HDCFG½á¹¹)
#define     NET_DVR_GET_HDCFG                    1054        //»ñÈ¡Ó²ÅÌ¹ÜÀíÅäÖÃ²ÎÊý
#define     NET_DVR_SET_HDCFG                    1055        //ÉèÖÃÓ²ÅÌ¹ÜÀíÅäÖÃ²ÎÊý
//ÅÌ×é¹ÜÀíµÄ²ÎÊý»ñÈ¡ (NET_DVR_HDGROUP_CFG½á¹¹)
#define     NET_DVR_GET_HDGROUP_CFG                1056        //»ñÈ¡ÅÌ×é¹ÜÀíÅäÖÃ²ÎÊý
#define     NET_DVR_SET_HDGROUP_CFG                1057        //ÉèÖÃÅÌ×é¹ÜÀíÅäÖÃ²ÎÊý

//Éè±¸±àÂëÀàÐÍÅäÖÃ(NET_DVR_COMPRESSION_AUDIO½á¹¹)
#define     NET_DVR_GET_COMPRESSCFG_AUD         1058        //»ñÈ¡Éè±¸ÓïÒô¶Ô½²±àÂë²ÎÊý
#define     NET_DVR_SET_COMPRESSCFG_AUD         1059        //ÉèÖÃÉè±¸ÓïÒô¶Ô½²±àÂë²ÎÊý

//IP½ÓÈëÅäÖÃ²ÎÊý £¨NET_DVR_IPPARACFG_V31½á¹¹£©
#define     NET_DVR_GET_IPPARACFG_V31           1060        //»ñÈ¡IP½ÓÈëÅäÖÃÐÅÏ¢ 
#define     NET_DVR_SET_IPPARACFG_V31           1061        //ÉèÖÃIP½ÓÈëÅäÖÃÐÅÏ¢

// Í¨µÀ×ÊÔ´ÅäÖÃ (NET_DVR_IPPARACFG_V40½á¹¹)
#define NET_DVR_GET_IPPARACFG_V40               1062        // »ñÈ¡IP½ÓÈëÅäÖÃ
#define NET_DVR_SET_IPPARACFG_V40               1063        // ÉèÖÃIP½ÓÈëÅäÖÃ

#define NET_DVR_GET_CCDPARAMCFG                 1067       //IPC»ñÈ¡CCD²ÎÊýÅäÖÃ
#define NET_DVR_SET_CCDPARAMCFG                 1068       //IPCÉèÖÃCCD²ÎÊýÅäÖÃ

#define NET_DVR_GET_IOINCFG                        1070    //»ñÈ¡×¥ÅÄ»úIOÊäÈë²ÎÊý
#define NET_DVR_SET_IOINCFG                        1071     //ÉèÖÃ×¥ÅÄ»úIOÊäÈë²ÎÊý

#define NET_DVR_GET_IOOUTCFG                    1072    //»ñÈ¡×¥ÅÄ»úIOÊä³ö²ÎÊý
#define NET_DVR_SET_IOOUTCFG                    1073     //ÉèÖÃ×¥ÅÄ»úIOÊä³ö²ÎÊý

#define NET_DVR_GET_FLASHCFG                    1074    //»ñÈ¡IOÉÁ¹âµÆÊä³ö²ÎÊý
#define NET_DVR_SET_FLASHCFG                    1075     //ÉèÖÃIOÉÁ¹âµÆÊä³ö²ÎÊý

#define NET_DVR_GET_LIGHTSNAPCFG                1076    //»ñÈ¡×¥ÅÄ»úºìÂÌµÆ²ÎÊý
#define NET_DVR_SET_LIGHTSNAPCFG                1077     //ÉèÖÃ×¥ÅÄ»úºìÂÌµÆ²ÎÊý

#define NET_DVR_GET_MEASURESPEEDCFG                1078    //»ñÈ¡×¥ÅÄ»ú²âËÙ²ÎÊý
#define NET_DVR_SET_MEASURESPEEDCFG                1079     //ÉèÖÃ×¥ÅÄ»ú²âËÙ²ÎÊý

#define NET_DVR_GET_IMAGEOVERLAYCFG                1080//»ñÈ¡×¥ÅÄ»úÍ¼Ïñµþ¼ÓÐÅÏ¢²ÎÊý
#define NET_DVR_SET_IMAGEOVERLAYCFG                1081//ÉèÖÃ×¥ÅÄ»úÍ¼Ïñµþ¼ÓÐÅÏ¢²ÎÊý

#define NET_DVR_GET_SNAPCFG                        1082//»ñÈ¡µ¥IO´¥·¢×¥ÅÄ¹¦ÄÜÅäÖÃ
#define NET_DVR_SET_SNAPCFG                        1083//ÉèÖÃµ¥IO´¥·¢×¥ÅÄ¹¦ÄÜÅäÖÃ

#define NET_DVR_GET_VTPPARAM                    1084//»ñÈ¡ÐéÄâÏßÈ¦²ÎÊý
#define NET_DVR_SET_VTPPARAM                    1085//ÉèÖÃÐéÄâÏßÈ¦²ÎÊý

#define NET_DVR_GET_SNAPENABLECFG                1086//»ñÈ¡×¥ÅÄ»úÊ¹ÄÜ²ÎÊý
#define NET_DVR_SET_SNAPENABLECFG                1087//ÉèÖÃ×¥ÅÄ»úÊ¹ÄÜ²ÎÊý

#define NET_DVR_GET_POSTEPOLICECFG              1088//»ñÈ¡¿¨¿Úµç¾¯²ÎÊý
#define NET_DVR_SET_POSTEPOLICECFG              1089//ÉèÖÃ¿¨¿Úµç¾¯²ÎÊý

#define NET_DVR_GET_JPEGCFG_V30                    1090//»ñÈ¡×¥Í¼µÄJPEG²ÎÊý(»ùÏß)
#define NET_DVR_SET_JPEGCFG_V30                    1091//ÉèÖÃ×¥Í¼µÄJPEG²ÎÊý(»ùÏß)

#define NET_DVR_GET_SPRCFG                        1092//»ñÈ¡³µÅÆÊ¶±ð²ÎÊý
#define NET_DVR_SET_SPRCFG                        1093//ÉèÖÃ³µÅÆÊ¶±ð²ÎÊý
#define NET_DVR_GET_PLCCFG                      1094//»ñÈ¡³µÅÆÁÁ¶È²¹³¥²ÎÊý
#define NET_DVR_SET_PLCCFG                      1095//ÉèÖÃ³µÅÆÁÁ¶È²¹³¥²ÎÊý

#define NET_DVR_GET_DEVICESTATECFG              1096//»ñÈ¡Éè±¸µ±Ç°×´Ì¬²ÎÊý
#define NET_DVR_SET_CALIBRATE_TIME              1097//ÉèÖÃÀ©Õ¹Ê±¼äÐ£Ê±
#define NET_DVR_GET_CALIBRATE_TIME              1098//»ñÈ¡À©Õ¹Ê±¼äÐ£Ê±

#define NET_DVR_GET_DEVICECFG_V40                1100//»ñÈ¡À©Õ¹Éè±¸²ÎÊý 
#define NET_DVR_SET_DEVICECFG_V40                1101//ÉèÖÃÀ©Õ¹Éè±¸²ÎÊý

#define NET_DVR_GET_ZEROCHANCFG                   1102    //»ñÈ¡ÁãÍ¨µÀÑ¹Ëõ²ÎÊý 
#define NET_DVR_SET_ZEROCHANCFG                  1103    //ÉèÖÃÁãÍ¨µÀÑ¹Ëõ²ÎÊý

#define NET_DVR_GET_ZERO_PREVIEWCFG_V30         1104    // »ñÈ¡ÁãÍ¨µÀÔ¤ÀÀ²ÎÊýÅäÖÃ
#define NET_DVR_SET_ZERO_PREVIEWCFG_V30         1105    // ÉèÖÃÁãÍ¨µÀÔ¤ÀÀ²ÎÊýÅäÖÃ

#define NET_DVR_SET_ZERO_ZOOM                    1106     //ÉèÖÃÁãÍ¨µÀµÄËõ·ÅÅäÖÃ 
#define NET_DVR_GET_ZERO_ZOOM                    1107     //»ñÈ¡ÁãÍ¨µÀµÄËõ·ÅÅäÖÃ

#define    NET_DVR_NATASSOCIATECFG_GET                1110    //»ñÈ¡NAT¹¦ÄÜÏà¹ØÐÅÏ¢
#define    NET_DVR_NATASSOCIATECFG_SET                1111     //ÉèÖÃNAT¹¦ÄÜÏà¹ØÐÅÏ¢

#define NET_DVR_GET_SNMPCFG                       1112    //»ñÈ¡SNMP²ÎÊý 
#define NET_DVR_SET_SNMPCFG                      1113    //ÉèÖÃSNMP²ÎÊý

#define NET_DVR_GET_SNMPCFG_V30                   1114        //»ñÈ¡SNMPv30²ÎÊý 
#define NET_DVR_SET_SNMPCFG_V30                  1115        //ÉèÖÃSNMPv30²ÎÊý

#define    NET_DVR_VIDEOPLATFORMALARMCFG_GET        1130  //»ñÈ¡ÊÓÆµ×ÛºÏÆ½Ì¨±¨¾¯ÅäÖÃ
#define    NET_DVR_VIDEOPLATFORMALARMCFG_SET        1131  //ÉèÖÃÊÓÆµ×ÛºÏÆ½Ì¨±¨¾¯ÅäÖÃ

#define NET_DVR_GET_RAID_ADAPTER_INFO           1134    // »ñÈ¡ÊÊÅäÆ÷ÐÅÏ¢
#define NET_DVR_SET_RAID_ADAPTER_INFO           1135    // ÉèÖÃÊÊÅäÆ÷ÐÅÏ¢   

#define    NET_DVR_MATRIX_BIGSCREENCFG_GET            1140//»ñÈ¡´óÆÁÆ´½Ó²ÎÊý
#define    NET_DVR_MATRIX_BIGSCREENCFG_SET            1141//ÉèÖÃ´óÆÁÆ´½Ó²ÎÊý

#define NET_DVR_GET_MB_PLATFORMPARA                1145 //»ñÈ¡Æ½Ì¨µÇÂ¼²ÎÊý
#define NET_DVR_SET_MB_PLATFORMPARA                1146 //ÉèÖÃÆ½Ì¨µÇÂ¼²ÎÊý
#define NET_DVR_GET_MB_DEVSTATUS                1147 //»ñÈ¡ÒÆ¶¯Éè±¸×´Ì¬

#define  NET_DVR_GET_DECODER_JOINT_CHAN            1151//»ñÈ¡½âÂë¹ØÁªÍ¨µÀ
#define  NET_DVR_SET_DECODER_JOINT_CHAN            1152//ÉèÖÃ½âÂë¹ØÁªÍ¨µÀ

//¶àÍø¿¨ÅäÖÃ
#define NET_DVR_GET_NETCFG_MULTI                1161        //»ñÈ¡¶àÍø¿¨ÅäÖÃ
#define NET_DVR_SET_NETCFG_MULTI                1162        //ÉèÖÃ¶àÍø¿¨ÅäÖÃ

#define NET_DVR_GET_CMSPARA                        1170//»ñÈ¡Æ½Ì¨²ÎÊý
#define NET_DVR_SET_CMSPARA                        1171//ÉèÖÃÆ½Ì¨²ÎÊý
#define NET_DVR_GET_DIALSTATUS                    1172//»ñÈ¡²¦ºÅ×´Ì¬²ÎÊý
#define NET_DVR_GET_SMSRELATIVEPARA                1173//»ñÈ¡¶ÌÐÅÏà¹Ø²ÎÊý
#define NET_DVR_SET_SMSRELATIVEPARA                1174//ÉèÖÃ¶ÌÐÅÏà¹Ø²ÎÊý
#define NET_DVR_GET_PINSTATUS                    1175//»ñÈ¡Pin×´Ì¬
#define NET_DVR_SET_PINCMD                        1176//ÉèÖÃPINÃüÁî
#define NET_DVR_SET_SENSOR_CFG                    1180//ÉèÖÃÄ£ÄâÁ¿²ÎÊý
#define NET_DVR_GET_SENSOR_CFG                    1181//»ñÈ¡Ä£ÄâÁ¿²ÎÊý
#define NET_DVR_SET_ALARMIN_PARAM                1182//ÉèÖÃ±¨¾¯ÊäÈë²ÎÊý
#define NET_DVR_GET_ALARMIN_PARAM                1183//»ñÈ¡±¨¾¯ÊäÈë²ÎÊý
#define NET_DVR_SET_ALARMOUT_PARAM                1184//ÉèÖÃ±¨¾¯Êä³ö²ÎÊý
#define NET_DVR_GET_ALARMOUT_PARAM                1185//»ñÈ¡±¨¾¯Êä³ö²ÎÊý
#define NET_DVR_SET_SIREN_PARAM                    1186//ÉèÖÃ¾¯ºÅ²ÎÊý
#define NET_DVR_GET_SIREN_PARAM                    1187//»ñÈ¡¾¯ºÅ²ÎÊý
#define NET_DVR_SET_ALARM_RS485CFG                1188//ÉèÖÃ±¨¾¯Ö÷»ú485²ÎÊý
#define NET_DVR_GET_ALARM_RS485CFG                1189//»ñÈ¡±¨¾¯Ö÷»ú485²ÎÊý
#define NET_DVR_GET_ALARMHOST_MAIN_STATUS        1190//»ñÈ¡±¨¾¯Ö÷»úÖ÷Òª×´Ì¬
#define NET_DVR_GET_ALARMHOST_OTHER_STATUS        1191//»ñÈ¡±¨¾¯Ö÷»úÆäËû×´Ì¬
#define NET_DVR_SET_ALARMHOST_ENABLECFG            1192//»ñÈ¡±¨¾¯Ö÷»úÊ¹ÄÜ×´Ì¬
#define NET_DVR_GET_ALARMHOST_ENABLECFG            1193//ÉèÖÃ±¨¾¯Ö÷»úÊ¹ÄÜ×´Ì¬
#define NET_DVR_SET_ALARM_CAMCFG                1194//ÉèÖÃÊÓÆµ×ÛºÏÆ½Ì¨±¨¾¯´¥·¢CAM²Ù×÷ÅäÖÃ
#define NET_DVR_GET_ALARM_CAMCFG                1195//ÉèÖÃÊÓÆµ×ÛºÏÆ½Ì¨±¨¾¯´¥·¢CAM²Ù×÷ÅäÖÃ
#define NET_DVR_GET_GATEWAY_CFG                 1196//»ñÈ¡ÃÅ½û²ÎÊýÅäÖÃ
#define NET_DVR_SET_GATEWAY_CFG                 1197//ÉèÖÃÃÅ½û²ÎÊýÅäÖÃ

#define NET_DVR_GET_ALARMDIALMODECFG            1198//»ñÈ¡±¨¾¯Ö÷»ú²¦ºÅ²ÎÊý
#define NET_DVR_SET_ALARMDIALMODECFG            1199//ÉèÖÃ±¨¾¯Ö÷»ú²¦ºÅ²ÎÊý
#define    NET_DVR_SET_WINCFG                        1202//´°¿Ú²ÎÊýÉèÖÃ
#define NET_DVR_GET_ALARMHOSTDIALSETUPMODE        1204//»ñÈ¡±¨¾¯Ö÷»ú²¦ºÅÆôÓÃ·½Ê½
#define NET_DVR_SET_ALARMHOSTDIALSETUPMODE        1205//ÉèÖÃ±¨¾¯Ö÷»ú²¦ºÅÆôÓÃ·½Ê½

//ÊÓÆµ±¨¾¯Ö÷»úº£Íâ°æÃüÁî(ÊÓÆµ±¨¾¯Ö÷»ú V1.3)
#define NET_DVR_SET_SUBSYSTEM_ALARM                1210    //ÉèÖÃ×ÓÏµÍ³²¼/³··À
#define NET_DVR_GET_SUBSYSTEM_ALARM                1211    //»ñÈ¡×ÓÏµÍ³²¼/³··À
#define NET_DVR_GET_WHITELIST_ALARM                1215    //»ñÈ¡°×Ãûµ¥²ÎÊý
#define NET_DVR_SET_WHITELIST_ALARM                1216    //ÉèÖÃ°×Ãûµ¥²ÎÊý
#define    NET_DVR_GET_ALARMHOST_MODULE_LIST        1222    //»ñÈ¡ËùÓÐÄ£¿é
#define NET_DVR_SET_PRIOR_ALARM                    1223    //ÉèÖÃ×ÓÏµÍ³²¼/³··À
#define NET_DVR_GET_PRIOR_ALARM                    1224    //»ñÈ¡×ÓÏµÍ³²¼/³··À    
#define NET_DVR_SET_TAMPER_ALARMIN_PARAM        1225    // ÉèÖÃ·ÀÇø·À²ð²ÎÊý
#define NET_DVR_GET_TAMPER_ALARMIN_PARAM        1226    // »ñÈ¡·ÀÇø·À²ð²ÎÊý

#define NET_DVR_GET_HOLIDAY_PARAM_CFG           1240// »ñÈ¡½Ú¼ÙÈÕ²ÎÊý
#define NET_DVR_SET_HOLIDAY_PARAM_CFG           1241// ÉèÖÃ½Ú¼ÙÈÕ²ÎÊý

#define NET_DVR_GET_MOTION_HOLIDAY_HANDLE       1242// »ñÈ¡ÒÆ¶¯Õì²â¼ÙÈÕ±¨¾¯´¦Àí·½Ê½
#define NET_DVR_SET_MOTION_HOLIDAY_HANDLE       1243// »ñÈ¡ÒÆ¶¯Õì²â¼ÙÈÕ±¨¾¯´¦Àí·½Ê½

#define NET_DVR_GET_VILOST_HOLIDAY_HANDLE       1244// »ñÈ¡ÊÓÆµÐÅºÅ¶ªÊ§¼ÙÈÕ±¨¾¯´¦Àí·½Ê½
#define NET_DVR_SET_VILOST_HOLIDAY_HANDLE       1245// »ñÈ¡ÊÓÆµÐÅºÅ¶ªÊ§¼ÙÈÕ±¨¾¯´¦Àí·½Ê½

#define NET_DVR_GET_HIDE_HOLIDAY_HANDLE         1246// »ñÈ¡ÕÚ¸Ç¼ÙÈÕ±¨¾¯´¦Àí·½Ê½
#define NET_DVR_SET_HIDE_HOLIDAY_HANDLE         1247// ÉèÖÃÕÚ¸Ç¼ÙÈÕ±¨¾¯´¦Àí·½Ê½

#define NET_DVR_GET_ALARMIN_HOLIDAY_HANDLE      1248// »ñÈ¡±¨¾¯ÊäÈë¼ÙÈÕ±¨¾¯´¦Àí·½Ê½
#define NET_DVR_SET_ALARMIN_HOLIDAY_HANDLE      1249// ÉèÖÃ±¨¾¯ÊäÈë¼ÙÈÕ±¨¾¯´¦Àí·½Ê½
#define NET_DVR_GET_ALARMOUT_HOLIDAY_HANDLE     1250// »ñÈ¡±¨¾¯Êä³ö¼ÙÈÕ±¨¾¯´¦Àí·½Ê½
#define NET_DVR_SET_ALARMOUT_HOLIDAY_HANDLE     1251// ÉèÖÃ±¨¾¯Êä³ö¼ÙÈÕ±¨¾¯´¦Àí·½Ê½
#define NET_DVR_GET_HOLIDAY_RECORD              1252// »ñÈ¡¼ÙÈÕÂ¼Ïñ²ÎÊý
#define NET_DVR_SET_HOLIDAY_RECORD              1253// ÉèÖÃ¼ÙÈÕÂ¼Ïñ²ÎÊý
#define NET_DVR_GET_NETWORK_BONDING             1254// »ñÈ¡BONDINGÍøÂç²ÎÊý
#define NET_DVR_SET_NETWORK_BONDING             1255// ÉèÖÃBONDINGÍøÂç²ÎÊý
#define NET_DVR_GET_LINK_STATUS                 1256// »ñÈ¡Í¨µÀIP¹¤×÷×´Ì¬
#define NET_DVR_GET_DISK_QUOTA_CFG              1278// »ñÈ¡´ÅÅÌÅä¶îÐÅÏ¢
#define NET_DVR_SET_DISK_QUOTA_CFG              1279// ÉèÖÃ´ÅÅÌÅä¶îÐÅÏ¢
#define NET_DVR_GET_JPEG_CAPTURE_CFG            1280// »ñÈ¡DVR×¥Í¼ÅäÖÃ
#define NET_DVR_SET_JPEG_CAPTURE_CFG            1281// ÉèÖÃDVR×¥Í¼ÅäÖÃ
#define NET_DVR_GET_SCHED_CAPTURECFG            1282// »ñÈ¡×¥Í¼¼Æ»®
#define NET_DVR_SET_SCHED_CAPTURECFG            1283// ÉèÖÃ×¥Í¼¼Æ»®
#define NET_DVR_GET_VGA_PREVIEWCFG              1284// »ñÈ¡VGAÔ¤ÀÀÅäÖÃ
#define NET_DVR_SET_VGA_PREVIEWCFG              1285// ÉèÖÃVGAÔ¤ÀÀÅäÖÃ 
#define NET_DVR_GET_VIDEO_INPUT_EFFECT          1286// »ñÈ¡Í¨µÀÊÓÆµÊäÈëÍ¼Ïñ²ÎÊý
#define NET_DVR_SET_VIDEO_INPUT_EFFECT          1287// ÉèÖÃÍ¨µÀÊÓÆµÊäÈëÍ¼Ïñ²ÎÊý

#define NET_DVR_GET_STORAGE_SERVER_SWITCH        1290//»ñÈ¡´æ´¢·þÎñÆ÷¿ª¹Ø×´Ì¬
#define NET_DVR_SET_STORAGE_SERVER_SWITCH        1291//ÉèÖÃ´æ´¢·þÎñÆ÷¿ª¹Ø×´Ì¬


#define NET_DVR_GET_OPTICAL_CHANNEL                1300//»ñÈ¡¹â¶Ë×ÓÏµÍ³Í¨µÀ¹ØÁªÐÅÏ¢
#define NET_DVR_SET_OPTICAL_CHANNEL                1301//ÉèÖÃ¹â¶Ë×ÓÏµÍ³Í¨µÀ¹ØÁªÐÅÏ¢
#define NET_DVR_GET_FIBER_CASCADE                1302//»ñÈ¡¹âÏË¼¶ÁªÄ£Ê½
#define NET_DVR_SET_FIBER_CASCADE                1303//ÉèÖÃ¹âÏË¼¶ÁªÄ£Ê½
#define NET_DVR_GET_SPARTAN_STATUS                1304//»ñÈ¡³©ÏÔ×´Ì¬
#define NET_DVR_SET_SPARTAN_STATUS                1305//ÉèÖÃ³©ÏÔ×´Ì¬
#define NET_DVR_GET_ETHERNET_CHANNEL            1306//»ñÈ¡¶Ë¿Ú¾ÛºÏ²ÎÊý
#define NET_DVR_SET_ETHERMET_CHANNEL            1307//ÉèÖÃ¶Ë¿Ú¾ÛºÏ²ÎÊý
#define NET_DVR_OPTICAL_REBOOT                    1320//¹â¶Ë»úÖØÆô
#define NET_DVR_SET_AUDIOCHAN_CFG                1321//ÉèÖÃÒôÆµÇÐ»»²ÎÊý
#define NET_DVR_GET_AUDIOCHAN_CFG                1322//»ñÈ¡ÒôÆµÇÐ»»²ÎÊý
//SDI¾ØÕó1.0
#define NET_DVR_SET_MATRIX_BASE_CFG             1332 //ÉèÖÃ¾ØÕó»ù±¾²ÎÊý
#define NET_DVR_GET_MATRIX_BASE_CFG             1333 //»ñÈ¡¾ØÕó»ù±¾²ÎÊý
#define NET_DVR_SWITCH_MATRIX_IO                1334 //¾ØÕóÊäÈëÊä³öÇÐ»» 
#define NET_DVR_GET_MATRIX_IO_RELATION          1335 //»ñÈ¡¾ØÕóÊäÈëÊäÈë¹ØÁª¹ØÏµ

#define    NET_DVR_V6PSUBSYSTEMARAM_GET            1501//»ñÈ¡V6×ÓÏµÍ³ÅäÖÃ
#define    NET_DVR_V6PSUBSYSTEMARAM_SET            1502//ÉèÖÃV6×ÓÏµÍ³ÅäÖÃ
#define    NET_DVR_GET_ALLWINCFG                    1503 //´°¿Ú²ÎÊý»ñÈ¡

#define    NET_DVR_BIGSCREENASSOCIATECFG_GET        1511 //»ñÈ¡´óÆÁ¹ØÁªÅäÖÃ
#define    NET_DVR_BIGSCREENASSOCIATECFG_SET        1512 //ÉèÖÃ´óÆÁ¹ØÁªÅäÖÃ

//1200Æð
#define    NET_DVR_GETSCREENINFO                    1601 //»ñÈ¡´óÆÁÐÅÏ¢ÅäÖÃ
#define    NET_DVR_SETSCREENINFO                    1602 //ÉèÖÃ´óÆÁÐÅÏ¢ÅäÖÃ
#define    NET_DVR_GET_SCREEN_WINCFG                1603//µ¥¸ö´°¿Ú²ÎÊý»ñÈ¡
#define    NET_DVR_LAYOUTLIST_GET                     1605//»ñÈ¡²¼¾ÖÁÐ±í
#define    NET_DVR_SET_LAYOUTCFG                    1606 //²¼¾ÖÉèÖÃ
#define    NET_DVR_LAYOUTCTRL                        1607//²¼¾Ö¿ØÖÆ£¬1-open£¬2-close
#define    NET_DVR_INPUTLIST_GET                    1608 //»ñÈ¡ÊäÈëÐÅºÅÔ´ÁÐ±í
#define    NET_DVR_SET_INPUTSTREAMCFG                1609 //ÊäÈëÐÅºÅÔ´ÉèÖÃ 
#define    NET_DVR_OUTPUT_SET                        1610 //Êä³ö²ÎÊýÉèÖÃ
#define    NET_DVR_OUTPUT_GET                        1611 //Êä³ö²ÎÊý»ñÈ¡
#define    NET_DVR_SET_OSDCFG                        1612 //OSD²ÎÊýÉèÖÃ
#define    NET_DVR_GET_OSDCFG                        1613 //OSD²ÎÊý»ñÈ¡
#define    NET_DVR_BIGSCREEN_GETSERIAL             1614//»ñÈ¡´óÆÁ´®¿ÚÐÅÏ¢
#define    NET_DVR_GET_PLANLIST                    1615//»ñÈ¡Ô¤°¸ÁÐ±í
#define    NET_DVR_SET_PLAN                        1616//ÉèÖÃÔ¤°¸
#define    NET_DVR_CTRL_PLAN                        1617//¿ØÖÆÔ¤°¸
#define    NET_DVR_GET_DEVICE_RUN_STATUS           1618//»ñÈ¡Éè±¸ÔËÐÐ×´Ì¬
#define NET_DVR_GET_EXTERNAL_MATRIX_CFG            1619//»ñÈ¡¾ØÕóÐÅÏ¢
#define    NET_DVR_SET_EXTERNAL_MATRIX_CFG            1620//ÉèÖÃ¾ØÕóÐÅÏ¢
#define    NET_DVR_GET_OUTPUT_SCREEN_RELATION        1621//»ñÈ¡Êä³öºÍÆÁÄ»µÄ°ó¶¨¹ØÏµ
#define    NET_DVR_SET_OUTPUT_SCREEN_RELATION        1622//ÉèÖÃÊä³öºÍÆÁÄ»µÄ°ó¶¨¹ØÏµ
#define NET_DVR_GET_VCS_USER_CFG                1623//»ñÈ¡ÓÃ»§ÐÅÏ¢ÅäÖÃ
#define    NET_DVR_SET_VCS_USER_CFG                1624//ÉèÖÃÓÃ»§ÐÅÏ¢ÅäÖÃ
#define    NET_DVR_CONTROL_SCREEN                    1625//ÆÁÄ»¿ØÖÆ

#define NET_DVR_GET_DEV_BASEINFO                1650//»ñÈ¡µ¥¸öÉè±¸ÐÅÏ¢
#define NET_DVR_SET_DEV_BASEINFO                1651//ÉèÖÃµ¥¸öÉè±¸ÐÅÏ¢
#define NET_DVR_GET_DEV_NETINFO                    1652//»ñÈ¡Éè±¸µÄÍøÂçÐÅÏ¢
#define NET_DVR_SET_DEV_NETINFO                    1653//ÉèÖÃÉè±¸µÄÍøÂçÐÅÏ¢
#define NET_DVR_GET_SIGNAL_SOURCE_INFO            1654//»ñÈ¡ÐÅºÅÔ´ÐÅÏ¢
#define NET_DVR_SET_SIGNAL_SOURCE_INFO            1655//ÉèÖÃÐÅºÅÔ´ÐÅÏ¢
#define NET_DVR_ADJUST_PIC_V40                    1656//Í¼ÏñÎ¢µ÷
#define NET_DVR_RESTORE_V40                        1657//»Ö¸´Ä¬ÈÏ²ÎÊý
#define    NET_DVR_SET_NET_SIGNAL                    1658//ÉèÖÃÍøÂçÐÅºÅÔ´
#define NET_DVR_REBOOT_V40                        1659//ÖØÆô
#define NET_DVR_CONTROL_PICTURE_V41                1660//Í¼Æ¬¿ØÖÆV41

#define NET_DVR_GET_AUTO_REBOOT_CFG             1710//»ñÈ¡×Ô¶¯ÖØÆô²ÎÊý
#define NET_DVR_SET_AUTO_REBOOT_CFG             1711//ÉèÖÃ×Ô¶¯ÖØÆô²ÎÊý
#define NET_DVR_GET_TRUNK_USE_STATE             1713//»ñÈ¡Ö¸¶¨¸ÉÏßÊ¹ÓÃ×´Ì¬
#define NET_DVR_SET_PTZ_CTRL_INFO                 1714//ÉèÖÃPTZ¿ØÖÆ²ÎÊý
#define NET_DVR_GET_PTZ_CTRL_INFO                 1715//»ñÈ¡PTZ¿ØÖÆ²ÎÊý
#define NET_DVR_GET_PTZ_STATUS                     1716//»ñÈ¡PTZ×´Ì¬
#define    NET_DVR_GET_DISP_ROUTE_LIST                1717//»ñÈ¡ÏÔÊ¾Â·¾¶ÁÐ±í

#define NET_DVR_GET_DEC_RESOURCE_LIST            1720//»ñÈ¡¿ÉÓÃ½âÂë×ÊÔ´ÁÐ±í
#define NET_DVR_SET_DEC_RESOURCE_LIST            1721//Ô¤·ÖÅä½âÂë×ÊÔ´ 
#define NET_DVR_GET_DEC_YUV                        1722//»ñÈ¡½âÂëÍ¨µÀ¹ØÁªYUVÊä³ö²ÎÊý
#define NET_DVR_SET_DEC_YUV                        1723//ÉèÖÃ½âÂëÍ¨µÀ¹ØÁªYUVÊä³ö²ÎÊý
#define NET_DVR_GET_DEC_RESOUCE                    1724//ÏòÊÓÆµ×ÛºÏÆ½Ì¨ÉêÇë½âÂë×ÊÔ´
#define NET_DVR_FREE_DEC_RESOURCE                1725//ÊÍ·Å½âÂë×ÊÔ´

#define NET_DVR_SET_VIDEOWALLDISPLAYMODE        1730//ÉèÖÃµçÊÓÇ½Æ´½ÓÄ£Ê½
#define NET_DVR_GET_VIDEOWALLDISPLAYMODE        1731//»ñÈ¡µçÊÓÇ½Æ´½ÓÄ£Ê½
#define NET_DVR_GET_VIDEOWALLDISPLAYNO          1732//»ñÈ¡Éè±¸ÏÔÊ¾Êä³öºÅ
#define    NET_DVR_SET_VIDEOWALLDISPLAYPOSITION    1733//ÉèÖÃÏÔÊ¾Êä³öÎ»ÖÃ²ÎÊý
#define    NET_DVR_GET_VIDEOWALLDISPLAYPOSITION    1734//»ñÈ¡ÏÔÊ¾Êä³öÎ»ÖÃ²ÎÊý
#define NET_DVR_GET_VIDEOWALLWINDOWPOSITION     1735//»ñÈ¡µçÊÓÇ½´°¿Ú²ÎÊý
#define NET_DVR_SET_VIDEOWALLWINDOWPOSITION     1736//ÉèÖÃµçÊÓÇ½´°¿Ú²ÎÊý
#define    NET_DVR_VIDEOWALLWINDOW_CLOSEALL        1737//µçÊÓÇ½¹Ø±ÕËùÓÐ´°¿Ú
#define    NET_DVR_SET_VIRTUALLED                    1738//ÐéÄâLEDÉèÖÃ
#define    NET_DVR_GET_VIRTUALLED                    1739//ÐéÄâLED»ñÈ¡
#define NET_DVR_GET_IMAGE_CUT_MODE              1740//»ñÈ¡Í¼ÏñÇÐ¸îÄ£Ê½
#define NET_DVR_SET_IMAGE_CUT_MODE              1741//ÉèÖÃÍ¼ÏñÇÐ¸îÄ£Ê½
#define NET_DVR_GET_USING_SERIALPORT            1742//»ñÈ¡µ±Ç°Ê¹ÓÃ´®¿Ú
#define NET_DVR_SET_USING_SERIALPORT            1743//ÉèÖÃµ±Ç°Ê¹ÓÃ´®¿Ú
#define NET_DVR_SCENE_CONTROL                   1744//³¡¾°¿ØÖÆ
#define NET_DVR_GET_CURRENT_SCENE               1745//»ñÈ¡µ±Ç°³¡¾°ºÅ
#define NET_DVR_GET_VW_SCENE_PARAM              1746//»ñÈ¡µçÊÓÇ½³¡¾°Ä£Ê½²ÎÊý
#define NET_DVR_SET_VW_SCENE_PARAM              1747//ÉèÖÃµçÊÓÇ½³¡¾°Ä£Ê½²ÎÊý
#define NET_DVR_DISPLAY_CHANNO_CONTROL          1748//µçÊÓÇ½ÏÔÊ¾±àºÅ¿ØÖÆ
#define NET_DVR_GET_WIN_DEC_INFO                1749//»ñÈ¡´°¿Ú½âÂëÐÅÏ¢£¨ÅúÁ¿£©
#define NET_DVR_RESET_VIDEOWALLDISPLAYPOSITION  1750  //½â³ýµçÊÓÇ½Êä³ö½Ó¿Ú°ó¶¨ 
#define NET_DVR_SET_VW_AUDIO_CFG                1752    //ÉèÖÃÒôÆµÇÐ»»²ÎÊý
#define    NET_DVR_GET_VW_AUDIO_CFG                1753    //»ñÈ¡ÒôÆµÇÐ»»²ÎÊý
#define NET_DVR_GET_GBT28181_DECCHANINFO_CFG    1754    //»ñÈ¡GBT28181Ð­Òé½ÓÈëÉè±¸µÄ½âÂëÍ¨µÀÐÅÏ¢
#define NET_DVR_SET_GBT28181_DECCHANINFO_CFG    1755    //ÉèÖÃGBT28181Ð­Òé½ÓÈëÉè±¸µÄ½âÂëÍ¨µÀÐÅÏ¢
#define    NET_DVR_SET_MAINBOARD_SERIAL            1756  //ÉèÖÃÖ÷¿Ø°å´®¿Ú²ÎÊý
#define    NET_DVR_GET_MAINBOARD_SERIAL            1757  //»ñÈ¡Ö÷¿Ø°å´®¿Ú²ÎÊý
#define NET_DVR_GET_SUBBOARD_INFO               1758  //»ñÈ¡×Ó°åÐÅÏ¢
#define NET_DVR_GET_SUBBOARD_EXCEPTION          1759  //»ñÈ¡Òì³£×Ó°åÒì³£ÐÅÏ¢

#define NET_DVR_GET_CAMERACHAN_SERIALCFG    1760   //»ñÈ¡CameraÍ¨µÀ°ó¶¨´®¿ÚÅäÖÃ
#define NET_DVR_SET_CAMERACHAN_SERIALCFG    1761   //ÉèÖÃCameraÍ¨µÀ°ó¶¨´®¿ÚÅäÖÃ
#define NET_DVR_GET_MATRIX_STATUS            1762   //»ñÈ¡ÊÓÆµ×ÛºÏÆ½Ì¨×´Ì¬
#define    NET_SET_MULTIFUNCTION_SERIALCFG     1763  //ÉèÖÃ¶à¹¦ÄÜ´®¿ÚÅäÖÃ
#define    NET_GET_MULTIFUNCTION_SERIALCFG        1764  //»ñÈ¡¶à¹¦ÄÜ´®¿ÚÅäÖÃ
#define NET_DVR_PTZ_3D_SPEED                1765  // 3Î¬´øËÙ¶ÈµÄÔÆÌ¨¿ØÖÆ

#define  NET_DVR_GET_SIGNAL_JOINT            1766   //»ñÈ¡ÐÅºÅÔ´°ó¶¨ÅäÖÃ
#define  NET_DVR_SET_SIGNAL_JOINT            1767   //ÉèÖÃÐÅºÅÔ´°ó¶¨ÅäÖÃ
#define  NET_DVR_SIGNAL_CUT                    1768   //ÐÅºÅÔ´²Ã¼ô
#define  NET_DVR_DYNAMIC_DECODE_BATCH        1769     //ÅúÁ¿¶¯Ì¬½âÂë
#define  NET_DVR_DECSWITCH_SET_BATCH        1770    //ÅúÁ¿ÉèÖÃ½âÂëÍ¨µÀ¿ª¹Ø
#define  NET_DVR_DECSWITCH_GET_BATCH        1771    //ÅúÁ¿»ñÈ¡½âÂëÍ¨µÀ¿ª¹Ø
#define  NET_DVR_GET_ALL_SIGNAL_JOINT        1772   //»ñÈ¡ËùÓÐÐÅºÅÔ´°ó¶¨ÅäÖÃ
#define     NET_DVR_GET_PLAYING_PLAN            1773    //»ñÈ¡ÕýÔÚÖ´ÐÐÔ¤°¸
#define  NET_DVR_WALL_RELATION_GET            1774   //»ñÈ¡Éè±¸Ç½ÓëÎïÀíÇ½µÄ¹ØÁª
#define  NET_DVR_WALL_RELATION_SET            1775   //ÉèÖÃÉè±¸Ç½ÓëÎïÀíÇ½µÄ¹ØÁª
#define     NET_DVR_SET_INPUTSTREAMCFG_V40        1776   //ÊäÈëÐÅºÅÔ´ÉèÖÃ
#define  NET_DVR_PTZCFG_INPUTSTREAM_GET        1777  //»ñÈ¡ÊäÈëÔ´·´ÏòÔÆÌ¨¿ØÖÆÅäÖÃ
#define  NET_DVR_PTZCFG_INPUTSTREAM_SET        1778  //ÉèÖÃÊäÈëÔ´·´ÏòÔÆÌ¨¿ØÖÆÅäÖÃ
#define  NET_DVR_SIGNAL_CUTPARAM_GET        1779  //»ñÈ¡ÐÅºÅÔ´²Ã¼ô²ÎÊý

#define NET_DVR_GET_SUBSYSTEM_NETCFG            1780    //»ñÈ¡×ÓÏµÍ³Íø¿¨²ÎÊý
#define NET_DVR_SET_SUBSYSTEM_NETCFG              1781    //ÉèÖÃ×ÓÏµÍ³Íø¿¨²ÎÊý
#define    NET_DVR_DEL_SIGNAL_JOINT                1782    //É¾³ýÆ´½ÓÐÅºÅÔ´

#define NET_DVR_GET_PICTURE_INFO                1783     //»ñÈ¡Í¼Æ¬ÐÅÏ¢
#define NET_DVR_SET_PICTURE_INFO                1784     //ÉèÖÃÍ¼Æ¬ÐÅÏ¢
#define NET_DVR_GET_VIDEO_INFO                    1785     //»ñÈ¡ÊÓÆµÐÅÏ¢
#define NET_DVR_SET_VIDEO_INFO                    1786     //ÉèÖÃÊÓÆµÐÅÏ¢
#define NET_DVR_SET_PLAYLIST                    1787     //ÉèÖÃ²¥·ÅÁÐ±í
#define NET_DVR_GET_PLAYLIST                    1788     //»ñÈ¡²¥·ÅÁÐ±í
#define NET_DVR_GET_ALL_PLAYLIST                1789     //»ñÈ¡ËùÓÐ²¥·ÅÁÐ±í
#define NET_DVR_PLAYITEM_CONTROL                1790     //²¥·ÅÏî²Ù×÷
#define NET_DVR_SET_PLAYPLAN_TEMPLATE            1791     //ÉèÖÃ²¥·Å¼Æ»®Ä£°å
#define NET_DVR_GET_PLAYPLAN_TEMPLATE            1792     //»ñÈ¡²¥·Å¼Æ»®
#define NET_DVR_GET_ALL_PLAYPLAN_TEMPLATE        1793     //»ñÈ¡ËùÓÐ²¥·Å¼Æ»®
#define NET_DVR_SET_WINDOW_PLAYPLAN                1794     //ÉèÖÃ´°¿Ú²¥·Å¼Æ»®
#define NET_DVR_GET_WINDOW_PLAYPLAN                1795     //»ñÈ¡´°¿Ú²¥·Å¼Æ»®
#define NET_DVR_TOPLAY_ITEM                        1796     //Ö¸¶¨²¥·Å
#define NET_DVR_DEVICE_PLAY_CONTROL                1797     //Éè±¸²¥·Å¿ØÖÆ
#define NET_DVR_GET_PLAY_INFO                    1798     //»ñÈ¡µ±Ç°²¥·ÅÐÅÏ¢
#define NET_DVR_GET_ALL_PICTURE_INFO            1799     //»ñÈ¡Í¼Æ¬ÐÅÏ¢
#define NET_DVR_GET_ALL_VIDEO_INFO                1800     //»ñÈ¡ÊÓÆµÐÅÏ¢
#define NET_DVR_DELETE_VIDEO_FILE                1801     //É¾³ýÊÓÆµ


#define NET_DVR_GET_ALARMHOSTSUBSYSTEM_CFG        2001//±¨¾¯Ö÷»ú»ñÈ¡×ÓÏµÍ³²ÎÊý
#define NET_DVR_SET_ALARMHOSTSUBSYSTEM_CFG        2002//±¨¾¯Ö÷»úÉèÖÃ×ÓÏµÍ³²ÎÊý
#define NET_DVR_GETEXTENDALARMININFO            2003//»ñÈ¡·ÀÇø±àºÅÐÅÏ¢
#define NET_DVR_MODIFYALARMINNO                 2004//ÐÞ¸Ä·ÀÇø±àºÅÐÅÏ¢
#define NET_DVR_GET_ALARMHOST_WIRELESS_NETWORK_CFG    2005//»ñÈ¡ÎÞÏßÍøÂç²ÎÊýÅäÖÃ
#define    NET_DVR_SET_ALARMHOST_WIRELESS_NETWORK_CFG    2006//ÉèÖÃÎÞÏßÍøÂç²ÎÊýÅäÖÃ
#define    NET_DVR_GET_ALARMHOST_NETCFG            2007//»ñÈ¡ÍøÂç²ÎÊýÅäÖÃ
#define    NET_DVR_SET_ALARMHOST_NETCFG            2008//ÉèÖÃÍøÂç²ÎÊýÅäÖÃ
#define NET_DVR_GET_LED_SCREEN_CFG                2009// »ñÈ¡LEDÆÁÄ»²ÎÊý
#define NET_DVR_SET_LED_SCREEN_CFG                2010// ÉèÖÃLEDÆÁÄ»²ÎÊý
#define NET_DVR_GET_LED_CONTENT_CFG                2011// »ñÈ¡LEDÆÁÏÔÄÚÈÝ
#define    NET_DVR_SET_LED_CONTENT_CFG                2012// ÉèÖÃLEDÆÁÏÔÄÚÈÝ
#define NET_DVR_TURNON_LED                        2013// ´ò¿ªLEDÆÁ
#define NET_DVR_TURNOFF_LED                        2014// ¹Ø±ÕLEDÆÁ
#define NET_DVR_GET_LED_TIMER_SWITCH            2015// »ñÈ¡LEDÆÁ¶¨Ê±¿ª¹Ø²ÎÊý
#define NET_DVR_SET_LED_TIMER_SWITCH            2016// ÉèÖÃLEDÆÁ¶¨Ê±¿ª¹Ø²ÎÊý
#define NET_DVR_SET_LED_BRIGHTNESS                2017// ÊÖ¶¯ÉèÖÃLEDÆÁÁÁ¶È
#define NET_DVR_GET_LED_TIMER_BRIGHTNESS            2018//ÉèÖÃ·ÖÊ±LEDÆÁÁÁ¶È
#define NET_DVR_SET_LED_TIMER_BRIGHTNESS            2019//»ñÈ¡·ÖÊ±LEDÆÁÁÁ¶È
#define NET_DVR_LED_CHECKTIME                        2020//LEDÐ£Ê±
#define NET_DVR_GET_ALARMHOST_AUDIO_ASSOCIATE_ALARM    2021//»ñÈ¡ÒôÆµ¸úËæ±¨¾¯ÊÂ¼þ
#define NET_DVR_SET_ALARMHOST_AUDIO_ASSOCIATE_ALARM    2022//ÉèÖÃÒôÆµ¸úËæ±¨¾¯ÊÂ¼þ
#define    NET_DVR_GET_LED_STATUS                        2023//»ñÈ¡LEDÆÁ×´Ì¬
#define NET_DVR_CLOSE_SUBSYSTEM_FAULT_ALARM         2027//¹Ø±Õ×ÓÏµÍ³¹ÊÕÏÌáÊ¾Òô
#define NET_DVR_SET_SUBSYSTEM_BYPASS                2028//×ÓÏµÍ³ÅÔÂ·
#define NET_DVR_CANCEL_SUBSYSTEM_BYPASS                2029//×ÓÏµÍ³ÅÔÂ·»Ö¸´

#define NET_DVR_GET_ALARMHOST_SUBSYSTEM_CFG_EX        2030//»ñÈ¡×ÓÏµÍ³À©Õ¹²ÎÊý
#define    NET_DVR_SET_ALARMHOST_SUBSYSTEM_CFG_EX        2031//ÉèÖÃ×ÓÏµÍ³À©Õ¹²ÎÊý
#define NET_DVR_GET_ALARMHOST_PRINTER_CFG            2032//»ñÈ¡´òÓ¡»ú´òÓ¡Ê¹ÄÜ
#define    NET_DVR_SET_ALARMHOST_PRINTER_CFG            2033//ÉèÖÃ´òÓ¡»ú´òÓ¡Ê¹ÄÜ
#define    NET_DVR_GET_ALARMHOST_ZONE_LIST_IN_SUBSYSTEM 2034//»ñÈ¡Ö¸¶¨×ÓÏµÍ³ÄÚµÄËùÓÐ·ÀÇø
#define    NET_DVR_GET_ALARMHOST_TRIGGER_LIST            2035//»ñÈ¡ËùÓÐ´¥·¢Æ÷
#define    NET_DVR_ARM_ALARMHOST_SUBSYSTEM                2036//°´²¼·ÀÀàÐÍ¶Ô×ÓÏµÍ³²¼·À
#define    NET_DVR_GET_ALARMHOST_EVENT_TRIG_ALARMOUT_CFG 2037// »ñÈ¡ÊÂ¼þ´¥·¢±¨¾¯Êä³öÅäÖÃ
#define NET_DVR_SET_ALARMHOST_EVENT_TRIG_ALARMOUT_CFG 2038// ÉèÖÃÊÂ¼þ´¥·¢±¨¾¯Êä³öÅäÖÃ
#define    NET_DVR_GET_ALARMHOST_FAULT_CFG                2039// »ñÈ¡¹ÊÕÏ´¦ÀíÅäÖÃ
#define NET_DVR_SET_ALARMHOST_FAULT_CFG                2040// ÉèÖÃ¹ÊÕÏ´¦ÀíÅäÖÃ
#define NET_DVR_SEARCH_ARMHOST_EXTERNAL_MODULE         2041//×Ô¶¯ËÑË÷
#define    NET_DVR_REGISTER_ALARMHOST_EXTERNAL_MODULE    2042//×Ô¶¯×¢²á
#define NET_DVR_CLOSE_ALARMHOST_OVERALL_FAULT_ALARM 2043//¹Ø±ÕÈ«¾Ö¹ÊÕÏÌáÊ¾Òô

#define NET_DVR_GET_SAFETYCABIN_WORK_MODE            2044 //»ñÈ¡·À»¤²Õ¹¤×÷Ä£Ê½²ÎÊý
#define NET_DVR_SET_SAFETYCABIN_WORK_MODE            2045 //ÉèÖÃ·À»¤²Õ¹¤×÷Ä£Ê½²ÎÊý
#define NET_DVR_GET_SAFETYCABIN_PERSON_SIGNAL_CFG   2046 //»ñÈ¡·À»¤²ÕÈËÐÅºÅÌ½²â²ÎÊý
#define NET_DVR_SET_SAFETYCABIN_PERSON_SIGNAL_CFG   2047 //ÉèÖÃ·À»¤²ÕÈËÐÅºÅÌ½²â²ÎÊý

#define  NET_DVR_GET_ALARMHOST_MODULE_CFG            2048//»ñÈ¡Ä£¿éÐÅÏ¢
//#define  NET_DVR_SET_ALARMHOST_MODULE_CFG            2049//ÉèÖÃÄ£¿éÐÅÏ¢(Ô¤Áô)

#define     NET_DVR_GET_ALARMHOST_EXTERNAL_DEVICE_STATE        2050//»ñÈ¡485Íâ½ÓÉè±¸×´Ì¬
#define  NET_DVR_SET_ALARMHOST_EXTERNAL_DEVICE_LIMIT_VALUE  2051//ÉèÖÃÍâ½ÓÉè±¸±¨¾¯ÏÞÖµ
#define  NET_DVR_GET_ALARMHOST_EXTERNAL_DEVICE_LIMIT_VALUE  2052//»ñÈ¡Íâ½ÓÉè±¸±¨¾¯ÏÞÖµ
#define  NET_DVR_GET_ALARMHOST_SENSOR_JOINT_CFG                2053// »ñÈ¡Ä£ÄâÁ¿¹ØÁªÅäÖÃ
#define  NET_DVR_SET_ALARMHOST_SENSOR_JOINT_CFG                2054// ÉèÖÃÄ£ÄâÁ¿¹ØÁªÅäÖÃ
#define     NET_DVR_SET_ALARMHOST_RS485_SLOT_CFG                2055// ÉèÖÃ±¨¾¯Ö÷»ú485²ÛÎ»²ÎÊý
#define  NET_DVR_GET_ALARMHOST_RS485_SLOT_CFG                2056// »ñÈ¡±¨¾¯Ö÷»ú485²ÛÎ»²ÎÊý

#define NET_DVR_GET_ALL_VARIABLE_INFO      2057   // »ñÈ¡ËùÓÐ±äÁ¿ÔªËØÐÅÏ¢
#define NET_DVR_GET_ALARM_POINT_CFG       2058   // »ñÈ¡µãºÅÐÅÏ¢
#define NET_DVR_SET_ALARM_POINT_CFG       2059   // ÉèÖÃµãºÅÐÅÏ¢
#define NET_DVR_GET_HISTORY_VALUE          2060   // »ñÈ¡ÀúÊ·Êý¾Ý
#define NET_DVR_GET_ALARMHOST_ALARM_MODE  2061   // »ñÈ¡Êý¾ÝÉÏ´«·½Ê½
#define NET_DVR_SET_ALARMHOST_ALARM_MODE  2062   // ÉèÖÃÊý¾ÝÉÏ´«·½Ê½
#define NET_DVR_GET_ALARMHOST_SENSOR_VALUE 2063   // »ñÈ¡Ä£ÄâÁ¿ÊµÊ±Êý¾Ý

#define NET_DVR_GET_ALARMHOST_REPORT_CENTER_V40    2064   // »ñÈ¡Êý¾ÝÉÏ´«·½Ê½
#define NET_DVR_SET_ALARMHOST_REPORT_CENTER_V40    2065   // ÉèÖÃÊý¾ÝÉÏ´«·½Ê½
#define NET_DVR_GET_OUTPUT_SCHEDULE_RULECFG        2068   // »ñÈ¡Ê±¿ØÊä³ö²ÎÊý
#define NET_DVR_SET_OUTPUT_SCHEDULE_RULECFG     2069   // ÉèÖÃÊ±¿ØÊä³ö²ÎÊý
#define NET_DVR_GET_CMS_CFG                     2070
#define    NET_DVR_SET_CMS_CFG                        2071

#define NET_DVR_GET_PASSTHROUGH_CAP  2073  //»ñÈ¡Éè±¸Í¸´«ÄÜÁ¦¼¯

#define NET_DVR_GET_ALARMHOST_MAIN_STATUS_V40    2072   // »ñÈ¡Ö÷Òª×´Ì¬V40

/*************************************ÊÓÆµ±¨¾¯Ö÷»ú1.3 begin*************************************/
#define NET_DVR_GET_ALARM_CAPTRUE_CFG                 2074    //»ñÈ¡±¨¾¯×¥Í¼²ÎÊýÅäÖÃ
#define    NET_DVR_SET_ALARM_CAPTRUE_CFG                2075    //ÉèÖÃ±¨¾¯×¥Í¼²ÎÊýÅäÖÃ
#define NET_DVR_GET_ONE_OUTPUT_SCH_RULECFG_V40        2078   // »ñÈ¡µ¥¸öÊ±¿ØÊä³ö²ÎÊýV40
#define NET_DVR_SET_ONE_OUTPUT_SCH_RULECFG_V40        2079   // ÉèÖÃµ¥¸öÊ±¿ØÊä³ö²ÎÊýV40
#define NET_DVR_GET_OUTPUT_SCHEDULE_RULECFG_V40        2080   // »ñÈ¡Ê±¿ØÊä³ö²ÎÊýV40
#define NET_DVR_SET_OUTPUT_SCHEDULE_RULECFG_V40     2081   // ÉèÖÃÊ±¿ØÊä³ö²ÎÊýV40
/*************************************ÊÓÆµ±¨¾¯Ö÷»ú1.3 end**************************************/


#define NET_DVR_GET_WEEK_PLAN_CFG               2100    //»ñÈ¡ÃÅ×´Ì¬ÖÜ¼Æ»®²ÎÊý
#define NET_DVR_SET_WEEK_PLAN_CFG               2101    //ÉèÖÃÃÅ×´Ì¬ÖÜ¼Æ»®²ÎÊý
#define NET_DVR_GET_DOOR_STATUS_HOLIDAY_PLAN    2102    //»ñÈ¡ÃÅ×´Ì¬¼ÙÈÕ¼Æ»®²ÎÊý
#define NET_DVR_SET_DOOR_STATUS_HOLIDAY_PLAN    2103    //ÉèÖÃÃÅ×´Ì¬¼ÙÈÕ¼Æ»®²ÎÊý
#define NET_DVR_GET_DOOR_STATUS_HOLIDAY_GROUP   2104    //»ñÈ¡ÃÅ×´Ì¬¼ÙÈÕ×é²ÎÊý
#define NET_DVR_SET_DOOR_STATUS_HOLIDAY_GROUP   2105    //ÉèÖÃÃÅ×´Ì¬¼ÙÈÕ×é²ÎÊý
#define NET_DVR_GET_DOOR_STATUS_PLAN_TEMPLATE   2106    //»ñÈ¡ÃÅ×´Ì¬¼Æ»®Ä£°å²ÎÊý
#define NET_DVR_SET_DOOR_STATUS_PLAN_TEMPLATE   2107    //ÉèÖÃÃÅ×´Ì¬¼Æ»®Ä£°å²ÎÊý
#define NET_DVR_GET_DOOR_CFG                    2108    //»ñÈ¡ÃÅ²ÎÊý
#define NET_DVR_SET_DOOR_CFG                    2109    //ÉèÖÃÃÅ²ÎÊý
#define NET_DVR_GET_DOOR_STATUS_PLAN            2110    //»ñÈ¡ÃÅ×´Ì¬¼Æ»®²ÎÊý
#define NET_DVR_SET_DOOR_STATUS_PLAN            2111    //ÉèÖÃÃÅ×´Ì¬¼Æ»®²ÎÊý
#define NET_DVR_GET_GROUP_CFG                   2112    //»ñÈ¡Èº×é²ÎÊý
#define NET_DVR_SET_GROUP_CFG                   2113    //ÉèÖÃÈº×é²ÎÊý
#define NET_DVR_GET_MULTI_CARD_CFG              2114    //»ñÈ¡¶àÖØ¿¨²ÎÊý
#define NET_DVR_SET_MULTI_CARD_CFG              2115    //ÉèÖÃ¶àÖØ¿¨²ÎÊý
#define NET_DVR_GET_CARD_CFG                    2116    //»ñÈ¡¿¨²ÎÊý
#define NET_DVR_SET_CARD_CFG                    2117    //ÉèÖÃ¿¨²ÎÊý
#define NET_DVR_CLEAR_ACS_PARAM                    2118    //Çå¿ÕÃÅ½ûÖ÷»ú²ÎÊý
#define NET_DVR_GET_SNEAK_CFG                    2119    //»ñÈ¡·´Ç±»Ø²ÎÊý
#define NET_DVR_SET_SNEAK_CFG                   2120    //ÉèÖÃ·´Ç±»Ø²ÎÊý
#define NET_DVR_GET_MULTI_DOOR_INTERLOCK_CFG    2121    //»ñÈ¡¶àÃÅ»¥Ëø²ÎÊý
#define NET_DVR_SET_MULTI_DOOR_INTERLOCK_CFG    2122    //ÉèÖÃ¶àÃÅ»¥Ëø²ÎÊý
#define NET_DVR_GET_ACS_WORK_STATUS                2123    //»ñÈ¡ÃÅ½ûÖ÷»ú¹¤×÷×´Ì¬
#define NET_DVR_GET_VERIFY_WEEK_PLAN            2124    //»ñÈ¡¶Á¿¨Æ÷ÑéÖ¤·½Ê½ÖÜ¼Æ»®²ÎÊý
#define NET_DVR_SET_VERIFY_WEEK_PLAN            2125    //ÉèÖÃ¶Á¿¨Æ÷ÑéÖ¤·½Ê½ÖÜ¼Æ»®²ÎÊý
#define NET_DVR_GET_CARD_RIGHT_WEEK_PLAN        2126    //»ñÈ¡¿¨È¨ÏÞÖÜ¼Æ»®²ÎÊý
#define NET_DVR_SET_CARD_RIGHT_WEEK_PLAN        2127    //ÉèÖÃ¿¨È¨ÏÞÖÜ¼Æ»®²ÎÊý
#define NET_DVR_GET_VERIFY_HOLIDAY_PLAN         2128    //»ñÈ¡¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼ÙÈÕ¼Æ»®²ÎÊý
#define NET_DVR_SET_VERIFY_HOLIDAY_PLAN         2129    //ÉèÖÃ¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼ÙÈÕ¼Æ»®²ÎÊý
#define NET_DVR_GET_CARD_RIGHT_HOLIDAY_PLAN     2130    //»ñÈ¡¿¨È¨ÏÞ¼ÙÈÕ¼Æ»®²ÎÊý
#define NET_DVR_SET_CARD_RIGHT_HOLIDAY_PLAN     2131    //ÉèÖÃ¿¨È¨ÏÞ¼ÙÈÕ¼Æ»®²ÎÊý
#define NET_DVR_GET_VERIFY_HOLIDAY_GROUP        2132    //»ñÈ¡¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼ÙÈÕ×é²ÎÊý
#define NET_DVR_SET_VERIFY_HOLIDAY_GROUP        2133    //ÉèÖÃ¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼ÙÈÕ×é²ÎÊý
#define NET_DVR_GET_CARD_RIGHT_HOLIDAY_GROUP    2134    //»ñÈ¡¿¨È¨ÏÞ¼ÙÈÕ×é²ÎÊý
#define NET_DVR_SET_CARD_RIGHT_HOLIDAY_GROUP    2135    //ÉèÖÃ¿¨È¨ÏÞ¼ÙÈÕ×é²ÎÊý
#define NET_DVR_GET_VERIFY_PLAN_TEMPLATE        2136    //»ñÈ¡¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼Æ»®Ä£°å²ÎÊý
#define NET_DVR_SET_VERIFY_PLAN_TEMPLATE        2137    //ÉèÖÃ¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼Æ»®Ä£°å²ÎÊý
#define NET_DVR_GET_CARD_RIGHT_PLAN_TEMPLATE    2138    //»ñÈ¡¿¨È¨ÏÞ¼Æ»®Ä£°å²ÎÊý
#define NET_DVR_SET_CARD_RIGHT_PLAN_TEMPLATE    2139    //ÉèÖÃ¿¨È¨ÏÞ¼Æ»®Ä£°å²ÎÊý
#define NET_DVR_GET_CARD_READER_CFG                2140    //»ñÈ¡¶Á¿¨Æ÷²ÎÊý
#define NET_DVR_SET_CARD_READER_CFG             2141    //ÉèÖÃ¶Á¿¨Æ÷²ÎÊý
#define NET_DVR_GET_CARD_READER_PLAN            2142    //»ñÈ¡¶Á¿¨Æ÷ÑéÖ¤¼Æ»®²ÎÊý
#define NET_DVR_SET_CARD_READER_PLAN            2143    //ÉèÖÃ¶Á¿¨Æ÷ÑéÖ¤¼Æ»®²ÎÊý
#define NET_DVR_GET_CASE_SENSOR_CFG                2144    //»ñÈ¡ÊÂ¼þ´¥·¢Æ÷²ÎÊý
#define NET_DVR_SET_CASE_SENSOR_CFG             2145    //ÉèÖÃÊÂ¼þ´¥·¢Æ÷²ÎÊý
#define NET_DVR_GET_CARD_READER_ANTI_SNEAK_CFG  2146    //»ñÈ¡¶Á¿¨Æ÷·´Ç±»Ø²ÎÊý
#define NET_DVR_SET_CARD_READER_ANTI_SNEAK_CFG  2147    //ÉèÖÃ¶Á¿¨Æ÷·´Ç±»Ø²ÎÊý
#define NET_DVR_GET_PHONE_DOOR_RIGHT_CFG        2148    //»ñÈ¡ÊÖ»ú¹ØÁªÃÅÈ¨ÏÞ²ÎÊý
#define NET_DVR_SET_PHONE_DOOR_RIGHT_CFG        2149    //»ñÈ¡ÊÖ»ú¹ØÁªÃÅÈ¨ÏÞ²ÎÊý
#define NET_DVR_GET_FINGERPRINT_CFG             2150    //»ñÈ¡Ö¸ÎÆ²ÎÊý
#define NET_DVR_SET_FINGERPRINT_CFG             2151    //ÉèÖÃÖ¸ÎÆ²ÎÊý
#define NET_DVR_DEL_FINGERPRINT_CFG             2152    //É¾³ýÖ¸ÎÆ²ÎÊý
#define NET_DVR_GET_EVENT_CARD_LINKAGE_CFG      2153    //»ñÈ¡ÊÂ¼þ¿¨ºÅÁª¶¯ÅäÖÃ²ÎÊý
#define NET_DVR_SET_EVENT_CARD_LINKAGE_CFG      2154    //ÉèÖÃÊÂ¼þ¿¨ºÅÁª¶¯ÅäÖÃ²ÎÊý
#define NET_DVR_GET_ANTI_SNEAK_HOST_CFG            2155    //»ñÈ¡Ö÷»ú×é·´Ç±»Ø²ÎÊý
#define NET_DVR_SET_ANTI_SNEAK_HOST_CFG         2156    //ÉèÖÃÖ÷»ú×é·´Ç±»Ø²ÎÊý
#define NET_DVR_GET_READER_ANTI_SNEAK_HOST_CFG  2157    //»ñÈ¡Ö÷»ú×é¶Á¿¨Æ÷·´Ç±»Ø²ÎÊý
#define NET_DVR_SET_READER_ANTI_SNEAK_HOST_CFG  2158    //ÉèÖÃÖ÷»ú×é¶Á¿¨Æ÷·´Ç±»Ø²ÎÊý
#define NET_DVR_GET_ACS_CFG                     2159    //»ñÈ¡ÃÅ½ûÖ÷»ú²ÎÊý
#define NET_DVR_SET_ACS_CFG                     2160    //ÉèÖÃÃÅ½ûÖ÷»ú²ÎÊý
#define NET_DVR_GET_CARD_PASSWD_CFG                2161    //»ñÈ¡¿¨ÃÜÂë¿ªÃÅÊ¹ÄÜÅäÖÃ
#define NET_DVR_SET_CARD_PASSWD_CFG             2162    //ÉèÖÃ¿¨ÃÜÂë¿ªÃÅÊ¹ÄÜÅäÖÃ
#define NET_DVR_GET_CARD_USERINFO_CFG           2163    //»ñÈ¡¿¨ºÅ¹ØÁªÓÃ»§ÐÅÏ¢²ÎÊý
#define NET_DVR_SET_CARD_USERINFO_CFG           2164    //ÉèÖÃ¿¨ºÅ¹ØÁªÓÃ»§ÐÅÏ¢²ÎÊý

#define NET_DVR_GET_ACS_EXTERNAL_DEV_CFG        2165    //»ñÈ¡ÃÅ½ûÖ÷»ú´®¿ÚÍâÉè²ÎÊý
#define NET_DVR_SET_ACS_EXTERNAL_DEV_CFG        2166    //ÉèÖÃÃÅ½ûÖ÷»ú´®¿ÚÍâÉè²ÎÊý
#define NET_DVR_GET_PERSONNEL_CHANNEL_CFG       2167    //»ñÈ¡ÈËÔ±Í¨µÀ²ÎÊý
#define NET_DVR_SET_PERSONNEL_CHANNEL_CFG       2168    //ÉèÖÃÈËÔ±Í¨µÀ²ÎÊý
#define NET_DVR_SET_PLATFORM_VERIFY_CFG         2169    //ÏÂ·¢Æ½Ì¨ÈÏÖ¤½á¹û
#define NET_DVR_GET_PERSON_STATISTICS_CFG        2170   //»ñÈ¡ÈËÊýÍ³¼Æ²ÎÊý
#define NET_DVR_SET_PERSON_STATISTICS_CFG        2171   //ÉèÖÃÈËÊýÍ³¼Æ²ÎÊý
#define NET_DVR_GET_ACS_SCREEN_DISPLAY_CFG        2172   //»ñÈ¡ÆÁÄ»×Ö·û´®ÏÔÊ¾²ÎÊý
#define NET_DVR_SET_ACS_SCREEN_DISPLAY_CFG        2173   //ÉèÖÃÆÁÄ»×Ö·û´®ÏÔÊ¾²ÎÊý
#define NET_DVR_GET_GATE_TIME_CFG               2174  //»ñÈ¡ÈËÔ±Í¨µÀÕ¢ÃÅÊ±¼ä²ÎÊý
#define NET_DVR_SET_GATE_TIME_CFG               2175  //ÉèÖÃÈËÔ±Í¨µÀÕ¢ÃÅÊ±¼ä²ÎÊý

#define NET_DVR_GET_CARD_CFG_V50                2178    //»ñÈ¡ÐÂ¿¨²ÎÊý(V50)
#define NET_DVR_SET_CARD_CFG_V50                2179    //ÉèÖÃÐÂ¿¨²ÎÊý(V50)

#define NET_DVR_GET_SAFETYCABIN_STATE            2197    //»ñÈ¡·À»¤²Õ×´Ì¬
#define NET_DVR_GET_RS485_CASCADE_CFG            2198   //»ñÈ¡Rs485¼¶ÁªÉè±¸ÅäÖÃ
#define NET_DVR_SET_RS485_CASCADE_CFG            2199   //ÉèÖÃRs485¼¶ÁªÉè±¸ÅäÖÃ

/*************************************ÊÓÆµ±¨¾¯Ö÷»ú2.0 begin*************************************/
#define NET_DVR_GET_REMOTECONTROLLER_PERMISION_CFG        2200    //»ñÈ¡Ò£¿ØÆ÷È¨ÏÞ²ÎÊý
#define NET_DVR_SET_REMOTECONTROLLER_PERMISION_CFG        2201    //ÉèÖÃÒ£¿ØÆ÷È¨ÏÞ²ÎÊý
#define NET_DVR_GET_KEYBOARD_CFG                        2202    //»ñÈ¡¼üÅÌ²ÎÊýÅäÖÃ
#define NET_DVR_SET_KEYBOARD_CFG                        2203    //ÉèÖÃ¼üÅÌ²ÎÊýÅäÖÃ
#define    NET_DVR_GET_ALARMHOST_WIRELESS_BUSINNESS_INFO    2204    //ÎÞÏßÒµÎñ²éÑ¯
#define    NET_DVR_GET_ALL_REMOTECONTROLLER_LIST            2205    //»ñÈ¡ËùÓÐÒ£¿ØÆ÷
#define    NET_DVR_GET_PREVIEW_DELAY_CFG                    2206    //»ñÈ¡ÑÓ³ÙÔ¤ÀÀ²ÎÊýÅäÖÃ
#define    NET_DVR_SET_PREVIEW_DELAY_CFG                    2207    //ÉèÖÃÑÓ³ÙÔ¤ÀÀ²ÎÊýÅäÖÃ
#define NET_DVR_GET_ZONE_CHANNEL_LINKAGE_CFG            2208    //»ñÈ¡·ÀÇøÁª¶¯ÊÓÆµÍ¨µÀÅäÖÃ
#define NET_DVR_SET_ZONE_CHANNEL_LINKAGE_CFG            2209    //ÉèÖÃ·ÀÇøÁª¶¯ÊÓÆµÍ¨µÀÅäÖÃ
#define NET_DVR_GET_CENTER_SERVER_CFG                    2210    //»ñÈ¡±¨¾¯ÖÐÐÄ·þÎñÆ÷
#define NET_DVR_SET_CENTER_SERVER_CFG                    2211    //ÉèÖÃ±¨¾¯ÖÐÐÄ·þÎñÆ÷
/*************************************ÊÓÆµ±¨¾¯Ö÷»ú2.0 end**************************************/

/********************************Ò»¼üÊ½½ô¼±±¨¾¯²úÆ·V1.0.0 begin********************************/
#define NET_DVR_GET_EMERGENCE_ALARM_PRODUCT_CAP            2212    //»ñÈ¡Ò»¼üÊ½½ô¼±±¨¾¯²úÆ·ÄÜÁ¦
#define NET_DVR_GET_CALL_WAITTING_CFG_CAP                2213    //»ñÈ¡ºô½ÐµÈ´ý²ÎÊýÅäÖÃÄÜÁ¦
#define NET_DVR_GET_CALL_WAITTING_CFG                    2214    //»ñÈ¡ºô½ÐµÈ´ý²ÎÊýÅäÖÃ
#define NET_DVR_SET_CALL_WAITTING_CFG                    2215    //ÉèÖÃºô½ÐµÈ´ý²ÎÊýÅäÖÃ
#define NET_DVR_GET_ALARM_LAMP_CFG_CAP                    2216    //»ñÈ¡¾¯µÆ²ÎÊýÅäÖÃÄÜÁ¦
#define NET_DVR_GET_ALARM_LAMP_CFG                        2217    //»ñÈ¡¾¯µÆ²ÎÊýÅäÖÃ
#define NET_DVR_SET_ALARM_LAMP_CFG                        2218    //ÉèÖÃ¾¯µÆ²ÎÊýÅäÖÃ
#define NET_DVR_GET_VOICE_PROMPTION_CFG_CAP                2219    //»ñÈ¡ÓïÒôÌáÊ¾ÅäÖÃÄÜÁ¦
#define NET_DVR_GET_VOICE_PROMPTION_CFG                    2220    //»ñÈ¡ÓïÒôÌáÊ¾ÅäÖÃ
#define NET_DVR_SET_VOICE_PROMPTION_CFG                    2221    //ÉèÖÃÓïÒôÌáÊ¾ÅäÖÃ
#define NET_DVR_GET_EMERGENCE_ALARM_RESPONSE_CAP        2222    //»ñÈ¡½ô¼±±¨¾¯´¦ÀíÄÜÁ¦
#define NET_DVR_EMERGENCE_ALARM_RESPONSE_CTRL            2223    //½ô¼±±¨¾¯´¦Àí¿ØÖÆ
/********************************Ò»¼üÊ½½ô¼±±¨¾¯²úÆ·V1.0.0 end**********************************/

//ÍøÂç±¨¾¯Ö÷»ú V2.2
#define NET_DVR_GET_ALARMHOST_NETCFG_V50                2224    //»ñÈ¡±¨¾¯Ö÷»úÍøÂç²ÎÊýÅäÖÃV50
#define NET_DVR_SET_ALARMHOST_NETCFG_V50                2225    //ÉèÖÃ±¨¾¯Ö÷»úÍøÂç²ÎÊýÅäÖÃV50
#define    NET_DVR_REGISTER_ALARM_RS485                    2226    //RS485ÖØÐÂ×¢²á
/**********************************¶¯»·±¨¾¯Ö÷»úV3.0****************************************/

#define NET_DVR_GET_ALARMIN_PARAM_LIST					2227	//»ñÈ¡·ÀÇø²ÎÊýÁÐ±í

/**********************************¾­¼ÃÐÍÖ¸ÎÆÃÅ½û²úÆ·V1.0****************************************/
#define NET_DVR_GET_SCHEDULE_INFO                       2500	//»ñÈ¡ÅÅ°àÐÅÏ¢
#define NET_DVR_GET_ATTENDANCE_SUMMARY_INFO             2501	//»ñÈ¡¿¼ÇÚ»ã×ÜÐÅÏ¢
#define NET_DVR_GET_ATTENDANCE_RECORD_INFO              2502	//»ñÈ¡¿¼ÇÚ¼ÇÂ¼ÐÅÏ¢
#define NET_DVR_GET_ABNORMAL_INFO                       2503	//»ñÈ¡Òì³£Í³¼ÆÐÅÏ¢
/**********************************¾­¼ÃÐÍÖ¸ÎÆÃÅ½û²úÆ·V1.0****************************************/

/*************************************ÊÓÆµÃÅ½ûÒ»Ìå»ú1.0 begin**************************************/
#define NET_DVR_CAPTURE_FINGERPRINT_INFO                2504    //²É¼¯Ö¸ÎÆÐÅÏ¢
/*************************************ÊÓÆµÃÅ½ûÒ»Ìå»ú1.0 end**************************************/

#define NET_DVR_GET_ALL_ALARM_RS485CFG			2705	// »ñÈ¡485²ÎÊý
#define NET_DVR_GET_ALL_ALARMHOST_RS485_SLOT_CFG		2706		// »ñÈ¡ËùÓÐ±¨¾¯Ö÷»ú485²ÛÎ»²ÎÊý
#define NET_DVR_GET_DEVICE_SELF_CHECK_STATE		2707	//»ñÈ¡Éè±¸×Ô¼ì¹¦ÄÜ
#define NET_DVR_GET_ALL_ALARM_POINT_CFG			2708	// »ñÈ¡ËùÓÐµãºÅ²ÎÊý
#define NET_DVR_GET_ALL_ALARM_SENSOR_CFG		2709	// »ñÈ¡ËùÓÐÄ£ÄâÁ¿²ÎÊý
#define NET_DVR_GET_ALL_ALARM_SENSOR_JOINT		2710	//»ñÈ¡ËùÓÐÄ£ÄâÁ¿Áª¶¯²ÎÊý
#define NET_DVR_GET_AIR_CONDITION_PARAM			2711	//»ñÈ¡¿Õµ÷²ÎÊý
#define NET_DVR_GET_OUT_SCALE_CFG				2712        //»ñÈ¡Ö÷¸¨¿ÚÊä³öÅäÖÃ
#define NET_DVR_SET_OUT_SCALE_CFG				2713        //ÉèÖÃÖ÷¸¨¿ÚÊä³öÅäÖÃ
#define NET_DVR_GET_ALARM_CHAN_ABLITITY			2714        //»ñÈ¡±¨¾¯Ïà¹ØÍ¨µÀ²Î
/**********************************¶¯»·±¨¾¯Ö÷»úV3.0****************************************/

//¶¯»·±¨¾¯Ö÷»úD2000 V1.0
#define NET_DVR_GET_ALARMCENTER_NETCFG            2715        //»ñÈ¡±¨¾¯ÖÐÐÄÍøÂç²ÎÊýÅäÖÃ
#define NET_DVR_SET_ALARMCENTER_NETCFG            2716        //»ñÈ¡±¨¾¯ÖÐÐÄÍøÂç²ÎÊýÅäÖÃ


#define NET_ITC_GET_TRIGGERCFG                  3003  //»ñÈ¡´¥·¢²ÎÊý
#define NET_ITC_SET_TRIGGERCFG                  3004  //ÉèÖÃ´¥·¢²ÎÊý
#define NET_ITC_GET_IOOUT_PARAM_CFG                3005  //»ñÈ¡IOÊä³ö²ÎÊý£¨3.1º¬Ö®ºó°æ±¾£©
#define NET_ITC_SET_IOOUT_PARAM_CFG                3006  //ÉèÖÃIOÊä³ö²ÎÊý£¨3.1º¬Ö®ºó°æ±¾£©

#define NET_DVR_GET_CAMERA_SETUPCFG                3007  //»ñÈ¡Ïà»ú¼ÜÉè²ÎÊý
#define NET_DVR_SET_CAMERA_SETUPCFG                3008  //ÉèÖÃÏà»ú¼ÜÉè²ÎÊý

#define NET_ITC_GET_TRIGGER_DEFAULTCFG          3013  //»ñÈ¡´¥·¢Ä£Ê½ÍÆ¼ö²ÎÊý
#define NET_DVR_GET_STATUS_DETECTCFG            3015  //»ñÈ¡×´Ì¬¼ì²âÊ¹ÄÜ²ÎÊý
#define NET_DVR_SET_STATUS_DETECTCFG            3016  //ÉèÖÃ×´Ì¬¼ì²âÊ¹ÄÜ²ÎÊý
#define NET_ITC_GET_VIDEO_TRIGGERCFG            3017  //»ñÈ¡ÊÓÆµµç¾¯´¥·¢²ÎÊý
#define NET_ITC_SET_VIDEO_TRIGGERCFG            3018  //ÉèÖÃÊÓÆµµç¾¯´¥·¢²ÎÊý
#define NET_DVR_GET_TPS_ALARMCFG                3019  //»ñÈ¡½»Í¨Í³¼Æ±¨¾¯²ÎÊý
#define NET_DVR_SET_TPS_ALARMCFG                3020  //ÉèÖÃ½»Í¨Í³¼Æ±¨¾¯²ÎÊý


#define NET_DVR_GET_REDAREACFG                  3100   //»ñÈ¡ºìÂÌµÆÇøÓò²ÎÊý
#define NET_DVR_SET_REDAREACFG                  3101   //ÉèÖÃºìÂÌµÆÇøÓò²ÎÊý
#define    NET_DVR_GET_TEST_SPOT                    3102   //»ñÈ¡SPOT¿Ú²âÊÔ×Ü²½ÊýºÍµ±Ç°µÚ¼¸²½
#define    NET_DVR_SET_TEST_SPOT                    3103   //ÉèÖÃSPOT¿Ú²âÊÔ×Ü²½ÊýºÍµ±Ç°µÚ¼¸²½
#define NET_DVR_GET_CABINETCFG                    3104   //»ú¹ñ²ÎÊýÅäÖÃ»ñÈ¡
#define NET_DVR_SET_CABINETCFG                    3105   //»ú¹ñ²ÎÊýÅäÖÃÉèÖÃ
#define NET_DVR_VEHICLE_CHECK_START                3106   //ºÚÃûµ¥»ü²éÊý¾Ý»Ø´«
#define NET_DVR_SET_CAPTUREPIC_CFG                3107   //³µÔØ×¥Í¼ÅäÖÃÉèÖÃÃüÁî
#define NET_DVR_GET_CAPTUREPIC_CFG                3108   //³µÔØ×¥Í¼ÅäÖÃ»ñÈ¡ÃüÁî
#define NET_DVR_SET_MOBILEPLATE_RECOG_CFG        3109   //³µÔØ³µÅÆÊ¶±ðÅäÖÃÉèÖÃÃüÁî
#define NET_DVR_GET_MOBILEPLATE_RECOG_CFG        3110   //³µÔØ³µÅÆÊ¶±ðÅäÖÃ»ñÈ¡ÃüÁî
#define NET_DVR_SET_MOBILE_RADAR_CFG            3111   //³µÔØÀ×´ïÅäÖÃÉèÖÃÃüÁî
#define NET_DVR_GET_MOBILE_RADAR_CFG            3112   //³µÔØÀ×´ïÅäÖÃ»ñÈ¡ÃüÁî
#define NET_DVR_SET_MOBILE_LOCALPLATECHK_CFG    3113   //³µÔØºÚÃûµ¥±¾µØ¶Ô±ÈÅäÖÃÉèÖÃÃüÁî
#define NET_DVR_GET_MOBILE_LOCALPLATECHK_CFG    3114   //³µÔØºÚÃûµ¥±¾µØ¶Ô±ÈÅäÖÃ»ñÈ¡ÃüÁî

#define  NET_ITC_GET_ICRCFG                        3115   //»ñÈ¡ICRÅäÖÃÇÐ»»
#define  NET_ITC_SET_ICRCFG                        3116   //ÉèÖÃICRÅäÖÃÇÐ»»
#define  NET_ITC_GET_RS485_ACCESSINFO            3117   //»ñÈ¡Rs485¹ØÁª½ÓÈëÉè±¸µÄÐÅÏ¢ 
#define  NET_ITC_SET_RS485_ACCESSINFO            3118   //ÉèÖÃRs485¹ØÁª½ÓÈëÉè±¸µÄÐÅÏ¢
#define  NET_ITC_GET_EXCEPTIONCFG                 3119   //»ñÈ¡Òì³£²ÎÊý
#define  NET_ITC_SET_EXCEPTIONCFG                3120   //ÉèÖÃÒì³£²ÎÊý
#define  NET_ITC_GET_FTPCFG                        3121   //»ñÈ¡ITC  FTPÉèÖÃ²ÎÊý
#define  NET_ITC_SET_FTPCFG                        3122   //ÉèÖÃITC FTPÉèÖÃ²ÎÊý

#define  NET_DVR_VEHICLE_CONTROL_LIST_START     3123   //ÉèÖÃ³µÁ¾ºÚ°×Ãûµ¥ÐÅÏ¢
#define  NET_DVR_GET_ALL_VEHICLE_CONTROL_LIST   3124   //»ñÈ¡ËùÓÐ³µÁ¾ºÚ°×Ãûµ¥ÐÅÏ¢
#define  NET_DVR_VEHICLE_DELINFO_CTRL           3125   //É¾³ýÉè±¸ÄÚºÚÃûµ¥Êý¾Ý¿âÐÅÏ¢
#define  NET_DVR_GET_ENTRANCE_PARAMCFG            3126   //»ñÈ¡³öÈë¿Ú¿ØÖÆ²ÎÊý
#define  NET_DVR_SET_ENTRANCE_PARAMCFG            3127   //ÉèÖÃ³öÈë¿Ú¿ØÖÆ²ÎÊý
#define  NET_DVR_BARRIERGATE_CTRL               3128   //Ô¶³Ì¿ØÖÆµÀÕ¢
#define  NET_DVR_GATELAMP_CTRL                  3129   //³£ÁÁµÆ¹¦ÄÜ
#define  NET_DVR_GET_CURTRIGGERMODE             3130   //»ñÈ¡Éè±¸µ±Ç°´¥·¢Ä£Ê½
#define  NET_DVR_GET_GPSDATACFG                    3131   //»ñÈ¡GPS²ÎÊý
#define  NET_DVR_SET_GPSDATACFG                    3132   //ÉèÖÃGPS²ÎÊý
#define  NET_DVR_VEHICLELIST_CTRL_START            3133   //ÉèÖÃ³µÁ¾ºÚ°×Ãûµ¥ÐÅÏ¢

#define  NET_DVR_GET_GUARDCFG                   3134   //»ñÈ¡³µÅÆÊ¶±ð¼ì²â¼Æ»® 
#define  NET_DVR_SET_GUARDCFG                   3135   //ÉèÖÃ³µÅÆÊ¶±ð¼ì²â¼Æ»®
#define  NET_DVR_GET_SNAPINFO_CFG               3136   //»ñÈ¡×¥ÅÄÍ¼Æ¬²ÎÊý 
#define  NET_DVR_SET_SNAPINFO_CFG               3137   //ÉèÖÃ×¥ÅÄÍ¼Æ¬²ÎÊý
#define  NET_DVR_GET_SNAPINFO_CFG_V40           3138   //»ñÈ¡×¥ÅÄÍ¼Æ¬²ÎÊýÀ©Õ¹ 
#define  NET_DVR_SET_SNAPINFO_CFG_V40           3139   //ÉèÖÃ×¥ÅÄÍ¼Æ¬²ÎÊýÀ©Õ¹
#define  NET_DVR_SET_CURTRIGGERMODE                3140   //ÉèÖÃÉè±¸µ±Ç°´¥·¢Ä£Ê½(½öIPC/DÖ§³Ö)
#define     NET_DVR_GET_TRAFFIC_DATA                3141   //³¤Á¬½Ó»ñÈ¡½»Í¨Êý¾Ý
#define     NET_DVR_GET_TRAFFIC_FLOW                3142   //³¤Á¬½Ó»ñÈ¡½»Í¨Á÷Á¿
#define  NET_DVR_PARKING_VEHICLE_SEND           3143   //Í£³µ³µÁ¾ÐÅÏ¢ÏÂ·¢
#define  NET_DVR_PARKING_CARD_SEND              3144   //Í£³µ¿¨ÏÂ·¢
#define     NET_DVR_PARKING_CARD_CTRL                3145   //Í£³µ³¡Í£³µ¿¨¿ØÖÆ½Ó¿Ú

#define    NET_DVR_GET_ALARMCTRL_CAPABILITIES        3146   //»ñÈ¡±¨¾¯¿ØÖÆÄÜÁ¦
#define    NET_DVR_SET_ALARMCTRL_CFG                3147   //ÉèÖÃ±¨¾¯¿ØÖÆ
#define    NET_DVR_GET_ALARMCTRL_CFG                3148   //»ñÈ¡±¨¾¯¿ØÖÆ

#define NET_DVR_GET_AUDIO_INPUT                 3201   //»ñÈ¡ÒôÆµÊäÈë²ÎÊý
#define NET_DVR_SET_AUDIO_INPUT                 3202  //ÉèÖÃÒôÆµÊäÈë²ÎÊý
#define NET_DVR_GET_CAMERA_DEHAZE_CFG           3203   //»ñÈ¡Í¸Îí²ÎÊýÅäÖÃ
#define NET_DVR_SET_CAMERA_DEHAZE_CFG           3204  //ÉèÖÃÍ¸Îí²ÎÊýÅäÖÃ
#define NET_DVR_REMOTECONTROL_ALARM             3205  //Ô¶³Ì¿ØÖÆÒ£¿ØÆ÷²¼·À
#define NET_DVR_REMOTECONTROL_DISALARM          3206  //Ô¶³Ì¿ØÖÆÒ£¿ØÆ÷³··À
#define NET_DVR_REMOTECONTROL_STUDY             3207  //Ô¶³Ì¿ØÖÆÒ£¿ØÆ÷Ñ§Ï°
#define NET_DVR_WIRELESS_ALARM_STUDY            3208  //Ô¶³Ì¿ØÖÆÎÞÏß±¨¾¯Ñ§Ï°
#define NET_IPC_GET_AUX_ALARMCFG                3209   //»ñÈ¡¸¨Öú±¨¾¯²ÎÊýÅäÖÃ
#define NET_IPC_SET_AUX_ALARMCFG                3210  //ÉèÖÃ¸¨Öú±¨¾¯²ÎÊýÅäÖÃ
#define NET_DVR_GET_PREVIEW_DISPLAYCFG            3211  //»ñÈ¡Ô¤ÀÀÏÔÊ¾²ÎÊý
#define NET_DVR_SET_PREVIEW_DISPLAYCFG             3212  //ÉèÖÃÔ¤ÀÀÏÔÊ¾²ÎÊý
#define NET_DVR_REMOTECONTROL_PTZ                3213  //Ô¶³Ì¿ØÖÆPTZ
#define NET_DVR_REMOTECONTROL_PRESETPOINT       3214   //Ô¶³Ì¿ØÖÆÔ¤ÖÃµã
#define NET_DVR_REMOTECONTROL_CRUISE             3215   //Ô¶³Ì¿ØÖÆÑ²º½

#define NET_DVR_GET_MULTI_STREAM_COMPRESSIONCFG  3216 //Ô¶³Ì»ñÈ¡¶àÂëÁ÷Ñ¹Ëõ²ÎÊý
#define NET_DVR_SET_MULTI_STREAM_COMPRESSIONCFG  3217 //Ô¶³ÌÉèÖÃ¶àÂëÁ÷Ñ¹Ëõ²ÎÊý 

#define NET_DVR_GET_WPSCFG                        3218  //»ñÈ¡WPS²ÎÊý
#define NET_DVR_SET_WPSCFG                        3219  //ÉèÖÃWPS²ÎÊý
#define NET_DVR_WPS_CONNECT                     3220  //Ô¶³ÌÆôÓÃWPSÁ¬½Ó
#define NET_DVR_GET_DEVICE_PIN                  3221  //»ñÈ¡Éè±¸PINÂë
#define NET_DVR_UPDATE_PIN                      3223  //¸üÐÂÉè±¸PINÂë
#define NET_DVR_GET_PRESETCFG                   3224  //»ñÈ¡Ô¤ÖÃµã²ÎÊý
#define NET_DVR_GET_PTZCRUISECFG                3225  //»ñÈ¡Ñ²º½Â·¾¶²ÎÊý
#define NET_DVR_GET_PRESET_NUM                    3226  //»ñÈ¡Ô¤ÖÃµã¸öÊý
#define NET_DVR_GET_PTZCRUISE_NUM                3227  //»ñÈ¡Ñ²º½Â·¾¶¸öÊý

#define NET_DVR_GET_MOTION_TRACK_CFG            3228  //»ñÈ¡¸ú×Ù²ÎÊý
#define NET_DVR_SET_MOTION_TRACK_CFG            3229  //ÉèÖÃ¸ú×Ù²ÎÊý
#define NET_DVR_CLEAR_IPC_PARAM                    3230  //Çå¿ÕÇ°¶Ë²ÎÊý
#define NET_DVR_GET_IPADDR_FILTERCFG            3232  //»ñÈ¡IPµØÖ·¹ýÂË²ÎÊý
#define NET_DVR_SET_IPADDR_FILTERCFG            3233  //ÉèÖÃIPµØÖ·¹ýÂË²ÎÊý

#define NET_DVR_GET_LOGO_OVERLAYCFG                3234  //»ñÈ¡LOGOÍ¼Æ¬µþ¼Ó²ÎÊý 
#define NET_DVR_SET_LOGO_OVERLAYCFG                3235  //ÉèÖÃLOGOÍ¼Æ¬µþ¼Ó²ÎÊý

#define NET_DVR_GET_IPV6_LIST                   3236  //»ñÈ¡Íø¿¨µÄÈ«²¿IPV6µØÖ·ÐÅÏ¢
#define NET_DVR_GET_AUDIOOUT_VOLUME             3237  //»ñÈ¡Êä³öÒôÆµ´óÐ¡
#define NET_DVR_SET_AUDIOOUT_VOLUME             3238  //ÉèÖÃÊä³öÒôÆµ´óÐ¡
#define NET_DVR_GET_FUZZY_UPGRADE               3239  //»ñÈ¡Ä£ºýÉý¼¶Æ¥ÅäÐÅÏ¢

#define NET_DVR_GET_BV_CORRECT_PARAM            3240  //»ñÈ¡Ïà»úÐ£Õý²ÎÊý
#define NET_DVR_SET_BV_CORRECT_PARAM            3241  //ÉèÖÃÏà»úÐ£Õý²ÎÊý
#define NET_DVR_GET_OUTPUT_VIDEO_TYPE           3242  //»ñÈ¡Êä³öÊÓÆµÀàÐÍ
#define NET_DVR_SET_OUTPUT_VIDEO_TYPE           3243  //ÉèÖÃÊä³öÊÓÆµÀàÐÍ

#define NET_DVR_FISHEYE_CFG                     3244  //ÓãÑÛ³¤Á¬½ÓÅäÖÃ
#define NET_DVR_GET_PTZ_POINT                   3245  //»ñÈ¡PTZµã×ø±ê
#define NET_DVR_SET_PTZ_POINT                   3246  //ÉèÖÃPTZµã×ø±ê
#define NET_DVR_REMOTECONTROL_DEV_PARAM         3247  //ÉèÖÃÉè±¸µÇÂ¼¿Í»§¶Ë²ÎÊý
#define NET_DVR_GET_FISHEYE_STREAM_STATUS       3248  //»ñÈ¡ÓãÑÛÂëÁ÷×´Ì¬

#define NET_DVR_GET_GBT28181_ACCESS_CFG            3249  //»ñÈ¡GBT28181Ð­Òé½ÓÈëÅäÖÃ        
#define NET_DVR_SET_GBT28181_ACCESS_CFG            3250  //ÉèÖÃGBT28181Ð­Òé½ÓÈëÅäÖÃ
#define NET_DVR_GET_GBT28181_CHANINFO_CFG        3251  //»ñÈ¡GBT28181Ð­Òé½ÓÈëÉè±¸µÄÍ¨µÀÐÅÏ¢
#define NET_DVR_SET_GBT28181_CHANINFO_CFG        3252  //ÉèÖÃGBT28181Ð­Òé½ÓÈëÉè±¸µÄÍ¨µÀÐÅÏ¢
#define NET_DVR_GET_GBT28181_ALARMINCFG            3253  //»ñÈ¡GBT28181Ð­Òé½ÓÈëÉè±¸µÄ±¨¾¯ÐÅÏ¢
#define NET_DVR_SET_GBT28181_ALARMINCFG            3254  //ÉèÖÃGBT28181Ð­Òé½ÓÈëÉè±¸µÄ±¨¾¯ÐÅÏ¢
#define NET_DVR_GET_ISP_CAMERAPARAMCFG            3255  //»ñÈ¡ISPÇ°¶Ë²ÎÊýÅäÖÃ
#define NET_DVR_SET_ISP_CAMERAPARAMCFG            3256  //ÉèÖÃISPÇ°¶Ë²ÎÊýÅäÖÃ
#define NET_DVR_GET_DEVSERVER_CFG                3257  //»ñÈ¡Ä£¿é·þÎñÅäÖÃ
#define NET_DVR_SET_DEVSERVER_CFG                3258  //ÉèÖÃÄ£¿é·þÎñÅäÖÃ

//2013-11-25
#define    NET_DVR_GET_WIPERINFO_CFG                3259     //ÓêË¢ÅäÖÃ»ñÈ¡
#define    NET_DVR_SET_WIPERINFO_CFG                3260     //ÓêË¢ÅäÖÃÉèÖÃ
#define NET_DVR_GET_TRACK_DEV_PARAM             3261   //»ñÈ¡¸ú×ÙÉè±¸²ÎÊý
#define NET_DVR_SET_TRACK_DEV_PARAM             3262   //ÉèÖÃ¸ú×ÙÉè±¸²ÎÊý
#define NET_DVR_GET_PTZ_TRACK_PARAM             3263   //»ñÈ¡PTZ¸ú×Ù²ÎÊý
#define NET_DVR_SET_PTZ_TRACK_PARAM             3264   //ÉèÖÃPTZ¸ú×Ù²ÎÊý
#define NET_DVR_GET_CENTER_POINT_CFG            3265   //»ñÈ¡ÖÐÐÄµã²ÎÊý
#define NET_DVR_SET_CENTER_POINT_CFG            3266   //ÉèÖÃÖÐÐÄµã²ÎÊý
#define NET_DVR_GET_CENTER_POINT_CFG_CAPABILITIES        3267    //»ñÈ¡ÖÐÐÄµã²ÎÊýÄÜÁ¦
#define NET_DVR_GET_FISHEYE_CAPABILITIES        3268        //»ñÈ¡ÓãÑÛÄÜÁ¦

#define NET_DVR_GET_BASICPARAMCFG                3270 //»ñÈ¡PTZÅäÖÃ»ù±¾²ÎÊýÐÅÏ¢        
#define NET_DVR_SET_BASICPARAMCFG                3271 //ÉèÖÃPTZÅäÖÃ»ù±¾²ÎÊýÐÅÏ¢
#define NET_DVR_GET_PTZOSDCFG                    3272 //»ñÈ¡PTZ OSDÅäÖÃ²ÎÊýÐÅÏ¢        
#define NET_DVR_SET_PTZOSDCFG                    3273 //ÉèÖÃPTZ OSDÅäÖÃ²ÎÊýÐÅÏ¢
#define NET_DVR_GET_POWEROFFMEMCFG                3274 //»ñÈ¡µôµç¼ÇÒäÄ£Ê½²ÎÊýÐÅÏ¢    
#define NET_DVR_SET_POWEROFFMEMCFG                3275 //ÉèÖÃµôµç¼ÇÒäÄ£Ê½²ÎÊýÐÅÏ¢
#define NET_DVR_GET_LIMITCFG                    3276 //»ñÈ¡ÏÞÎ»²ÎÊýÅäÖÃÐÅÏ¢    
#define NET_DVR_SET_LIMITCFG                    3277 //ÉèÖÃÏÞÎ»²ÎÊýÅäÖÃÐÅÏ¢
#define NET_DVR_PTZLIMIT_CTRL                    3278 //Çå³ýÏÞÎ»²ÎÊý¿ØÖÆ    

#define NET_DVR_PTZ_CLEARCTRL                    3279 //Çå³ýÅäÖÃÐÅÏ¢¿ØÖÆ½Ó¿Ú    
#define NET_DVR_GET_PRIORITIZECFG                3281 //»ñÈ¡ÔÆÌ¨ÓÅÏÈÅäÖÃÐÅÏ¢    
#define NET_DVR_SET_PRIORITIZECFG                3282 //ÉèÖÃÔÆÌ¨ÓÅÏÈÅäÖÃÐÅÏ¢
#define NET_DVR_PTZ_INITIALPOSITIONCTRL            3283 //Áã·½Î»½Ç¿ØÖÆ    
#define NET_DVR_GET_PRIVACY_MASKSCFG            3285 //»ñÈ¡ÒþË½ÕÚ±Î²ÎÊý
#define NET_DVR_SET_PRIVACY_MASKSCFG            3286 //ÉèÖÃÒþË½ÕÚ±Î²ÎÊý
#define NET_DVR_GET_PTZLOCKCFG                    3287 //»ñÈ¡ÔÆÌ¨Ëø¶¨ÐÅÏ¢    
#define NET_DVR_SET_PTZLOCKCFG                    3288 //ÉèÖÃÔÆÌ¨Ëø¶¨ÐÅÏ¢
#define NET_DVR_PTZ_ZOOMRATIOCTRL                3289 //ÉèÖÃ¸ú×Ù±¶ÂÊ    
#define NET_DVR_GET_PTZLOCKINFO                    3290 //»ñÈ¡ÔÆÌ¨Ëø¶¨Ê£ÓàÃëÊý
#define NET_DVR_GET_PRIVACY_MASKS_ENABLECFG        3291 //»ñÈ¡È«¾ÖÊ¹ÄÜ    
#define NET_DVR_SET_PRIVACY_MASKS_ENABLECFG        3292 //ÉèÖÃÈ«¾ÖÊ¹ÄÜ
#define NET_DVR_GET_SMARTTRACKCFG                3293 //»ñÈ¡ÖÇÄÜÔË¶¯¸ú×ÙÅäÖÃÐÅÏ¢    
#define NET_DVR_SET_SMARTTRACKCFG                3294 //ÉèÖÃÖÇÄÜÔË¶¯¸ú×ÙÅäÖÃÐÅÏ¢
#define NET_DVR_GET_EPTZ_CFG                    3295 //»ñÈ¡EPTZ²ÎÊý
#define NET_DVR_SET_EPTZ_CFG                    3296 //ÉèÖÃEPTZ²ÎÊý
#define NET_DVR_GET_EPTZ_CFG_CAPABILITIES        3297 //»ñÈ¡EPTZ²ÎÊýÄÜÁ¦

#define NET_DVR_GET_LOW_LIGHTCFG                3303//»ñÈ¡¿ìÇòµÍÕÕ¶ÈÉèÖÃÐÅÏ¢
#define NET_DVR_SET_LOW_LIGHTCFG                3304//ÉèÖÃ¿ìÇòµÍÕÕ¶ÈÉèÖÃÐÅÏ¢
#define NET_DVR_GET_FOCUSMODECFG                3305//»ñÈ¡¿ìÇò¾Û½¹Ä£Ê½ÐÅÏ¢
#define NET_DVR_SET_FOCUSMODECFG                3306//ÉèÖÃ¿ìÇò¾Û½¹Ä£Ê½ÐÅÏ¢
#define NET_DVR_GET_INFRARECFG                  3307//»ñÈ¡¿ìÇòºìÍâÉèÖÃÐÅÏ¢
#define NET_DVR_SET_INFRARECFG                  3308//ÉèÖÃ¿ìÇòºìÍâÉèÖÃÐÅÏ¢
#define NET_DVR_GET_AEMODECFG                   3309//»ñÈ¡¿ìÇòÆäËûÉèÖÃÐÅÏ¢
#define NET_DVR_SET_AEMODECFG                   3310//ÉèÖÃ¿ìÇòÆäËûÉèÖÃÐÅÏ¢
#define NET_DVR_CONTROL_RESTORE_SUPPORT         3311 //»Ö¸´Ç°¶ËÄ¬ÈÏ²ÎÊý(²ÎÊýÄÜÁ¦ÖÐÓÐµÄÇ°¶Ë²ÎÊýÅäÖÃÏà¹ØµÄ¶¼»Ö¸´)
#define NET_DVR_CONTROL_RESTART_SUPPORT         3312 //¿ìÇò»úÐ¾ÖØÆô
#define NET_DVR_CONTROL_PTZ_PATTERN             3313//ÔÆÌ¨»¨ÑùÉ¨Ãè
#define NET_DVR_GET_PTZ_PARKACTION_CFG          3314//»ñÈ¡ÔÆÌ¨ÊØÍû²ÎÊý
#define NET_DVR_SET_PTZ_PARKACTION_CFG          3315//ÉèÖÃÔÆÌ¨ÊØÍû²ÎÊý
#define NET_DVR_CONTROL_PTZ_MANUALTRACE         3316//ÊÖ¶¯¸ú×Ù¶¨Î»
#define NET_DVR_GET_ROI_DETECT_NUM                3349 //»ñÈ¡ROI¼ì²âÇøÓò±àºÅÊýÄ¿
#define NET_DVR_GET_ROI_DETECT                    3350 //»ñÈ¡ROI¼ì²âÇøÓòÅäÖÃ
#define NET_DVR_SET_ROI_DETECT                    3351 //ÉèÖÃROI¼ì²âÇøÓòÅäÖÃ
#define NET_DVR_GET_FACE_DETECT                    3352 //»ñÈ¡ÈËÁ³Õì²âÅäÖÃ
#define NET_DVR_SET_FACE_DETECT                    3353 //ÉèÖÃÈËÁ³Õì²âÅäÖÃ
#define NET_DVR_GET_CORRIDOR_MODE                3354 //»ñÈ¡×ßÀÈÄ£Ê½¹¦ÄÜÅäÖÃ
#define NET_DVR_SET_CORRIDOR_MODE                3355 //ÉèÖÃ×ßÀÈÄ£Ê½¹¦ÄÜÅäÖÃ
#define NET_DVR_GET_SCENECHANGE_DETECTIONCFG    3356 //»ñÈ¡³¡¾°±ä¸ü±¨¾¯ÅäÖÃ
#define NET_DVR_SET_SCENECHANGE_DETECTIONCFG    3357 //ÉèÖÃ³¡¾°±ä¸ü±¨¾¯ÅäÖÃ
#define NET_DVR_GET_TRAVERSE_PLANE_DETECTION    3360 
#define NET_DVR_SET_TRAVERSE_PLANE_DETECTION    3361 
#define NET_DVR_GET_FIELD_DETECTION                3362 //»ñÈ¡ÇøÓòÕì²âÅäÖÃ
#define NET_DVR_SET_FIELD_DETECTION                3363 //ÉèÖÃÇøÓòÕì²âÅäÖÃ
#define NET_DVR_GET_DEFOCUSPARAM                3364 //»ñÈ¡Ðé½¹Õì²â²ÎÊýÅäÖÃ
#define NET_DVR_SET_DEFOCUSPARAM                3365 //ÉèÖÃÐé½¹Õì²â²ÎÊýÅäÖÃ
#define NET_DVR_GET_AUDIOEXCEPTIONPARAM            3366 //»ñÈ¡ÒôÆµÒì³£ÅäÖÃ
#define NET_DVR_SET_AUDIOEXCEPTIONPARAM            3367 //ÉèÖÃÒôÆµÒì³£ÅäÖÃ
#define NET_DVR_GET_CCDPARAMCFG_EX              3368 //»ñÈ¡CCD²ÎÊýÅäÖÃ
#define NET_DVR_SET_CCDPARAMCFG_EX              3369 //ÉèÖÃCCD²ÎÊýÅäÖÃ
#define NET_DVR_START_GET_INPUTVOLUME            3370//¿ªÊ¼»ñÈ¡ÒôÁ¿
#define NET_DVR_SET_SCH_TASK                    3380 //ÉèÖÃÇò»ú¶¨Ê±ÈÎÎñ
#define NET_DVR_GET_SCH_TASK                    3381  //»ñÈ¡Çò»ú¶¨Ê±ÈÎÎñ
#define NET_DVR_SET_PRESET_NAME                    3382 //ÉèÖÃÔ¤ÖÃµãÃû³Æ
#define NET_DVR_GET_PRESET_NAME                    3383 //»ñÈ¡Ô¤ÖÃµãÃû³Æ
#define NET_DVR_SET_AUDIO_NAME                    3384 //ÉèÖÃÓïÒôÃû³Æ
#define NET_DVR_GET_AUDIO_NAME                    3385  //»ñÈ¡ÓïÒôÃû³Æ
#define NET_DVR_RESUME_INITRACKPOS              3386  //»Ö¸´¸ú×Ù³õÊ¼Î»
#define NET_DVR_NTP_SERVER_TEST                    3387    //NTP·þÎñÆ÷²âÊÔ
#define    NET_DVR_NAS_SERVER_TEST                    3388    //NAS·þÎñÆ÷²âÊÔ
#define    NET_DVR_EMAIL_SERVER_TEST                3389    //Email·þÎñÆ÷²âÊÔ
#define    NET_DVR_FTP_SERVER_TEST                    3390    //FTP·þÎñÆ÷²âÊÔ
#define    NET_DVR_IP_TEST                            3391    //IP²âÊÔ
#define NET_DVR_GET_NET_DISKCFG_V40             3392 //ÍøÂçÓ²ÅÌ½ÓÈë»ñÈ¡v40
#define NET_DVR_SET_NET_DISKCFG_V40                3393 //ÍøÂçÓ²ÅÌ½ÓÈëÉèÖÃv40
#define    NET_DVR_GET_IOOUT_CFG                    3394//»ñÈ¡²¹¹âµÆ²ÎÊý
#define    NET_DVR_SET_IOOUT_CFG                    3395//ÉèÖÃ²¹¹âµÆ²ÎÊý
#define    NET_DVR_GET_SIGNAL_SYNC                    3396//»ñÈ¡ÐÅºÅµÆÍ¬²½ÅäÖÃ²ÎÊý
#define    NET_DVR_SET_SIGNAL_SYNC                    3397//ÉèÖÃÐÅºÅµÆÍ¬²½ÅäÖÃ²ÎÊý    

#define    NET_DVR_GET_EZVIZ_ACCESS_CFG            3398//»ñÈ¡EZVIZ½ÓÈë²ÎÊý
#define    NET_DVR_SET_EZVIZ_ACCESS_CFG            3399//ÉèÖÃEZVIZ½ÓÈë²ÎÊý
#define    NET_DVR_GET_SCHEDULE_AUTO_TRACK_CFG        3400//»ñÈ¡¶¨Ê±ÖÇÄÜ¸ú×Ù²ÎÊý
#define    NET_DVR_SET_SCHEDULE_AUTO_TRACK_CFG        3401//ÉèÖÃ¶¨Ê±ÖÇÄÜ¸ú×Ù²ÎÊý
#define    NET_DVR_MAKE_I_FRAME                    3402//Ç¿ÖÆIÖ¡
#define NET_DVR_GET_ALARM_RELATE                3403//»ñÈ¡±¨¾¯Áª¶¯Í¨µÀ¹¦ÄÜ²ÎÊý
#define NET_DVR_SET_ALARM_RELATE                3404//ÉèÖÃ±¨¾¯Áª¶¯Í¨µÀ¹¦ÄÜ²ÎÊý
#define NET_DVR_GET_PDC_RULECFG_V42             3405  //ÉèÖÃÈËÁ÷Á¿Í³¼Æ¹æÔò(À©Õ¹)
#define NET_DVR_SET_PDC_RULECFG_V42             3406  //»ñÈ¡ÈËÁ÷Á¿Í³¼Æ¹æÔò(À©Õ¹)
#define NET_DVR_GET_HEATMAP_CFG                 3407  //ÉèÖÃÈÈ¶ÈÍ¼²ÎÊýÅäÖÃ
#define NET_DVR_SET_HEATMAP_CFG                 3408  //»ñÈ¡ÈÈ¶ÈÍ¼²ÎÊýÅäÖÃ
#define NET_DVR_REMOTECONTROL_LINEARSCAN        3409   //ÉèÖÃ×óÓÒ±ß½ç²ÎÊý 2014-03-15
#define NET_DVR_DPC_CTRL                        3410//»µµãÐ£Õý¿ØÖÆ
#define NET_DVR_FFC_MANUAL_CTRL                 3411//·Ç¾ùÔÈÐÔÐ£Õý(FFC)ÊÖ¶¯Ä£Ê½
#define NET_DVR_FFC_BACKCOMP_CTRL               3412//·Ç¾ùÔÈÐÔÐ£Õý(FFC)±³¾°²¹³¥
#define NET_DVR_GET_FOCUSING_POSITION_STATE     3413//»ñÈ¡¾Û½¹µ½Î»×´Ì¬²ÎÊý
#define NET_DVR_GET_PRIVATE_PROTOCOL_CFG        3414   //»ñÈ¡ Ë½ÓÐ¹Ø¼üÐÅÏ¢ÉÏ´«ÅäÖÃ½Ó¿ÚÅäÖÃ
#define NET_DVR_SET_PRIVATE_PROTOCOL_CFG        3415   //ÉèÖÃ Ë½ÓÐ¹Ø¼üÐÅÏ¢ÉÏ´«ÅäÖÃ½Ó¿ÚÅäÖÃ
#define NET_DVR_COMPLETE_RESTORE_CTRL           3420    //ÉèÖÃÍêÈ«»Ö¸´³ö³§Öµ

#define NET_DVR_CLOUDSTORAGE_SERVER_TEST        3421  //ÔÆ´æ´¢·þÎñÆ÷²âÊÔ
#define NET_DVR_PHONE_NUM_TEST                  3422  //µç»°ºÅÂë²âÊÔ
#define NET_DVR_GET_REMOTECONTROL_STATUS        3423  //»ñÈ¡ÎÞÏß²¼·À×´Ì¬
#define NET_DVR_GET_MONITOR_LOCATION_INFO        3424  //»ñÈ¡¼à²âµãÐÅÏ¢
#define NET_DVR_SET_MONITOR_LOCATION_INFO        3425  //ÉèÖÃ¼à²âµãÐÅÏ¢


#define    NET_DVR_GET_SMART_CAPABILITIES                3500    //»ñÈ¡SmartÄÜÁ¦
#define    NET_DVR_GET_EVENT_TRIGGERS_CAPABILITIES        3501    //»ñÈ¡ÊÂ¼þ´¥·¢ÄÜÁ¦
#define    NET_DVR_GET_REGION_ENTRANCE_CAPABILITIES    3502    //»ñÈ¡½øÈëÇøÓòÕì²âÄÜÁ¦
#define    NET_DVR_GET_REGION_ENTR_DETECTION            3503    //»ñÈ¡½øÈëÇøÓòÅäÖÃ
#define    NET_DVR_SET_REGION_ENTR_DETECTION            3504    //ÉèÖÃ½øÈëÇøÓòÅäÖÃ
#define    NET_DVR_GET_REGION_ENTR_REGION                3505    //»ñÈ¡½øÈëÇøÓòµÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_SET_REGION_ENTR_REGION                3506    //ÉèÖÃ½øÈëÇøÓòµÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_GET_REGION_ENTR_TRIGGER                3507    //»ñÈ¡½øÈëÇøÓòÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_REGION_ENTR_TRIGGER                3508    //ÉèÖÃ½øÈëÇøÓòÁª¶¯ÅäÖÃ
#define    NET_DVR_GET_REGION_ENTR_SCHEDULE            3509    //»ñÈ¡½øÈëÇøÓò²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_REGION_ENTR_SCHEDULE            3510    //ÉèÖÃ½øÈëÇøÓò²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_GET_REGION_EXITINT_CAPABILITIES        3511    //»ñÈ¡Àë¿ªÇøÓòÕì²âÄÜÁ¦
#define    NET_DVR_GET_REGION_EXITING_DETECTION        3512    //»ñÈ¡Àë¿ªÇøÓòÅäÖÃ
#define    NET_DVR_SET_REGION_EXITING_DETECTION        3513    //ÉèÖÃÀë¿ªÇøÓòÅäÖÃ
#define    NET_DVR_GET_REGION_EXITING_REGION            3514    //»ñÈ¡Àë¿ªÇøÓòµÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_SET_REGION_EXITING_REGION            3515    //ÉèÖÃÀë¿ªÇøÓòµÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_GET_REGION_EXIT_TRIGGER                3516    //»ñÈ¡Àë¿ªÇøÓòÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_REGION_EXIT_TRIGGER                3517    //ÉèÖÃÀë¿ªÇøÓòÁª¶¯ÅäÖÃ
#define    NET_DVR_GET_REGION_EXIT_SCHEDULE            3518    //»ñÈ¡Àë¿ªÇøÓò²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_REGION_EXIT_SCHEDULE            3519    //ÉèÖÃÀë¿ªÇøÓò²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_GET_LOITERING_CAPABILITIES            3520    //»ñÈ¡ÅÇ»²Õì²âÄÜÁ¦
#define    NET_DVR_GET_LOITERING_DETECTION                3521    //»ñÈ¡ÅÇ»²Õì²âÅäÖÃ
#define    NET_DVR_SET_LOITERING_DETECTION                3522    //ÉèÖÃÅÇ»²Õì²âÅäÖÃ
#define    NET_DVR_GET_LOITERING_REGION                3523    //»ñÈ¡ÅÇ»²µÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_SET_LOITERING_REGION                3524    //ÉèÖÃÅÇ»²µÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_GET_LOITERING_TRIGGER                3525    //»ñÈ¡ÅÇ»²Áª¶¯ÅäÖÃ
#define    NET_DVR_SET_LOITERING_TRIGGER                3526    //ÉèÖÃÅÇ»²Áª¶¯ÅäÖÃ
#define    NET_DVR_GET_LOITERING_SCHEDULE                3527    //»ñÈ¡ÅÇ»²²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_LOITERING_SCHEDULE                3528    //ÉèÖÃÅÇ»²²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_GET_GROUPDETECTION_CAPABILITIES        3529    //»ñÈ¡ÈËÔ±¾Û¼¯Õì²âÄÜÁ¦
#define    NET_DVR_GET_GROUP_DETECTION                    3530    //»ñÈ¡ÈËÔ±¾Û¼¯Õì²âÅäÖÃ
#define    NET_DVR_SET_GROUP_DETECTION                    3531    //ÉèÖÃÈËÔ±¾Û¼¯Õì²âÅäÖÃ
#define    NET_DVR_GET_GROUPDETECTION_REGION            3532    //»ñÈ¡ÈËÔ±¾Û¼¯µÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_SET_GROUPDETECTION_REGION            3533    //ÉèÖÃÈËÔ±¾Û¼¯µÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_GET_GROUPDETECTION_TRIGGER            3534    //»ñÈ¡ÈËÔ±¾Û¼¯Áª¶¯ÅäÖÃ
#define    NET_DVR_SET_GROUPDETECTION_TRIGGER            3535    //ÉèÖÃÈËÔ±¾Û¼¯Áª¶¯ÅäÖÃ
#define    NET_DVR_GET_GROUPDETECTION_SCHEDULE            3536    //»ñÈ¡ÈËÔ±¾Û¼¯²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_GROUPDETECTION_SCHEDULE            3537    //ÉèÖÃÈËÔ±¾Û¼¯²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_GET_RAPIDMOVE_CAPABILITIES            3538    //»ñÈ¡¿ìËÙÔË¶¯Õì²âÄÜÁ¦
#define    NET_DVR_GET_RAPIDMOVE_DETECTION                3539    //»ñÈ¡¿ìËÙÔË¶¯Õì²âÅäÖÃ
#define    NET_DVR_SET_RAPIDMOVE_DETECTION                3540    //ÉèÖÃ¿ìËÙÔË¶¯Õì²âÅäÖÃ
#define    NET_DVR_GET_RAPIDMOVE_REGION                3541    //»ñÈ¡¿ìËÙÔË¶¯µÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_SET_RAPIDMOVE_REGION                3542    //ÉèÖÃ¿ìËÙÔË¶¯µÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_GET_RAPIDMOVE_TRIGGER                3543    //»ñÈ¡¿ìËÙÔË¶¯Áª¶¯ÅäÖÃ
#define    NET_DVR_SET_RAPIDMOVE_TRIGGER                3544    //ÉèÖÃ¿ìËÙÔË¶¯Áª¶¯ÅäÖÃ
#define    NET_DVR_GET_RAPIDMOVE_SCHEDULE                3545    //»ñÈ¡¿ìËÙÔË¶¯µÄ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_RAPIDMOVE_SCHEDULE                3546    //ÉèÖÃ¿ìËÙÔË¶¯µÄ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_GET_PATKING_CAPABILITIES            3547    //»ñÈ¡Í£³µÕì²âÄÜÁ¦
#define    NET_DVR_GET_PARKING_DETECTION               3548    //»ñÈ¡Í£³µÕì²âÅäÖÃ
#define    NET_DVR_SET_PARKING_DETECTION                3549    //ÉèÖÃÍ£³µÕì²âÅäÖÃ
#define    NET_DVR_GET_PARKING_REGION                    3550    //»ñÈ¡Í£³µÕì²âµÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_SET_PARKING_REGION                    3551    //ÉèÖÃÍ£³µÕì²âµÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_GET_PARKING_TRIGGER                    3552    //»ñÈ¡Í£³µÕì²âÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_PARKING_TRIGGER                    3553    //ÉèÖÃÍ£³µÕì²âÁª¶¯ÅäÖÃ
#define    NET_DVR_GET_PARKING_SCHEDULE                3554    //»ñÈ¡Í£³µÕì²âµÄ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_PARKING_SCHEDULE                3555    //ÉèÖÃÍ£³µÕì²âµÄ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_GET_UNATTENDED_BAGGAGE_CAPABILITIES    3556    //»ñÈ¡ÎïÆ·ÒÅÁôÕì²âÄÜÁ¦
#define    NET_DVR_GET_UNATTENDED_BAGGAGE_DETECTION    3557    //»ñÈ¡ÎïÆ·ÒÅÁôÕì²âÅäÖÃ
#define    NET_DVR_SET_UNATTENDED_BAGGAGE_DETECTION    3558    //ÉèÖÃÎïÆ·ÒÅÁôÕì²âÅäÖÃ
#define    NET_DVR_GET_UNATTENDED_BAGGAGE_REGION        3559    //»ñÈ¡ÎïÆ·ÒÅÁôÕì²âµÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_SET_UNATTENDED_BAGGAGE_REGION        3560    //ÉèÖÃÎïÆ·ÒÅÁôÕì²âµÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_GET_UNATTENDED_BAGGAGE_TRIGGER        3561    //»ñÈ¡ÎïÆ·ÒÅÁôÕì²âÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_UNATTENDED_BAGGAGE_TRIGGER        3562    //ÉèÖÃÎïÆ·ÒÅÁôÕì²âÁª¶¯ÅäÖÃ
#define    NET_DVR_GET_UNATTENDED_BAGGAGE_SCHEDULE        3563    //»ñÈ¡ÎïÆ·ÒÅÁôÕì²âµÄ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_UNATTENDED_BAGGAGE_SCHEDULE        3564    //ÉèÖÃÎïÆ·ÒÅÁôÕì²âµÄ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_GET_ATTENDEDBAGGAGE_CAPABILITIES    3565    //»ñÈ¡ÎïÆ·ÄÃÈ¡Õì²âÄÜÁ¦
#define    NET_DVR_GET_ATTENDEDBAGGAGE_DETECTION        3566    //»ñÈ¡ÎïÆ·ÄÃÈ¡Õì²âÅäÖÃ
#define    NET_DVR_SET_ATTENDEDBAGGAGE_DETECTION        3567    //ÉèÖÃÎïÆ·ÄÃÈ¡Õì²âÅäÖÃ
#define    NET_DVR_GET_ATTENDEDBAGGAGE_REGION            3568    //»ñÈ¡ÎïÆ·ÄÃÈ¡Õì²âµÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_SET_ATTENDEDBAGGAGE_REGION            3569    //ÉèÖÃÎïÆ·ÄÃÈ¡Õì²âµÄµ¥¸öÇøÓòÅäÖÃ
#define    NET_DVR_GET_ATTENDEDBAGGAGE_TRIGGER            3570    //»ñÈ¡ÎïÆ·ÄÃÈ¡Õì²âÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_ATTENDEDBAGGAGE_TRIGGER            3571    //ÉèÖÃÎïÆ·ÄÃÈ¡Õì²âÁª¶¯ÅäÖÃ
#define    NET_DVR_GET_ATTENDEDBAGGAGE_SCHEDULE        3572    //»ñÈ¡ÎïÆ·ÒÅÁôÕì²âµÄ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_ATTENDEDBAGGAGE_SCHEDULE        3573    //ÉèÖÃÎïÆ·ÄÃÈ¡Õì²âµÄ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_GET_REGIONCLIP_CAPABILITIES            3574    //»ñÈ¡ÇøÓò²Ã¼ôÄÜÁ¦
#define    NET_DVR_GET_REGION_CLIP                     3575    //»ñÈ¡ÇøÓò²Ã¼ôÅäÖÃ
#define    NET_DVR_SET_REGION_CLIP                     3576    //ÉèÖÃÇøÓò²Ã¼ôÅäÖÃ
#define    NET_DVR_GET_NETWORK_CAPABILITIES            3577    //»ñÈ¡ÍøÂçÄÜÁ¦
#define    NET_DVR_GET_WIRELESS_DIAL                     3578    //»ñÈ¡ÎÞÏß²ÎÊýÅäÖÃ
#define    NET_DVR_SET_WIRELESS_DIAL                     3579    //ÉèÖÃÎÞÏß²ÎÊýÅäÖÃ
#define    NET_DVR_GET_WIRELESSDIAL_CAPABILITIES        3580    //»ñÈ¡ÎÞÏß²¦ºÅ²ÎÊýÄÜÁ¦
#define    NET_DVR_GET_WIRELESSDIAL_SCHEDULE            3581    //»ñÈ¡²¦ºÅ¼Æ»®ÅäÖÃ
#define    NET_DVR_SET_WIRELESSDIAL_SCHEDULE            3582    //ÉèÖÃ²¦ºÅ¼Æ»®ÅäÖÃ
#define    NET_DVR_GET_WIRELESSDIAL_STATUS             3583    //»ñÈ¡²¦ºÅ×´Ì¬
#define    NET_DVR_GET_REGION_ENTRANCE_SCHEDULE_CAPABILITIES    3584    //»ñÈ¡½øÈëÇøÓòÕì²â²¼·ÀÊ±¼äÄÜÁ¦
#define    NET_DVR_GET_REGION_EXITING_SCHEDULE_CAPABILITIES    3585    //»ñÈ¡Àë¿ªÇøÓòÕì²â²¼·ÀÊ±¼äÄÜÁ¦
#define    NET_DVR_GET_LOITERING_SCHEDULE_CAPABILITIES    3586    //»ñÈ¡ÅÇ»²Õì²â²¼·ÀÊ±¼äÄÜÁ¦
#define    NET_DVR_GET_GROUP_SCHEDULE_CAPABILITIES    3587    //»ñÈ¡ÈËÔ±¾Û¼¯Õì²â²¼·ÀÊ±¼äÄÜÁ¦
#define    NET_DVR_GET_RAPIDMOVE_SCHEDULE_CAPABILITIES    3588    //»ñÈ¡¿ìËÙÔË¶¯Õì²â²¼·ÀÊ±¼äÄÜÁ¦
#define    NET_DVR_GET_PARKING_SCHEDULE_CAPABILITIES    3589    //»ñÈ¡Í£³µÕì²â²¼·ÀÊ±¼äÄÜÁ¦
#define    NET_DVR_GET_UNATTENDEDBAGGAGE_SCHEDULE_CAPABILITIES    3590    //»ñÈ¡ÎïÆ·ÒÅÁôÕì²â²¼·ÀÊ±¼äÄÜÁ¦
#define    NET_DVR_GET_ATTENDEDBAGGAGE_SCHEDULE_CAPABILITIES    3591    //»ñÈ¡ÎïÆ·ÄÃÈ¡Õì²â²¼·ÀÊ±¼äÄÜÁ¦
#define    NET_DVR_GET_WIRELESSDIAL_SCHEDULE_CAPABILITIES    3592    //»ñÈ¡²¦ºÅ¼Æ»®ÄÜÁ¦
#define    NET_DVR_WIRELESSDIAL_CONNECT    3593    //¿ØÖÆÎÞÏßÍøÂçÁ¬Íø¶ÏÍø

#define    NET_DVR_GET_LITESTORAGE                    3594    //»ñÈ¡Çá´æ´¢ÅäÖÃ
#define    NET_DVR_SET_LITESTORAGE                    3595    //ÉèÖÃÇá´æ´¢ÅäÖÃ
#define    NET_DVR_GET_LITESTORAGE_CAPABILITIES    3596    //»ñÈ¡Çá´æ´¢ÄÜÁ¦

#define    NET_DVR_GET_VEHICLE_CAPABILITIES    3597    //»ñÈ¡³µÁ©¼ì²â±ê¶¨ÄÜÁ¦
#define    NET_DVR_GET_VEHICLE_CALIBRATION     3598    //»ñÈ¡³µÁ¾¼ì²â±ê¶¨

#define    NET_DVR_GET_SLAVECAMERA_CAPABILITIES    3599    //»ñÈ¡´ÓÉãÏñ»úIPÐÅÏ¢ÅäÖÃÄÜÁ¦    
#define    NET_DVR_GET_SLAVECAMERA                    3600    //»ñÈ¡´ÓÉãÏñ»úIPÐÅÏ¢ÅäÖÃ
#define    NET_DVR_SET_SLAVECAMERA                    3601    //ÉèÖÃ´ÓÉãÏñ»úIPÐÅÏ¢ÅäÖÃ
#define    NET_DVR_GET_SLAVECAMERA_STATUS            3602    //»ñÈ¡´ÓÉãÏñ»úÁ¬½Ó×´Ì¬
#define    NET_DVR_GET_SLAVECAMERA_CALIB_CAPABILITIES    3603  //»ñÈ¡´ÓÉãÏñ»úÅäÖÃ&&±ê¶¨ÄÜÁ¦    
#define    NET_DVR_GET_SLAVECAMERA_CALIB            3604    //»ñÈ¡´ÓÉãÏñ»ú±ê¶¨ÅäÖÃ
#define    NET_DVR_SET_SLAVECAMERA_CALIB            3605    //ÉèÖÃ´ÓÉãÏñ»ú±ê¶¨ÅäÖÃ
#define NET_DVR_GET_PHY_RATIO                    3606    //»ñÈ¡ÎïÀí±¶ÂÊ×ø±êÐÅÏ¢    
#define NET_DVR_SET_PHY_RATIO                    3607    //ÉèÖÃÎïÀí±¶ÂÊ×ø±êÐÅÏ¢
#define NET_DVR_GET_MASTERSLAVETRACKING_CAPABILITIES   3608  //»ñÈ¡Ö÷´Ó¸ú×ÙÄÜÁ¦
#define    NET_DVR_SET_TRACKINGRATIO                3610    //ÉèÖÃ´ÓÉãÏñ»ú¸ú×Ù±¶ÂÊ
#define    NET_DVR_GET_TRACKING                    3611    //»ñÈ¡Ö÷´Ó¸ú×Ù¹¦ÄÜÏà»ú¸ú×ÙÅäÖÃ
#define    NET_DVR_SET_TRACKING                    3612    //ÉèÖÃÖ÷´Ó¸ú×Ù¹¦ÄÜÏà»ú¸ú×ÙÅäÖÃ
#define    NET_DVR_GET_TRACKING_CAPABILITIES        3613    //»ñÈ¡Ö÷´Ó¸ú×Ù¹¦ÄÜÏà»ú¸ú×ÙÅäÖÃÄÜÁ¦

#define    NET_DVR_GET_SLAVECAMERA_CALIB_V50        3614    //»ñÈ¡´ÓÉãÏñ»ú±ê¶¨ÅäÖÃV50
#define    NET_DVR_SET_SLAVECAMERA_CALIB_V50        3615    //ÉèÖÃ´ÓÉãÏñ»ú±ê¶¨ÅäÖÃV50
#define    NET_DVR_SET_TRACKINGRATIO_MANUAL        3616    //ÉèÖÃ´ÓÉãÏñ»úÊÖ¶¯¸ú×Ù±¶ÂÊ
#define    NET_DVR_GET_TRACKINGRATIO_MANUAL        3617    //»ñÈ¡´ÓÉãÏñ»úÊÖ¶¯¸ú×Ù±¶ÂÊ
#define    NET_DVR_SET_TRACK_INITPOSTION            3618    //ÉèÖÃ´ÓÉãÏñ»ú³õÊ¼¸ú×ÙÎ»ÖÃ
#define    NET_DVR_GET_PTZ_CAPABILITIES            3619    //»ñÈ¡ptzÇò»ú¿ØÖÆÄÜÁ¦

#define    NET_DVR_GET_THERMOMETRY_BASICPARAM_CAPABILITIES    3620 //»ñÈ¡²âÎÂÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_THERMOMETRY_BASICPARAM      3621    //»ñÈ¡²âÎÂÅäÖÃ²ÎÊý
#define    NET_DVR_SET_THERMOMETRY_BASICPARAM        3622    //ÉèÖÃ²âÎÂÅäÖÃ²ÎÊý
#define    NET_DVR_GET_THERMOMETRY_SCENE_CAPABILITIES    3623 //»ñÈ¡²âÎÂÔ¤ÖÃµã¹ØÁªÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_THERMOMETRY_PRESETINFO      3624    //»ñÈ¡²âÎÂÔ¤ÖÃµã¹ØÁªÅäÖÃ²ÎÊý
#define    NET_DVR_SET_THERMOMETRY_PRESETINFO        3625    //ÉèÖÃ²âÎÂÔ¤ÖÃµã¹ØÁªÅäÖÃ²ÎÊý
#define    NET_DVR_GET_THERMOMETRY_ALARMRULE_CAPABILITIES    3626//»ñÈ¡²âÎÂ±¨¾¯·½Ê½ÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_THERMOMETRY_ALARMRULE       3627    //»ñÈ¡²âÎÂÔ¤ÖÃµã±¨¾¯¹æÔòÅäÖÃ²ÎÊý
#define    NET_DVR_SET_THERMOMETRY_ALARMRULE        3628    //ÉèÖÃ²âÎÂÔ¤ÖÃµã±¨¾¯¹æÔòÅäÖÃ²ÎÊý
#define    NET_DVR_GET_REALTIME_THERMOMETRY        3629    //ÊµÊ±ÎÂ¶È¼ì²â
#define    NET_DVR_GET_THERMOMETRY_DIFFCOMPARISON  3630    //»ñÈ¡²âÎÂÔ¤ÖÃµãÎÂ²î¹æÔòÅäÖÃ²ÎÊý
#define    NET_DVR_SET_THERMOMETRY_DIFFCOMPARISON    3631    //ÉèÖÃ²âÎÂÔ¤ÖÃµãÎÂ²î¹æÔòÅäÖÃ²ÎÊý
#define    NET_DVR_GET_THERMOMETRY_TRIGGER            3632    //»ñÈ¡²âÎÂÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_THERMOMETRY_TRIGGER            3633    //ÉèÖÃ²âÎÂÁª¶¯ÅäÖÃ

#define    NET_DVR_GET_THERMAL_CAPABILITIES        3634    //»ñÈ¡ÈÈ³ÉÏñ£¨Thermal£©ÄÜÁ¦
#define    NET_DVR_GET_FIREDETECTION_CAPABILITIES    3635    //»ñÈ¡»ðµã¼ì²âÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_FIREDETECTION               3636    //»ñÈ¡»ðµã¼ì²â²ÎÊý
#define    NET_DVR_SET_FIREDETECTION               3637    //ÉèÖÃ»ðµã¼ì²â²ÎÊý
#define    NET_DVR_GET_FIREDETECTION_TRIGGER       3638    //»ñÈ¡»ðµã¼ì²âÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_FIREDETECTION_TRIGGER        3639    //ÉèÖÃ»ðµã¼ì²âÁª¶¯ÅäÖÃ

#define NET_DVR_GET_OIS_CAPABILITIES            3640    //»ñÈ¡¹âÑ§·À¶¶²ÎÊýÅäÖÃÄÜÁ¦
#define NET_DVR_GET_OIS_CFG                     3641    //»ñÈ¡¹âÑ§·À¶¶ÅäÖÃ
#define NET_DVR_SET_OIS_CFG                     3642    //ÉèÖÃ¹âÑ§·À¶¶ÅäÖÃ
#define NET_DVR_GET_MACFILTER_CAPABILITIES      3643    //»ñÈ¡MACµØÖ·¹ýÂËÅäÖÃÄÜÁ¦
#define NET_DVR_GET_MACFILTER_CFG               3644    //»ñÈ¡MACµØÖ·¹ýÂËÅäÖÃ
#define NET_DVR_SET_MACFILTER_CFG               3645    //ÉèÖÃMACµØÖ·¹ýÂËÅäÖÃ
#define NET_DVR_GET_EAGLEFOCUS_CALCFG_CAPABILITIES   3646    //Ó¥ÊÓ¾Û½¹±ê¶¨ÅäÖÃÄÜÁ¦
#define NET_DVR_GET_EAGLEFOCUSING_CALCFG        3647    //»ñÈ¡Ó¥ÊÓ¾Û½¹±ê¶¨ÅäÖÃ
#define NET_DVR_SET_EAGLEFOCUSING_CALCFG        3648    //ÉèÖÃÓ¥ÊÓ¾Û½¹±ê¶¨ÅäÖÃ
#define NET_DVR_GET_EAGLEFOCUSING_CFG_CAPABILITIES   3649   //»ñÈ¡Ó¥ÊÓ¾Û½¹ÅäÖÃÄÜÁ¦
#define NET_DVR_GET_EAGLEFOCUSING_CTRL          3650    //»ñÈ¡Ó¥ÊÓ¾Û½¹ÅäÖÃ
#define NET_DVR_SET_EAGLEFOCUSING_CTRL          3651    //ÉèÖÃÓ¥ÊÓ¾Û½¹ÅäÖÃ

#define	NET_DVR_GET_PXOFFLINE_CAPABILITIES      3652	//»ñÈ¡Í£³µ³¡Æ±ÏäÍÑ»úÏÂ²ÎÊýÅäÖÃ ÄÜÁ¦
#define	NET_DVR_SET_PXOFFLINE_CFG	            3653	//ÉèÖÃÍ£³µ³¡Æ±ÏäÍÑ»úÏÂ²ÎÊýÅäÖÃÐÅÏ¢
#define	NET_DVR_GET_PXOFFLINE_CFG	            3654	//»ñÈ¡Í£³µ³¡Æ±ÏäÍÑ»úÏÂ²ÎÊýÅäÖÃÐÅÏ¢
#define	NET_DVR_GET_PAPERCHARGEINFO_CAPABILITIES  3655  //»ñÈ¡Í£³µ³¡³öÈë¿ÚÖ½Æ±ÐÅÏ¢ÏÂ·¢ ÄÜÁ¦
#define	NET_DVR_SET_PAPERCHARGEINFO	            3656	//ÉèÖÃÍ£³µ³¡³öÈë¿ÚÖ½Æ±ÐÅÏ¢ÏÂ·¢
#define	NET_DVR_GET_PARKINGSAPCE_CAPABILITIES	3657	//»ñÈ¡Í£³µ³¡³öÈë¿ÚÍ£³µÎ»ÐÅÏ¢ÏÂ·¢ ÄÜÁ¦
#define	NET_DVR_SET_PARKINGSAPCE_INFO	        3658	//ÉèÖÃÍ£³µ³¡³öÈë¿ÚÍ£³µÎ»ÐÅÏ¢ÏÂ·¢
#define	NET_DVR_GET_PXMULTICTRL_CAPABILITIES	3659	//»ñÈ¡Í£³µ³¡Æ±Ïä´ÓÊôÉè±¸¶à½Ç¶È²ÎÊýÅäÖÃ ÄÜÁ¦
#define	NET_DVR_GET_CHARGEACCOUNT_CAPABILITIES	3661	//»ñÈ¡Í£³µ³¡Æ±Ïä²ÎÊýÅäÖÃÄÜÁ¦
#define	NET_DVR_SET_CHARGE_ACCOUNTINFO          3662	//ÉèÖÃ½É·Ñ½ð¶îÐÅÏ¢
#define	NET_DVR_SET_PXMULTICTRL_CFG	            3663	//ÉèÖÃÍ£³µ³¡Æ±Ïä´ÓÊôÉè±¸¶à½Ç¶È²ÎÊýÅäÖÃÐÅÏ¢
#define	NET_DVR_GET_PXMULTICTRL_CFG	            3664	//»ñÈ¡Í£³µ³¡Æ±Ïä´ÓÊôÉè±¸¶à½Ç¶È²ÎÊýÅäÖÃÐÅÏ¢
#define	NET_DVR_GET_TME_CHARGERULE              3665	//»ñÈ¡Í£³µ³¡³öÈë¿Ú³µ¿¨ÊÕ·Ñ¹æÔò¹æÔò
#define	NET_DVR_SET_TME_CHARGERULE	            3666	//ÉèÖÃÍ£³µ³¡³öÈë¿Ú³µ¿¨ÊÕ·Ñ¹æÔò¹æÔò
#define	NET_DVR_GET_TME_CHARGERULE_CAPABILITIES 3667	//»ñÈ¡Í£³µ³¡³öÈë¿Ú ³µ¿¨ÊÕ·ÑÐÅÏ¢ÅäÖÃÄÜÁ¦
#define	NET_DVR_GET_ILLEGALCARDFILTERING_CAPABILITIES  3668	//»ñÈ¡Í£³µ³¡Æ±Ïä²ÎÊýÅäÖÃÄÜÁ¦
#define	NET_DVR_GET_ILLEGALCARDFILTERING_CFG    3669	//»ñÈ¡Í£³µ³¡Æ±Ïä²ÎÊýÅäÖÃ
#define	NET_DVR_SET_ILLEGALCARDFILTERING_CFG    3670	//ÉèÖÃÍ£³µ³¡Æ±Ïä²ÎÊýÅäÖÃ
#define	NET_DVR_GET_LEDDISPLAY_CAPABILITIES	    3671	//»ñÈ¡LEDÆÁÄ»ÏÔÊ¾²ÎÊýÅäÖÃ²ÎÊýÄÜÁ¦
#define	NET_DVR_SET_LEDDISPLAY_CFG              3672	//ÉèÖÃLEDÆÁÄ»ÏÔÊ¾²ÎÊý
#define	NET_DVR_GET_LEDDISPLAY_CFG              3673	//»ñÈ¡LEDÆÁÄ»ÏÔÊ¾²ÎÊý
#define	NET_DVR_GET_VOICEBROADCAST_CAPABILITIES	3674	//»ñÈ¡ÓïÒô²¥±¨¿ØÖÆ²ÎÊýÅäÖÃ²ÎÊýÄÜÁ¦
#define	NET_DVR_SET_VOICEBROADCAST_CFG          3675	//ÉèÖÃÓïÒô²¥±¨¿ØÖÆ²ÎÊý
#define	NET_DVR_GET_PAPERPRINTFORMAT_CAPABILITIES	3676//»ñÈ¡Ö½Æ±´òÓ¡¸ñÊ½ÅäÖÃÄÜÁ¦
#define	NET_DVR_GET_PAPERPRINTFORMAT_CFG	    3677    //»ñÈ¡Ö½Æ±´òÓ¡¸ñÊ½²ÎÊýÅäÖÃ
#define	NET_DVR_SET_PAPERPRINTFORMAT_CFG	    3678    //ÉèÖÃÖ½Æ±´òÓ¡¸ñÊ½²ÎÊýÅäÖÃ
#define	NET_DVR_GET_LOCkGATE_CAPABILITIES   	3679	//»ñÈ¡ÖÇÄÜËøÕ¢ÅäÖÃÄÜÁ¦
#define	NET_DVR_GET_LOCKGATE_CFG            	3680    //»ñÈ¡ÖÇÄÜËøÕ¢²ÎÊýÅäÖÃ
#define	NET_DVR_SET_LOCKGATE_CFG	            3681    //ÉèÖÃÖÇÄÜËøÕ¢²ÎÊýÅäÖÃ
#define NET_DVR_GET_PARKING_DATASTATE		    3682    //»ñÈ¡Êý¾ÝÍ¬²½×´Ì¬
#define NET_DVR_SET_PARKING_DATASTATE           3683    //ÉèÖÃÊý¾ÝÍ¬²½×´Ì¬
#define    NET_DVR_GET_TME_CAPABILITIES            3684    //»ñÈ¡Í£³µ³¡³öÈë¿ÚÉè±¸ ÄÜÁ¦

#define    NET_DVR_GET_TMEVOICE_CAPABILITIES       3686    //»ñÈ¡ÓïÒôÅäÖÃÐÅÏ¢ÄÜÁ¦
#define    NET_DVR_SET_TMEVOICE_CFG                3687    //ÉèÖÃÓïÒô²ÎÊýÅäÖÃ
#define    NET_DVR_GET_TMEVOICE_CFG                3688    //»ñÈ¡ÓïÒô²ÎÊýÅäÖÃ

#define    NET_DVR_GET_POSITION                    3698    // »ñÈ¡·½Î»½ÃÕýÅäÖÃ²ÎÊý
#define    NET_DVR_SET_POSITION                    3699    // ÉèÖÃ·½Î»½ÃÕýÅäÖÃ²ÎÊý
#define    NET_DVR_GET_CENTRALIZEDCTRL_CAPABILITIES    3700//»ñÈ¡¼¯ÖÐ²¼¿ØÄÜÁ¦
#define    NET_DVR_GET_CENTRALIZEDCTRL                3701//»ñÈ¡¼¯ÖÐ²¼¿Ø²ÎÊýÅäÖÃ
#define    NET_DVR_SET_CENTRALIZEDCTRL              3702//ÉèÖÃ¼¯ÖÐ²¼¿Ø²ÎÊýÅäÖÃ
#define    NET_DVR_GET_COMPASS_CAPABILITIES        3703//»ñÈ¡µç×ÓÂÞÅÌÄÜÁ¦
#define    NET_DVR_GET_VANDALPROOFALARM              3704//»ñÈ¡·ÀÆÆ»µ±¨¾¯²ÎÊýÅäÖÃ
#define    NET_DVR_SET_VANDALPROOFALARM            3705//ÉèÖÃ·ÀÆÆ»µ±¨¾¯²ÎÊýÅäÖÃ
#define    NET_DVR_COMPASS_CALIBRATE_CTRL            3706//µç×ÓÂÞÅÌ½ÃÕý¿ØÖÆ½Ó¿Ú
#define    NET_DVR_COMPASS_NORTH_CTRL                3707//µç×ÓÂÞÅÌÖ¸ÏòÕý±±¿ØÖÆ½Ó¿Ú
#define    NET_DVR_GET_AZIMUTHINFO                    3708//»ñÈ¡·½Î»½Ç¶È²ÎÊýÅäÖÃ


#define    NET_DVR_GET_SATELLITETIME                3709//»ñÈ¡ÎÀÐÇ¶¨Î»²ÎÊýÅäÖÃ
#define    NET_DVR_SET_SATELLITETIME                3710//ÉèÖÃÎÀÐÇ¶¨Î»²ÎÊýÅäÖÃ
#define    NET_DVR_GET_GISINFO                     3711//»ñÈ¡µ±Ç°Çò»úµÄGISÐÅÏ¢Êý¾Ý
#define    NET_DVR_GET_STREAMING_CAPABILITIES        3712//»ñÈ¡ÊÓÆµÁ÷µÄÄÜÁ¦
#define    NET_DVR_GET_REFRESHFRAME_CAPABILITIES    3713//»ñÈ¡Ë¢ÐÂÖ¡µÄÄÜÁ¦
#define    NET_DVR_STREAMING_REFRESH_FRAME            3714//È¡Á÷Ô¤ÀÀµÄÇ¿ÖÆË¢ÐÂÖ¡
#define    NET_DVR_FACECAPTURE_STATISTICS            3715//³¤Á¬½ÓÈËÔ±Í³¼Æ
#define    NET_DVR_GET_WIRELESSSERVER_CAPABILITIES    3716    //»ñÈ¡ÈÈµã¹¦ÄÜÅäÖÃÐ­ÒéµÄÄÜÁ¦
#define    NET_DVR_GET_WIRELESSSERVER                3717    //»ñÈ¡ÈÈµã¹¦ÄÜÅäÖÃÐ­Òé
#define    NET_DVR_SET_WIRELESSSERVER                3718    //ÉèÖÃÈÈµã¹¦ÄÜÅäÖÃÐ­Òé
#define    NET_DVR_GET_CONNECT_LIST_CAPABILITIES    3719    //»ñÈ¡Á¬½ÓÉè±¸ÁÐ±íÐÅÏ¢µÄÄÜÁ¦
#define    NET_DVR_GET_THSCREEN_CAPABILITIES        3720 //»ñÈ¡ÎÂÊª¶ÈÅäÖÃÐ­ÒéµÄÄÜÁ¦
#define    NET_DVR_GET_THSCREEN                    3721 //»ñÈ¡ÎÂÊª¶ÈÅäÖÃÐ­Òé
#define    NET_DVR_GET_EXTERNALDEVICE_CAPABILITIES    3722//»ñÈ¡ÍâÉèÅäÖÃÐ­ÒéµÄÄÜÁ¦
#define    NET_DVR_GET_EXTERNALDEVICE              3723//»ñÈ¡ÍâÉèÅäÖÃÐ­Òé
#define    NET_DVR_SET_EXTERNALDEVICE                3724//ÉèÖÃÍâÉèÅäÖÃÐ­Òé
#define    NET_DVR_GET_LEDDISPLAYINFO_CAPABILITIES     3725   //»ñÈ¡LEDÏÔÊ¾ÐÅÏ¢µÄÄÜÁ¦
#define    NET_DVR_SET_LEDDISPLAYINFO                 3726   //ÉèÖÃLEDÏÔÊ¾ÐÅÏ¢
#define    NET_DVR_GET_SUPPLEMENTLIGHT_CAPABILITIES 3727   //»ñÈ¡ÄÚÖÃ²¹¹âµÆÅäÖÃÐ­ÒéµÄÄÜÁ¦ (Çò»úÖ§³Ö£¬Èí¼þÊµÏÖ£¬²¹¹âµÆÊÇÉè¼ÆÔÚÉè±¸ÄÚ²¿µÄ)
#define    NET_DVR_GET_SUPPLEMENTLIGHT                 3728    //»ñÈ¡ÄÚÖÃ²¹¹âµÆÅäÖÃÐ­Òé
#define    NET_DVR_SET_SUPPLEMENTLIGHT                 3729    //ÉèÖÃÄÚÖÃ²¹¹âµÆÅäÖÃÐ­Òé
#define    NET_DVR_SET_THSCREEN                     3730 //ÉèÖÃÎÂÊª¶ÈÅäÖÃÐ­Òé
#define    NET_DVR_GET_LOWPOWER_CAPABILITIES        3731   //»ñÈ¡µÍ¹¦ºÄÅäÖÃÐ­ÒéµÄÄÜÁ¦
#define    NET_DVR_GET_LOWPOWER                     3732    //»ñÈ¡µÍ¹¦ºÄÅäÖÃÐ­Òé
#define    NET_DVR_SET_LOWPOWER                     3733    //ÉèÖÃµÍ¹¦ºÄÅäÖÃÐ­Òé
#define    NET_DVR_GET_ZOOMLINKAGE_CAPABILITIES     3734   //»ñÈ¡±ä±¶Áª¶¯ÅäÖÃÐ­ÒéµÄÄÜÁ¦
#define    NET_DVR_GET_ZOOMLINKAGE                     3735    //»ñÈ¡±ä±¶Áª¶¯ÅäÖÃÐ­Òé
#define    NET_DVR_SET_ZOOMLINKAGE                     3736    //ÉèÖÃ±ä±¶Áª¶¯ÅäÖÃÐ­Òé
#define    NET_DVR_THSCREEN_TIMING                     3737    //ÎÂÊª¶È
#define NET_DVR_GET_OSD_BATTERY_POWER_CFG        3741        //»ñÈ¡OSDµç³ØµçÁ¿ÏÔÊ¾²ÎÊý
#define NET_DVR_SET_OSD_BATTERY_POWER_CFG        3742        //ÉèÖÃOSDµç³ØµçÁ¿ÏÔÊ¾²ÎÊý
#define    NET_DVR_GET_OSD_BATTERY_POWER_CFG_CAPABILITIES    3743//OSDµç³ØµçÁ¿ÏÔÊ¾²ÎÊýµÄÄÜÁ¦
#define    NET_DVR_GET_VANDALPROOFALARM_TRIGGER    3744    //»ñÈ¡·ÀÆÆ»µ±¨¾¯Áª¶¯ÅäÖÃ
#define    NET_DVR_SET_VANDALPROOFALARM_TRIGGER    3745    //ÉèÖÃ·ÀÆÆ»µ±¨¾¯Áª¶¯ÅäÖÃ
#define    NET_DVR_GET_PANORAMAIMAGE_CAPABILITIES    3746    //»ñÈ¡È«¾°Í¼ÏñµÄÄÜÁ¦
#define    NET_DVR_GET_PANORAMAIMAGE                3747    //»ñÈ¡È«¾°Í¼Ïñ²ÎÊýµÄÐ­Òé
#define    NET_DVR_SET_PANORAMAIMAGE                3748    //ÉèÖÃÈ«¾°Í¼Ïñ²ÎÊýµÄÐ­Òé
#define    NET_DVR_GET_STREAMENCRYPTION            3749    //»ñÈ¡ÂëÁ÷¼ÓÃÜÅäÖÃ
#define    NET_DVR_SET_STREAMENCRYPTION            3750    //ÉèÖÃÂëÁ÷¼ÓÃÜÅäÖÃ
#define    NET_DVR_GET_STREAMENCRYPTION_CAPABILITIES 3751  //»ñÈ¡ÂëÁ÷¼ÓÃÜÄÜÁ¦
#define    NET_DVR_GET_REVISE_GPS_CAPABILITIES     3752    //»ñÈ¡Ð£×¼GPS¾­Î³¶ÈÄÜÁ¦
#define    NET_DVR_GET_REVISE_GPS                  3753    //»ñÈ¡Ð£×¼GPS¾­Î³¶ÈÄÜÁ¦
#define    NET_DVR_SET_REVISE_GPS                  3754    //ÉèÖÃÐ£×¼GPS¾­Î³¶ÈÄÜÁ¦
#define NET_DVR_GET_PDC_RECOMMEND                3755    //»ñÈ¡¿ÍÁ÷Í³¼Æ±íÊ¾ÍÆ¼öÖµ
#define NET_DVR_REMOVE_FLASHSTORAGE                3756    //¿ÍÁ÷Êý¾ÝÇå³ý²Ù×÷
#define    NET_DVR_GET_COUNTING_CAPABILITIES        3757    //»ñÈ¡¿ÍÁ÷Á¿Í³¼ÆÄÜÁ¦
#define    NET_DVR_SET_SENSOR_ADJUSTMENT            3758    //ÉèÖÃSensor µ÷½Ú²ÎÊýµÄÐ­Òé
#define    NET_DVR_GET_SENSOR_ADJUSTMENT_CAPABILITIES        3759    //»ñÈ¡Sensor µ÷½Ú²ÎÊýµÄÐ­ÒéµÄÄÜÁ¦
#define    NET_DVR_GET_WIRELESSSERVER_FULLVERSION_CFG         3760    //»ñÈ¡wifiÈÈµã²ÎÊýÅäÖÃ(ÍêÕû°æ)
#define    NET_DVR_SET_WIRELESSSERVER_FULLVERSION_CFG         3761    //ÉèÖÃwifiÈÈµã²ÎÊýÅäÖÃ(ÍêÕû°æ)
#define    NET_DVR_GET_ONLINEUSER_INFO                3762    //³¤Á¬½Ó»ñÈ¡ÓÃ»§ÔÚÏßÐÅÏ¢
#define    NET_DVR_GET_SENSOR_ADJUSTMENT_INFO        3763    //»ñÈ¡Ö¸¶¨sensorµ÷½Ú²ÎÊý
#define NET_DVR_SENSOR_RESET_CTRL               3764    //Sensor µ÷½Ú¸´Î»

#define    NET_DVR_GET_POSTRADAR_CAPABILITIES        3765    //»ñÈ¡À×´ï²âËÙÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_POSTRADARSPEED_CFG          3766    //»ñÈ¡À×´ï²âËÙÅäÖÃ
#define    NET_DVR_SET_POSTRADARSPEED_CFG          3767    //ÉèÖÃÀ×´ï²âËÙÅäÖÃ
#define    NET_DVR_GET_POSTRADARSPEED_RECOM_CFG    3768    //»ñÈ¡À×´ï²âËÙÍÆ¼öÖµ
#define    NET_DVR_GET_POSTRADARPARAM_CFG          3769    //»ñÈ¡À×´ï²ÎÊýÅäÖÃ
#define    NET_DVR_SET_POSTRADARPARAM_CFG          3770    //ÉèÖÃÀ×´ï²ÎÊýÅäÖÃ
#define    NET_DVR_GET_POSTRADARPARAM_RECOM_CFG    3771    //»ñÈ¡À×´ï²ÎÊýÍÆ¼öÖµ

#define NET_DVR_GET_ENCRYPT_DEVICE_INFO        3772   //»ñÈ¡¼ÓÃÜÉè±¸ÐÅÏ¢
#define NET_DVR_GET_ANR_ARMING_HOST            3773  //»ñÈ¡¶ÏÍøÐø´«µÄÖ÷»úÐÅÏ¢

/********************************IPC»ùÏßFF³µÅÆ****************************/
#define    NET_DVR_GET_FTP_CAPABILITIES            3782    //»ñÈ¡ftpÄÜÁ¦
#define    NET_DVR_GET_FTPUPLOAD_CFG                3783    //»ñÈ¡ftpÉÏ´«ÐÅÏ¢¹æÕû²ÎÊý
#define    NET_DVR_SET_FTPUPLOAD_CFG                3784    //ÉèÖÃftpÉÏ´«ÐÅÏ¢¹æÕû²ÎÊý

#define    NET_DVR_GET_DDNS_COUNTRY_ABILITY        3800//»ñÈ¡Éè±¸Ö§³ÖµÄDDNS¹ú¼ÒÄÜÁ¦ÁÐ±í

#define NET_DVR_GET_SMARTCALIBRATION_CAPABILITIES    3900// SmartÐÐÎª±ê¶¨¹ýÂË³ß´ç¹¦ÄÜÄÜÁ¦
#define NET_DVR_GET_TEMPERATURE_TRIGGER         3903    //»ñÈ¡²âÎÂ²îÁª¶¯ÅäÖÃ 
#define NET_DVR_SET_TEMPERATURE_TRIGGER         3904    //ÉèÖÃ²âÎÂ²îÁª¶¯ÅäÖÃ 

#define	NET_DVR_GET_SMARTCALIBRATION_CFG 	3910	//»ñÈ¡SmartÐÐÎª±ê¶¨¹ýÂË³ß´ç¹¦ÄÜ
#define	NET_DVR_SET_SMARTCALIBRATION_CFG   	3911	 //ÉèÖÃSmartÐÐÎª±ê¶¨¹ýÂË³ß´ç¹¦ÄÜ

/********************************ÖÇÄÜÈËÁ³Ê¶±ð****************************/
#define NET_DVR_GET_FACESNAPCFG                 5001  //»ñÈ¡ÈËÁ³×¥ÅÄ²ÎÊý
#define NET_DVR_SET_FACESNAPCFG                 5002  //ÉèÖÃÈËÁ³×¥ÅÄ²ÎÊý
#define NET_DVR_GET_DEVACCESS_CFG               5005  //»ñÈ¡½ÓÈëÉè±¸²ÎÊý
#define NET_DVR_SET_DEVACCESS_CFG               5006  //ÉèÖÃ½ÓÈëÉè±¸²ÎÊý
#define NET_DVR_GET_SAVE_PATH_CFG               5007  //»ñÈ¡´æ´¢ÐÅÏ¢²ÎÊý
#define NET_DVR_SET_SAVE_PATH_CFG               5008  //ÉèÖÃ´æ´¢ÐÅÏ¢²ÎÊý
#define NET_VCA_GET_RULECFG_V41                    5011  //»ñÈ¡ÐÐÎª·ÖÎö²ÎÊý(À©Õ¹)
#define NET_VCA_SET_RULECFG_V41                    5012  //ÉèÖÃÐÐÎª·ÖÎö²ÎÊý(À©Õ¹)
#define NET_DVR_GET_AID_RULECFG_V41             5013  //»ñÈ¡½»Í¨ÊÂ¼þ¹æÔò²ÎÊý
#define NET_DVR_SET_AID_RULECFG_V41             5014  //ÉèÖÃ½»Í¨ÊÂ¼þ¹æÔò²ÎÊý
#define NET_DVR_GET_TPS_RULECFG_V41             5015  //»ñÈ¡½»Í¨Í³¼Æ¹æÔò²ÎÊý(À©Õ¹)
#define NET_DVR_SET_TPS_RULECFG_V41             5016  //ÉèÖÃ½»Í¨Í³¼Æ¹æÔò²ÎÊý(À©Õ¹)
#define NET_VCA_GET_FACEDETECT_RULECFG_V41      5017  //»ñÈ¡ATMÈËÁ³¼ì²â¹æÔò(À©Õ¹) 
#define NET_VCA_SET_FACEDETECT_RULECFG_V41      5018  //ÉèÖÃATMÈËÁ³¼ì²â¹æÔò(À©Õ¹)
#define NET_DVR_GET_PDC_RULECFG_V41             5019  //ÉèÖÃÈËÁ÷Á¿Í³¼Æ¹æÔò(À©Õ¹)
#define NET_DVR_SET_PDC_RULECFG_V41             5020  //»ñÈ¡ÈËÁ÷Á¿Í³¼Æ¹æÔò(À©Õ¹)
#define NET_DVR_GET_TRIAL_VERSION_CFG           5021  //»ñÈ¡ÊÔÓÃ°æÐÅÏ¢
#define NET_DVR_GET_VCA_CTRLINFO_CFG            5022  //ÅúÁ¿»ñÈ¡ÖÇÄÜ¿ØÖÆ²ÎÊý
#define NET_DVR_SET_VCA_CTRLINFO_CFG            5023  //ÅúÁ¿ÉèÖÃÖÇÄÜ¿ØÖÆ²ÎÊý
#define NET_DVR_SYN_CHANNEL_NAME                5024  //Í¬²½Í¨µÀÃû
#define NET_DVR_GET_RESET_COUNTER               5025  //»ñÈ¡Í³¼ÆÊý¾ÝÇåÁã²ÎÊý£¨ÈËÁ÷Á¿¡¢½»Í¨Í³¼Æ£©
#define NET_DVR_SET_RESET_COUNTER               5026  //ÉèÖÃÍ³¼ÆÊý¾ÝÇåÁã²ÎÊý£¨ÈËÁ÷Á¿¡¢½»Í¨Í³¼Æ£©
#define NET_DVR_GET_OBJECT_COLOR                5027  //»ñÈ¡ÎïÌåÑÕÉ«ÊôÐÔ
#define NET_DVR_SET_OBJECT_COLOR                5028  //ÉèÖÃÎïÌåÑÕÉ«ÊôÐÔ
#define NET_DVR_GET_AUX_AREA                    5029  //»ñÈ¡¸¨ÖúÇøÓò
#define NET_DVR_SET_AUX_AREA                    5030  //ÉèÖÃ¸¨ÖúÇøÓò
#define NET_DVR_GET_CHAN_WORKMODE               5031  //»ñÈ¡Í¨µÀ¹¤×÷Ä£Ê½
#define NET_DVR_SET_CHAN_WORKMODE               5032  //ÉèÖÃÍ¨µÀ¹¤×÷Ä£Ê½
#define NET_DVR_GET_SLAVE_CHANNEL               5033  //»ñÈ¡´ÓÍ¨µÀ²ÎÊý
#define NET_DVR_SET_SLAVE_CHANNEL               5034  //ÉèÖÃ´ÓÍ¨µÀ²ÎÊý
#define NET_DVR_GET_VQD_EVENT_RULE              5035  //»ñÈ¡ÊÓÆµÖÊÁ¿Õï¶ÏÊÂ¼þ¹æÔò
#define NET_DVR_SET_VQD_EVENT_RULE              5036  //ÉèÖÃÊÓÆµÖÊÁ¿Õï¶ÏÊÂ¼þ¹æÔò
#define NET_DVR_GET_BASELINE_SCENE              5037  //»ñÈ¡»ù×¼³¡¾°²ÎÊý
#define NET_DVR_SET_BASELINE_SCENE              5038  //ÉèÖÃ»ù×¼³¡¾°²ÎÊý
#define NET_DVR_CONTROL_BASELINE_SCENE          5039  //»ù×¼³¡¾°²Ù×÷
#define NET_DVR_SET_VCA_DETION_CFG                5040  //ÉèÖÃÖÇÄÜÒÆ¶¯²ÎÊýÅäÖÃ
#define NET_DVR_GET_VCA_DETION_CFG                5041  //»ñÈ¡ÖÇÄÜÒÆ¶¯²ÎÊýÅäÖÃ
#define NET_DVR_GET_STREAM_ATTACHINFO_CFG       5042  //»ñÈ¡ÂëÁ÷¸½¼ÓÐÅÏ¢ÅäÖÃ
#define NET_DVR_SET_STREAM_ATTACHINFO_CFG       5043  //ÉèÖÃÂëÁ÷¸½¼ÓÐÅÏ¢ÅäÖÃ

#define NET_DVR_GET_BV_CALIB_TYPE               5044  //»ñÈ¡Ë«Ä¿±ê¶¨ÀàÐÍ
#define NET_DVR_CONTROL_BV_SAMPLE_CALIB         5045  //Ë«Ä¿Ñù±¾±ê¶¨
#define NET_DVR_GET_BV_SAMPLE_CALIB_CFG         5046  //»ñÈ¡Ë«Ä¿±ê¶¨²ÎÊý
#define NET_DVR_GET_RULECFG_V42                    5049  //»ñÈ¡ÐÐÎª·ÖÎö²ÎÊý(Ö§³Ö16Ìõ¹æÔòÀ©Õ¹)
#define NET_DVR_SET_RULECFG_V42                    5050  //ÉèÖÃÐÐÎª·ÖÎö²ÎÊý(Ö§³Ö16Ìõ¹æÔòÀ©Õ¹)
#define NET_DVR_SET_VCA_DETION_CFG_V40            5051  //ÉèÖÃÖÇÄÜÒÆ¶¯²ÎÊýÅäÖÃ
#define NET_DVR_GET_VCA_DETION_CFG_V40          5052  //»ñÈ¡ÖÇÄÜÒÆ¶¯²ÎÊýÅäÖÃ
#define NET_DVR_SET_FLASH_CFG                   5110  //Ð´ÈëÊý¾Ýµ½Flash ²âÊÔÊ¹ÓÃ
/********************************ÖÇÄÜÈËÁ³Ê¶±ð end****************************/

//2014-12-03  
#define    NET_DVR_GET_T1TEST_CFG   5053     //²úÏß²âÊÔÅäÖÃ½Ó¿Ú£¨»ñÈ¡£©
#define    NET_DVR_SET_T1TEST_CFG   5054     ////²úÏß²âÊÔÅäÖÃ½Ó¿Ú£¨ÉèÖÃ£©

/********************************ITS****************************/
#define NET_ITS_GET_OVERLAP_CFG_V50                5055  //»ñÈ¡×Ö·ûµþ¼Ó²ÎÊýÅäÖÃÀ©Õ¹
#define NET_ITS_SET_OVERLAP_CFG_V50                5056  //ÉèÖÃ×Ö·ûµþ¼Ó²ÎÊýÅäÖÃÀ©Õ¹

#define NET_DVR_GET_PARKLAMP_STATE                5057  //»ñÈ¡Í£³µ³¡ÐÅºÅµÆ×´Ì¬ÐÅÏ¢
#define NET_DVR_GET_CLOUDSTORAGE_CFG            5058  //»ñÈ¡ÔÆ´æ´¢ÅäÖÃ²ÎÊý
#define NET_DVR_SET_CLOUDSTORAGE_CFG            5059  //ÉèÖÃÔÆ´æ´¢ÅäÖÃ²ÎÊý

#define NET_ITS_GET_BASE_INFO                    5060  //»ñÈ¡ÖÕ¶Ë»ù±¾ÐÅÏ¢
#define NET_DVR_GET_SENSOR_INFO                 5061  //´«¸ÐÆ÷ÐÅÏ¢²éÑ¯
#define    NET_DVR_SET_SENSOR_SWITCH                5062  //´«¸ÐÆ÷Ô¶³Ì¿ØÖÆ
#define NET_ITS_GET_IMGMERGE_CFG                5063  //»ñÈ¡Í¼Æ¬ºÏ³ÉÅäÖÃ²ÎÊý
#define NET_ITS_SET_IMGMERGE_CFG                5064  //ÉèÖÃÍ¼Æ¬ºÏ³ÉÅäÖÃ²ÎÊý
#define NET_ITS_GET_UPLOAD_CFG                    5065  //»ñÈ¡Êý¾ÝÉÏ´«ÅäÖÃ
#define NET_ITS_SET_UPLOAD_CFG                    5066  //ÉèÖÃÊý¾ÝÉÏ´«ÅäÖÃ
#define    NET_DVR_GET_SENSOR_PORT_CAPABILITIES    5067  //»ñÈ¡´«¸ÐÆ÷ÄÜÁ¦
#define NET_ITS_GET_WORKSTATE                    5069  //»ñÈ¡ÖÕ¶Ë¹¤×÷×´Ì¬
#define NET_ITS_GET_IPC_CHAN_CFG                5070  //»ñÈ¡Í¨µÀIPCÐÅÏ¢
#define NET_ITS_SET_IPC_CHAN_CFG                5071  //ÉèÖÃÍ¨µÀIPCÐÅÏ¢
#define NET_ITS_GET_OVERLAP_CFG                    5072  //»ñÈ¡×Ö·ûµþ¼Ó²ÎÊýÅäÖÃ
#define NET_ITS_SET_OVERLAP_CFG                    5073  //ÉèÖÃ×Ö·ûµþ¼Ó²ÎÊýÅäÖÃ
#define NET_DVR_GET_TRIGGEREX_CFG               5074  //»ñÈ¡ITCÀ©Õ¹ÅäÖÃ
#define NET_DVR_SET_TRIGGEREX_CFG               5075  //ÉèÖÃITCÀ©Õ¹ÅäÖÃ
#define NET_ITS_GET_ROAD_INFO                    5076  //»ñÈ¡Â·¿ÚÐÅÏ¢

#define NET_ITS_REMOTE_DEVICE_CONTROL            5077//ÉèÖÃÔ¶³ÌÉè±¸¿ØÖÆ
#define NET_ITS_GET_GATEIPC_CHAN_CFG            5078//»ñÈ¡³öÈë¿Ú²ÎÊý
#define NET_ITS_SET_GATEIPC_CHAN_CFG            5079//ÉèÖÃ³öÈë¿Ú²ÎÊý
#define NET_ITS_TRANSCHAN_START                    5080//Í¬²½Êý¾Ý·þÎñÆ÷½¨Á¢Á¬½Ó
#define NET_ITS_GET_ECTWORKSTATE                5081//»ñÈ¡³öÈë¿ÚÖÕ¶Ë¹¤×÷×´Ì¬
#define NET_ITS_GET_ECT_CHAN_INFO                5082//»ñÈ¡³öÈë¿ÚÖÕ¶ËÍ¨µÀ×´Ì¬
#define NET_DVR_GET_HEATMAP_RESULT              5083//ÈÈ¶ÈÍ¼Êý¾Ý²éÕÒ
#define NET_DVR_SET_ITS_EXDEVCFG                5084 //ÉèÖÃITSÍâ½ÓÉè±¸ÐÅÏ¢
#define NET_DVR_GET_ITS_EXDEVCFG                5085 //»ñÈ¡ITSÍâ½ÓÉè±¸ÐÅÏ¢
#define NET_DVR_GET_ITS_EXDEVSTATUS                5086 //»ñÈ¡ITSËùÓÐÍâ½ÓÉè±¸ÐÅÏ¢
#define NET_DVR_SET_ITS_ENDEVCMD                5087 //ÉèÖÃITSÖÕ¶Ë³öÈë¿Ú¿ØÖÆÃüÁî
#define NET_DVR_SET_ENISSUED_DATADEL            5088 //ÉèÖÃITSÖÕ¶Ë³öÈë¿Ú¿ØÖÆÇå³ý
#define NET_DVR_GET_PDC_RESULT                  5089//¿ÍÁ÷Á¿Êý¾Ý²éÑ¯ 2014-03-21
#define NET_ITS_GET_LAMP_CTRLCFG                5090  //»ñÈ¡ÄÚÍâÖÃµÆ²ÎÊý
#define NET_ITS_SET_LAMP_CTRLCFG                5091  //ÉèÖÃÄÚÍâÖÃµÆ²ÎÊý
#define NET_ITS_GET_PARKSPACE_ATTRIBUTE_CFG     5092  //»ñÈ¡ÌØÊâ³µÎ»²ÎÊý
#define NET_ITS_SET_PARKSPACE_ATTRIBUTE_CFG     5093  //ÉèÖÃÌØÊâ³µÎ»²ÎÊý
#define NET_ITS_SET_LAMP_EXTERNAL_CFG            5095  //ÉèÖÃÍâ¿ØÅäÖÃ²ÎÊý
#define NET_ITS_SET_COMPEL_CAPTURE                5096  //ÉèÖÃ³µÎ»Ç¿ÖÆ×¥Í¼
#define NET_DVR_SET_TIMESIGN_CFG                5097  //ÉèÖÃÀ©Õ¹Ð£Ê±×Ô¶¨Òå±ê¼Ç
#define NET_DVR_GET_TIMESIGN_CFG                5098  //»ñÈ¡À©Õ¹Ð£Ê±×Ô¶¨Òå±ê¼Ç
#define NET_DVR_GET_SIGNALLAMP_STATUS           5099  //ÐÅºÅµÆ¼ì²â
/********************************ITS end****************************/

#define NET_DVR_GET_MONITOR_PLAN_VQD            5100  //³¤Á¬½Ó»ñÈ¡Õï¶Ï·þÎñÆ÷¼Æ»®
#define NET_DVR_GET_MONITORID_VQD               5101  //³¤Á¬½Ó»ñÈ¡¶ÔÓ¦¼Æ»®ÄÚµÄ¼à¿ØµãÐÅÏ¢
#define NET_DVR_SET_MONITOR_INFO                5102  //ÅúÁ¿ÉèÖÃ¼Æ»®ÄÚµÄ¼à¿ØµãÐÅÏ¢ 
#define NET_DVR_DEL_MONITOR_PLAN_VQD            5103  //É¾³ý¼Æ»®
#define NET_DVR_GET_MONITOR_VQD_STATUS          5104  //Æ½Ì¨²éÑ¯Õï¶Ï·þÎñÆ÷µÄ×´Ì¬
#define NET_DVR_GET_RECORD_INFO                 5105  //»ñÈ¡×ÊÔ´Í¼Æ¬²éÑ¯
#define NET_DVR_GET_MONITOR_VQDCFG              5106  //»ñÈ¡·þÎñÆ÷µÄ¼à¿ØµãÐÅÏ¢
#define NET_DVR_SET_MONITOR_VQDCFG              5107  //ÉèÖÃ·þÎñÆ÷µÄ¼à¿ØµãÐÅÏ¢
#define NET_DVR_SET_MONITOR_PLAN_VQDCFG         5108  //ÉèÖÃ¹ÜÀí¼Æ»®(µ¥¶ÀµÄ¼Æ»®)

#define NET_DVR_SCENE_CHANGE_UPDATE                5109   //³¡¾°±ä¸üÊý¾Ý¸üÐÂ

#define NET_DVR_GET_CALIBRATE_POINT             5153  //¹éÒ»»¯×ø±ê×ª»»£¨Ç¹ÇòÁª¶¯Éè±¸ Íâ²¿½»»¥ÃüÁîÂë »ùÏß´úÂë²»ÊµÏÖ£¬·ÀÖ¹³åÍ»£¬Ìá½»»ùÏß£©/*************************ÖÇÄÜ¶à³¡¾°********************************/
#define NET_DVR_GET_SCENE_CFG                   5201  //»ñÈ¡³¡¾°ÐÅÏ¢
#define NET_DVR_SET_SCENE_CFG                   5202  //ÉèÖÃ³¡¾°ÐÅÏ¢
#define NET_DVR_GET_SCENE_REFERENCE_REGION      5203  //»ñÈ¡²Î¿¼ÇøÓò
#define NET_DVR_SET_SCENE_REFERENCE_REGION      5204  //ÉèÖÃ²Î¿¼ÇøÓò
#define NET_DVR_GET_SCENE_CALIBRATION           5205  //»ñÈ¡±ê¶¨ÐÅÏ¢
#define NET_DVR_SET_SCENE_CALIBRATION           5206  //ÉèÖÃ±ê¶¨ÐÅÏ¢
#define NET_DVR_GET_SCENE_MASK_REGION           5207  //»ñÈ¡ÆÁ±ÎÇøÓò
#define NET_DVR_SET_SCENE_MASK_REGION           5208  //ÉèÖÃÆÁ±ÎÇøÓò
#define    NET_DVR_GET_SCENE_LANECFG                5209  //»ñÈ¡³µµÀ¹æÔò
#define NET_DVR_SET_SCENE_LANECFG                5210  //ÉèÖÃ³µµÀ¹æÔò
#define NET_DVR_GET_SCENE_AID_RULECFG           5211  //»ñÈ¡½»Í¨ÊÂ¼þ¹æÔò²ÎÊý
#define NET_DVR_SET_SCENE_AID_RULECFG           5212  //ÉèÖÃ½»Í¨ÊÂ¼þ¹æÔò²ÎÊý
#define NET_DVR_GET_SCENE_TPS_RULECFG           5213  //»ñÈ¡½»Í¨Í³¼Æ¹æÔò²ÎÊý
#define NET_DVR_SET_SCENE_TPS_RULECFG           5214  //ÉèÖÃ½»Í¨Í³¼Æ¹æÔò²ÎÊý
#define NET_DVR_GET_SCENE_TIME_CFG              5215  //»ñÈ¡Í¨µÀµÄ³¡¾°Ê±¼ä¶ÎÅäÖÃ
#define NET_DVR_SET_SCENE_TIME_CFG              5216  //ÉèÖÃÍ¨µÀµÄ³¡¾°Ê±¼ä¶ÎÅäÖÃ
#define NET_DVR_GET_FORENSICS_MODE              5217  //»ñÈ¡È¡Ö¤·½Ê½²ÎÊý
#define NET_DVR_SET_FORENSICS_MODE              5218  //ÉèÖÃÈ¡Ö¤·½Ê½²ÎÊý
#define NET_DVR_FORCESTOP_FORENSICS_CTRL        5219  //Ç¿ÖÆÍ£Ö¹È¡Ö¤
#define NET_DVR_GET_ALARM_PROCESS_CFG           5220   //»ñÈ¡±¨¾¯´¦Àí²ÎÊý
#define NET_DVR_SET_ALARM_PROCESS_CFG           5221   //ÉèÖÃ±¨¾¯´¦Àí²ÎÊý
#define NET_DVR_GET_BLACKLIST_ALARM_INFO        5222   //»ñÈ¡ºÚ°×Ãûµ¥±¨¾¯¹ì¼£
#define NET_DVR_GET_STORAGE_RESOURCE_CFG        5225   //»ñÈ¡´æ´¢×ÊÔ´²ÎÊý
#define NET_DVR_SET_STORAGE_RESOURCE_CFG        5226   //ÉèÖÃ´æ´¢×ÊÔ´²ÎÊý
#define NET_DVR_DEL_BLACKLIST_ALARM_RECORD        5227   //Ô¶³ÌÉ¾³ýÃûµ¥±¨¾¯¼ÇÂ¼
#define NET_DVR_SET_BLACKLIST_GROUP_INFO        5229   //Ô¶³Ì·Ö×éÁÐ±í²ÎÊýÅäÖÃ
#define NET_DVR_DEL_BLACKLIST_GROUP_INFO        5230   //Ô¶³ÌÉ¾³ý·Ö×éÁÐ±í
#define NET_DVR_GET_BLACKLIST_GROUP_INFO        5231   //Ô¶³Ì»ñÈ¡È«²¿·Ö×éÁÐ±í
#define NET_DVR_SET_BLACKLIST_GROUP_RECORD_CFG    5232   //·Ö×é¼ÇÂ¼²ÎÊýÅäÖÃ
#define NET_DVR_GET_BLACKLIST_GROUP_RECORD_CFG    5234   //Ô¶³Ì»ñÈ¡·Ö×é¼ÇÂ¼²ÎÊý
#define NET_DVR_DEL_BLACKLIST_GROUP_RECORD_CFG    5235   //Ô¶³ÌÉ¾³ý·Ö×é¼ÇÂ¼²ÎÊý
#define    NET_DVR_GET_AREA_MONITOR_CFG            5236   //»ñÈ¡ÇøÓò¼à¿Øµã²ÎÊý
#define    NET_DVR_SET_AREA_MONITOR_CFG            5237   //ÉèÖÃÇøÓò¼à¿Øµã²ÎÊý
#define    NET_DVR_DEL_AREA_MONITOR_CFG            5238   //É¾³ýÇøÓò¼à¿Øµã
#define NET_DVR_RETRIEVAL_SNAP_RECORD            5240   //×¥ÅÄ¿â¼ìË÷
#define NET_DVR_GET_ALARMLIST                    5241   //»ñÈ¡Ãûµ¥±¨¾¯ÁÐ±í
#define NET_DVR_DETECT_IMAGE                    5242   //µ¥ÕÅÍ¼Æ¬¼ì²â
#define NET_DVR_GET_SNAP_RECORD                 5243   //»ñÈ¡×¥ÅÄ¼ÇÂ¼
#define NET_DVR_DEL_SNAP_RECORD                 5244   //É¾³ý×¥ÅÄ¼ÇÂ¼
#define NET_DVR_GET_FACE_RECORD                 5245   //Ô¶³Ì»ñÈ¡ÈËÁ³¼ÇÂ¼ÁÐ±í
#define NET_DVR_SET_FACE_RECORD                    5246   //Ìí¼ÓÈËÁ³¼ÇÂ¼
#define NET_DVR_DEL_FACE_RECORD                    5247   //É¾³ýÈËÁ³¼ÇÂ¼
#define NET_DVR_GET_FACE_DATABASE                5248   //»ñÈ¡ÈËÁ³¿âÅäÖÃ²ÎÊý
#define NET_DVR_SET_FACE_DATABASE                5249   //ÉèÖÃÈËÁ³¿âÅäÖÃ²ÎÊý
#define NET_DVR_DEL_FACE_DATABASE                5250   //É¾³ýÈËÁ³¿â
#define NET_DVR_RETRIEVAL_FACE_DATABASE            5251   //ÈËÁ³¿â¼ìË÷
#define NET_DVR_SET_BLACKLIST_REL_DEV_CFG        5252   //Éè±¸¹ØÁªÃûµ¥·Ö×é¹ØÁª
#define NET_DVR_DEL_BLACKLIST_REL_DEV            5253   //É¾³ý Éè±¸¹ØÁªÃûµ¥·Ö×éÐÅÏ¢
/*************************ÖÇÄÜ¶à³¡¾°end*****************************/

#define NET_DVR_GET_DISK_RAID_INFO              6001  //»ñÈ¡´ÅÅÌRaidÐÅÏ¢
#define NET_DVR_SET_DISK_RAID_INFO              6002  //ÉèÖÃ´ÅÅÌRaidÐÅÏ¢

#define NET_DVR_GET_DVR_SYNCHRONOUS_IPC         6005  //»ñÈ¡£ºÊÇ·ñÎªÇ°¶ËIPCÍ¬²½Éè±¸²ÎÊý
#define NET_DVR_SET_DVR_SYNCHRONOUS_IPC         6006  //ÉèÖÃ£ºÊÇ·ñÎªÇ°¶ËIPCÍ¬²½Éè±¸²ÎÊý

#define NET_DVR_SET_DVR_IPC_PASSWD              6008  //ÉèÖÃ£ºIPCÓÃ»§ÃûÃÜÂë
#define NET_DVR_GET_DEVICE_NET_USING_INFO       6009  //»ñÈ¡£ºµ±Ç°Éè±¸ÍøÂç×ÊÔ´Ê¹ÓÃÇé¿ö

#define NET_DVR_SET_DVR_IPC_NET                 6012  //ÉèÖÃ£ºÉèÖÃÇ°¶ËIPCµÄÍøÂçµØÖ·

#define NET_DVR_GET_RECORD_CHANNEL_INFO         6013  //»ñÈ¡£ºÂ¼ÏñÍ¨µÀÐÅÏ¢
#define NET_DVR_SET_RECORD_CHANNEL_INFO         6014  //ÉèÖÃ£ºÂ¼ÏñÍ¨µÀÐÅÏ¢


#define NET_DVR_MOUNT_DISK                        6015     // ¼ÓÔØ´ÅÅÌ
#define NET_DVR_UNMOUNT_DISK                    6016     // Ð¶ÔØ´ÅÅÌ

// CVR 
#define NET_DVR_GET_STREAM_SRC_INFO                6017  //»ñÈ¡£ºÁ÷À´Ô´ÐÅÏ¢
#define NET_DVR_SET_STREAM_SRC_INFO                6018  //ÉèÖÃ£ºÁ÷À´Ô´ÐÅÏ¢
#define NET_DVR_GET_STREAM_RECORD_INFO            6019  //»ñÈ¡£ºÁ÷Â¼ÏñÐÅÏ¢
#define NET_DVR_SET_STREAM_RECORD_INFO            6020  //ÉèÖÃ£ºÁ÷Â¼ÏñÐÅÏ¢
#define NET_DVR_GET_STREAM_RECORD_STATUS        6021  //»ñÈ¡£ºÁ÷Â¼Ïñ×´Ì¬
#define NET_DVR_SET_STREAM_RECORD_STATUS        6022  //ÉèÖÃ£ºÁ÷Â¼Ïñ×´Ì¬
#define NET_DVR_GET_STREAM_INFO                    6023  //»ñÈ¡ÒÑÌí¼ÓµÄÁ÷IDÐÅÏ¢
#define NET_DVR_GET_STREAM_SRC_INFO_V40            6024  //»ñÈ¡£ºÁ÷À´Ô´ÐÅÏ¢
#define NET_DVR_SET_STREAM_SRC_INFO_V40          6025  //ÉèÖÃ£ºÁ÷À´Ô´ÐÅÏ¢
#define NET_DVR_GET_RELOCATE_INFO               6026  //»ñÈ¡N+0Ä£Ê½ÏÂÖØ¶¨ÏòÐÅÏ¢
#define NET_DVR_START_GOP_INFO_PASSBACK         6032  //ÖÇÄÜÐÅÏ¢»ØÌî
#define NET_DVR_GET_CHANS_RECORD_STATUS_CFG     6035    //»ñÈ¡Í¨µÀÂ¼Ïñ×´Ì¬ÐÅÏ¢
#define NET_DVR_SET_CHANS_RECORD_STATUS_CFG     6036    //ÉèÖÃÍ¨µÀÂ¼Ïñ×´Ì¬ÐÅÏ¢
//NVR£º96xx
#define NET_DVR_GET_IP_ALARM_GROUP_NUM          6100  //»ñÈ¡£ºIPÍ¨µÀ±¨¾¯ÊäÈëÊä³ö×éÊý
#define NET_DVR_GET_IP_ALARM_IN                 6101  //»ñÈ¡£ºIPÍ¨µÀ±¨¾¯ÊäÈëÐÅÏ¢
#define NET_DVR_GET_IP_ALARM_OUT                6102  //»ñÈ¡£ºIPÍ¨µÀ±¨¾¯Êä³öÐÅÏ¢

//9000 v2.2
#define NET_DVR_GET_FTPCFG_SECOND                6103      //»ñÈ¡Í¼Æ¬ÉÏ´«FTP²ÎÊý
#define NET_DVR_SET_FTPCFG_SECOND                6104      //ÉèÖÃÍ¼Æ¬ÉÏ´«FTP²ÎÊý

#define NET_DVR_GET_DEFAULT_VIDEO_EFFECT        6105       // »ñÈ¡ÊÓÆµÊäÈëÐ§¹û²ÎÊýÄ¬ÈÏÖµ
#define NET_DVR_SET_VIDEO_EFFECT                6106       // ÉèÖÃÍ¨µÀÊÓÆµÊäÈëÍ¼Ïñ²ÎÊý
#define NET_DVR_DEL_INVALID_DISK                6107       // É¾³ýÎÞÐ§´ÅÅÌ

#define NET_DVR_GET_DRAWFRAME_DISK_QUOTA_CFG    6109    //»ñÈ¡³éÖ¡Í¨µÀ´ÅÅÌÅä¶î
#define NET_DVR_SET_DRAWFRAME_DISK_QUOTA_CFG    6110    //ÉèÖÃ³éÖ¡Í¨µÀ´ÅÅÌÅä¶î

#define NET_DVR_GET_NAT_CFG                     6111     //»ñÈ¡NATÓ³Éä²ÎÊý
#define NET_DVR_SET_NAT_CFG                     6112     //ÉèÖÃNATÓ³Éä²ÎÊý  
#define NET_DVR_GET_AES_KEY                     6113     //»ñÈ¡Éè±¸AES¼ÓÃÜÃÜÔ¿
#define NET_DVR_GET_POE_CFG                     6114     //»ñÈ¡POE²ÎÊý
#define NET_DVR_SET_POE_CFG                     6115     //ÉèÖÃPOE²ÎÊý
#define NET_DVR_GET_CUSTOM_PRO_CFG              6116     //»ñÈ¡×Ô¶¨ÒåÐ­Òé²ÎÊý
#define NET_DVR_SET_CUSTOM_PRO_CFG              6117     //ÉèÖÃ×Ô¶¨ÒåÐ­Òé²ÎÊý
#define NET_DVR_GET_STREAM_CABAC                6118     //»ñÈ¡ÂëÁ÷Ñ¹ËõÐÔÄÜÑ¡Ïî
#define NET_DVR_SET_STREAM_CABAC                6119     //ÉèÖÃÂëÁ÷Ñ¹ËõÐÔÄÜÑ¡Ïî   
#define NET_DVR_GET_ESATA_MINISAS_USAGE_CFG        6120  //»ñÈ¡eSATAºÍminiSASÓÃÍ¾
#define NET_DVR_SET_ESATA_MINISAS_USAGE_CFG        6121  //ÉèÖÃeSATAºÍminiSASÓÃÍ¾ 

#define NET_DVR_GET_HDCFG_V40                    6122  //»ñÈ¡Ó²ÅÌÐÅÏ¢²ÎÊý
#define NET_DVR_SET_HDCFG_V40                    6123  //ÉèÖÃÓ²ÅÌÐÅÏ¢²ÎÊý
#define NET_DVR_GET_POE_CHANNEL_ADD_MODE        6124     //»ñÈ¡POEÍ¨µÀÌí¼Ó·½Ê½
#define NET_DVR_SET_POE_CHANNEL_ADD_MODE        6125     //ÉèÖÃPOEÍ¨µÀÌí¼Ó·½Ê½
#define NET_DVR_GET_DIGITAL_CHANNEL_STATE       6126     //»ñÈ¡Éè±¸Êý×ÖÍ¨µÀ×´Ì¬
#define   NET_DVR_GET_BONJOUR_CFG               6127 // »ñÈ¡BonjourÐÅÏ¢
#define   NET_DVR_SET_BONJOUR_CFG               6128 // ÉèÖÃBonjourÐÅÏ¢


#define NET_DVR_GET_SOCKS_CFG                    6130//»ñÈ¡SOCKSÐÅÏ¢ 
#define NET_DVR_SET_SOCKS_CFG                      6131//ÉèÖÃSOCKSÐÅÏ¢

#define    NET_DVR_GET_QOS_CFG                        6132//»ñÈ¡QoSÐÅÏ¢
#define NET_DVR_SET_QOS_CFG                        6133//ÉèÖÃQoSÐÅÏ¢

#define NET_DVR_GET_HTTPS_CFG                    6134//»ñÈ¡HTTPSÐÅÏ¢
#define NET_DVR_SET_HTTPS_CFG                    6135//ÉèÖÃHTTPSÐÅÏ¢

#define NET_DVR_GET_WD1_CFG                     6136//Ô¶³Ì»ñÈ¡WD1Ê¹ÄÜ¿ª¹Ø
#define NET_DVR_SET_WD1_CFG                     6137//Ô¶³ÌÉèÖÃWD1Ê¹ÄÜ¿ª¹Ø

#define NET_DVR_CREATE_CERT                     6138//´´½¨Ö¤Êé
#define NET_DVR_DELETE_CERT                     6139//É¾³ýÖ¤Êé


#define NET_DVR_GET_RECORD_LOCK_PERCENTAGE        6140  //»ñÈ¡Â¼Ïñ¶ÎËø¶¨±ÈÀý
#define NET_DVR_SET_RECORD_LOCK_PERCENTAGE      6141  //ÉèÖÃÂ¼Ïñ¶ÎËø¶¨±ÈÀý

#define NET_DVR_CMD_TRIGGER_PERIOD_RECORD        6144 //Íâ²¿ÃüÁî´¥·¢Ö¸¶¨Ê±¼äÂ¼Ïñ
#define NET_DVR_UPLOAD_CERT                     6145    //ÉÏ´«Ö¤Êé
#define NET_DVR_DOWNLOAD_CERT                   6146     //ÏÂÔØÖ¤Êé
#define NET_DVR_GET_CERT                        6147     //»ñÈ¡Ö¤Êé

#define NET_DVR_GET_POS_FILTER_CFG                6148    //»ñÈ¡POS¹ýÂË¹æÔò
#define NET_DVR_SET_POS_FILTER_CFG                6149    //ÉèÖÃPOS¹ýÂË¹æÔò
#define NET_DVR_GET_CONNECT_POS_CFG                6150    //»ñÈ¡DVRÓëPOSÁ¬½Ó·½Ê½
#define NET_DVR_SET_CONNECT_POS_CFG                6151    //ÉèÖÃDVRÓëPOSÁ¬½Ó·½Ê½
#define NET_DVR_GET_CHAN_FILTER_CFG                6152    //»ñÈ¡¹æÔòÓëÍ¨µÀ¹ØÁªÐÅÏ¢
#define NET_DVR_SET_CHAN_FILTER_CFG                6153    //ÉèÖÃ¹æÔòÓëÍ¨µÀ¹ØÁªÐÅÏ¢


#define NET_DVR_GET_FTPCFG_V40                    6162    //»ñÈ¡FTPÐÅÏ¢
#define NET_DVR_SET_FTPCFG_V40                    6163    //ÉèÖÃFTPÐÅÏ¢

#define NET_DVR_GET_MONTHLY_RECORD_DISTRIBUTION 6164   //»ñÈ¡ÔÂÀúÂ¼Ïñ·Ö²¼
#define NET_DVR_GET_ACCESS_DEVICE_CHANNEL_INFO  6165   //»ñÈ¡´ý½ÓÈëÉè±¸Í¨µÀÐÅÏ¢
#define NET_DVR_GET_PREVIEW_SWITCH_CFG            6166   //»ñÈ¡Éè±¸±¾µØÔ¤ÀÀÇÐ»»²ÎÊý
#define NET_DVR_SET_PREVIEW_SWITCH_CFG            6167   //ÉèÖÃÉè±¸±¾µØÔ¤ÀÀÇÐ»»²ÎÊý

//Netra3.0.0
#define NET_DVR_GET_N_PLUS_ONE_WORK_MODE            6168    //»ñÈ¡N+1¹¤×÷Ä£Ê½
#define NET_DVR_SET_N_PLUS_ONE_WORK_MODE            6169    //ÉèÖÃN+1¹¤×÷Ä£Ê½

#define NET_DVR_GET_HD_STATUS                         6170    //»ñÈ¡Ó²ÅÌ×´Ì¬
#define NET_DVR_SET_HD_STATUS                         6171    //ÉèÖÃÓ²ÅÌ×´Ì¬

#define NET_DVR_IMPORT_IPC_CFG_FILE                    6172    //µ¼ÈëIPCÅäÖÃÎÄ¼þ
#define NET_DVR_EXPORT_IPC_CFG_FILE                    6173    //µ¼³öIPCÅäÖÃÎÄ¼þ
#define NET_DVR_UPGRADE_IPC                            6174    //Éý¼¶IPÍ¨µÀ

#define NET_DVR_GET_RAID_BACKGROUND_TASK_SPEED        6175    //»ñÈ¡RAIDºóÌ¨ÈÎÎñËÙ¶È
#define NET_DVR_SET_RAID_BACKGROUND_TASK_SPEED        6176    //ÉèÖÃRAIDºóÌ¨ÈÎÎñËÙ¶È

//marvell 256Â·NVR
#define NET_DVR_GET_EXCEPTIONCFG_V40                6177    //»ñÈ¡Òì³£²ÎÊýÅäÖÃ
#define NET_DVR_SET_EXCEPTIONCFG_V40                6178    //ÉèÖÃÒì³£²ÎÊýÅäÖÃ
#define NET_DVR_GET_PICCFG_V40                      6179    //»ñÈ¡Í¼Ïó²ÎÊý Ö§³Ö±ä³¤    NetSDK_
#define NET_DVR_SET_PICCFG_V40                      6180    //ÉèÖÃÍ¼Ïó²ÎÊý£¬ Ö§³Ö±ä³¤
#define NET_DVR_GET_ALARMINCFG_V40                  6181    //»ñÈ¡±¨¾¯ÊäÈë²ÎÊý£¬Ö§³Ö±ä³¤
#define NET_DVR_SET_ALARMINCFG_V40                  6182    //»ñÈ¡±¨¾¯ÊäÈë²ÎÊý£¬Ö§³Ö±ä³¤
#define NET_DVR_GET_IPALARMINCFG_V40                6183    //»ñÈ¡IP±¨¾¯ÊäÈë½ÓÈëÅäÖÃÐÅÏ¢ 
#define NET_DVR_GET_IPALARMOUTCFG_V40               6185    //»ñÈ¡IP±¨¾¯Êä³ö½ÓÈëÅäÖÃÐÅÏ¢ 
#define NET_DVR_GET_USERCFG_V40                     6187    //»ñÈ¡ÓÃ»§²ÎÊý
#define NET_DVR_SET_USERCFG_V40                     6188    //ÉèÖÃÓÃ»§²ÎÊý
#define NET_DVR_GET_WORK_STATUS                     6189    //»ñÈ¡Éè±¸¹¤×÷×´Ì¬
#define NET_DVR_GET_JPEG_CAPTURE_CFG_V40            6190    //»ñÈ¡DVR×¥Í¼ÅäÖÃ
#define NET_DVR_SET_JPEG_CAPTURE_CFG_V40            6191    //ÉèÖÃDVR×¥Í¼ÅäÖÃ
#define NET_DVR_GET_HDGROUP_CFG_V40                 6192    //»ñÈ¡ÅÌ×é¹ÜÀíÅäÖÃ²ÎÊý
#define NET_DVR_SET_HDGROUP_CFG_V40                 6193    //ÉèÖÃÅÌ×é¹ÜÀíÅäÖÃ²ÎÊý
#define NET_DVR_GET_SMD_HOLIDAY_HANDLE              6194    //»ñÈ¡¼òÒ×ÖÇÄÜ¼ÙÈÕ¼Æ»®
#define NET_DVR_SET_SMD_HOLIDAY_HANDLE              6195    //ÉèÖÃ¼òÒ×ÖÇÄÜ¼ÙÈÕ¼Æ»®
#define NET_DVR_GET_PIC_MODEL_CFG                   6196    //»ñÈ¡Í¼Æ¬½¨Ä£ÅäÖÃ²ÎÊý
#define NET_DVR_SET_PIC_MODEL_CFG                   6197    //ÉèÖÃÍ¼Æ¬½¨Ä£ÅäÖÃ²ÎÊý
#define NET_DVR_START_LOCAL_MOUSE_EVENT             6198    //¿ªÆôÉè±¸±¾µØÊó±êÊÂ¼þ¼ÇÂ¼
#define NET_DVR_START_SIMULARE_MOUSE_EVENT          6199    //Ô¶³ÌÄ£ÄâÊó±êÊÂ¼þ

//91ÏµÁÐHD-SDI¸ßÇåDVR
#define NET_DVR_GET_ACCESS_CAMERA_INFO          6201 // »ñÈ¡Ç°¶ËÏà»úÐÅÏ¢
#define NET_DVR_SET_ACCESS_CAMERA_INFO          6202 // ÉèÖÃÇ°¶ËÏà»úÐÅÏ¢
#define NET_DVR_PULL_DISK                        6203 // °²È«°ÎÅÌ
#define NET_DVR_SCAN_RAID                        6204 // É¨ÃèÕóÁÐ
// CVR 2.0.X
#define NET_DVR_GET_USER_RIGHT_CFG                6210        // »ñÈ¡ÓÃ»§È¨ÏÞ
#define NET_DVR_SET_USER_RIGHT_CFG                6211        // ÉèÖÃÓÃ»§È¨ÏÞ

#define NET_DVR_ONE_KEY_CONFIG                    6212        // Ò»¼üÅäÖÃCVR
#define NET_DVR_RESTART_SERVICE                    6213        // ÖØÆôCVR·þÎñ

#define NET_DVR_GET_MAX_MACHINE_NUM_CFG            6214        // »ñÈ¡±¸»ú×î´ó¸öÊý
#define NET_DVR_SET_MAX_MACHINE_NUM_CFG            6215        // ÉèÖÃ±¸»ú×î´ó¸öÊý

#define NET_DVR_ADD_DEVICE                        6216        //N+1Ä£Ê½Ìí¼ÓÉè±¸
#define NET_DVR_DEL_DEVICE                        6217        //N+1Ä£Ê½É¾³ýÉè±¸

#define NET_DVR_GET_DATA_CALLBACK_CFG            6218        // »ñÈ¡Êý¾Ý»ØÇ¨×´Ì¬
#define NET_DVR_SET_DATA_CALLBACK_CFG            6219        // ÉèÖÃÊý¾Ý»ØÇ¨×´Ì¬

#define NET_DVR_CLONE_LUN                        6220    //¿ËÂ¡LUN¾í
#define NET_DVR_EXPAND_LUN                        6221    //À©Õ¹ºÍÖØÃüÃûLUN¾í

#define NET_DVR_GET_N_PLUS_ONE_DEVICE_INFO        6222    //»ñÈ¡N+1Éè±¸ÐÅÏ¢
#define NET_DVR_MODIFY_DVR_NET_DISK                6223    //ÐÞ¸ÄDVRÍøÅÌ
//#define NET_DVR_DEL_DVR_NET_DISK                6224    //É¾³ýDVRÍøÅÌ

#define NET_DVR_CREATE_NAS                        6225    //´´½¨NAS
#define NET_DVR_DELETE_NAS                        6226    //É¾³ýNAS 

#define NET_DVR_OPEN_ISCSI                         6227    //¿ªÆôiSCSI
#define NET_DVR_CLOSE_ISCSI                        6228    //¹Ø±ÕiSCSI 

#define NET_DVR_GET_FC                            6229    //»ñÈ¡¹âÏËÐÅÏ¢
#define NET_DVR_OPEN_FC                             6230    //¿ªÆôFC
#define NET_DVR_CLOSE_FC                         6231    //¹Ø±ÕFC
#define NET_DVR_ONE_KEY_CONFIG_SAN                6232   // Ò»¼üÅäÖÃSAN, ÓëÒ»¼üÅäÖÃCVRÂß¼­Ò»Ñù

//CVR2.3.2
#define NET_DVR_RECORD_CHECK                        6233  //Â¼ÏñÍêÕûÐÔ¼ì²â
#define NET_DVR_ADD_RECORD_PASSBACK_TASK_MANUAL        6234  //ÊÖ¶¯Ìí¼ÓÂ¼Ïñ»Ø´«ÈÎÎñ
#define NET_DVR_GET_ALL_RECORD_PASSBACK_TASK_MANUAL    6235  //»ñÈ¡ËùÓÐÊÖ¶¯Ìí¼ÓÂ¼Ïñ»Ø´«ÈÎÎñ
#define NET_DVR_RECORD_PASSBACK_TASK_MANUAL_CTRL    6236  //¿ØÖÆÊÖ¶¯Â¼Ïñ»Ø´«ÈÎÎñ
#define NET_DVR_DEL_RECORD_PASSBACK_TASK_MANUAL        6237  //É¾³ýÊÖ¶¯Â¼Ïñ»Ø´«ÈÎÎñ
#define NET_DVR_GET_RECORD_PASSBACK_PLAN_CFG        6238  //»ñÈ¡Â¼Ïñ»Ø´«¼Æ»®ÅäÖÃ
#define NET_DVR_SET_RECORD_PASSBACK_PLAN_CFG        6239  //ÉèÖÃÂ¼Ïñ»Ø´«¼Æ»®ÅäÖÃ
#define NET_DVR_GET_DEV_STORAGE_CFG                    6240  //»ñÈ¡Éè±¸´æ´¢ÐÅÏ¢
#define NET_DVR_GET_ONLINE_USER_CFG                    6241  //»ñÈ¡ÔÚÏßÓÃ»§²ÎÊý
#define NET_DVR_GET_RECORD_SEGMENT_CFG                6242  //»ñÈ¡Â¼Ïñ¶Î×ÜÁ¿

#define NET_DVR_GET_REC_PASSBACK_TASK_EXECUTABLE    6243    //²éÑ¯ÊÖ¶¯Â¼Ïñ»Ø´«ÈÎÎñ¿ÉÖ´ÐÐÐÔ
#define NET_DVR_GET_STREAM_MEDIA_CFG                6244    //»ñÈ¡Á÷Ã½Ìå»Ø´«Â¼Ïñ²ÎÊýÅäÖÃ£¨Á÷ID·½Ê½£©
#define NET_DVR_SET_STREAM_MEDIA_CFG                6245    //ÉèÖÃÁ÷Ã½Ìå»Ø´«Â¼Ïñ²ÎÊýÅäÖÃ£¨Á÷ID·½Ê½£©
#define NET_DVR_GET_USERCFG_V50                     6246  //»ñÈ¡ÓÃ»§²ÎÊýV50
#define NET_DVR_SET_USERCFG_V50                     6247  //ÉèÖÃÓÃ»§²ÎÊýV50

#define NET_DVR_GET_RECORD_PACK				    6301    //»ñÈ¡Â¼Ïñ´ò°ü²ÎÊý
#define NET_DVR_SET_RECORD_PACK				    6302    //ÉèÖÃÂ¼Ïñ´ò°ü²ÎÊý

#define NET_DVR_GET_CLOUD_STORAGE_CFG           6303     //»ñÈ¡Éè±¸µ±Ç°¹¤×÷Ä£Ê½
#define NET_DVR_SET_CLOUD_STORAGE_CFG           6304    //ÉèÖÃÉè±¸µ±Ç°¹¤×÷Ä£Ê½
#define NET_DVR_GET_GOP_INFO                    6305    //»ñÈ¡GOPÐÅÏ¢ 
#define NET_DVR_GET_PHY_DISK_INFO               6306     //»ñÈ¡ÎïÀí´ÅÅÌÐÅÏ¢
//Â¼²¥Ö÷»úÍâ²¿ÃüÁî
#define NET_DVR_GET_RECORDING_AUTO_TRACK_CFG    6307    //»ñÈ¡SDI×Ô¶¯¸ú×ÙÅäÖÃÐÅÏ¢
#define NET_DVR_SET_RECORDING_AUTO_TRACK_CFG    6308    //ÉèÖÃSDI×Ô¶¯¸ú×ÙÅäÖÃÐÅÏ¢

#define NET_DVR_GET_RECORDING_PUBLISH_CFG        6309  //»ñÈ¡Ò»¼ü·¢²¼ÐÅÏ¢ 
#define NET_DVR_SET_RECORDING_PUBLISH_CFG        6310  //ÉèÖÃÒ»¼ü·¢²¼ÐÅÏ¢


#define NET_DVR_RECORDING_ONEKEY_CONTROL        6311  //Â¼²¥Ö÷»ú¿ØÖÆ

#define NET_DVR_GET_RECORDING_END_TIME    6312  //»ñÈ¡Â¼²¥Ê£ÓàÊ±¼ä

#define NET_DVR_RECORDING_PUBLISH                6313  //Ò»¼ü·¢²¼Â¼Ïñ

#define NET_DVR_GET_CURRICULUM_CFG            6314    //»ñÈ¡¿Î±íÅäÖÃÐÅÏ¢
#define NET_DVR_SET_CURRICULUM_CFG            6315  //ÉèÖÃ¿Î±íÅäÖÃÐÅÏ¢

#define NET_DVR_GET_COURSE_INDEX_CFG        6316    //»ñÈ¡¿Î³ÌÐÅÏ¢Ë÷Òý
#define NET_DVR_SET_COURSE_INDEX_CFG        6317  //ÉèÖÃ¿Î³ÌÐÅÏ¢Ë÷Òý

#define    NET_DVR_GET_PPT_CHANNEL                6318    //»ñÈ¡PPTÖ§³ÖÍ¨µÀºÅ
#define    NET_DVR_GET_PPT_DETECT_CFG            6319    //»ñÈ¡PPT¼ì²â²ÎÊý
#define    NET_DVR_SET_PPT_DETECT_CFG            6320    //ÉèÖÃPPT¼ì²â²ÎÊý

#define NET_DVR_GET_RECORDINGHOST_CFG            6321    //»ñÈ¡Â¼²¥Ö÷»úÅäÖÃÐÅÏ¢
#define NET_DVR_SET_RECORDINGHOST_CFG            6322    //ÉèÖÃÂ¼²¥Ö÷»úÅäÖÃÐÅÏ¢
#define NET_DVR_GET_BACKUP_RECORD_CFG           6323    //»ñÈ¡Ò»¼ü±¸·ÝÅäÖÃÐÅÏ¢
#define NET_DVR_SET_BACKUP_RECORD_CFG           6324    //ÉèÖÃÒ»¼ü±¸·ÝÅäÖÃÐÅÏ¢

//Í¥ÉóÖ÷»ú
#define NET_DVR_GET_AUDIO_ACTIVATION_CFG        6326    //»ñÈ¡ÓïÒô¼¤ÀøÅäÖÃ²ÎÊý
#define NET_DVR_SET_AUDIO_ACTIVATION_CFG        6327    //ÉèÖÃÓïÒô¼¤ÀøÅäÖÃ²ÎÊý
#define NET_DVR_GET_DECODERCFG_V40              6328    //»ñÈ¡½âÂëÆ÷²ÎÊýÐÅÏ¢
#define NET_DVR_SET_DECODERCFG_V40                6329    //ÉèÖÃ½âÂëÆ÷²ÎÊýÐÅÏ¢

#define NET_DVR_INFRARED_OUTPUT_CONTROL         6330   //ºìÍâÊä³ö¿ØÖÆ
#define NET_DVR_GET_INFRARED_CMD_NAME_CFG       6331   //»ñÈ¡ºìÍâÃüÁîÃû³Æ²ÎÊýÅäÖÃ
#define NET_DVR_SET_INFRARED_CMD_NAME_CFG       6332   //ÉèÖÃºìÍâÃüÁîÃû³Æ²ÎÊýÅäÖÃ
#define NET_DVR_START_INFRARED_LEARN            6333   //Ô¶³ÌºìÍâÑ§Âë

#define NET_DVR_GET_TRIAL_SYSTEM_CFG            6334   //»ñÈ¡Í¥ÉóÖ÷»úÏµÍ³ÐÅÏ¢
#define NET_DVR_SET_CASE_INFO                    6335    //°¸¼þÐÅÏ¢Â¼Èë
#define NET_DVR_GET_TRIAL_MICROPHONE_STATUS        6336  //»ñÈ¡Âó¿Ë·ç×´Ì¬ÐÅÏ¢
#define NET_DVR_SET_TRIAL_MICROPHONE_STATUS        6337  //»ñÈ¡Âó¿Ë·ç×´Ì¬ÐÅÏ¢
#define NET_DVR_GET_TRIAL_HOST_STATUS            6338  //»ñÈ¡Í¥ÉóÖ÷»ú×´Ì¬ÐÅÏ¢
#define NET_DVR_GET_LAMP_OUT                    6339  //»ñÈ¡LAMPÊä³ö¿ÚÐÅÏ¢
#define NET_DVR_SET_LAMP_OUT                    6340  //ÉèÖÃLAMPÊä³ö¿ÚÐÅÏ¢
#define NET_DVR_LAMP_REMOTE_CONTROL                6341  // LAMP¿ØÖÆ
#define NET_DVR_REMOTE_CONTROL_PLAY                6342  //Ô¶³Ì¿ØÖÆ±¾µØ»Ø·Å
#define NET_DVR_GET_LOCAL_INPUT_CFG                6343  //»ñÈ¡Í¥ÉóÖ÷»ú×´Ì¬ÐÅÏ¢Í¥ÉóÖ÷»ú±¾µØÊäÈëÐÅÏ¢
#define NET_DVR_SET_LOCAL_INPUT_CFG                6344  //ÉèÖÃÍ¥ÉóÖ÷»ú±¾µØÊäÈëÐÅÏ¢
#define NET_DVR_GET_CASE_INFO                    6345  //»ñÈ¡µ±Ç°°¸¼þÐÅÏ¢

//ÉóÑ¶»úÍâ²¿ÃüÁî
#define NET_DVR_INQUEST_GET_CDW_STATUS             6350  //»ñÈ¡ÉóÑ¶»ú¿ÌÂ¼×´Ì¬-³¤Á¬½Ó
#define NET_DVR_GET_MIX_AUDIOIN_CFG             6351  //»ñÈ¡»ìÒôÊäÈë¿Ú²ÎÊýÅäÖÃ
#define NET_DVR_SET_MIX_AUDIOIN_CFG             6352  //ÉèÖÃ»ìÒôÊäÈë¿Ú²ÎÊýÅäÖÃ
#define NET_DVR_GET_MIX_AUDIOOUT_CFG            6353  //»ñÈ¡»ìÒôÊä³ö¿Ú²ÎÊýÅäÖÃ
#define NET_DVR_SET_MIX_AUDIOOUT_CFG            6354  //ÉèÖÃ»ìÒôÊä³ö¿Ú²ÎÊýÅäÖÃ
#define NET_DVR_GET_AUDIOIN_VOLUME_CFG          6355  //»ñÈ¡ÒôÆµÊäÈë¿ÚÒôÁ¿µ÷½Ú²ÎÊýÅäÖÃ
#define NET_DVR_SET_AUDIOIN_VOLUME_CFG          6356  //ÉèÖÃÒôÆµÊäÈë¿ÚÒôÁ¿µ÷½Ú²ÎÊýÅäÖÃ
#define NET_DVR_GET_AREA_MASK_CFG               6357  //»ñÈ¡ÂíÈü¿ËÇøÓòÅäÖÃ
#define NET_DVR_SET_AREA_MASK_CFG               6358  //ÉèÖÃÂíÈü¿ËÇøÓòÅäÖÃ
#define NET_DVR_GET_AUDIO_DIACRITICAL_CFG       6359  //»ñÈ¡ÒôÆµ±äÒôÅäÖÃ
#define NET_DVR_SET_AUDIO_DIACRITICAL_CFG       6360  //ÉèÖÃÒôÆµ±äÒôÅäÖÃ
#define NET_DVR_GET_WIFI_DHCP_ADDR_CFG          6361  //»ñWIFI DHCP µØÖ··¶Î§²ÎÊýÅäÖÃ
#define NET_DVR_SET_WIFI_DHCP_ADDR_CFG          6362  //ÉèWIFI DHCP µØÖ··¶Î§²ÎÊýÅäÖÃ
#define NET_DVR_GET_WIFI_CLIENT_LIST_INFO       6363  //»ñÈ¡wifiÈÈµãÏÂÁ¬½ÓµÄÉè±¸ÐÅÏ¢
#define NET_DVR_REMOTECONTROL_POWER_ON            6364  //Ô¶³Ì¿ª»ú
#define NET_DVR_GET_MULTISTREAM_RELATION_CHAN_CFG      6365  //»ñÈ¡¶àÂëÁ÷¹ØÁªÍ¨µÀ²ÎÊýÅäÖÃ
#define NET_DVR_SET_MULTISTREAM_RELATION_CHAN_CFG     6366  //ÉèÖÃ¶àÂëÁ÷¹ØÁªÍ¨µÀ²ÎÊýÅäÖÃ
#define NET_DVR_GET_VIDEOOUT_RESOLUTION_CFG        6367  //»ñÈ¡Éè±¸±¾µØÊÓÆµÊä³ö¿Ú·Ö±æÂÊ
#define NET_DVR_SET_VIDEOOUT_RESOLUTION_CFG        6368  //ÉèÖÃÉè±¸±¾µØÊÓÆµÊä³ö¿Ú·Ö±æÂÊ
#define NET_DVR_GET_AUDIOOUT_VOLUME_CFG         6369  //»ñÈ¡ÒôÆµÊä³ö¿ÚÒôÁ¿µ÷½Ú²ÎÊýÅäÖÃ
#define NET_DVR_SET_AUDIOOUT_VOLUME_CFG         6370  //ÉèÖÃÒôÆµÊä³ö¿ÚÒôÁ¿µ÷½Ú²ÎÊýÅäÖÃ
#define NET_DVR_INQUEST_PAUSE_CDW               6371  //ÔÝÍ£¿ÌÂ¼
#define NET_DVR_INQUEST_RESUME_CDW              6372  //»Ö¸´¿ÌÂ¼
#define NET_DVR_GET_INPUT_CHAN_CFG              6373  //»ñÈ¡ÊäÈëÍ¨µÀÅäÖÃ
#define NET_DVR_SET_INPUT_CHAN_CFG              6374  //ÉèÖÃÊäÈëÍ¨µÀÅäÖÃ
#define  NET_DVR_GET_INQUEST_MIX_AUDIOIN_CFG    6375    //»ñÈ¡ÉóÑ¶»úÒôÆµÊäÈë»ìÒôÅäÖÃ
#define  NET_DVR_SET_INQUEST_MIX_AUDIOIN_CFG    6376    //ÉèÖÃÉóÑ¶»úÒôÆµÊäÈë»ìÒôÅäÖÃ
#define     NET_DVR_CASE_INFO_CTRL                    6377    //°¸¼þÐÅÏ¢ÏÔÊ¾¿ØÖÆ
#define  NET_DVR_GET_INQUEST_USER_RIGHT            6378    //»ñÈ¡ÉóÑ¶»úÓÃ»§È¨ÏÞ
#define  NET_DVR_SET_INQUEST_USER_RIGHT            6379    //ÉèÖÃÉóÑ¶»úÓÃ»§È¨ÏÞ
#define NET_DVR_GET_INQUEST_CASE_INFO            6380    //»ñÈ¡ÉóÑ¶°¸¼þÐÅÏ¢ÅäÖÃ
#define NET_DVR_SET_INQUEST_CASE_INFO            6381    //ÉèÖÃÉóÑ¶°¸¼þÐÅÏ¢ÅäÖÃ

#define    NET_DVR_GET_FILM_MODE_CFG               6387    //»ñÈ¡µçÓ°Ä£Ê½
#define    NET_DVR_SET_FILM_MODE_CFG               6388    //ÉèÖÃµçÓ°Ä£Ê½
#define    NET_DVR_GET_FILM_MODE_CFG_CAP            6389    //»ñÈ¡µçÓ°Ä£Ê½ÅäÖÃÄÜÁ¦

#define    NET_DVR_GET_DIRECTED_STRATEGY_CFG       6390    //»ñÈ¡µ¼²¥²ßÂÔÀàÐÍ
#define    NET_DVR_SET_DIRECTED_STRATEGY_CFG        6391    //ÉèÖÃµ¼²¥²ßÂÔÀàÐÍ
#define    NET_DVR_GET_DIRECTED_STRATEGY_CFG_CAP    6392    //»ñÈ¡µçÓ°Ä£Ê½ÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_FRAME_CFG                    6393    //»ñÈ¡»­Ãæ±ß¿ò
#define    NET_DVR_SET_FRAME_CFG                    6394    //ÉèÖÃ»­Ãæ±ß¿ò
#define    NET_DVR_GET_FRAME_CFG_CAP                6395    //»ñÈ¡»­Ãæ±ß¿òÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_AUDIO_EFFECTIVE_CFG            6396    //»ñÈ¡ÒôÆµÓÅ»¯²ÎÊý
#define    NET_DVR_SET_AUDIO_EFFECTIVE_CFG            6397    //ÉèÖÃÒôÆµÐ§¹û²ÎÊý
#define    NET_DVR_GET_AUDIO_EFFECTIVE_CFG_CAP        6398    //»ñÈ¡ÒôÆµÐ§¹ûÓÅ»¯ÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_RECORD_VIDEO_CFG              6399    //»ñÈ¡Â¼ÖÆÊÓÆµ²ÎÊý
#define    NET_DVR_SET_RECORD_VIDEO_CFG            6400    //ÉèÖÃÂ¼ÖÆÊÓÆµ²ÎÊý


#define NET_DVR_GET_OUTPUT_CFG                  6401        //»ñÈ¡ÏÔÊ¾Êä³ö²ÎÊý
#define NET_DVR_SET_OUTPUT_CFG                  6402        //ÉèÖÃÏÔÊ¾Êä³ö²ÎÊý
#define NET_DVR_CODER_DISPLAY_START             6403        //¿ªÊ¼Êä³ö
#define NET_DVR_CODER_DISPLAY_STOP              6404        //Í£Ö¹Êä³ö
#define NET_DVR_GET_WINDOW_STATUS               6405        //»ñÈ¡ÏÔÊ¾´°¿Ú×´Ì¬

//VQD¹¦ÄÜ½Ó¿Ú
#define NET_DVR_GET_VQD_LOOP_DIAGNOSE_CFG       6406        //»ñÈ¡VQDÑ­»·Õï¶ÏÅäÖÃ²ÎÊý
#define NET_DVR_SET_VQD_LOOP_DIAGNOSE_CFG       6407        //ÉèÖÃVQDÑ­»·Õï¶ÏÅäÖÃ²ÎÊý
#define NET_DVR_GET_VQD_DIAGNOSE_INFO           6408        //ÊÖ¶¯»ñÈ¡VQDÕï¶ÏÐÅÏ¢

#define    NET_DVR_RECORDING_PUBLISH_FILE            6421        //ÎÄ¼þ·¢²¼
#define    NET_DVR_GET_RECORDING_PUBLISH_FILE_CAP    6422        //»ñÈ¡ÎÄ¼þ·¢²¼ÄÜÁ¦
#define    NET_DVR_GET_PUBLISH_PROGRESS            6423           //»ñÈ¡·¢²¼½ø¶È
#define    NET_DVR_GET_RECORD_VIDEO_CFG_CAP        6424        //»ñÈ¡Â¼ÖÆÊÓÆµÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_RTMP_CFG                    6425        //»ñÈ¡RTMP²ÎÊý
#define    NET_DVR_SET_RTMP_CFG                    6426        //ÉèÖÃRTMP²ÎÊý
#define    NET_DVR_GET_RTMP_CFG_CAP                  6427        //»ñÈ¡RTMPÅäÖÃÄÜÁ¦
#define    NET_DVR_DEL_BACKGROUND_PIC                6428        //É¾³ý±³¾°Í¼Æ¬ÎÄ¼þ
#define    NET_DVR_GET_BACKGROUND_PIC_CFG            6429        //²éÑ¯±³¾°Í¼Æ¬ÎÄ¼þ
#define    NET_DVR_GET_BACKGROUND_PIC_INFO            6430        //»ñÈ¡ÄÄÕÅÍ¼Æ¬×÷Îª±³¾°Í¼Æ¬
#define    NET_DVR_SET_BACKGROUND_PIC_INFO            6431        //ÉèÖÃÄÄÕÅÍ¼Æ¬×÷Îª±³¾°Í¼Æ¬
#define    NET_DVR_GET_BACKGROUND_PIC_INFO_CAP      6432           //»ñÈ¡ÄÄÕÅÍ¼Æ¬×÷Îª±³¾°Í¼Æ¬ÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_RECORD_HOST_CAP                6433        //»ñÈ¡Â¼²¥Ö÷»ú×ÜÄÜÁ¦
#define NET_DVR_GET_COURSE_LIST                 6434    //»ñÈ¡¿Î³ÌÁÐ±í
#define    NET_DVR_GET_RECORD_STATUS                6435 //²éÑ¯Â¼²¥Ö÷»úµ±Ç°×´Ì¬
#define    NET_DVR_MANUAL_CURRICULUM_CONTROL        6436    //ÊÖ¶¯¿Î±í¿ØÖÆ
#define    NET_DVR_GET_IMAGE_DIFF_DETECTION_CFG        6437    //»ñÈ¡Í¼Ïñ²î·Ö¼ì²â²ÎÊý
#define    NET_DVR_SET_IMAGE_DIFF_DETECTION_CFG        6438    //ÉèÖÃÍ¼Ïñ²î·Ö¼ì²â²ÎÊý
#define    NET_DVR_GET_IMAGE_DIFF_DETECTION_CFG_CAP    6439    //»ñÈ¡Í¼Ïñ²î·Ö¼ì²âÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_RECORDING_PUBLISH_FILE_INFO    6440    //»ñÈ¡·¢²¼ÎÄ¼þÐÅÏ¢²ÎÊý
#define    NET_DVR_SET_RECORDING_PUBLISH_FILE_INFO    6441    //ÉèÖÃ·¢²¼ÎÄ¼þÐÅÏ¢²ÎÊý
#define    NET_DVR_GET_RECORDING_PUBLISH_FILE_INFO_CAP        6442    //»ñÈ¡·¢²¼ÎÄ¼þÐÅÏ¢ÅäÖÃÄÜÁ¦
#define    NET_DVR_MANUAL_CURRICULUM_CONTROL_CAP        6443    //»ñÈ¡ÊÖ¶¯¿Î³ÌÂ¼ÏñµÄÄÜÁ¦
#define NET_DVR_GET_STATISTIC_DATA_LIST             6444    //»ñÈ¡Í³¼ÆÊý¾ÝÁÐ±í

#define    NET_DVR_GET_DEVICE_LAN_ENCODE            6501        //»ñÈ¡Éè±¸µÄÓïÑÔ±àÂë
#define NET_DVR_GET_GBT28181_SERVICE_CFG        6503        //»ñÈ¡GB28181·þÎñÆ÷²ÎÊý
#define NET_DVR_SET_GBT28181_SERVICE_CFG        6504        //ÉèÖÃGB28181·þÎñÆ÷²ÎÊý
#define NET_DVR_GET_GBT28181_SERVICE_CAPABILITIES 6505      //»ñÈ¡GB28181·þÎñÆ÷ÄÜÁ¦

#define NET_DVR_GET_CLOUD_URL               6506    //»ñÈ¡ÔÆ´æ´¢URL
#define NET_DVR_GET_CLOUD_URL_CAP           6507    //»ñÈ¡ÔÆ´æ´¢URL-ÄÜÁ¦¼¯
#define NET_DVR_GET_CLOUD_CFG               6508    //»ñÈ¡ÔÆ´æ´¢ÅäÖÃ²ÎÊý
#define NET_DVR_SET_CLOUD_CFG               6509    //ÉèÖÃÔÆ´æ´¢ÅäÖÃ²ÎÊý
#define NET_DVR_GET_CLOUD_CFG_CAP           6510    //»ñÈ¡ÔÆ´æ´¢ÅäÖÃ-ÄÜÁ¦¼¯
#define NET_DVR_GET_CLOUD_UPLOADSTRATEGY    6511    //»ñÈ¡ÔÆ´æ´¢ÉÏ´«²ßÂÔ
#define NET_DVR_SET_CLOUD_UPLOADSTRATEGY    6512    //ÉèÖÃÔÆ´æ´¢ÉÏ´«²ßÂÔ
#define NET_DVR_GET_CLOUDSTORAGE_UPLOADSTRATEGY_CAP     6513    //ÔÆ´æ´¢ÉÏ´«²ßÂÔÅäÖÃ-ÄÜÁ¦¼¯

#define    NET_DVR_GET_VIDEO_IMAGE_DB_CFG        6601        //»ñÈ¡ÊÓÍ¼¿âÐÅÏ¢
#define    NET_DVR_SET_VIDEO_IMAGE_DB_CFG        6602        //ÉèÖÃÊÓÍ¼¿âÐÅÏ¢
#define    NET_DVR_GET_VIDEO_IMAGE_DB_CFG_CAP    6603        //»ñÈ¡ÊÓÍ¼¿âÏà¹ØÄÜÁ¦
#define    NET_DVR_GET_FILE_INFO_BY_ID            6604        //¸ù¾ÝÎÄ¼þID»ñÈ¡ÊÓÍ¼¿âÖÐÎÄ¼þÐÅÏ¢
#define    NET_DVR_QUERY_FILE_INFO_CAP            6605        //¸ù¾ÝÎÄ¼þÃû²éÑ¯ÎÄ¼þÐÅÏ¢ÄÜÁ¦
#define    NET_DVR_DEL_FILE_FROM_DB            6606        //´ÓÊÓÍ¼¿âÖÐÉ¾³ýÎÄ¼þ
#define    NET_DVR_GET_VIDEO_IMAGE_DB_CAP        6607        //»ñÈ¡ÊÓÍ¼¿â×ÜÄÜÁ¦

#define NET_DVR_GET_FIGURE	                6610       //»ñÈ¡ËõÂÔÍ¼

#define    NET_DVR_SYNC_IPC_PASSWD                  6621        //Í¬²½IPCÃÜÂëÓëNVRÒ»ÖÂ
#define    NET_DVR_GET_VEHICLE_BLACKLST_SCHEDULE 6622    //»ñÈ¡ºÚÃûµ¥²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_VEHICLE_BLACKLST_SCHEDULE 6623    //ÉèÖÃºÚÃûµ¥²¼·ÀÊ±¼äÅäÖÃ

#define    NET_DVR_GET_VEHICLE_WHITELST_SCHEDULE 6624    //»ñÈ¡°×Ãûµ¥²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_VEHICLE_WHITELST_SCHEDULE 6625    //ÉèÖÃ°×Ãûµ¥²¼·ÀÊ±¼äÅäÖÃ

#define    NET_DVR_GET_VEHICLE_BLACKLIST_EVENT_TRIGGER     6626    //»ñÈ¡ºÚÃûµ¥²¼·ÀÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_VEHICLE_BLACKLIST_EVENT_TRIGGER     6627    //ÉèÖÃºÚÃûµ¥²¼·ÀÁª¶¯ÅäÖÃ

#define    NET_DVR_GET_VEHICLE_WHITELIST_EVENT_TRIGGER     6628    //»ñÈ¡°×Ãûµ¥²¼·ÀÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_VEHICLE_WHITELIST_EVENT_TRIGGER     6629    //ÉèÖÃ°×Ãûµ¥²¼·ÀÁª¶¯ÅäÖÃ

#define    NET_DVR_GET_TRAFFIC_CAP    6630    //»ñÈ¡×¥ÅÄÏà¹ØÄÜÁ¦¼¯
#define    NET_DVR_GET_VEHICLE_ALLLIST_EVENT_TRIGGER     6631    //»ñÈ¡È«²¿³µÁ¾¼ì²â²¼·ÀÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_VEHICLE_ALLLIST_EVENT_TRIGGER     6632    //ÉèÖÃÈ«²¿³µÁ¾¼ì²â²¼·ÀÁª¶¯ÅäÖÃ
#define    NET_DVR_GET_VEHICLE_OTHERLIST_EVENT_TRIGGER     6633    //»ñÈ¡ÆäËûµ¥²¼·ÀÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_VEHICLE_OTHERLIST_EVENT_TRIGGER     6634    //ÉèÖÃÆäËûµ¥²¼·ÀÁª¶¯ÅäÖÃ

#define    NET_DVR_GET_STORAGEDETECTION_EVENT_TRIGGER     6635    //»ñÈ¡´æ´¢½¡¿µ¼ì²âÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_STORAGEDETECTION_EVENT_TRIGGER     6636    //ÉèÖÃ´æ´¢½¡¿µ¼ì²âÁª¶¯ÅäÖÃ
#define    NET_DVR_GET_STORAGEDETECTION_SCHEDULE_CAPABILITIES    6637    //»ñÈ¡´æ´¢½¡¿µ¼ì²â²¼·ÀÊ±¼äÄÜÁ¦
#define    NET_DVR_GET_STORAGEDETECTION_SCHEDULE         6638    //»ñÈ¡´æ´¢½¡¿µ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_STORAGEDETECTION_SCHEDULE         6639    //ÉèÖÃ´æ´¢½¡¿µ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_GET_STORAGEDETECTION_STATE             6640    //»ñÈ¡´æ´¢½¡¿µ×´Ì¬


#define    NET_DVR_GET_FACECAPTURE_EVENT_TRIGGER         6641    //»ñÈ¡ÈËÁ³×¥ÅÄÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_FACECAPTURE_EVENT_TRIGGER         6642    //ÉèÖÃÈËÁ³×¥ÅÄÁª¶¯ÅäÖÃ
#define    NET_DVR_GET_FACECAPTURE_SCHEDULE_CAPABILITIES 6643    //»ñÈ¡ÈËÁ³×¥ÅÄ²¼·ÀÊ±¼äÄÜÁ¦
#define    NET_DVR_GET_FACECAPTURE_SCHEDULE             6644    //»ñÈ¡ÈËÁ³×¥ÅÄ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_FACECAPTURE_SCHEDULE             6645    //ÉèÖÃÈËÁ³×¥ÅÄ²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_GET_STORAGEDETECTION_RWLOCK             6646    //»ñÈ¡´æ´¢Õì²âµÄ¶ÁÐ´ËøÅäÖÃ
#define    NET_DVR_GET_STORAGEDETECTION_RWLOCK_CAPABILITIES    6647    //»ñÈ¡´æ´¢Õì²âµÄ¶ÁÐ´ËøÅäÖÃÄÜÁ¦
#define    NET_DVR_SET_STORAGEDETECTION_RWLOCK             6648    //ÉèÖÃ´æ´¢Õì²âµÄ¶ÁÐ´ËøÅäÖÃ
#define    NET_DVR_GET_PTZTRACKSTATUS                     6649    //»ñÈ¡Çò»úÁª¶¯¸ú×Ù×´Ì¬

#define    NET_DVR_SET_STORAGEDETECTION_UNLOCK             6653    //ÉèÖÃ´æ´¢Õì²âµÄ½âËøÅäÖÃ
#define    NET_DVR_GET_STORAGEDETECTION_UNLOCK_CAPABILITIES    6654    //»ñÈ¡´æ´¢Õì²âµÄ½âËøÅäÖÃÄÜÁ¦

#define    NET_DVR_SET_SHIPSDETECTION_CFG                 6655    //ÉèÖÃ´¬Ö»¼ì²â²ÎÊýÅäÖÃ
#define    NET_DVR_GET_SHIPSDETECTION_CFG                 6656    //»ñÈ¡´¬Ö»¼ì²â²ÎÊýÅäÖÃ
#define    NET_DVR_GET_SHIPSDETECTION_CAPABILITIES         6657    //»ñÈ¡´¬Ö»¼ì²â²ÎÊýÅäÖÃÄÜÁ¦
#define    NET_DVR_GET_SHIPSDETECTION_COUNT               6658    //»ñÈ¡´¬Ö»¼ÆÊýÐÅÏ¢
#define    NET_DVR_SHIPSCOUNT_DELETE_CTRL                  6659   //Çå¿Õ´¬Ö»¼ÆÊýÐÅÏ¢

#define    NET_DVR_GET_BAREDATAOVERLAY_CAPABILITIES     6660   //»ñÈ¡ÂãÊý¾Ýµþ¼ÓÄÜÁ¦
#define    NET_DVR_SET_BAREDATAOVERLAY_CFG                 6661    //ÉèÖÃÂãÊý¾Ýµþ¼Ó
#define    NET_DVR_GET_BAREDATAOVERLAY_CFG                 6662    //»ñÈ¡ÂãÊý¾Ýµþ¼Ó
#define    NET_DVR_GET_SHIPSDETECTION_SCHEDULE             6663    //»ñÈ¡´¬Ö»¼ì²â²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_SET_SHIPSDETECTION_SCHEDULE             6664    //ÉèÖÃ´¬Ö»¼ì²â²¼·ÀÊ±¼äÅäÖÃ
#define    NET_DVR_GET_SHIPSDETECTION_EVENT_TRIGGER     6665    //»ñÈ¡´¬Ö»¼ì²âÁª¶¯ÅäÖÃ
#define    NET_DVR_SET_SHIPSDETECTION_EVENT_TRIGGER     6666    //ÉèÖÃ´¬Ö»¼ì²âÁª¶¯ÅäÖÃ
#define    NET_DVR_GET_SHIPSDETECTION_SCHEDULE_CAPABILITIES    6667    //»ñÈ¡´¬Ö»¼ì²â²¼·ÀÊ±¼äÄÜÁ¦

#define    NET_DVR_FIRE_FOCUSZOOM_CTRL         6670        //»ðµã¿É¼û¹â¾µÍ·¾Û½¹±ä±¶

#define	NET_DVR_GET_FIREDETECTION_SCHEDULE_CAPABILITIES	6671 //»ñÈ¡»ðµã¼ì²â²¼·ÀÊ±¼äÄÜÁ¦
#define	NET_DVR_GET_FIREDETECTION_SCHEDULE	6672	//»ñÈ¡»ðµã¼ì²â²¼·ÀÊ±¼äÅäÖÃ
#define	NET_DVR_SET_FIREDETECTION_SCHEDULE	6673	//ÉèÖÃ»ðµã¼ì²â²¼·ÀÊ±¼äÅäÖÃ
#define	NET_DVR_GET_MANUALRANGING_CAPABILITIES	6675    //»ñÈ¡ÊÖ¶¯²â¾àÅäÖÃÄÜÁ¦
#define    NET_DVR_SET_MANUALRANGING           6677        //ÉèÖÃÊÖ¶¯²â¾à²ÎÊý
#define    NET_DVR_GET_MANUALDEICING_CAPABILITIES    6678//»ñÈ¡ÊÖ¶¯³ý±ùÅäÖÃÄÜÁ¦
#define    NET_DVR_SET_MANUALDEICING           6679        //ÉèÖÃÊÖ¶¯³ý±ù
#define    NET_DVR_GET_MANUALDEICING           6680        //»ñÈ¡ÊÖ¶¯³ý±ù

//DVR96000
#define	NET_DVR_GET_ACCESSORY_CARD_INFO_CAPABILITIES	6709 //»ñÈ¡Åä¼þ°åÐÅÏ¢ÄÜÁ¦
#define	NET_DVR_GET_ACCESSORY_CARD_INFO		            6710 //»ñÈ¡Åä¼þ°åÐÅÏ¢

#define	NET_DVR_GET_THERMINTELL_CAPABILITIES	6711	     //»ñÈ¡ÈÈ³ÉÏñÖÇÄÜ»¥³âÄÜÁ¦
#define	NET_DVR_GET_THERMINTELL                 6712	     //»ñÈ¡ÈÈ³ÉÏñÖÇÄÜ»¥³âÅäÖÃ²ÎÊý
#define	NET_DVR_SET_THERMINTELL                 6713	     //ÉèÖÃÈÈ³ÉÏñÖÇÄÜ»¥³âÅäÖÃ²ÎÊý

#define NET_DVR_GET_HIDDEN_INFORMATION_CAPABILITIES    6720 //Òþ²ØÐÅÏ¢ÅäÖÃÄÜÁ¦
#define NET_DVR_GET_HIDDEN_INFORMATION                 6721 //»ñÈ¡Òþ²ØÐÅÏ¢²ÎÊý
#define NET_DVR_SET_HIDDEN_INFORMATION                 6722 //ÉèÖÃÒþ²ØÐÅÏ¢²ÎÊý

#define	NET_DVR_GET_THERMOMETRY_SCHEDULE_CAPABILITIES	6750 //»ñÈ¡²âÎÂ¼ì²â²¼·ÀÊ±¼äÄÜÁ¦
#define	NET_DVR_GET_THERMOMETRY_SCHEDULE	6751	//»ñÈ¡²âÎÂ¼ì²â²¼·ÀÊ±¼äÅäÖÃ
#define	NET_DVR_SET_THERMOMETRY_SCHEDULE	6752	//ÉèÖÃ²âÎÂ¼ì²â²¼·ÀÊ±¼äÅäÖÃ
#define	NET_DVR_GET_TEMPERTURE_SCHEDULE_CAPABILITIES	6753 //»ñÈ¡ÎÂ²î²¼·ÀÊ±¼äÄÜÁ¦
#define	NET_DVR_GET_TEMPERTURE_SCHEDULE	6754	//»ñÈ¡ÎÂ²î²¼·ÀÊ±¼äÅäÖÃ
#define	NET_DVR_SET_TEMPERTURE_SCHEDULE	6755	//ÉèÖÃÎÂ²î²¼·ÀÊ±¼äÅäÖÃ
#define NET_DVR_GET_SEARCH_LOG_CAPABILITIES	    6756	//ÈÕÖ¾ÀàÐÍÖ§³ÖÄÜÁ¦

#define NET_DVR_GET_MB_POWERCTRLPARA            8000//»ñÈ¡Æô¶¯¿ØÖÆ²ÎÊý
#define    NET_DVR_SET_MB_POWERCTRLPARA            8001 //ÉèÖÃÆô¶¯¿ØÖÆ²ÎÊý
#define NET_DVR_GET_AUTOBACKUPPARA                8002//»ñÈ¡×Ô¶¯±¸·Ý²ÎÊý
#define NET_DVR_SET_AUTOBACKUPPARA                8003 //ÉèÖÃ×Ô¶¯±¸·Ý²ÎÊý
#define NET_DVR_GET_MB_GPSPARA                    8004//»ñÈ¡GPS²ÎÊý
#define NET_DVR_SET_MB_GPSPARA                    8005 //ÉèÖÃGPS²ÎÊý
#define NET_DVR_GET_MB_SENSORINPARA                8006//»ñÈ¡SENSOR²ÎÊý
#define NET_DVR_SET_MB_SENSORINPARA                8007 //ÉèÖÃSENSOR²ÎÊý
#define NET_DVR_GET_GSENSORPARA                    8008//»ñÈ¡GSENSOR²ÎÊý
#define NET_DVR_SET_GSENSORPARA                    8009 //ÉèÖÃGSENSOR²ÎÊý
#define NET_DVR_GET_MB_DOWNLOADSVRPARA            8010//»ñÈ¡ÏÂÔØ·þÎñÆ÷²ÎÊý
#define NET_DVR_SET_MB_DOWNLOADSVRPARA            8011//ÉèÖÃÏÂÔØ·þÎñÆ÷²ÎÊý
#define NET_DVR_GET_PLATERECOG_PARA                8012//»ñÈ¡³µÅÆÊ¶±ð²ÎÊý
#define NET_DVR_SET_PLATERECOG_PARA                8013//ÉèÖÃ³µÅÆÊ¶±ð²ÎÊý
#define NET_DVR_GET_ENFORCESYS_PARA                8014//»ñÈ¡³µÁ¾»ü²é²ÎÊý
#define NET_DVR_SET_ENFORCESYS_PARA                8015//ÉèÖÃ³µÁ¾»ü²é²ÎÊý
#define NET_DVR_GET_GPS_DATA                    8016 //»ñÈ¡GPSÊý¾Ý
#define NET_DVR_GET_ANALOG_ALARMINCFG            8017//»ñÈ¡Ä£Äâ±¨¾¯ÊäÈë²ÎÊý
#define NET_DVR_SET_ANALOG_ALARMINCFG            8018//ÉèÖÃÄ£Äâ±¨¾¯ÊäÈë²ÎÊý

//I¡¢K¡¢EÏµÁÐNVR²úÆ·Éý¼¶
#define NET_DVR_GET_PTZ_NOTIFICATION        8201//»ñÈ¡¶àÍ¨µÀÊÂ¼þÁª¶¯PTZ
#define NET_DVR_SET_PTZ_NOTIFICATION        8202//ÉèÖÃ¶àÍ¨µÀÊÂ¼þÁª¶¯PTZ
/*****************************µçÊÓÇ½ start****************************/
#define    NET_DVR_MATRIX_WALL_SET                    9001  //ÉèÖÃµçÊÓÇ½ÖÐÆÁÄ»²ÎÊý
#define    NET_DVR_MATRIX_WALL_GET                    9002  //»ñÈ¡µçÊÓÇ½ÖÐÆÁÄ»²ÎÊý
#define    NET_DVR_WALLWIN_GET                        9003  //µçÊÓÇ½ÖÐ»ñÈ¡´°¿Ú²ÎÊý
#define    NET_DVR_WALLWIN_SET                        9004  //µçÊÓÇ½ÖÐÉèÖÃ´°¿Ú²ÎÊý
#define    NET_DVR_WALLWINPARAM_SET                9005  //ÉèÖÃµçÊÓÇ½´°¿ÚÏà¹Ø²ÎÊý
#define    NET_DVR_WALLWINPARAM_GET                9006  //»ñÈ¡µçÊÓÇ½´°¿ÚÏà¹Ø²ÎÊý
#define NET_DVR_WALLSCENEPARAM_GET                9007  //ÉèÖÃ³¡¾°Ä£Ê½²ÎÊý
#define NET_DVR_WALLSCENEPARAM_SET                9008  //»ñÈ¡³¡¾°Ä£Ê½²ÎÊý
#define NET_DVR_MATRIX_GETWINSTATUS             9009  //»ñÈ¡´°¿Ú½âÂë×´Ì¬
#define    NET_DVR_GET_WINASSOCIATEDDEVINFO        9010  //µçÊÓÇ½ÖÐ»ñÈ¡¶ÔÓ¦×ÊÔ´ÐÅÏ¢
#define    NET_DVR_WALLOUTPUT_GET                    9011  //µçÊÓÇ½ÖÐ»ñÈ¡ÏÔÊ¾Êä³ö²ÎÊý
#define    NET_DVR_WALLOUTPUT_SET                    9012  //µçÊÓÇ½ÖÐÉèÖÃÏÔÊ¾Êä³ö²ÎÊý
#define NET_DVR_GET_UNITEDMATRIXSYSTEM          9013  //µçÊÓÇ½ÖÐ»ñÈ¡¶ÔÓ¦×ÊÔ´
#define NET_DVR_GET_WALL_CFG                    9014  //»ñÈ¡µçÊÓÇ½È«¾Ö²ÎÊý
#define NET_DVR_SET_WALL_CFG                    9015  //ÉèÖÃµçÊÓÇ½È«¾Ö²ÎÊý
#define NET_DVR_CLOSE_ALL_WND                    9016  //¹Ø±ÕËùÓÐ´°¿Ú
#define NET_DVR_SWITCH_WIN_TOP                  9017  //´°¿ÚÖÃ¶¥
#define NET_DVR_SWITCH_WIN_BOTTOM               9018  //´°¿ÚÖÃµ×

#define    NET_DVR_CLOSE_ALL_WND_V41                9019  //µçÊÓÇ½¹Ø±ÕËùÓÐ´°¿Úv41£¨ÓÐ¶à¸öµçÊÓÇ½£©
#define    NET_DVR_GET_WALL_WINDOW_V41                9020  //»ñÈ¡µçÊÓÇ½ÖÐµÄ´°¿Úv41
#define    NET_DVR_SET_WALL_WINDOW_V41                9021  //ÉèÖÃµçÊÓÇ½ÖÐµÄ´°¿Úv41
#define    NET_DVR_GET_CURRENT_SCENE_V41            9022  //»ñÈ¡µ±Ç°µçÊÓÇ½ÖÐÕýÔÚÊ¹ÓÃµÄ³¡¾°v41
#define    NET_DVR_GET_WALL_SCENE_PARAM_V41        9023  //»ñÈ¡µ±Ç°µçÊÓÇ½ÖÐÕýÔÚÊ¹ÓÃµÄ³¡¾°v41
#define    NET_DVR_SET_WALL_SCENE_PARAM_V41        9024  //ÉèÖÃµ±Ç°µçÊÓÇ½ÖÐÕýÔÚÊ¹ÓÃµÄ³¡¾°v41
#define NET_DVR_GET_MATRIX_LOGO_CFG             9025  //»ñÈ¡logo²ÎÊý
#define NET_DVR_SET_MATRIX_LOGO_CFG             9026  //ÉèÖÃlogo²ÎÊý
#define NET_DVR_GET_WIN_LOGO_CFG                9027  //»ñÈ¡´°¿Úlogo²ÎÊý
#define NET_DVR_SET_WIN_LOGO_CFG                9028  //ÉèÖÃ´°¿Úlogo²ÎÊý
#define NET_DVR_DELETE_LOGO                     9029  //É¾³ýlogo
#define NET_DVR_SET_DISPLAY_EFFECT_CFG            9030  //ÉèÖÃÏÔÊ¾Êä³öÐ§¹û²ÎÊýv41
#define NET_DVR_GET_DISPLAY_EFFECT_CFG            9031  //»ñÈ¡ÏÔÊ¾Êä³öÐ§¹û²ÎÊýv41
#define NET_DVR_DEC_PLAY_REMOTE_FILE            9032  //½âÂë²¥·ÅÔ¶³ÌÎÄ¼þ
#define NET_DVR_GET_WIN_ZOOM_STATUS             9033  //»ñÈ¡´°¿Úµç×Ó·Å´ó×´Ì¬
#define NET_DVR_GET_ALL_MATRIX_LOGOCFG          9034  //»ñÈ¡ËùÓÐlogo²ÎÊý

/*****************************µçÊÓÇ½ end******************************/

/*******************************LCDÆ´½ÓÆÁ begin******************************************/
#define NET_DVR_SIMULATE_REMOTE_CONTROL         9035    //Ä£ÄâÒ£¿Ø°´¼ü 2013-09-05
#define NET_DVR_SET_SCREEN_SIGNAL_CFG            9036    //ÉèÖÃÆÁÄ»ÐÅºÅÔ´²ÎÊý
#define    NET_DVR_GET_SCREEN_SIGNAL_CFG            9037    //»ñÈ¡ÆÁÄ»ÐÅºÅÔ´²ÎÊý
#define NET_DVR_SET_SCREEN_SPLICE_CFG              9038    //ÉèÖÃÆÁÄ»Æ´½Ó
#define    NET_DVR_GET_SCREEN_SPLICE_CFG            9039    //»ñÈ¡ÆÁÄ»Æ´½Ó
#define NET_DVR_GET_SCREEN_FAN_WORK_MODE         9040    //»ñÈ¡·çÉÈ¹¤×÷·½Ê½
#define NET_DVR_SET_SCREEN_FAN_WORK_MODE         9041    //ÉèÖÃ·çÉÈ¹¤×÷·½Ê½
#define NET_DVR_SHOW_SCREEN_WORK_STATUS          9044    //ÏÔÊ¾ÆÁÄ»×´Ì¬
#define NET_DVR_GET_VGA_CFG                      9045    //»ñÈ¡VGAÐÅºÅÅäÖÃ
#define NET_DVR_SET_VGA_CFG                      9046    //ÉèÖÃVGAÐÅºÅÅäÖÃ
#define NET_DVR_GET_SCREEN_MENU_CFG                9048   //»ñÈ¡ÆÁÄ»²Ëµ¥ÅäÖÃ
#define NET_DVR_SET_SCREEN_MENU_CFG              9049    //ÉèÖÃÆÁÄ»²Ëµ¥ÅäÖÃ
#define NET_DVR_SET_SCREEN_DISPLAY_CFG          9050    //ÉèÖÃÏÔÊ¾²ÎÊý 2013-08-28
#define    NET_DVR_GET_SCREEN_DISPLAY_CFG            9051    //»ñÈ¡ÏÔÊ¾²ÎÊý 2013-08-28

#define NET_DVR_SET_FUSION_CFG                    9052    //ÉèÖÃÍ¼ÏñÈÚºÏ²ÎÊý
#define NET_DVR_GET_FUSION_CFG                    9053    //»ñÈ¡Í¼ÏñÈÚºÏ²ÎÊý

#define NET_DVR_SET_PIP_CFG                      9060    //ÉèÖÃ»­ÖÐ»­²ÎÊý
#define    NET_DVR_GET_PIP_CFG                        9061    //»ñÈ¡»­ÖÐ»­²ÎÊý
#define NET_DVR_SET_DEFOG_LCD                      9073    //ÉèÖÃÍ¸Îí²ÎÊý
#define    NET_DVR_GET_DEFOG_LCD                    9074    //»ñÈ¡Í¸Îí²ÎÊý
#define NET_DVR_SHOW_IP                          9075    //ÏÔÊ¾IP
#define NET_DVR_SCREEN_MAINTENANCE_WALL            9076    //ÆÁÄ»Î¬Ç½
#define NET_DVR_SET_SCREEN_POS                  9077    //ÉèÖÃÆÁÄ»Î»ÖÃ²ÎÊý
#define    NET_DVR_GET_SCREEN_POS                    9078    //»ñÈ¡ÆÁÄ»Î»ÖÃ²ÎÊý
/*******************************LCDÆ´½ÓÆÁ end******************************************/

/*******************************LCDÆ´½ÓÆÁV1.2 begin******************************************/
#define    NET_DVR_SCREEN_INDEX_SET                9079    //ÆÁÄ»Ë÷ÒýÏà¹Ø²ÎÊýÉèÖÃ
#define    NET_DVR_SCREEN_INDEX_GET                9080    //ÆÁÄ»Ë÷ÒýÏà¹Ø²ÎÊý»ñÈ¡
#define NET_DVR_SCREEN_SPLICE_SET               9081    //ÉèÖÃÆÁÄ»Æ´½Ó²ÎÊý
#define NET_DVR_SCREEN_SPLICE_GET               9082    //»ñÈ¡ÆÁÄ»Æ´½Ó²ÎÊý
#define NET_DVR_SET_SCREEN_PARAM                9083    //ÉèÖÃÆÁÄ»Ïà¹Ø²ÎÊý
#define NET_DVR_GET_SCREEN_PARAM                9084    //»ñÈ¡ÆÁÄ»Ïà¹Ø²ÎÊý
#define NET_DVR_SET_SWITCH_CFG                  9085    //ÉèÖÃ¶¨Ê±¿ª¹Ø»ú²ÎÊý
#define NET_DVR_GET_SWITCH_CFG                  9086    //»ñÈ¡¶¨Ê±¿ª¹Ø»ú²ÎÊý
#define NET_DVR_SET_POWERON_DELAY_CFG           9087    //ÉèÖÃÑÓÊ±¿ª»ú²ÎÊý
#define NET_DVR_GET_POWERON_DELAY_CFG           9088    //»ñÈ¡ÑÓÊ±¿ª»ú²ÎÊý
#define    NET_DVR_SET_SCREEN_POSITION                9089    //ÉèÖÃÆÁÄ»Î»ÖÃ²ÎÊý
#define    NET_DVR_GET_SCREEN_POSITION                9090    //»ñÈ¡ÆÁÄ»Î»ÖÃ²ÎÊý
#define NET_DVR_SCREEN_SCENE_CONTROL            9091    //ÆÁÄ»³¡¾°¿ØÖÆ
#define NET_DVR_GET_CURRENT_SCREEN_SCENE        9092    //»ñÈ¡µ±Ç°ÆÁÄ»³¡¾°ºÅ
#define NET_DVR_GET_SCREEN_SCENE_PARAM          9093    //»ñÈ¡ÆÁÄ»³¡¾°Ä£Ê½²ÎÊý
#define NET_DVR_SET_SCREEN_SCENE_PARAM          9094    //ÉèÖÃÆÁÄ»³¡¾°Ä£Ê½²ÎÊý
#define NET_DVR_GET_EXTERNAL_MATRIX_RELATION    9095    //»ñÈ¡Íâ½Ó¾ØÕóÊäÈëÊä³ö¹ØÁª¹ØÏµ
#define NET_DVR_GET_LCD_AUDIO_CFG                9096     //»ñÈ¡LCDÆÁÄ»ÒôÆµ²ÎÊý
#define NET_DVR_SET_LCD_AUDIO_CFG                9097     //ÉèÖÃLCDÆÁÄ»ÒôÆµ²ÎÊý
#define NET_DVR_GET_LCD_WORK_STATE                9098     //»ñÈ¡LCDÆÁÄ»¹¤×÷×´Ì¬
#define NET_DVR_GET_BOOT_LOGO_CFG                9099    //»ñÈ¡LCDÆÁÄ»¿ª»úlogoÏÔÊ¾²ÎÊý
#define NET_DVR_SET_BOOT_LOGO_CFG                9100    //ÉèÖÃLCDÆÁÄ»¿ª»úlogoÏÔÊ¾²ÎÊý

/*******************************LCDÆ´½ÓÆÁV1.2 end ******************************************/
#define NET_DVR_GET_STREAM_DST_COMPRESSIONINFO    9101  //»ñÈ¡Ä¿±êÑ¹Ëõ²ÎÊý
#define NET_DVR_SET_STREAM_DST_COMPRESSIONINFO  9102  //ÉèÖÃÄ¿±êÑ¹Ëõ²ÎÊý
#define NET_DVR_GET_STREAM_TRANS_STATUS            9103  //»ñÈ¡Á÷×´Ì¬
#define NET_DVR_GET_DEVICE_TRANS_STATUS            9104  //»ñÈ¡Éè±¸×ªÂë×´Ì¬
#define NET_DVR_GET_ALLSTREAM_SRC_INFO          9105  //»ñÈ¡ËùÓÐÁ÷ÐÅÏ¢
#define NET_DVR_GET_BIG_SCREEN_AUDIO            9106  //»ñÈ¡´óÆÁÒôÆµÐÅÏ¢
#define NET_DVR_SET_BIG_SCREEN_AUDIO            9107  //ÉèÖÃ´óÆÁÒôÆµÐÅÏ¢
#define NET_DVR_GET_DEV_WORK_MODE                9108  //»ñÈ¡×ªÂëÉè±¸¹¤×÷Ä£Ê½
#define NET_DVR_SET_DEV_WORK_MODE                9109  //ÉèÖÃ×ªÂëÉè±¸¹¤×÷Ä£Ê½
#define NET_DVR_APPLY_TRANS_CHAN                9110  //°´Á÷IDÉêÇë×ªÂëÍ¨µÀ
#define NET_DVR_GET_DISPCHAN_CFG                9111  //ÅúÁ¿»ñÈ¡ÏÔÊ¾Í¨µÀ²ÎÊý
#define NET_DVR_SET_DISPCHAN_CFG                9112  //ÅúÁ¿ÉèÖÃÏÔÊ¾Í¨µÀ²ÎÊý

#define NET_DVR_GET_DEC_CHAN_STATUS                9113  //»ñÈ¡½âÂëÍ¨µÀ½âÂë×´Ì¬
#define NET_DVR_GET_DISP_CHAN_STATUS            9114  //»ñÈ¡ÏÔÊ¾Í¨µÀ×´Ì¬        
#define NET_DVR_GET_ALARMIN_STATUS                9115  //»ñÈ¡±¨¾¯ÊäÈë×´Ì¬
#define NET_DVR_GET_ALARMOUT_STATUS                9116  //»ñÈ¡±¨¾¯Êä³ö×´Ì¬
#define NET_DVR_GET_AUDIO_CHAN_STATUS            9117  //»ñÈ¡ÓïÒô¶Ô½²×´Ì¬

#define    NET_DVR_GET_VIDEO_AUDIOIN_CFG            9118   //»ñÈ¡ÊÓÆµµÄÒôÆµÊäÈë²ÎÊý
#define NET_DVR_SET_VIDEO_AUDIOIN_CFG            9119   //ÉèÖÃÊÓÆµµÄÒôÆµÊäÈë²ÎÊý

#define    NET_DVR_SET_BASEMAP_CFG                    9120  //ÉèÖÃµ×Í¼²ÎÊý
#define NET_DVR_GET_BASEMAP_CFG                    9121  //»ñÈ¡µ×Í¼²ÎÊý
#define NET_DVR_GET_VIRTUAL_SCREEN_CFG          9122  //»ñÈ¡³¬¸ßÇåÊäÈë×ÓÏµÍ³²ÎÊý
#define NET_DVR_SET_VIRTUAL_SCREEN_CFG          9123  //ÉèÖÃ³¬¸ßÇåÊäÈë×ÓÏµÍ³²ÎÊý
#define NET_DVR_GET_BASEMAP_WIN_CFG                9124  //»ñÈ¡µ×Í¼´°¿Ú²ÎÊý
#define NET_DVR_SET_BASEMAP_WIN_CFG                9125  //ÉèÖÃµ×Í¼´°¿Ú²ÎÊý
#define NET_DVR_DELETE_PICTURE                    9126  //É¾³ýµ×Í¼
#define NET_DVR_GET_BASEMAP_PIC_INFO            9127  //»ñÈ¡µ×Í¼Í¼Æ¬ÐÅÏ¢
#define    NET_DVR_SET_BASEMAP_WIN_CFG_V40         9128  //ÉèÖÃµ×Í¼´°¿Ú²ÎÊýV40
#define NET_DVR_GET_BASEMAP_WIN_CFG_V40         9129  //»ñÈ¡µ×Í¼´°¿Ú²ÎÊýV40

#define NET_DVR_GET_DEC_VCA_CFG                    9130    //»ñÈ¡½âÂëÆ÷ÖÇÄÜ±¨¾¯²ÎÊý
#define NET_DVR_SET_DEC_VCA_CFG                    9131    //ÉèÖÃ½âÂëÆ÷ÖÇÄÜ±¨¾¯²ÎÊý

#define NET_DVR_SET_VS_INPUT_CHAN_INIT_ALL  9132  //³õÊ¼»¯ÐéÄâÆÁËùÓÐÊäÈëÍ¨µÀ
#define NET_DVR_GET_VS_INPUT_CHAN_INIT_ALL  9133  //»ñÈ¡ÐéÄâÆÁËùÓÐÊäÈëÍ¨µÀ³õÊ¼»¯²ÎÊý
#define NET_DVR_GET_VS_INPUT_CHAN_INIT 9134  //»ñÈ¡ÐéÄâÆÁµ¥¸öÊäÈëÍ¨µÀ³õÊ¼»¯²ÎÊý
#define NET_DVR_GET_VS_INPUT_CHAN_CFG  9135  //»ñÈ¡ÐéÄâÆÁÊäÈëÍ¨µÀÅäÖÃ²ÎÊý

#define NET_DVR_GET_TERMINAL_CONFERENCE_STATUS	9136	//»ñÈ¡ÖÕ¶Ë»áÒé×´Ì¬
#define NET_DVR_GET_TERMINAL_INPUT_CFG_CAP		9137	//»ñÈ¡ÖÕ¶ËÊäÈë²ÎÊýÄÜÁ¦
#define NET_DVR_GET_TERMINAL_INPUT_CFG			9138	//»ñÈ¡ÖÕ¶ËÊÓÆµ»áÒéÊäÈë²ÎÊý
#define NET_DVR_SET_TERMINAL_INPUT_CFG			9139	//ÉèÖÃÖÕ¶ËÊÓÆµ»áÒéÊäÈë²ÎÊý

#define NET_DVR_GET_CONFERENCE_REGION_CAP        9140    //»ñÈ¡ÖÕ¶Ë»áÒéÇøÓòÄÜÁ¦
#define NET_DVR_GET_CONFERENCE_REGION            9141    //»ñÈ¡ÖÕ¶Ë»áÒéÇøÓò²ÎÊý
#define NET_DVR_SET_CONFERENCE_REGION            9142    //ÉèÖÃÖÕ¶Ë»áÒéÇøÓò²ÎÊý
#define NET_DVR_GET_TERMINAL_CALL_CFG_CAP        9143    //»ñÈ¡ÖÕ¶Ëºô½ÐÅäÖÃÄÜÁ¦
#define NET_DVR_GET_TERMINAL_CALL_CFG            9144    //»ñÈ¡ÖÕ¶Ëºô½Ð²ÎÊý
#define NET_DVR_SET_TERMINAL_CALL_CFG            9145    //ÉèÖÃÖÕ¶Ëºô½Ð²ÎÊý
#define NET_DVR_GET_TERMINAL_CTRL_CAP            9146    //»ñÈ¡ÖÕ¶Ëºô½Ð¿ØÖÆÄÜÁ¦
#define NET_DVR_TERMINAL_CTRL                    9147    //ÖÕ¶Ëºô½Ð¿ØÖÆ
#define    NET_DVR_GET_CALL_QUERY_CAP                9148    //»ñÈ¡»áÒé²éÕÒÄÜÁ¦
#define NET_DVR_GET_CALLINFO_BY_COND            9149    //°´Ìõ¼þ²éÑ¯ºô½Ð¼ÇÂ¼

#define    NET_DVR_SET_FUSION_SCALE                9150    //ÉèÖÃÍ¼ÏñÈÚºÏ¹æÄ£
#define NET_DVR_GET_FUSION_SCALE                9151    //»ñÈ¡Í¼ÏñÈÚºÏ¹æÄ£

#define NET_DVR_GET_VCS_CAP                        9152    //»ñÈ¡MCUÄÜÁ¦¼¯


#define NET_DVR_GET_TERMINAL_GK_CFG_CAP            9153    //»ñÈ¡ÖÕ¶Ë×¢²áGKÄÜÁ¦
#define NET_DVR_GET_TERMINAL_GK_CFG                9154    //»ñÈ¡ÖÕ¶Ë×¢²áGK²ÎÊý
#define NET_DVR_SET_TERMINAL_GK_CFG                9155    //ÉèÖÃÖÕ¶Ë×¢²áGK²ÎÊý
#define NET_DVR_GET_MCU_CONFERENCESEARCH_CAP    9156    //»ñÈ¡MCUÉè±¸µÄÄÜÁ¦
#define NET_DVR_SET_VS_INPUT_CHAN_CFG  9157  //ÉèÖÃÐéÄâÆÁÊäÈëÍ¨µÀÅäÖÃ²ÎÊý

#define    NET_DVR_GET_LLDP_CFG                    9160    //»ñÈ¡LLDP²ÎÊý
#define    NET_DVR_SET_LLDP_CFG                    9161    //ÉèÖÃLLDP²ÎÊý
#define NET_DVR_GET_LLDP_CAP                    9162    //»ñÈ¡LLDPÄÜÁ¦¼¯
#define    NET_DVR_GET_FIBER_CONVERT_BASIC_INFO    9163    //»ñÈ¡¹âÏËÊÕ·¢Æ÷»ù±¾ÐÅÏ¢
#define    NET_DVR_GET_FIBER_CONVERT_WORK_STATE    9164    //»ñÈ¡¹âÏËÊÕ·¢Æ÷¹¤×÷×´
#define    NET_DVR_GET_FIBER_CONVERT_TOPOLOGY      9165    //»ñÈ¡¹âÏËÊÕ·¢Æ÷ÍØÆËÐÅÏ¢
#define    NET_DVR_GET_FC_PORT_REMARKS                9166    //»ñÈ¡¹âÏËÊÕ·¢Æ÷¶Ë¿Ú×¢ÊÍ²ÎÊý
#define    NET_DVR_SET_FC_PORT_REMARKS                9167    //ÉèÖÃ¹âÏËÊÕ·¢Æ÷¶Ë¿Ú×¢ÊÍ²ÎÊý
#define NET_DVR_GET_PORT_REMARKS_CAP            9168    //»ñÈ¡¹âÏËÊÕ·¢Æ÷¶Ë¿Ú×¢ÊÍÄÜÁ¦¼¯

#define NET_DVR_GET_MCU_CONFERENCECONTROL_CAP   9169    //»ñÈ¡»áÒé¿ØÖÆÄÜÁ¦
#define NET_DVR_GET_MCU_TERMINALCONTROL_CAP     9170    //»ñÈ¡ÖÕ¶Ë¿ØÖÆÄÜÁ¦
#define NET_DVR_GET_MCU_TERIMINALGROUP_CAP      9171    //»ñÈ¡ÖÕ¶Ë·Ö×éÄÜÁ¦
#define NET_DVR_GET_MCU_TERMINAL_CAP            9174    //»ñÈ¡ÖÕ¶Ë¹ÜÀíÄÜÁ¦
#define NET_DVR_GET_MCU_CONFERENCE_CAP          9175    //»ñÈ¡»áÒéÄÜÁ¦
#define NET_DVR_GET_MCU_GK_CFG_CAP              9176    //»ñÈ¡MCUGKÅäÖÃÄÜÁ¦
#define NET_DVR_GET_MCU_GK_SERVER_CAP           9177    //»ñÈ¡MCUGK·þÎñÄÜÁ¦

#define NET_DVR_GET_EDID_CFG_FILE_INFO  9178  //»ñÈ¡EDIDÅäÖÃÎÄ¼þÐÅÏ¢
#define NET_DVR_GET_EDID_CFG_FILE_INFO_LIST  9179  //»ñÈ¡ËùÓÐEDIDÅäÖÃÎÄ¼þÐÅÏ¢
#define NET_DVR_SET_EDID_CFG_FILE_INFO  9180  //ÉèÖÃEDIDÅäÖÃÎÄ¼þÐÅÏ¢
#define NET_DVR_DEL_EDID_CFG_FILE_INFO  9181  //É¾³ýEDIDÅäÖÃÎÄ¼þÐÅÏ¢£¨°üÀ¨ÎÄ¼þ£©
#define NET_DVR_GET_EDID_CFG_FILE_INFO_CAP  9182  //EDIDÅäÖÃÎÄ¼þÐÅÏ¢ÄÜÁ¦¼¯

#define NET_DVR_GET_SUBWND_DECODE_OSD  9183  //»ñÈ¡×Ó´°¿Ú½âÂëOSDÐÅÏ¢
#define NET_DVR_GET_SUBWND_DECODE_OSD_ALL  9184  //»ñÈ¡ËùÓÐ×Ó´°¿Ú½âÂëOSDÐÅÏ¢
#define NET_DVR_SET_SUBWND_DECODE_OSD  9185  //ÉèÖÃ×Ó´°¿Ú½âÂëOSDÐÅÏ¢
#define NET_DVR_GET_SUBWND_DECODE_OSD_CAP  9186  //»ñÈ¡×Ó´°¿Ú½âÂëOSDÐÅÏ¢ÄÜÁ¦¼¯

#define NET_DVR_GET_OUTPUT_PIC_INFO             9200    //»ñÈ¡Êä³ö¿ÚÍ¼Æ¬²ÎÊý
#define NET_DVR_SET_OUTPUT_PIC_INFO             9201    //ÉèÖÃÊä³ö¿ÚÍ¼Æ¬²ÎÊý
#define NET_DVR_GET_OUTPUT_PIC_WIN_CFG          9202    //»ñÈ¡Êä³ö¿ÚÍ¼Æ¬´°¿Ú²ÎÊý
#define NET_DVR_SET_OUTPUT_PIC_WIN_CFG          9203    //ÉèÖÃÊä³ö¿ÚÍ¼Æ¬´°¿Ú²ÎÊý
#define NET_DVR_GET_OUTPUT_ALL_PIC_WIN_CFG      9204    //»ñÈ¡Êä³ö¿ÚËùÓÐÍ¼Æ¬´°¿Ú²ÎÊý
#define NET_DVR_DELETE_OUPUT_PIC                9205    //É¾³ýÊä³ö¿ÚÍ¼Æ¬
#define NET_DVR_GET_OUTPUT_OSD_CFG              9206    //»ñÈ¡Êä³ö¿ÚOSD²ÎÊý
#define NET_DVR_SET_OUTPUT_OSD_CFG              9207    //ÉèÖÃÊä³ö¿ÚOSD²ÎÊý
#define NET_DVR_GET_OUTPUT_ALL_OSD_CFG          9208    //»ñÈ¡Êä³ö¿ÚËùÓÐOSD²ÎÊý
#define NET_DVR_GET_CHAN_RELATION               9209    //»ñÈ¡±àÂëÍ¨µÀ¹ØÁª×ÊÔ´²ÎÊý
#define NET_DVR_SET_CHAN_RELATION               9210    //ÉèÖÃ±àÂëÍ¨µÀ¹ØÁª×ÊÔ´²ÎÊý
#define NET_DVR_GET_ALL_CHAN_RELATION           9211    //»ñÈ¡ËùÓÐ±àÂëÍ¨µÀ¹ØÁª×ÊÔ´²ÎÊý
#define NET_DVR_GET_NS_RING_CFG                    9212    //»ñÈ¡¹âÏË°å»·ÍøÅäÖÃ
#define NET_DVR_SET_NS_RING_CFG                   9213    //ÉèÖÃ¹âÏË°å»·ÍøÅäÖÃ
#define NET_DVR_GET_NS_RING_STATUS              9214    //»ñÈ¡¹âÏË°å»·Íø×´Ì¬
#define NET_DVR_GET_OPTICAL_PORT_INFO            9220    //»ñÈ¡¹â¿ÚÐÅÏ¢
#define NET_DVR_SET_OPTICAL_PORT_INFO            9221    //ÉèÖÃ¹â¿ÚÐÅÏ¢
#define NET_DVR_GET_OPTICAL_CHAN_RELATE_CFG        9222    //»ñÈ¡±àÂëÍ¨µÀ¹ØÁª¹â¿ÚÊäÈëÔ´²ÎÊý
#define NET_DVR_SET_OPTICAL_CHAN_RELATE_CFG        9223    //ÉèÖÃ±àÂëÍ¨µÀ¹ØÁª¹â¿ÚÊäÈëÔ´²ÎÊý
#define  NET_DVR_GET_WIN_ROAM_SWITCH_CFG        9224    //»ñÈ¡½âÂëÆ÷´°¿ÚÂþÓÎ¿ª¹Ø²ÎÊý
#define  NET_DVR_SET_WIN_ROAM_SWITCH_CFG        9225    //ÉèÖÃ½âÂëÆ÷´°¿ÚÂþÓÎ¿ª¹Ø²ÎÊý
#define    NET_DVR_START_SCREEN_CRTL                9226    //¿ªÊ¼ÆÁÄ»¿ØÖÆ
#define    NET_DVR_GET_SCREEN_FLIE_LIST            9227    //»ñÈ¡ÆÁÄ»ÎÄ¼þÁÐ±í
#define    NET_DVR_GET_SCREEN_FILEINFO                9228    //»ñÈ¡ÆÁÄ»ÎÄ¼þÐÅÏ¢²ÎÊý
#define    NET_DVR_SET_SCREEN_FILEINFO             9229    //ÉèÖÃÆÁÄ»ÎÄ¼þÐÅÏ¢²ÎÊý

/*******************************Ð¡¼ä¾àLEDÏÔÊ¾ÆÁ begin***************************************/
#define NET_DVR_GET_LED_OUTPUT_CFG                9230    //»ñÈ¡·¢ËÍ¿¨Êä³ö²ÎÊý
#define NET_DVR_SET_LED_OUTPUT_CFG                9231    //ÉèÖÃ·¢ËÍ¿¨Êä³ö²ÎÊý
#define NET_DVR_GET_LED_OUTPUT_PORT_CFG            9232    //»ñÈ¡LED·¢ËÍ¿¨Êä³ö¶Ë¿Ú²ÎÊý
#define NET_DVR_SET_LED_OUTPUT_PORT_CFG            9233    //ÉèÖÃLED·¢ËÍ¿¨Êä³ö¶Ë¿Ú²ÎÊý
#define NET_DVR_GET_LED_DISPLAY_AREA_CFG        9234    //»ñÈ¡LED·¢ËÍ¿¨ÏÔÊ¾ÇøÓò
#define NET_DVR_SET_LED_DISPLAY_AREA_CFG        9235    //ÉèÖÃLED·¢ËÍ¿¨ÏÔÊ¾ÇøÓò
#define NET_DVR_GET_LED_PORT_CFG                9236    //»ñÈ¡LED·¢ËÍ¿¨¶Ë¿Ú²ÎÊý
#define NET_DVR_SET_LED_PORT_CFG                9237    //ÉèÖÃLED·¢ËÍ¿¨¶Ë¿Ú²ÎÊý
#define NET_DVR_GET_LED_DISPLAY_CFG                9238    //»ñÈ¡LED·¢ËÍ¿¨ÏÔÊ¾²ÎÊý
#define NET_DVR_SET_LED_DISPLAY_CFG                9239    //ÉèÖÃLED·¢ËÍ¿¨ÏÔÊ¾²ÎÊý
#define NET_DVR_GET_ALL_LED_PORT_CFG            9240    //»ñÈ¡LED·¢ËÍ¿¨Ä³¸öÊä³ö¶ÔÓ¦
#define NET_DVR_SAVE_LED_CONFIGURATION            9241    //²ÎÊý¹Ì»¯
#define NET_DVR_GET_LED_TEST_SIGNAL_CFG            9242    //»ñÈ¡LEDÆÁ²âÊÔÐÅºÅ²ÎÊý
#define NET_DVR_SET_LED_TEST_SIGNAL_CFG            9243    //ÉèÖÃLEDÆÁ²âÊÔÐÅºÅ²ÎÊý
#define NET_DVR_GET_LED_NOSIGNAL_CFG            9244    //»ñÈ¡LEDÆÁÎÞÐÅºÅÏÔÊ¾Ä£Ê½²ÎÊý
#define NET_DVR_SET_LED_NOSIGNAL_CFG            9245    //ÉèÖÃLEDÆÁÎÞÐÅºÅÏÔÊ¾Ä£Ê½²ÎÊý
#define NET_DVR_GET_LED_INPUT_CFG                9246    //»ñÈ¡LED·¢ËÍ¿¨ÊäÈë²ÎÊý
#define NET_DVR_SET_LED_INPUT_CFG                9247    //ÉèÖÃLED·¢ËÍ¿¨ÊäÈë²ÎÊý
#define NET_DVR_GET_LED_RECV_GAMMA_CFG            9248    //»ñÈ¡½ÓÊÕ¿¨GAMMA±í²ÎÊý
#define NET_DVR_SET_LED_RECV_GAMMA_CFG            9249    //ÉèÖÃ½ÓÊÕ¿¨GAMMA±í²ÎÊý
#define NET_DVR_GET_LED_RECV_CFG                9250    //»ñÈ¡½ÓÊÕ¿¨»ù±¾²ÎÊý
#define NET_DVR_SET_LED_RECV_CFG                9251    //ÉèÖÃ½ÓÊÕ¿¨»ù±¾²ÎÊý
#define NET_DVR_GET_LED_RECV_ADVANCED_CFG        9252    //»ñÈ¡½ÓÊÕ¿¨¸ß¼¶²ÎÊý
#define NET_DVR_SET_LED_RECV_ADVANCED_CFG        9253    //ÉèÖÃ½ÓÊÕ¿¨¸ß¼¶²ÎÊý
#define NET_DVR_GET_LED_SCREEN_DISPLAY_CFG        9254    //»ñÈ¡LEDÆÁÏÔÊ¾²ÎÊý
#define NET_DVR_SET_LED_SCREEN_DISPLAY_CFG        9255    //ÉèÖÃLEDÆÁÏÔÊ¾²ÎÊý
/*******************************Ð¡¼ä¾àLEDÏÔÊ¾ÆÁ end*****************************************/

#define    NET_DVR_GET_SCREEN_CONFIG               9260    //»ñÈ¡ÆÁÄ»·þÎñÆ÷²ÎÊý
#define    NET_DVR_SET_SCREEN_CONFIG               9261    //ÉèÖÃÆÁÄ»·þÎñÆ÷²ÎÊý
#define NET_DVR_GET_SCREEN_CONFIG_CAP              9262    //»ñÈ¡ÆÁÄ»·þÎñÆ÷²ÎÊýÄÜÁ¦¼¯

#define    NET_DVR_GET_SCHEDULE_PUBLISH_PROGRESS    9271    //»ñÈ¡ÈÕ³Ì·¢²¼½ø¶È
#define    NET_DVR_GET_PUBLISH_UPGRADE_PROGRESS    9272    //»ñÈ¡ÐÅÏ¢·¢²¼ÖÕ¶ËÉý¼¶½ø¶È

#define NET_DVR_GET_INPUT_BOARD_CFG                9281    //»ñÈ¡ÊäÈë°åÅäÖÃÐÅÏ¢
#define NET_DVR_GET_INPUT_BOARD_CFG_LIST        9282    //»ñÈ¡ÊäÈë°åÅäÖÃÐÅÏ¢ÁÐ±í
#define NET_DVR_SET_INPUT_BOARD_CFG                9283    //ÉèÖÃÊäÈë°åÅäÖÃÐÅÏ¢

#define NET_DVR_GET_INPUT_SOURCE_TEXT_CAP    9284            //»ñÈ¡ÊäÈëÔ´×Ö·ûµþ¼ÓÄÜÁ¦
#define NET_DVR_GET_INPUT_SOURCE_TEXT_CFG    9285            //»ñÈ¡ÊäÈëÔ´×Ö·ûµþ¼Ó²ÎÊý
#define NET_DVR_GET_INPUT_SOURCE_TEXT_CFG_LSIT 9286        //»ñÈ¡ÊäÈëÔ´×Ö·ûµþ¼Ó²ÎÊýÁÐ±í
#define NET_DVR_SET_INPUT_SOURCE_TEXT_CFG    9287            //ÉèÖÃÊäÈëÔ´×Ö·ûµþ¼Ó²ÎÊý
#define NET_DVR_SET_INPUT_SOURCE_TEXT_CFG_LIST 9288        //ÉèÖÃÊäÈëÔ´×Ö·ûµþ¼Ó²ÎÊýÁÐ±í
#define NET_DVR_GET_INPUT_SOURCE_RESOLUTION_CAP    9289    //»ñÈ¡ÊäÈëÔ´×Ô¶¨Òå·Ö±æÂÊÄÜÁ¦
#define NET_DVR_GET_INPUT_SOURCE_RESOLUTION_CFG    9290    //»ñÈ¡ÊäÈëÔ´×Ô¶¨Òå·Ö±æÂÊ²ÎÊý
#define NET_DVR_GET_INPUT_SOURCE_RESOLUTION_CFG_LIST    9291 //»ñÈ¡ÊäÈëÔ´×Ô¶¨Òå·Ö±æÂÊÁÐ±í
#define NET_DVR_SET_INPUT_SOURCE_RESOLUTION_CFG    9292    //ÉèÖÃÊäÈëÔ´×Ô¶¨Òå·Ö±æÂÊ²ÎÊý
#define NET_DVR_SET_INPUT_SOURCE_RESOLUTION_CFG_LIST  9293  //ÉèÖÃÊäÈëÔ´×Ô¶¨Òå·Ö±æÂÊ²ÎÊý
#define NET_DVR_GET_LED_AREA_INFO_LIST  9295  //»ñÈ¡LEDÇøÓòÁÐ±í

#define NET_DVR_GET_DISPINPUT_CFG  9296  //»ñÈ¡ÏÔÊ¾ÊäÈë²ÎÊý
#define NET_DVR_GET_DISPINPUT_CFG_LIST  9297  //»ñÈ¡ËùÓÐÏÔÊ¾ÊäÈë²ÎÊý
#define NET_DVR_SET_DISPINPUT_CFG  9298  //ÉèÖÃÏÔÊ¾ÊäÈë²ÎÊý
#define NET_DVR_GET_DISPINPUT_CFG_CAP  9299  //»ñÈ¡ÏÔÊ¾ÊäÈë²ÎÊýÄÜÁ¦¼¯
#define NET_DVR_GET_CURRENT_VALID_PORT          9300    //»ñÈ¡µ±Ç°ÓÐÐ§µÄ,¿ÉÒÔÁ¬½ÓµÄ¶Ë¿Ú

#define    NET_DVR_SET_ONLINE_UPGRADE                9301    //ÔÊÐíÔÚÏßÉý¼¶
#define NET_DVR_GET_ONLINEUPGRADE_PROGRESS      9302    //»ñÈ¡ÔÚÏßÉý¼¶½ø¶È
#define    NET_DVR_GET_FIRMWARECODE                9303    //»ñÈ¡Ê¶±ðÂë
#define NET_DVR_GET_ONLINEUPGRADE_SERVER        9304    //»ñÈ¡Éý¼¶·þÎñÆ÷×´Ì¬
#define NET_DVR_GET_ONLINEUPGRADE_VERSION       9305    //»ñÈ¡ÐÂ°æ±¾ÐÅÏ¢
#define NET_DVR_GET_RECOMMEN_VERSION            9306    //¼ì²âÊÇ·ñÍÆ¼öÉý¼¶µ½´Ë°æ±¾
#define NET_DVR_GET_ONLINEUPGRADE_ABILITY       9309    //»ñÈ¡ÔÚÏßÉý¼¶ÄÜÁ¦¼¯

#define NET_DVR_GET_RS485_WORK_MODE             10001 //»ñÈ¡RS485´®¿Ú¹¤×÷Ä£Ê½
#define NET_DVR_SET_RS485_WORK_MODE             10002 //ÉèÖÃRS485´®¿Ú¹¤×÷Ä£Ê½
#define NET_DVR_GET_SPLITTER_TRANS_CHAN_CFG     10003 //»ñÈ¡Âë·ÖÆ÷Í¸Ã÷Í¨µÀ²ÎÊý
#define NET_DVR_SET_SPLITTER_TRANS_CHAN_CFG     10004 //ÉèÖÃÂë·ÖÆ÷Í¸Ã÷Í¨µÀ²ÎÊý

#define  NET_DVR_GET_SIP_CFG                    11001   //IP¿ÉÊÓ»¯»ú»ñÈ¡SIP²ÎÊý
#define  NET_DVR_SET_SIP_CFG                    11002   //IP¿ÉÊÓ»¯»úÉèÖÃSIP²ÎÊý
#define  NET_DVR_GET_IP_VIEW_DEVCFG                11003   //»ñÈ¡IP¶Ô½²·Ö»úÅäÖÃ
#define  NET_DVR_SET_IP_VIEW_DEVCFG                11004   //ÉèÖÃIP¶Ô½²·Ö»úÅäÖÃ
#define  NET_DVR_GET_IP_VIEW_AUDIO_CFG            11005   //»ñÈ¡IP¶Ô½²·Ö»úÒôÆµ²ÎÊý
#define  NET_DVR_SET_IP_VIEW_AUDIO_CFG            11006   //ÉèÖÃIP¶Ô½²·Ö»úÒôÆµ²ÎÊý
#define     NET_DVR_GET_IP_VIEW_CALL_CFG            11007   //»ñÈ¡IP¶Ô½²·Ö»úºô½Ð²ÎÊý
#define  NET_DVR_SET_IP_VIEW_CALL_CFG            11008   //ÉèÖÃIP¶Ô½²·Ö»úºô½Ð²ÎÊý
#define     NET_DVR_GET_AUDIO_LIMIT_ALARM_CFG        11009    //»ñÈ¡ÉùÒô³¬ÏÞÅäÖÃ²ÎÊý
#define     NET_DVR_SET_AUDIO_LIMIT_ALARM_CFG        11010    //ÉèÖÃÉùÒô³¬ÏÞÅäÖÃ²ÎÊý
#define     NET_DVR_GET_BUTTON_DOWN_ALARM_CFG        11011    //»ñÈ¡°´Å¥°´ÏÂ¸æ¾¯ÅäÖÃ²ÎÊý
#define     NET_DVR_SET_BUTTON_DOWN_ALARM_CFG        11012    //ÉèÖÃ°´Å¥°´ÏÂ¸æ¾¯ÅäÖÃ²ÎÊý

#define  NET_DVR_GET_ISCSI_CFG                  11070   // »ñÈ¡ISCSI´æ´¢ÅäÖÃÐ­Òé 
#define  NET_DVR_SET_ISCSI_CFG                  11071   // »ñÈ¡ISCSI´æ´¢ÅäÖÃÐ­Òé 

#define NET_DVR_GET_SECURITYMODE                12004   //»ñÈ¡µ±Ç°°²È«Ä£Ê½
//2013-11-21 »ñÈ¡Éè±¸µ±Ç°µÄÎÂ¶ÈºÍÊª¶È
#define  NET_DVR_GET_TEMP_HUMI                  12005

//2014-02-15 ÃñÓÃIPC×Ô¶¯»¯²âÊÔÏîÄ¿
#define  NET_DVR_SET_ALARMSOUNDMODE             12006   //ÉèÖÃ±¨¾¯ÉùÒôÄ£Ê½
#define  NET_DVR_GET_ALARMSOUNDMODE             12007   //»ñÈ¡±¨¾¯ÉùÒôÄ£Ê½

#define    NET_DVR_SET_IPDEVICE_ACTIVATED       13000//Í¨¹ýNVR¼¤»îÇ°¶ËÉè±¸
#define NET_DVR_GET_DIGITAL_CHAN_SECURITY_STATUS    13001   //»ñÈ¡Êý×ÖÍ¨µÀ¶ÔÓ¦Éè±¸°²È«×´Ì¬
#define    NET_DVR_GET_ACTIVATE_IPC_ABILITY     13003    //»ñÈ¡NVR¼¤»îIPCÄÜÁ¦¼¯


/*******************************Â¥Óî¿ÉÊÓ¶Ô½²»ú start***********************************/
#define NET_DVR_GET_VIDEO_INTERCOM_DEVICEID_CFG  16001  //»ñÈ¡¿ÉÊÓ¶Ô½²Éè±¸±àºÅ
#define NET_DVR_SET_VIDEO_INTERCOM_DEVICEID_CFG  16002  //ÉèÖÃ¿ÉÊÓ¶Ô½²Éè±¸±àºÅ
#define NET_DVR_SET_PRIVILEGE_PASSWORD           16003  //ÉèÖÃÈ¨ÏÞÃÜÂëÅäÖÃÐÅÏ¢
#define NET_DVR_GET_OPERATION_TIME_CFG           16004  //»ñÈ¡²Ù×÷Ê±¼äÅäÖÃ
#define NET_DVR_SET_OPERATION_TIME_CFG           16005  //ÉèÖÃ²Ù×÷Ê±¼äÅäÖÃ
#define NET_DVR_GET_VIDEO_INTERCOM_RELATEDEV_CFG 16006  //»ñÈ¡¹ØÁªÍøÂçÉè±¸²ÎÊý
#define NET_DVR_SET_VIDEO_INTERCOM_RELATEDEV_CFG 16007  //ÉèÖÃ¹ØÁªÍøÂçÉè±¸²ÎÊý
#define NET_DVR_REMOTECONTROL_NOTICE_DATA        16008  //¹«¸æÐÅÏ¢ÏÂ·¢
#define NET_DVR_REMOTECONTROL_GATEWAY            16009  //Ô¶³Ì¿ªËø
#define NET_DVR_REMOTECONTROL_OPERATION_AUTH     16010  //²Ù×÷È¨ÏÞÑéÖ¤

#define NET_DVR_GET_VIDEO_INTERCOM_IOIN_CFG      16016  //»ñÈ¡IOÊäÈë²ÎÊý
#define NET_DVR_SET_VIDEO_INTERCOM_IOIN_CFG      16017  //ÉèÖÃIOÊäÈë²ÎÊý
#define NET_DVR_GET_VIDEO_INTERCOM_IOOUT_CFG     16018  //»ñÈ¡IOÊä³ö²ÎÊý
#define NET_DVR_SET_VIDEO_INTERCOM_IOOUT_CFG     16019  //ÉèÖÃIOÊä³ö²ÎÊý
#define NET_DVR_GET_ELEVATORCONTROL_CFG          16020  //»ñÈ¡ÌÝ¿ØÆ÷²ÎÊý
#define NET_DVR_SET_ELEVATORCONTROL_CFG          16021  //ÉèÖÃÌÝ¿ØÆ÷²ÎÊý
#define NET_DVR_GET_VIDEOINTERCOM_STREAM         16022  //»ñÈ¡¿ÉÊÓ¶Ô½²Á÷Í¨µÀ²ÎÊý
#define NET_DVR_SET_VIDEOINTERCOM_STREAM         16023  //ÉèÖÃ¿ÉÊÓ¶Ô½²Á÷Í¨µÀ²ÎÊý
#define NET_DVR_GET_WDR_CFG                      16024  //»ñÈ¡¿í¶¯Ì¬²ÎÊýÅäÖÃ
#define NET_DVR_SET_WDR_CFG                      16025  //ÉèÖÃ¿í¶¯Ì¬²ÎÊýÅäÖÃ
#define NET_DVR_GET_VIS_DEVINFO                  16026  //»ñÈ¡¿ÉÉè±¸±àºÅÐÅÏ¢
#define NET_DVR_GET_VIS_REGISTER_INFO            16027  //»ñÈ¡¿ÉÉè±¸×¢²áµÄÉè±¸ÐÅÏ¢
#define NET_DVR_GET_ELEVATORCONTROL_CFG_V40      16028  //»ñÈ¡ÌÝ¿ØÆ÷²ÎÊý-À©Õ¹
#define NET_DVR_SET_ELEVATORCONTROL_CFG_V40      16029  //ÉèÖÃÌÝ¿ØÆ÷²ÎÊý-À©Õ¹
#define NET_DVR_GET_CALL_ROOM_CFG                 16030  //»ñÈ¡°´¼üºô½Ð×¡»§ÅäÖÃ
#define NET_DVR_SET_CALL_ROOM_CFG                 16031  //ÉèÖÃ°´¼üºô½Ð×¡»§ÅäÖÃ
#define NET_DVR_VIDEO_CALL_SIGNAL_PROCESS        16032  //¿ÉÊÓ»°¶Ô½²ÐÅÁî´¦Àí
#define NET_DVR_GET_CALLER_INFO                  16033  //»ñÈ¡Ö÷½Ð³¤ºÅÐÅÏ¢
#define NET_DVR_GET_CALL_STATUS                  16034  //»ñÈ¡Í¨»°×´Ì¬
#define NET_DVR_GET_SERVER_DEVICE_INFO           16035  //»ñÈ¡Éè±¸ÁÐ±í
#define NET_DVR_SET_CALL_SIGNAL                  16036  //¿ÉÊÓ¶Ô½²ÊÖ»ú¶Ë·¢ËÍÐÅÁî
#define NET_DVR_GET_VIDEO_INTERCOM_ALARM_CFG       16037    //»ñÈ¡¿ÉÊÓ¶Ô½²±¨¾¯ÊÂ¼þ²ÎÊý
#define NET_DVR_SET_VIDEO_INTERCOM_ALARM_CFG       16038    //ÉèÖÃ¿ÉÊÓ¶Ô½²±¨¾¯ÊÂ¼þ²ÎÊý
#define NET_DVR_GET_RING_LIST                    16039    //²éÑ¯ÁåÒô²ÎÊýÁÐ±í
/*******************************Â¥Óî¿ÉÊÓ¶Ô½²»ú end***********************************/

#define    NET_DVR_DEBUGINFO_START                     18000    //Íø´«Éè±¸µ÷ÊÔÐÅÏ¢Æô¶¯ÃüÁî
#define    NET_DVR_AUTO_TEST_START                     18001    //×Ô¶¯²âÊÔ³¤Á¬½Ó»ñÈ¡

#define NET_DVR_GET_SELFCHECK_RESULT        20000    //»ñÈ¡Éè±¸×Ô¼ì½á¹û
#define NET_DVR_SET_TEST_COMMAND            20001    //ÉèÖÃ²âÊÔ¿ØÖÆÃüÁî
#define NET_DVR_SET_TEST_DEVMODULE          20002    //ÉèÖÃ²âÊÔÓ²¼þÄ£¿é¿ØÖÆÃüÁî
#define NET_DVR_GET_TEST_DEVMODULE          20003    //»ñÈ¡²âÊÔÓ²¼þÄ£¿é¿ØÖÆÃüÁî

#define NET_DVR_SET_AUTOFOCUS_TEST          20004    //±£´æ×Ô¶¯¶Ô½¹²ÎÊý 2013-10-26
#define NET_DVR_CHECK_USER_STATUS           20005    //¼ì²âÓÃ»§ÊÇ·ñÔÚÏß
#define NET_DVR_GET_TEST_COMMAND            20010    //»ñÈ¡²âÊÔ¿ØÖÆÃüÁî
#define NET_DVR_GET_DIAL_SWITCH_CFG         20200    //»ñÈ¡²¦Âë¿ª¹ØÐÅÏ¢
#define NET_DVR_SET_AGING_TRICK_SCAN          20201  //ÉèÖÃÀÏ»¯Ç°ºó¹¤¾ß²ÎÊý
#define NET_DVR_GET_ECCENTRIC_CORRECT_STATE   20202  //»ñÈ¡»ñÈ¡Æ«ÐÄÐ£Õý×´Ì¬

#define NET_DVR_T1_TEST_CMD                    131073 //µ±²âÊÔÃüÁîÀ´ÓÃ£¬Í¨¹ýÊý¾ÝÇøÓòµÄÎÄ±¾ÄÚÈÝÇø·Ö¾ßÌå×öÊ²Ã´.Êý¾Ý³¤¶È²»µÃ´óÓÚ1024
//Êý¾ÝÇø¸ñÊ½Îª£º<T1TestCmd type="0"/>//»Ö¸´Éè±¸Ä¬ÈÏ²ÎÊý²¢¹Ø»ú¡£

// ÃÀ·Ö¶¨ÖÆ²Ëµ¥Êä³öÄ£Ê½Íâ²¿ÃüÁî
#define NET_DVR_GET_MEMU_OUTPUT_MODE            155649            // »ñÈ¡²Ëµ¥Êä³öÄ£Ê½
#define NET_DVR_SET_MEMU_OUTPUT_MODE            155650            // ÉèÖÃ²Ëµ¥Êä³öÄ£Ê½

/***************************DS9000ÐÂÔöÃüÁî(_V30) end *****************************/

#define NET_DVR_GET_DEV_LOGIN_RET_INFO      16777200  //Éè±¸µÇÂ½·µ»Ø²ÎÊý


#define NET_DVR_GET_TEST_VERSION_HEAD           268435441   //»ñÈ¡²âÊÔ°æ±¾Í·
#define NET_DVR_SET_TEST_VERSION_HEAD           268435442   //ÉèÖÃ²âÊÔ°æ±¾Í·
#define NET_DVR_GET_TEST_VERSION_HEAD_V1        268435443   //»ñÈ¡²âÊÔ°æ±¾Í·-µÚ¶þ°æ
#define NET_DVR_SET_TEST_VERSION_HEAD_V1        268435444   //ÉèÖÃ²âÊÔ°æ±¾Í·-µÚ¶þ°æ
#define NET_DVR_GET_TEST_VERSION_HEAD_V2        268435445   //»ñÈ¡²âÊÔ°æ±¾Í·-µÚÈý°æ
#define NET_DVR_SET_TEST_VERSION_HEAD_V2        268435446   //ÉèÖÃ²âÊÔ°æ±¾Í·-µÚÈý°æ

#define NET_DVR_GET_TEST_VERSION_HEAD_ONLY_0    268435447   //»ñÈ¡²âÊÔ°æ±¾Í·,µ±Ç°½öÓÐÒ»¸ö°æ±¾
#define NET_DVR_SET_TEST_VERSION_HEAD_ONLY_0    268435448   //ÉèÖÃ²âÊÔ°æ±¾Í·,µ±Ç°½öÓÐÒ»¸ö°æ±¾


#define MAX_LOCAL_ADDR_LEN             96        //SOCKS×î´ó±¾µØÍø¶Î¸öÊý
#define    MAX_COUNTRY_NAME_LEN          4        //¹ú¼Ò¼òÐ´Ãû³Æ³¤¶È

/************************DVRÈÕÖ¾ begin***************************/

/* ±¨¾¯ */
//Ö÷ÀàÐÍ
#define MAJOR_ALARM                        0x1
//´ÎÀàÐÍ
#define MINOR_ALARM_IN                    0x1        /* ±¨¾¯ÊäÈë */
#define MINOR_ALARM_OUT                    0x2        /* ±¨¾¯Êä³ö */
#define MINOR_MOTDET_START                0x3        /* ÒÆ¶¯Õì²â±¨¾¯¿ªÊ¼ */
#define MINOR_MOTDET_STOP                0x4        /* ÒÆ¶¯Õì²â±¨¾¯½áÊø */
#define MINOR_HIDE_ALARM_START            0x5        /* ÕÚµ²±¨¾¯¿ªÊ¼ */
#define MINOR_HIDE_ALARM_STOP            0x6        /* ÕÚµ²±¨¾¯½áÊø */
#define MINOR_VCA_ALARM_START            0x7        /*ÖÇÄÜ±¨¾¯¿ªÊ¼*/
#define MINOR_VCA_ALARM_STOP            0x8        /*ÖÇÄÜ±¨¾¯Í£Ö¹*/
#define MINOR_ITS_ALARM_START           0x09    // ½»Í¨ÊÂ¼þ±¨¾¯¿ªÊ¼
#define MINOR_ITS_ALARM_STOP            0x0A    // ½»Í¨ÊÂ¼þ±¨¾¯½áÊø
//2010-11-10 ÍøÂç±¨¾¯ÈÕÖ¾
#define MINOR_NETALARM_START            0x0b    /*ÍøÂç±¨¾¯¿ªÊ¼*/
#define MINOR_NETALARM_STOP             0x0c    /*ÍøÂç±¨¾¯½áÊø*/
//2010-12-16 ±¨¾¯°åÈÕÖ¾£¬Óë"MINOR_ALARM_IN"Åä¶ÔÊ¹ÓÃ
#define MINOR_NETALARM_RESUME            0x0d    /*ÍøÂç±¨¾¯»Ö¸´*/
//2012-4-5 IPC PIR¡¢ÎÞÏß¡¢ºô¾È±¨¾¯
#define MINOR_WIRELESS_ALARM_START      0x0e  /* ÎÞÏß±¨¾¯¿ªÊ¼ */
#define MINOR_WIRELESS_ALARM_STOP          0x0f /* ÎÞÏß±¨¾¯½áÊø */
#define MINOR_PIR_ALARM_START           0x10  /* ÈËÌå¸ÐÓ¦±¨¾¯¿ªÊ¼ */
#define MINOR_PIR_ALARM_STOP               0x11  /* ÈËÌå¸ÐÓ¦±¨¾¯½áÊø */
#define MINOR_CALLHELP_ALARM_START      0x12  /* ºô¾È±¨¾¯¿ªÊ¼ */
#define MINOR_CALLHELP_ALARM_STOP          0x13  /* ºô¾È±¨¾¯½áÊø */
#define MINOR_IPCHANNEL_ALARMIN_START   0x14  //Êý×ÖÍ¨µÀ±¨¾¯ÊäÈë¿ªÊ¼£ºPCNVRÔÚ½ÓÊÕµ½Êý×ÖÍ¨µÀµÄMINOR_ALARM_IN²úÉú¡°Êý×ÖÍ¨µÀ±¨¾¯ÊäÈë¿ªÊ¼¡±£¬10s£¬ÔÙÊÕ²»µ½MINOR_ALARM_IN£¬²úÉú¡°Êý×ÖÍ¨µÀ±¨¾¯ÊäÈë½áÊø¡±
#define MINOR_IPCHANNEL_ALARMIN_STOP    0x15  //Êý×ÖÍ¨µÀ±¨¾¯ÊäÈë¿ªÊ¼£ºÍ¬ÉÏ
#define MINOR_DETECTFACE_ALARM_START    0x16  /* ÈËÁ³Õì²â±¨¾¯¿ªÊ¼ */
#define MINOR_DETECTFACE_ALARM_STOP      0x17  /* ÈËÁ³Õì²â±¨¾¯½áÊø */
#define MINOR_VQD_ALARM_START           0x18  //VQD±¨¾¯
#define MINOR_VQD_ALARM_STOP            0x19  //VQD±¨¾¯½áÊø 
#define MINOR_VCA_SECNECHANGE_DETECTION 0x1a  //³¡¾°Õì²â±¨¾¯ 2013-07-16

#define MINOR_SMART_REGION_EXITING_BEGIN            0x1b  //Àë¿ªÇøÓòÕì²â¿ªÊ¼
#define MINOR_SMART_REGION_EXITING_END              0x1c  //Àë¿ªÇøÓòÕì²â½áÊø
#define MINOR_SMART_LOITERING_BEGIN                 0x1d  //ÅÇ»²Õì²â¿ªÊ¼
#define MINOR_SMART_LOITERING_END                   0x1e  //ÅÇ»²Õì²â½áÊø

#define MINOR_VCA_ALARM_LINE_DETECTION_BEGIN        0x20  
#define MINOR_VCA_ALARM_LINE_DETECTION_END          0x21  
#define MINOR_VCA_ALARM_INTRUDE_BEGIN                0x22  //ÇøÓòÕì²â¿ªÊ¼    
#define MINOR_VCA_ALARM_INTRUDE_END                       0x23  //ÇøÓòÕì²â½áÊø    
#define MINOR_VCA_ALARM_AUDIOINPUT                    0x24   //ÒôÆµÒì³£ÊäÈë
#define MINOR_VCA_ALARM_AUDIOABNORMAL                 0x25   //ÉùÇ¿Í»±ä
#define MINOR_VCA_DEFOCUS_DETECTION_BEGIN           0x26  //Ðé½¹Õì²â¿ªÊ¼
#define MINOR_VCA_DEFOCUS_DETECTION_END                0x27  //Ðé½¹Õì²â½áÊø

//ÃñÓÃNVR
#define MINOR_EXT_ALARM                             0x28/*IPCÍâ²¿±¨¾¯*/
#define MINOR_VCA_FACE_ALARM_BEGIN                    0x29    /*ÈËÁ³Õì²â¿ªÊ¼*/
#define MINOR_SMART_REGION_ENTRANCE_BEGIN           0x2a  //½øÈëÇøÓòÕì²â¿ªÊ¼
#define MINOR_SMART_REGION_ENTRANCE_END             0x2b  //½øÈëÇøÓòÕì²â½áÊø
#define MINOR_SMART_PEOPLE_GATHERING_BEGIN          0x2c  //ÈËÔ±¾Û¼¯Õì²â¿ªÊ¼
#define MINOR_SMART_PEOPLE_GATHERING_END            0x2d  //ÈËÔ±¾Û¼¯Õì²â½áÊø
#define MINOR_SMART_FAST_MOVING_BEGIN               0x2e  //¿ìËÙÔË¶¯Õì²â¿ªÊ¼
#define MINOR_SMART_FAST_MOVING_END                 0x2f  //¿ìËÙÔË¶¯Õì²â½áÊø

#define MINOR_VCA_FACE_ALARM_END                    0x30    /*ÈËÁ³Õì²â½áÊø*/
#define MINOR_VCA_SCENE_CHANGE_ALARM_BEGIN            0x31   /*³¡¾°±ä¸üÕì²â¿ªÊ¼*/
#define MINOR_VCA_SCENE_CHANGE_ALARM_END            0x32   /*³¡¾°±ä¸üÕì²â½áÊø*/
#define MINOR_VCA_ALARM_AUDIOINPUT_BEGIN            0x33   /*ÒôÆµÒì³£ÊäÈë¿ªÊ¼*/
#define MINOR_VCA_ALARM_AUDIOINPUT_END                0x34   /*ÒôÆµÒì³£ÊäÈë½áÊø*/
#define MINOR_VCA_ALARM_AUDIOABNORMAL_BEGIN            0x35  /*ÉùÇ¿Í»±äÕì²â¿ªÊ¼*/
#define MINOR_VCA_ALARM_AUDIOABNORMAL_END            0x36  /*ÉùÇ¿Í»±äÕì²â½áÊø*/

#define MINOR_VCA_LECTURE_DETECTION_BEGIN           0x37  //ÊÚ¿ÎÕì²â¿ªÊ¼±¨¾¯
#define MINOR_VCA_LECTURE_DETECTION_END             0x38  //ÊÚ¿ÎÕì²â½áÊø±¨¾¯
#define MINOR_VCA_ALARM_AUDIOSTEEPDROP              0x39  //ÉùÇ¿¶¸½µ 2014-03-21
#define MINOR_VCA_ANSWER_DETECTION_BEGIN            0x3a  //»Ø´ðÎÊÌâÕì²â¿ªÊ¼±¨¾¯
#define MINOR_VCA_ANSWER_DETECTION_END              0x3b  //»Ø´ðÎÊÌâÕì²â½áÊø±¨¾¯

#define MINOR_SMART_PARKING_BEGIN                   0x3c   //Í£³µÕì²â¿ªÊ¼
#define MINOR_SMART_PARKING_END                     0x3d   //Í£³µÕì²â½áÊø
#define MINOR_SMART_UNATTENDED_BAGGAGE_BEGIN        0x3e   //ÎïÆ·ÒÅÁôÕì²â¿ªÊ¼
#define MINOR_SMART_UNATTENDED_BAGGAGE_END          0x3f   //ÎïÆ·ÒÅÁôÕì²â½áÊø
#define MINOR_SMART_OBJECT_REMOVAL_BEGIN            0x40   //ÎïÆ·ÄÃÈ¡Õì²â¿ªÊ¼
#define MINOR_SMART_OBJECT_REMOVAL_END              0x41   //ÎïÆ·ÄÃÈ¡Õì²â½áÊø
#define MINOR_SMART_VEHICLE_ALARM_START             0x46   //³µÅÆ¼ì²â¿ªÊ¼
#define MINOR_SMART_VEHICLE_ALARM_STOP              0x47   //³µÅÆ¼ì²â½áÊø
#define MINOR_THERMAL_FIREDETECTION                 0x48   //ÈÈ³ÉÏñ»ðµã¼ì²âÕì²â¿ªÊ¼
#define MINOR_THERMAL_FIREDETECTION_END             0x49   //ÈÈ³ÉÏñ»ðµã¼ì²âÕì²â½áÊø
#define MINOR_SMART_VANDALPROOF_BEGIN               0x50   //·ÀÆÆ»µ¼ì²â¿ªÊ¼
#define MINOR_SMART_VANDALPROOF_END                 0x51   //·ÀÆÆ»µ¼ì²â½áÊø

#define MINOR_THERMAL_SHIPSDETECTION                0x5a   //ÈÈ³ÉÏñ´¬Ö»¼ì²âÕì²â
#define MINOR_THERMAL_THERMOMETRY_EARLYWARNING_BEGIN 0x5b  //ÈÈ³ÉÏñ²âÎÂÔ¤¾¯¿ªÊ¼
#define MINOR_THERMAL_THERMOMETRY_EARLYWARNING_END  0x5c   //ÈÈ³ÉÏñ²âÎÂÔ¤¾¯½áÊø
#define MINOR_THERMAL_THERMOMETRY_ALARM_BEGIN       0x5d   //ÈÈ³ÉÏñ²âÎÂ±¨¾¯¿ªÊ¼
#define MINOR_THERMAL_THERMOMETRY_ALARM_END         0x5e   //ÈÈ³ÉÏñ²âÎÂ±¨¾¯½áÊø
#define MINOR_THERMAL_THERMOMETRY_DIFF_ALARM_BEGIN  0x5f   //ÈÈ³ÉÏñÎÂ²î±¨¾¯¿ªÊ¼
#define MINOR_THERMAL_THERMOMETRY_DIFF_ALARM_END    0x60   //ÈÈ³ÉÏñÎÂ²î±¨¾¯½áÊø
//0x400-0x1000 ÃÅ½û±¨¾¯
#define MINOR_ALARMIN_SHORT_CIRCUIT                 0x400  //·ÀÇø¶ÌÂ·±¨¾¯
#define MINOR_ALARMIN_BROKEN_CIRCUIT                0x401  //·ÀÇø¶ÏÂ·±¨¾¯
#define MINOR_ALARMIN_EXCEPTION                     0x402  //·ÀÇøÒì³£±¨¾¯
#define MINOR_ALARMIN_RESUME                        0x403  //·ÀÇø±¨¾¯»Ö¸´
#define MINOR_HOST_DESMANTLE_ALARM                  0x404  //·ÀÇø·À²ð±¨¾¯
#define MINOR_HOST_DESMANTLE_RESUME                 0x405  //·ÀÇø·À²ð»Ö¸´
#define MINOR_CARD_READER_DESMANTLE_ALARM           0x406  //¶Á¿¨Æ÷·À²ð±¨¾¯
#define MINOR_CARD_READER_DESMANTLE_RESUME          0x407  //¶Á¿¨Æ÷·À²ð»Ö¸´
#define MINOR_CASE_SENSOR_ALARM                     0x408  //ÊÂ¼þÊäÈë±¨¾¯
#define MINOR_CASE_SENSOR_RESUME                    0x409  //ÊÂ¼þÊäÈë»Ö¸´
#define MINOR_STRESS_ALARM                          0x40a  //Ð²ÆÈ±¨¾¯
#define MINOR_OFFLINE_ECENT_NEARLY_FULL             0x40b  //ÀëÏßÊÂ¼þÂú90%±¨¾¯
#define MINOR_CARD_MAX_AUTHENTICATE_FAIL            0x40c  //¿¨ºÅÈÏÖ¤Ê§°Ü³¬´Î±¨¾¯
#define MINOR_SD_CARD_FULL                          0x40d  //SD¿¨´æ´¢Âú±¨¾¯
#define MINOR_LINKAGE_CAPTURE_PIC                   0x40e  //Áª¶¯×¥ÅÄÊÂ¼þ±¨¾¯
#define MINOR_SECURITY_MODULE_DESMANTLE_ALARM        0x40f  //ÃÅ¿Ø°²È«Ä£¿é·À²ð±¨¾¯
#define MINOR_SECURITY_MODULE_DESMANTLE_RESUME        0x410  //ÃÅ¿Ø°²È«Ä£¿é·À²ð»Ö¸´

#define MINOR_POS_START_ALARM                       0x411  //POS¿ªÆô
#define MINOR_POS_END_ALARM                         0x412  //POS½áÊø
/* Òì³£ */
//Ö÷ÀàÐÍ
#define MAJOR_EXCEPTION                    0x2
//´ÎÀàÐÍ
#define MINOR_RAID_ERROR                0x20    /* ÕóÁÐÒì³£ */
#define MINOR_VI_LOST                    0x21    /* ÊÓÆµÐÅºÅ¶ªÊ§ */
#define MINOR_ILLEGAL_ACCESS            0x22    /* ·Ç·¨·ÃÎÊ */
#define MINOR_HD_FULL                    0x23    /* Ó²ÅÌÂú */
#define MINOR_HD_ERROR                    0x24    /* Ó²ÅÌ´íÎó */
#define MINOR_DCD_LOST                    0x25    /* MODEM µôÏß(±£Áô²»Ê¹ÓÃ) */
#define MINOR_IP_CONFLICT                0x26    /* IPµØÖ·³åÍ» */
#define MINOR_NET_BROKEN                0x27    /* ÍøÂç¶Ï¿ª*/
#define MINOR_REC_ERROR                 0x28    /* Â¼Ïñ³ö´í */
#define MINOR_IPC_NO_LINK               0x29    /* IPCÁ¬½ÓÒì³£ */
#define MINOR_VI_EXCEPTION              0x2a    /* ÊÓÆµÊäÈëÒì³£(Ö»Õë¶ÔÄ£ÄâÍ¨µÀ) */
#define MINOR_IPC_IP_CONFLICT           0x2b    /*ipc ip µØÖ· ³åÍ»*/
#define MINOR_SENCE_EXCEPTION           0x2c    // ³¡¾°Òì³£

#define MINOR_PIC_REC_ERROR              0x2d    /* ×¥Í¼³ö´í--»ñÈ¡Í¼Æ¬ÎÄ¼þÊ§°Ü*/
#define MINOR_VI_MISMATCH                0x2e    /* ÊÓÆµÖÆÊ½²»Æ¥Åä*/
#define MINOR_RESOLUTION_MISMATCH        0x2f    /*Ç°¶Ë/Â¼Ïñ·Ö±æÂÊ²»Æ¥Åä  */

//2009-12-16 Ôö¼ÓÊÓÆµ×ÛºÏÆ½Ì¨ÈÕÖ¾ÀàÐÍ
#define MINOR_FANABNORMAL                0x31    /* ÊÓÆµ×ÛºÏÆ½Ì¨£º·çÉÈ×´Ì¬Òì³£ */
#define MINOR_FANRESUME                    0x32    /* ÊÓÆµ×ÛºÏÆ½Ì¨£º·çÉÈ×´Ì¬»Ö¸´Õý³£ */
#define MINOR_SUBSYSTEM_ABNORMALREBOOT    0x33    /* ÊÓÆµ×ÛºÏÆ½Ì¨£º6467Òì³£ÖØÆô */
#define MINOR_MATRIX_STARTBUZZER        0x34    /* ÊÓÆµ×ÛºÏÆ½Ì¨£ºdm6467Òì³££¬Æô¶¯·äÃùÆ÷ */

//2010-01-22 Ôö¼ÓÊÓÆµ×ÛºÏÆ½Ì¨Òì³£ÈÕÖ¾´ÎÀàÐÍ
#define MINOR_NET_ABNORMAL                0x35    /*ÍøÂç×´Ì¬Òì³£*/
#define MINOR_MEM_ABNORMAL                0x36    /*ÄÚ´æ×´Ì¬Òì³£*/
#define MINOR_FILE_ABNORMAL                0x37    /*ÎÄ¼þ×´Ì¬Òì³£*/
#define MINOR_PANEL_ABNORMAL            0x38 /*Ç°Ãæ°åÁ¬½ÓÒì³£*/
#define MINOR_PANEL_RESUME                0x39 /*Ç°Ãæ°å»Ö¸´Õý³£*/    
#define MINOR_RS485_DEVICE_ABNORMAL        0x3a     /*RS485Á¬½Ó×´Ì¬Òì³£*/
#define MINOR_RS485_DEVICE_REVERT        0x3b    /*RS485Á¬½Ó×´Ì¬Òì³£»Ö¸´*/

//2012-2-18 Ôö¼Ó´óÆÁ¿ØÖÆÆ÷Òì³£ÈÕÖ¾´ÎÀàÐÍ
#define MINOR_SCREEN_SUBSYSTEM_ABNORMALREBOOT   0x3c            //×Ó°åÒì³£Æô¶¯
#define    MINOR_SCREEN_SUBSYSTEM_ABNORMALINSERT    0x3d            //×Ó°å²åÈë
#define    MINOR_SCREEN_SUBSYSTEM_ABNORMALPULLOUT    0x3e            //×Ó°å°Î³ö
#define    MINOR_SCREEN_ABNARMALTEMPERATURE        0x3f            //ÎÂ¶ÈÒì³£
//2012-07-26 ÊÓÆµ×ÛºÏÆ½Ì¨v2.1
#define MINOR_HIGH_TEMPERATURE_PROTECT          0x40 //×Ó°å¹ýÈÈ±£»¤

//Netra 2.2.2
#define MINOR_RECORD_OVERFLOW                   0x41              /*»º³åÇøÒç³ö*/  
#define MINOR_DSP_ABNORMAL                      0x42              //DSPÒì³£ 

//Netra 3.0.0
#define MINOR_ANR_RECORD_FAIED                 0x43         /*ANRÂ¼ÏñÊ§°Ü*/ 
#define MINOR_SPARE_WORK_DEVICE_EXCEPT         0x44            /*ÈÈ±¸Éè±¸¹¤×÷»úÒì³£*/
#define MINOR_START_IPC_MAS_FAILED             0x45            /*¿ªÆôIPC MASÊ§°Ü*/ 
//¸ßÐÔÄÜ 256Â·NVR
#define MINOR_IPCM_CRASH                       0x46         /*IPCMÒì³£ÖØÆô*/
#define MINOR_POE_POWER_EXCEPTION              0x47         /*POE ¹©µçÒì³£*/
#define MINOR_UPLOAD_DATA_CS_EXCEPTION         0x48          //ÔÆ´æ´¢Êý¾ÝÉÏ´«Ê§°Ü/
#define MINOR_DIAL_EXCEPTION                   0x49         /*²¦ºÅÒì³£*/
#define MINOR_DEV_EXCEPTION_OFFLINE            0x50  //Éè±¸Òì³£ÏÂÏß
#define MINOR_UPGRADEFAIL                      0x51 //Ô¶³ÌÉý¼¶Éè±¸Ê§°Ü
#define MINOR_AI_LOST                           0x52    /* ÒôÆµÐÅºÅ¶ªÊ§ */
#define MINOR_SYNC_IPC_PASSWD                   0x53    /* Í¬²½IPCÃÜÂëÒì³£ */
#define MINOR_EZVIZ_OFFLINE                        0x54    /* Ó©Ê¯ÏÂÏßÒì³£*/
#define MINOR_VQD_ABNORMAL                        0x55 //VQDÒì³£
#define MINOR_ACCESSORIES_PLATE                0x57 //Åä¼þ°åÒì³£

//0x400-0x1000 ÃÅ½ûÒì³£ÀàÐÍ
#define MINOR_DEV_POWER_ON                     0x400  //Éè±¸ÉÏµçÆô¶¯
#define MINOR_DEV_POWER_OFF                    0x401  //Éè±¸µôµç¹Ø±Õ
#define MINOR_WATCH_DOG_RESET                  0x402  //¿´ÃÅ¹·¸´Î»
#define MINOR_LOW_BATTERY                      0x403  //Ðîµç³ØµçÑ¹µÍ
#define MINOR_BATTERY_RESUME                   0x404  //Ðîµç³ØµçÑ¹»Ö¸´Õý³£
#define MINOR_AC_OFF                           0x405  //½»Á÷µç¶Ïµç
#define MINOR_AC_RESUME                        0x406  //½»Á÷µç»Ö¸´
#define MINOR_NET_RESUME                       0x407  //ÍøÂç»Ö¸´
#define MINOR_FLASH_ABNORMAL                   0x408  //FLASH¶ÁÐ´Òì³£
#define MINOR_CARD_READER_OFFLINE              0x409  //¶Á¿¨Æ÷µôÏß
#define MINOR_CARD_READER_RESUME               0x40a  //¶Á¿¨Æ÷µôÏß»Ö¸´                   
#define MINOR_INDICATOR_LIGHT_OFF              0x40b  //Ö¸Ê¾µÆ¹Ø±Õ
#define MINOR_INDICATOR_LIGHT_RESUME           0x40c  //Ö¸Ê¾µÆ»Ö¸´
#define MINOR_CHANNEL_CONTROLLER_OFF           0x40d  //Í¨µÀ¿ØÖÆÆ÷µôÏß
#define MINOR_CHANNEL_CONTROLLER_RESUME        0x40e  //Í¨µÀ¿ØÖÆÆ÷»Ö¸´
#define MINOR_SECURITY_MODULE_OFF               0x40f  //ÃÅ¿Ø°²È«Ä£¿éµôÏß
#define MINOR_SECURITY_MODULE_RESUME           0x410  //ÃÅ¿Ø°²È«Ä£¿éÔÚÏß
//[add]by silujie 2013-3-22 14:16
//0x2000~0x3fff ÎªÉè±¸±¨¾¯ÈÕÖ¾
//0x4000~0x5000 ÎªÉè±¸Òì³£ÈÕÖ¾
#define MINOR_SUBSYSTEM_IP_CONFLICT        0x4000        //×Ó°åIP³åÍ»
#define MINOR_SUBSYSTEM_NET_BROKEN        0x4001        //×Ó°å¶ÏÍø
#define    MINOR_FAN_ABNORMAL                0x4002        //·çÉÈÒì³£
#define    MINOR_BACKPANEL_TEMPERATURE_ABNORMAL        0x4003        //±³°åÎÂ¶ÈÒì³£

#define    MINOR_SDCARD_ABNORMAL            0x4004        //SD¿¨²»½¡¿µ
#define    MINOR_SDCARD_DAMAGE                0x4005        //SD¿¨Ëð»µ


/* ²Ù×÷ */
//Ö÷ÀàÐÍ
#define MAJOR_OPERATION                    0x3

//´ÎÀàÐÍ
#define MINOR_VCA_MOTIONEXCEPTION        0x29  //ÖÇÄÜÕì²âÒì³£
#define MINOR_START_DVR                    0x41    /* ¿ª»ú */
#define MINOR_STOP_DVR                    0x42    /* ¹Ø»ú */
#define MINOR_STOP_ABNORMAL                0x43    /* Òì³£¹Ø»ú */
#define MINOR_REBOOT_DVR                0x44    /*±¾µØÖØÆôÉè±¸*/

#define MINOR_LOCAL_LOGIN                0x50    /* ±¾µØµÇÂ½ */
#define MINOR_LOCAL_LOGOUT                0x51    /* ±¾µØ×¢ÏúµÇÂ½ */
#define MINOR_LOCAL_CFG_PARM            0x52    /* ±¾µØÅäÖÃ²ÎÊý */
#define MINOR_LOCAL_PLAYBYFILE          0x53    /* ±¾µØ°´ÎÄ¼þ»Ø·Å»òÏÂÔØ */
#define MINOR_LOCAL_PLAYBYTIME          0x54    /* ±¾µØ°´Ê±¼ä»Ø·Å»òÏÂÔØ*/
#define MINOR_LOCAL_START_REC            0x55    /* ±¾µØ¿ªÊ¼Â¼Ïñ */
#define MINOR_LOCAL_STOP_REC            0x56    /* ±¾µØÍ£Ö¹Â¼Ïñ */
#define MINOR_LOCAL_PTZCTRL                0x57    /* ±¾µØÔÆÌ¨¿ØÖÆ */
#define MINOR_LOCAL_PREVIEW                0x58    /* ±¾µØÔ¤ÀÀ (±£Áô²»Ê¹ÓÃ)*/
#define MINOR_LOCAL_MODIFY_TIME         0x59    /* ±¾µØÐÞ¸ÄÊ±¼ä(±£Áô²»Ê¹ÓÃ) */
#define MINOR_LOCAL_UPGRADE             0x5a    /* ±¾µØÉý¼¶ */
#define MINOR_LOCAL_RECFILE_OUTPUT      0x5b    /* ±¾µØ±¸·ÝÂ¼ÏóÎÄ¼þ */
#define MINOR_LOCAL_FORMAT_HDD          0x5c    /* ±¾µØ³õÊ¼»¯Ó²ÅÌ */
#define MINOR_LOCAL_CFGFILE_OUTPUT      0x5d    /* µ¼³ö±¾µØÅäÖÃÎÄ¼þ */
#define MINOR_LOCAL_CFGFILE_INPUT       0x5e    /* µ¼Èë±¾µØÅäÖÃÎÄ¼þ */
#define MINOR_LOCAL_COPYFILE            0x5f    /* ±¾µØ±¸·ÝÎÄ¼þ */
#define MINOR_LOCAL_LOCKFILE            0x60    /* ±¾µØËø¶¨Â¼ÏñÎÄ¼þ */
#define MINOR_LOCAL_UNLOCKFILE          0x61    /* ±¾µØ½âËøÂ¼ÏñÎÄ¼þ */
#define MINOR_LOCAL_DVR_ALARM           0x62    /* ±¾µØÊÖ¶¯Çå³ýºÍ´¥·¢±¨¾¯*/
#define MINOR_IPC_ADD                   0x63    /* ±¾µØÌí¼ÓIPC */
#define MINOR_IPC_DEL                   0x64    /* ±¾µØÉ¾³ýIPC */
#define MINOR_IPC_SET                   0x65    /* ±¾µØÉèÖÃIPC */
#define MINOR_LOCAL_START_BACKUP        0x66    /* ±¾µØ¿ªÊ¼±¸·Ý */
#define MINOR_LOCAL_STOP_BACKUP            0x67    /* ±¾µØÍ£Ö¹±¸·Ý*/
#define MINOR_LOCAL_COPYFILE_START_TIME 0x68    /* ±¾µØ±¸·Ý¿ªÊ¼Ê±¼ä*/
#define MINOR_LOCAL_COPYFILE_END_TIME    0x69    /* ±¾µØ±¸·Ý½áÊøÊ±¼ä*/
#define MINOR_LOCAL_ADD_NAS             0x6a    /*±¾µØÌí¼ÓÍøÂçÓ²ÅÌ £¨nfs¡¢iscsi£©*/
#define MINOR_LOCAL_DEL_NAS             0x6b    /* ±¾µØÉ¾³ýnasÅÌ £¨nfs¡¢iscsi£©*/
#define MINOR_LOCAL_SET_NAS             0x6c    /* ±¾µØÉèÖÃnasÅÌ £¨nfs¡¢iscsi£©*/
#define MINOR_LOCAL_RESET_PASSWD        0x6d    /* ±¾µØ»Ö¸´¹ÜÀíÔ±Ä¬ÈÏÃÜÂë*/ 

#define MINOR_REMOTE_LOGIN                0x70    /* Ô¶³ÌµÇÂ¼ */
#define MINOR_REMOTE_LOGOUT                0x71    /* Ô¶³Ì×¢ÏúµÇÂ½ */
#define MINOR_REMOTE_START_REC            0x72    /* Ô¶³Ì¿ªÊ¼Â¼Ïñ */
#define MINOR_REMOTE_STOP_REC            0x73    /* Ô¶³ÌÍ£Ö¹Â¼Ïñ */
#define MINOR_START_TRANS_CHAN            0x74    /* ¿ªÊ¼Í¸Ã÷´«Êä */
#define MINOR_STOP_TRANS_CHAN            0x75    /* Í£Ö¹Í¸Ã÷´«Êä */
#define MINOR_REMOTE_GET_PARM            0x76    /* Ô¶³Ì»ñÈ¡²ÎÊý */
#define MINOR_REMOTE_CFG_PARM            0x77    /* Ô¶³ÌÅäÖÃ²ÎÊý */
#define MINOR_REMOTE_GET_STATUS         0x78    /* Ô¶³Ì»ñÈ¡×´Ì¬ */
#define MINOR_REMOTE_ARM                0x79    /* Ô¶³Ì²¼·À */
#define MINOR_REMOTE_DISARM                0x7a    /* Ô¶³Ì³··À */
#define MINOR_REMOTE_REBOOT                0x7b    /* Ô¶³ÌÖØÆô */
#define MINOR_START_VT                    0x7c    /* ¿ªÊ¼ÓïÒô¶Ô½² */
#define MINOR_STOP_VT                    0x7d    /* Í£Ö¹ÓïÒô¶Ô½² */
#define MINOR_REMOTE_UPGRADE            0x7e    /* Ô¶³ÌÉý¼¶ */
#define MINOR_REMOTE_PLAYBYFILE         0x7f    /* Ô¶³Ì°´ÎÄ¼þ»Ø·Å */
#define MINOR_REMOTE_PLAYBYTIME         0x80    /* Ô¶³Ì°´Ê±¼ä»Ø·Å */
#define MINOR_REMOTE_PTZCTRL            0x81    /* Ô¶³ÌÔÆÌ¨¿ØÖÆ */
#define MINOR_REMOTE_FORMAT_HDD         0x82    /* Ô¶³Ì¸ñÊ½»¯Ó²ÅÌ */
#define MINOR_REMOTE_STOP               0x83    /* Ô¶³Ì¹Ø»ú */
#define MINOR_REMOTE_LOCKFILE            0x84    /* Ô¶³ÌËø¶¨ÎÄ¼þ */
#define MINOR_REMOTE_UNLOCKFILE         0x85    /* Ô¶³Ì½âËøÎÄ¼þ */
#define MINOR_REMOTE_CFGFILE_OUTPUT     0x86    /* Ô¶³Ìµ¼³öÅäÖÃÎÄ¼þ */
#define MINOR_REMOTE_CFGFILE_INTPUT     0x87    /* Ô¶³Ìµ¼ÈëÅäÖÃÎÄ¼þ */
#define MINOR_REMOTE_RECFILE_OUTPUT     0x88    /* Ô¶³Ìµ¼³öÂ¼ÏóÎÄ¼þ */
#define MINOR_REMOTE_DVR_ALARM          0x89    /* Ô¶³ÌÊÖ¶¯Çå³ýºÍ´¥·¢±¨¾¯*/
#define MINOR_REMOTE_IPC_ADD            0x8a    /* Ô¶³ÌÌí¼ÓIPC */
#define MINOR_REMOTE_IPC_DEL            0x8b    /* Ô¶³ÌÉ¾³ýIPC */
#define MINOR_REMOTE_IPC_SET            0x8c    /* Ô¶³ÌÉèÖÃIPC */
#define MINOR_REBOOT_VCA_LIB            0x8d    /*ÖØÆôÖÇÄÜ¿â*/
#define MINOR_REMOTE_ADD_NAS            0x8e   /* Ô¶³ÌÌí¼ÓnasÅÌ £¨nfs¡¢iscsi£©*/
#define MINOR_REMOTE_DEL_NAS            0x8f   /* Ô¶³ÌÉ¾³ýnasÅÌ £¨nfs¡¢iscsi£©*/
#define MINOR_REMOTE_SET_NAS            0x90   /* Ô¶³ÌÉèÖÃnasÅÌ £¨nfs¡¢iscsi£©*/
#define MINOR_LOCAL_OPERATE_LOCK        0x9d            /* ±¾µØ²Ù×÷Ëø¶¨             */
#define MINOR_LOCAL_OPERATE_UNLOCK      0x9e            /* ±¾µØ²Ù×÷½â³ýËø¶¨         */
#define MINOR_REMOTE_DELETE_HDISK       0x9a            /* Ô¶³ÌÉ¾³ýÒì³£²»´æÔÚµÄÓ²ÅÌ */
#define MINOR_REMOTE_LOAD_HDISK         0x9b            /* Ô¶³Ì¼ÓÔØÓ²ÅÌ             */
#define MINOR_REMOTE_UNLOAD_HDISK       0x9c            /* Ô¶³ÌÐ¶ÔØÓ²ÅÌ   */


//2010-05-26 Ôö¼ÓÉóÑ¶DVRÈÕÖ¾ÀàÐÍ
#define MINOR_LOCAL_START_REC_CDRW      0x91   /* ±¾µØ¿ªÊ¼Ñ¶ÎÊ */
#define MINOR_LOCAL_STOP_REC_CDRW       0x92   /* ±¾µØÍ£Ö¹Ñ¶ÎÊ */
#define MINOR_REMOTE_START_REC_CDRW     0x93   /* Ô¶³Ì¿ªÊ¼Ñ¶ÎÊ */
#define MINOR_REMOTE_STOP_REC_CDRW      0x94   /* Ô¶³ÌÍ£Ö¹Ñ¶ÎÊ */

#define MINOR_LOCAL_PIC_OUTPUT            0x95   /* ±¾µØ±¸·ÝÍ¼Æ¬ÎÄ¼þ */ 
#define MINOR_REMOTE_PIC_OUTPUT            0x96   /* Ô¶³Ì±¸·ÝÍ¼Æ¬ÎÄ¼þ */

//2011-07-26 Ôö¼Ó81ÉóÑ¶DVRÈÕÖ¾ÀàÐÍ
#define MINOR_LOCAL_INQUEST_RESUME      0x97   /* ±¾µØ»Ö¸´ÉóÑ¶ÊÂ¼þ*/
#define MINOR_REMOTE_INQUEST_RESUME     0x98   /* Ô¶³Ì»Ö¸´ÉóÑ¶ÊÂ¼þ*/

//2013-01-23 Ôö¼Ó86¸ßÇåÉóÑ¶NVR²Ù×÷ÈÕÖ¾
#define MINOR_LOCAL_ADD_FILE            0x99        /*±¾µØµ¼ÈëÎÄ¼þ*/
#define MINOR_LOCAL_DEL_FILE            0x9f        /*±¾µØÉ¾³ýÉóÑ¶*/
#define MINOR_REMOTE_INQUEST_ADD_FILE   0x100       /*Ô¶³Ìµ¼ÈëÎÄ¼þ*/ 
#define MINOR_REMOTE_INQUEST_DEL_FILE   0x101       /*Ô¶³ÌÉ¾³ýÎÄ¼þ*/

//2009-12-16 Ôö¼ÓÊÓÆµ×ÛºÏÆ½Ì¨ÈÕÖ¾ÀàÐÍ
#define MINOR_SUBSYSTEMREBOOT           0xa0    /*ÊÓÆµ×ÛºÏÆ½Ì¨£ºdm6467 Õý³£ÖØÆô*/
#define MINOR_MATRIX_STARTTRANSFERVIDEO 0xa1    /*ÊÓÆµ×ÛºÏÆ½Ì¨£º¾ØÕóÇÐ»»¿ªÊ¼´«ÊäÍ¼Ïñ*/
#define MINOR_MATRIX_STOPTRANSFERVIDEO    0xa2    /*ÊÓÆµ×ÛºÏÆ½Ì¨£º¾ØÕóÇÐ»»Í£Ö¹´«ÊäÍ¼Ïñ*/
#define MINOR_REMOTE_SET_ALLSUBSYSTEM   0xa3    /*ÊÓÆµ×ÛºÏÆ½Ì¨£ºÉèÖÃËùÓÐ6467×ÓÏµÍ³ÐÅÏ¢*/
#define MINOR_REMOTE_GET_ALLSUBSYSTEM   0xa4    /*ÊÓÆµ×ÛºÏÆ½Ì¨£º»ñÈ¡ËùÓÐ6467×ÓÏµÍ³ÐÅÏ¢*/
#define MINOR_REMOTE_SET_PLANARRAY      0xa5    /*ÊÓÆµ×ÛºÏÆ½Ì¨£ºÉèÖÃ¼Æ»®ÂÖÑ²×é*/
#define MINOR_REMOTE_GET_PLANARRAY      0xa6    /*ÊÓÆµ×ÛºÏÆ½Ì¨£º»ñÈ¡¼Æ»®ÂÖÑ²×é*/
#define MINOR_MATRIX_STARTTRANSFERAUDIO 0xa7    /*ÊÓÆµ×ÛºÏÆ½Ì¨£º¾ØÕóÇÐ»»¿ªÊ¼´«ÊäÒôÆµ*/
#define MINOR_MATRIX_STOPRANSFERAUDIO   0xa8    /*ÊÓÆµ×ÛºÏÆ½Ì¨£º¾ØÕóÇÐ»»Í£Ö¹´«ÊäÒôÆµ*/
#define MINOR_LOGON_CODESPITTER         0xa9    /*ÊÓÆµ×ÛºÏÆ½Ì¨£ºµÇÂ½Âë·ÖÆ÷*/
#define MINOR_LOGOFF_CODESPITTER        0xaa    /*ÊÓÆµ×ÛºÏÆ½Ì¨£ºÍË³öÂë·ÖÆ÷*/

//2010-01-22 Ôö¼ÓÊÓÆµ×ÛºÏÆ½Ì¨ÖÐ½âÂëÆ÷²Ù×÷ÈÕÖ¾
#define MINOR_START_DYNAMIC_DECODE         0xb0    /*¿ªÊ¼¶¯Ì¬½âÂë*/
#define MINOR_STOP_DYNAMIC_DECODE        0xb1    /*Í£Ö¹¶¯Ì¬½âÂë*/
#define MINOR_GET_CYC_CFG                0xb2    /*»ñÈ¡½âÂëÆ÷Í¨µÀÂÖÑ²ÅäÖÃ*/
#define MINOR_SET_CYC_CFG                0xb3    /*ÉèÖÃ½âÂëÍ¨µÀÂÖÑ²ÅäÖÃ*/
#define MINOR_START_CYC_DECODE            0xb4    /*¿ªÊ¼ÂÖÑ²½âÂë*/
#define MINOR_STOP_CYC_DECODE            0xb5    /*Í£Ö¹ÂÖÑ²½âÂë*/
#define MINOR_GET_DECCHAN_STATUS        0xb6    /*»ñÈ¡½âÂëÍ¨µÀ×´Ì¬*/
#define MINOR_GET_DECCHAN_INFO            0xb7    /*»ñÈ¡½âÂëÍ¨µÀµ±Ç°ÐÅÏ¢*/
#define MINOR_START_PASSIVE_DEC            0xb8    /*¿ªÊ¼±»¶¯½âÂë*/
#define MINOR_STOP_PASSIVE_DEC            0xb9    /*Í£Ö¹±»¶¯½âÂë*/
#define MINOR_CTRL_PASSIVE_DEC            0xba    /*¿ØÖÆ±»¶¯½âÂë*/
#define MINOR_RECON_PASSIVE_DEC            0xbb    /*±»¶¯½âÂëÖØÁ¬*/
#define MINOR_GET_DEC_CHAN_SW            0xbc    /*»ñÈ¡½âÂëÍ¨µÀ×Ü¿ª¹Ø*/
#define MINOR_SET_DEC_CHAN_SW            0xbd    /*ÉèÖÃ½âÂëÍ¨µÀ×Ü¿ª¹Ø*/
#define MINOR_CTRL_DEC_CHAN_SCALE        0xbe    /*½âÂëÍ¨µÀËõ·Å¿ØÖÆ*/
#define MINOR_SET_REMOTE_REPLAY            0xbf    /*ÉèÖÃÔ¶³Ì»Ø·Å*/
#define MINOR_GET_REMOTE_REPLAY            0xc0    /*»ñÈ¡Ô¶³Ì»Ø·Å×´Ì¬*/
#define MINOR_CTRL_REMOTE_REPLAY        0xc1    /*Ô¶³Ì»Ø·Å¿ØÖÆ*/
#define MINOR_SET_DISP_CFG                0xc2    /*ÉèÖÃÏÔÊ¾Í¨µÀ*/
#define MINOR_GET_DISP_CFG                0xc3    /*»ñÈ¡ÏÔÊ¾Í¨µÀÉèÖÃ*/
#define MINOR_SET_PLANTABLE                0xc4    /*ÉèÖÃ¼Æ»®ÂÖÑ²±í*/
#define MINOR_GET_PLANTABLE                0xc5    /*»ñÈ¡¼Æ»®ÂÖÑ²±í*/
#define MINOR_START_PPPPOE                0xc6    /*¿ªÊ¼PPPoEÁ¬½Ó*/
#define MINOR_STOP_PPPPOE                0xc7    /*½áÊøPPPoEÁ¬½Ó*/
#define MINOR_UPLOAD_LOGO                0xc8    /*ÉÏ´«LOGO*/
//ÍÆÄ£Ê½²Ù×÷ÈÕÖ¾
#define MINOR_LOCAL_PIN                    0xc9    /* ±¾µØPIN¹¦ÄÜ²Ù×÷ */
#define MINOR_LOCAL_DIAL                0xca    /* ±¾µØÊÖ¶¯Æô¶¯¶Ï¿ª²¦ºÅ */    
#define MINOR_SMS_CONTROL                0xcb    /* ¶ÌÐÅ¿ØÖÆÉÏÏÂÏß */    
#define MINOR_CALL_ONLINE                0xcc    /* ºô½Ð¿ØÖÆÉÏÏß */    
#define MINOR_REMOTE_PIN                0xcd    /* Ô¶³ÌPIN¹¦ÄÜ²Ù×÷ */

//2010-12-16 ±¨¾¯°åÈÕÖ¾
#define MINOR_REMOTE_BYPASS             0xd0    /* Ô¶³ÌÅÔÂ·*/
#define MINOR_REMOTE_UNBYPASS           0xd1    /* Ô¶³ÌÅÔÂ·»Ö¸´*/
#define MINOR_REMOTE_SET_ALARMIN_CFG    0xd2    /* Ô¶³ÌÉèÖÃ±¨¾¯ÊäÈë²ÎÊý*/
#define MINOR_REMOTE_GET_ALARMIN_CFG    0xd3    /* Ô¶³Ì»ñÈ¡±¨¾¯ÊäÈë²ÎÊý*/
#define MINOR_REMOTE_SET_ALARMOUT_CFG   0xd4    /* Ô¶³ÌÉèÖÃ±¨¾¯Êä³ö²ÎÊý*/
#define MINOR_REMOTE_GET_ALARMOUT_CFG   0xd5    /* Ô¶³Ì»ñÈ¡±¨¾¯Êä³ö²ÎÊý*/
#define MINOR_REMOTE_ALARMOUT_OPEN_MAN  0xd6    /* Ô¶³ÌÊÖ¶¯¿ªÆô±¨¾¯Êä³ö*/
#define MINOR_REMOTE_ALARMOUT_CLOSE_MAN 0xd7    /* Ô¶³ÌÊÖ¶¯¹Ø±Õ±¨¾¯Êä³ö*/
#define MINOR_REMOTE_ALARM_ENABLE_CFG   0xd8    /* Ô¶³ÌÉèÖÃ±¨¾¯Ö÷»úµÄRS485´®¿ÚÊ¹ÄÜ×´Ì¬*/
#define MINOR_DBDATA_OUTPUT                0xd9    /* µ¼³öÊý¾Ý¿â¼ÇÂ¼ */
#define MINOR_DBDATA_INPUT                0xda    /* µ¼ÈëÊý¾Ý¿â¼ÇÂ¼ */
#define MINOR_MU_SWITCH                    0xdb    /* ¼¶ÁªÇÐ»» */
#define MINOR_MU_PTZ                    0xdc    /* ¼¶ÁªPTZ¿ØÖÆ */
#define MINOR_DELETE_LOGO               0xdd    /* É¾³ýlogo */

#define MINOR_LOCAL_CONF_REB_RAID       0x101           /*±¾µØÅäÖÃ×Ô¶¯ÖØ½¨*/
#define MINOR_LOCAL_CONF_SPARE          0x102           /*±¾µØÅäÖÃÈÈ±¸*/
#define MINOR_LOCAL_ADD_RAID            0x103           /*±¾µØ´´½¨ÕóÁÐ*/
#define MINOR_LOCAL_DEL_RAID            0x104           /*±¾µØÉ¾³ýÕóÁÐ*/
#define MINOR_LOCAL_MIG_RAID            0x105           /*±¾µØÇ¨ÒÆÕóÁÐ*/
#define MINOR_LOCAL_REB_RAID            0x106           /* ±¾µØÊÖ¶¯ÖØ½¨ÕóÁÐ*/
#define MINOR_LOCAL_QUICK_CONF_RAID     0x107           /*±¾µØÒ»¼üÅäÖÃ*/
#define MINOR_LOCAL_ADD_VD              0x108           /*±¾µØ´´½¨ÐéÄâ´ÅÅÌ*/
#define MINOR_LOCAL_DEL_VD              0x109           /*±¾µØÉ¾³ýÐéÄâ´ÅÅÌ*/
#define MINOR_LOCAL_RP_VD               0x10a           /*±¾µØÐÞ¸´ÐéÄâ´ÅÅÌ*/
#define MINOR_LOCAL_FORMAT_EXPANDVD     0X10b           /*±¾µØÀ©Õ¹ÐéÄâ´ÅÅÌÀ©ÈÝ*/
#define MINOR_LOCAL_RAID_UPGRADE        0X10c           /*±¾µØraid¿¨Éý¼¶*/  
#define MINOR_LOCAL_STOP_RAID           0x10d           /*±¾µØÔÝÍ£RAID²Ù×÷(¼´°²È«°ÎÅÌ)*/  
#define MINOR_REMOTE_CONF_REB_RAID      0x111           /*Ô¶³ÌÅäÖÃ×Ô¶¯ÖØ½¨*/
#define MINOR_REMOTE_CONF_SPARE         0x112            /*Ô¶³ÌÅäÖÃÈÈ±¸*/
#define MINOR_REMOTE_ADD_RAID           0x113           /*Ô¶³Ì´´½¨ÕóÁÐ*/
#define MINOR_REMOTE_DEL_RAID           0x114           /*Ô¶³ÌÉ¾³ýÕóÁÐ*/
#define MINOR_REMOTE_MIG_RAID           0x115           /*Ô¶³ÌÇ¨ÒÆÕóÁÐ*/
#define MINOR_REMOTE_REB_RAID           0x116           /* Ô¶³ÌÊÖ¶¯ÖØ½¨ÕóÁÐ*/
#define MINOR_REMOTE_QUICK_CONF_RAID    0x117           /*Ô¶³ÌÒ»¼üÅäÖÃ*/
#define MINOR_REMOTE_ADD_VD             0x118           /*Ô¶³Ì´´½¨ÐéÄâ´ÅÅÌ*/
#define MINOR_REMOTE_DEL_VD             0x119           /*Ô¶³ÌÉ¾³ýÐéÄâ´ÅÅÌ*/
#define MINOR_REMOTE_RP_VD              0x11a           /*Ô¶³ÌÐÞ¸´ÐéÄâ´ÅÅÌ*/
#define MINOR_REMOTE_FORMAT_EXPANDVD    0X11b           /*Ô¶³ÌÐéÄâ´ÅÅÌÀ©ÈÝ*/
#define MINOR_REMOTE_RAID_UPGRADE       0X11c           /*Ô¶³Ìraid¿¨Éý¼¶*/  
#define MINOR_REMOTE_STOP_RAID          0x11d           /*Ô¶³ÌÔÝÍ£RAID²Ù×÷(¼´°²È«°ÎÅÌ)*/
#define MINOR_LOCAL_START_PIC_REC       0x121          /*±¾µØ¿ªÊ¼×¥Í¼*/ 
#define MINOR_LOCAL_STOP_PIC_REC        0x122          /*±¾µØÍ£Ö¹×¥Í¼*/
#define MINOR_LOCAL_SET_SNMP            0x125           /*±¾µØÅäÖÃSNMP*/
#define MINOR_LOCAL_TAG_OPT             0x126          /*±¾µØ±êÇ©²Ù×÷*/
#define MINOR_REMOTE_START_PIC_REC      0x131          /*Ô¶³Ì¿ªÊ¼×¥Í¼*/
#define MINOR_REMOTE_STOP_PIC_REC       0x132           /*Ô¶³ÌÍ£Ö¹×¥Í¼*/
#define MINOR_REMOTE_SET_SNMP           0x135            /*Ô¶³ÌÅäÖÃSNMP*/
#define MINOR_REMOTE_TAG_OPT            0x136             /*Ô¶³Ì±êÇ©²Ù×÷*/  

// 9000 v2.2.0
#define MINOR_LOCAL_VOUT_SWITCH         0x140   /* ±¾µØÊä³ö¿ÚÇÐ»»²Ù×÷*/
#define MINOR_STREAM_CABAC                 0x141   /* ÂëÁ÷Ñ¹ËõÐÔÄÜÑ¡ÏîÅäÖÃ²Ù×÷*/

//Netra 3.0.0
#define MINOR_LOCAL_SPARE_OPT           0x142   /*±¾µØN+1 ÈÈ±¸Ïà¹Ø²Ù×÷*/
#define MINOR_REMOTE_SPARE_OPT            0x143   /*Ô¶³ÌN+1 ÈÈ±¸Ïà¹Ø²Ù×÷*/
#define MINOR_LOCAL_IPCCFGFILE_OUTPUT    0x144      /* ±¾µØµ¼³öipcÅäÖÃÎÄ¼þ*/
#define MINOR_LOCAL_IPCCFGFILE_INPUT      0x145   /* ±¾µØµ¼ÈëipcÅäÖÃÎÄ¼þ */
#define MINOR_LOCAL_IPC_UPGRADE         0x146   /* ±¾µØÉý¼¶IPC */
#define MINOR_REMOTE_IPCCFGFILE_OUTPUT  0x147   /* Ô¶³Ìµ¼³öipcÅäÖÃÎÄ¼þ*/
#define MINOR_REMOTE_IPCCFGFILE_INPUT   0x148   /* Ô¶³Ìµ¼ÈëipcÅäÖÃÎÄ¼þ*/
#define MINOR_REMOTE_IPC_UPGRADE        0x149   /* Ô¶³ÌÉý¼¶IPC */




#define MINOR_SET_MULTI_MASTER          0x201    /*ÉèÖÃ´óÆÁÖ÷ÆÁ*/
#define MINOR_SET_MULTI_SLAVE           0x202    /*ÉèÖÃ´óÆÁ×ÓÆÁ*/
#define MINOR_CANCEL_MULTI_MASTER       0x203    /*È¡Ïû´óÆÁÖ÷ÆÁ*/
#define MINOR_CANCEL_MULTI_SLAVE        0x204    /*È¡Ïû´óÆÁ×ÓÆÁ*/

#define MINOR_DISPLAY_LOGO                0x205    /*ÏÔÊ¾LOGO*/
#define MINOR_HIDE_LOGO                 0x206    /*Òþ²ØLOGO*/
#define MINOR_SET_DEC_DELAY_LEVEL       0x207    /*½âÂëÍ¨µÀÑÓÊ±¼¶±ðÉèÖÃ*/
#define MINOR_SET_BIGSCREEN_DIPLAY_AREA 0x208    /*ÉèÖÃ´óÆÁÏÔÊ¾ÇøÓò*/
#define MINOR_CUT_VIDEO_SOURCE          0x209    /*´óÆÁÊÓÆµÔ´ÇÐ¸îÉèÖÃ*/
#define MINOR_SET_BASEMAP_AREA          0x210    /*´óÆÁµ×Í¼ÇøÓòÉèÖÃ*/
#define MINOR_DOWNLOAD_BASEMAP          0x211    /*ÏÂÔØ´óÆÁµ×Í¼*/
#define MINOR_CUT_BASEMAP               0x212    /*µ×Í¼ÇÐ¸îÅäÖÃ*/
#define MINOR_CONTROL_ELEC_ENLARGE      0x213    /*µç×Ó·Å´ó²Ù×÷(·Å´ó»ò»¹Ô­)*/
#define MINOR_SET_OUTPUT_RESOLUTION     0x214    /*ÏÔÊ¾Êä³ö·Ö±æÂÊÉèÖÃ*/
#define MINOR_SET_TRANCSPARENCY         0X215    /*Í¼²ãÍ¸Ã÷¶ÈÉèÖÃ*/
#define MINOR_SET_OSD                   0x216    /*ÏÔÊ¾OSDÉèÖÃ*/
#define MINOR_RESTORE_DEC_STATUS        0x217    /*»Ö¸´³õÊ¼×´Ì¬(³¡¾°ÇÐ»»Ê±£¬½âÂë»Ö¸´³õÊ¼×´Ì¬)*/

//2011-11-11 Ôö¼Ó´óÆÁ¿ØÖÆÆ÷²Ù×÷ÈÕÖ¾´ÎÀàÐÍ
#define MINOR_SCREEN_SET_INPUT            0x251    /*ÐÞ¸ÄÊäÈëÔ´*/
#define MINOR_SCREEN_SET_OUTPUT            0x252    /*ÐÞ¸ÄÊä³öÍ¨µÀ*/
#define MINOR_SCREEN_SET_OSD            0x253    /*ÐÞ¸ÄÐéÄâLED*/
#define MINOR_SCREEN_SET_LOGO            0x254    /*ÐÞ¸ÄLOGO*/
#define MINOR_SCREEN_SET_LAYOUT            0x255    /*ÉèÖÃ²¼¾Ö*/
#define    MINOR_SCREEN_PICTUREPREVIEW        0x256     /*»ØÏÔ²Ù×÷*/

//2012-06-14 CVCS2.0, ´°¿ÚÉèÖÃµÈ²Ù×÷ÔÚV1.0£¬ V1.1ÖÐÒÑ¾­ÓÐÁË£¬µ±Ê±ÔÚÉè±¸ÈÕÖ¾ÖÐÃ»ÓÐ¶¨Òå 
#define MINOR_SCREEN_GET_OSD            0x257   /*»ñÈ¡ÐéÄâLED*/
#define MINOR_SCREEN_GET_LAYOUT            0x258   /*»ñÈ¡²¼¾Ö*/
#define MINOR_SCREEN_LAYOUT_CTRL        0x259   /*²¼¾Ö¿ØÖÆ*/
#define MINOR_GET_ALL_VALID_WND            0x260    /*»ñÈ¡ËùÓÐÓÐÐ§´°¿Ú*/
#define MINOR_GET_SIGNAL_WND            0x261    /*»ñÈ¡µ¥¸ö´°¿ÚÐÅÏ¢*/
#define MINOR_WINDOW_CTRL                0x262    /*´°¿Ú¿ØÖÆ*/
#define MINOR_GET_LAYOUT_LIST            0x263    /*»ñÈ¡²¼¾ÖÁÐ±í*/
#define MINOR_LAYOUT_CTRL                0x264    /*²¼¾Ö¿ØÖÆ*/
#define MINOR_SET_LAYOUT                0x265    /*ÉèÖÃ²¼¾Ö*/
#define MINOR_GET_SIGNAL_LIST            0x266    /*»ñÈ¡ÊäÈëÐÅºÅÔ´ÁÐ±í*/
#define MINOR_GET_PLAN_LIST                0x267    /*»ñÈ¡Ô¤°¸ÁÐ±í*/
#define MINOR_SET_PLAN                    0x268    /*ÐÞ¸ÄÔ¤°¸*/
#define MINOR_CTRL_PLAN                    0x269    /*¿ØÖÆÔ¤°¸*/
#define MINOR_CTRL_SCREEN                0x270    /*ÆÁÄ»¿ØÖÆ*/
#define MINOR_ADD_NETSIG                0x271    /*Ìí¼ÓÐÅºÅÔ´*/
#define MINOR_SET_NETSIG                0x272    /*ÐÞ¸ÄÐÅºÅÔ´*/
#define MINOR_SET_DECBDCFG                0x273    /*ÉèÖÃ½âÂë°å²ÎÊý*/
#define MINOR_GET_DECBDCFG                0x274    /*»ñÈ¡½âÂë°å²ÎÊý*/
#define MINOR_GET_DEVICE_STATUS            0x275    /*»ñÈ¡Éè±¸ÐÅÏ¢*/
#define MINOR_UPLOAD_PICTURE            0x276    /*µ×Í¼ÉÏ´«*/
#define MINOR_SET_USERPWD                0x277    /*ÉèÖÃÓÃ»§ÃÜÂë*/
#define MINOR_ADD_LAYOUT                0x278    /*Ìí¼Ó²¼¾Ö*/
#define MINOR_DEL_LAYOUT                0x279    /*É¾³ý²¼¾Ö*/
#define MINOR_DEL_NETSIG                0x280    /*É¾³ýÐÅºÅÔ´*/
#define MINOR_ADD_PLAN                    0x281    /*Ìí¼ÓÔ¤°¸*/
#define MINOR_DEL_PLAN                    0x282    /*É¾³ýÔ¤°¸*/
#define MINOR_GET_EXTERNAL_MATRIX_CFG    0x283    //»ñÈ¡Íâ½Ó¾ØÕóÅäÖÃ
#define MINOR_SET_EXTERNAL_MATRIX_CFG    0x284    //ÉèÖÃÍâ½Ó¾ØÕóÅäÖÃ
#define    MINOR_GET_USER_CFG                0x285    //»ñÈ¡ÓÃ»§ÅäÖÃ
#define    MINOR_SET_USER_CFG                0x286    //ÉèÖÃÓÃ»§ÅäÖÃ
#define    MINOR_GET_DISPLAY_PANEL_LINK_CFG 0x287    //»ñÈ¡ÏÔÊ¾Ç½Á¬½ÓÅäÖÃ
#define    MINOR_SET_DISPLAY_PANEL_LINK_CFG 0x288    //ÉèÖÃÏÔÊ¾Ç½Á¬½ÓÅäÖÃ

#define    MINOR_GET_WALLSCENE_PARAM        0x289        //»ñÈ¡µçÊÓÇ½³¡¾°
#define    MINOR_SET_WALLSCENE_PARAM        0x28a        //ÉèÖÃµçÊÓÇ½³¡¾°
#define    MINOR_GET_CURRENT_WALLSCENE        0x28b        //»ñÈ¡µ±Ç°Ê¹ÓÃ³¡¾°
#define    MINOR_SWITCH_WALLSCENE            0x28c        //³¡¾°ÇÐ»»
#define    MINOR_SIP_LOGIN                    0x28d        //SIP×¢²á³É¹¦
#define MINOR_VOIP_START                0x28e        //VOIP¶Ô½²¿ªÊ¼
#define MINOR_VOIP_STOP                    0x28f        //VOIP¶Ô½²Í£Ö¹
#define MINOR_WIN_TOP                   0x290       //µçÊÓÇ½´°¿ÚÖÃ¶¥
#define MINOR_WIN_BOTTOM                0x291       //µçÊÓÇ½´°¿ÚÖÃµ×

// Netra 2.2.2
#define MINOR_LOCAL_LOAD_HDISK          0x300            //±¾µØ¼ÓÔØÓ²ÅÌ             
#define MINOR_LOCAL_DELETE_HDISK        0x301            //±¾µØÉ¾³ýÒì³£²»´æÔÚµÄÓ²ÅÌ

//KY2013 3.0.0
#define MINOR_LOCAL_MAIN_AUXILIARY_PORT_SWITCH    0X302 //±¾µØÖ÷¸¨¿ÚÇÐ»»
#define MINOR_LOCAL_HARD_DISK_CHECK                0x303 //±¾µØÎïÀíÓ²ÅÌ×Ô¼ì

//Netra3.1.0
#define MINOR_LOCAL_CFG_DEVICE_TYPE        0x310    //±¾µØÅäÖÃÉè±¸ÀàÐÍ
#define MINOR_REMOTE_CFG_DEVICE_TYPE    0x311    //Ô¶³ÌÅäÖÃÉè±¸ÀàÐÍ
#define MINOR_LOCAL_CFG_WORK_HOT_SERVER    0x312    //±¾µØÅäÖÃ¹¤×÷»úÈÈ±¸·þÎñÆ÷
#define MINOR_REMOTE_CFG_WORK_HOT_SERVER 0x313    //Ô¶³ÌÅäÖÃ¹¤×÷»úÈÈ±¸·þÎñÆ÷
#define MINOR_LOCAL_DELETE_WORK            0x314    //±¾µØÉ¾³ý¹¤×÷»ú
#define MINOR_REMOTE_DELETE_WORK        0x315    //Ô¶³ÌÉ¾³ý¹¤×÷»ú
#define    MINOR_LOCAL_ADD_WORK            0x316    //±¾µØÌí¼Ó¹¤×÷»ú
#define MINOR_REMOTE_ADD_WORK            0x317    //Ô¶³ÌÌí¼Ó¹¤×÷»ú
#define MINOR_LOCAL_IPCHEATMAP_OUTPUT   0x318            /* ±¾µØµ¼³öÈÈ¶ÈÍ¼ÎÄ¼þ      */
#define MINOR_LOCAL_IPCHEATFLOW_OUTPUT  0x319          /* ±¾µØµ¼³öÈÈ¶ÈÁ÷Á¿ÎÄ¼þ      */
#define MINOR_REMOTE_SMS_SEND           0x350    /*Ô¶³Ì·¢ËÍ¶ÌÐÅ*/
#define MINOR_LOCAL_SMS_SEND            0x351   /*±¾µØ·¢ËÍ¶ÌÐÅ*/
#define MINOR_ALARM_SMS_SEND            0x352    /*·¢ËÍ¶ÌÐÅ±¨¾¯*/
#define MINOR_SMS_RECV                  0x353     /*½ÓÊÕ¶ÌÐÅ*/
//£¨±¸×¢£º0x350¡¢0x351ÊÇÖ¸ÈË¹¤ÔÚGUI»òIE¿Ø¼þÉÏ±à¼­²¢·¢ËÍ¶ÌÐÅ£©
#define MINOR_LOCAL_SMS_SEARCH          0x354  /*±¾µØËÑË÷¶ÌÐÅ*/
#define MINOR_REMOTE_SMS_SEARCH         0x355   /*Ô¶³ÌËÑË÷¶ÌÐÅ*/
#define MINOR_LOCAL_SMS_READ            0x356   /*±¾µØ²é¿´¶ÌÐÅ*/
#define MINOR_REMOTE_SMS_READ           0x357   /*Ô¶³Ì²é¿´¶ÌÐÅ*/
#define MINOR_REMOTE_DIAL_CONNECT       0x358   /*Ô¶³Ì¿ªÆôÊÖ¶¯²¦ºÅ*/
#define MINOR_REMOTE_DIAL_DISCONN       0x359   /*Ô¶³ÌÍ£Ö¹ÊÖ¶¯²¦ºÅ*/
#define MINOR_LOCAL_WHITELIST_SET       0x35A   /*±¾µØÅäÖÃ°×Ãûµ¥*/
#define MINOR_REMOTE_WHITELIST_SET      0x35B   /*Ô¶³ÌÅäÖÃ°×Ãûµ¥*/
#define MINOR_LOCAL_DIAL_PARA_SET       0x35C   /*±¾µØÅäÖÃ²¦ºÅ²ÎÊý*/
#define MINOR_REMOTE_DIAL_PARA_SET      0x35D   /*Ô¶³ÌÅäÖÃ²¦ºÅ²ÎÊý*/
#define MINOR_LOCAL_DIAL_SCHEDULE_SET   0x35E   /*±¾µØÅäÖÃ²¦ºÅ¼Æ»®*/
#define MINOR_REMOTE_DIAL_SCHEDULE_SET  0x35F   /*Ô¶³ÌÅäÖÃ²¦ºÅ¼Æ»®*/
#define MINOR_PLAT_OPER                 0x360   /* Æ½Ì¨²Ù×÷*/

//0x400-0x1000 ÃÅ½û²Ù×÷ÀàÐÍ
#define MINOR_REMOTE_OPEN_DOOR          0x400   //Ô¶³Ì¿ªÃÅ
#define MINOR_REMOTE_CLOSE_DOOR         0x401   //Ô¶³Ì¹ØÃÅ
#define MINOR_REMOTE_ALWAYS_OPEN        0x402   //Ô¶³Ì³£¿ª
#define MINOR_REMOTE_ALWAYS_CLOSE       0x403   //Ô¶³Ì³£¹Ø
#define MINOR_REMOTE_CHECK_TIME         0x404   //Ô¶³ÌÊÖ¶¯Ð£Ê±
#define MINOR_NTP_CHECK_TIME            0x405   //NTP×Ô¶¯Ð£Ê±
#define MINOR_REMOTE_CLEAR_CARD         0x406   //Ô¶³ÌÇå¿Õ¿¨ºÅ
#define MINOR_REMOTE_RESTORE_CFG        0x407   //Ô¶³Ì»Ö¸´Ä¬ÈÏ²ÎÊý
#define MINOR_ALARMIN_ARM               0x408   //·ÀÇø²¼·À
#define MINOR_ALARMIN_DISARM            0x409   //·ÀÇø³··À
#define MINOR_LOCAL_RESTORE_CFG         0x40a   //±¾µØ»Ö¸´Ä¬ÈÏ²ÎÊý 
#define MINOR_REMOTE_CAPTURE_PIC        0x40b  //Ô¶³Ì×¥ÅÄ
#define MINOR_MOD_NET_REPORT_CFG        0x40c   //ÐÞ¸ÄÍøÂçÖÐÐÄ²ÎÊýÅäÖÃ
#define MINOR_MOD_GPRS_REPORT_PARAM     0x40d   //ÐÞ¸ÄGPRSÖÐÐÄ²ÎÊýÅäÖÃ
#define MINOR_MOD_REPORT_GROUP_PARAM    0x40e   //ÐÞ¸ÄÖÐÐÄ×é²ÎÊýÅäÖÃ
#define    MINOR_UNLOCK_PASSWORD_OPEN_DOOR  0x40f  //½â³ýÂëÊäÈë

//2012-03-05 ITC²Ù×÷ÈÕÖ¾ÀàÐÍ
#define MINOR_SET_TRIGGERMODE_CFG          0x1001    /*ÉèÖÃ´¥·¢Ä£Ê½²ÎÊý*/
#define MINOR_GET_TRIGGERMODE_CFG          0x1002    /*»ñÈ¡´¥·¢Ä£Ê½²ÎÊý*/
#define MINOR_SET_IOOUT_CFG                0x1003    /*ÉèÖÃIOÊä³ö²ÎÊý*/
#define MINOR_GET_IOOUT_CFG                0x1004    /*»ñÈ¡IOÊä³ö²ÎÊý*/
#define MINOR_GET_TRIGGERMODE_DEFAULT      0x1005    /*»ñÈ¡´¥·¢Ä£Ê½ÍÆ¼ö²ÎÊý*/
#define MINOR_GET_ITCSTATUS                0x1006    /*»ñÈ¡×´Ì¬¼ì²â²ÎÊý*/
#define MINOR_SET_STATUS_DETECT_CFG        0x1007    /*ÉèÖÃ×´Ì¬¼ì²â²ÎÊý*/
#define MINOR_GET_STATUS_DETECT_CFG        0x1008    /*»ñÈ¡×´Ì¬¼ì²â²ÎÊý*/
#define MINOR_SET_VIDEO_TRIGGERMODE_CFG    0x1009  /*ÉèÖÃÊÓÆµ´¥·¢Ä£Ê½²ÎÊý*/
#define MINOR_GET_VIDEO_TRIGGERMODE_CFG    0x100a   /*»ñÈ¡ÊÓÆµ´¥·¢Ä£Ê½²ÎÊý*/

//2013-04-19 ITS²Ù×÷ÈÕÖ¾ÀàÐÍ
#define MINOR_LOCAL_ADD_CAR_INFO            0x2001  /*±¾µØÌí¼Ó³µÁ¾ÐÅÏ¢*/
#define MINOR_LOCAL_MOD_CAR_INFO            0x2002  /*±¾µØÐÞ¸Ä³µÁ¾ÐÅÏ¢*/
#define MINOR_LOCAL_DEL_CAR_INFO            0x2003  /*±¾µØÉ¾³ý³µÁ¾ÐÅÏ¢*/
#define MINOR_LOCAL_FIND_CAR_INFO           0x2004  /*±¾µØ²éÕÒ³µÁ¾ÐÅÏ¢*/
#define MINOR_LOCAL_ADD_MONITOR_INFO        0x2005  /*±¾µØÌí¼Ó²¼¿ØÐÅÏ¢*/
#define MINOR_LOCAL_MOD_MONITOR_INFO        0x2006  /*±¾µØÐÞ¸Ä²¼¿ØÐÅÏ¢*/
#define MINOR_LOCAL_DEL_MONITOR_INFO        0x2007  /*±¾µØÉ¾³ý²¼¿ØÐÅÏ¢*/
#define MINOR_LOCAL_FIND_MONITOR_INFO       0x2008  /*±¾µØ²éÑ¯²¼¿ØÐÅÏ¢*/
#define MINOR_LOCAL_FIND_NORMAL_PASS_INFO   0x2009  /*±¾µØ²éÑ¯Õý³£Í¨ÐÐÐÅÏ¢*/
#define MINOR_LOCAL_FIND_ABNORMAL_PASS_INFO 0x200a  /*±¾µØ²éÑ¯Òì³£Í¨ÐÐÐÅÏ¢*/
#define MINOR_LOCAL_FIND_PEDESTRIAN_PASS_INFO   0x200b  /*±¾µØ²éÑ¯Õý³£Í¨ÐÐÐÅÏ¢*/
#define MINOR_LOCAL_PIC_PREVIEW             0x200c  /*±¾µØÍ¼Æ¬Ô¤ÀÀ*/
#define MINOR_LOCAL_SET_GATE_PARM_CFG       0x200d  /*ÉèÖÃ±¾µØÅäÖÃ³öÈë¿Ú²ÎÊý*/
#define MINOR_LOCAL_GET_GATE_PARM_CFG       0x200e  /*»ñÈ¡±¾µØÅäÖÃ³öÈë¿Ú²ÎÊý*/
#define MINOR_LOCAL_SET_DATAUPLOAD_PARM_CFG 0x200f  /*ÉèÖÃ±¾µØÅäÖÃÊý¾ÝÉÏ´«²ÎÊý*/
#define MINOR_LOCAL_GET_DATAUPLOAD_PARM_CFG 0x2010  /*»ñÈ¡±¾µØÅäÖÃÊý¾ÝÉÏ´«²ÎÊý*/

//2013-11-19ÐÂÔöÈÕÖ¾ÀàÐÍ
#define MINOR_LOCAL_DEVICE_CONTROL                         0x2011   /*±¾µØÉè±¸¿ØÖÆ(±¾µØ¿ª¹ØÕ¢)*/
#define MINOR_LOCAL_ADD_EXTERNAL_DEVICE_INFO               0x2012   /*±¾µØÌí¼ÓÍâ½ÓÉè±¸ÐÅÏ¢ */
#define MINOR_LOCAL_MOD_EXTERNAL_DEVICE_INFO               0x2013   /*±¾µØÐÞ¸ÄÍâ½ÓÉè±¸ÐÅÏ¢ */
#define MINOR_LOCAL_DEL_EXTERNAL_DEVICE_INFO               0x2014   /*±¾µØÉ¾³ýÍâ½ÓÉè±¸ÐÅÏ¢ */
#define MINOR_LOCAL_FIND_EXTERNAL_DEVICE_INFO              0x2015   /*±¾µØ²éÑ¯Íâ½ÓÉè±¸ÐÅÏ¢ */
#define MINOR_LOCAL_ADD_CHARGE_RULE                        0x2016   /*±¾µØÌí¼ÓÊÕ·Ñ¹æÔò */
#define MINOR_LOCAL_MOD_CHARGE_RULE                        0x2017   /*±¾µØÐÞ¸ÄÊÕ·Ñ¹æÔò */
#define MINOR_LOCAL_DEL_CHARGE_RULE                        0x2018   /*±¾µØÉ¾³ýÊÕ·Ñ¹æÔò */
#define MINOR_LOCAL_FIND_CHARGE_RULE                       0x2019   /*±¾µØ²éÑ¯ÊÕ·Ñ¹æÔò */
#define MINOR_LOCAL_COUNT_NORMAL_CURRENTINFO               0x2020   /*±¾µØÍ³¼ÆÕý³£Í¨ÐÐÐÅÏ¢ */
#define MINOR_LOCAL_EXPORT_NORMAL_CURRENTINFO_REPORT       0x2021   /*±¾µØµ¼³öÕý³£Í¨ÐÐÐÅÏ¢Í³¼Æ±¨±í */
#define MINOR_LOCAL_COUNT_ABNORMAL_CURRENTINFO             0x2022   /*±¾µØÍ³¼ÆÒì³£Í¨ÐÐÐÅÏ¢ */
#define MINOR_LOCAL_EXPORT_ABNORMAL_CURRENTINFO_REPORT     0x2023   /*±¾µØµ¼³öÒì³£Í¨ÐÐÐÅÏ¢Í³¼Æ±¨±í */
#define MINOR_LOCAL_COUNT_PEDESTRIAN_CURRENTINFO           0x2024   /*±¾µØÍ³¼ÆÐÐÈËÍ¨ÐÐÐÅÏ¢ */
#define MINOR_LOCAL_EXPORT_PEDESTRIAN_CURRENTINFO_REPORT   0x2025   /*±¾µØµ¼³öÐÐÈËÍ¨ÐÐÐÅÏ¢Í³¼Æ±¨±í */
#define MINOR_LOCAL_FIND_CAR_CHARGEINFO                    0x2026   /*±¾µØ²éÑ¯¹ý³µÊÕ·ÑÐÅÏ¢ */
#define MINOR_LOCAL_COUNT_CAR_CHARGEINFO                   0x2027   /*±¾µØÍ³¼Æ¹ý³µÊÕ·ÑÐÅÏ¢ */
#define MINOR_LOCAL_EXPORT_CAR_CHARGEINFO_REPORT           0x2028   /*±¾µØµ¼³ö¹ý³µÊÕ·ÑÐÅÏ¢Í³¼Æ±¨±í */
#define MINOR_LOCAL_FIND_SHIFTINFO                         0x2029   /*±¾µØ²éÑ¯½»½Ó°àÐÅÏ¢ */
#define MINOR_LOCAL_FIND_CARDINFO                          0x2030   /*±¾µØ²éÑ¯¿¨Æ¬ÐÅÏ¢ */
#define MINOR_LOCAL_ADD_RELIEF_RULE                        0x2031   /*±¾µØÌí¼Ó¼õÃâ¹æÔò */
#define MINOR_LOCAL_MOD_RELIEF_RULE                        0x2032   /*±¾µØÐÞ¸Ä¼õÃâ¹æÔò */
#define MINOR_LOCAL_DEL_RELIEF_RULE                        0x2033   /*±¾µØÉ¾³ý¼õÃâ¹æÔò */
#define MINOR_LOCAL_FIND_RELIEF_RULE                       0x2034   /*±¾µØ²éÑ¯¼õÃâ¹æÔò */
#define MINOR_LOCAL_GET_ENDETCFG                           0x2035   /*±¾µØ»ñÈ¡³öÈë¿Ú¿ØÖÆ»úÀëÏß¼ì²âÅäÖÃ */ 
#define MINOR_LOCAL_SET_ENDETCFG                           0x2036   /*±¾µØÉèÖÃ³öÈë¿Ú¿ØÖÆ»úÀëÏß¼ì²âÅäÖÃ*/
#define MINOR_LOCAL_SET_ENDEV_ISSUEDDATA                   0x2037   /*±¾µØÉèÖÃ³öÈë¿Ú¿ØÖÆ»úÏÂ·¢¿¨Æ¬ÐÅÏ¢ */
#define MINOR_LOCAL_DEL_ENDEV_ISSUEDDATA                   0x2038   /*±¾µØÇå¿Õ³öÈë¿Ú¿ØÖÆ»úÏÂ·¢¿¨Æ¬ÐÅÏ¢ */

#define MINOR_REMOTE_DEVICE_CONTROL                        0x2101   /*Ô¶³ÌÉè±¸¿ØÖÆ*/
#define MINOR_REMOTE_SET_GATE_PARM_CFG                     0x2102   /*ÉèÖÃÔ¶³ÌÅäÖÃ³öÈë¿Ú²ÎÊý*/
#define MINOR_REMOTE_GET_GATE_PARM_CFG                     0x2103   /*»ñÈ¡Ô¶³ÌÅäÖÃ³öÈë¿Ú²ÎÊý*/
#define MINOR_REMOTE_SET_DATAUPLOAD_PARM_CFG               0x2104   /*ÉèÖÃÔ¶³ÌÅäÖÃÊý¾ÝÉÏ´«²ÎÊý*/
#define MINOR_REMOTE_GET_DATAUPLOAD_PARM_CFG               0x2105   /*»ñÈ¡Ô¶³ÌÅäÖÃÊý¾ÝÉÏ´«²ÎÊý*/
#define MINOR_REMOTE_GET_BASE_INFO                         0x2106   /*Ô¶³Ì»ñÈ¡ÖÕ¶Ë»ù±¾ÐÅÏ¢*/
#define MINOR_REMOTE_GET_OVERLAP_CFG                       0x2107   /*Ô¶³Ì»ñÈ¡×Ö·ûµþ¼Ó²ÎÊýÅäÖÃ*/              
#define MINOR_REMOTE_SET_OVERLAP_CFG                       0x2108   /*Ô¶³ÌÉèÖÃ×Ö·ûµþ¼Ó²ÎÊýÅäÖÃ*/ 
#define MINOR_REMOTE_GET_ROAD_INFO                         0x2109   /*Ô¶³Ì»ñÈ¡Â·¿ÚÐÅÏ¢*/
#define MINOR_REMOTE_START_TRANSCHAN                       0x210a   /*Ô¶³Ì½¨Á¢Í¬²½Êý¾Ý·þÎñÆ÷*/
#define MINOR_REMOTE_GET_ECTWORKSTATE                      0x210b   /*Ô¶³Ì»ñÈ¡³öÈë¿ÚÖÕ¶Ë¹¤×÷×´Ì¬*/
#define MINOR_REMOTE_GET_ECTCHANINFO                       0x210c   /*Ô¶³Ì»ñÈ¡³öÈë¿ÚÖÕ¶ËÍ¨µÀ×´Ì¬*/

//Ô¶³Ì¿ØÖÆ 2013-11-19
#define MINOR_REMOTE_ADD_EXTERNAL_DEVICE_INFO              0x210d   /*Ô¶³ÌÌí¼ÓÍâ½ÓÉè±¸ÐÅÏ¢ */
#define MINOR_REMOTE_MOD_EXTERNAL_DEVICE_INFO              0x210e   /*Ô¶³ÌÐÞ¸ÄÍâ½ÓÉè±¸ÐÅÏ¢ */
#define MINOR_REMOTE_GET_ENDETCFG                          0x210f   /*Ô¶³Ì»ñÈ¡³öÈë¿Ú¿ØÖÆ»úÀëÏß¼ì²âÅäÖÃ */ 
#define MINOR_REMOTE_SET_ENDETCFG                          0x2110   /*Ô¶³ÌÉèÖÃ³öÈë¿Ú¿ØÖÆ»úÀëÏß¼ì²âÅäÖÃ*/
#define MINOR_REMOTE_ENDEV_ISSUEDDATA                      0x2111   /*Ô¶³ÌÉèÖÃ³öÈë¿Ú¿ØÖÆ»úÏÂ·¢¿¨Æ¬ÐÅÏ¢ */
#define MINOR_REMOTE_DEL_ENDEV_ISSUEDDATA                  0x2112   /*Ô¶³ÌÇå¿Õ³öÈë¿Ú¿ØÖÆ»úÏÂ·¢¿¨Æ¬ÐÅÏ¢ */

//ITS 0x2115~0x2120 Í£³µ³¡³µÎ»ÏîÄ¿
#define MINOR_REMOTE_ON_CTRL_LAMP           0x2115  /*¿ªÆôÔ¶³Ì¿ØÖÆ³µÎ»Ö¸Ê¾µÆ*/       
#define MINOR_REMOTE_OFF_CTRL_LAMP          0x2116  /*¹Ø±ÕÔ¶³Ì¿ØÖÆ³µÎ»Ö¸Ê¾µÆ*/
//Netra3.1.0
#define MINOR_SET_VOICE_LEVEL_PARAM         0x2117  /*ÉèÖÃÒôÁ¿´óÐ¡ */
#define MINOR_SET_VOICE_INTERCOM_PARAM      0x2118  /*ÉèÖÃÒôÁ¿Â¼Òô */
#define MINOR_SET_INTELLIGENT_PARAM         0x2119  /*ÖÇÄÜÅäÖÃ*/ 
#define MINOR_LOCAL_SET_RAID_SPEED          0x211a  /*±¾µØÉèÖÃraidËÙ¶È*/
#define MINOR_REMOTE_SET_RAID_SPEED         0x211b /*Ô¶³ÌÉèÖÃraidËÙ¶È*/
//Nerta3.1.2
#define MINOR_REMOTE_CREATE_STORAGE_POOL    0x211c   //Ô¶³ÌÌí¼Ó´æ´¢³Ø
#define MINOR_REMOTE_DEL_STORAGE_POOL       0x211d    //Ô¶³ÌÉ¾³ý´æ´¢³Ø

#define MINOR_REMOTE_DEL_PIC                0x2120   //Ô¶³ÌÉ¾³ýÍ¼Æ¬Êý¾Ý
#define MINOR_REMOTE_DEL_RECORD             0x2121   //Ô¶³ÌÉ¾³ýÂ¼ÏñÊý¾Ý
#define MINOR_REMOTE_CLOUD_ENABLE           0x2123  //Ô¶³ÌÉèÖÃÔÆÏµÍ³ÆôÓÃ
#define MINOR_REMOTE_CLOUD_DISABLE          0x2124  //Ô¶³ÌÉèÖÃÔÆÏµÍ³½ûÓÃ
#define MINOR_REMOTE_CLOUD_MODIFY_PARAM     0x2125  //Ô¶³ÌÐÞ¸Ä´æ´¢³Ø²ÎÊý
#define MINOR_REMOTE_CLOUD_MODIFY_VOLUME    0x2126  //Ô¶³ÌÐÞ¸Ä´æ´¢³ØÈÝÁ¿
#define MINOR_REMOTE_GET_GB28181_SERVICE_PARAM    0x2127  //Ô¶³Ì»ñÈ¡GB28181·þÎñ²ÎÊý
#define MINOR_REMOTE_SET_GB28181_SERVICE_PARAM    0x2128  //Ô¶³ÌÉèÖÃGB28181·þÎñ²ÎÊý
#define MINOR_LOCAL_GET_GB28181_SERVICE_PARAM     0x2129  //±¾µØ»ñÈ¡GB28181·þÎñ²ÎÊý
#define MINOR_LOCAL_SET_GB28181_SERVICE_PARAM     0x212a  //±¾µØÅäÖÃB28181·þÎñ²ÎÊý
#define MINOR_REMOTE_SET_SIP_SERVER               0x212b  //Ô¶³ÌÅäÖÃSIP SERVER
#define MINOR_LOCAL_SET_SIP_SERVER                0x212c  //±¾µØÅäÖÃSIP SERVER
#define MINOR_LOCAL_BLACKWHITEFILE_OUTPUT         0x212d  //±¾µØºÚ°×Ãûµ¥µ¼³ö
#define MINOR_LOCAL_BLACKWHITEFILE_INPUT          0x212e  //±¾µØºÚ°×Ãûµ¥µ¼Èë
#define MINOR_REMOTE_BALCKWHITECFGFILE_OUTPUT     0x212f  //Ô¶³ÌºÚ°×Ãûµ¥µ¼³ö
#define MINOR_REMOTE_BALCKWHITECFGFILE_INPUT      0x2130  //Ô¶³ÌºÚ°×Ãûµ¥µ¼Èë


#define MINOR_REMOTE_CREATE_MOD_VIEWLIB_SPACE        0x2200    /*Ô¶³Ì´´½¨/ÐÞ¸ÄÊÓÍ¼¿â¿Õ¼ä*/
#define MINOR_REMOTE_DELETE_VIEWLIB_FILE            0x2201    /*Ô¶³ÌÉ¾³ýÊÓÍ¼¿âÎÄ¼þ*/
#define MINOR_REMOTE_DOWNLOAD_VIEWLIB_FILE            0x2202    /*Ô¶³ÌÏÂÔØÊÓÍ¼¿âÎÄ¼þ*/
#define MINOR_REMOTE_UPLOAD_VIEWLIB_FILE            0x2203    /*Ô¶³ÌÉÏ´«ÊÓÍ¼¿âÎÄ¼þ*/
#define MINOR_LOCAL_CREATE_MOD_VIEWLIB_SPACE        0x2204    /*±¾µØ´´½¨/ÐÞ¸ÄÊÓÍ¼¿â¿Õ¼ä*/

#define MINOR_LOCAL_SET_DEVICE_ACTIVE   0x3000  //±¾µØ¼¤»îÉè±¸
#define MINOR_REMOTE_SET_DEVICE_ACTIVE  0x3001  //Ô¶³Ì¼¤»îÉè±¸
#define MINOR_LOCAL_PARA_FACTORY_DEFAULT    0x3002  //±¾µØ»Ø¸´³ö³§ÉèÖÃ
#define MINOR_REMOTE_PARA_FACTORY_DEFAULT   0x3003  //Ô¶³Ì»Ö¸´³ö³§ÉèÖÃ

/*ÐÅÏ¢·¢²¼·þÎñÆ÷²Ù×÷ÈÕÖ¾*/
#define MINOR_UPLAOD_STATIC_MATERIAL                0x2401  //¾²Ì¬ËØ²ÄÉÏ´«
#define MINOR_UPLOAD_DYNAMIC_MATERIAL               0x2402  //¶¯Ì¬ËØ²ÄÉÏ´«
#define MINOR_DELETE_MATERIAL                       0x2403  //É¾³ýËØ²Ä
#define MINOR_DOWNLOAD_STATIC_MATERIAL              0x2404  //¾²Ì¬ËØ²ÄÏÂÔØ
#define MINOR_COVER_STATIC_MATERIAL                 0x2405  //¾²Ì¬ËØ²Ä¸²¸Ç
#define MINOR_APPROVE_MATERIAL                      0x2406  //ËØ²ÄÉóºË
#define MINOR_UPLAOD_PROGRAM                        0x2407  //ÉÏ´«½ÚÄ¿
#define MINOR_DOWNLOAD_PROGRAM                      0x2408  //ÏÂÔØ½ÚÄ¿
#define MINOR_DELETE_PROGRAM                        0x2409  //É¾³ý½ÚÄ¿
#define MINOR_MODIFY_PROGRAM                        0x240a  //½ÚÄ¿ÊôÐÔÐÞ¸Ä
#define MINOR_APPROVE_PRAGRAM                       0x240b  //½ÚÄ¿ÉóºË
#define MINOR_UPLAOD_SCHEDULE                       0x240c  //ÉÏ´«ÈÕ³Ì
#define MINOR_DOWNLOAD_SCHEDULE                     0x240d  //ÏÂÔØÈÕ³Ì
#define MINOR_DELETE_SCHEDULE                       0x240e  //É¾³ýÈÕ³Ì
#define MINOR_MODIFY_SCHEDULE                       0x240f  //ÐÞ¸ÄÈÕ³ÌÊôÐÔ
#define MINOR_RELEASE_SCHEDULE                      0x2410  //·¢²¼ÈÕ³Ì
#define MINOR_ADD_TERMINAL                          0x2411  //Ìí¼ÓÖÕ¶Ë
#define MINOR_DELETE_TERMINAL                       0x2412  //É¾³ýÖÕ¶Ë
#define MINOR_MODIFY_TERMIANL_PARAM                 0x2413  //ÐÞ¸ÄÖÕ¶Ë²ÎÊý            
#define MINOR_MODIFY_TERMIANL_PLAY_PARAM            0x2414  //ÅäÖÃÖÕ¶Ë²¥·Å²ÎÊý
#define MINOR_ADD_TERMIANL_GROUP                    0x2415  //Ìí¼ÓÖÕ¶Ë×é
#define MINOR_MODIFY_TERMINAL_GROUP_PARAM           0x2416  //ÐÞ¸ÄÖÕ¶Ë×é²ÎÊý
#define MINOR_DELETE_TERMIANL_GROUP                 0x2417  //É¾³ýÖÕ¶Ë×é
#define MINOR_TERMINAL_PLAY_CONTROL                 0x2418  //ÖÕ¶Ë²¥·Å¿ØÖÆ
#define MINOR_TERMINAL_ON_OFF_LINE                  0x2419  //ÖÕ¶ËÉÏÏÂÏß
#define MINOR_SET_SWITCH_PLAN                       0x241a  //ÉèÖÃÖÕ¶Ë¶¨Ê±¿ª¹Ø»ú¼Æ»®
#define MINOR_SET_VOLUME_PLAN                       0x241b  //ÉèÖÃÖÕ¶Ë¶¨Ê±ÒôÁ¿¼Æ»®
#define MINOR_TERMINAL_SCREENSHOT                   0x241c  //ÖÕ¶Ë½ØÆÁ


#define MINOR_REMOTE_CONFERENCE_CONFIG             0x2501  //MCU»áÒéÅäÖÃ
#define MINOR_REMOTE_TERMINAL_CONFIG               0x2502  //MCUÖÕ¶ËÅäÖÃ
#define MINOR_REMOTE_GROUP_CONFIG                  0x2503  //MCU·Ö×éÅäÖÃ
#define MINOR_REMOTE_CONFERENCE_CTRL               0x2504  //MCU»áÒé¿ØÖÆ
#define MINOR_REMOTE_TERMINAL_CTRL                 0x2505  //MCUÖÕ¶Ë¿ØÖÆ
/*ÈÕÖ¾¸½¼ÓÐÅÏ¢*/
//Ö÷ÀàÐÍ
#define MAJOR_INFORMATION               0x4     /*¸½¼ÓÐÅÏ¢*/
//´ÎÀàÐÍ
#define MINOR_HDD_INFO                  0xa1 /*Ó²ÅÌÐÅÏ¢*/
#define MINOR_SMART_INFO                0xa2 /*SMARTÐÅÏ¢*/
#define MINOR_REC_START                 0xa3 /*¿ªÊ¼Â¼Ïñ*/
#define MINOR_REC_STOP                  0xa4 /*Í£Ö¹Â¼Ïñ*/
#define MINOR_REC_OVERDUE                0xa5 /*¹ýÆÚÂ¼ÏñÉ¾³ý*/
#define MINOR_LINK_START                0xa6 //Á¬½ÓÇ°¶ËÉè±¸
#define MINOR_LINK_STOP                    0xa7 //¶Ï¿ªÇ°¶ËÉè±¸¡¡
#define MINOR_NET_DISK_INFO                0xa8 //ÍøÂçÓ²ÅÌÐÅÏ¢
#define MINOR_RAID_INFO                 0xa9 //raidÏà¹ØÐÅÏ¢
#define MINOR_RUN_STATUS_INFO           0xaa /*ÏµÍ³ÔËÐÐ×´Ì¬ÐÅÏ¢*/

//Netra3.0.0
#define MINOR_SPARE_START_BACKUP        0xab   /*ÈÈ±¸ÏµÍ³¿ªÊ¼±¸·ÝÖ¸¶¨¹¤×÷»ú*/
#define MINOR_SPARE_STOP_BACKUP            0xac   /*ÈÈ±¸ÏµÍ³Í£Ö¹±¸·ÝÖ¸¶¨¹¤×÷»ú*/
#define MINOR_SPARE_CLIENT_INFO         0xad   /*ÈÈ±¸¿Í»§»úÐÅÏ¢*/
#define MINOR_ANR_RECORD_START            0xae   /*ANRÂ¼Ïñ¿ªÊ¼*/
#define MINOR_ANR_RECORD_END            0xaf   /*ANRÂ¼Ïñ½áÊø*/
#define MINOR_ANR_ADD_TIME_QUANTUM        0xb0    /*ANRÌí¼ÓÊ±¼ä¶Î*/
#define MINOR_ANR_DEL_TIME_QUANTUM        0xb1    /*ANRÉ¾³ýÊ±¼ä¶Î*/

#define MINOR_PIC_REC_START             0xb3  /* ¿ªÊ¼×¥Í¼*/    
#define MINOR_PIC_REC_STOP              0xb4  /* Í£Ö¹×¥Í¼*/
#define MINOR_PIC_REC_OVERDUE           0xb5  /* ¹ýÆÚÍ¼Æ¬ÎÄ¼þÉ¾³ý */
//Netra3.1.0
#define  MINOR_CLIENT_LOGIN             0xb6   /*µÇÂ¼·þÎñÆ÷³É¹¦*/
#define  MINOR_CLIENT_RELOGIN            0xb7   /*ÖØÐÂµÇÂ¼·þÎñÆ÷*/
#define  MINOR_CLIENT_LOGOUT            0xb8   /*ÍË³ö·þÎñÆ÷³É¹¦*/
#define  MINOR_CLIENT_SYNC_START        0xb9   /*Â¼ÏñÍ¬²½¿ªÊ¼*/
#define  MINOR_CLIENT_SYNC_STOP            0xba   /*Â¼ÏñÍ¬²½ÖÕÖ¹*/
#define  MINOR_CLIENT_SYNC_SUCC            0xbb   /*Â¼ÏñÍ¬²½³É¹¦*/
#define  MINOR_CLIENT_SYNC_EXCP            0xbc   /*Â¼ÏñÍ¬²½Òì³£*/
#define  MINOR_GLOBAL_RECORD_ERR_INFO   0xbd   /*È«¾Ö´íÎó¼ÇÂ¼ÐÅÏ¢*/
#define  MINOR_BUFFER_STATE             0xbe   /*»º³åÇø×´Ì¬ÈÕÖ¾¼ÇÂ¼*/
#define  MINOR_DISK_ERRORINFO_V2        0xbf   /*Ó²ÅÌ´íÎóÏêÏ¸ÐÅÏ¢V2*/
#define  MINOR_CS_DATA_EXPIRED          0xc0   //ÔÆ´æ´¢Êý¾Ý¹ýÆÚ
#define  MINOR_PLAT_INFO                0xc1   //Æ½Ì¨²Ù×÷ÐÅÏ¢
#define  MINOR_DIAL_STAT                0xc2   /*²¦ºÅ×´Ì¬*/

#define MINOR_UNLOCK_RECORD             0xc3   //¿ªËø¼ÇÂ¼
#define MINOR_VIS_ALARM                 0xc4   //·ÀÇø±¨¾¯
#define MINOR_TALK_RECORD               0xc5   //Í¨»°¼ÇÂ¼
#define MINOR_ACCESSORIES_MESSAGE       0xc6 //Åä¼þ°åÐÅÏ¢
#define MINOR_EZVIZ_OPERATION           0xcc   //Ó©Ê¯ÔËÐÐ×´Ì¬
/*ÊÂ¼þ*/
//Ö÷ÀàÐÍ
#define MAJOR_EVENT                             0x5     /*ÊÂ¼þ*/
//´ÎÀàÐÍ
#define MINOR_LEGAL_CARD_PASS                   0x01    //ºÏ·¨¿¨ÈÏÖ¤Í¨¹ý
#define MINOR_CARD_AND_PSW_PASS                 0x02    //Ë¢¿¨¼ÓÃÜÂëÈÏÖ¤Í¨¹ý
#define MINOR_CARD_AND_PSW_FAIL                 0x03    //Ë¢¿¨¼ÓÃÜÂëÈÏÖ¤Ê§°Ü
#define MINOR_CARD_AND_PSW_TIMEOUT              0x04    //Êý¿¨¼ÓÃÜÂëÈÏÖ¤³¬Ê±
#define MINOR_CARD_AND_PSW_OVER_TIME            0x05    //Ë¢¿¨¼ÓÃÜÂë³¬´Î
#define MINOR_CARD_NO_RIGHT                     0x06    //Î´·ÖÅäÈ¨ÏÞ
#define MINOR_CARD_INVALID_PERIOD               0x07    //ÎÞÐ§Ê±¶Î
#define MINOR_CARD_OUT_OF_DATE                  0x08    //¿¨ºÅ¹ýÆÚ
#define MINOR_INVALID_CARD                      0x09    //ÎÞ´Ë¿¨ºÅ
#define MINOR_ANTI_SNEAK_FAIL                   0x0a    //·´Ç±»ØÈÏÖ¤Ê§°Ü
#define MINOR_INTERLOCK_DOOR_NOT_CLOSE          0x0b    //»¥ËøÃÅÎ´¹Ø±Õ
#define MINOR_NOT_BELONG_MULTI_GROUP            0x0c    //¿¨²»ÊôÓÚ¶àÖØÈÏÖ¤Èº×é
#define MINOR_INVALID_MULTI_VERIFY_PERIOD       0x0d    //¿¨²»ÔÚ¶àÖØÈÏÖ¤Ê±¼ä¶ÎÄÚ
#define MINOR_MULTI_VERIFY_SUPER_RIGHT_FAIL     0x0e    //¶àÖØÈÏÖ¤Ä£Ê½³¬¼¶È¨ÏÞÈÏÖ¤Ê§°Ü
#define MINOR_MULTI_VERIFY_REMOTE_RIGHT_FAIL    0x0f    //¶àÖØÈÏÖ¤Ä£Ê½Ô¶³ÌÈÏÖ¤Ê§°Ü
#define MINOR_MULTI_VERIFY_SUCCESS              0x10    //¶àÖØÈÏÖ¤³É¹¦
#define MINOR_LEADER_CARD_OPEN_BEGIN            0x11    //Ê×¿¨¿ªÃÅ¿ªÊ¼
#define MINOR_LEADER_CARD_OPEN_END              0x12    //Ê×¿¨¿ªÃÅ½áÊø
#define MINOR_ALWAYS_OPEN_BEGIN                 0x13    //³£¿ª×´Ì¬¿ªÊ¼
#define MINOR_ALWAYS_OPEN_END                   0x14    //³£¿ª×´Ì¬½áÊø
#define MINOR_LOCK_OPEN                         0x15    //ÃÅËø´ò¿ª
#define MINOR_LOCK_CLOSE                        0x16    //ÃÅËø¹Ø±Õ
#define MINOR_DOOR_BUTTON_PRESS                 0x17    //¿ªÃÅ°´Å¥´ò¿ª
#define MINOR_DOOR_BUTTON_RELEASE               0x18    //¿ªÃÅ°´Å¥·Å¿ª
#define MINOR_DOOR_OPEN_NORMAL                  0x19    //Õý³£¿ªÃÅ£¨ÃÅ´Å£©
#define MINOR_DOOR_CLOSE_NORMAL                 0x1a    //Õý³£¹ØÃÅ£¨ÃÅ´Å£©
#define MINOR_DOOR_OPEN_ABNORMAL                0x1b    //ÃÅÒì³£´ò¿ª£¨ÃÅ´Å£©
#define MINOR_DOOR_OPEN_TIMEOUT                 0x1c    //ÃÅ´ò¿ª³¬Ê±£¨ÃÅ´Å£©
#define MINOR_ALARMOUT_ON                       0x1d    //±¨¾¯Êä³ö´ò¿ª
#define MINOR_ALARMOUT_OFF                      0x1e    //±¨¾¯Êä³ö¹Ø±Õ
#define MINOR_ALWAYS_CLOSE_BEGIN                0x1f    //³£¹Ø×´Ì¬¿ªÊ¼
#define MINOR_ALWAYS_CLOSE_END                  0x20    //³£¹Ø×´Ì¬½áÊø                          
#define MINOR_MULTI_VERIFY_NEED_REMOTE_OPEN     0x21    //¶àÖØ¶àÖØÈÏÖ¤ÐèÒªÔ¶³Ì¿ªÃÅ
#define MINOR_MULTI_VERIFY_SUPERPASSWD_VERIFY_SUCCESS  0x22  //¶àÖØÈÏÖ¤³¬¼¶ÃÜÂëÈÏÖ¤³É¹¦ÊÂ¼þ
#define MINOR_MULTI_VERIFY_REPEAT_VERIFY        0x23    //¶àÖØÈÏÖ¤ÖØ¸´ÈÏÖ¤ÊÂ¼þ
#define MINOR_MULTI_VERIFY_TIMEOUT               0x24    //¶àÖØÈÏÖ¤ÖØ¸´ÈÏÖ¤ÊÂ¼þ
#define MINOR_DOORBELL_RINGING                  0x25    //ÃÅÁåÏì
#define MINOR_FINGERPRINT_COMPARE_PASS          0x26    //Ö¸ÎÆ±È¶ÔÍ¨¹ý
#define MINOR_FINGERPRINT_COMPARE_FAIL          0x27    //Ö¸ÎÆ±È¶ÔÊ§°Ü
#define MINOR_CARD_FINGERPRINT_VERIFY_PASS              0x28    //Ë¢¿¨¼ÓÖ¸ÎÆÈÏÖ¤Í¨¹ý
#define MINOR_CARD_FINGERPRINT_VERIFY_FAIL              0x29    //Ë¢¿¨¼ÓÖ¸ÎÆÈÏÖ¤Ê§°Ü
#define MINOR_CARD_FINGERPRINT_VERIFY_TIMEOUT           0x2a    //Ë¢¿¨¼ÓÖ¸ÎÆÈÏÖ¤³¬Ê±
#define MINOR_CARD_FINGERPRINT_PASSWD_VERIFY_PASS       0x2b    //Ë¢¿¨¼ÓÖ¸ÎÆ¼ÓÃÜÂëÈÏÖ¤Í¨¹ý
#define MINOR_CARD_FINGERPRINT_PASSWD_VERIFY_FAIL       0x2c    //Ë¢¿¨¼ÓÖ¸ÎÆ¼ÓÃÜÂëÈÏÖ¤Ê§°Ü
#define MINOR_CARD_FINGERPRINT_PASSWD_VERIFY_TIMEOUT    0x2d    //Ë¢¿¨¼ÓÖ¸ÎÆ¼ÓÃÜÂëÈÏÖ¤³¬Ê±
#define MINOR_FINGERPRINT_PASSWD_VERIFY_PASS            0x2e    //Ö¸ÎÆ¼ÓÃÜÂëÈÏÖ¤Í¨¹ý
#define MINOR_FINGERPRINT_PASSWD_VERIFY_FAIL            0x2f    //Ö¸ÎÆ¼ÓÃÜÂëÈÏÖ¤Ê§°Ü
#define MINOR_FINGERPRINT_PASSWD_VERIFY_TIMEOUT         0x30    //Ö¸ÎÆ¼ÓÃÜÂëÈÏÖ¤³¬Ê±
#define MINOR_FINGERPRINT_INEXISTENCE                   0x31    //Ö¸ÎÆ²»´æÔÚ
#define MINOR_CARD_PLATFORM_VERIFY                      0x32    //Ë¢¿¨Æ½Ì¨ÈÏÖ¤
#define MINOR_CALL_CENTER                               0x33    //ºô½ÐÖÐÐÄÊÂ¼þ
#define MINOR_FIRE_RELAY_TURN_ON_DOOR_ALWAYS_OPEN       0x34    //Ïû·À¼ÌµçÆ÷µ¼Í¨´¥·¢ÃÅ³£¿ª
#define MINOR_FIRE_RELAY_RECOVER_DOOR_RECOVER_NORMAL    0x35   //Ïû·À¼ÌµçÆ÷»Ö¸´ÃÅ»Ö¸´Õý³£

typedef enum tagALARMHOST_MAJOR_TYPE
{
    MAJOR_ALARMHOST_ALARM = 1,
        MAJOR_ALARMHOST_EXCEPTION,
        MAJOR_ALARMHOST_OPERATION,
        MAJ0R_ALARMHOST_EVENT
}ALARMHOST_MAJOR_TYPE;

typedef enum tagALARMHOST_MINOR_TYPE
{
    // ±¨¾¯ 
    MINOR_SHORT_CIRCUIT =0x01,      // ¶ÌÂ·±¨¾¯
        MINOR_BROKEN_CIRCUIT,           // ¶ÏÂ·±¨¾¯
        MINOR_ALARM_RESET,              // ±¨¾¯¸´Î»
        MINOR_ALARM_NORMAL,                // ±¨¾¯»Ö¸´Õý³£
        MINOR_PASSWORD_ERROR,            // ÃÜÂë´íÎó£¨Á¬Ðø3´ÎÊäÈëÃÜÂë´íÎó£©
        MINOR_ID_CARD_ILLEGALLY,        // ·Ç·¨¸ÐÓ¦¿¨ID
        MINOR_KEYPAD_REMOVE,            // ¼üÅÌ·À²ð
        MINOR_KEYPAD_REMOVE_RESTORE,    // ¼üÅÌ·À²ð¸´Î»
        MINOR_DEV_REMOVE,                // Éè±¸·À²ð
        MINOR_DEV_REMOVE_RESTORE,        // Éè±¸·À²ð¸´Î»
        MINOR_BELOW_ALARM_LIMIT1,        // Ä£ÄâÁ¿µÍÓÚ±¨¾¯ÏÞ1
        MINOR_BELOW_ALARM_LIMIT2,        // Ä£ÄâÁ¿µÍÓÚ±¨¾¯ÏÞ2
        MINOR_BELOW_ALARM_LIMIT3,        // Ä£ÄâÁ¿µÍÓÚ±¨¾¯ÏÞ3
        MINOR_BELOW_ALARM_LIMIT4,        // Ä£ÄâÁ¿µÍÓÚ±¨¾¯ÏÞ4
        MINOR_ABOVE_ALARM_LIMIT1,        // Ä£ÄâÁ¿¸ßÓÚ±¨¾¯ÏÞ1
        MINOR_ABOVE_ALARM_LIMIT2,        // Ä£ÄâÁ¿¸ßÓÚ±¨¾¯ÏÞ2
        MINOR_ABOVE_ALARM_LIMIT3,        // Ä£ÄâÁ¿¸ßÓÚ±¨¾¯ÏÞ3
        MINOR_ABOVE_ALARM_LIMIT4,        // Ä£ÄâÁ¿¸ßÓÚ±¨¾¯ÏÞ4
        MINOR_URGENCYBTN_ON,            // ½ô¼±°´Å¥°´ÏÂ
        MINOR_URGENCYBTN_OFF,            // ½ô¼±°´Å¥¸´Î»
        MINOR_VIRTUAL_DEFENCE_BANDIT,            //Èí·ÀÇø·Ë¾¯
        MINOR_VIRTUAL_DEFENCE_FIRE,                //Èí·ÀÇø»ð¾¯
        MINOR_VIRTUAL_DEFENCE_URGENT,            //Èí·ÀÇø½ô¼±
        MINOR_ALARMHOST_MOTDET_START,            //ÒÆ¶¯Õì²â±¨¾¯¿ªÊ¼
        MINOR_ALARMHOST_MOTDET_STOP,            //ÒÆ¶¯Õì²â±¨¾¯½áÊø
        MINOR_ALARMHOST_HIDE_ALARM_START,        //ÕÚµ²±¨¾¯¿ªÊ¼
        MINOR_ALARMHOST_HIDE_ALARM_STOP,        //ÕÚµ²±¨¾¯½áÊø
        MINOR_ALARMHOST_UPS_ALARM,                //UPS±¨¾¯
        MINOR_ALARMHOST_ELECTRICITY_METER_ALARM, //µçÁ¿±í±¨¾¯
        MINOR_ALARMHOST_SWITCH_POWER_ALARM,        //¿ª¹ØµçÔ´±¨¾¯
        MINOR_ALARMHOST_GAS_DETECT_SYS_ALARM,      //ÆøÌå¼ì²âÏµÍ³±¨¾¯
        MINOR_ALARMHOST_TRANSFORMER_TEMPRATURE_ALARM, //±äµçÆ÷ÎÂÏÔ±í±¨¾¯
        MINOR_ALARMHOST_TEMP_HUMI_ALARM,            //ÎÂÊª¶È´«¸ÐÆ÷±¨¾¯
        MINOR_ALARMHOST_UPS_ALARM_RESTORE,    //UPS±¨¾¯»Ö¸´
        MINOR_ALARMHOST_ELECTRICITY_METER_ALARM_RESTORE, //µçÁ¿±í±¨¾¯»Ö¸´
        MINOR_ALARMHOST_SWITCH_POWER_ALARM_RESTORE,      //¿ª¹ØµçÔ´±¨¾¯»Ö¸´
        MINOR_ALARMHOST_GAS_DETECT_SYS_ALARM_RESTORE,      //ÆøÌå¼ì²âÏµÍ³±¨¾¯»Ö¸´
        MINOR_ALARMHOST_TRANSFORMER_TEMPRATURE_ALARM_RESTORE, //±äµçÆ÷ÎÂÏÔ±í±¨¾¯»Ö¸´
        MINOR_ALARMHOST_TEMP_HUMI_ALARM_RESTORE,          //ÎÂÊª¶È´«¸ÐÆ÷±¨¾¯»Ö¸´
        MINOR_ALARMHOST_WATER_LEVEL_SENSOR_ALARM,            //Ë®Î»´«¸ÐÆ÷±¨¾¯
        MINOR_ALARMHOST_WATER_LEVEL_SENSOR_ALARM_RESTORE,    //Ë®Î»´«¸ÐÆ÷±¨¾¯»Ö¸´
        MINOR_ALARMHOST_DUST_NOISE_ALARM,                    //Ñï³¾ÔëÉù´«¸ÐÆ÷±¨¾¯
        MINOR_ALARMHOST_DUST_NOISE_ALARM_RESTORE,            //Ñï³¾ÔëÉù´«¸ÐÆ÷±¨¾¯»Ö¸´
        MINOR_ALARMHOST_ENVIRONMENTAL_LOGGER_ALARM,            //»·¾³²É¼¯ÒÇ±¨¾¯
        MINOR_ALARMHOST_ENVIRONMENTAL_LOGGER_ALARM_RESTORE,    //»·¾³²É¼¯ÒÇ±¨¾¯»Ö¸´
        
        MINOR_ALARMHOST_TRIGGER_TAMPER,                //Ì½²âÆ÷·À²ð
        MINOR_ALARMHOST_TRIGGER_TAMPER_RESTORE,                //Ì½²âÆ÷·À²ð»Ö¸´
        MINOR_ALARMHOST_EMERGENCY_CALL_HELP_ALARM,            //½ô¼±ºô½ÐÇóÖú±¨¾¯
        MINOR_ALARMHOST_EMERGENCY_CALL_HELP_ALARM_RESTORE,    //½ô¼±ºô½ÐÇóÖú±¨¾¯»Ö¸´
        
        // Òì³£
        MINOR_POWER_ON      = 0x01,    // ÉÏµç
        MINOR_POWER_OFF,                // µôµç
        MINOR_WDT_RESET,                // WDT ¸´Î»
        MINOR_LOW_BATTERY_VOLTAGE,        // Ðîµç³ØµçÑ¹µÍ
        MINOR_AC_LOSS,                    // ½»Á÷µç¶Ïµç
        MINOR_AC_RESTORE,                // ½»Á÷µç»Ö¸´
        MINOR_RTC_EXCEPTION,            // RTCÊµÊ±Ê±ÖÓÒì³£
        MINOR_NETWORK_CONNECT_FAILURE,    // ÍøÂçÁ¬½Ó¶Ï
        MINOR_NETWORK_CONNECT_RESTORE,    // ÍøÂçÁ¬½Ó»Ö¸´
        MINOR_TEL_LINE_CONNECT_FAILURE,    // µç»°ÏßÁ¬½Ó¶Ï
        MINOR_TEL_LINE_CONNECT_RESTORE,    // µç»°ÏßÁ¬½Ó»Ö¸´
        MINOR_EXPANDER_BUS_LOSS,        // À©Õ¹×ÜÏßÄ£¿éµôÏß
        MINOR_EXPANDER_BUS_RESTORE,        // À©Õ¹×ÜÏßÄ£¿éµôÏß»Ö¸´
        MINOR_KEYPAD_BUS_LOSS,            // ¼üÅÌ×ÜÏßÄ£¿éµôÏß
        MINOR_KEYPAD_BUS_RESTORE,        // ¼üÅÌ×ÜÏßÄ£¿éµôÏß»Ö¸´
        MINOR_SENSOR_FAILURE,            // Ä£ÄâÁ¿´«¸ÐÆ÷¹ÊÕÏ
        MINOR_SENSOR_RESTORE,            // Ä£ÄâÁ¿´«¸ÐÆ÷»Ö¸´
        MINOR_RS485_CONNECT_FAILURE,    // RS485Í¨µÀÁ¬½Ó¶Ï
        MINOR_RS485_CONNECT_RESTORE,    // RS485Í¨µÀÁ¬½Ó¶Ï»Ö¸´
        MINOR_BATTERT_VOLTAGE_RESTORE,  // Ðîµç³ØµçÑ¹»Ö¸´Õý³£ 
        MINOR_WIRED_NETWORK_ABNORMAL,    //ÓÐÏßÍøÂçÒì³£
        MINOR_WIRED_NETWORK_RESTORE,    //ÓÐÏßÍøÂç»Ö¸´Õý³£
        MINOR_GPRS_ABNORMAL,            //GPRSÍ¨ÐÅÒì³£
        MINOR_GPRS_RESTORE,                //GPRS»Ö¸´Õý³£
        MINOR_3G_ABNORMAL,                //3GÍ¨ÐÅÒì³£
        MINOR_3G_RESTORE,                //3G»Ö¸´Õý³£
        MINOR_SIM_CARD_ABNORMAL,        //SIM¿¨Òì³£
        MINOR_SIM_CARD_RESTORE,            //SIM¿¨»Ö¸´Õý³£
        MINOR_ALARMHOST_VI_LOST,        // ÊÓÆµÐÅºÅ¶ªÊ§
        MINOR_ALARMHOST_ILLEGAL_ACCESS,    // ·Ç·¨·ÃÎÊ
        MINOR_ALARMHOST_HD_FULL,        // Ó²ÅÌÂú
        MINOR_ALARMHOST_HD_ERROR,        // Ó²ÅÌ´íÎó
        MINOR_ALARMHOST_DCD_LOST,        // MODEM µôÏß(±£Áô²»Ê¹ÓÃ)
        MINOR_ALARMHOST_IP_CONFLICT,    // IPµØÖ·³åÍ»
        MINOR_ALARMHOST_NET_BROKEN,        // ÍøÂç¶Ï¿ª
        MINOR_ALARMHOST_REC_ERROR,      // Â¼Ïñ³ö´í
        MINOR_ALARMHOST_VI_EXCEPTION,   // ÊÓÆµÊäÈëÒì³£(Ö»Õë¶ÔÄ£ÄâÍ¨µÀ)
        MINOR_ALARMHOST_FORMAT_HDD_ERROR, //Ô¶³Ì¸ñÊ½»¯Ó²ÅÌÊ§°Ü
        MINOR_ALARMHOST_USB_ERROR,        //USBÍ¨ÐÅ¹ÊÕÏ
        MINOR_ALARMHOST_USB_RESTORE,    //USBÍ¨ÐÅ¹ÊÕÏ»Ö¸´
        MINOR_ALARMHOST_PRINT_ERROR,    //´òÓ¡»ú¹ÊÕÏ
        MINOR_ALARMHOST_PRINT_RESTORE,    //´òÓ¡»ú¹ÊÕÏ»Ö¸´
        MINOR_SUBSYSTEM_COMMUNICATION_ERROR, //×Ó°åÍ¨Ñ¶´íÎó
        MINOR_ALARMHOST_IPC_NO_LINK,                /* IPCÁ¬½Ó¶Ï¿ª  */
        MINOR_ALARMHOST_IPC_IP_CONFLICT,            /*ipc ip µØÖ· ³åÍ»*/
        MINOR_ALARMHOST_VI_MISMATCH,                /*ÊÓÆµÖÆÊ½²»Æ¥Åä*/
        MINOR_ALARMHOST_MCU_RESTART,                //MCUÖØÆô
        MINOR_ALARMHOST_GPRS_MODULE_FAULT,                     /*GPRSÄ£¿é¹ÊÕÏ*/
        MINOR_ALARMHOST_TELEPHONE_MODULE_FAULT,                 /*µç»°Ä£¿é¹ÊÕÏ*/
        
        // ²Ù×÷ 
        MINOR_GUARD         = 0x01,        // ÆÕÍ¨²¼·À
        MINOR_UNGUARD,                    // ÆÕÍ¨³··À
        MINOR_BYPASS,                    // ÅÔÂ·
        MINOR_DURESS_ACCESS,            // Ð®³Ö
        MINOR_ALARMHOST_LOCAL_REBOOT,    // ±¾µØÖØÆô
        MINOR_ALARMHOST_REMOTE_REBOOT,    // Ô¶³ÌÖØÆô
        MINOR_ALARMHOST_LOCAL_UPGRADE,    // ±¾µØÉý¼¶
        MINOR_ALARMHOST_REMOTE_UPGRADE,    // Ô¶³ÌÉý¼¶
        MINOR_RECOVERY_DEFAULT_PARAM,    // »Ö¸´Ä¬ÈÏ²ÎÊý
        MINOR_ALARM_OUTPUT,                // ¿ØÖÆ±¨¾¯Êä³ö
        MINOR_ACCESS_OPEN,                // ¿ØÖÆÃÅ½û¿ª
        MINOR_ACCESS_CLOSE,                // ¿ØÖÆÃÅ½û¹Ø
        MINOR_SIREN_OPEN,                // ¿ØÖÆ¾¯ºÅ¿ª
        MINOR_SIREN_CLOSE,                // ¿ØÖÆ¾¯ºÅ¹Ø
        MINOR_MOD_ZONE_CONFIG,            // ÐÞ¸Ä·ÀÇøÉèÖÃ
        MINOR_MOD_ALARMOUT_CONIFG,        // ¿ØÖÆ±¨¾¯Êä³öÅäÖÃ
        MINOR_MOD_ANALOG_CONFIG,        // ÐÞ¸ÄÄ£ÄâÁ¿ÅäÖÃ
        MINOR_RS485_CONFIG,                // ÐÞ¸Ä485Í¨µÀÅäÖÃ
        MINOR_PHONE_CONFIG,                // ÐÞ¸Ä²¦ºÅÅäÖÃ
        MINOR_ADD_ADMIN,                // Ôö¼Ó¹ÜÀíÔ±
        MINOR_MOD_ADMIN_PARAM,            // ÐÞ¸Ä¹ÜÀíÔ±²ÎÊý
        MINOR_DEL_ADMIN,                // É¾³ý¹ÜÀíÔ±
        MINOR_ADD_NETUSER,                // Ôö¼Óºó¶Ë²Ù×÷Ô±
        MINOR_MOD_NETUSER_PARAM,        // ÐÞ¸Äºó¶Ë²Ù×÷Ô±²ÎÊý
        MINOR_DEL_NETUSER,                // É¾³ýºó¶Ë²Ù×÷Ô±
        MINOR_ADD_OPERATORUSER,            // Ôö¼ÓÇ°¶Ë²Ù×÷Ô±
        MINOR_MOD_OPERATORUSER_PW,        // ÐÞ¸ÄÇ°¶Ë²Ù×÷Ô±ÃÜÂë
        MINOR_DEL_OPERATORUSER,            // É¾³ýÇ°¶Ë²Ù×÷Ô±
        MINOR_ADD_KEYPADUSER,            // Ôö¼Ó¼üÅÌ/¶Á¿¨Æ÷ÓÃ»§    
        MINOR_DEL_KEYPADUSER,            // É¾³ý¼üÅÌ/¶Á¿¨Æ÷ÓÃ»§    
        MINOR_REMOTEUSER_LOGIN,            // Ô¶³ÌÓÃ»§µÇÂ½
        MINOR_REMOTEUSER_LOGOUT,        // Ô¶³ÌÓÃ»§×¢Ïú
        MINOR_REMOTE_GUARD,                // Ô¶³Ì²¼·À
        MINOR_REMOTE_UNGUARD,            // Ô¶³Ì³··À
        MINOR_MOD_HOST_CONFIG,          // ÐÞ¸ÄÖ÷»úÅäÖÃ
        MINOR_RESTORE_BYPASS,            // ÅÔÂ·»Ö¸´
        MINOR_ALARMOUT_OPEN,            // ±¨¾¯Êä³ö¿ªÆô
        MINOR_ALARMOUT_CLOSE,            // ±¨¾¯Êä³ö¹Ø±Õ
        MINOR_MOD_SUBSYSTEM_PARAM,        // ÐÞ¸Ä×ÓÏµÍ³²ÎÊýÅäÖÃ
        MINOR_GROUP_BYPASS,                // ×éÅÔÂ·
        MINOR_RESTORE_GROUP_BYPASS,        // ×éÅÔÂ·»Ö¸´
        MINOR_MOD_GRPS_PARAM,            // ÐÞ¸ÄGPRS²ÎÊý
        MINOR_MOD_NET_REPORT_PARAM,        // ÐÞ¸ÄÍøÂçÉÏ±¨²ÎÊýÅäÖÃ
        MINOR_MOD_REPORT_MOD,            // ÐÞ¸ÄÉÏ´«·½Ê½ÅäÖÃ
        MINOR_MOD_GATEWAY_PARAM,        // ÐÞ¸ÄÃÅ½û²ÎÊýÅäÖÃ
        MINOR_ALARMHOST_REMOTE_START_REC,        // Ô¶³Ì¿ªÊ¼Â¼Ïñ
        MINOR_ALARMHOST_REMOTE_STOP_REC,        // Ô¶³ÌÍ£Ö¹Â¼Ïñ
        MINOR_ALARMHOST_START_TRANS_CHAN,        // ¿ªÊ¼Í¸Ã÷´«Êä
        MINOR_ALARMHOST_STOP_TRANS_CHAN,        // Í£Ö¹Í¸Ã÷´«Êä
        MINOR_ALARMHOST_START_VT,                // ¿ªÊ¼ÓïÒô¶Ô½²
        MINOR_ALARMHOST_STOP_VTM,                // Í£Ö¹ÓïÒô¶Ô½²
        MINOR_ALARMHOST_REMOTE_PLAYBYFILE,        // Ô¶³Ì°´ÎÄ¼þ»Ø·Å
        MINOR_ALARMHOST_REMOTE_PLAYBYTIME,      // Ô¶³Ì°´Ê±¼ä»Ø·Å
        MINOR_ALARMHOST_REMOTE_PTZCTRL,            // Ô¶³ÌÔÆÌ¨¿ØÖÆ
        MINOR_ALARMHOST_REMOTE_FORMAT_HDD,      // Ô¶³Ì¸ñÊ½»¯Ó²ÅÌ
        MINOR_ALARMHOST_REMOTE_LOCKFILE,        // Ô¶³ÌËø¶¨ÎÄ¼þ
        MINOR_ALARMHOST_REMOTE_UNLOCKFILE,      // Ô¶³Ì½âËøÎÄ¼þ
        MINOR_ALARMHOST_REMOTE_CFGFILE_OUTPUT,  // Ô¶³Ìµ¼³öÅäÖÃÎÄ¼þ
        MINOR_ALARMHOST_REMOTE_CFGFILE_INTPUT,  // Ô¶³Ìµ¼ÈëÅäÖÃÎÄ¼þ
        MINOR_ALARMHOST_REMOTE_RECFILE_OUTPUT,  // Ô¶³Ìµ¼³öÂ¼ÏóÎÄ¼þ
        
        MINOR_ALARMHOST_STAY_ARM,                        //ÁôÊØ²¼·À
        MINOR_ALARMHOST_QUICK_ARM,                        //¼´Ê±²¼·À
        MINOR_ALARMHOST_AUTOMATIC_ARM,                    //×Ô¶¯²¼·À
        MINOR_ALARMHOST_AUTOMATIC_DISARM,                //×Ô¶¯³··À
        MINOR_ALARMHOST_KEYSWITCH_ARM,                    //Ô¿³×·ÀÇø²¼·À
        MINOR_ALARMHOST_KEYSWITCH_DISARM,                //Ô¿³×·ÀÇø³··À
        MINOR_ALARMHOST_CLEAR_ALARM,                    //Ïû¾¯
        MINOR_ALARMHOST_MOD_FAULT_CFG,                    //ÐÞ¸ÄÏµÍ³¹ÊÕÏÅäÖÃ
        MINOR_ALARMHOST_MOD_EVENT_TRIGGER_ALARMOUT_CFG,    //ÐÞ¸ÄÊÂ¼þ´¥·¢±¨¾¯Êä³öÅäÖÃ
        MINOR_ALARMHOST_SEARCH_EXTERNAL_MODULE,            //ËÑË÷Íâ½ÓÄ£¿é
        MINOR_ALARMHOST_REGISTER_EXTERNAL_MODULE,        //ÖØÐÂ×¢²áÍâ½ÓÄ£¿é
        MINOR_ALARMHOST_CLOSE_KEYBOARD_ALARM,            //¹Ø±Õ¼üÅÌ±¨¾¯ÌáÊ¾Òô
        MINOR_ALARMHOST_MOD_3G_PARAM,                    //ÐÞ¸Ä3G²ÎÊý
        MINOR_ALARMHOST_MOD_PRINT_PARAM, //ÐÞ¸Ä´òÓ¡»ú²ÎÊý
        MINOR_SD_CARD_FORMAT,        //SD¿¨¸ñÊ½»¯
        MINOR_SUBSYSTEM_UPGRADE,        //×Ó°å¹Ì¼þÉý¼¶
        
        MINOR_ALARMHOST_PLAN_ARM_CFG,    //¼Æ»®²¼³··À²ÎÊýÅäÖÃ
        MINOR_ALARMHOST_PHONE_ARM,        //ÊÖ»ú²¼·À
        MINOR_ALARMHOST_PHONE_STAY_ARM,    //ÊÖ»úÁôÊØ²¼·À
        MINOR_ALARMHOST_PHONE_QUICK_ARM,//ÊÖ»ú¼´Ê±²¼·À
        MINOR_ALARMHOST_PHONE_DISARM,    //ÊÖ»ú³··À
        MINOR_ALARMHOST_PHONE_CLEAR_ALARM,    //ÊÖ»úÏû¾¯
        MINOR_ALARMHOST_WHITELIST_CFG,    //°×Ãûµ¥ÅäÖÃ
        MINOR_ALARMHOST_TIME_TRIGGER_CFG,            //¶¨Ê±¿ª¹Ø´¥·¢Æ÷ÅäÖÃ
        MINOR_ALARMHOST_CAPTRUE_CFG,                //×¥Í¼²ÎÊýÅäÖÃ
        MINOR_ALARMHOST_TAMPER_CFG,                //·ÀÇø·À²ð²ÎÊýÅäÖÃ

        MINOR_ALARMHOST_REMOTE_KEYPAD_UPGRADE,               //Ô¶³ÌÉý¼¶¼üÅÌ
        MINOR_ALARMHOST_ONETOUCH_AWAY_ARMING,                //Ò»¼üÍâ³ö²¼·À 
        MINOR_ALARMHOST_ONETOUCH_STAY_ARMING,                //Ò»¼üÁôÊØ²¼·À
        MINOR_ALARMHOST_SINGLE_PARTITION_ARMING_OR_DISARMING,    //µ¥·ÀÇø²¼³··À 
        MINOR_ALARMHOST_CARD_CONFIGURATION,         //¿¨²ÎÊýÅäÖÃ
        MINOR_ALARMHOST_CARD_ARMING_OR_DISARMING,         //Ë¢¿¨²¼³··À
        MINOR_ALARMHOST_EXPENDING_NETCENTER_CONFIGURATION,         //À©Õ¹ÍøÂçÖÐÐÄÅäÖÃ
        MINOR_ALARMHOST_NETCARD_CONFIGURATION,         //Íø¿¨ÅäÖÃ
        MINOR_ALARMHOST_DDNS_CONFIGURATION,         //DDNSÅäÖÃ
        MINOR_ALARMHOST_RS485BUS_CONFIGURATION,        // 485×ÜÏß²ÎÊýÅäÖÃ
         MINOR_ALARMHOST_RS485BUS_RE_REGISTRATION,            //485×ÜÏßÖØÐÂ×¢²á

        MINOR_ALARMHOST_REMOTE_OPEN_ELECTRIC_LOCK,    //Ô¶³Ì´ò¿ªµçËø
        MINOR_ALARMHOST_REMOTE_CLOSE_ELECTRIC_LOCK,    //Ô¶³Ì¹Ø±ÕµçËø
        MINOR_ALARMHOST_LOCAL_OPEN_ELECTRIC_LOCK,    //±¾µØ´ò¿ªµçËø
        MINOR_ALARMHOST_LOCAL_CLOSE_ELECTRIC_LOCK,    //±¾µØ¹Ø±ÕµçËø
        MINOR_ALARMHOST_OPEN_ALARM_LAMP,            //´ò¿ª¾¯µÆ(Ô¶³Ì)
        MINOR_ALARMHOST_CLOSE_ALARM_LAMP,            //¹Ø±Õ¾¯µÆ(Ô¶³Ì)
        
        MINOR_ALARMHOST_LOCAL_SET_DEVICE_ACTIVE = 0xf0,        //±¾µØ¼¤»îÉè±¸
        MINOR_ALARMHOST_REMOTE_SET_DEVICE_ACTIVE = 0xf1,        //Ô¶³Ì¼¤»îÉè±¸
        MINOR_ALARMHOST_LOCAL_PARA_FACTORY_DEFAULT = 0xf2,    //±¾µØ»Ø¸´³ö³§ÉèÖÃ
        MINOR_ALARMHOST_REMOTE_PARA_FACTORY_DEFAULT = 0xf3,    //Ô¶³Ì»Ö¸´³ö³§ÉèÖÃ

        
        // ÊÂ¼þ 
        MINOR_SCHOOLTIME_IRGI_B = 0x01,        // BÂëÐ£Ê±
        MINOR_SCHOOLTIME_SDK,                // SDKÐ£Ê±
        MINOR_SCHOOLTIME_SELFTEST,            // ¶¨Ê±×Ô¼ìÐ£Ê±
        MINOR_SUBSYSTEM_ABNORMALINSERT,        //×Ó°å²åÈë 
        MINOR_SUBSYSTEM_ABNORMALPULLOUT,        //×Ó°å°Î³ö
        
        MINOR_AUTO_ARM,                    //×Ô¶¯²¼·À
        MINOR_AUTO_DISARM,                //×Ô¶¯³··À
        MINOR_TIME_TIGGER_ON,            //¶¨Ê±¿ªÆô´¥·¢Æ÷
        MINOR_TIME_TIGGER_OFF,            //¶¨Ê±¹Ø±Õ´¥·¢Æ÷
        MINOR_AUTO_ARM_FAILD,            //×Ô¶¯²¼·ÀÊ§°Ü
        MINOR_AUTO_DISARM_FAILD,        //×Ô¶¯³··ÀÊ§°Ü
        MINOR_TIME_TIGGER_ON_FAILD,        //¶¨Ê±¿ªÆô´¥·¢Æ÷Ê§°Ü
        MINOR_TIME_TIGGER_OFF_FAILD,    //¶¨Ê±¹Ø±Õ´¥·¢Æ÷Ê§°Ü
        MINOR_MANDATORY_ALARM,            //Ç¿ÖÆ²¼·À
        MINOR_KEYPAD_LOCKED,            //¼üÅÌËø¶¨

}ALARMHOST_MINOR_TYPE;


//µ±ÈÕÖ¾µÄÖ÷ÀàÐÍÎªMAJOR_OPERATION=03£¬´ÎÀàÐÍÎªMINOR_LOCAL_CFG_PARM=0x52»òÕßMINOR_REMOTE_GET_PARM=0x76
//»òÕßMINOR_REMOTE_CFG_PARM=0x77Ê±£¬dwParaType:²ÎÊýÀàÐÍÓÐÐ§£¬Æäº¬ÒåÈçÏÂ£º
#define PARA_VIDEOOUT    0x1
#define PARA_IMAGE        0x2
#define PARA_ENCODE        0x4
#define PARA_NETWORK    0x8
#define PARA_ALARM        0x10
#define PARA_EXCEPTION    0x20
#define PARA_DECODER    0x40    /*½âÂëÆ÷*/
#define PARA_RS232        0x80
#define PARA_PREVIEW    0x100
#define PARA_SECURITY    0x200
#define PARA_DATETIME    0x400
#define PARA_FRAMETYPE    0x800    /*Ö¡¸ñÊ½*/
#define PARA_DETECTION  0x1000   //Õì²âÅäÖÃ
#define PARA_VCA_RULE   0x1001  //ÐÐÎª¹æÔò 
#define PARA_VCA_CTRL   0x1002  //ÅäÖÃÖÇÄÜ¿ØÖÆÐÅÏ¢
#define PARA_VCA_PLATE  0x1003 // ³µÅÆÊ¶±ð

#define PARA_CODESPLITTER 0x2000 /*Âë·ÖÆ÷²ÎÊý*/
//2010-01-22 Ôö¼ÓÊÓÆµ×ÛºÏÆ½Ì¨ÈÕÖ¾ÐÅÏ¢´ÎÀàÐÍ
#define PARA_RS485          0x2001            /* RS485ÅäÖÃÐÅÏ¢*/
#define PARA_DEVICE          0x2002            /* Éè±¸ÅäÖÃÐÅÏ¢*/
#define PARA_HARDDISK      0x2003            /* Ó²ÅÌÅäÖÃÐÅÏ¢ */
#define PARA_AUTOBOOT      0x2004            /* ×Ô¶¯ÖØÆôÅäÖÃÐÅÏ¢*/
#define PARA_HOLIDAY      0x2005            /* ½Ú¼ÙÈÕÅäÖÃÐÅÏ¢*/            
#define PARA_IPC          0x2006            /* IPÍ¨µÀÅäÖÃ */    
/*************************²ÎÊýÅäÖÃÃüÁî end*******************************/


/*******************²éÕÒÎÄ¼þºÍÈÕÖ¾º¯Êý·µ»ØÖµ*************************/
#define NET_DVR_FILE_SUCCESS            1000    //»ñµÃÎÄ¼þÐÅÏ¢
#define NET_DVR_FILE_NOFIND                1001    //Ã»ÓÐÎÄ¼þ
#define NET_DVR_ISFINDING                1002    //ÕýÔÚ²éÕÒÎÄ¼þ
#define    NET_DVR_NOMOREFILE                1003    //²éÕÒÎÄ¼þÊ±Ã»ÓÐ¸ü¶àµÄÎÄ¼þ
#define    NET_DVR_FILE_EXCEPTION            1004    //²éÕÒÎÄ¼þÊ±Òì³£

/*********************»Øµ÷º¯ÊýÀàÐÍ begin************************/

//±¨¾¯»Øµ÷ÃüÁî
#define COMM_ALARM                           0x1100    //8000±¨¾¯ÐÅÏ¢Ö÷¶¯ÉÏ´«

//¶ÔÓ¦NET_VCA_RULE_ALARM
#define COMM_ALARM_RULE                      0x1102     //ÐÐÎª·ÖÎö±¨¾¯ÐÅÏ¢
#define COMM_ALARM_PDC                       0x1103  //ÈËÊýÍ³¼Æ±¨¾¯ÐÅÏ¢
#define COMM_ALARM_VIDEOPLATFORM             0x1104  //ÊÓÆµ×ÛºÏÆ½Ì¨±¨¾¯
#define COMM_ALARM_ALARMHOST                 0x1105  //ÍøÂç±¨¾¯Ö÷»ú±¨¾¯
#define COMM_ALARM_FACE                      0x1106  //ÈËÁ³¼ì²âÊ¶±ð±¨¾¯ÐÅÏ¢
#define COMM_RULE_INFO_UPLOAD                0x1107  // ÊÂ¼þÊý¾ÝÐÅÏ¢ÉÏ´«
#define COMM_ALARM_AID                       0x1110  //½»Í¨ÊÂ¼þ±¨¾¯ÐÅÏ¢
#define COMM_ALARM_TPS                       0x1111  //½»Í¨²ÎÊýÍ³¼Æ±¨¾¯ÐÅÏ¢
//ÖÇÄÜÈËÁ³×¥ÅÄ½á¹ûÉÏ´«
#define COMM_UPLOAD_FACESNAP_RESULT          0x1112  //ÈËÁ³Ê¶±ð½á¹ûÉÏ´«
#define COMM_ALARM_TFS                       0x1113  //½»Í¨È¡Ö¤±¨¾¯ÐÅÏ¢
#define COMM_ALARM_TPS_V41                   0x1114  //½»Í¨²ÎÊýÍ³¼Æ±¨¾¯ÐÅÏ¢À©Õ¹
#define COMM_ALARM_AID_V41                   0x1115  //½»Í¨ÊÂ¼þ±¨¾¯ÐÅÏ¢À©Õ¹
#define COMM_ALARM_VQD_EX                    0x1116     //ÊÓÆµÖÊÁ¿Õï¶Ï±¨¾¯
#define COMM_SENSOR_VALUE_UPLOAD             0x1120  //Ä£ÄâÁ¿Êý¾ÝÊµÊ±ÉÏ´«
#define COMM_SENSOR_ALARM                    0x1121  //Ä£ÄâÁ¿±¨¾¯ÉÏ´«
#define COMM_SWITCH_ALARM                    0x1122     //¿ª¹ØÁ¿±¨¾¯
#define COMM_ALARMHOST_EXCEPTION             0x1123  //±¨¾¯Ö÷»ú¹ÊÕÏ±¨¾¯
#define COMM_ALARMHOST_OPERATEEVENT_ALARM    0x1124  //²Ù×÷ÊÂ¼þ±¨¾¯ÉÏ´«
#define COMM_ALARMHOST_SAFETYCABINSTATE      0x1125     //·À»¤²Õ×´Ì¬
#define COMM_ALARMHOST_ALARMOUTSTATUS        0x1126     //±¨¾¯Êä³ö¿Ú/¾¯ºÅ×´Ì¬
#define COMM_ALARMHOST_CID_ALARM               0x1127     //±¨¸æ±¨¾¯ÉÏ´«
#define    COMM_ALARMHOST_EXTERNAL_DEVICE_ALARM 0x1128     //±¨¾¯Ö÷»úÍâ½ÓÉè±¸±¨¾¯ÉÏ´«
#define COMM_ALARMHOST_DATA_UPLOAD           0x1129     //±¨¾¯Êý¾ÝÉÏ´«
#define COMM_FACECAPTURE_STATISTICS_RESULT   0x112a  //ÈËÁ³×¥ÅÄÍ³¼ÆÉÏ´«
#define COMM_SCENECHANGE_DETECTION_UPLOAD     0x1130     //³¡¾°±ä¸ü±¨¾¯ÉÏ´«(²¼·À)2013-7-16
#define COMM_CROSSLINE_ALARM                 0x1131    //Ñ¹Ïß±¨¾¯(¼àÌý) 2013-09-27
#define COMM_UPLOAD_VIDEO_INTERCOM_EVENT     0x1132  //¿ÉÊÓ¶Ô½²ÊÂ¼þ¼ÇÂ¼ÉÏ´«
#define COMM_ALARM_VIDEO_INTERCOM               0x1133  //¿ÉÊÓ¶Ô½²±¨¾¯ÉÏ´«
#define COMM_ALARM_AUDIOEXCEPTION             0x1150     //ÉùÒô±¨¾¯ÐÅÏ¢
#define COMM_ALARM_DEFOCUS                   0x1151     //Ðé½¹±¨¾¯ÐÅÏ¢
#define COMM_ALARM_BUTTON_DOWN_EXCEPTION     0x1152     //°´Å¥°´ÏÂ±¨¾¯ÐÅÏ¢
#define COMM_ALARM_ALARMGPS                  0x1202  //GPS±¨¾¯ÐÅÏ¢ÉÏ´«
#define    COMM_TRADEINFO                       0x1500  //ATMDVRÖ÷¶¯ÉÏ´«½»Ò×ÐÅÏ¢
#define COMM_UPLOAD_PLATE_RESULT             0x2800     //ÉÏ´«³µÅÆÐÅÏ¢
#define COMM_ITC_STATUS_DETECT_RESULT        0x2810  //ÊµÊ±×´Ì¬¼ì²â½á¹ûÉÏ´«(ÖÇÄÜ¸ßÇåIPC)
#define COMM_IPC_AUXALARM_RESULT             0x2820  //PIR±¨¾¯¡¢ÎÞÏß±¨¾¯¡¢ºô¾È±¨¾¯ÉÏ´«
#define COMM_UPLOAD_PICTUREINFO              0x2900     //ÉÏ´«Í¼Æ¬ÐÅÏ¢
#define COMM_SNAP_MATCH_ALARM                0x2902  //ºÚÃûµ¥±È¶Ô½á¹ûÉÏ´«
#define COMM_ITS_PLATE_RESULT                0x3050  //ÖÕ¶ËÍ¼Æ¬ÉÏ´«
#define    COMM_ITS_TRAFFIC_COLLECT             0x3051  //ÖÕ¶ËÍ³¼ÆÊý¾ÝÉÏ´«
#define COMM_ITS_GATE_VEHICLE                0x3052  //³öÈë¿Ú³µÁ¾×¥ÅÄÊý¾ÝÉÏ´«
#define COMM_ITS_GATE_FACE                   0x3053  //³öÈë¿ÚÈËÁ³×¥ÅÄÊý¾ÝÉÏ´«
#define COMM_ITS_GATE_COSTITEM                 0x3054  //³öÈë¿Ú¹ý³µÊÕ·ÑÃ÷Ï¸ 2013-11-19
#define COMM_ITS_GATE_HANDOVER                 0x3055  //³öÈë¿Ú½»½Ó°àÊý¾Ý 2013-11-19
#define COMM_ITS_PARK_VEHICLE                0x3056  //Í£³µ³¡Êý¾ÝÉÏ´«
#define COMM_ITS_BLACKLIST_ALARM             0x3057  //ºÚÃûµ¥±¨¾¯ÉÏ´«

#define COMM_VEHICLE_CONTROL_LIST_DSALARM    0x3058  //ºÚ°×Ãûµ¥Êý¾ÝÐèÒªÍ¬²½±¨¾¯2013-11-04
#define COMM_VEHICLE_CONTROL_ALARM           0x3059  //³µÁ¾±¨¾¯2013-11-04
#define COMM_FIRE_ALARM                      0x3060  //Ïû·À±¨¾¯2013-11-04

#define COMM_ITS_GATE_ALARMINFO              0x3061  //³öÈë¿Ú¿ØÖÆ»úÊý¾ÝÉÏ´«

#define COMM_VEHICLE_RECOG_RESULT            0x3062  //³µÁ¾¶þ´ÎÊ¶±ð½á¹ûÉÏ´« 2014-11-12 
#define COMM_PLATE_RESULT_V50                0x3063  //³µÅÆÉÏ´« V50

#define COMM_GATE_CHARGEINFO_UPLOAD          0x3064  //³öÈë¿Ú¸¶·ÑÐÅÏ¢ÉÏ´«
#define COMM_TME_VEHICLE_INDENTIFICATION     0x3065  //TME³µÁ¾×¥Í¼ÉÏ´«
#define COMM_GATE_CARDINFO_UPLOAD            0x3066  //³öÈë¿Ú¿¨Æ¬ÐÅÏ¢ÉÏ´«

#define COMM_ALARM_SENSORINFO_UPLOAD         0x3077     //´«¸ÐÆ÷ÉÏ´«ÐÅÏ¢
#define COMM_ALARM_CAPTURE_UPLOAD             0x3078     //×¥ÅÄÍ¼Æ¬ÉÏ´«

#define COMM_ITS_RADARINFO                   0x3079  //À×´ï±¨¾¯ÉÏ´«

#define COMM_SIGNAL_LAMP_ABNORMAL            0x3080  //ÐÅºÅµÆÒì³£¼ì²âÉÏ´«

#define COMM_ALARM_TPS_REAL_TIME             0x3081  //TPSÊµÊ±¹ý³µÊý¾ÝÉÏ´«
#define COMM_ALARM_TPS_STATISTICS            0x3082  //TPSÍ³¼Æ¹ý³µÊý¾ÝÉÏ´«

#define COMM_ALARM_V30                         0x4000     //9000±¨¾¯ÐÅÏ¢Ö÷¶¯ÉÏ´«
#define COMM_IPCCFG                             0x4001     //9000Éè±¸IPC½ÓÈëÅäÖÃ¸Ä±ä±¨¾¯ÐÅÏ¢Ö÷¶¯ÉÏ´«
#define COMM_IPCCFG_V31                         0x4002     //9000Éè±¸IPC½ÓÈëÅäÖÃ¸Ä±ä±¨¾¯ÐÅÏ¢Ö÷¶¯ÉÏ´«À©Õ¹ 9000_1.1
#define COMM_IPCCFG_V40                      0x4003  // IVMS 2000 ±àÂë·þÎñÆ÷ NVR IPC½ÓÈëÅäÖÃ¸Ä±äÊ±±¨¾¯ÐÅÏ¢ÉÏ´«
#define COMM_ALARM_DEVICE                    0x4004  //Éè±¸±¨¾¯ÄÚÈÝ£¬ÓÉÓÚÍ¨µÀÖµ´óÓÚ256¶øÀ©Õ¹
#define COMM_ALARM_CVR                         0x4005  //CVR 2.0.XÍâ²¿±¨¾¯ÀàÐÍ
#define COMM_ALARM_HOT_SPARE                 0x4006  //ÈÈ±¸Òì³£±¨¾¯£¨N+1Ä£Ê½Òì³£±¨¾¯£©
#define COMM_ALARM_V40                         0x4007    //ÒÆ¶¯Õì²â£¬ÊÓÆµ¶ªÊ§£¬ÕÚµ²£¬IOÐÅºÅÁ¿µÈ±¨¾¯ÐÅÏ¢Ö÷¶¯ÉÏ´«£¬±¨¾¯Êý¾ÝÎª¿É±ä³¤

#define COMM_UPLOAD_HEATMAP_RESULT           0x4008 //ÈÈ¶ÈÍ¼±¨¾¯ÉÏ´« 2014-03-21
#define COMM_ALARM_DEVICE_V40                0x4009  //Éè±¸±¨¾¯ÄÚÈÝÀ©Õ¹
#define COMM_ALARM_FACE_DETECTION            0x4010 //ÈËÁ³Õì²â±¨¾¯
#define COMM_ALARM_TARGET_LEFT_REGION        0x4011 //¼ì²âÄ¿±êÀë¿ª¼ì²âÇøÓò±¨¾¯(½ÌÊ¦×ßÏòÑ§Éú±¨¾¯(ÓÃÓÚÁª¶¯ÇÐ»»Â¼²¥Ö÷»ú¿ØÖÆ¼ì²âÑ§ÉúµÄÇò»ú))
#define COMM_GISINFO_UPLOAD                  0x4012 //GISÐÅÏ¢ÉÏ´«
#define COMM_VANDALPROOF_ALARM               0x4013 //ÉÏ´«·ÀÆÆ»µ±¨¾¯ÐÅÏ¢
#define COMM_PEOPLE_DETECTION_UPLOAD         0x4014 //ÈËÔ±Õì²âÐÅÏ¢ÉÏ´«
#define COMM_ALARM_STORAGE_DETECTION         0x4015 //´æ´¢ÖÇÄÜ¼ì²â±¨¾¯ÉÏ´«
#define    COMM_ITS_ROAD_EXCEPTION                 0x4500     //Â·¿ÚÉè±¸Òì³£±¨¾¯
#define    COMM_ITS_EXTERNAL_CONTROL_ALARM         0x4520  //Íâ¿Ø±¨¾¯
#define COMM_ALARM_SHIPSDETECTION             0x4521    // ´¬Ö»¼ì²â±¨¾¯ÐÅÏ¢
#define COMM_FIREDETECTION_ALARM             0x4991 //»ðµã¼ì²â±¨¾¯

#define    COMM_SCREEN_ALARM                    0x5000  //¶àÆÁ¿ØÖÆÆ÷±¨¾¯ÀàÐÍ
#define COMM_DVCS_STATE_ALARM                 0x5001  //·Ö²¼Ê½´óÆÁ¿ØÖÆÆ÷±¨¾¯ÉÏ´«
#define COMM_ALARM_ACS                         0x5002  //ÃÅ½ûÖ÷»ú±¨¾¯
#define COMM_ALARM_FIBER_CONVERT             0x5003  //¹âÏËÊÕ·¢Æ÷±¨¾¯
#define COMM_ALARM_SWITCH_CONVERT             0x5004  //½»»»»ú±¨¾¯
#define COMM_ALARM_DEC_VCA                   0x5010  //ÖÇÄÜ½âÂë±¨¾¯
#define COMM_ALARM_LCD                         0x5011     //ÆÁÄ»±¨¾¯
#define COMM_CONFERENCE_CALL_ALARM             0x5012     //»áÒéºô½Ð¸æ¾¯

#define COMM_ALARM_WALL_CONFERNECE  0x5015  //MCUµ¥¸öÒÑ¿ª»áµÄ»áÒéÐÅÏ¢±¨¾¯

#define COMM_DIAGNOSIS_UPLOAD                0x5100  //Õï¶Ï·þÎñÆ÷VQD±¨¾¯ÉÏ´«
#define COMM_HIGH_DENSITY_UPLOAD             0x5101  //ÈËÔ±¾Û¼¯ÃÜ¶ÈÊä³ö±¨¾¯ÉÏ´«

#define COMM_ID_INFO_ALARM                   0x5200  //Éí·ÝÖ¤ÐÅÏ¢ÉÏ´«
#define COMM_PASSNUM_INFO_ALARM              0x5201  //Í¨ÐÐÈËÊýÉÏ±¨

#define COMM_THERMOMETRY_DIFF_ALARM          0x5211  //ÎÂ²î±¨¾¯ÉÏ´«
#define COMM_THERMOMETRY_ALARM               0x5212  //ÎÂ¶È±¨¾¯ÉÏ´«
#define COMM_PANORAMIC_LINKAGE_ALARM         0x5213  //È«¾°Áª¶¯µ½Î»ÉÏ´«
#define COMM_ALARM_VQD                         0x6000  //VQDÖ÷¶¯±¨¾¯ÉÏ´« 
#define COMM_PUSH_UPDATE_RECORD_INFO          0x6001  //ÍÆÄ£Ê½Â¼ÏñÐÅÏ¢ÉÏ´«
#define COMM_SWITCH_LAMP_ALARM               0x6002  //¿ª¹ØµÆ¼ì²â


/*************²Ù×÷Òì³£ÀàÐÍ(ÏûÏ¢·½Ê½, »Øµ÷·½Ê½(±£Áô))****************/
#define EXCEPTION_EXCHANGE                0x8000    //ÓÃ»§½»»¥Ê±Òì³£
#define EXCEPTION_AUDIOEXCHANGE            0x8001    //ÓïÒô¶Ô½²Òì³£
#define EXCEPTION_ALARM                    0x8002    //±¨¾¯Òì³£
#define EXCEPTION_PREVIEW                0x8003    //ÍøÂçÔ¤ÀÀÒì³£
#define EXCEPTION_SERIAL                0x8004    //Í¸Ã÷Í¨µÀÒì³£
#define EXCEPTION_RECONNECT                0x8005    //Ô¤ÀÀÊ±ÖØÁ¬
#define EXCEPTION_ALARMRECONNECT        0x8006    //±¨¾¯Ê±ÖØÁ¬
#define EXCEPTION_SERIALRECONNECT        0x8007    //Í¸Ã÷Í¨µÀÖØÁ¬
#define SERIAL_RECONNECTSUCCESS         0x8008    //Í¸Ã÷Í¨µÀÖØÁ¬³É¹¦
#define EXCEPTION_PLAYBACK                0x8010    //»Ø·ÅÒì³£
#define EXCEPTION_DISKFMT                0x8011    //Ó²ÅÌ¸ñÊ½»¯
#define EXCEPTION_PASSIVEDECODE         0x8012  //±»¶¯½âÂëÒì³£
#define EXCEPTION_EMAILTEST             0x8013  //ÓÊ¼þ²âÊÔÒì³£    
#define EXCEPTION_BACKUP                0x8014  //±¸·ÝÒì³£
#define PREVIEW_RECONNECTSUCCESS        0x8015  //Ô¤ÀÀÊ±ÖØÁ¬³É¹¦
#define ALARM_RECONNECTSUCCESS          0x8016  //±¨¾¯Ê±ÖØÁ¬³É¹¦
#define RESUME_EXCHANGE                    0x8017    //ÓÃ»§½»»¥»Ö¸´
#define NETWORK_FLOWTEST_EXCEPTION      0x8018  //ÍøÂçÁ÷Á¿¼ì²âÒì³£
#define EXCEPTION_PICPREVIEWRECONNECT    0x8019    //Í¼Æ¬Ô¤ÀÀÖØÁ¬
#define PICPREVIEW_RECONNECTSUCCESS        0x8020    //Í¼Æ¬Ô¤ÀÀÖØÁ¬³É¹¦
#define EXCEPTION_PICPREVIEW            0x8021    //Í¼Æ¬Ô¤ÀÀÒì³£
#define    EXCEPTION_MAX_ALARM_INFO        0x8022    //±¨¾¯ÐÅÏ¢»º´æÒÑ´ïÉÏÏÞ
#define    EXCEPTION_LOST_ALARM            0x8023  //±¨¾¯¶ªÊ§
#define EXCEPTION_PASSIVETRANSRECONNECT 0x8024  //±»¶¯×ªÂëÖØÁ¬
#define PASSIVETRANS_RECONNECTSUCCESS   0x8025  //±»¶¯×ªÂëÖØÁ¬³É¹¦
#define EXCEPTION_PASSIVETRANS          0x8026  //±»¶¯×ªÂëÒì³£
#define SUCCESS_PUSHDEVLOGON            0x8030  //ÍÆÄ£Ê½Éè±¸×¢²á³É¹¦
#define EXCEPTION_RELOGIN                0x8040    //ÓÃ»§ÖØµÇÂ½
#define RELOGIN_SUCCESS                    0x8041    //ÓÃ»§ÖØµÇÂ½³É¹¦
#define EXCEPTION_PASSIVEDECODE_RECONNNECT  0x8042  //±»¶¯½âÂëÖØÁ¬

#define EXCEPTION_RELOGIN_FAILED                0x8044   //ÖØµÇÂ½Ê§°Ü£¬Í£Ö¹ÖØµÇÂ½
#define EXCEPTION_PREVIEW_RECONNECT_CLOSED      0x8045   //¹Ø±ÕÔ¤ÀÀÖØÁ¬¹¦ÄÜ
#define EXCEPTION_ALARM_RECONNECT_CLOSED        0x8046   //¹Ø±Õ±¨¾¯ÖØÁ¬¹¦ÄÜ
#define EXCEPTION_SERIAL_RECONNECT_CLOSED       0x8047   //¹Ø±ÕÍ¸Ã÷Í¨µÀÖØÁ¬¹¦ÄÜ
#define EXCEPTION_PIC_RECONNECT_CLOSED          0x8048   //¹Ø±Õ»ØÏÔÖØÁ¬¹¦ÄÜ
#define EXCEPTION_PASSIVE_DECODE_RECONNECT_CLOSED 0x8049 //¹Ø±Õ±»¶¯½âÂëÖØÁ¬¹¦ÄÜ
#define EXCEPTION_PASSIVE_TRANS_RECONNECT_CLOSED 0x804a  //¹Ø±Õ±»¶¯×ªÂëÖØÁ¬¹¦ÄÜ 

/********************Ô¤ÀÀ»Øµ÷º¯Êý*********************/
#define NET_DVR_SYSHEAD            1    //ÏµÍ³Í·Êý¾Ý
#define NET_DVR_STREAMDATA        2    //ÊÓÆµÁ÷Êý¾Ý£¨°üÀ¨¸´ºÏÁ÷ºÍÒôÊÓÆµ·Ö¿ªµÄÊÓÆµÁ÷Êý¾Ý£©
#define NET_DVR_AUDIOSTREAMDATA    3    //ÒôÆµÁ÷Êý¾Ý
#define NET_DVR_STD_VIDEODATA    4    //±ê×¼ÊÓÆµÁ÷Êý¾Ý
#define NET_DVR_STD_AUDIODATA    5    //±ê×¼ÒôÆµÁ÷Êý¾Ý
#define NET_DVR_SDP             6   //SDPÐÅÏ¢(Rstp´«ÊäÊ±ÓÐÐ§)
#define NET_DVR_CHANGE_FORWARD  10  //ÂëÁ÷¸Ä±äÎªÕý·Å  
#define NET_DVR_CHANGE_REVERSE  11  //ÂëÁ÷¸Ä±äÎªµ¹·Å
#define NET_DVR_PLAYBACK_ALLFILEEND      12  //»Ø·ÅÎÄ¼þ½áÊø±ê¼Ç
#define NET_DVR_PRIVATE_DATA    112 //Ë½ÓÐÊý¾Ý,°üÀ¨ÖÇÄÜÐÅÏ¢

//Éè±¸ÐÍºÅ(DVRÀàÐÍ)
/* Éè±¸ÀàÐÍ */
#define DVR                            1                /*¶ÔÉÐÎ´¶¨ÒåµÄdvrÀàÐÍ·µ»ØDVR*/
#define ATMDVR                        2                /*atm dvr*/
#define DVS                            3                /*DVS*/
#define DEC                            4                /* 6001D */
#define ENC_DEC                        5                /* 6001F */
#define DVR_HC                        6                /*8000HC*/
#define DVR_HT                        7                /*8000HT*/
#define DVR_HF                        8                /*8000HF*/
#define DVR_HS                        9                /* 8000HS DVR(no audio) */
#define DVR_HTS                        10              /* 8016HTS DVR(no audio) */
#define DVR_HB                        11              /* HB DVR(SATA HD) */
#define DVR_HCS                        12              /* 8000HCS DVR */
#define DVS_A                        13              /* ´øATAÓ²ÅÌµÄDVS */
#define DVR_HC_S                    14              /* 8000HC-S */
#define DVR_HT_S                    15              /* 8000HT-S */
#define DVR_HF_S                    16              /* 8000HF-S */
#define DVR_HS_S                    17              /* 8000HS-S */
#define ATMDVR_S                    18              /* ATM-S */
#define DVR_7000H                    19                /*7000HÏµÁÐ*/
#define DEC_MAT                        20              /*¶àÂ·½âÂëÆ÷*/
#define DVR_MOBILE                    21                /* mobile DVR */                 
#define DVR_HD_S                    22              /* 8000HD-S */
#define DVR_HD_SL                    23                /* 8000HD-SL */
#define DVR_HC_SL                    24                /* 8000HC-SL */
#define DVR_HS_ST                    25                /* 8000HS_ST */
#define DVS_HW                        26              /* 6000HW */
#define DS630X_D                    27              /* ¶àÂ·½âÂëÆ÷ */
#define DS640X_HD                    28                /*640X¸ßÇå½âÂëÆ÷*/
#define DS610X_D                    29              /*610X½âÂëÆ÷*/
#define IPCAM                        30                /*IP ÉãÏñ»ú*/
#define MEGA_IPCAM                    31                /*¸ßÇåIPÉãÏñ»ú*/
#define IPCAM_X62MF                    32                /*862MF¿ÉÒÔ½ÓÈë9000Éè±¸*/
#define ITCCAM                      35              /*ÖÇÄÜ¸ßÇåÍøÂçÉãÏñ»ú*/
#define IVS_IPCAM                   36              /*ÖÇÄÜ·ÖÎö¸ßÇåÍøÂçÉãÏñ»ú*/
#define ZOOMCAM                     38              /*Ò»Ìå»ú*/
#define IPDOME                      40              /*IP ±êÇåÇò»ú*/
#define IPDOME_MEGA200              41              /*IP 200Íò¸ßÇåÇò»ú*/
#define IPDOME_MEGA130              42              /*IP 130Íò¸ßÇåÇò»ú*/
#define IPDOME_AI                   43              /*IP ¸ßÇåÖÇÄÜ¿ìÇò*/
#define TII_IPCAM                   44              /*ºìÍâÈÈ³ÉÏñÉãÏñ»ú*/
#define IPTC_DOME                   45              /*ºìÍâÈÈ³ÉÏñË«Ä¿Çò»ú*/
#define DS_2DP_Z                    46              /*ÇòÐÍÓ¥ÑÛ£¨´ó£©*/
#define DS_2DP                       47              /*·ÇÇòÐÍÓ¥ÑÛ£¨Ð¡£©*/
#define ITS_WMS                      48              /*³ÆÖØÊý¾Ý¹ÜÀí·þÎñÆ÷*/
#define IPMOD                        50                /*IP Ä£¿é*/
#define TRAFFIC_YTDOME              51              //½»Í¨ÖÇÄÜÔÆÌ¨£¨²»´øÀ×´ï²âËÙ£©
#define TRAFFIC_RDDOME              52              //½»Í¨ÖÇÄÜÔÆÌ¨£¨´øÀ×´ï²âËÙ£©
#define IDS6501_HF_P                60              // 6501 ³µÅÆ 
#define IDS6101_HF_A                61              //ÖÇÄÜATM
#define IDS6002_HF_B                62          //Ë«»ú¸ú×Ù£ºDS6002-HF/B
#define IDS6101_HF_B                63              //ÐÐÎª·ÖÎö£ºDS6101-HF/B DS6101-HF/B_SATA
#define IDS52XX                        64          //ÖÇÄÜ·ÖÎöÒÇIVMS
#define IDS90XX                        65                // 9000ÖÇÄÜ
#define IDS8104_AHL_S_HX            66          // º£öÎÈËÁ³Ê¶±ð ATM
#define IDS8104_AHL_S_H             67              // Ë½ÓÐÈËÁ³Ê¶±ð ATM
#define IDS91XX                        68                // 9100ÖÇÄÜ
#define IIP_CAM_B                   69              // ÖÇÄÜÐÐÎªIPÉãÏñ»ú
#define IIP_CAM_F                   70              //ÖÇÄÜÈËÁ³IPÉãÏñ»ú
#define DS71XX_H                    71                /* DS71XXH_S */
#define DS72XX_H_S                    72                /* DS72XXH_S */
#define DS73XX_H_S                    73                /* DS73XXH_S */
#define DS72XX_HF_S                 74              //DS72XX_HF_S
#define DS73XX_HFI_S                75              //DS73XX_HFI_S
#define DS76XX_H_S                    76                /* DVR,e.g. DS7604_HI_S */
#define DS76XX_N_S                    77                /* NVR,e.g. DS7604_NI_S */
#define DS_TP3200_EC                   78              /*»ú¹ñÖÇÄÜ¼ì²âÒÇ*/
#define DS81XX_HS_S                    81                /* DS81XX_HS_S */
#define DS81XX_HL_S                    82                /* DS81XX_HL_S */
#define DS81XX_HC_S                    83                /* DS81XX_HC_S */
#define DS81XX_HD_S                    84                /* DS81XX_HD_S */
#define DS81XX_HE_S                    85                /* DS81XX_HE_S */
#define DS81XX_HF_S                    86                /* DS81XX_HF_S */
#define DS81XX_AH_S                    87                /* DS81XX_AH_S */
#define DS81XX_AHF_S                88                /* DS81XX_AHF_S */
#define DS90XX_HF_S                    90              /*DS90XX_HF_S*/
#define DS91XX_HF_S                    91              /*DS91XX_HF_S*/
#define DS91XX_HD_S                    92              /*91XXHD-S(MD)*/
#define IDS90XX_A                    93                // 9000ÖÇÄÜ ATM
#define IDS91XX_A                    94                // 9100ÖÇÄÜ ATM
#define DS95XX_N_S                    95              /*DS95XX_N_S NVR ²»´øÈÎºÎÊä³ö*/
#define DS96XX_N_SH                    96              /*DS96XX_N_SH NVR*/
#define DS90XX_HF_SH                97              /*DS90XX_HF_SH */   
#define DS91XX_HF_SH                98              /*DS91XX_HF_SH */
#define DS_B10_XY                   100             /*ÊÓÆµ×ÛºÏÆ½Ì¨Éè±¸ÐÍºÅ(X:±àÂë°åÆ¬Êý£¬Y:½âÂë°åÆ¬Êý)*/
#define DS_6504HF_B10               101             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿±àÂëÆ÷*/
#define DS_6504D_B10                102             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿½âÂëÆ÷*/
#define DS_1832_B10                 103             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿Âë·ÖÆ÷*/
#define DS_6401HFH_B10              104             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿¹âÏË°å*/
#define DS_65XXHC                    105                //65XXHC DVS
#define DS_65XXHC_S                    106                //65XXHC-SATA DVS
#define DS_65XXHF                    107                //65XXHF DVS
#define DS_65XXHF_S                    108                //65XXHF-SATA DVS
#define DS_6500HF_B                 109             //65 rack DVS
#define IVMS_6200_C                 110             // iVMS-6200(/C)  
#define IVMS_6200_B                 111             // iVMS-6200(/B)
#define DS_72XXHV_ST15                112                //72XXHV_ST  º£Ë¼3515Æ½Ì¨ DVR
#define DS_72XXHV_ST20                113                //72XXHV_ST  º£Ë¼3520Æ½Ì¨ DVR
#define IVMS_6200_T                    114             // IVMS-6200(/T)
#define IVMS_6200_BP                115             // IVMS-6200(/BP)
#define DS_81XXHC_ST                116                //DS_81XXHC_ST
#define DS_81XXHS_ST                117                //DS_81XXHS_ST
#define DS_81XXAH_ST                118                //DS_81XXAH_ST
#define DS_81XXAHF_ST                119                //DS_81XXAHF_ST
#define DS_66XXDVS                    120                //66XX DVS

#define DS_1964_B10                 121             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿±¨¾¯Æ÷*/
#define DS_B10N04_IN                122             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿¼¶ÁªÊäÈë*/
#define DS_B10N04_OUT                123             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿¼¶ÁªÊä³ö*/
#define DS_B10N04_INTEL             124             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿ÖÇÄÜ*/
#define DS_6408HFH_B10E_RM          125             //V6¸ßÇå
#define DS_B10N64F1_RTM             126             //V6¼¶Áª²»´øDSP
#define DS_B10N64F1D_RTM            127             //V6¼¶Áª´øDSP
#define DS_B10_SDS                  128             //ÊÓÆµ×ÛºÏÆ½Ì¨×ÓÓò¿ØÖÆÆ÷
#define DS_B10_DS                   129             //ÊÓÆµ×ÛºÏÆ½Ì¨Óò¿ØÖÆÆ÷
#define DS_6401HFH_B10V                130             //VGA¸ßÇå±àÂëÆ÷
#define DS_6504D_B10B               131             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿±êÇå½âÂëÆ÷*/
#define DS_6504D_B10H               132             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿¸ßÇå½âÂëÆ÷*/
#define DS_6504D_B10V               133             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿VGA½âÂëÆ÷*/
#define DS_6408HFH_B10S                134             //ÊÓÆµ×ÛºÏÆ½Ì¨SDI×Ó°å 
#define DS_18XX_N                      135             /* ¾ØÕó½ÓÈëÍø¹Ø*/ 
#define DS_6504HF_B10F_CLASS        136                //¹â¶Ë»úSD
#define DS_18XX_PTZ                    141                /*ÍøÂçÂë·ÖÀà²úÆ·*/
#define DS_19AXX                    142                /*Í¨ÓÃ±¨¾¯Ö÷»úÀà²úÆ·*/
#define DS_19BXX                    143                /*¼ÒÓÃ±¨¾¯Ö÷»ú*/
#define DS_19CXX                    144                /*×ÔÖúÒøÐÐ±¨¾¯Ö÷»ú*/
#define DS_19DXX                    145                /*¶¯»·¼à¿Ø±¨¾¯Ö÷»ú*/    
#define DS_19XX                     146             /*1900ÏµÁÐ±¨¾¯Ö÷»ú*/ 
#define DS_19SXX                    147                /*ÊÓÆµ±¨¾¯Ö÷»ú*/
#define DS_1HXX                        148                /*CSÀà²úÆ·*/ //·À»¤²Õ
#define DS_PEAXX                    149                /*Ò»¼üÊ½½ô¼±±¨¾¯²úÆ·*/

//2011-11-30
#define    DS_C10H                        161                /*¶àÆÁ¿ØÖÆÆ÷*/
#define DS_C10N_BI                    162                //BNC´¦ÀíÆ÷
#define DS_C10N_DI                    163                //rbg´¦ÀíÆ÷
#define DS_C10N_SI                    164                //ÂëÁ÷´¦ÀíÆ÷
#define DS_C10N_DO                    165                //ÏÔÊ¾´¦ÀíÆ÷
#define DS_C10N_SERVER                166                //·Ö²¼Ê½·þÎñÆ÷


#define IDS_8104_AHFL_S_H           171             // 8104ATM 
#define IDS_65XX_HF_A               172             // 65 ATM
#define IDS90XX_HF_RH               173             // 9000 ÖÇÄÜRH
#define IDS91XX_HF_RH               174             // 9100 ÖÇÄÜRHÉè±¸
#define IDS_65XX_HF_B               175             // 65 ÐÐÎª·ÖÎö
#define IDS_65XX_HF_P               176             // 65 ³µÅÆÊ¶±ð
#define IVMS_6200_F                 177             // IVMS-6200(/F)
#define IVMS_6200_A                 178             //iVMS-6200(/A)
#define IVMS_6200_F_S                 179             // IVMS-6200(/F_S)ÈËÁ³ºó¼ìË÷·ÖÎöÒÇ

#define DS90XX_HF_RH                181             // 9000 RH    648
#define DS91XX_HF_RH                182             // 9100 RHÉè±¸ 648
#define DS78XX_S                    183             // 78ÏµÁÐÉè±¸ 6446
#define DS81XXHW_S                    185                // 81 Resolution 960 KY2011
#define DS81XXHW_ST                    186             // DS81XXHW_ST  KY2011
#define DS91XXHW_ST                    187             // DS91XXHW_ST  KY2011
#define DS91XX_ST                    188             // DS91XX_ST netra
#define DS81XX_ST                    189             // DS81XX_ST netra
#define DS81XXHX_ST                    190             // DS81XXHDI_ST,DS81XXHE_ST ky2012
#define DS73XXHX_ST                    191             // DS73XXHI_ST ky2012
#define DS81XX_SH                   192             // ÉóÑ¶81SH,81SHF
#define DS81XX_SN                   193             // ÉóÑ¶81SNL

#define DS96XXN_ST                  194             //NVR:DS96xxN_ST
#define DS86XXN_ST                  195             //NVR:DS86xxN_ST
#define DS80XXHF_ST                 196             //DVR:DS80xxHF_ST
#define DS90XXHF_ST                 197             //DVR:DS90xxHF_ST
#define DS76XXN_ST                  198             //NVR:DS76xxN_ST

#define DS_9664N_RX                 199         //NVR:DS_9664N_RX
#define ENCODER_SERVER                200            // ±àÂë¿¨·þÎñÆ÷
#define DECODER_SERVER              201         // ½âÂë¿¨·þÎñÆ÷
#define PCNVR_SERVER                202         // PCNVR´æ´¢·þÎñÆ÷
#define CVR_SERVER                  203         // °îÅµCVR£¬Ëû¸ø×Ô¼º¶¨µÄÀàÐÍÎªDVR_S-1
#define DS_91XXHFH_ST                204         // 91ÏµÁÐHD-SDI¸ßÇåDVR
#define DS_66XXHFH                    205         // 66¸ßÇå±àÂëÆ÷
#define    TRAFFIC_TS_SERVER            210           //ÖÕ¶Ë·þÎñÆ÷
#define    TRAFFIC_VAR                    211           //ÊÓÆµ·ÖÎö¼ÇÂ¼ÒÇ
#define IPCALL                      212        //IP¿ÉÊÓ¶Ô½²·Ö»ú
#define SAN_SERVER                  213         //ÓëCVR_SERVERÏàÍ¬µÄ³ÌÐò£¬Ö»ÊÇÄ£Ê½²»Í¬

#define DS_B11_M_CLASS                 301             /*ÊÓÆµ×ÛºÏÆ½Ì¨Éè±¸ÐÍºÅ*/
#define DS_B12_M_CLASS                  302             /*ÊÓÆµ×ÛºÏÆ½Ì¨Éè±¸ÐÍºÅ*/
#define DS_6504HF_B11_CLASS         303             /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿±àÂëÆ÷*/
#define DS_6504HF_B12_CLASS         304              /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿±àÂëÆ÷*/
#define  DS_6401HFH_B11V_CLASS         305     //VGA¸ßÇå
#define  DS_6401HFH_B12V_CLASS         306     //VGA¸ßÇå
#define  DS_6408HFH_B11S_CLASS         307     //SDI
#define  DS_6408HFH_B12S_CLASS      308     //SDI
#define  DS_6504D_B11H_CLASS        309   /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿¸ßÇå½âÂëÆ÷*/
#define  DS_6504D_B11B_CLASS        310    /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿±êÇå½âÂëÆ÷*/
#define  DS_6504D_B12B_CLASS        311       /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿±êÇå½âÂëÆ÷*/
#define  DS_6504D_B11V_CLASS        312      /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿VGA½âÂëÆ÷*/
#define  DS_6504D_B12V_CLASS        313     /*ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿VGA½âÂëÆ÷*/
//B10ÐÂÔö
#define  DS_6401HFH_B10R_CLASS         314     //B10 RGB¸ßÇå
#define  DS_6401HFH_B10D_CLASS         315     //B10 DVI¸ßÇå
#define  DS_6401HFH_B10H_CLASS         316     //B10 HDMI¸ßÇå
//B11ÐÂÔö
#define  DS_6401HFH_B11R_CLASS         317     //B11 RGB¸ßÇå
#define  DS_6401HFH_B11D_CLASS         318     //B11 DVI¸ßÇå
#define  DS_6401HFH_B11H_CLASS         319     //B11 HDMI¸ßÇå
//B12ÐÂÔö
#define  DS_6401HFH_B12R_CLASS         320     //B12 RGB¸ßÇå
#define  DS_6401HFH_B12D_CLASS         321     //B12 DVI¸ßÇå
#define  DS_6401HFH_B12H_CLASS         322     //B12 HDMI¸ßÇå
#define  DS_65XXD_B10Ex_CLASS        323     //netra¸ßÇå½âÂë 

//B10 V2.1ÐÂÔö
#define  DS_6516HW_B10_CLASS        324     //netra¸ßÏß±àÂë
#define  DS_6401HFH_B10F_RX_CLASS   326        //¸ßÇå¹â¶Ë»ú½ÓÈë£¨Ö§³Ö1/2Â·¹â¶Ë»ú½ÓÈë£©
#define  DS_6502HW_B10F_RX_CLASS    327        //960H¹â¶Ë»ú½ÓÈë£¨Ö§³Ö1/4/8Â·¹â¶Ë»ú½ÓÈë£©
//2012-5-16ÐÂÔö
#define  DS_6504D_B11Ex_CLASS        328     //netra¸ßÇå½âÂë
#define  DS_6504D_B12Ex_CLASS        329     //netra¸ßÇå½âÂë
#define  DS_6512_B11_CLASS            330     //netra¸ßÏß±àÂë
#define  DS_6512_B12_CLASS            331     //netra¸ßÏß±àÂë
#define  DS_6504D_B10H_CLASS        332     //ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿¸ßÇå½âÂëÆ÷

#define  DS_65XXT_B10_CLASS         333     //ÊÓÆµ×ÛºÏÆ½Ì¨×ªÂë×ÓÏµÍ³
#define  DS_65XXD_B10_CLASS         335     //ÊÓÆµ×ÛºÏÆ½Ì¨ÍòÄÜ½âÂë°å
#define  DS_IVMSE_B10X_CLASS        336     //X86·þÎñÆ÷×ÓÏµÍ³
#define  DS_6532D_B10ES_CLASS        337     //ÔöÇ¿ÐÍ½âÂë°å_SDI(B10)
#define  DS_6508HFH_B10ES_CLASS        338     //SDIÊäÈë±àÂë×ÓÏµÍ³
#define  DS_82NCG_CLASS                340     //ÁªÍøÍø¹ØÖÐµÄ×ÓÏµÍ³
#define  DS_82VAG_CLASS                341     //ÁªÍøÍø¹ØÖÐµÄ×ÓÏµÍ³ 
#define  DS_1802XXF_B10_CLASS       342     //¹â¿Ú½»»»×ÓÏµÍ³
#define  iDS_6504_B10EVAC_CLASS     343     //ÖÇÄÜ×ÓÏµÍ³
#define  iDS_6504_B10EDEC_CLASS     344     //ÖÇÄÜ×ÓÏµÍ³
#define  DS_6402HFH_B10EV_CLASS     345     //netra±àÂë(VGA)
#define  DS_6402HFH_B10ED_CLASS     346     //netra±àÂë(DVI)
#define  DS_6402HFH_B10EH_CLASS     347     //netra±àÂë(HDMI)
#define  DS_6404HFH_B10T_RX_CLASS   348     //¹âÏË½ÓÈë±àÂë
#define  DS_6504D_AIO_CLASS         349        //netra¸ßÇå½âÂë
#define  DS_IVMST_B10_CLASS            350        //X86×ªÂë×ÓÏµÍ³
#define  DS_6402_AIO_CLASS          351     //netra±àÂë
#define  DS_iVMSE_AIO_CLASS         352     //x86·þÎñÆ÷×ÓÏµÍ³
#define  DS_AIO_M_CLASS             353     //Ò»Ìå»ú


#define  DS_6508HF_B10E_CLASS        355        //BNCÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6404HFH_B10ES_CLASS        356        //SDIÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6402HFH_B10ER_CLASS        358        //RGBÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6404HFH_B10T_RM_CLASS    361        //¹âÏËÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6516D_B10EB_CLASS        362        //BNCÊä³ö½âÂë×ÓÏµÍ³
#define  DS_6516D_B10ES_CLASS        363        //SDIÊä³ö½âÂë×ÓÏµÍ³

//DVI/HDMI/VGA³©ÏÔ½âÂë¹«ÓÃÒ»¸öÀàÐÍ
#define  DS_6508D_B10FH_CLASS        364
#define  DS_6508D_B10FD_CLASS        364
#define  DS_6508D_B10FV_CLASS        364

#define  DS_6508_B11E_CLASS            365        //BNCÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6402_B11ES_CLASS        366        //SDIÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6402_B11EV_CLASS        367        //VGAÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6402_B11ER_CLASS        368        //RGBÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6402_B11ED_CLASS        369        //DVIÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6402_B11EH_CLASS        370        //HDMIÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6516D_B11EB_CLASS        371        //BNCÊä³ö½âÂë×ÓÏµÍ³
#define  DS_6516D_B11ES_CLASS        372        //SDIÊä³ö½âÂë×ÓÏµÍ³

#define  DS_6508_B12E_CLASS         373     //BNCÊäÈë±àÂë×ÓÏµÍ³
#define     DS_6402_B12ES_CLASS        375        //SDIÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6402_B12EV_CLASS        376        //VGAÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6402_B12ER_CLASS        377        //RGBÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6402_B12ED_CLASS        378        //DVIÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6402_B12EH_CLASS        379        //HDMIÊäÈë±àÂë×ÓÏµÍ³
#define  DS_6516D_B12EB_CLASS        380        //BNCÊä³ö½âÂë×ÓÏµÍ³

#define  DS_iVMSE_AIO_8100x_CLASS   381     //½ðÈÚÐÐÒµÒ»Ìå»úX86×ÓÏµÍ³
#define  DS_iVMSE_AIO_87x_CLASS     382     //ÖÇÄÜÂ¥ÓîÒ»Ìå»úX86×ÓÏµÍ³
#define  DS_6532D_B11ES_CLASS        384        //ÔöÇ¿ÐÍ½âÂë°å_SDI(B11)
#define  DS_6532D_B12ES_CLASS        385        //ÔöÇ¿ÐÍ½âÂë°å_SDI(B12)
//B20ÐÂÔö
#define  DS_B20_MSU_NP              400     //B20Ö÷¿Ø°å
#define  DS_6416HFH_B20S            401     //SDIÊäÈë±àÂë
#define  DS_6416HFH_B20_RM          402     //¹âÏËÊäÈë¸ßÇå±àÂë
#define  DS_6564D_B20D              403     //DVI½âÂë
#define  DS_6564D_B20H              404     //HDMI½âÂë
#define  DS_6564D_B20V              405     //VGA½âÂë
#define  DS_B20_6516D_DEV_CLASS     406     //B20½âÂë×ÓÏµÍ³
#define  DS_6408HFH_B20V            407     //VGA±àÂë°å
#define  DS_MMC_B20_CLASS           408     //B20Ö÷¿Ø
#define  DS_CARD_CHIP_B20_CLASS     409     //B20Ö÷¿Ø×Ó°å
#define  DS_6564D_B20B_DEV_CLASS    410     //BNC½âÂë×ÓÏµÍ³
#define  DS_6564D_B20S_DEV_CLASS    411     //SDI½âÂë×ÓÏµÍ³
#define  DS_6532HF_B20B_DEV_CLASS   412     //BNC±àÂë×ÓÏµÍ³
#define  DS_6408HFH_B20D_DEV_CLASS  413     //DVI±àÂë×ÓÏµÍ³
#define  DS_6408HFH_B20H_DEV_CLASS  414     //HDMI±àÂë×ÓÏµÍ³
#define  DS_IVMSE_B20_CLASS            415     //X86·þÎñÆ÷×ÓÏµÍ³
#define  DS_6402HFH_B20Y_DEV_CLASS  416     //YUV±àÂë×ÓÏµÍ³
#define  DS_6508HW_B20_DEV_CLASS    417     //HW±àÂë×ÓÏµÍ³
#define  DS_B20N128Fx_B20_DEV_CLASS 418     //DS_B20N128Fx_M¼¶Áª°å
#define  DS_AIO_MCU_NP_DEV_CLASS    419     //IOÖ÷¿Ø°å
#define  DS_6402_AIO_EV_DEV_CLASS   420     //VGA±àÂë
#define  DS_6508D_AIO_EV_DEV_CLASS  421     //VGA½âÂë
#define  DS_6508D_AIO_ED_DEV_CLASS  422     //DVI½âÂë
#define  DS_6508D_AIO_EH_DEV_CLASS  423     //HDMI½âÂë
#define  DS_6508HD_B20F_DEV_CLASS    424     //ÊÓÆµÔöÇ¿°å
#define  DS_6402HFH_B20ES_DEV_CLASS 425     //3G SID±àÂë
#define  DS_6532D_B20_DEV_CLASS     426     //B20½âÂë×ÓÏµÍ³            
#define  DS_IVMST_B20_DEV_CLASS     427     //X86·þÎñÆ÷×ÓÏµÍ³
#define  DS_6416HFH_B20DD_DEV_CLASS 428     //DVIË«Á´Â·
#define  DS_6441VS_B20_DEV_CLASS    429        //Ïà»úÆ´½ÓÀàÐÍ
#define  DS_6404HFH_B20T_CLASS         431        //TVI
#define  DS_FS22_B20_DEV_CLASS         432        //½»»»»ú×ÓÏµÍ³
#define  DS_IVMSE_B20UH_DEV_CLASS   433     //³¬¸ßÇåX86ÊäÈë
#define  IDS_6524J_B20_DEV_CLASS    434
#define  IDS_6532B_B20_DEV_CLASS    435
#define DS_6404HFH_B20Fx_DEV_CLASS  436        //¹â¶Ë»ú½ÓÈë×ÓÏµÍ³
#define DS_N128x_B20Fy_CLASS        437     //¼¶Áª×ÓÏµÍ³
#define DS_181600F_B20_CLASS        438     //ÍøÂç¹âÏË×ÓÏµÍ³
#define  DS_6904UD_B20H_CLASS       439     //³¬¸ßÇå½âÂë×ÓÏµÍ³

#define DS_B21_MCU_NP_CLASS         440        //B21Ö÷¿Ø
#define DS_B21_S10_x_CLASS          441        //B21»úÏä x = A/S/D
#define DS_6402HFH_B21D_CLASS        442     //B21±àÂë×ÓÏµÍ³
#define DS_6508HD_B21D_CLASS        443     //B21½âÂë×ÓÏµÍ³
#define DS_iVMSE_B21HW_CLASS        444     //B21 X86×ÓÏµÍ³

#define  DS_C10S                    501     //C10S ¼¯ÖÐÊ½´óÆÁ¿ØÖÆÆ÷

#define  DS_C10N_SDI                551        //SDI´¦ÀíÆ÷
#define  DS_C10N_BIW                552        //8Â·BNC´¦ÀíÆ÷
#define  DS_C10N_DON                553        //ÏÔÊ¾´¦ÀíÆ÷
#define  DS_C10N_TVI                554     //TVIÊäÈë°å
#define  DS_C10N_DI2                555     //DVI 2Â·ÊäÈë°å
#define  DS_C10N_AUDIO_OUT          556     //DVI£¬HDMI£¬VGAÊä³ö°å´øÒôÆµ
#define  DS_C10N_AUDIO_IN           557     //DVI£¬HDMI£¬VGAÊäÈë°å´øÒôÆµ

#define  DS_C20N                    570     //·Ö²¼Ê½´óÆÁ¿ØÖÆÆ÷
#define  DS_C20N_BNC                571     //BNCÊäÈëÉè±¸
#define  DS_C20N_DVI                572     //DVIÊäÈëÉè±¸
#define  DS_C20N_DP                 573     //DPÊäÈëÉè±¸
#define  DS_C20N_OUT                574     //Êä³öÉè±¸


//±¨¾¯Éè±¸
#define DS_19M00_MN                    601     //±¨¾¯Ö÷»ú°ÙÕ×ÍøÂçÄ£¿é 
#define DS_KH8302_A                 602  //ÊÒÄÚ»ú
#define DS_KD8101_2                 603  //ÃÅ¿Ú»ú
#define DS_KM8301                   604  //¹ÜÀí»ú
#define DS_KVXXXX_XX                605  //±ðÊûÃÅ¿Ú»ú


#define DS64XXHD_T                    701        //64-T¸ßÇå½âÂëÆ÷
#define DS_65XXD                    703     //65ÍòÄÜ½âÂëÆ÷
#define DS63XXD_T                    704        //63-T±êÇå½âÂëÆ÷
#define SCE_SERVER                  705     //×¥ÆÁ·þÎñÆ÷
#define DS_64XXHD_S                 706     //64XXHD-S¸ßÇå½âÂëÆ÷
#define DS_68XXT                    707     //¶à¹¦ÄÜÊÓÒôÆµ×ªÂëÆ÷
#define DS_65XXD_T                  708     //65D-TÍòÄÜ½âÂëÆ÷
#define DS_65XXHD_T                 709     //65HD-TÍòÄÜ½âÂëÆ÷
#define DS_69XXUD                   710     //69XXUD³¬¸ßÇå½âÂëÆ÷
#define DS_65XXUD                   711     //65XXUD½âÂëÆ÷
#define DS_65XXUD_L                 712     //65XXUD_L½âÂëÆ÷
#define DS_65XXUD_T                 713     //65XXUD_T½âÂëÆ÷

#define DS_D20XX                    750     //LCDÆÁÄ» ½âÂë¿¨
//SDI¾ØÕó
#define DS_C50S                     751     //SDI¾ØÕó
#define DS_D50XX                    752     //LCDÆÁÄ» ½âÂë¿¨

#define DS_D40                        760        //LEDÆÁ·¢ËÍ¿¨
#define DS_65VMXX                   770     //ÊÓÆµ»áÒé·þÎñÆ÷
#define DS_65VTXX                   771     //ÊÓÆµ»áÒéÖÕ¶Ë
#define    DS_65VTA                    772        //ÊÓÆµ»áÒéÒ»ÌåÊ½ÖÕ¶Ë
#define DS_65VT_RX                  773     //»¥¶¯½ÌÑ§ÖÕ¶Ë
#define DS_CS_SERVER                800     //ÐéÄâÆÁ·þÎñÆ÷
#define DS_K260X                    850     //ÃÅ½ûÖ÷»ú
#define DS_K1TXXX                   851     //Ö¸ÎÆÒ»Ìå»ú
#define DS_K280X                    852     //¾­¼ÃÐÍÃÅ½ûÖ÷»ú
#define DS_K1T80X                   854     //¾­¼ÃÐÍÃÅ½ûÒ»Ìå»ú
#define RAC_6X00                    856     //ºº¾üÖ¸ÎÆÃÅ½ûÒ»Ìå»ú
#define DS_K2602_AX                 857     //ÈËÔ±Í¨µÀÖ÷»ú
#define DS_K1T803F                  858     //¾­¼ÃÐÍÖ¸ÎÆÃÅ½û²úÆ·
#define DS_K1T500S                  861     //ÊÓÆÁÃÅ½ûÒ»Ìå»ú
#define DS_K1A801F                  862     //¾­¼ÃÐÍÖ¸ÎÆÃÅ½û²úÆ·
#define DS_6800M					900     //68MºÏÂëÆ÷
#define DS_68NTH					901     //ÐÅÏ¢·¢²¼Ö÷»ú
#define DS_D60S                     902     //ÐÅÏ¢·¢²¼·þÎñÆ÷
#define    DS_D10                        931        //±³Í¶ÏÔÊ¾Éè±¸
#define DS_3K0X_NM                    951        //¹âÏËÊÕ·¢Æ÷
#define DS_3E2328                    952     //°ÙÕ×½»»»»ú
#define SCREEN_LINK_SERVER          971     //ÆÁÄ»·þÎñÆ÷
#define DS_D51OPSXX             972  //OPSµçÄÔºÐ
//Ò»Ìå»¯ÔÆÌ¨
#define IP_PTSYS_MEGA200            1001   //IP 200ÍòÒ»Ìå»¯ÔÆÌ¨
#define IPCAM_FISHEYE               1002   //ÓãÑÛÉãÏñ»ú
#define IPCAM_FISHEYE_E             1003   //¾­¼ÃÐÍÓãÑÛÉãÏñ»ú

//68xxÏµÁÐË«Ä¿3DÏà»ú
#define IPCAM_BINOCULAR             1004   //Ë«Ä¿ÉãÏñ»ú

#define IPCAM_365                    1010    //Ö§³Ö365µÄÆ½Ì¨µÄIPC CAM
#define IPCAM_R0                    1011    //Ö§³ÖA5SµÄÆ½Ì¨µÄIPC CAM
#define IPCAM_R1                    1012    //Ö§³Ö385µÄÆ½Ì¨µÄIPC CAM
#define IPCAM_R2                    1013    //Ö§³ÖR2µÄÆ½Ì¨µÄIPC CAM
#define IPCAM_R3                    1014    //Ö§³Ö8127µÄÆ½Ì¨µÄIPC CAM
#define IPCAM_R4                    1015    //Ö§³ÖS2µÄÆ½Ì¨µÄIPC CAM

#define IPDOME_365                    1110    //Ö§³Ö365µÄÆ½Ì¨µÄIPD CAM
#define IPDOME_R0                    1111    //Ö§³ÖA5SµÄÆ½Ì¨µÄIPD CAM
#define IPDOME_R1                    1112    //Ö§³Ö385µÄÆ½Ì¨µÄIPD CAM
#define IPDOME_R2                    1113    //Ö§³ÖR2µÄÆ½Ì¨µÄIPD CAM
#define IPDOME_R3                    1114    //Ö§³Ö8127µÄÆ½Ì¨µÄIPD CAM
#define IPDOME_R4                    1115    //Ö§³ÖS2µÄÆ½Ì¨µÄIPD CAM
#define ITCCAM_R3                    1211    //Ö§³Ö8127µÄÆ½Ì¨µÄITCCAM

//ÎÞÈË»úÒµÎñÉè±¸£¨1300~1350£©
#define UAV_S                       1300    //ÎÞÈË»ú»ùÕ¾Éè±¸ £¨Ummanned Aerial Vehicle ¨C Station£©

//ÐÂÔöÉè±¸ÀàÐÍ 2013-11-19
#define TRAFFIC_ECT                    1400  //ECTÉè±¸ÀàÐÍ
#define TRAFFIC_PARKING_SERVER        1401  //Í£³µ³¡·þÎñÆ÷
#define TRAFFIC_TME                    1402  //³öÈë¿Ú¿ØÖÆ»ú
// DVR
#define DS90XXHW_ST                    2001    // DS90XXHW_ST»ìºÏDVR
#define DS72XXHX_SH                 2002    // DS-72xxHV_SH, DS-72xxHF-SH 
#define DS_92XX_HF_ST                2003    // DS-92XX-HF-ST 
#define DS_91XX_HF_XT                2004    // 9100DVR_HF_XT
#define DS_90XX_HF_XT               2005    // 9000DVR_HF_XT 
#define DS_73XXHX_SH                2006    // 7300DVR_HX_SH  
#define DS_72XXHFH_ST                2007    // 7200DVR_HFH_ST
//DS_67ÏµÁÐ

#define DS_67XXHF_SATA              2008 // DS-67XXHF-SATA
#define DS_67XXHW                   2009 // DS-67XXHW 
#define DS_67XXHW_SATA              2010 // DS-67XXHW-SATA
#define DS_67XXHF                   2011 // DS-67XXHF

//Netra2.3
#define DS_72XXHF_SV                2012  // DS-72xxHF-SV 
#define DS_72XXHW_SV                2013   // DS-72xxHW-SV

#define DS_81XXHX_SH                2014   // 8100DVR_HX_SH

#define DS_71XXHX_SL                2015    //Ð¡ÐÍDVR

#define DS_76XXH_ST                    2016    //DS_76XXH_ST


#define DS_73XXHFH_ST               2017   //73HFHÏµÁÐ
#define DS_81XXHFH_ST               2018   //81HFHÏµÁÐ ST

#define DS_72XXHFH_SL                2019    //hi3521 
#define DS_FDXXCGA_FLT                2020    //2ÅÌÎ»ATM

#define IDS_91XX_HF_ST_A            2100    //iDS-9100HF-ST/A
#define IDS_91XX_HF_ST_B            2101    //iDS-9100HF-ST/B
#define IDS_90XX_HF_ST_A            2102    //iDS-9000HF-ST/A
#define IDS_90XX_HF_ST_B            2103    //iDS-9000HF-ST/B
#define IDS_81XX_HF_ST_A            2104    //iDS-8100HF-ST/A
#define IDS_81XX_HF_ST_B            2105    //iDS-8100HF-ST/B
#define IDS_80XX_HF_ST_A            2106    //iDS-8000HF-ST/A
#define IDS_80XX_HF_ST_B            2107    //iDS-8000HF-ST/B
#define IDS_8104_AHFL_ST            2108    //ÖÇÄÜ»ìºÏATM»ú

#define DS_72XXHXH_SH_21            2220   // 72HXH_SHÏµÁÐ_21
#define DS_72XXHXH_SH_31            2221  // 72XXHXH_SH_31
#define DS_73XXHXH_SH_31            2222  // 73XXHXH_SH_31
#define DS_81XXHXH_SH_31            2223  // 81XXHXH_SH_31


// NVR
#define DS_77XXN_ST                    2201    //  NVR DS-77XXHF-ST
#define DS_95XX_N_ST                2202    //  95XXN_ST NVR          
#define DS_85XX_N_ST                2203    //  85XXN_ST NVR
#define DS_96XX_N_XT                2204    // 9600NVR_N_XT
#define DS_76XX_N_SE                2205    // 7600NVR_N_SE

//¸ßÇåÉóÑ¶»ú
#define DS_86XXSN_SX                2206    // 8608NVR_SX£¬°üÀ¨4ÖÐÀàÐÍDS-8608SNL-SP¡¢DS-8608SNL-ST¡¢DS-8608SN-SP¡¢DS-8608SN-ST£¬L±íÊ¾´øLCD£¬P±íPOE

//#define DS_96XX_N_RX                2207  //DS-96XX-N-RX
#define DS_71XXN_SL                    2208  //DS-71XXN-SL ÃñÓÃ²úÆ·
#define CS_N1_1XX                    2209  //CS_N1_1XX£¬ÃñÓÃÊÂÒµ²¿ËùÓÃ

#define DS_71XXN_SN                    2210    //71XX_N_SN  ¾­¼ÃÐÍÃñÓÃ²úÆ· 
#define CS_N1_2XX                    2211    //N1_2XX        ÃñÓÃÊÂÒµ²¿ËùÓÃ
#define DS_76XX_N_SHT                2212    //76XX_N_SHT  ºó¶Ë»ùÏß²úÆ·
#define DS_96XXX_N_E                2213    //¸ßÐÂÐÔÄÜNVR(256) 

#define    DS_76XXN_EX                    2214 /* 76 78ÏµÁÐNVR£¬×¢£º°üÀ¨ 4 8 16Â·µÄE1Ò»ÅÌÎ»£¬ 8 16 32Â· E2Á½ÅÌÎ»£» /N /PÉè±¸*/
#define DS_77XXN_E4                    2215/* 77ÏµÁÐNVR£¬   ×¢£º°üÀ¨8 16 32Â·£¬ /N /PÉè±¸*/
#define DS_86XXN_E8                    2216/* 86ÏµÁÐNVR£¬   ×¢£º°üÀ¨8 16 32Â·£¬ /N /PÉè±¸*/
#define DS_9616N_H8                 2217   //DS_9616N_H8
#define DS_72XXHX_EX_GXY            2218   //±íÊ¾72ÏµÁÐÎÞÏßDVR²úÆ·£¬ÆäÖÐ72ºóÃæµÄxx±íÊ¾Í¨µÀÊý£¬HºóµÄXÄ¿Ç°½öÓÐHW,ÎªÁËºóÐøÀ©Õ¹±£Áô£¬EºóÃæµÄX±íÊ¾µÄÊÇÅÌÎ»Êý£¬G XY±íÊ¾µÄÊÇÎÞÏßÀàÐÍ
#define DS_76XXN_EX_GXY             2219   //±íÊ¾ÊÇ76ÏµÁÐÎÞÏßNVR²úÆ·£¬ÆäÖÐ76ºóÃæµÄxx±íÊ¾Í¨µÀÊý£¬EºóÃæµÄX±íÊ¾µÄÊÇÅÌÎ»Êý£¬G XY±íÊ¾µÄÊÇÎÞÏßÀàÐÍ
#define DS_72XXHXH_SH_21            2220   //  72XXHXH_SH_21
#define DS_72XXHXH_SH_31            2221  //  72XXHXH_SH_31
#define DS_73XXHXH_SH_31            2222  // 73XXHXH_SH_31
#define DS_81XXHXH_SH_31            2223  //  81XXHXH_SH_31
#define DS_96XXN_FX                 2230
#define DS_86XXN_FX                 2231
#define DS_96XXXN_HX                2232  //96ÏµÁÐ¸ßÐÔÄÜÉè±¸


#define DS_86XXN_I                    2233    //DS_86XXN_I
#define DS_77XX_N_I                    2234    //DS_77XX_N_I
#define DS_76XX_N_I                    2235    //DS_76XX_N_I
#define DS_78XX_N_I                    2236    //DS_78XX_N_I
#define DS_96XXXN_IX                2237    //DS-96XXX_N_I£¨DS-96128N-I16¡¢DS-96128N-I24¡¢DS-96256N-I16¡¢DS-96256N-I24£©

#define DS_90XXHXH_XT               2238    //DS_90XXHXH_XT£¨DS-9016HQH-XT£©

//PCNVR
#define PCNVR_IVMS_4200             2301    // PCNVR_IVMS_4200


//ÖÇÄÜ·ÖÎöÒÇ
#define IVMS_6200_TP                2401   //IVMS-6200 ½»Í¨ÓÕµ¼·ÖÎöÒÇ
#define IVMS_6200_TF                2402   //IVMS-6200 ½»Í¨È¡Ö¤·ÖÎöÒÇ
#define IVMS_6200_D                 2403   //iVMS-6200(/D)
#define IDS_81XXAHW_ST              2405   //iDS-81xxAHW-ST
#define IDS_81XXAHW_SP              2406   //iDS-81xxAHW-SP
#define IDS_81XXAHWL_ST             2407   //iDS-81xxAHWL-ST 
#define IDS_81XXAHWL_SP             2408   //iDS-81xxAHWL-SP
#define IDS_9616N_H8                2409   //iDS_9616N_H8
#define IVMS_6200_SMD               2500   //IVMS_6200_SMD
//HISI3531Æ½Ì¨»ìºÏATM DVR£¬ ÆäÖÐL±íÊ¾´øÒº¾§ÆÁ£¬P±íÊ¾´øpoe
#define DS_81XXAHW_ST                2501
#define DS_81XXAHW_SP                2502
#define DS_81XXAHWL_ST                2503
#define DS_81XXAHWL_SP                2504

//TVI ATM
#define DS_81XXAHGH_E4                2601    //DS_81XXAHGH_E4

#define DS_6904UD_AIOE_H_CLASS      4002    //B20Ò»Ìå»ú
#define DS_6402HFH_B21B_CLASS       4005    //B21 ±àÂë
#define DS_6902UD_B21H_CLASS        4006    //B21 HDMI½âÂë
#define DS_6902UD_B21D_CLASS        4007    //B21 DVI½âÂë
#define DS_6902UD_B21V_CLASS        4008    //B21 VGA½âÂë
#define DS_6904UD_B20D_CLASS        4010    //B20 DVI½âÂë
#define DS_6904UD_B20V_CLASS        4011    //B20 VGA½âÂë



/**********************Éè±¸ÀàÐÍ end***********************/
/**********************Éè±¸´óÀà begin**********************/

/* dvrÏà¹Ø 1-50 */
#define DEV_CLASS_DVR      1          //ÆÕÍ¨dvrÀàÐÍ
#define DEV_CLASS_INTERROGATION  2    //ÉóÑ¶»ú
#define DEV_CLASS_SIMPLE_TRAIL  3    //¼òÒ×Í¥ÉóÖ÷»ú
#define DEV_CLASS_TRAIL  4           //±ê×¼Í¥ÉóÖ÷»ú
#define DEV_CLASS_RECORD_PLAY  5     //Â¼²¥Ö÷»ú
#define DEV_CLASS_ATM 6           //ATM»ú

/* dvsÏà¹Ø 51-100 */
#define DEV_CLASS_DVS 51          //ÆÕÍ¨dvs

/* nvrÏà¹Ø 101-150 */
#define DEV_CLASS_NVR 101          //ÆÕÍ¨nvr

/* ipcÏà¹Ø 151-200 */
#define DEV_CLASS_GUN 151          //ipcÇ¹»ú
#define DEV_CLASS_BALL 152          //ipcÇò»ú
#define DEV_CLASS_SNAP 153          //×¥ÅÄ»ú
#define DEV_CLASS_INTELLI_TILT 154   //ÖÇÄÜÔÆÌ¨

/* ÆäËûÉè±¸ÀàÐÍ 65534 */
#define DEV_CLASS_DEFAULT 65534   //Ä¬ÈÏÉè±¸ÀàÐÍ
/**********************Éè±¸´óÀà end**********************/

/******************************ÄÜÁ¦¼¯»ñÈ¡*********************************/
//ÄÜÁ¦»ñÈ¡ÃüÁî
#define DEVICE_SOFTHARDWARE_ABILITY         0x001  //Éè±¸ÈíÓ²¼þÄÜÁ¦
#define DEVICE_NETWORK_ABILITY              0x002  //Éè±¸ÍøÂçÄÜÁ¦
#define DEVICE_ENCODE_ALL_ABILITY           0x003  //Éè±¸ËùÓÐ±àÂëÄÜÁ¦
#define    DEVICE_ENCODE_CURRENT               0x004  //Éè±¸µ±Ç°±àÂëÄÜÁ¦
#define IPC_FRONT_PARAMETER                    0x005     //ipcÇ°¶Ë²ÎÊý1.0
#define IPC_UPGRADE_DESCRIPTION                0x006     //ipcÉý¼¶ÐÅÏ¢
#define DEVICE_RAID_ABILITY                 0x007  //RAIDÄÜÁ¦
#define DEVICE_ENCODE_ALL_ABILITY_V20       0x008     //Éè±¸ËùÓÐ±àÂëÄÜÁ¦2.0
#define IPC_FRONT_PARAMETER_V20                0x009     //ipcÇ°¶Ë²ÎÊý2.0
#define DEVICE_ALARM_ABILITY                0x00a  //¸¨Öú±¨¾¯ÄÜÁ¦
#define DEVICE_DYNCHAN_ABILITY                0x00b  //Éè±¸Êý×ÖÍ¨µÀÄÜÁ¦
#define DEVICE_USER_ABILITY                 0x00c  //Éè±¸ÓÃ»§¹ÜÀí²ÎÊýÄÜÁ¦
#define DEVICE_NETAPP_ABILITY               0x00d  //Éè±¸ÍøÂçÓ¦ÓÃ²ÎÊýÄÜÁ¦
#define DEVICE_VIDEOPIC_ABILITY             0x00e  //Éè±¸Í¼Ïñ²ÎÊýÄÜÁ¦
#define DEVICE_JPEG_CAP_ABILITY             0x00f  //Éè±¸JPEG×¥Í¼ÄÜÁ¦
#define DEVICE_SERIAL_ABILITY               0x010  //RS232ºÍRS485´®¿ÚÄÜÁ¦
#define DEVICE_ABILITY_INFO                    0x011     //Éè±¸Í¨ÓÃÄÜÁ¦ÀàÐÍ£¬¾ßÌåÄÜÁ¦¸ù¾Ý·¢ËÍµÄÄÜÁ¦½ÚµãÀ´Çø·Ö
#define STREAM_ABILITY                      0x012  //Á÷ÄÜÁ¦
#define SYSTEM_MANAGEMENT_ABILITY           0x013  //Éè±¸ÏµÍ³¹ÜÀíÄÜÁ¦
#define IP_VIEW_DEV_ABILITY                    0x014  //IP¿ÉÊÓ¶Ô½²·Ö»úÄÜÁ¦
#define VCA_DEV_ABILITY                     0x100  //Éè±¸ÖÇÄÜ·ÖÎöµÄ×ÜÄÜÁ¦
#define VCA_CHAN_ABILITY                    0x110  //ÐÐÎª·ÖÎöÄÜÁ¦
#define MATRIXDECODER_ABILITY               0x200  //¶àÂ·½âÂëÆ÷ÏÔÊ¾¡¢½âÂëÄÜÁ¦
#define VIDEOPLATFORM_ABILITY               0x210 //ÊÓÆµ×ÛºÏÆ½Ì¨ÄÜÁ¦¼¯
#define VIDEOPLATFORM_SBUCODESYSTEM_ABILITY 0x211 //ÊÓÆµ×ÛºÏÆ½Ì¨±àÂë×ÓÏµÍ³ÄÜÁ¦¼¯
#define WALL_ABILITY                        0x212  //µçÊÓÇ½ÄÜÁ¦¼¯
#define MATRIX_ABILITY                      0x213  //SDI¾ØÕóÄÜÁ¦ 
#define DECODECARD_ABILITY                  0x220 //½âÂë¿¨·þÎñÆ÷ÄÜÁ¦¼¯
#define VIDEOPLATFORM_ABILITY_V40           0x230 //ÊÓÆµ×ÛºÏÆ½Ì¨ÄÜÁ¦¼¯
#define MATRIXMANAGEDEVICE_ABILITY          0x240 //¾ØÕó½ÓÈëÍø¹ØÄÜÁ¦¼¯
#define MATRIXDECODER_ABILITY_V41           0x260 //½âÂëÆ÷ÄÜÁ¦¼¯
#define DECODER_ABILITY                     0x261 //½âÂëÆ÷xmlÄÜÁ¦¼¯
#define DECODECARD_ABILITY_V41              0x270 //½âÂë¿¨·þÎñÆ÷ÄÜÁ¦¼¯V41
#define CODECARD_ABILITY                    0x271  //±àÂë¿¨ÄÜÁ¦¼¯
#define SNAPCAMERA_ABILITY                  0x300  //×¥ÅÄ»úÄÜÁ¦¼¯
#define ITC_TRIGGER_MODE_ABILITY            0x301  //ÖÇÄÜIPCÉè±¸µÄ´¥·¢Ä£Ê½ÄÜÁ¦
#define COMPRESSIONCFG_ABILITY              0x400  //»ñÈ¡Ñ¹Ëõ²ÎÊýÄÜÁ¦¼¯ºÏ
#define COMPRESSION_LIMIT                   0x401  //»ñÈ¡Ö÷×ÓÂëÁ÷Ñ¹Ëõ²ÎÊýÄÜÁ¦ÏÞÖÆ
#define PIC_CAPTURE_ABILITY                    0x402  //»ñÍ¼Æ¬·Ö±æÂÊÄÜÁ¦¼¯ºÏ
#define ALARMHOST_ABILITY                   0x500 //ÍøÂç±¨¾¯Ö÷»úÄÜÁ¦¼¯ 
#define IT_DEVICE_ABILITY                   0x501  //ÖÇÄÜ½»Í¨ÄÜÁ¦¼¯
#define    SCREENCONTROL_ABILITY                0x600     //´óÆÁ¿ØÖÆÆ÷ÄÜÁ¦¼¯
#define    SCREENSERVER_ABILITY                0x610     //´óÆÁ·þÎñÆ÷ÄÜÁ¦¼¯
#define FISHEYE_ABILITY                     0x700   //ÓãÑÛÄÜÁ¦¼¯
#define LCD_SCREEN_ABILITY                    0x800    //LCDÆÁÄ»ÄÜÁ¦ 2013-10-12
#define ACS_ABILITY                         0x801   //ÃÅ½ûÄÜÁ¦
#define MERGEDEV_ABILITY                    0x802   //ºÏÂëÆ÷ÄÜÁ¦¼¯
#define CAM_FUSION_ABILITY                  0x803   //Ïà»úÆ´½ÓÄÜÁ¦
#define OPTICAL_DEV_ACCESS_ABILITY          0x805   //¹â¶Ë»ú½ÓÈëÄÜÁ¦
#define NET_RING_ABILITY                    0x806    //»·ÍøÄÜÁ¦¼¯
#define LED_ABILITY                            0x807    //LEDÆÁÄÜÁ¦¼¯
#define PUBLISHDEV_ABILITY                    0x80a    //ÐÅÏ¢·¢²¼ÄÜÁ¦
#define SCREEN_EXCHANGE_ABILITY             0x80b   //ÆÁÄ»»¥¶¯ÄÜÁ¦
/*************************************************
²ÎÊýÅäÖÃ½á¹¹¡¢²ÎÊý(ÆäÖÐ_V30Îª9000ÐÂÔö)
**************************************************/

//×Ó°åÒì³£ÐÅÏ¢
//Ö÷ÀàÐÍ
#define EXCEPTION_MAJOR_MAINBOARD_BOOT                    0x1  //Ö÷°åÆô¶¯ÀàÐÍ
//´ÎÀàÐÍ
#define EXCEPTION_MINOR_PCIE_SCAN                        0x1  // pcieÁ´Â·É¨ÃèÒì³£  
#define EXCEPTION_MINOR_DOWNLOAD_SUBBOARD                 0xa  //ÏÂÔØ×Ó°åÍê³ÉÒì³£

//Ö÷ÀàÐÍ
#define EXCEPTION_MAJOR_SUBBOARD_BOOT                    0x2  //×Ó°åÆô¶¯ÀàÐÍ
//´ÎÀàÐÍ
#define EXCEPTION_MINOR_INEXISTENCE                       0x1  //PCI-EÉ¨²»µ½»òµ±Ç°×Ó°å²»´æÔÚ
#define EXCEPTION_MINOR_UBOOT_DOWNLOAD                  0xa  // ubootÏÂÔØÒì³£
#define EXCEPTION_MINOR_UBOOT_INIT                      0xe  //uboot³õÊ¼»¯Òì³£
#define EXCEPTION_MINOR_ROOTFS_DOWNLOAD                 0x14  //rootfs.imgÏÂÔØÒì³£
#define EXCEPTION_MINOR_UIMAGE_DOWNLOAD                 0x19  //uImageÏÂÔØÒì³£
#define EXCEPTION_MINOR_UBOOT_SETBOOTFLAG               0x1e  // ubootÆô¶¯±êÖ¾Î»ÖÃÎ»Òì³£    
#define EXCEPTION_MINOR_ROOTFS_BOOT_SUBBOARD            0x23  // rootfsÆô¶¯Òì³£
#define EXCEPTION_MINOR_NEED_FILE_FINISH                0x28  //×Ó°åËùÐèÎÄ¼þ´«ÊäÒì³£

//Ö÷ÀàÐÍ
#define EXCEPTION_MAJOR_SUBBOARD_HARDWARE                0x3  //×Ó°åÓ²¼þÀàÐÍ
//´ÎÀàÐÍ
#define EXCEPTION_MINOR_AD                               0x1  //ADÒì³£  
#define EXCEPTION_MINOR_DA                                 0xa  // DAÒì³£
#define EXCEPTION_MINOR_TIMER                            0xb     //Ê±ÖÓÒì³£

//Ö÷ÀàÐÍ
#define EXCEPTION_MAJOR_FPGA                            0x4  //FPGAÀàÐÍ
//´ÎÀàÐÍ
#define EXCEPTION_MINOR_IDLE                              0x1  //ÎÞ·¨IDLE  
#define EXCEPTION_MINOR_LANE                             0xa  // LANE OKÊ§°Ü
#define EXCEPTION_MINOR_REGISTER_ALL_F                     0xe  //FPGA¼Ä´æÆ÷È«F
#define EXCEPTION_MINOR_MEMORY_INIT_FAIL                 0x14 //FPGAÄÚ´æ³õÊ¼»¯Ê§°Ü
//Ö÷ÀàÐÍ
#define EXCEPTION_MAJOR_DSP                                0x5  //DSPÀàÐÍ

//Ö÷ÀàÐÍ
#define EXCEPTION_MAJOR_ARM                                0x6  //ARMÀàÐÍ

//Ö÷ÀàÐÍ
#define EXCEPTION_MAJOR_BACKBOARD                        0x7  //±³°åÀàÐÍ
//´ÎÀàÐÍ
#define EXCEPTION_MINOR_BLACKBOARD_TYPE                   0x1  //»ñÈ¡±³°åÀàÐÍÒì³£
#define EXCEPTION_MINOR_SERDES                           0xa  //ÊÓÆµ½»»»Ð¾Æ¬  
#define EXCEPTION_MINOR_CLOCK                             0xe  //Ê±ÖÓ¹ÊÕÏ
#define EXCEPTION_MINOR_SYNCH                             0x14  //Í¬²½ÐÅºÅ¹ÊÕÏ

//Ö÷ÀàÐÍ
#define EXCEPTION_MAJOR_SUBBOARD_NET                    0x8  //×Ó°åÍøÂç
//´ÎÀàÐÍ
#define EXCEPTION_MINOR_IP_CONFLICT                       0x1  //IP³åÍ» 
#define EXCEPTION_MINOR_DISCONNECT                         0x14  // ¶ÏÍø



typedef enum tagCharEncodeType
{
    ENUM_MEM_CHAR_ENCODE_ERR  = -1,         //Error   
    ENUM_MEM_CHAR_ENCODE_NO   = 0,          //Don't know.
    ENUM_MEM_CHAR_ENCODE_CN   = 1,          //EUC-CN, GB2312
    ENUM_MEM_CHAR_ENCODE_GBK  = 2,          //GBK
    ENUM_MEM_CHAR_ENCODE_BIG5 = 3,          //BIG5
    ENUM_MEM_CHAR_ENCODE_JP   = 4,          //JISX0208-1, EUC-JP
    ENUM_MEM_CHAR_ENCODE_KR   = 5,          //EUC-KR
    ENUM_MEM_CHAR_ENCODE_UTF8 = 6,          //UTF-8
    ENUM_MEM_CHAR_ENCODE_ISO8859_1  = 7,    //ISO-8859-n: ENUM_MEM_CHAR_ENCODE_ISO8859_1 + n -1
}CHAR_ENCODE_TYPE;


/////////////////////////////////////////////////////////////////////////
//Ð£Ê±½á¹¹²ÎÊý
typedef struct
{
    DWORD dwYear;        //Äê
    DWORD dwMonth;        //ÔÂ
    DWORD dwDay;        //ÈÕ
    DWORD dwHour;        //Ê±
    DWORD dwMinute;        //·Ö
    DWORD dwSecond;        //Ãë
}NET_DVR_TIME, *LPNET_DVR_TIME;

typedef struct tagNET_DVR_TIME_V30
{
    WORD wYear;
    BYTE byMonth;
    BYTE byDay;
    BYTE byHour;
    BYTE byMinute;
    BYTE bySecond;
    BYTE byRes;
    WORD wMilliSec;
    BYTE byRes1[2];
}NET_DVR_TIME_V30, *LPNET_DVR_TIME_V30;

typedef struct  tagNET_DVR_CALIBRATE_TIME
{
    DWORD  dwSize;
    NET_DVR_TIME struTime;
    WORD wMilliSec;
    BYTE byRes[14];
}NET_DVR_CALIBRATE_TIME,*LPNET_DVR_CALIBRATE_TIME;

#define    MAX_TIMESIGN_LEN    32 //×Ô¶¨ÒåÐ£Ê±±ê¼ÇÐÅÏ¢³¤¶È
typedef  struct tagNET_DVR_TIMESIGN_CFG
{
    DWORD  dwSize;
    BYTE  byCustomSetTimeSign[MAX_TIMESIGN_LEN/*32*/];//×Ô¶¨ÒåÐ£Ê±±ê¼Ç
    BYTE  byRes[96]; 
}NET_DVR_TIMESIGN_CFG,*LPNET_DVR_TIMESIGN_CFG;


typedef struct tagNET_DVR_TIME_EX
{
    WORD wYear;
    BYTE byMonth;
    BYTE byDay;
    BYTE byHour;
    BYTE byMinute;
    BYTE bySecond;
    BYTE byRes;
}NET_DVR_TIME_EX,*LPNET_DVR_TIME_EX;

//Ê±¼ä¶Î(×Ó½á¹¹)
typedef struct
{
    //¿ªÊ¼Ê±¼ä
    BYTE byStartHour;
    BYTE byStartMin;
    //½áÊøÊ±¼ä
    BYTE byStopHour;
    BYTE byStopMin;
}NET_DVR_SCHEDTIME, *LPNET_DVR_SCHEDTIME;

/*Éè±¸±¨¾¯ºÍÒì³£´¦Àí·½Ê½*/
/*Éè±¸±¨¾¯ºÍÒì³£´¦Àí·½Ê½*/
#define NOACTION            0x0                /*ÎÞÏìÓ¦*/
#define WARNONMONITOR        0x1                /*¼àÊÓÆ÷ÉÏ¾¯¸æ*/
#define WARNONAUDIOOUT        0x2                /*ÉùÒô¾¯¸æ*/
#define UPTOCENTER            0x4                /*ÉÏ´«ÖÐÐÄ*/
#define TRIGGERALARMOUT        0x8                /*´¥·¢±¨¾¯Êä³ö*/
#define TRIGGERCATPIC        0x10            /*´¥·¢×¥Í¼²¢ÉÏ´«E-mail*/
#define SEND_PIC_FTP        0x200           /*×¥Í¼²¢ÉÏ´«ftp*/

typedef struct tagNET_DVR_STRUCTHEAD
{
    WORD    wLength;        //½á¹¹³¤¶È
    BYTE    byVersion ;    /*¸ßµÍ4Î»·Ö±ð´ú±í¸ßµÍ°æ±¾£¬ºóÐø¸ù¾Ý°æ±¾ºÍ³¤¶È½øÐÐÀ©Õ¹£¬²»Í¬µÄ°æ±¾µÄ³¤¶È½øÐÐÏÞÖÆ*/
    BYTE    byRes;
}NET_DVR_STRUCTHEAD, *LPNET_DVR_STRUCTHEAD;

typedef struct tagNET_DVR_HANDLEEXCEPTION_V41
{    
    DWORD   dwHandleType;        //Òì³£´¦Àí,Òì³£´¦Àí·½Ê½µÄ"»ò"½á¹û   
    /*0x00: ÎÞÏìÓ¦*/
    /*0x01: ¼àÊÓÆ÷ÉÏ¾¯¸æ*/
    /*0x02: ÉùÒô¾¯¸æ*/
    /*0x04: ÉÏ´«ÖÐÐÄ*/
    /*0x08: ´¥·¢±¨¾¯Êä³ö*/
    /*0x10: ´¥·¢JPRG×¥Í¼²¢ÉÏ´«Email*/
    /*0x20: ÎÞÏßÉù¹â±¨¾¯Æ÷Áª¶¯*/
    /*0x40: Áª¶¯µç×ÓµØÍ¼(Ä¿Ç°Ö»ÓÐPCNVRÖ§³Ö)*/
    /*0x200: ×¥Í¼²¢ÉÏ´«FTP*/
    /*0x400: Ðé½»Õì²â Áª¶¯ ¾Û½¹Ä£Ê½£¨Ìá¹©¿ÉÅäÖÃÏî£¬Ô­ÏÈÉè±¸×Ô¶¯Íê³É£©IPC5.1.0*/
    /*0x800: PTZÁª¶¯¸ú×Ù(Çò»ú¸ú×ÙÄ¿±ê)*/
    DWORD   dwMaxRelAlarmOutChanNum ; //´¥·¢µÄ±¨¾¯Êä³öÍ¨µÀÊý£¨Ö»¶Á£©×î´óÖ§³ÖÊý
    DWORD   dwRelAlarmOut[MAX_ALARMOUT_V40]; //´¥·¢±¨¾¯Í¨µÀ  
    BYTE    byRes[64];           //±£Áô
}NET_DVR_HANDLEEXCEPTION_V41, *LPNET_DVR_HANDLEEXCEPTION_V41;

typedef struct tagNET_DVR_HANDLEEXCEPTION_V40
{    
    DWORD   dwHandleType;        //Òì³£´¦Àí,Òì³£´¦Àí·½Ê½µÄ"»ò"½á¹û   
    /*0x00: ÎÞÏìÓ¦*/
    /*0x01: ¼àÊÓÆ÷ÉÏ¾¯¸æ*/
    /*0x02: ÉùÒô¾¯¸æ*/
    /*0x04: ÉÏ´«ÖÐÐÄ*/
    /*0x08: ´¥·¢±¨¾¯Êä³ö*/
    /*0x10: ´¥·¢JPRG×¥Í¼²¢ÉÏ´«Email*/
    /*0x20: ÎÞÏßÉù¹â±¨¾¯Æ÷Áª¶¯*/
    /*0x40: Áª¶¯µç×ÓµØÍ¼(Ä¿Ç°Ö»ÓÐPCNVRÖ§³Ö)*/
    /*0x80: ±¨¾¯´¥·¢Â¼Ïñ(Ä¿Ç°Ö»ÓÐPCNVRÖ§³Ö) */
    /*0x100: ±¨¾¯´¥·¢ÔÆÌ¨Ô¤ÖÃµã (Ä¿Ç°Ö»ÓÐPCNVRÖ§³Ö)*/
    /*0x200: ×¥Í¼²¢ÉÏ´«FTP*/ 
    /*0x400: Ðé½»Õì²â Áª¶¯ ¾Û½¹Ä£Ê½£¨Ìá¹©¿ÉÅäÖÃÏî£¬Ô­ÏÈÉè±¸×Ô¶¯Íê³É£©IPC5.1.0*/
    /*0x800: PTZÁª¶¯¸ú×Ù(Çò»ú¸ú×ÙÄ¿±ê)*/ 
    /*0x1000:×¥Í¼ÉÏ´«µ½ÔÆ*/
    DWORD   dwMaxRelAlarmOutChanNum ; //´¥·¢µÄ±¨¾¯Êä³öÍ¨µÀÊý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD   dwRelAlarmOutChanNum; //´¥·¢µÄ±¨¾¯Êä³öÍ¨µÀÊý Êµ¼ÊÖ§³ÖÊý
    DWORD   dwRelAlarmOut[MAX_CHANNUM_V30]; //´¥·¢±¨¾¯Í¨µÀ  
    BYTE    byRes[64];           //±£Áô
}NET_DVR_HANDLEEXCEPTION_V40, *LPNET_DVR_HANDLEEXCEPTION_V40;

//±¨¾¯ºÍÒì³£´¦Àí½á¹¹(×Ó½á¹¹)(¶à´¦Ê¹ÓÃ)(9000À©Õ¹)
typedef struct
{
    DWORD    dwHandleType;    /*´¦Àí·½Ê½,´¦Àí·½Ê½µÄ"»ò"½á¹û*/
    /*0x00: ÎÞÏìÓ¦*/
    /*0x01: ¼àÊÓÆ÷ÉÏ¾¯¸æ*/
    /*0x02: ÉùÒô¾¯¸æ*/
    /*0x04: ÉÏ´«ÖÐÐÄ*/
    /*0x08: ´¥·¢±¨¾¯Êä³ö*/
    /*0x10: ´¥·¢JPRG×¥Í¼²¢ÉÏ´«Email*/
    /*0x20: ÎÞÏßÉù¹â±¨¾¯Æ÷Áª¶¯*/
    /*0x40: Áª¶¯µç×ÓµØÍ¼(Ä¿Ç°Ö»ÓÐPCNVRÖ§³Ö)*/
    /*0x200: ×¥Í¼²¢ÉÏ´«FTP*/
    BYTE byRelAlarmOut[MAX_ALARMOUT_V30];  
    //±¨¾¯´¥·¢µÄÊä³öÍ¨µÀ,±¨¾¯´¥·¢µÄÊä³ö,Îª1±íÊ¾´¥·¢¸ÃÊä³ö
}NET_DVR_HANDLEEXCEPTION_V30, *LPNET_DVR_HANDLEEXCEPTION_V30;

//±¨¾¯ºÍÒì³£´¦Àí½á¹¹(×Ó½á¹¹)(¶à´¦Ê¹ÓÃ)
typedef struct
{
    DWORD    dwHandleType;            /*´¦Àí·½Ê½,´¦Àí·½Ê½µÄ"»ò"½á¹û*/
    /*0x00: ÎÞÏìÓ¦*/
    /*0x01: ¼àÊÓÆ÷ÉÏ¾¯¸æ*/
    /*0x02: ÉùÒô¾¯¸æ*/
    /*0x04: ÉÏ´«ÖÐÐÄ*/
    /*0x08: ´¥·¢±¨¾¯Êä³ö*/
    /*0x10: Jpeg×¥Í¼²¢ÉÏ´«EMail*/
    BYTE byRelAlarmOut[MAX_ALARMOUT];  //±¨¾¯´¥·¢µÄÊä³öÍ¨µÀ,±¨¾¯´¥·¢µÄÊä³ö,Îª1±íÊ¾´¥·¢¸ÃÊä³ö
}NET_DVR_HANDLEEXCEPTION, *LPNET_DVR_HANDLEEXCEPTION;

//DVRÉè±¸²ÎÊý
typedef struct
{
    DWORD dwSize;
    BYTE sDVRName[NAME_LEN];     //DVRÃû³Æ
    DWORD dwDVRID;                //DVR ID,ÓÃÓÚÒ£¿ØÆ÷ //V1.4(0-99), V1.5(0-255)
    DWORD dwRecycleRecord;        //ÊÇ·ñÑ­»·Â¼Ïñ,0:²»ÊÇ; 1:ÊÇ
    //ÒÔÏÂ²»¿É¸ü¸Ä
    BYTE sSerialNumber[SERIALNO_LEN];  //ÐòÁÐºÅ
    DWORD dwSoftwareVersion;            //Èí¼þ°æ±¾ºÅ,¸ß16Î»ÊÇÖ÷°æ±¾,µÍ16Î»ÊÇ´Î°æ±¾
    DWORD dwSoftwareBuildDate;            //Èí¼þÉú³ÉÈÕÆÚ,0xYYYYMMDD
    DWORD dwDSPSoftwareVersion;            //DSPÈí¼þ°æ±¾,¸ß16Î»ÊÇÖ÷°æ±¾,µÍ16Î»ÊÇ´Î°æ±¾
    DWORD dwDSPSoftwareBuildDate;        // DSPÈí¼þÉú³ÉÈÕÆÚ,0xYYYYMMDD
    DWORD dwPanelVersion;                // Ç°Ãæ°å°æ±¾,¸ß16Î»ÊÇÖ÷°æ±¾,µÍ16Î»ÊÇ´Î°æ±¾
    DWORD dwHardwareVersion;    // Ó²¼þ°æ±¾,¸ß16Î»ÊÇÖ÷°æ±¾,µÍ16Î»ÊÇ´Î°æ±¾
    BYTE byAlarmInPortNum;        //DVR±¨¾¯ÊäÈë¸öÊý
    BYTE byAlarmOutPortNum;        //DVR±¨¾¯Êä³ö¸öÊý
    BYTE byRS232Num;            //DVR 232´®¿Ú¸öÊý
    BYTE byRS485Num;            //DVR 485´®¿Ú¸öÊý
    BYTE byNetworkPortNum;        //ÍøÂç¿Ú¸öÊý
    BYTE byDiskCtrlNum;            //DVR Ó²ÅÌ¿ØÖÆÆ÷¸öÊý
    BYTE byDiskNum;                //DVR Ó²ÅÌ¸öÊý
    BYTE byDVRType;                //DVRÀàÐÍ, 1:DVR 2:ATM DVR 3:DVS ......
    BYTE byChanNum;                //DVR Í¨µÀ¸öÊý
    BYTE byStartChan;            //ÆðÊ¼Í¨µÀºÅ,ÀýÈçDVS-1,DVR - 1
    BYTE byDecordChans;            //DVR ½âÂëÂ·Êý
    BYTE byVGANum;                //VGA¿ÚµÄ¸öÊý
    BYTE byUSBNum;                //USB¿ÚµÄ¸öÊý
    BYTE byAuxoutNum;            //¸¨¿ÚµÄ¸öÊý
    BYTE byAudioNum;            //ÓïÒô¿ÚµÄ¸öÊý
    BYTE byIPChanNum;            //×î´óÊý×ÖÍ¨µÀÊý
}NET_DVR_DEVICECFG, *LPNET_DVR_DEVICECFG;

/*
IPµØÖ·
*/
typedef struct
{        
    char    sIpV4[16];                        /* IPv4µØÖ· */
    BYTE    byIPv6[128];                        /* ±£Áô */
}NET_DVR_IPADDR, *LPNET_DVR_IPADDR;

/*
ÍøÂçÊý¾Ý½á¹¹(×Ó½á¹¹)(9000À©Õ¹)
*/
typedef struct 
{
    NET_DVR_IPADDR    struDVRIP;                              //DVR IPµØÖ·
    NET_DVR_IPADDR    struDVRIPMask;  //DVR IPµØÖ·ÑÚÂë
    DWORD    dwNetInterface;                                   //ÍøÂç½Ó¿Ú1-10MBase-T 2-10MBase-TÈ«Ë«¹¤ 3-100MBase-TX 4-100MÈ«Ë«¹¤ 5-10M/100M×ÔÊÊÓ¦
    WORD    wDVRPort;                                        //¶Ë¿ÚºÅ
    WORD    wMTU;                                            //Ôö¼ÓMTUÉèÖÃ£¬Ä¬ÈÏ1500¡£
    BYTE    byMACAddr[MACADDR_LEN];                            // ÎïÀíµØÖ·
    BYTE    byRes[2];              //±£Áô
}NET_DVR_ETHERNET_V30, *LPNET_DVR_ETHERNET_V30;

/*
ÍøÂçÊý¾Ý½á¹¹(×Ó½á¹¹)
*/
typedef struct
{
    char sDVRIP[16];          //DVR IPµØÖ·
    char sDVRIPMask[16];      //DVR IPµØÖ·ÑÚÂë
    DWORD dwNetInterface;     //ÍøÂç½Ó¿Ú 1-10MBase-T 2-10MBase-TÈ«Ë«¹¤ 3-100MBase-TX 4-100MÈ«Ë«¹¤ 5-10M/100M×ÔÊÊÓ¦
    WORD wDVRPort;              //¶Ë¿ÚºÅ
    BYTE byMACAddr[MACADDR_LEN];        //·þÎñÆ÷µÄÎïÀíµØÖ·
}NET_DVR_ETHERNET;

//pppoe½á¹¹
typedef struct 
{
    DWORD    dwPPPOE;                                        //0-²»ÆôÓÃ,1-ÆôÓÃ
    BYTE    sPPPoEUser[NAME_LEN];                            //PPPoEÓÃ»§Ãû
    char    sPPPoEPassword[PASSWD_LEN];                        // PPPoEÃÜÂë
    NET_DVR_IPADDR    struPPPoEIP;                            //PPPoE IPµØÖ·
}NET_DVR_PPPOECFG, *LPNET_DVR_PPPOECFG;

//ÍøÂçÅäÖÃ½á¹¹(9000À©Õ¹)
typedef struct
{    
    DWORD dwSize;
    NET_DVR_ETHERNET_V30    struEtherNet[MAX_ETHERNET];        //ÒÔÌ«Íø¿Ú
    NET_DVR_IPADDR    struRes1[2];                    /*±£Áô*/
    NET_DVR_IPADDR    struAlarmHostIpAddr;                    /* ±¨¾¯Ö÷»úIPµØÖ· */
    BYTE    byRes2[4];                                /* ±£Áô */
    WORD    wAlarmHostIpPort;                                /* ±¨¾¯Ö÷»ú¶Ë¿ÚºÅ */
    BYTE    byUseDhcp;                                      /* ÊÇ·ñÆôÓÃDHCP 0xff-ÎÞÐ§ 0-²»ÆôÓÃ 1-ÆôÓÃ*/
    BYTE    byIPv6Mode;                                //IPv6·ÖÅä·½Ê½£¬0-Â·ÓÉ¹«¸æ£¬1-ÊÖ¶¯ÉèÖÃ£¬2-ÆôÓÃDHCP·ÖÅä
    NET_DVR_IPADDR    struDnsServer1IpAddr;                    /* ÓòÃû·þÎñÆ÷1µÄIPµØÖ· */
    NET_DVR_IPADDR    struDnsServer2IpAddr;                    /* ÓòÃû·þÎñÆ÷2µÄIPµØÖ· */
    BYTE    byIpResolver[MAX_DOMAIN_NAME];                    /* IP½âÎö·þÎñÆ÷ÓòÃû»òIPµØÖ· */
    WORD    wIpResolverPort;                                /* IP½âÎö·þÎñÆ÷¶Ë¿ÚºÅ */
    WORD    wHttpPortNo;                                    /* HTTP¶Ë¿ÚºÅ */
    NET_DVR_IPADDR    struMulticastIpAddr;                    /* ¶à²¥×éµØÖ· */
    NET_DVR_IPADDR    struGatewayIpAddr;                        /* Íø¹ØµØÖ· */
    NET_DVR_PPPOECFG struPPPoE;    
    BYTE    byEnablePrivateMulticastDiscovery;  //Ë½ÓÐ¶à²¥ËÑË÷£¬0~Ä¬ÈÏ£¬1~ÆôÓÃ£¬2-½ûÓÃ
    BYTE    byEnableOnvifMulticastDiscovery;  //Onvif¶à²¥ËÑË÷£¬0~Ä¬ÈÏ£¬1~ÆôÓÃ£¬2-½ûÓÃ
    BYTE    byEnableDNS; //DNSÊ¹ÄÜ, 0-¹Ø±Õ£¬1-´ò¿ª
    BYTE    byRes[61];
} NET_DVR_NETCFG_V30, *LPNET_DVR_NETCFG_V30;

//¶àÍø¿¨ÅäÖÃÍø¿¨½á¹¹
typedef struct 
{
    NET_DVR_IPADDR struDVRIP;           //DVR IPµØÖ·
    NET_DVR_IPADDR struDVRIPMask;           //DVR IPµØÖ·ÑÚÂë
    DWORD dwNetInterface;    //ÍøÂç½Ó¿Ú1-10MBase-T 2-10MBase-TÈ«Ë«¹¤ 3-100MBase-TX 4-100MÈ«Ë«¹¤ 5-10M/100M/1000M×ÔÊÊÓ¦
    BYTE byCardType;  //Íø¿¨ÀàÐÍ£¬0-ÆÕÍ¨Íø¿¨£¬1-ÄÚÍøÍø¿¨£¬2-ÍâÍøÍø¿¨
    BYTE    byEnableDNS; //DNSÊ¹ÄÜ, 0-¹Ø±Õ£¬1-´ò¿ª
    WORD wMTU;             //Ôö¼ÓMTUÉèÖÃ£¬Ä¬ÈÏ1500¡£
    BYTE byMACAddr[MACADDR_LEN]; //ÎïÀíµØÖ·£¬Ö»ÓÃÓÚÏÔÊ¾
    BYTE byRes2[2]; //±£Áô
    BYTE byUseDhcp;                          /* ÊÇ·ñÆôÓÃDHCP */
    BYTE byRes3[3];
    NET_DVR_IPADDR struGatewayIpAddr;     /* Íø¹ØµØÖ· */
    NET_DVR_IPADDR struDnsServer1IpAddr; /* ÓòÃû·þÎñÆ÷1µÄIPµØÖ· */
    NET_DVR_IPADDR struDnsServer2IpAddr; /* ÓòÃû·þÎñÆ÷2µÄIPµØÖ· */
}NET_DVR_ETHERNET_MULTI, *LPNET_DVR_ETHERNET_MULTI;

//¶àÍø¿¨ÍøÂçÅäÖÃ½á¹¹
typedef struct
{
    DWORD  dwSize;
    BYTE   byDefaultRoute;        //Ä¬ÈÏÂ·ÓÉ£¬0±íÊ¾struEtherNet[0]£¬1±íÊ¾struEtherNet[1]
    BYTE   byNetworkCardNum;      //Éè±¸Êµ¼Ê¿ÉÅäÖÃµÄÍø¿¨ÊýÄ¿
    BYTE   byWorkMode;   //0-ÆÕÍ¨¶àÍø¿¨Ä£Ê½£¬1-ÄÚÍâÍø¸ôÀëÄ£Ê½
    BYTE   byRes; //±£Áô
    NET_DVR_ETHERNET_MULTI struEtherNet[MAX_NETWORK_CARD]; //ÒÔÌ«Íø¿Ú
    NET_DVR_IPADDR         struManageHost1IpAddr;     /* Ö÷¹ÜÀíÖ÷»úIPµØÖ· */
    NET_DVR_IPADDR         struManageHost2IpAddr;     /* ¸¨¹ÜÀíÖ÷»úIPµØÖ· */
    NET_DVR_IPADDR           struAlarmHostIpAddr; /* ±¨¾¯Ö÷»úIPµØÖ· */
    WORD wManageHost1Port;     /* Ö÷¹ÜÀíÖ÷»ú¶Ë¿ÚºÅ */
    WORD wManageHost2Port;     /* ¸¨¹ÜÀíÖ÷»ú¶Ë¿ÚºÅ */
    WORD wAlarmHostIpPort;     /* ±¨¾¯Ö÷»ú¶Ë¿ÚºÅ */
    BYTE  byIpResolver[MAX_DOMAIN_NAME];     /* IP½âÎö·þÎñÆ÷ÓòÃû»òIPµØÖ· */
    WORD wIpResolverPort; /* IP½âÎö·þÎñÆ÷¶Ë¿ÚºÅ */
    WORD wDvrPort; //Í¨Ñ¶¶Ë¿Ú Ä¬ÈÏ8000 
    WORD wHttpPortNo; /* HTTP¶Ë¿ÚºÅ */
    WORD wDvrPort2; //Í¨Ñ¶¶Ë¿Ú2
    BYTE byRes2[4];
    NET_DVR_IPADDR   struMulticastIpAddr; /* ¶à²¥×éµØÖ· */
    NET_DVR_PPPOECFG struPPPoE;
    BYTE byRes3[24];
}NET_DVR_NETCFG_MULTI, *LPNET_DVR_NETCFG_MULTI;

//ÍøÂçÅäÖÃ½á¹¹
typedef struct
{
    DWORD dwSize;
    NET_DVR_ETHERNET struEtherNet[MAX_ETHERNET];        /* ÒÔÌ«Íø¿Ú */
    char sManageHostIP[16];        //Ô¶³Ì¹ÜÀíÖ÷»úµØÖ·
    WORD wManageHostPort;        //Ô¶³Ì¹ÜÀíÖ÷»ú¶Ë¿ÚºÅ
    char sIPServerIP[16];            //IPServer·þÎñÆ÷µØÖ·
    char sMultiCastIP[16];     //¶à²¥×éµØÖ·
    char sGatewayIP[16];           //Íø¹ØµØÖ·
    char sNFSIP[16];            //NFSÖ÷»úIPµØÖ·
    BYTE sNFSDirectory[PATHNAME_LEN];//NFSÄ¿Â¼
    DWORD dwPPPOE;                //0-²»ÆôÓÃ,1-ÆôÓÃ
    BYTE sPPPoEUser[NAME_LEN];    //PPPoEÓÃ»§Ãû
    char sPPPoEPassword[PASSWD_LEN];// PPPoEÃÜÂë
    char sPPPoEIP[16];            //PPPoE IPµØÖ·(Ö»¶Á)
    WORD wHttpPort;                //HTTP¶Ë¿ÚºÅ
}NET_DVR_NETCFG, *LPNET_DVR_NETCFG;

//sipÅäÖÃ
typedef struct tagNET_DVR_SIP_CFG
{
    DWORD dwSize;
    BYTE byEnableAutoLogin;    //Ê¹ÄÜ×Ô¶¯×¢²á£¬0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE byLoginStatus;  //×¢²á×´Ì¬£¬0-Î´×¢²á£¬1-ÒÑ×¢²á£¬´Ë²ÎÊýÖ»ÄÜ»ñÈ¡
    BYTE byRes1[2];
    NET_DVR_IPADDR stuServerIP;  //SIP·þÎñÆ÷IP
    WORD wServerPort;    //SIP·þÎñÆ÷¶Ë¿Ú
    BYTE byRes2[2];
    BYTE byUserName[NAME_LEN];  //×¢²áÓÃ»§Ãû
    BYTE byPassWord[PASSWD_LEN]; //×¢²áÃÜÂë
    BYTE byLocalNo[MAX_NUMBER_LEN];
    BYTE byDispalyName[MAX_NAME_LEN]; //Éè±¸ÏÔÊ¾Ãû³Æ
    WORD wLocalPort;     //±¾µØ¶Ë¿Ú
    BYTE byLoginCycle;   //×¢²áÖÜÆÚ£¬1-99·ÖÖÓ
    BYTE byRes[129];
}NET_DVR_SIP_CFG, *LPNET_DVR_SIP_CFG;

//IP¿ÉÊÓ¶Ô½²·Ö»úÅäÖÃ
typedef struct tagNET_DVR_IP_VIEW_DEVCFG
{
    DWORD dwSize;
    BYTE  byDefaultRing; //Ä¬ÈÏÁåÒô£¬·¶Î§1-6
    BYTE  byRingVolume;  //ÁåÒôÒôÁ¿£¬·¶Î§0-9
    BYTE  byInputVolume; //ÊäÈëÒôÁ¿Öµ£¬·¶Î§0-6
    BYTE  byOutputVolume; //Êä³öÒôÁ¿Öµ£¬·¶Î§0-9    
    WORD  wRtpPort;  //Rtp¶Ë¿Ú
    BYTE  byRes1[2];
    DWORD dwPreviewDelayTime; //Ô¤ÀÀÑÓÊ±ÅäÖÃ£¬0-30Ãë
    BYTE  byRes2[64];
}NET_DVR_IP_VIEW_DEVCFG,*LPNET_DVR_IP_VIEW_DEVCFG;

//Ip¿ÉÊÓ¶Ô½²ÒôÆµÏà¹Ø²ÎÊýÅäÖÃ
typedef struct tagNET_DVR_IP_VIEW_AUDIO_CFG
{
    DWORD dwSize;    
    BYTE  byAudioEncPri1; //ÒôÆµ±àÂëÓÅÏÈ¼¶1£¬0-G722£¬1-G711_U£¬2-G711_A£¬ 5-MPEG2,6-G726£¬7-AAC
    BYTE  byAudioEncPri2; //ÒôÆµ±àÂëÓÅÏÈ¼¶2£¬µ±sip·þÎñÆ÷²»Ö§³ÖÒôÆµ±àÂë1Ê±»áÊ¹ÓÃÒôÆµ±àÂë2£¬0-G722£¬1-G711_U£¬2-G711_A£¬ 5-MPEG2,6-G726£¬7-AAC
    WORD  wAudioPacketLen1; //ÒôÆµ±àÂë1Êý¾Ý°ü³¤¶È
    WORD  wAudioPacketLen2; //ÒôÆµ±àÂë2Êý¾Ý°ü³¤¶È
    BYTE  byRes[30];
}NET_DVR_IP_VIEW_AUDIO_CFG,*LPNET_DVR_IP_VIEW_AUDIO_CFG;

//IP·Ö»úºô½Ð¶Ô½²²ÎÊýÅäÖÃ½á¹¹Ìå
typedef struct tagNET_DVR_IP_VIEW_CALL_CFG
{
    DWORD dwSize ;
    BYTE  byEnableAutoResponse; //Ê¹ÄÜ×Ô¶¯Ó¦´ð,0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE  byAudoResponseTime; //×Ô¶¯Ó¦´ðÊ±¼ä£¬0-30Ãë
    BYTE  byRes1[2];
    BYTE  byEnableAlarmNumber1; //Æô¶¯±¨¾¯ºÅÂë1£¬0-²»Æô¶¯£¬1-Æô¶¯
    BYTE  byRes2[3];
    BYTE  byAlarmNumber1[MAX_NUMBER_LEN]; //ºô½ÐºÅÂë1
    BYTE  byEnableAlarmNumber2; //Æô¶¯±¨¾¯ºÅÂë2£¬0-²»Æô¶¯£¬1-Æô¶¯
    BYTE  byRes3[3];
    BYTE  byAlarmNumber2[MAX_NUMBER_LEN]; //ºô½ÐºÅÂë2£¬ºô½ÐºÅÂë1Ê§°Ü»á³¢ÊÔºô½ÐºÅÂë2
    BYTE  byRes4[72];
}NET_DVR_IP_VIEW_CALL_CFG,*LPNET_DVR_IP_VIEW_CALL_CFG;

//Í¨µÀÍ¼Ïó½á¹¹
//ÒÆ¶¯Õì²â(×Ó½á¹¹)(°´×é·½Ê½À©Õ¹)
typedef struct
{    
    DWORD     dwMaxRecordChanNum;   //Éè±¸Ö§³ÖµÄ×î´ó¹ØÁªÂ¼ÏñÍ¨µÀÊý-Ö»¶Á
    DWORD     dwCurRecordChanNum;    //µ±Ç°Êµ¼ÊÒÑÅäÖÃµÄ¹ØÁªÂ¼ÏñÍ¨µÀÊý
    DWORD     dwRelRecordChan[MAX_CHANNUM_V30];     /* Êµ¼Ê´¥·¢Â¼ÏñÍ¨µÀ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬´ÓÏÂ±ê0 - MAX_CHANNUM_V30-1ÓÐÐ§£¬Èç¹ûÖÐ¼äÓöµ½0xffffffff,ÔòºóÐøÎÞÐ§*/  
    BYTE       byRes[64];          //±£Áô
}NET_DVR_RECORDCHAN, *LPNET_DVR_RECORDCHAN;

//ÒÆ¶¯Õì²â(×Ó½á¹¹)(9000À©Õ¹)
typedef struct 
{
    BYTE byMotionScope[64][96];                                    /*Õì²âÇøÓò,0-96Î»,±íÊ¾64ÐÐ,¹²ÓÐ96*64¸öÐ¡ºê¿é,Îª1±íÊ¾ÊÇÒÆ¶¯Õì²âÇøÓò,0-±íÊ¾²»ÊÇ*/
    BYTE byMotionSensitive;                                        /*ÒÆ¶¯Õì²âÁéÃô¶È, 0 - 5,Ô½¸ßÔ½ÁéÃô,oxff¹Ø±Õ*/
    BYTE byEnableHandleMotion;                                    /* ÊÇ·ñ´¦ÀíÒÆ¶¯Õì²â 0£­·ñ 1£­ÊÇ*/ 
    BYTE byEnableDisplay;    /*ÆôÓÃÒÆ¶¯Õì²â¸ßÁÁÏÔÊ¾£¬0-·ñ£¬1-ÊÇ*/
    char reservedData;    
    NET_DVR_HANDLEEXCEPTION_V30 struMotionHandleType;                /* ´¦Àí·½Ê½ */
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30]; /*²¼·ÀÊ±¼ä*/
    BYTE byRelRecordChan[MAX_CHANNUM_V30];                                    /* ±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ*/
}NET_DVR_MOTION_V30, *LPNET_DVR_MOTION_V30;

//ÒÆ¶¯Õì²â(×Ó½á¹¹)
typedef struct 
{
    BYTE byMotionScope[18][22];    /*Õì²âÇøÓò,¹²ÓÐ22*18¸öÐ¡ºê¿é,Îª1±íÊ¾¸Äºê¿éÊÇÒÆ¶¯Õì²âÇøÓò,0-±íÊ¾²»ÊÇ*/
    BYTE byMotionSensitive;        /*ÒÆ¶¯Õì²âÁéÃô¶È, 0 - 5,Ô½¸ßÔ½ÁéÃô,0xff¹Ø±Õ*/
    BYTE byEnableHandleMotion;    /* ÊÇ·ñ´¦ÀíÒÆ¶¯Õì²â */
    BYTE byEnableDisplay;    /*ÆôÓÃÒÆ¶¯Õì²â¸ßÁÁÏÔÊ¾£¬0-·ñ£¬1-ÊÇ*/
    char reservedData;
    NET_DVR_HANDLEEXCEPTION strMotionHandleType;    /* ´¦Àí·½Ê½ */
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT];//²¼·ÀÊ±¼ä
    BYTE byRelRecordChan[MAX_CHANNUM]; //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
}NET_DVR_MOTION, *LPNET_DVR_MOTION;

//ÕÚµ²±¨¾¯(×Ó½á¹¹)(9000À©Õ¹)  ÇøÓò´óÐ¡704*576
typedef struct 
{
    DWORD dwEnableHideAlarm;                /* ÊÇ·ñÆô¶¯ÕÚµ²±¨¾¯ ,0-·ñ,1-µÍÁéÃô¶È 2-ÖÐÁéÃô¶È 3-¸ßÁéÃô¶È*/
    WORD wHideAlarmAreaTopLeftX;            /* ÕÚµ²ÇøÓòµÄx×ø±ê */
    WORD wHideAlarmAreaTopLeftY;            /* ÕÚµ²ÇøÓòµÄy×ø±ê */
    WORD wHideAlarmAreaWidth;                /* ÕÚµ²ÇøÓòµÄ¿í */
    WORD wHideAlarmAreaHeight;                /*ÕÚµ²ÇøÓòµÄ¸ß*/
    NET_DVR_HANDLEEXCEPTION_V30 strHideAlarmHandleType;    /* ´¦Àí·½Ê½ */
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//²¼·ÀÊ±¼ä
}NET_DVR_HIDEALARM_V30, *LPNET_DVR_HIDEALARM_V30;
//ÕÚµ²±¨¾¯(×Ó½á¹¹)  ÇøÓò´óÐ¡704*576
typedef struct 
{
    DWORD dwEnableHideAlarm;                /* ÊÇ·ñÆô¶¯ÕÚµ²±¨¾¯ ,0-·ñ,1-µÍÁéÃô¶È 2-ÖÐÁéÃô¶È 3-¸ßÁéÃô¶È*/
    WORD wHideAlarmAreaTopLeftX;            /* ÕÚµ²ÇøÓòµÄx×ø±ê */
    WORD wHideAlarmAreaTopLeftY;            /* ÕÚµ²ÇøÓòµÄy×ø±ê */
    WORD wHideAlarmAreaWidth;                /* ÕÚµ²ÇøÓòµÄ¿í */
    WORD wHideAlarmAreaHeight;                /*ÕÚµ²ÇøÓòµÄ¸ß*/
    NET_DVR_HANDLEEXCEPTION strHideAlarmHandleType;    /* ´¦Àí·½Ê½ */
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT];//²¼·ÀÊ±¼ä
}NET_DVR_HIDEALARM, *LPNET_DVR_HIDEALARM;

//ÐÅºÅ¶ªÊ§±¨¾¯(×Ó½á¹¹)(9000À©Õ¹)
typedef struct 
{
    BYTE byEnableHandleVILost;    /* ÊÇ·ñ´¦ÀíÐÅºÅ¶ªÊ§±¨¾¯ */
    NET_DVR_HANDLEEXCEPTION_V30 strVILostHandleType;    /* ´¦Àí·½Ê½ */
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//²¼·ÀÊ±¼ä
}NET_DVR_VILOST_V30, *LPNET_DVR_VILOST_V30;

//ÐÅºÅ¶ªÊ§±¨¾¯(×Ó½á¹¹)
typedef struct 
{
    BYTE byEnableHandleVILost;    /* ÊÇ·ñ´¦ÀíÐÅºÅ¶ªÊ§±¨¾¯ */
    NET_DVR_HANDLEEXCEPTION strVILostHandleType;    /* ´¦Àí·½Ê½ */
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT];//²¼·ÀÊ±¼ä
}NET_DVR_VILOST, *LPNET_DVR_VILOST;

//ÕÚµ²ÇøÓò(×Ó½á¹¹)
typedef struct 
{
    WORD wHideAreaTopLeftX;                /* ÕÚµ²ÇøÓòµÄx×ø±ê */
    WORD wHideAreaTopLeftY;                /* ÕÚµ²ÇøÓòµÄy×ø±ê */
    WORD wHideAreaWidth;                /* ÕÚµ²ÇøÓòµÄ¿í */
    WORD wHideAreaHeight;                /*ÕÚµ²ÇøÓòµÄ¸ß*/
}NET_DVR_SHELTER, *LPNET_DVR_SHELTER;

typedef struct
{
    BYTE byBrightness;      /*ÁÁ¶È,0-255*/
    BYTE byContrast;        /*¶Ô±È¶È,0-255*/    
    BYTE bySaturation;      /*±¥ºÍ¶È,0-255*/
    BYTE byHue;                /*É«µ÷,0-255*/
}NET_DVR_COLOR, *LPNET_DVR_COLOR;

typedef struct
{
    BYTE byRed;        //RGBÑÕÉ«Èý·ÖÁ¿ÖÐµÄºìÉ«
    BYTE byGreen;    //RGBÑÕÉ«Èý·ÖÁ¿ÖÐµÄÂÌÉ«
    BYTE byBlue;    //RGBÑÕÉ«Èý·ÖÁ¿ÖÐµÄÀ¶É«
    BYTE byRes;        //±£Áô
}NET_DVR_RGB_COLOR, *LPNET_DVR_RGB_COLOR;

//×ø±êÖµ¹éÒ»»¯,¸¡µãÊýÖµÎªµ±Ç°»­ÃæµÄ°Ù·Ö±È´óÐ¡, ¾«¶ÈÎªÐ¡ÊýµãºóÈýÎ»
//µã×ø±ê½á¹¹
typedef struct tagNET_VCA_POINT
{    
    float fX;                                // XÖá×ø±ê, 0.001~1
    float fY;                                //YÖá×ø±ê, 0.001~1
}NET_VCA_POINT, *LPNET_VCA_POINT;

//Í¨µÀÍ¼Ïó½á¹¹(9000À©Õ¹)
typedef struct
{
    DWORD dwSize;
    BYTE  sChanName[NAME_LEN];
    DWORD dwVideoFormat;    /* Ö»¶Á ÊÓÆµÖÆÊ½ 1-NTSC 2-PAL*/
    BYTE  byReservedData[64];/*±£Áô*/
    DWORD dwShowChanName; // Ô¤ÀÀµÄÍ¼ÏóÉÏÊÇ·ñÏÔÊ¾Í¨µÀÃû³Æ,0-²»ÏÔÊ¾,1-ÏÔÊ¾ ÇøÓò´óÐ¡704*576
    WORD wShowNameTopLeftX;                /* Í¨µÀÃû³ÆÏÔÊ¾Î»ÖÃµÄx×ø±ê */
    WORD wShowNameTopLeftY;                /* Í¨µÀÃû³ÆÏÔÊ¾Î»ÖÃµÄy×ø±ê */
    //ÊÓÆµÐÅºÅ¶ªÊ§±¨¾¯
    NET_DVR_VILOST_V30 struVILost;
    NET_DVR_VILOST_V30 struRes;        /*±£Áô*/
    //    BYTE byRes1[328];
    //ÒÆ¶¯Õì²â
    NET_DVR_MOTION_V30 struMotion;
    //ÕÚµ²±¨¾¯
    NET_DVR_HIDEALARM_V30 struHideAlarm;
    //ÕÚµ²  ÇøÓò´óÐ¡704*576
    DWORD dwEnableHide;        /* ÊÇ·ñÆô¶¯ÕÚµ² ,0-·ñ,1-ÊÇ*/
    NET_DVR_SHELTER struShelter[MAX_SHELTERNUM];
    //OSD
    DWORD dwShowOsd;// Ô¤ÀÀµÄÍ¼ÏóÉÏÊÇ·ñÏÔÊ¾OSD,0-²»ÏÔÊ¾,1-ÏÔÊ¾ ÇøÓò´óÐ¡704*576
    WORD wOSDTopLeftX;                /* OSDµÄx×ø±ê */
    WORD wOSDTopLeftY;                /* OSDµÄy×ø±ê */
    BYTE byOSDType;                    /* OSDÀàÐÍ(Ö÷ÒªÊÇÄêÔÂÈÕ¸ñÊ½) */
    /* 0: XXXX-XX-XX ÄêÔÂÈÕ */
    /* 1: XX-XX-XXXX ÔÂÈÕÄê */
    /* 2: XXXXÄêXXÔÂXXÈÕ */
    /* 3: XXÔÂXXÈÕXXXXÄê */
    /* 4: XX-XX-XXXX ÈÕÔÂÄê*/
    /* 5: XXÈÕXXÔÂXXXXÄê */
    /*6: xx/xx/xxxx(ÔÂ/ÈÕ/Äê) */
    /*7: xxxx/xx/xx(Äê/ÔÂ/ÈÕ) */
    /*8: xx/xx/xxxx(ÈÕ/ÔÂ/Äê)*/
    BYTE byDispWeek;                /* ÊÇ·ñÏÔÊ¾ÐÇÆÚ */
    BYTE byOSDAttrib;                /* OSDÊôÐÔ:Í¸Ã÷£¬ÉÁË¸ */
    /* 1: Í¸Ã÷,ÉÁË¸ */
    /* 2: Í¸Ã÷,²»ÉÁË¸ */
    /* 3: ÉÁË¸,²»Í¸Ã÷ */
    /* 4: ²»Í¸Ã÷,²»ÉÁË¸ */
    BYTE byHourOSDType;                /* OSDÐ¡Ê±ÖÆ:0-24Ð¡Ê±ÖÆ,1-12Ð¡Ê±ÖÆ */
    BYTE byFontSize;//×ÖÌå´óÐ¡£¬16*16(ÖÐ)/8*16(Ó¢)£¬1-32*32(ÖÐ)/16*32(Ó¢)£¬2-64*64(ÖÐ)/32*64(Ó¢)  3-48*48(ÖÐ)/24*48(Ó¢) 4-24*24(ÖÐ)/12*24(Ó¢) 5-96*96(ÖÐ)/48*96(Ó¢) 6-128*128(ÖÐ)/64*128(Ó¢) 0xff-×ÔÊÊÓ¦(adaptive)
    BYTE byOSDColorType;    //0-Ä¬ÈÏ£¨ºÚ°×£©£»1-×Ô¶¨Òå
    BYTE byAlignment;//¶ÔÆë·½Ê½ 0-×ÔÊÊÓ¦£¬1-ÓÒ¶ÔÆë, 2-×ó¶ÔÆë
    BYTE byOSDMilliSecondEnable;//ÊÓÆµµþ¼ÓÊ±¼äÖ§³ÖºÁÃë£»0~²»µþ¼Ó, 1-µþ¼Ó
    NET_DVR_RGB_COLOR struOsdColor;//OSDÑÕÉ«
    BYTE byRes[56];
}NET_DVR_PICCFG_V30, *LPNET_DVR_PICCFG_V30;

//Í¨µÀÍ¼Ïó½á¹¹SDK_V14À©Õ¹
typedef struct 
{
    DWORD dwSize;
    BYTE sChanName[NAME_LEN];
    DWORD dwVideoFormat;    /* Ö»¶Á ÊÓÆµÖÆÊ½ 1-NTSC 2-PAL*/
    BYTE byBrightness;      /*ÁÁ¶È,0-255*/
    BYTE byContrast;        /*¶Ô±È¶È,0-255*/    
    BYTE bySaturation;      /*±¥ºÍ¶È,0-255 */
    BYTE byHue;                /*É«µ÷,0-255*/
    //ÏÔÊ¾Í¨µÀÃû
    DWORD dwShowChanName; // Ô¤ÀÀµÄÍ¼ÏóÉÏÊÇ·ñÏÔÊ¾Í¨µÀÃû³Æ,0-²»ÏÔÊ¾,1-ÏÔÊ¾ ÇøÓò´óÐ¡704*576
    WORD wShowNameTopLeftX;                /* Í¨µÀÃû³ÆÏÔÊ¾Î»ÖÃµÄx×ø±ê */
    WORD wShowNameTopLeftY;                /* Í¨µÀÃû³ÆÏÔÊ¾Î»ÖÃµÄy×ø±ê */
    //ÐÅºÅ¶ªÊ§±¨¾¯
    NET_DVR_VILOST struVILost;
    //ÒÆ¶¯Õì²â
    NET_DVR_MOTION struMotion;
    //ÕÚµ²±¨¾¯
    NET_DVR_HIDEALARM struHideAlarm;
    //ÕÚµ²  ÇøÓò´óÐ¡704*576
    DWORD dwEnableHide;        /* ÊÇ·ñÆô¶¯ÕÚµ² ,0-·ñ,1-ÊÇ*/
    NET_DVR_SHELTER struShelter[MAX_SHELTERNUM];
    //OSD
    DWORD dwShowOsd;// Ô¤ÀÀµÄÍ¼ÏóÉÏÊÇ·ñÏÔÊ¾OSD,0-²»ÏÔÊ¾,1-ÏÔÊ¾ ÇøÓò´óÐ¡704*576
    WORD wOSDTopLeftX;                /* OSDµÄx×ø±ê */
    WORD wOSDTopLeftY;                /* OSDµÄy×ø±ê */
    BYTE byOSDType;                    /* OSDÀàÐÍ(Ö÷ÒªÊÇÄêÔÂÈÕ¸ñÊ½) */
    /* 0: XXXX-XX-XX ÄêÔÂÈÕ */
    /* 1: XX-XX-XXXX ÔÂÈÕÄê */
    /* 2: XXXXÄêXXÔÂXXÈÕ */
    /* 3: XXÔÂXXÈÕXXXXÄê */
    /* 4: XX-XX-XXXX ÈÕÔÂÄê*/
    /* 5: XXÈÕXXÔÂXXXXÄê */
    /*6: xx/xx/xxxx(ÔÂ/ÈÕ/Äê) */
    /*7: xxxx/xx/xx(Äê/ÔÂ/ÈÕ) */
    /*8: xx/xx/xxxx(ÈÕ/ÔÂ/Äê)*/
    BYTE byDispWeek;                /* ÊÇ·ñÏÔÊ¾ÐÇÆÚ */
    BYTE byOSDAttrib;                /* OSDÊôÐÔ:Í¸Ã÷£¬ÉÁË¸ */
    /* 1: Í¸Ã÷,ÉÁË¸ */
    /* 2: Í¸Ã÷,²»ÉÁË¸ */
    /* 3: ÉÁË¸,²»Í¸Ã÷ */
    /* 4: ²»Í¸Ã÷,²»ÉÁË¸ */
    BYTE byHourOsdType;        /* OSDÐ¡Ê±ÖÆ:0-24Ð¡Ê±ÖÆ,1-12Ð¡Ê±ÖÆ */
}NET_DVR_PICCFG_EX, *LPNET_DVR_PICCFG_EX;

//Í¨µÀÍ¼Ïó½á¹¹(SDK_V13¼°Ö®Ç°°æ±¾)
typedef struct 
{
    DWORD dwSize;
    BYTE sChanName[NAME_LEN];
    DWORD dwVideoFormat;    /* Ö»¶Á ÊÓÆµÖÆÊ½ 1-NTSC 2-PAL*/
    BYTE byBrightness;      /*ÁÁ¶È,0-255*/
    BYTE byContrast;        /*¶Ô±È¶È,0-255*/    
    BYTE bySaturation;      /*±¥ºÍ¶È,0-255 */
    BYTE byHue;                /*É«µ÷,0-255*/
    //ÏÔÊ¾Í¨µÀÃû
    DWORD dwShowChanName; // Ô¤ÀÀµÄÍ¼ÏóÉÏÊÇ·ñÏÔÊ¾Í¨µÀÃû³Æ,0-²»ÏÔÊ¾,1-ÏÔÊ¾ ÇøÓò´óÐ¡704*576
    WORD wShowNameTopLeftX;                /* Í¨µÀÃû³ÆÏÔÊ¾Î»ÖÃµÄx×ø±ê */
    WORD wShowNameTopLeftY;                /* Í¨µÀÃû³ÆÏÔÊ¾Î»ÖÃµÄy×ø±ê */
    //ÐÅºÅ¶ªÊ§±¨¾¯
    NET_DVR_VILOST struVILost;
    //ÒÆ¶¯Õì²â
    NET_DVR_MOTION struMotion;
    //ÕÚµ²±¨¾¯
    NET_DVR_HIDEALARM struHideAlarm;
    //ÕÚµ²  ÇøÓò´óÐ¡704*576
    DWORD dwEnableHide;        /* ÊÇ·ñÆô¶¯ÕÚµ² ,0-·ñ,1-ÊÇ*/
    WORD wHideAreaTopLeftX;                /* ÕÚµ²ÇøÓòµÄx×ø±ê */
    WORD wHideAreaTopLeftY;                /* ÕÚµ²ÇøÓòµÄy×ø±ê */
    WORD wHideAreaWidth;                /* ÕÚµ²ÇøÓòµÄ¿í */
    WORD wHideAreaHeight;                /*ÕÚµ²ÇøÓòµÄ¸ß*/
    //OSD
    DWORD dwShowOsd;// Ô¤ÀÀµÄÍ¼ÏóÉÏÊÇ·ñÏÔÊ¾OSD,0-²»ÏÔÊ¾,1-ÏÔÊ¾ ÇøÓò´óÐ¡704*576
    WORD wOSDTopLeftX;                /* OSDµÄx×ø±ê */
    WORD wOSDTopLeftY;                /* OSDµÄy×ø±ê */
    BYTE byOSDType;                    /* OSDÀàÐÍ(Ö÷ÒªÊÇÄêÔÂÈÕ¸ñÊ½) */
    /* 0: XXXX-XX-XX ÄêÔÂÈÕ */
    /* 1: XX-XX-XXXX ÔÂÈÕÄê */
    /* 2: XXXXÄêXXÔÂXXÈÕ */
    /* 3: XXÔÂXXÈÕXXXXÄê */
    /* 4: XX-XX-XXXX ÈÕÔÂÄê*/
    /* 5: XXÈÕXXÔÂXXXXÄê */
    /*6: xx/xx/xxxx(ÔÂ/ÈÕ/Äê) */
    /*7: xxxx/xx/xx(Äê/ÔÂ/ÈÕ) */
    /*8: xx/xx/xxxx(ÈÕ/ÔÂ/Äê)*/
    BYTE byDispWeek;                /* ÊÇ·ñÏÔÊ¾ÐÇÆÚ */
    BYTE byOSDAttrib;                /* OSDÊôÐÔ:Í¸Ã÷£¬ÉÁË¸ */
    /* 1: Í¸Ã÷,ÉÁË¸ */
    /* 2: Í¸Ã÷,²»ÉÁË¸ */
    /* 3: ÉÁË¸,²»Í¸Ã÷ */
    /* 4: ²»Í¸Ã÷,²»ÉÁË¸ */
    char reservedData2;
}NET_DVR_PICCFG, *LPNET_DVR_PICCFG;

typedef enum _BITRATE_ENCODE_INDEX_
{
    BITRATE_ENCODE_def = 0,
        BITRATE_ENCODE_8kps = 1,
        BITRATE_ENCODE_16kps = 2,
        BITRATE_ENCODE_32kps = 3,
        BITRATE_ENCODE_64kps = 4,
        BITRATE_ENCODE_128kps = 5,
        BITRATE_ENCODE_192kps = 6,
        BITRATE_ENCODE_40kps = 7,
        BITRATE_ENCODE_48kps = 8,
        BITRATE_ENCODE_56kps = 9,
        BITRATE_ENCODE_80kps = 10,
        BITRATE_ENCODE_96kps = 11,
        BITRATE_ENCODE_112kps = 12,
        BITRATE_ENCODE_144kps = 13,
        BITRATE_ENCODE_160kps = 14
}BITRATE_ENCODE_INDEX;

//ÂëÁ÷Ñ¹Ëõ²ÎÊý(×Ó½á¹¹)(9000À©Õ¹)
typedef struct 
{
    BYTE byStreamType;        //ÂëÁ÷ÀàÐÍ 0-ÊÓÆµÁ÷, 1-¸´ºÏÁ÷, ±íÊ¾ÊÂ¼þÑ¹Ëõ²ÎÊýÊ±×î¸ßÎ»±íÊ¾ÊÇ·ñÆôÓÃÑ¹Ëõ²ÎÊý
                            /*·Ö±æÂÊ0-DCIF                      1-CIF,                     2-QCIF,                 3-4CIF,             
                            4-2CIF                      5£¨±£Áô£©,                 6-QVGA(320*240),        7-QQVGA(160*120),  
                            12-384*288                  13-576*576,                   
                            16-VGA£¨640*480£©,          17-UXGA£¨1600*1200£©,      18-SVGA(800*600),       19-HD720p(1280*720£©,   
                            20-XVGA,                    21-HD900p,                 22-1360*1024,           23-1536*1536,              
                            24-1920*1920,               27-HD1080i,                   
                            28-2560*1920,               29-1600*304,               30-2048*1536,           31-2448*2048,                
                            32-2448*1200,               33-2448*800,               34-XGA£¨1024*768£©£¬    35-SXGA£¨1280*1024£©,         
                            36-WD1(960*576/960*480),    37-1080i,                  38-WSXGA(1440*900),     39-HD_F(1920*1080/1280*720),  
                            40-HD_H(1920*540/1280*360), 41-HD_Q(960*540/630*360),  42-2336*1744,           43-1920*1456,                 
                            44-2592*2048,               45-3296*2472,              46-1376*768,            47-1366*768,                 
                            48-1360*768,                49-WSXGA+,                 50-720*720,             51-1280*1280,                 
                            52-2048*768,                53-2048*2048,              54-2560*2048,           55-3072*2048,
                            56-2304*1296                57-WXGA(1280*800),         58-1600*600,               59-1600*900,
                            60-2752*2208,                61-±£Áô,                   62-4000*3000,           63-4096*2160,
                            64-3840*2160,                65-4000*2250,              66-3072*1728,           67-2592*1944,
                            68-2464*1520,               69-1280*1920,              70-2560*1440,           71-1024*1024,
                            72-160*128,                 73-324*240,                74-324*256,             75-336*256,             
                            76-640*512,                 77-2720*2048,              78-384*256,             79-384*216, 
                            80-320*256,                 81-320*180,                82-320*192,             83-512*384,
                            84-325*256,                 85-256*192,                86-640*360,               87-1776x1340,
                            88-1936x1092,                89-2080x784,               90-2144x604,            91-1920*1200,
                            92-4064*3040,               93-3040*3040,              94-3072*2304,           95-3072*1152,
                            96-2560*2560,               97-2688*1536,              98-2688*1520,           99-3072*3072,
                            100-3392*2008,              101-4000*3080,             102-960*720,            103-1024*1536,
                            104-704*1056,               105-352*528,               106-2048*1530,          107-2560*1600,
                            108-2800*2100,              109-4088*4088,             110-4000*3072,           111-960*1080(1080p Lite)
                            112-640*720(half 720p),     113-640*960,               114-320*480,             115-3840*2400,
                            116-3840*1680,              117-2560*1120,             118-704*320,             119-1200*1920,
                            120-480*768,                121-768*480,               122-320*512,             123-512*320,
                            124-4096*1800,              125-1280*560,              126-2400*3840,          127-480*272,
                            128-512*272,                129-2592*2592,             130-1792*2880,          131-1600*2560,
                            132-2720*1192,              133-3MP(1920*1536/2048*1536)£¬                     134-5MP(2560*1944)£¬
                            135-2560*960,               136-2064*1544              137-4096*1200,
                            138-3840*1080               139-2720*800               140-512*232             141-704*200,
                            142-512*152,                143-2048*900               144-2048*600            145-1280*376,
                            146-2592*1520,              147-2592*1536
                            0xff-Auto(Ê¹ÓÃµ±Ç°ÂëÁ÷·Ö±æÂÊ)
    */
    BYTE byResolution;      
    BYTE byBitrateType;        //ÂëÂÊÀàÐÍ 0:±äÂëÂÊ, 1:¶¨ÂëÂÊ,0xfe:×Ô¶¯£¬ºÍÔ´Ò»ÖÂ
    BYTE byPicQuality;        //Í¼ÏóÖÊÁ¿ 0-×îºÃ 1-´ÎºÃ 2-½ÏºÃ 3-Ò»°ã 4-½Ï²î 5-²î,×Ô¶¯£¬ºÍÔ´Ò»ÖÂ
                            /*ÊÓÆµÂëÂÊ:0-±£Áô£¬1-16K(±£Áô)£¬2-32K£¬3-48k£¬4-64K£¬5-80K£¬6-96K£¬7-128K£¬8-160k£¬9-192K£¬10-224K£¬
                            11-256K£¬12-320K£¬13-384K£¬14-448K£¬15-512K£¬16-640K£¬17-768K£¬18-896K£¬19-1024K£¬20-1280K£¬21-1536K£¬22-1792K£¬23-2048K£¬
    24-3072K£¬25-4096K£¬26-8192K£¬27-16384K¡£×î¸ßÎ»(31Î»)ÖÃ³É1±íÊ¾ÊÇ×Ô¶¨ÒåÂëÁ÷£¬0¡«30Î»±íÊ¾ÂëÁ÷Öµ£¬×îÐ¡Öµ16k,0xfffffffe£¬×Ô¶¯£¬ºÍÔ´Ò»ÖÂ*/
    DWORD dwVideoBitrate;      
    DWORD dwVideoFrameRate;    //Ö¡ÂÊ 0-È«²¿; 1-1/16; 2-1/8; 3-1/4; 4-1/2; 5-1; 6-2; 7-4; 8-6; 9-8; 10-10; 11-12; 12-16; 13-20; V2.0°æ±¾ÖÐÐÂ¼Ó14-15; 15-18; 16-22;
    //17-25£»18-30£»19-35£»20-40£»21-45£»22-50£»23-55£»24-60£»25-3;26-5;27-7;28-9;29-100; 30-120;31-24;32-48,0xfffffffe-×Ô¶¯£¬ºÍÔ´Ò»ÖÂ
    WORD  wIntervalFrameI;  //IÖ¡¼ä¸ô,0xfffe ×Ô¶¯£¬ºÍÔ´Ò»ÖÂ
    BYTE  byIntervalBPFrame;//0-BBPÖ¡; 1-BPÖ¡; 2-µ¥PÖ¡(2006-08-11 Ôö¼Óµ¥PÖ¡µÄÅäÖÃ½Ó¿Ú£¬¿ÉÒÔ¸ÄÉÆÊµÊ±Á÷ÑÓÊ±ÎÊÌâ)£»0xfe-×Ô¶¯£¬ºÍÔ´Ò»ÖÂ
    BYTE  byres1;        //±£Áô
    BYTE  byVideoEncType;   //ÊÓÆµ±àÂëÀàÐÍ 0-Ë½ÓÐ264£¬1-±ê×¼h264£¬2-±ê×¼mpeg4£¬7-M-JPEG£¬8-MPEG2£¬9-SVAC, 10-±ê×¼h265, 0xfe-×Ô¶¯£¨ºÍÔ´Ò»ÖÂ£©£¬0xff-ÎÞÐ§ 
    BYTE  byAudioEncType;   //ÒôÆµ±àÂëÀàÐÍ 0-G722;1-G711_U;2-G711_A;5-MP2L2;6-G276;7-AAC;8-PCM;0xff-ÎÞÐ§
    BYTE  byVideoEncComplexity; //ÊÓÆµ±àÂë¸´ÔÓ¶È£¬0-µÍ£¬1-ÖÐ£¬2¸ß,0xfe:×Ô¶¯£¬ºÍÔ´Ò»ÖÂ
    BYTE  byEnableSvc; //0 - ²»ÆôÓÃSVC¹¦ÄÜ£»1- ÆôÓÃSVC¹¦ÄÜ; 2-×Ô¶¯ÆôÓÃSVC¹¦ÄÜ
    BYTE  byFormatType; //·â×°ÀàÐÍ£¬1-ÂãÁ÷£¬2-RTP·â×°£¬3-PS·â×°£¬4-TS·â×°£¬5-Ë½ÓÐ£¬6-FLV£¬7-ASF£¬8-3GP,9-RTP+PS£¨¹ú±ê£ºGB28181£©£¬0xff-ÎÞÐ§
    BYTE  byAudioBitRate; //ÒôÆµÂëÂÊ ²Î¿¼ BITRATE_ENCODE_INDEX
    BYTE  byStreamSmooth;//ÂëÁ÷Æ½»¬ 1¡«100£¨1µÈ¼¶±íÊ¾ÇåÎú(Clear)£¬100±íÊ¾Æ½»¬(Smooth)£©
    BYTE  byAudioSamplingRate;//ÒôÆµ²ÉÑùÂÊ0-Ä¬ÈÏ,1- 16kHZ, 2-32kHZ, 3-48kHZ, 4- 44.1kHZ,5-8kHZ
    BYTE  bySmartCodec;//¸ßÐÔÄÜ±àÂë 0-¹Ø±Õ£¬1-´ò¿ª
    BYTE  byres;
    //Æ½¾ùÂëÂÊ£¨ÔÚSmartCodecÊ¹ÄÜ¿ªÆôÏÂÉúÐ§£©, 0-0K 1-16K 2-32K 3-48k 4-64K 5-80K 6-96K 7-128K 8-160k 9-192K 10-224K 11-256K 12-320K 13-384K 14-448K 15-512K 16-640K 17-768K 18-896K 19-1024K 20-1280K 21-1536K 22-1792K 23-2048K 24-2560K 25-3072K 26-4096K 27-5120K 28-6144K 29-7168K 30-8192K
    //×î¸ßÎ»(15Î»)ÖÃ³É1±íÊ¾ÊÇ×Ô¶¨ÒåÂëÁ÷, 0-14Î»±íÊ¾ÂëÁ÷Öµ(MIN- 0 K)¡£
    WORD  wAverageVideoBitrate; 
}NET_DVR_COMPRESSION_INFO_V30, *LPNET_DVR_COMPRESSION_INFO_V30;

//Í¨µÀÑ¹Ëõ²ÎÊý(9000À©Õ¹)
typedef struct
{
    DWORD dwSize;
    NET_DVR_COMPRESSION_INFO_V30 struNormHighRecordPara;    //Â¼Ïñ ¶ÔÓ¦8000µÄÆÕÍ¨
    NET_DVR_COMPRESSION_INFO_V30 struRes;//±£Áô char reserveData[28];
    NET_DVR_COMPRESSION_INFO_V30 struEventRecordPara;       //ÊÂ¼þ´¥·¢Ñ¹Ëõ²ÎÊý
    NET_DVR_COMPRESSION_INFO_V30 struNetPara;               //Íø´«(×ÓÂëÁ÷)
}NET_DVR_COMPRESSIONCFG_V30, *LPNET_DVR_COMPRESSIONCFG_V30;

//ÂëÁ÷Ñ¹Ëõ²ÎÊý(×Ó½á¹¹)
typedef struct 
{
    BYTE byStreamType;        //ÂëÁ÷ÀàÐÍ0-ÊÓÆµÁ÷,1-¸´ºÏÁ÷,±íÊ¾Ñ¹Ëõ²ÎÊýÊ±×î¸ßÎ»±íÊ¾ÊÇ·ñÆôÓÃÑ¹Ëõ²ÎÊý
    BYTE byResolution;      //·Ö±æÂÊ0-DCIF 1-CIF, 2-QCIF, 3-4CIF, 4-2CIF, 5-2QCIF(352X144)(³µÔØ×¨ÓÃ)
    BYTE byBitrateType;        //ÂëÂÊÀàÐÍ0:±äÂëÂÊ£¬1:¶¨ÂëÂÊ
    BYTE  byPicQuality;        //Í¼ÏóÖÊÁ¿ 0-×îºÃ 1-´ÎºÃ 2-½ÏºÃ 3-Ò»°ã 4-½Ï²î 5-²î
    DWORD dwVideoBitrate;     //ÊÓÆµÂëÂÊ 0-±£Áô 1-16K(±£Áô) 2-32K 3-48k 4-64K 5-80K 6-96K 7-128K 8-160k 9-192K 10-224K 11-256K 12-320K
    // 13-384K 14-448K 15-512K 16-640K 17-768K 18-896K 19-1024K 20-1280K 21-1536K 22-1792K 23-2048K
    //×î¸ßÎ»(31Î»)ÖÃ³É1±íÊ¾ÊÇ×Ô¶¨ÒåÂëÁ÷, 0-30Î»±íÊ¾ÂëÁ÷Öµ(MIN-32K MAX-8192K)¡£
    DWORD dwVideoFrameRate;    //Ö¡ÂÊ 0-È«²¿; 1-1/16; 2-1/8; 3-1/4; 4-1/2; 5-1; 6-2; 7-4; 8-6; 9-8; 10-10; 11-12; 12-16; 13-20;
}NET_DVR_COMPRESSION_INFO, *LPNET_DVR_COMPRESSION_INFO;

//Í¨µÀÑ¹Ëõ²ÎÊý
typedef struct 
{
    DWORD dwSize;
    NET_DVR_COMPRESSION_INFO struRecordPara; //Â¼Ïñ/ÊÂ¼þ´¥·¢Â¼Ïñ
    NET_DVR_COMPRESSION_INFO struNetPara;    //Íø´«/±£Áô
}NET_DVR_COMPRESSIONCFG, *LPNET_DVR_COMPRESSIONCFG;

//ÂëÁ÷Ñ¹Ëõ²ÎÊý(×Ó½á¹¹)(À©Õ¹) Ôö¼ÓIÖ¡¼ä¸ô
typedef struct 
{
    BYTE byStreamType;        //ÂëÁ÷ÀàÐÍ0-ÊÓÆµÁ÷, 1-¸´ºÏÁ÷
    BYTE byResolution;      //·Ö±æÂÊ0-DCIF 1-CIF, 2-QCIF, 3-4CIF, 4-2CIF, 5-2QCIF(352X144)(³µÔØ×¨ÓÃ)
    BYTE byBitrateType;        //ÂëÂÊÀàÐÍ0:±äÂëÂÊ£¬1:¶¨ÂëÂÊ
    BYTE  byPicQuality;        //Í¼ÏóÖÊÁ¿ 0-×îºÃ 1-´ÎºÃ 2-½ÏºÃ 3-Ò»°ã 4-½Ï²î 5-²î
    DWORD dwVideoBitrate;     //ÊÓÆµÂëÂÊ 0-±£Áô 1-16K(±£Áô) 2-32K 3-48k 4-64K 5-80K 6-96K 7-128K 8-160k 9-192K 10-224K 11-256K 12-320K
    // 13-384K 14-448K 15-512K 16-640K 17-768K 18-896K 19-1024K 20-1280K 21-1536K 22-1792K 23-2048K
    //×î¸ßÎ»(31Î»)ÖÃ³É1±íÊ¾ÊÇ×Ô¶¨ÒåÂëÁ÷, 0-30Î»±íÊ¾ÂëÁ÷Öµ(MIN-32K MAX-8192K)¡£
    DWORD dwVideoFrameRate;    //Ö¡ÂÊ 0-È«²¿; 1-1/16; 2-1/8; 3-1/4; 4-1/2; 5-1; 6-2; 7-4; 8-6; 9-8; 10-10; 11-12; 12-16; 13-20, //V2.0Ôö¼Ó14-15, 15-18, 16-22;
    WORD  wIntervalFrameI;  //IÖ¡¼ä¸ô
    //2006-08-11 Ôö¼Óµ¥PÖ¡µÄÅäÖÃ½Ó¿Ú£¬¿ÉÒÔ¸ÄÉÆÊµÊ±Á÷ÑÓÊ±ÎÊÌâ
    BYTE  byIntervalBPFrame;//0-BBPÖ¡; 1-BPÖ¡; 2-µ¥PÖ¡
    BYTE  byRes;
}NET_DVR_COMPRESSION_INFO_EX, *LPNET_DVR_COMPRESSION_INFO_EX;

//Í¨µÀÑ¹Ëõ²ÎÊý(À©Õ¹)
typedef struct 
{
    DWORD dwSize;
    NET_DVR_COMPRESSION_INFO_EX struRecordPara; //Â¼Ïñ
    NET_DVR_COMPRESSION_INFO_EX struNetPara;    //Íø´«
}NET_DVR_COMPRESSIONCFG_EX, *LPNET_DVR_COMPRESSIONCFG_EX;


//Ê±¼ä¶ÎÂ¼Ïñ²ÎÊýÅäÖÃ(×Ó½á¹¹)
typedef struct 
{
    NET_DVR_SCHEDTIME struRecordTime;
    BYTE byRecordType;    //0:¶¨Ê±Â¼Ïñ£¬1:ÒÆ¶¯Õì²â£¬2:±¨¾¯Â¼Ïñ£¬3:¶¯²â|±¨¾¯£¬4:¶¯²â&±¨¾¯, 5:ÃüÁî´¥·¢, 6: ÖÇÄÜÂ¼Ïñ,10-PIR±¨¾¯£¬11-ÎÞÏß±¨¾¯£¬12-ºô¾È±¨¾¯£¬13-ËùÓÐ±¨¾¯,14-ÖÇÄÜ½»Í¨ÊÂ¼þ£¬15Ô½½çÕì²â£¬16ÇøÓòÈëÇÖÕì²â£¬17ÒôÆµÒì³£Õì²â
    char reservedData[3];
}NET_DVR_RECORDSCHED, *LPNET_DVR_RECORDSCHED;

//È«ÌìÂ¼Ïñ²ÎÊýÅäÖÃ(×Ó½á¹¹)
typedef struct 
{
    WORD wAllDayRecord;                /* ÊÇ·ñÈ«ÌìÂ¼Ïñ 0-·ñ 1-ÊÇ*/
                                    BYTE byRecordType;                /* Â¼ÏóÀàÐÍ 0:¶¨Ê±Â¼Ïñ£¬1:ÒÆ¶¯Õì²â£¬2:±¨¾¯Â¼Ïñ£¬3:¶¯²â|±¨¾¯£¬4:¶¯²â&±¨¾¯ 5:ÃüÁî´¥·¢, 6: ÖÇÄÜÂ¼Ïñ,
                                                                    10-PIR±¨¾¯£¬11-ÎÞÏß±¨¾¯£¬12-ºô¾È±¨¾¯£¬13-ÒÆ¶¯|±¨¾¯ÊäÈë|PIR|ÎÞÏß±¨¾¯|ºô¾È±¨¾¯,14-ÖÇÄÜ½»Í¨ÊÂ¼þ,15-Ô½½çÕì²â,16-ÇøÓòÈëÇÖ,17-ÉùÒôÒì³£,
                                    18-³¡¾°±ä¸üÕì²â,19-ÖÇÄÜÕì²â£¨Ô½½çÕì²â|ÇøÓòÈëÇÖ|½øÈëÇøÓò|Àë¿ªÇøÓò|ÈËÁ³Ê¶±ð£©,20£­ÈËÁ³Õì²â, 21-POSÂ¼Ïñ*/
                                    char reservedData;
}NET_DVR_RECORDDAY, *LPNET_DVR_RECORDDAY;

//Í¨µÀÂ¼Ïñ²ÎÊýÅäÖÃ(9000À©Õ¹)
typedef struct 
{
    DWORD    dwSize;
    DWORD    dwRecord;                          /*ÊÇ·ñÂ¼Ïñ 0-·ñ 1-ÊÇ*/
    NET_DVR_RECORDDAY    struRecAllDay[MAX_DAYS];
    NET_DVR_RECORDSCHED    struRecordSched[MAX_DAYS][MAX_TIMESEGMENT_V30];
    DWORD    dwRecordTime;                    /* Â¼ÏóÑÓÊ±³¤¶È 0-5Ãë£¬ 1-10Ãë£¬ 2-30Ãë£¬ 3-1·ÖÖÓ£¬ 4-2·ÖÖÓ£¬ 5-5·ÖÖÓ£¬ 6-10·ÖÖÓ*/
    DWORD    dwPreRecordTime;                /* Ô¤Â¼Ê±¼ä 0-²»Ô¤Â¼ 1-5Ãë 2-10Ãë 3-15Ãë 4-20Ãë 5-25Ãë 6-30Ãë 7-0xffffffff(¾¡¿ÉÄÜÔ¤Â¼) */
    DWORD    dwRecorderDuration;                /* Â¼Ïñ±£´æµÄ×î³¤Ê±¼ä */
    BYTE    byRedundancyRec;    /*ÊÇ·ñÈßÓàÂ¼Ïñ,ÖØÒªÊý¾ÝË«±¸·Ý£º0/1*/
    BYTE    byAudioRec;        /*Â¼ÏñÊ±¸´ºÏÁ÷±àÂëÊ±ÊÇ·ñ¼ÇÂ¼ÒôÆµÊý¾Ý£º¹úÍâÓÐ´Ë·¨¹æ*/
    BYTE    byStreamType;  // 0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷£¬2-Ö÷×ÓÂëÁ÷Í¬Ê± 3-ÈýÂëÁ÷
    BYTE    byPassbackRecord;  // 0:²»»Ø´«Â¼Ïñ 1£º»Ø´«Â¼Ïñ
    WORD    wLockDuration;  // Â¼ÏñËø¶¨Ê±³¤£¬µ¥Î»Ð¡Ê± 0±íÊ¾²»Ëø¶¨£¬0xffff±íÊ¾ÓÀ¾ÃËø¶¨£¬Â¼Ïñ¶ÎµÄÊ±³¤´óÓÚËø¶¨µÄ³ÖÐøÊ±³¤µÄÂ¼Ïñ£¬½«²»»áËø¶¨
    BYTE    byRecordBackup;  // 0:Â¼Ïñ²»´æµµ 1£ºÂ¼Ïñ´æµµ
    BYTE     bySVCLevel;    //SVC³éÖ¡ÀàÐÍ£º0-²»³é£¬1-³é¶þ·ÖÖ®Ò» 2-³éËÄ·ÖÖ®Èý
    BYTE    byRecordManage;   //Â¼Ïñµ÷¶È£¬0-ÆôÓÃ£¬ 1-²»ÆôÓÃ; ÆôÓÃÊ±½øÐÐ¶¨Ê±Â¼Ïñ£»²»ÆôÓÃÊ±²»½øÐÐ¶¨Ê±Â¼Ïñ£¬µ«ÊÇÂ¼Ïñ¼Æ»®ÈÔÔÚÊ¹ÓÃ£¬±ÈÈçÒÆ¶¯Õì²â£¬»Ø´«¶¼»¹ÔÚ°´ÕâÌõÂ¼Ïñ¼Æ»®½øÐÐ
    BYTE    byExtraSaveAudio;        //ÒôÆµµ¥¶ÀÁí´æ0-·Çµ¥¶ÀÁí´æ£¬1-µ¥¶ÀÁí´æ
    BYTE    byReserve[2]; 
}NET_DVR_RECORD_V30, *LPNET_DVR_RECORD_V30;

//Ê±¼ä¶ÎÂ¼Ïñ²ÎÊýÅäÖÃ(×Ó½á¹¹)
typedef struct 
{
    NET_DVR_SCHEDTIME  struRecordTime;
    /*Â¼ÏñÀàÐÍ£¬0:¶¨Ê±Â¼Ïñ£¬1:ÒÆ¶¯Õì²â£¬2:±¨¾¯Â¼Ïñ£¬3:¶¯²â|±¨¾¯£¬4:¶¯²â&±¨¾¯ 5:ÃüÁî´¥·¢, 
    6-ÖÇÄÜ±¨¾¯Â¼Ïñ£¬10-PIR±¨¾¯£¬11-ÎÞÏß±¨¾¯£¬12-ºô¾È±¨¾¯£¬13-È«²¿ÊÂ¼þ,14-ÖÇÄÜ½»Í¨ÊÂ¼þ, 
    15-Ô½½çÕì²â,16-ÇøÓòÈëÇÖ,17-ÉùÒôÒì³£,18-³¡¾°±ä¸üÕì²â,
    19-ÖÇÄÜÕì²â(Ô½½çÕì²â|ÇøÓòÈëÇÖ|ÈËÁ³Õì²â|ÉùÒôÒì³£|³¡¾°±ä¸üÕì²â),20£­ÈËÁ³Õì²â,21-POSÂ¼Ïñ,
    22-½øÈëÇøÓòÕì²â, 23-Àë¿ªÇøÓòÕì²â,24-ÅÇ»²Õì²â,25-ÈËÔ±¾Û¼¯Õì²â,26-¿ìËÙÔË¶¯Õì²â,27-Í£³µÕì²â,
    28-ÎïÆ·ÒÅÁôÕì²â,29-ÎïÆ·ÄÃÈ¡Õì²â,30-»ðµã¼ì²â£¬31-·ÀÆÆ»µ¼ì²â,32-´ò¼Ü¶·Å¹ÊÂ¼þ(Ë¾·¨),33-ÆðÉíÊÂ¼þ(Ë¾·¨), 34-î§Ë¯ÊÂ¼þ(Ë¾·¨)
    35-´¬Ö»¼ì²â, 36-²âÎÂÔ¤¾¯£¬37-²âÎÂ±¨¾¯£¬38-ÎÂ²î±¨¾¯*/    
    BYTE byRecordType; 
    BYTE byRes[31];
}NET_DVR_RECORDSCHED_V40, *LPNET_DVR_RECORDSCHED_V40;

//È«ÌìÂ¼Ïñ²ÎÊýÅäÖÃ(×Ó½á¹¹)
typedef struct 
{
    BYTE byAllDayRecord; /* ÊÇ·ñÈ«ÌìÂ¼Ïñ 0-·ñ 1-ÊÇ*/
                         /*Â¼ÏñÀàÐÍ£¬0:¶¨Ê±Â¼Ïñ£¬1:ÒÆ¶¯Õì²â£¬2:±¨¾¯Â¼Ïñ£¬3:¶¯²â|±¨¾¯£¬4:¶¯²â&±¨¾¯ 5:ÃüÁî´¥·¢, 
                         6-ÖÇÄÜ±¨¾¯Â¼Ïñ£¬10-PIR±¨¾¯£¬11-ÎÞÏß±¨¾¯£¬12-ºô¾È±¨¾¯£¬13-È«²¿ÊÂ¼þ,14-ÖÇÄÜ½»Í¨ÊÂ¼þ, 
                         15-Ô½½çÕì²â,16-ÇøÓòÈëÇÖ,17-ÉùÒôÒì³£,18-³¡¾°±ä¸üÕì²â,
                         19-ÖÇÄÜÕì²â(Ô½½çÕì²â|ÇøÓòÈëÇÖ|ÈËÁ³Õì²â|ÉùÒôÒì³£|³¡¾°±ä¸üÕì²â),20£­ÈËÁ³Õì²â,21-POSÂ¼Ïñ,
                         22-½øÈëÇøÓòÕì²â, 23-Àë¿ªÇøÓòÕì²â,24-ÅÇ»²Õì²â,25-ÈËÔ±¾Û¼¯Õì²â,26-¿ìËÙÔË¶¯Õì²â,27-Í£³µÕì²â,
                         28-ÎïÆ·ÒÅÁôÕì²â,29-ÎïÆ·ÄÃÈ¡Õì²â,30-»ðµã¼ì²â£¬31-·ÀÆÆ»µ¼ì²â,32-´ò¼Ü¶·Å¹ÊÂ¼þ(Ë¾·¨),33-ÆðÉíÊÂ¼þ(Ë¾·¨), 34-î§Ë¯ÊÂ¼þ(Ë¾·¨)
                         35-´¬Ö»¼ì²â, 36-²âÎÂÔ¤¾¯£¬37-²âÎÂ±¨¾¯£¬38-ÎÂ²î±¨¾¯*/
    BYTE byRecordType; 
    BYTE byRes[62];
}NET_DVR_RECORDDAY_V40, *LPNET_DVR_RECORDDAY_V40;

typedef struct 
{
    DWORD    dwSize;
    DWORD    dwRecord;                          /*ÊÇ·ñÂ¼Ïñ 0-·ñ 1-ÊÇ*/
    NET_DVR_RECORDDAY_V40    struRecAllDay[MAX_DAYS];
    NET_DVR_RECORDSCHED_V40 struRecordSched[MAX_DAYS][MAX_TIMESEGMENT_V30];
    DWORD    dwRecordTime;                    /* Â¼ÏóÑÓÊ±³¤¶È 0-5Ãë£¬ 1-10Ãë£¬ 2-30Ãë£¬ 3-1·ÖÖÓ£¬ 4-2·ÖÖÓ£¬ 5-5·ÖÖÓ£¬ 6-10·ÖÖÓ*/
    DWORD    dwPreRecordTime;                /* Ô¤Â¼Ê±¼ä 0-²»Ô¤Â¼ 1-5Ãë 2-10Ãë 3-15Ãë 4-20Ãë 5-25Ãë 6-30Ãë 7-0xffffffff(¾¡¿ÉÄÜÔ¤Â¼) */
    DWORD    dwRecorderDuration;                /* Â¼Ïñ±£´æµÄ×î³¤Ê±¼ä */
    BYTE    byRedundancyRec;    /*ÊÇ·ñÈßÓàÂ¼Ïñ,ÖØÒªÊý¾ÝË«±¸·Ý£º0/1*/
    BYTE    byAudioRec;        /*Â¼ÏñÊ±¸´ºÏÁ÷±àÂëÊ±ÊÇ·ñ¼ÇÂ¼ÒôÆµÊý¾Ý£º¹úÍâÓÐ´Ë·¨¹æ*/
    BYTE    byStreamType;  // 0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷£¬2-Ö÷×ÓÂëÁ÷Í¬Ê± 3-ÈýÂëÁ÷
    BYTE    byPassbackRecord;  // 0:²»»Ø´«Â¼Ïñ 1£º»Ø´«Â¼Ïñ
    WORD    wLockDuration;  // Â¼ÏñËø¶¨Ê±³¤£¬µ¥Î»Ð¡Ê± 0±íÊ¾²»Ëø¶¨£¬0xffff±íÊ¾ÓÀ¾ÃËø¶¨£¬Â¼Ïñ¶ÎµÄÊ±³¤´óÓÚËø¶¨µÄ³ÖÐøÊ±³¤µÄÂ¼Ïñ£¬½«²»»áËø¶¨
    BYTE    byRecordBackup;  // 0:Â¼Ïñ²»´æµµ 1£ºÂ¼Ïñ´æµµ
    BYTE     bySVCLevel;    //SVC³éÖ¡ÀàÐÍ£º0-²»³é£¬1-³é¶þ·ÖÖ®Ò» 2-³éËÄ·ÖÖ®Èý
    BYTE    byRecordManage;   //Â¼Ïñµ÷¶È£¬0-ÆôÓÃ£¬ 1-²»ÆôÓÃ; ÆôÓÃÊ±½øÐÐ¶¨Ê±Â¼Ïñ£»²»ÆôÓÃÊ±²»½øÐÐ¶¨Ê±Â¼Ïñ£¬µ«ÊÇÂ¼Ïñ¼Æ»®ÈÔÔÚÊ¹ÓÃ£¬±ÈÈçÒÆ¶¯Õì²â£¬»Ø´«¶¼»¹ÔÚ°´ÕâÌõÂ¼Ïñ¼Æ»®½øÐÐ
    BYTE    byExtraSaveAudio;//ÒôÆµµ¥¶À´æ´¢
    BYTE    byRes[126]; 
}NET_DVR_RECORD_V40, *LPNET_DVR_RECORD_V40;

//Í¨µÀÂ¼Ïñ²ÎÊýÅäÖÃ
typedef struct 
{
    DWORD dwSize;
    DWORD dwRecord;  /*ÊÇ·ñÂ¼Ïñ 0-·ñ 1-ÊÇ*/
    NET_DVR_RECORDDAY struRecAllDay[MAX_DAYS];
    NET_DVR_RECORDSCHED struRecordSched[MAX_DAYS][MAX_TIMESEGMENT];
    DWORD dwRecordTime;    /* Â¼ÏóÊ±¼ä³¤¶È */
    DWORD dwPreRecordTime;    /* Ô¤Â¼Ê±¼ä 0-²»Ô¤Â¼ 1-5Ãë 2-10Ãë 3-15Ãë 4-20Ãë 5-25Ãë 6-30Ãë 7-0xffffffff(¾¡¿ÉÄÜÔ¤Â¼) */
}NET_DVR_RECORD, *LPNET_DVR_RECORD;

//ÔÆÌ¨Ð­Òé±í½á¹¹ÅäÖÃ
typedef struct
{ 
    DWORD dwType;               /*½âÂëÆ÷ÀàÐÍÖµ*/    
    BYTE  byDescribe[DESC_LEN]; /*½âÂëÆ÷µÄÃèÊö·û£¬ºÍ8000ÖÐµÄÒ»ÖÂ*/    
}NET_DVR_PTZ_PROTOCOL;

typedef struct
{    
    DWORD   dwSize;    
    NET_DVR_PTZ_PROTOCOL struPtz[PTZ_PROTOCOL_NUM];/*×î´ó200ÖÐPTZÐ­Òé*/    
    DWORD   dwPtzNum;           /*ÓÐÐ§µÄptzÐ­ÒéÊýÄ¿£¬´Ó0¿ªÊ¼(¼´¼ÆËãÊ±¼Ó1)*/
    BYTE    byRes[8];
}NET_DVR_PTZCFG, *LPNET_DVR_PTZCFG;

/***************************ÔÆÌ¨ÀàÐÍ(end)******************************/
typedef struct tagNET_DVR_SERIALSTART_V40   //Í¸Ã÷Í¨µÀ
{
    DWORD  dwSize;         //½á¹¹Ìå´óÐ¡
    DWORD  dwSerialType;    //´®¿ÚºÅ£¨1-232´®¿Ú£¬2-485´®¿Ú£©
    BYTE   bySerialNum;   //´®¿Ú±àºÅ
    BYTE   byRes[255];
}NET_DVR_SERIALSTART_V40,*LPNET_DVR_SERIALSTART_V40;

//Í¨µÀ½âÂëÆ÷(ÔÆÌ¨)²ÎÊýÅäÖÃ À©Õ¹
typedef struct tagNET_DVR_DECODERCFG_V40
{
    DWORD    dwSize;       //½á¹¹Ìå´óÐ¡
    DWORD     dwBaudRate;       //²¨ÌØÂÊ 0£­50£¬1£­75£¬2£­110£¬3£­150£¬4£­300£¬5£­600£¬6£­1200£¬7£­2400£¬8£­4800£¬9£­9600£¬10£­19200£¬ 11£­38400£¬12£­57600£¬13£­76800£¬14£­115.2k; 
    BYTE     byDataBit;       //Êý¾ÝÓÐ¼¸Î» 0£­5Î»£¬1£­6Î»£¬2£­7Î»£¬3£­8Î»;
    BYTE     byStopBit;       //Í£Ö¹Î» 0£­1Î»£¬1£­2Î»
    BYTE     byParity;       //Ð£Ñé 0£­ÎÞÐ£Ñé£¬1£­ÆæÐ£Ñé£¬2£­Å¼Ð£Ñé
    BYTE     byFlowcontrol;  //0£­ÎÞ£¬1£­ÈíÁ÷¿Ø,2-Ó²Á÷¿Ø
    WORD     wDecoderType;    //½âÂëÆ÷ÀàÐÍ*/
    WORD     wDecoderAddress;    //½âÂëÆ÷µØÖ·£¬0-255
    BYTE     bySetPreset [MAX_PRESET_V30];  //Ô¤ÖÃµãÊÇ·ñÉèÖÃ,0-Ã»ÓÐÉèÖÃ,1-ÉèÖÃ
    BYTE     bySetCruise[MAX_CRUISE_V30];  //Ñ²º½ÊÇ·ñÉèÖÃ: 0-Ã»ÓÐÉèÖÃ,1-ÉèÖÃ
    BYTE     bySetTrack [MAX_TRACK_V30];    //¹ì¼£ÊÇ·ñÉèÖÃ,0-Ã»ÓÐÉèÖÃ,1-ÉèÖÃ
    BYTE     bySerialNO;          //´®¿Ú±àºÅ
    BYTE     byWorkMode;        /*¹¤×÷Ä£Ê½£¬ 1-¾ØÕó´®¿Ú¿ØÖÆ£¬2-ÆÁÄ»¿ØÖÆ£¬3-Í¸Ã÷Í¨µÀÄ£Ê½ 4-PPPÄ£Ê½ 5-¿ØÖÆÌ¨Ä£Ê½ 6-´®¿ÚÖ±Á¬ 7-¼üÅÌ¿ØÖÆ 8-¼à¿Ø°å¹ÜÀí 9-¿ØÖÆÔÆÌ¨*/
    BYTE     byRes[254];         //±£Áô
}NET_DVR_DECODERCFG_V40,*LPNET_DVR_DECODERCFG_V40;

//Í¨µÀ½âÂëÆ÷(ÔÆÌ¨)²ÎÊýÅäÖÃ(9000À©Õ¹)
typedef struct 
{
    DWORD dwSize;
    DWORD dwBaudRate;//²¨ÌØÂÊ(bps)£¬0£­50£¬1£­75£¬2£­110£¬3£­150£¬4£­300£¬5£­600£¬6£­1200£¬7£­2400£¬8£­4800£¬9£­9600£¬10£­19200£¬ 11£­38400£¬12£­57600£¬13£­76800£¬14£­115.2k;
    BYTE byDataBit;// Êý¾ÝÓÐ¼¸Î» 0£­5Î»£¬1£­6Î»£¬2£­7Î»£¬3£­8Î»;
    BYTE byStopBit;// Í£Ö¹Î» 0£­1Î»£¬1£­2Î»;
    BYTE byParity;// Ð£Ñé 0£­ÎÞÐ£Ñé£¬1£­ÆæÐ£Ñé£¬2£­Å¼Ð£Ñé;
    BYTE byFlowcontrol;// 0£­ÎÞ£¬1£­ÈíÁ÷¿Ø,2-Ó²Á÷¿Ø
    WORD wDecoderType;//½âÂëÆ÷ÀàÐÍ, ´Ó0¿ªÊ¼£¬¶ÔÓ¦ptzÐ­ÒéÁÐ±í´ÓNET_DVR_IPC_PROTO_LISTµÃµ½
    WORD wDecoderAddress;    /*½âÂëÆ÷µØÖ·:0 - 255*/
    BYTE bySetPreset[MAX_PRESET_V30];        /* Ô¤ÖÃµãÊÇ·ñÉèÖÃ,0-Ã»ÓÐÉèÖÃ,1-ÉèÖÃ*/
    BYTE bySetCruise[MAX_CRUISE_V30];        /* Ñ²º½ÊÇ·ñÉèÖÃ: 0-Ã»ÓÐÉèÖÃ,1-ÉèÖÃ */
    BYTE bySetTrack[MAX_TRACK_V30];            /* ¹ì¼£ÊÇ·ñÉèÖÃ,0-Ã»ÓÐÉèÖÃ,1-ÉèÖÃ*/
}NET_DVR_DECODERCFG_V30, *LPNET_DVR_DECODERCFG_V30;

//Í¨µÀ½âÂëÆ÷(ÔÆÌ¨)²ÎÊýÅäÖÃ
typedef struct 
{
    DWORD dwSize;
    DWORD dwBaudRate;       //²¨ÌØÂÊ(bps)£¬0£­50£¬1£­75£¬2£­110£¬3£­150£¬4£­300£¬5£­600£¬6£­1200£¬7£­2400£¬8£­4800£¬9£­9600£¬10£­19200£¬ 11£­38400£¬12£­57600£¬13£­76800£¬14£­115.2k;
    BYTE byDataBit;         // Êý¾ÝÓÐ¼¸Î» 0£­5Î»£¬1£­6Î»£¬2£­7Î»£¬3£­8Î»;
    BYTE byStopBit;         // Í£Ö¹Î» 0£­1Î»£¬1£­2Î»;
    BYTE byParity;          // Ð£Ñé 0£­ÎÞÐ£Ñé£¬1£­ÆæÐ£Ñé£¬2£­Å¼Ð£Ñé;
    BYTE byFlowcontrol;     // 0£­ÎÞ£¬1£­ÈíÁ÷¿Ø,2-Ó²Á÷¿Ø
    WORD wDecoderType;      //½âÂëÆ÷ÀàÐÍ  NET_DVR_IPC_PROTO_LISTÖÐµÃµ½
    WORD wDecoderAddress;    /*½âÂëÆ÷µØÖ·:0 - 255*/
    BYTE bySetPreset[MAX_PRESET];        /* Ô¤ÖÃµãÊÇ·ñÉèÖÃ,0-Ã»ÓÐÉèÖÃ,1-ÉèÖÃ*/
    BYTE bySetCruise[MAX_CRUISE];        /* Ñ²º½ÊÇ·ñÉèÖÃ: 0-Ã»ÓÐÉèÖÃ,1-ÉèÖÃ */
    BYTE bySetTrack[MAX_TRACK];        /* ¹ì¼£ÊÇ·ñÉèÖÃ,0-Ã»ÓÐÉèÖÃ,1-ÉèÖÃ*/
}NET_DVR_DECODERCFG, *LPNET_DVR_DECODERCFG;

//ppp²ÎÊýÅäÖÃ(×Ó½á¹¹)
typedef struct 
{
    NET_DVR_IPADDR struRemoteIP;    //Ô¶¶ËIPµØÖ·
    NET_DVR_IPADDR struLocalIP;        //±¾µØIPµØÖ·
    char sLocalIPMask[16];            //±¾µØIPµØÖ·ÑÚÂë
    BYTE sUsername[NAME_LEN];        /* ÓÃ»§Ãû */
    BYTE sPassword[PASSWD_LEN];        /* ÃÜÂë */
    BYTE byPPPMode;                    //PPPÄ£Ê½, 0£­Ö÷¶¯£¬1£­±»¶¯
    BYTE byRedial;                    //ÊÇ·ñ»Ø²¦ £º0-·ñ,1-ÊÇ
    BYTE byRedialMode;                //»Ø²¦Ä£Ê½,0-ÓÉ²¦ÈëÕßÖ¸¶¨,1-Ô¤ÖÃ»Ø²¦ºÅÂë
    BYTE byDataEncrypt;                //Êý¾Ý¼ÓÃÜ,0-·ñ,1-ÊÇ
    DWORD dwMTU;                    //MTU
    char sTelephoneNumber[PHONENUMBER_LEN];   //µç»°ºÅÂë
}NET_DVR_PPPCFG_V30, *LPNET_DVR_PPPCFG_V30;

//ppp²ÎÊýÅäÖÃ(×Ó½á¹¹)
typedef struct 
{
    char sRemoteIP[16];                //Ô¶¶ËIPµØÖ·
    char sLocalIP[16];                //±¾µØIPµØÖ·
    char sLocalIPMask[16];            //±¾µØIPµØÖ·ÑÚÂë
    BYTE sUsername[NAME_LEN];        /* ÓÃ»§Ãû */
    BYTE sPassword[PASSWD_LEN];        /* ÃÜÂë */
    BYTE byPPPMode;                    //PPPÄ£Ê½, 0£­Ö÷¶¯£¬1£­±»¶¯
    BYTE byRedial;                    //ÊÇ·ñ»Ø²¦ £º0-·ñ,1-ÊÇ
    BYTE byRedialMode;                //»Ø²¦Ä£Ê½,0-ÓÉ²¦ÈëÕßÖ¸¶¨,1-Ô¤ÖÃ»Ø²¦ºÅÂë
    BYTE byDataEncrypt;                //Êý¾Ý¼ÓÃÜ,0-·ñ,1-ÊÇ
    DWORD dwMTU;                    //MTU
    char sTelephoneNumber[PHONENUMBER_LEN];   //µç»°ºÅÂë
}NET_DVR_PPPCFG, *LPNET_DVR_PPPCFG;

//RS232´®¿Ú²ÎÊýÅäÖÃ(9000À©Õ¹)
typedef struct
{
    DWORD dwBaudRate;   /*²¨ÌØÂÊ(bps)£¬0£­50£¬1£­75£¬2£­110£¬3£­150£¬4£­300£¬5£­600£¬6£­1200£¬7£­2400£¬8£­4800£¬9£­9600£¬10£­19200£¬ 11£­38400£¬12£­57600£¬13£­76800£¬14£­115.2k;*/
    BYTE byDataBit;     /* Êý¾ÝÓÐ¼¸Î» 0£­5Î»£¬1£­6Î»£¬2£­7Î»£¬3£­8Î» */
    BYTE byStopBit;     /* Í£Ö¹Î» 0£­1Î»£¬1£­2Î» */
    BYTE byParity;      /* Ð£Ñé 0£­ÎÞÐ£Ñé£¬1£­ÆæÐ£Ñé£¬2£­Å¼Ð£Ñé */
    BYTE byFlowcontrol; /* 0£­ÎÞ£¬1£­ÈíÁ÷¿Ø,2-Ó²Á÷¿Ø */
    DWORD dwWorkMode;   //¹¤×÷Ä£Ê½£¬0£­232´®¿ÚÓÃÓÚPPP²¦ºÅ£¬1£­232´®¿ÚÓÃÓÚ²ÎÊý¿ØÖÆ£¬2£­Í¸Ã÷Í¨µÀ 3- ptzÄ£Ê½,ÉóÑ¶ÎÂÊª¶È´«¸ÐÆ÷, 4-±¨¾¯ºÐÄ£Ê½  5-¾ØÕó´®¿Ú¿ØÖÆ 6-ÆÁÄ»¿ØÖÆ 7-´®¿ÚÖ±Á¬ 8-¼üÅÌ¿ØÖÆ 9-¼à¿Ø°å¹ÜÀí 10-¿ØÖÆÔÆÌ¨
}NET_DVR_SINGLE_RS232;

typedef struct tagNET_DVR_USB_RS232
{
    DWORD dwBaudRate;   /*²¨ÌØÂÊ(bps)£¬0£­50£¬1£­75£¬2£­110£¬3£­150£¬4£­300£¬5£­600£¬6£­1200£¬7£­2400£¬8£­4800£¬9£­9600£¬10£­19200£¬ 11£­38400£¬12£­57600£¬13£­76800£¬14£­115.2k;*/
    BYTE byDataBit;     /* Êý¾ÝÓÐ¼¸Î» 0£­5Î»£¬1£­6Î»£¬2£­7Î»£¬3£­8Î» */
    BYTE byStopBit;     /* Í£Ö¹Î» 0£­1Î»£¬1£­2Î» */
    BYTE byParity;      /* Ð£Ñé 0£­ÎÞÐ£Ñé£¬1£­ÆæÐ£Ñé£¬2£­Å¼Ð£Ñé */
    BYTE byFlowcontrol; /* 0£­ÎÞ£¬1£­ÈíÁ÷¿Ø,2-Ó²Á÷¿Ø */
    BYTE byVirtualSerialPort;  //ÐéÄâ´®¿Ú±àºÅ
    BYTE byRes[3];
}NET_DVR_USB_RS232,*LPNET_DVR_USB_RS232;

//RS232´®¿Ú²ÎÊýÅäÖÃ(9000À©Õ¹)
typedef struct 
{
    DWORD dwSize;
    NET_DVR_SINGLE_RS232 struRs232[MAX_SERIAL_PORT];/*×¢Òâ£º´Ë½á¹¹ÐÞ¸ÄÁË£¬Ô­À´ÊÇµ¥¸ö½á¹¹£¬ÏÖÔÚÐÞ¸ÄÎªÁËÊý×é½á¹¹*/
    NET_DVR_PPPCFG_V30 struPPPConfig;
}NET_DVR_RS232CFG_V30, *LPNET_DVR_RS232CFG_V30;

//RS232´®¿Ú²ÎÊýÅäÖÃ
typedef struct 
{
    DWORD dwSize;
    DWORD dwBaudRate;//²¨ÌØÂÊ(bps)£¬0£­50£¬1£­75£¬2£­110£¬3£­150£¬4£­300£¬5£­600£¬6£­1200£¬7£­2400£¬8£­4800£¬9£­9600£¬10£­19200£¬ 11£­38400£¬12£­57600£¬13£­76800£¬14£­115.2k;
    BYTE byDataBit;// Êý¾ÝÓÐ¼¸Î» 0£­5Î»£¬1£­6Î»£¬2£­7Î»£¬3£­8Î»;
    BYTE byStopBit;// Í£Ö¹Î» 0£­1Î»£¬1£­2Î»;
    BYTE byParity;// Ð£Ñé 0£­ÎÞÐ£Ñé£¬1£­ÆæÐ£Ñé£¬2£­Å¼Ð£Ñé;
    BYTE byFlowcontrol;// 0£­ÎÞ£¬1£­ÈíÁ÷¿Ø,2-Ó²Á÷¿Ø
    DWORD dwWorkMode;// ¹¤×÷Ä£Ê½£¬0£­Õ­´ø´«Êä(232´®¿ÚÓÃÓÚPPP²¦ºÅ)£¬1£­¿ØÖÆÌ¨(232´®¿ÚÓÃÓÚ²ÎÊý¿ØÖÆ)£¬2£­Í¸Ã÷Í¨µÀ
    NET_DVR_PPPCFG struPPPConfig;
}NET_DVR_RS232CFG, *LPNET_DVR_RS232CFG;


typedef struct 
{
    DWORD dwEnablePresetChan;    /*ÆôÓÃÔ¤ÖÃµãµÄÍ¨µÀ, 0xfffffff±íÊ¾²»µ÷ÓÃÔ¤ÖÃµã*/
    DWORD dwPresetPointNo;        /*µ÷ÓÃÔ¤ÖÃµãÍ¨µÀ¶ÔÓ¦µÄÔ¤ÖÃµãÐòºÅ, 0xfffffff±íÊ¾²»µ÷ÓÃÔ¤ÖÃµã¡£*/
}NET_DVR_PRESETCHAN_INFO, LPNET_DVR_PRESETCHAN_INFO;

typedef struct 
{
    DWORD dwEnableCruiseChan;    /*ÆôÓÃÑ²º½µÄÍ¨µÀ*/
    DWORD dwCruiseNo;        /*Ñ²º½Í¨µÀ¶ÔÓ¦µÄÑ²º½±àºÅ, 0xfffffff±íÊ¾ÎÞÐ§*/
}NET_DVR_CRUISECHAN_INFO, LPNET_DVR_CRUISECHAN_INFO;

typedef struct 
{
    DWORD dwEnablePtzTrackChan;    /*ÆôÓÃÔÆÌ¨¹ì¼£µÄÍ¨µÀ*/
    DWORD dwPtzTrackNo;        /*ÔÆÌ¨¹ì¼£Í¨µÀ¶ÔÓ¦µÄ±àºÅ, 0xfffffff±íÊ¾ÎÞÐ§*/
}NET_DVR_PTZTRACKCHAN_INFO, LPNET_DVR_PTZTRACKCHAN_INFO;
typedef struct tagNET_DVR_PTZ_NOTIFICATION
{
    DWORD   dwSize;
    /*
    0-facedetection,
    1-vehicleDetection,
    2-scenechangedetection,
    3-LineDetection,
    4-regionEntrance,
    5-regionExiting,
    6-loitering,
    7-group,
    8-rapidMove,
    9-parking,
    10-unattendedBaggage,
    11-attendedBaggage,
    12-audioDetection,
    13-PIR,
    14-defocusDetection£¬
    15-temperature,
    16-fireDetection,
    17-thermometry,
    18-shipsDetection
    */
    WORD    byEventType;
    BYTE    byRes[62];
    DWORD   dwEnablePresetChanNum;  //µ±Ç°ÒÑÆôÓÃÔ¤ÖÃµãµÄÊýÄ¿
    NET_DVR_PRESETCHAN_INFO struPresetChanInfo[MAX_CHANNUM_V40]; //ÆôÓÃµÄÔ¤ÖÃµãÐÅÏ¢(¹ØÁªÁª¶¯ÀàÐÍ ptz)
    DWORD   dwEnableCruiseChanNum;  //µ±Ç°ÒÑÆôÓÃÑ²º½µÄÍ¨µÀÊýÄ¿
    NET_DVR_CRUISECHAN_INFO struCruiseChanInfo[MAX_CHANNUM_V40]; //ÆôÓÃÑ²º½¹¦ÄÜÍ¨µÀµÄÐÅÏ¢(¹ØÁªÁª¶¯ÀàÐÍ ptz)
    DWORD   dwEnablePtzTrackChanNum;  //µ±Ç°ÒÑÆôÓÃÔÆÌ¨¹ì¼£µÄÍ¨µÀÊýÄ¿
    NET_DVR_PTZTRACKCHAN_INFO struPtzTrackInfo[MAX_CHANNUM_V40]; //µ÷ÓÃÔÆÌ¨¹ì¼£µÄÍ¨µÀÐÅÏ¢(¹ØÁªÁª¶¯ÀàÐÍ ptz)
    BYTE  	byRes1[1024];
}NET_DVR_PTZ_NOTIFICATION, *LPNET_DVR_PTZ_NOTIFICATION;


//±¨¾¯ÊäÈë²ÎÊýÅäÖÃ(256Â·NVRÀ©Õ¹)
typedef struct tagNET_DVR_ALARMINCFG_V40
{
    DWORD dwSize;
    BYTE sAlarmInName[NAME_LEN];    /* Ãû³Æ */
    BYTE byAlarmType;                //±¨¾¯Æ÷ÀàÐÍ,0£º³£¿ª,1£º³£±Õ
    BYTE byAlarmInHandle;            /* ÊÇ·ñ´¦Àí 0-²»´¦Àí 1-´¦Àí*/
    BYTE byChannel;                 // ±¨¾¯ÊäÈë´¥·¢ÖÇÄÜÊ¶±ðÍ¨µÀ
    BYTE byRes1;                    //±£Áô            
    DWORD   dwHandleType;        //Òì³£´¦Àí,Òì³£´¦Àí·½Ê½µÄ"»ò"½á¹û   
    /*0x00: ÎÞÏìÓ¦*/
    /*0x01: ¼àÊÓÆ÷ÉÏ¾¯¸æ*/
    /*0x02: ÉùÒô¾¯¸æ*/
    /*0x04: ÉÏ´«ÖÐÐÄ*/
    /*0x08: ´¥·¢±¨¾¯Êä³ö*/
    /*0x10: ´¥·¢JPRG×¥Í¼²¢ÉÏ´«Email*/
    /*0x20: ÎÞÏßÉù¹â±¨¾¯Æ÷Áª¶¯*/
    /*0x40: Áª¶¯µç×ÓµØÍ¼(Ä¿Ç°Ö»ÓÐPCNVRÖ§³Ö)*/
    /*0x200: ×¥Í¼²¢ÉÏ´«FTP*/ 
    /*0x1000:×¥Í¼ÉÏ´«µ½ÔÆ*/
    DWORD   dwMaxRelAlarmOutChanNum ; //´¥·¢µÄ±¨¾¯Êä³öÍ¨µÀÊý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD   dwRelAlarmOutChanNum; //´¥·¢µÄ±¨¾¯Êä³öÍ¨µÀÊý Êµ¼ÊÖ§³ÖÊý
    DWORD   dwRelAlarmOut[MAX_ALARMOUT_V40]; //´¥·¢±¨¾¯Í¨µÀ
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//²¼·ÀÊ±¼ä
    /*´¥·¢µÄÂ¼ÏñÍ¨µÀ*/
    DWORD   dwMaxRecordChanNum;   //Éè±¸Ö§³ÖµÄ×î´ó¹ØÁªÂ¼ÏñÍ¨µÀÊý-Ö»¶Á
    DWORD   dwCurRecordChanNum;    //µ±Ç°Êµ¼ÊÒÑÅäÖÃµÄ¹ØÁªÂ¼ÏñÍ¨µÀÊý
    DWORD   dwRelRecordChan[MAX_CHANNUM_V40];     /* Êµ¼Ê´¥·¢Â¼ÏñÍ¨µÀ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬´ÓÏÂ±ê0 - dwCurRecordChanNum -1ÓÐÐ§£¬Èç¹ûÖÐ¼äÓöµ½0xffffffff,ÔòºóÐøÎÞÐ§*/ 
    DWORD   dwMaxEnablePtzCtrlNun; //×î´ó¿ÉÆôÓÃµÄÔÆÌ¨¿ØÖÆ×ÜÊý(Ö»¶Á)
    DWORD   dwEnablePresetChanNum;  //µ±Ç°ÒÑÆôÓÃÔ¤ÖÃµãµÄÊýÄ¿
    NET_DVR_PRESETCHAN_INFO struPresetChanInfo[MAX_CHANNUM_V40]; //ÆôÓÃµÄÔ¤ÖÃµãÐÅÏ¢
    BYTE    byRes2[516];                    /*±£Áô*/
    DWORD   dwEnableCruiseChanNum;  //µ±Ç°ÒÑÆôÓÃÑ²º½µÄÍ¨µÀÊýÄ¿
    NET_DVR_CRUISECHAN_INFO struCruiseChanInfo[MAX_CHANNUM_V40]; //ÆôÓÃÑ²º½¹¦ÄÜÍ¨µÀµÄÐÅÏ¢
    DWORD   dwEnablePtzTrackChanNum;  //µ±Ç°ÒÑÆôÓÃÑ²º½µÄÍ¨µÀÊýÄ¿
    NET_DVR_PTZTRACKCHAN_INFO struPtzTrackInfo[MAX_CHANNUM_V40]; //µ÷ÓÃÔÆÌ¨¹ì¼£µÄÍ¨µÀÐÅÏ¢
    BYTE    byRes[256];
}NET_DVR_ALARMINCFG_V40, *LPNET_DVR_ALARMINCFG_V40;

//±¨¾¯ÊäÈë²ÎÊýÅäÖÃ(9000À©Õ¹)
typedef struct 
{
    DWORD dwSize;
    BYTE sAlarmInName[NAME_LEN];    /* Ãû³Æ */
    BYTE byAlarmType;                //±¨¾¯Æ÷ÀàÐÍ,0£º³£¿ª,1£º³£±Õ
    BYTE byAlarmInHandle;            /* ÊÇ·ñ´¦Àí 0-²»´¦Àí 1-´¦Àí*/
    BYTE byChannel;                 // ±¨¾¯ÊäÈë´¥·¢ÖÇÄÜÊ¶±ðÍ¨µÀ
    BYTE byRes1;            
    NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;    /* ´¦Àí·½Ê½ */
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//²¼·ÀÊ±¼ä
    BYTE byRelRecordChan[MAX_CHANNUM_V30]; //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
    BYTE byEnablePreset[MAX_CHANNUM_V30];        /* ÊÇ·ñµ÷ÓÃÔ¤ÖÃµã 0-·ñ,1-ÊÇ*/
    BYTE byPresetNo[MAX_CHANNUM_V30];            /* µ÷ÓÃµÄÔÆÌ¨Ô¤ÖÃµãÐòºÅ,Ò»¸ö±¨¾¯ÊäÈë¿ÉÒÔµ÷ÓÃ¶à¸öÍ¨µÀµÄÔÆÌ¨Ô¤ÖÃµã, 0xff±íÊ¾²»µ÷ÓÃÔ¤ÖÃµã¡£*/
    BYTE byRes2[192];                    /*±£Áô*/
    BYTE byEnableCruise[MAX_CHANNUM_V30];        /* ÊÇ·ñµ÷ÓÃÑ²º½ 0-·ñ,1-ÊÇ*/
    BYTE byCruiseNo[MAX_CHANNUM_V30];            /* Ñ²º½ */
    BYTE byEnablePtzTrack[MAX_CHANNUM_V30];        /* ÊÇ·ñµ÷ÓÃ¹ì¼£ 0-·ñ,1-ÊÇ*/
    BYTE byPTZTrack[MAX_CHANNUM_V30];            /* µ÷ÓÃµÄÔÆÌ¨µÄ¹ì¼£ÐòºÅ */
    BYTE byRes3[16];
}NET_DVR_ALARMINCFG_V30, *LPNET_DVR_ALARMINCFG_V30;


typedef struct tagNET_DVR_ALARMINFO_FIXED_HEADER
{
    /*0-ÐÅºÅÁ¿±¨¾¯,1-Ó²ÅÌÂú,2-ÐÅºÅ¶ªÊ§£¬3£­ÒÆ¶¯Õì²â£¬4£­Ó²ÅÌÎ´¸ñÊ½»¯,5-Ð´Ó²ÅÌ³ö´í,6-ÕÚµ²±¨¾¯£¬
    7-ÖÆÊ½²»Æ¥Åä, 8-·Ç·¨·ÃÎÊ£¬9-ÊÓÆµÐÅºÅÒì³££¬10-Â¼ÏñÒì³££¬11-ÖÇÄÜ³¡¾°±ä»¯£¬12-ÕóÁÐÒì³££¬13-Ç°¶Ë/Â¼Ïñ·Ö±æÂÊ²»Æ¥Åä, 
    14-ÉêÇë½âÂë×ÊÔ´Ê§°Ü,15-ÖÇÄÜÕì²â±¨¾¯, 16-ÈÈ±¸Òì³££¬17-Â¼²¥Ö÷»ú±¨¾¯£¬18-ÓïÒô¶Ô½²ÇëÇó±¨¾¯*/
    DWORD dwAlarmType;//±¨¾¯ÀàÐÍ
    NET_DVR_TIME_EX struAlarmTime;    //·¢Éú±¨¾¯µÄÊ±¼ä
    union
    {
        BYTE    byUnionLen[128];
        struct
        {
            DWORD    dwAlarmInputNo;        //·¢Éú±¨¾¯µÄ±¨¾¯ÊäÈëÍ¨µÀºÅ£¬Ò»´ÎÖ»ÓÐÒ»¸ö
            DWORD    dwTrigerAlarmOutNum;    /*´¥·¢µÄ±¨¾¯Êä³ö¸öÊý£¬ÓÃÓÚºóÃæ¼ÆËã±ä³¤Êý¾Ý²¿·ÖÖÐËùÓÐ´¥·¢µÄ±¨¾¯Êä³öÍ¨µÀºÅ£¬ËÄ×Ö½Ú±íÊ¾Ò»¸ö*/
            DWORD    dwTrigerRecordChanNum;    /*´¥·¢µÄÂ¼ÏñÍ¨µÀ¸öÊý£¬ÓÃÓÚºóÃæ¼ÆËã±ä³¤Êý¾Ý²¿·ÖÖÐËùÓÐ´¥·¢µÄÂ¼ÏñÍ¨µÀºÅ£¬ËÄ×Ö½Ú±íÊ¾Ò»¸ö*/
        }struIOAlarm;    // ±¨¾¯ÀàÐÍdwAlarmTypeÎª0Ê±ÓÐÐ§
        struct
        {
            DWORD    dwAlarmChanNum;    /*·¢Éú±¨¾¯Í¨µÀÊý¾Ý¸öÊý£¬ÓÃÓÚºóÃæ¼ÆËã±ä³¤Êý¾Ý²¿·ÖÖÐËùÓÐ·¢ÉúµÄ±¨¾¯Í¨µÀºÅ£¬ËÄ×Ö½Ú±íÊ¾Ò»¸ö*/
        }struAlarmChannel;    // dwAlarmTypeÎª2£¬3£¬6£¬9£¬10»ò13Ê±ÓÐÐ§
        struct
        {
            DWORD    dwAlarmHardDiskNum;    /*·¢Éú±¨¾¯µÄÓ²ÅÌÊý¾Ý³¤¶È£¬ÓÃÓÚºóÃæ¼ÆËã±ä³¤Êý¾Ý²¿·ÖÖÐËùÓÐ·¢Éú±¨¾¯µÄÓ²ÅÌºÅ£¬ËÄ½Ú±íÊ¾Ò»¸ö*/
        }struAlarmHardDisk;    // dwAlarmTypeÎª1,4,5Ê±ÓÐÐ§
        struct
        {
            BYTE       bySubAlarmType;  //±¨¾¯×ÓÀàÐÍ£¬1-Ò»¼üÑÓ³ÙÂ¼Ïñ£» 
            BYTE       byRes1[3]; //±£Áô
            NET_DVR_TIME_EX  struRecordEndTime; //Â¼²¥½áÊøÊ±¼ä
            BYTE    byRes[116]; //±£Áô
        }struRecordingHost;  //Â¼²¥Ö÷»ú×¨ÓÃ±¨¾¯
    }uStruAlarm;
}NET_DVR_ALRAM_FIXED_HEADER, *LPNET_DVR_ALARM_FIXED_HEADER;

//ÉÏ´«±¨¾¯ÐÅÏ¢(256Â·NVRÀ©Õ¹)
typedef struct NET_DVR_ALARMINFO_V40
{
    NET_DVR_ALRAM_FIXED_HEADER     struAlarmFixedHeader;    //±¨¾¯¹Ì¶¨²¿·Ö
    DWORD*                        pAlarmData;    //±¨¾¯¿É±ä²¿·ÖÄÚÈÝ
}NET_DVR_ALARMINFO_V40, *LPNET_DVR_ALARMINFO_V40;

//±¨¾¯ÊäÈë²ÎÊýÅäÖÃ
typedef struct 
{
    DWORD dwSize;
    BYTE sAlarmInName[NAME_LEN];    /* Ãû³Æ */
    BYTE byAlarmType;    //±¨¾¯Æ÷ÀàÐÍ,0£º³£¿ª,1£º³£±Õ
    BYTE byAlarmInHandle;    /* ÊÇ·ñ´¦Àí 0-²»´¦Àí 1-´¦Àí*/
    BYTE byChannel;                 // ±¨¾¯ÊäÈë´¥·¢ÖÇÄÜÊ¶±ðÍ¨µÀ
    BYTE byRes;                     
    NET_DVR_HANDLEEXCEPTION struAlarmHandleType;    /* ´¦Àí·½Ê½ */
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT];//²¼·ÀÊ±¼ä
    BYTE byRelRecordChan[MAX_CHANNUM]; //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
    BYTE byEnablePreset[MAX_CHANNUM];        /* ÊÇ·ñµ÷ÓÃÔ¤ÖÃµã 0-·ñ,1-ÊÇ*/
    BYTE byPresetNo[MAX_CHANNUM];            /* µ÷ÓÃµÄÔÆÌ¨Ô¤ÖÃµãÐòºÅ,Ò»¸ö±¨¾¯ÊäÈë¿ÉÒÔµ÷ÓÃ¶à¸öÍ¨µÀµÄÔÆÌ¨Ô¤ÖÃµã, 0xff±íÊ¾²»µ÷ÓÃÔ¤ÖÃµã¡£*/
    BYTE byEnableCruise[MAX_CHANNUM];        /* ÊÇ·ñµ÷ÓÃÑ²º½ 0-·ñ,1-ÊÇ*/
    BYTE byCruiseNo[MAX_CHANNUM];            /* Ñ²º½ */
    BYTE byEnablePtzTrack[MAX_CHANNUM];        /* ÊÇ·ñµ÷ÓÃ¹ì¼£ 0-·ñ,1-ÊÇ*/
    BYTE byPTZTrack[MAX_CHANNUM];            /* µ÷ÓÃµÄÔÆÌ¨µÄ¹ì¼£ÐòºÅ */
}NET_DVR_ALARMINCFG, *LPNET_DVR_ALARMINCFG;

//Ä£Äâ±¨¾¯ÊäÈë²ÎÊýÅäÖÃ
typedef struct
{
    DWORD     dwSize;
    BYTE        byEnableAlarmHandle; //´¦Àí±¨¾¯ÊäÈë
    BYTE        byRes1[3];
    BYTE        byAlarmInName[NAME_LEN]; //Ä£Äâ±¨¾¯ÊäÈëÃû³Æ
    WORD        wAlarmInUpper; //Ä£ÄâÊäÈëµçÑ¹ÉÏÏÞ£¬Êµ¼ÊÖµ³Ë10£¬·¶Î§0~360
    WORD        wAlarmInLower; //Ä£ÄâÊäÈëµçÑ¹ÏÂÏÞ£¬Êµ¼ÊÖµ³Ë10£¬·¶Î§0~360 
    NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;    /* ´¦Àí·½Ê½ */ 
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//²¼·ÀÊ±¼ä
    BYTE        byRelRecordChan[MAX_CHANNUM_V30]; //±»´¥·¢µÄÂ¼ÏñÍ¨µÀ
    BYTE        byRes2[100];
}NET_DVR_ANALOG_ALARMINCFG, *LPNET_DVR_ANALOG_ALARMINCFG;

//ÉÏ´«±¨¾¯ÐÅÏ¢(9000À©Õ¹)
typedef struct 
{
    DWORD dwAlarmType;/*0-ÐÅºÅÁ¿±¨¾¯,1-Ó²ÅÌÂú,2-ÐÅºÅ¶ªÊ§,3£­ÒÆ¶¯Õì²â,4£­Ó²ÅÌÎ´¸ñÊ½»¯,5-¶ÁÐ´Ó²ÅÌ³ö´í,6-ÕÚµ²±¨¾¯,7-ÖÆÊ½²»Æ¥Åä, 8-·Ç·¨·ÃÎÊ, 9-ÊÓÆµÐÅºÅÒì³£,
                      10-Â¼ÏñÒì³£,11- ÖÇÄÜ³¡¾°±ä»¯,12-ÕóÁÐÒì³£,13-Ç°¶Ë/Â¼Ïñ·Ö±æÂÊ²»Æ¥Åä,14-ÉêÇë½âÂë×ÊÔ´Ê§°Ü,15-ÖÇÄÜÕì²â, 16-POE¹©µçÒì³£±¨¾¯,17-ÉÁ¹âµÆÒì³£,
    18-´ÅÅÌÂú¸ººÉÒì³£±¨¾¯,19-ÒôÆµ¶ªÊ§*/
    DWORD dwAlarmInputNumber;/*±¨¾¯ÊäÈë¶Ë¿Ú*/
    BYTE byAlarmOutputNumber[MAX_ALARMOUT_V30];/*´¥·¢µÄÊä³ö¶Ë¿Ú£¬Îª1±íÊ¾¶ÔÓ¦Êä³ö*/
    BYTE byAlarmRelateChannel[MAX_CHANNUM_V30];/*´¥·¢µÄÂ¼ÏñÍ¨µÀ£¬Îª1±íÊ¾¶ÔÓ¦Â¼Ïñ, dwAlarmRelateChannel[0]¶ÔÓ¦µÚ1¸öÍ¨µÀ*/
    BYTE byChannel[MAX_CHANNUM_V30];/*dwAlarmTypeÎª2»ò3,6,9,10,14,19Ê±£¬±íÊ¾ÄÄ¸öÍ¨µÀ£¬dwChannel[0]¶ÔÓ¦µÚ1¸öÍ¨µÀ*/
    BYTE byDiskNumber[MAX_DISKNUM_V30];/*dwAlarmTypeÎª1,4,5Ê±,±íÊ¾ÄÄ¸öÓ²ÅÌ, dwDiskNumber[0]¶ÔÓ¦µÚ1¸öÓ²ÅÌ*/
    #ifdef SDK_CHEZAI
    NET_DVR_ADDIT_POSITION GPS_pos;  /* GPS¶¨Î»ÐÅÏ¢ */
    #endif
}NET_DVR_ALARMINFO_V30, *LPNET_DVR_ALARMINFO_V30;

typedef struct tagNET_DVR_ALARM_HOT_SPARE
{
    DWORD  dwSize;   //½á¹¹Ìå
    DWORD  dwExceptionCase;   //±¨¾¯Ô­Òò   0-ÍøÂçÒì³£
    NET_DVR_IPADDR  struDeviceIP;    //²úÉúÒì³£µÄÉè±¸IPµØÖ·
    BYTE    byRes[256];         //±£Áô
}NET_DVR_ALARM_HOT_SPARE, *LPNET_DVR_ALARM_HOT_SPARE;

typedef struct 
{
    DWORD dwAlarmType;/*0-ÐÅºÅÁ¿±¨¾¯,1-Ó²ÅÌÂú,2-ÐÅºÅ¶ªÊ§,3£­ÒÆ¶¯Õì²â,4£­Ó²ÅÌÎ´¸ñÊ½»¯,5-¶ÁÐ´Ó²ÅÌ³ö´í,6-ÕÚµ²±¨¾¯,7-ÖÆÊ½²»Æ¥Åä, 8-·Ç·¨·ÃÎÊ, 9-ÊÓÆµÐÅºÅÒì³££¬10-Â¼ÏñÒì³£ 11- ÖÇÄÜ³¡¾°±ä»¯*/
    DWORD dwAlarmInputNumber;/*±¨¾¯ÊäÈë¶Ë¿Ú*/
    DWORD dwAlarmOutputNumber[MAX_ALARMOUT];/*´¥·¢µÄÊä³ö¶Ë¿Ú£¬ÄÄÒ»Î»Îª1±íÊ¾¶ÔÓ¦ÄÄÒ»¸öÊä³ö*/
    DWORD dwAlarmRelateChannel[MAX_CHANNUM];/*´¥·¢µÄÂ¼ÏñÍ¨µÀ£¬ÄÄÒ»Î»Îª1±íÊ¾¶ÔÓ¦ÄÄÒ»Â·Â¼Ïñ, dwAlarmRelateChannel[0]¶ÔÓ¦µÚ1¸öÍ¨µÀ*/
    DWORD dwChannel[MAX_CHANNUM];/*dwAlarmTypeÎª2»ò3,6,9,10Ê±£¬±íÊ¾ÄÄ¸öÍ¨µÀ£¬dwChannel[0]Î»¶ÔÓ¦µÚ1¸öÍ¨µÀ*/
    DWORD dwDiskNumber[MAX_DISKNUM];/*dwAlarmTypeÎª1,4,5Ê±,±íÊ¾ÄÄ¸öÓ²ÅÌ, dwDiskNumber[0]Î»¶ÔÓ¦µÚ1¸öÓ²ÅÌ*/
}NET_DVR_ALARMINFO, *LPNET_DVR_ALARMINFO;

//////////////////////////////////////////////////////////////////////////////////////
//IPC½ÓÈë²ÎÊýÅäÖÃ
/* IPÉè±¸½á¹¹ */
typedef struct 
{
    DWORD dwEnable;                    /* ¸ÃIPÉè±¸ÊÇ·ñÆôÓÃ */
    BYTE sUserName[NAME_LEN];        /* ÓÃ»§Ãû */
    BYTE sPassword[PASSWD_LEN];        /* ÃÜÂë */ 
    NET_DVR_IPADDR struIP;            /* IPµØÖ· */
    WORD wDVRPort;                     /* ¶Ë¿ÚºÅ */
    BYTE byRes[34];                /* ±£Áô */
}NET_DVR_IPDEVINFO, *LPNET_DVR_IPDEVINFO;

#define  DEV_ID_LEN           32    //Éè±¸ID³¤¶È

//ipc½ÓÈëÉè±¸ÐÅÏ¢À©Õ¹£¬Ö§³ÖipÉè±¸µÄÓòÃûÌí¼Ó
typedef struct tagNET_DVR_IPDEVINFO_V31
{
    BYTE byEnable;                    //¸ÃIPÉè±¸ÊÇ·ñÓÐÐ§
    BYTE byProType;                    //Ð­ÒéÀàÐÍ£¬0-Ë½ÓÐÐ­Òé£¬1-ËÉÏÂÐ­Òé£¬2-Ë÷Äá
    BYTE byEnableQuickAdd;        // 0 ²»Ö§³Ö¿ìËÙÌí¼Ó  1 Ê¹ÓÃ¿ìËÙÌí¼Ó 
    // ¿ìËÙÌí¼ÓÐèÒªÉè±¸IPºÍÐ­ÒéÀàÐÍ£¬ÆäËûÐÅÏ¢ÓÉÉè±¸Ä¬ÈÏÖ¸¶¨
    BYTE byRes1;                    //±£Áô×Ö¶Î£¬ÖÃ0
    BYTE sUserName[NAME_LEN];        //ÓÃ»§Ãû
    BYTE sPassword[PASSWD_LEN];        //ÃÜÂë
    BYTE byDomain[MAX_DOMAIN_NAME];    //Éè±¸ÓòÃû
    NET_DVR_IPADDR struIP;            //IPµØÖ·
    WORD wDVRPort;                     // ¶Ë¿ÚºÅ
    BYTE  szDeviceID[DEV_ID_LEN];  //Éè±¸ID
    BYTE byRes2[2];                //±£Áô×Ö¶Î£¬ÖÃ0
}NET_DVR_IPDEVINFO_V31, *LPNET_DVR_IPDEVINFO_V31;

/* IPÍ¨µÀÆ¥Åä²ÎÊý */
typedef struct 
{
    BYTE byEnable;                    /* ¸ÃÍ¨µÀÊÇ·ñÔÚÏß */
    BYTE byIPID;                    //IPÉè±¸IDµÍ8Î»£¬µ±Éè±¸IDÎª0Ê±±íÊ¾Í¨µÀ²»¿ÉÓÃ
    BYTE byChannel;                    /* Í¨µÀºÅ */
    BYTE byIPIDHigh;                // IPÉè±¸IDµÄ¸ß8Î»
    BYTE byTransProtocol;            //´«ÊäÐ­ÒéÀàÐÍ0-TCP/auto(¾ßÌåÓÐÉè±¸¾ö¶¨)£¬1-UDP 2-¶à²¥ 3-½öTCP 4-auto
    BYTE byres[31];                    /* ±£Áô */
} NET_DVR_IPCHANINFO, *LPNET_DVR_IPCHANINFO;

/* IP½ÓÈëÅäÖÃ½á¹¹ */
typedef struct 
{
    DWORD dwSize;                                        /* ½á¹¹´óÐ¡ */
    NET_DVR_IPDEVINFO  struIPDevInfo[MAX_IP_DEVICE];    /* IPÉè±¸ */
    BYTE byAnalogChanEnable[MAX_ANALOG_CHANNUM];        /* Ä£ÄâÍ¨µÀÊÇ·ñÆôÓÃ£¬´ÓµÍµ½¸ß±íÊ¾1-32Í¨µÀ£¬0±íÊ¾ÎÞÐ§ 1ÓÐÐ§ */
    NET_DVR_IPCHANINFO struIPChanInfo[MAX_IP_CHANNEL];    /* IPÍ¨µÀ */    
}NET_DVR_IPPARACFG, *LPNET_DVR_IPPARACFG;
/* À©Õ¹IP½ÓÈëÅäÖÃ½á¹¹ */
typedef struct tagNET_DVR_IPPARACFG_V31
{
    DWORD dwSize;                                        /* ½á¹¹´óÐ¡ */
    NET_DVR_IPDEVINFO_V31  struIPDevInfo[MAX_IP_DEVICE];    /* IPÉè±¸ */
    BYTE byAnalogChanEnable[MAX_ANALOG_CHANNUM];        /* Ä£ÄâÍ¨µÀÊÇ·ñÆôÓÃ£¬´ÓµÍµ½¸ß±íÊ¾1-32Í¨µÀ£¬0±íÊ¾ÎÞÐ§ 1ÓÐÐ§ */
    NET_DVR_IPCHANINFO struIPChanInfo[MAX_IP_CHANNEL];    /* IPÍ¨µÀ */    
}NET_DVR_IPPARACFG_V31, *LPNET_DVR_IPPARACFG_V31;

typedef  struct tagNET_DVR_IPSERVER_STREAM
{
    BYTE    byEnable;   // ÊÇ·ñÔÚÏß
    BYTE    byRes[3];               // ±£Áô×Ö½Ú
    NET_DVR_IPADDR struIPServer;    //IPServer µØÖ·
    WORD    wPort;                  //IPServer ¶Ë¿Ú
    WORD    wDvrNameLen;            // DVR Ãû³Æ³¤¶È
    BYTE    byDVRName[NAME_LEN];    // DVRÃû³Æ
    WORD    wDVRSerialLen;          // ÐòÁÐºÅ³¤¶È
    WORD    byRes1[2];              // ±£Áô×Ö½Ú
    BYTE    byDVRSerialNumber[SERIALNO_LEN];    // DVRÐòÁÐºÅ³¤¶È
    BYTE    byUserName[NAME_LEN];   // DVR µÇÂ½ÓÃ»§Ãû
    BYTE    byPassWord[PASSWD_LEN]; // DVRµÇÂ½ÃÜÂë
    BYTE    byChannel;              // DVR Í¨µÀ
    BYTE    byRes2[11];             //  ±£Áô×Ö½Ú
}NET_DVR_IPSERVER_STREAM, *LPNET_DVR_IPSERVER_STREAM;

//Á÷Ã½Ìå·þÎñÆ÷»ù±¾ÅäÖÃ
typedef struct tagNET_DVR_STREAM_MEDIA_SERVER_CFG
{
    BYTE    byValid;            /*ÊÇ·ñ¿ÉÓÃ*/
    BYTE    byRes1[3];
    NET_DVR_IPADDR  struDevIP;      
    WORD    wDevPort;            /*Á÷Ã½Ìå·þÎñÆ÷¶Ë¿Ú*/    
    BYTE    byTransmitType;        /*´«ÊäÐ­ÒéÀàÐÍ 0-TCP£¬1-UDP*/
    BYTE    byRes2[69];
}NET_DVR_STREAM_MEDIA_SERVER_CFG,*LPNET_DVR_STREAM_MEDIA_SERVER_CFG;

//Éè±¸Í¨µÀÐÅÏ¢
typedef struct tagNET_DVR_DEV_CHAN_INFO
{
    NET_DVR_IPADDR     struIP;            //DVR IPµØÖ·
    WORD     wDVRPort;                 //¶Ë¿ÚºÅ
    BYTE     byChannel;                //Í¨µÀºÅ
    BYTE    byTransProtocol;        //´«ÊäÐ­ÒéÀàÐÍ0-TCP£¬1-UDP
    BYTE    byTransMode;            //´«ÊäÂëÁ÷Ä£Ê½ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷
    BYTE    byFactoryType;            /*Ç°¶ËÉè±¸³§¼ÒÀàÐÍ,Í¨¹ý½Ó¿Ú»ñÈ¡*/
    BYTE    byDeviceType; //Éè±¸ÀàÐÍ(ÊÓÆµ×ÛºÏÆ½Ì¨ÖÇÄÜ°åÊ¹ÓÃ)£¬1-½âÂëÆ÷£¨´ËÊ±¸ù¾ÝÊÓÆµ×ÛºÏÆ½Ì¨ÄÜÁ¦¼¯ÖÐbyVcaSupportChanMode×Ö¶ÎÀ´¾ö¶¨ÊÇÊ¹ÓÃ½âÂëÍ¨µÀ»¹ÊÇÏÔÊ¾Í¨µÀ£©£¬2-±àÂëÆ÷
    BYTE    byDispChan;//ÏÔÊ¾Í¨µÀºÅ,ÖÇÄÜÅäÖÃÊ¹ÓÃ
    BYTE    bySubDispChan;//ÏÔÊ¾Í¨µÀ×ÓÍ¨µÀºÅ£¬ÖÇÄÜÅäÖÃÊ±Ê¹ÓÃ
    BYTE    byResolution;    //; 1-CIF 2-4CIF 3-720P 4-1080P 5-500w´óÆÁ¿ØÖÆÆ÷Ê¹ÓÃ£¬´óÆÁ¿ØÖÆÆ÷»á¸ù¾Ý¸Ã²ÎÊý·ÖÅä½âÂë×ÊÔ´
    BYTE    byRes[2];
    BYTE    byDomain[MAX_DOMAIN_NAME];    //Éè±¸ÓòÃû
    BYTE    sUserName[NAME_LEN];    //¼à¿ØÖ÷»úµÇÂ½ÕÊºÅ
    BYTE    sPassword[PASSWD_LEN];    //¼à¿ØÖ÷»úÃÜÂë
}NET_DVR_DEV_CHAN_INFO,*LPNET_DVR_DEV_CHAN_INFO;

//Ö±½ÓÍ¨¹ýÁ÷Ã½ÌåÈ¡Á÷
typedef struct tagNET_DVR_PU_STREAM_CFG
{
    DWORD                                dwSize;
    NET_DVR_STREAM_MEDIA_SERVER_CFG    struStreamMediaSvrCfg;
    NET_DVR_DEV_CHAN_INFO                struDevChanInfo;
}NET_DVR_PU_STREAM_CFG,*LPNET_DVR_PU_STREAM_CFG;

typedef struct tagNET_DVR_DDNS_STREAM_CFG
{
    BYTE   byEnable;   // ÊÇ·ñÆôÓÃ
    BYTE   byRes1[3];
    NET_DVR_IPADDR  struStreamServer;            //Á÷Ã½Ìå·þÎñÆ÷µØÖ·
    WORD   wStreamServerPort;           //Á÷Ã½Ìå·þÎñÆ÷¶Ë¿Ú   
    BYTE   byStreamServerTransmitType;  //Á÷Ã½Ìå´«ÊäÐ­ÒéÀàÐÍ 0-TCP£¬1-UDP
    BYTE   byRes2;
    NET_DVR_IPADDR   struIPServer;          //IPSERVERµØÖ·
    WORD   wIPServerPort;        //IPserver¶Ë¿ÚºÅ
    BYTE   byRes3[2];           
    BYTE   sDVRName[NAME_LEN];   //DVRÃû³Æ
    WORD   wDVRNameLen;            // DVRÃû³Æ³¤¶È
    WORD   wDVRSerialLen;          // ÐòÁÐºÅ³¤¶È
    BYTE   sDVRSerialNumber[SERIALNO_LEN];    // DVRÐòÁÐºÅ
    BYTE   sUserName[NAME_LEN];   // DVR µÇÂ½ÓÃ»§Ãû
    BYTE   sPassWord[PASSWD_LEN]; // DVRµÇÂ½ÃÜÂë
    WORD   wDVRPort;   //DVR¶Ë¿ÚºÅ
    BYTE   byRes4[2];    
    BYTE   byChannel;              // DVR Í¨µÀ
    BYTE   byTransProtocol; //´«ÊäÐ­ÒéÀàÐÍ0-TCP£¬1-UDP
    BYTE   byTransMode; //´«ÊäÂëÁ÷Ä£Ê½ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷
    BYTE   byFactoryType; //Ç°¶ËÉè±¸³§¼ÒÀàÐÍ,Í¨¹ý½Ó¿Ú»ñÈ¡
}NET_DVR_DDNS_STREAM_CFG, *LPNET_DVR_DDNS_STREAM_CFG;

#define URL_LEN     240   //URL³¤¶È
typedef struct tagNET_DVR_PU_STREAM_URL
{
    BYTE    byEnable; 
    BYTE    strURL[URL_LEN];
    BYTE    byTransPortocol ; // ´«ÊäÐ­ÒéÀàÐÍ 0-tcp  1-UDP
    WORD    wIPID;  //Éè±¸IDºÅ£¬wIPID = iDevInfoIndex + iGroupNO*64 +1
    BYTE    byChannel;  //Í¨µÀºÅ
    BYTE    byRes[7];   
}NET_DVR_PU_STREAM_URL, *LPNET_DVR_PU_STREAM_URL;

typedef struct tagNET_DVR_HKDDNS_STREAM
{
    BYTE    byEnable;                 // ÊÇ·ñÔÚÏß
    BYTE    byRes[3];               // ±£Áô×Ö½Ú
    BYTE    byDDNSDomain[64];        // hiDDNS·þÎñÆ÷
    WORD    wPort;                  // hiDDNS ¶Ë¿Ú
    WORD    wAliasLen;              // ±ðÃû³¤¶È
    BYTE    byAlias[NAME_LEN];         // ±ðÃû
    WORD    wDVRSerialLen;          // ÐòÁÐºÅ³¤¶È
    BYTE    byRes1[2];              // ±£Áô×Ö½Ú
    BYTE    byDVRSerialNumber[SERIALNO_LEN];    // DVRÐòÁÐºÅ
    BYTE    byUserName[NAME_LEN];   // DVR µÇÂ½ÓÃ»§Ãû
    BYTE    byPassWord[PASSWD_LEN]; // DVRµÇÂ½ÃÜÂë
    BYTE    byChannel;              // DVRÍ¨µÀ
    BYTE    byRes2[11];             // ±£Áô×Ö    
}NET_DVR_HKDDNS_STREAM, *LPNET_DVR_HKDDNS_STREAM;

typedef struct tagNET_DVR_IPCHANINFO_V40
{
    BYTE    byEnable;                /* ¸ÃÍ¨µÀÊÇ·ñÔÚÏß */
    BYTE    byRes1;
    WORD    wIPID;                  //IPÉè±¸ID
    DWORD     dwChannel;                //Í¨µÀºÅ
    BYTE    byTransProtocol;        //´«ÊäÐ­ÒéÀàÐÍ0-TCP£¬1-UDP
    BYTE    byTransMode;            //´«ÊäÂëÁ÷Ä£Ê½ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷
    BYTE    byFactoryType;            /*Ç°¶ËÉè±¸³§¼ÒÀàÐÍ,Í¨¹ý½Ó¿Ú»ñÈ¡*/
    BYTE    byRes[241];
}NET_DVR_IPCHANINFO_V40,*LPNET_DVR_IPCHANINFO_V40;

// °îÅµCVR
#define MAX_ID_COUNT    256
#define MAX_STREAM_ID_COUNT    1024
#define STREAM_ID_LEN   32
#define PLAN_ID_LEN  32
#define DEVICE_NO_LEN  24
#define MAX_VOLUMENAME_LEN 32  //Â¼Ïñ¾íÃû³Æ
#define MAX_VAG_CHANNO_LEN  32  //VAGÐ­ÒéÈ¡Á÷Ê±Í¨µÀºÅ±àÂë³¤¶È

#define MAX_STREAM_ID_NUM    30        //×î´óÁ÷IDÊýÄ¿

// Á÷ÐÅÏ¢ - 72×Ö½Ú³¤
typedef struct tagNET_DVR_STREAM_INFO 
{
    DWORD dwSize;
    BYTE  byID[STREAM_ID_LEN];      //IDÊý¾Ý
    DWORD dwChannel;                //¹ØÁªÉè±¸Í¨µÀ£¬µÈÓÚ0xffffffffÊ±£¬±íÊ¾²»¹ØÁª
    BYTE  byRes[32];                //±£Áô
}NET_DVR_STREAM_INFO, *LPNET_DVR_STREAM_INFO;

typedef struct tagNET_DVR_RTSP_PROTOCAL_CFG
{ 
    BYTE    byEnable;
    BYTE    byLocalBackUp; //ÊÇ·ñ±¾µØ±¸·Ý 
    BYTE    byRes[2]; 
    BYTE    strURL[URL_LEN_V40];
    DWORD   dwProtocalType;   //Ð­ÒéÀàÐÍ
    BYTE    sUserName[NAME_LEN];   //Éè±¸µÇÂ½ÓÃ»§Ãû
    BYTE    sPassWord[PASSWD_LEN]; // Éè±¸µÇÂ½ÃÜÂë
    BYTE    byAddress[MAX_DOMAIN_NAME];  //Ç°¶ËIP»òÕßÓòÃû,ÐèÒªÉè±¸½âÎö
    //½âÎö·½Ê½ÎªÓÐ×ÖÄ¸´æÔÚÇÒÓÐ'.'ÔòÈÏÎªÊÇÓòÃû,·ñÔòÎªIPµØÖ·
    WORD    wPort;
    BYTE    byRes1[122];             //±£Áô
}NET_DVR_RTSP_PROTOCAL_CFG, *LPNET_DVR_RTSP_PROTOCAL_CFG;

typedef union tagNET_DVR_GET_STREAM_UNION
{
    NET_DVR_IPCHANINFO      struChanInfo;    /*IPÍ¨µÀÐÅÏ¢*/
    NET_DVR_IPSERVER_STREAM struIPServerStream;  // IPServerÈ¥Á÷
    NET_DVR_PU_STREAM_CFG   struPUStream;     //  Í¨¹ýÇ°¶ËÉè±¸»ñÈ¡Á÷Ã½ÌåÈ¥Á÷
    NET_DVR_DDNS_STREAM_CFG struDDNSStream;     //Í¨¹ýIPServerºÍÁ÷Ã½ÌåÈ¡Á÷
    NET_DVR_PU_STREAM_URL   struStreamUrl;        //Í¨¹ýÁ÷Ã½Ìåµ½urlÈ¡Á÷
    NET_DVR_HKDDNS_STREAM    struHkDDNSStream;   //Í¨¹ýhiDDNSÈ¥È¡Á÷
    NET_DVR_IPCHANINFO_V40 struIPChan; //Ö±½Ó´ÓÉè±¸È¡Á÷£¨À©Õ¹£©
}NET_DVR_GET_STREAM_UNION, *LPNET_DVR_GET_STREAM_UNION;

typedef enum
{
    NET_SDK_IP_DEVICE = 0,
        NET_SDK_STREAM_MEDIA,
        NET_SDK_IPSERVER,
        NET_SDK_DDNS_STREAM_CFG,
        NET_SDK_STREAM_MEDIA_URL,
        NET_SDK_HKDDNS,
        NET_SDK_IP_DEVICE_ADV,
        NET_SDK_IP_DEVICE_V40, 
        NET_SDK_RTSP  
}GET_STREAM_TYPE;

typedef struct tagNET_DVR_STREAM_MODE
{
    BYTE    byGetStreamType; //È¡Á÷·½Ê½GET_STREAM_TYPE£¬0-Ö±½Ó´ÓÉè±¸È¡Á÷£¬1-´ÓÁ÷Ã½ÌåÈ¡Á÷¡¢2-Í¨¹ýIPServer»ñµÃipµØÖ·ºóÈ¡Á÷,3.Í¨¹ýIPServerÕÒµ½Éè±¸£¬ÔÙÍ¨¹ýÁ÷Ã½ÌåÈ¥Éè±¸µÄÁ÷
    //4-Í¨¹ýÁ÷Ã½ÌåÓÉURLÈ¥È¡Á÷,5-Í¨¹ýhkDDNSÈ¡Á÷£¬6-Ö±½Ó´ÓÉè±¸È¡Á÷(À©Õ¹)£¬Ê¹ÓÃNET_DVR_IPCHANINFO_V40½á¹¹, 7-Í¨¹ýRTSPÐ­Òé·½Ê½½øÐÐÈ¡Á÷
    BYTE    byRes[3];        //±£Áô×Ö½Ú
    NET_DVR_GET_STREAM_UNION uGetStream;    // ²»Í¬È¡Á÷·½Ê½½á¹¹Ìå
}NET_DVR_STREAM_MODE, *LPNET_DVR_STREAM_MODE;

//À©Õ¹IP½ÓÈëÅäÖÃÉè±¸
typedef struct tagNET_DVR_IPPARACFG_V40
{
    DWORD      dwSize;                            /* ½á¹¹´óÐ¡ */
    DWORD       dwGroupNum;                    //     Éè±¸Ö§³ÖµÄ×Ü×éÊý    
    DWORD      dwAChanNum;                    //×î´óÄ£ÄâÍ¨µÀ¸öÊý
    DWORD      dwDChanNum;                  //Êý×ÖÍ¨µÀ¸öÊý
    DWORD      dwStartDChan;                    //ÆðÊ¼Êý×ÖÍ¨µÀ
    BYTE       byAnalogChanEnable[MAX_CHANNUM_V30];    /* Ä£ÄâÍ¨µÀÊÇ·ñÆôÓÃ£¬´ÓµÍµ½¸ß±íÊ¾1-64Í¨µÀ£¬0±íÊ¾ÎÞÐ§ 1ÓÐÐ§ */
    NET_DVR_IPDEVINFO_V31   struIPDevInfo[MAX_IP_DEVICE_V40];      /* IPÉè±¸ */
    NET_DVR_STREAM_MODE  struStreamMode[MAX_CHANNUM_V30];
    BYTE            byRes2[20];                 // ±£Áô×Ö½Ú
}NET_DVR_IPPARACFG_V40, *LPNET_DVR_IPPARACFG_V40;


//ÎªCVRÀ©Õ¹µÄ±¨¾¯ÀàÐÍ
typedef struct tagNET_DVR_ALARMINFO_DEV
{
    DWORD     dwAlarmType;  //0-±àÂëÆ÷(Í¨µÀ)ÐÅºÅÁ¿±¨¾¯£»1-Ë½ÓÐ¾í¶þËð»µ£»2- NVR·þÎñÍË³ö£»
    //3-±àÂëÆ÷×´Ì¬Òì³££»4-ÏµÍ³Ê±ÖÓÒì³££»5-Â¼Ïñ¾íÊ£ÓàÈÝÁ¿¹ýµÍ£»
    //6-±àÂëÆ÷(Í¨µÀ)ÒÆ¶¯Õì²â±¨¾¯£»7-±àÂëÆ÷(Í¨µÀ)ÕÚµ²±¨¾¯¡££»8-Â¼Ïñ¶ªÊ§±¨¾¯; 9-ÊÓÆµÊµÊ±¼à²â±¨¾¯; 10-×ÊÔ´Ê¹ÓÃÂÊ¸æ¾¯; 11- CVR×Ô¶¯ÐÞ¸´Òì³££¬ 12-Â¼ÏñÒì³£
    NET_DVR_TIME   struTime;     //±¨¾¯Ê±¼ä
    BYTE       byRes[32];    //±£Áô
    DWORD      dwNumber;     //ÊýÄ¿
    WORD       *pNO;         //dwNumber¸öWORD; Ã¿¸öWORD±íÊ¾Ò»¸öÍ¨µÀºÅ£¬»òÕß´ÅÅÌºÅ, ÎÞÐ§Ê±Îª0
}NET_DVR_ALARMINFO_DEV, *LPNET_DVR_ALARMINFO_DEV;

/* ±¨¾¯Êä³ö²ÎÊý */
typedef struct 
{
    BYTE byIPID;                    /* IPÉè±¸IDÈ¡Öµ1- MAX_IP_DEVICE */
    BYTE byAlarmOut;                /* ±¨¾¯Êä³öºÅ */
    BYTE byRes[18];                    /* ±£Áô */
}NET_DVR_IPALARMOUTINFO, *LPNET_DVR_IPALARMOUTINFO;

/* IP±¨¾¯Êä³öÅäÖÃ½á¹¹ */
typedef struct 
{
    DWORD dwSize;                                    /* ½á¹¹´óÐ¡ */    
    NET_DVR_IPALARMOUTINFO struIPAlarmOutInfo[MAX_IP_ALARMOUT];/* IP±¨¾¯Êä³ö */
}NET_DVR_IPALARMOUTCFG, *LPNET_DVR_IPALARMOUTCFG;

/* IP±¨¾¯Êä³ö²ÎÊý */
typedef struct tagNET_DVR_IPALARMOUTINFO_V40
{
    DWORD dwIPID;                    /* IPÉè±¸ID */
    DWORD dwAlarmOut;                /* IPÉè±¸ID¶ÔÓ¦µÄ±¨¾¯Êä³öºÅ */
    BYTE  byRes[32];                /* ±£Áô */
}NET_DVR_IPALARMOUTINFO_V40, *LPNET_DVR_IPALARMOUTINFO_V40;/*±¨¾¯Êä³ö²ÎÊý*/

typedef struct tagNET_DVR_IPALARMOUTCFG_V40
{
    DWORD   dwSize;  //½á¹¹Ìå³¤¶È
    DWORD   dwCurIPAlarmOutNum;
    NET_DVR_IPALARMOUTINFO_V40 struIPAlarmOutInfo[MAX_IP_ALARMOUT_V40];/*IP±¨¾¯Êä³ö*/
    BYTE     byRes[256];
}NET_DVR_IPALARMOUTCFG_V40, *LPNET_DVR_IPALARMOUTCFG_V40; /*IP±¨¾¯Êä³ö*/

/* ±¨¾¯ÊäÈë²ÎÊý */
typedef struct 
{
    BYTE byIPID;                    /* IPÉè±¸IDÈ¡Öµ1- MAX_IP_DEVICE */
    BYTE byAlarmIn;                    /* ±¨¾¯ÊäÈëºÅ */
    BYTE byRes[18];                    /* ±£Áô */
}NET_DVR_IPALARMININFO, *LPNET_DVR_IPALARMININFO;

/* IP±¨¾¯ÊäÈëÅäÖÃ½á¹¹ */
typedef struct 
{
    DWORD dwSize;                                    /* ½á¹¹´óÐ¡ */    
    NET_DVR_IPALARMININFO struIPAlarmInInfo[MAX_IP_ALARMIN];/* IP±¨¾¯ÊäÈë */
}NET_DVR_IPALARMINCFG, *LPNET_DVR_IPALARMINCFG;

/* IP±¨¾¯ÊäÈë²ÎÊý */
typedef struct tagNET_DVR_IPALARMININFO_V40
{
    DWORD dwIPID;                    /* IPÉè±¸ID */
    DWORD dwAlarmIn;                /* IPÉè±¸ID¶ÔÓ¦µÄ±¨¾¯ÊäÈëºÅ */
    BYTE  byRes[32];                /* ±£Áô */
}NET_DVR_IPALARMININFO_V40, *LPNET_DVR_IPALARMININFO_V40;   /* ±¨¾¯ÊäÈë²ÎÊý */

typedef struct tagNET_DVR_IPALARMINCFG_V40
{
    DWORD   dwSize;  //½á¹¹Ìå³¤¶È
    DWORD   dwCurIPAlarmInNum;  //µ±Ç°±¨¾¯ÊäÈë¿ÚÊý
    NET_DVR_IPALARMININFO_V40 struIPAlarmInInfo[MAX_IP_ALARMIN_V40];/* IP±¨¾¯ÊäÈë*/
    BYTE     byRes[256];
}NET_DVR_IPALARMINCFG_V40, *LPNET_DVR_IPALARMINCFG_V40; /*IP±¨¾¯ÊäÈë×ÊÔ´*/

//ipc alarm info
typedef struct tagNET_DVR_IPALARMINFO
{
    NET_DVR_IPDEVINFO  struIPDevInfo[MAX_IP_DEVICE];            /* IPÉè±¸ */
    BYTE byAnalogChanEnable[MAX_ANALOG_CHANNUM];                /* Ä£ÄâÍ¨µÀÊÇ·ñÆôÓÃ£¬0-Î´ÆôÓÃ 1-ÆôÓÃ */
    NET_DVR_IPCHANINFO struIPChanInfo[MAX_IP_CHANNEL];            /* IPÍ¨µÀ */
    NET_DVR_IPALARMININFO struIPAlarmInInfo[MAX_IP_ALARMIN];    /* IP±¨¾¯ÊäÈë */
    NET_DVR_IPALARMOUTINFO struIPAlarmOutInfo[MAX_IP_ALARMOUT]; /* IP±¨¾¯Êä³ö */
}NET_DVR_IPALARMINFO, *LPNET_DVR_IPALARMINFO;

//ipcÅäÖÃ¸Ä±ä±¨¾¯ÐÅÏ¢À©Õ¹ 9000_1.1
typedef struct tagNET_DVR_IPALARMINFO_V31
{
    NET_DVR_IPDEVINFO_V31  struIPDevInfo[MAX_IP_DEVICE];            /* IPÉè±¸ */
    BYTE byAnalogChanEnable[MAX_ANALOG_CHANNUM];                /* Ä£ÄâÍ¨µÀÊÇ·ñÆôÓÃ£¬0-Î´ÆôÓÃ 1-ÆôÓÃ */
    NET_DVR_IPCHANINFO struIPChanInfo[MAX_IP_CHANNEL];            /* IPÍ¨µÀ */
    NET_DVR_IPALARMININFO struIPAlarmInInfo[MAX_IP_ALARMIN];    /* IP±¨¾¯ÊäÈë */
    NET_DVR_IPALARMOUTINFO struIPAlarmOutInfo[MAX_IP_ALARMOUT]; /* IP±¨¾¯Êä³ö */   
}NET_DVR_IPALARMINFO_V31, *LPNET_DVR_IPALARMINFO_V31;

typedef struct tagNET_DVR_IPALARMINFO_V40
{
    NET_DVR_IPDEVINFO_V31 struIPDevInfo[MAX_IP_DEVICE_V40];           // IPÉè±¸
    BYTE     byAnalogChanEnable[MAX_CHANNUM_V30];           /* Ä£ÄâÍ¨µÀÊÇ·ñÆôÓÃ£¬0-Î´ÆôÓÃ 1-ÆôÓÃ */
    NET_DVR_IPCHANINFO struIPChanInfo[MAX_CHANNUM_V30];            /* IPÍ¨µÀ */
    NET_DVR_IPALARMININFO struIPAlarmInInfo[MAX_IP_ALARMIN];    /* IP±¨¾¯ÊäÈë */
    NET_DVR_IPALARMOUTINFO struIPAlarmOutInfo[MAX_IP_ALARMOUT]; /* IP±¨¾¯Êä³ö */   
    BYTE                    byRes[20];                          // ±£Áô×Ö½Ú
}NET_DVR_IPALARMINFO_V40, *LPNET_DVR_IPALARMINFO_V40;

typedef enum _HD_STAT_
{
    HD_STAT_OK                    =    0,    /* Õý³£ */
        HD_STAT_UNFORMATTED            =    1,    /* Î´¸ñÊ½»¯ */
        HD_STAT_ERROR               =    2,    /* ´íÎó */
        HD_STAT_SMART_FAILED        =    3,    /* SMART×´Ì¬ */
        HD_STAT_MISMATCH            =    4,    /* ²»Æ¥Åä */
        HD_STAT_IDLE                =    5,    /* ÐÝÃß*/
        NET_HD_STAT_OFFLINE         =    6,    /* ÍøÂçÅÌ´¦ÓÚÎ´Á¬½Ó×´Ì¬ */
        HD_RIADVD_EXPAND            =   7,    /* ÐéÄâ´ÅÅÌ¿ÉÀ©ÈÝ */
        HD_STAT_REPARING            =   10,   /* Ó²ÅÌÕýÔÚÐÞ¸´(9000 2.0) */
        HD_STAT_FORMATING           =   11,   /* Ó²ÅÌÕýÔÚ¸ñÊ½»¯(9000 2.0) */ 
}HD_STAT;


//±¾µØÓ²ÅÌÐÅÏ¢ÅäÖÃ
typedef struct
{
    DWORD dwHDNo;         /*Ó²ÅÌºÅ, È¡Öµ0~MAX_DISKNUM_V30-1*/
    DWORD dwCapacity;     /*Ó²ÅÌÈÝÁ¿(²»¿ÉÉèÖÃ)*/
    DWORD dwFreeSpace;    /*Ó²ÅÌÊ£Óà¿Õ¼ä(²»¿ÉÉèÖÃ)*/
    DWORD dwHdStatus;     //Ó²ÅÌ×´Ì¬(²»¿ÉÉèÖÃ) HD_STAT 0-Õý³£, 1-Î´¸ñÊ½»¯, 2-´íÎó, 3-SMART×´Ì¬, 
    //4-²»Æ¥Åä, 5-ÐÝÃß 6-ÍøÂçÓ²ÅÌ²»ÔÚÏß 7-ÐéÄâ´ÅÅÌ¿ÉÀ©ÈÝ 10-Ó²ÅÌÕýÔÚÐÞ¸´
    //11-Ó²ÅÌÕýÔÚ¸ñÊ½»¯ 12-Ó²ÅÌÕýÔÚµÈ´ý¸ñÊ½»¯ 13-Ó²ÅÌÒÑÐ¶ÔØ 14-±¾µØÓ²ÅÌ²»´æÔÚ
    //15-ÕýÔÚÉ¾³ý(ÍøÂçÓ²ÅÌ),16-ÒÑËø¶¨
    BYTE  byHDAttr;       /*0-ÆÕÍ¨, 1-ÈßÓà; 2-Ö»¶Á 3-´æµµ£¨CVR×¨ÓÃ£©£¬4-²»¿É¶ÁÐ´*/
    BYTE  byHDType;          /*0-±¾µØÓ²ÅÌ,1-ESATAÓ²ÅÌ,2-NASÓ²ÅÌ,3-iSCSIÓ²ÅÌ 4-ArrayÐéÄâ´ÅÅÌ,5-SD¿¨*/
    BYTE  byDiskDriver;   // Öµ ´ú±íÆäASCII×Ö·û 
    BYTE  byRes1;
    DWORD dwHdGroup;      /*ÊôÓÚÄÄ¸öÅÌ×é 1-MAX_HD_GROUP*/
    BYTE  byRecycling;   // ÊÇ·ñÑ­»·ÀûÓÃ 0£º²»Ñ­»·ÀûÓÃ£¬1£ºÑ­»·ÀûÓÃ
    BYTE  byRes2[3];
    DWORD  dwStorageType;    //°´Î»±íÊ¾ 0-²»Ö§³Ö ·Ç0-Ö§³Ö
    // dwStorageType & 0x1 ±íÊ¾ÊÇ·ñÊÇÆÕÍ¨Â¼Ïñ×¨ÓÃ´æ´¢ÅÌ     
    // dwStorageType & 0x2  ±íÊ¾ÊÇ·ñÊÇ³éÖ¡Â¼Ïñ×¨ÓÃ´æ´¢ÅÌ
    // dwStorageType & 0x4 ±íÊ¾ÊÇ·ñÊÇÍ¼Æ¬Â¼Ïñ×¨ÓÃ´æ´¢ÅÌ
    
    DWORD dwPictureCapacity; //Ó²ÅÌÍ¼Æ¬ÈÝÁ¿(²»¿ÉÉèÖÃ)£¬µ¥Î»:MB
    DWORD dwFreePictureSpace; //Ê£ÓàÍ¼Æ¬¿Õ¼ä(²»¿ÉÉèÖÃ)£¬µ¥Î»:MB
    BYTE  byRes3[104];
}NET_DVR_SINGLE_HD, *LPNET_DVR_SINGLE_HD;

typedef struct
{
    DWORD dwSize;
    DWORD dwHDCount;          /*Ó²ÅÌÊý(²»¿ÉÉèÖÃ)*/
    NET_DVR_SINGLE_HD struHDInfo[MAX_DISKNUM_V30];//Ó²ÅÌÏà¹Ø²Ù×÷¶¼ÐèÒªÖØÆô²ÅÄÜÉúÐ§£»
}NET_DVR_HDCFG, *LPNET_DVR_HDCFG;

//±¾µØÅÌ×éÐÅÏ¢ÅäÖÃÀ©Õ¹
typedef struct tagNET_DVR_SINGLE_HDGROUP_V40
{
    DWORD     dwHDGroupNo;       /*ÅÌ×éºÅ(²»¿ÉÉèÖÃ) 1-MAX_HD_GROUP*/        
    DWORD      dwRelRecordChan[MAX_CHANNUM_V40];  //´¥·¢µÄÂ¼ÏñÍ¨µÀ£¬°´Öµ±íÊ¾£¬Óöµ½0xffffffffÊ±ºóÐøÊÓÎªÎÞÐ§     
    BYTE       byRes[64];                /* ±£Áô */
}NET_DVR_SINGLE_HDGROUP_V40, *LPNET_DVR_SINGLE_HDGROUP_V40;

typedef struct tagNET_DVR_HDGROUP_CFG_V40
{
    DWORD      dwSize;                //½á¹¹Ìå´óÐ¡
    DWORD     dwMaxHDGroupNum;           //Éè±¸Ö§³ÖµÄ×î´óÅÌ×éÊý-Ö»¶Á
    DWORD     dwCurHDGroupNum;       /*µ±Ç°ÅäÖÃµÄÅÌ×éÊý*/
    NET_DVR_SINGLE_HDGROUP_V40 struHDGroupAttr[MAX_HD_GROUP]; //Ó²ÅÌÏà¹Ø²Ù×÷¶¼ÐèÒªÖØÆô²ÅÄÜÉúÐ§£»
    BYTE       byRes[128]; //±£Áô
}NET_DVR_HDGROUP_CFG_V40, *LPNET_DVR_HDGROUP_CFG_V40;

//±¾µØÅÌ×éÐÅÏ¢ÅäÖÃ
typedef struct
{
    DWORD dwHDGroupNo;       /*ÅÌ×éºÅ(²»¿ÉÉèÖÃ) 1-MAX_HD_GROUP*/        
    BYTE byHDGroupChans[MAX_CHANNUM_V30]; /*ÅÌ×é¶ÔÓ¦µÄÂ¼ÏñÍ¨µÀ, 0-±íÊ¾¸ÃÍ¨µÀ²»Â¼Ïóµ½¸ÃÅÌ×é£¬1-±íÊ¾Â¼Ïóµ½¸ÃÅÌ×é*/
    BYTE byRes[8];
}NET_DVR_SINGLE_HDGROUP, *LPNET_DVR_SINGLE_HDGROUP;

typedef struct
{
    DWORD dwSize;
    DWORD dwHDGroupCount;        /*ÅÌ×é×ÜÊý(²»¿ÉÉèÖÃ)*/
    NET_DVR_SINGLE_HDGROUP struHDGroupAttr[MAX_HD_GROUP];//Ó²ÅÌÏà¹Ø²Ù×÷¶¼ÐèÒªÖØÆô²ÅÄÜÉúÐ§£»
}NET_DVR_HDGROUP_CFG, *LPNET_DVR_HDGROUP_CFG;


//ÅäÖÃËõ·Å²ÎÊýµÄ½á¹¹
typedef struct
{
    DWORD dwSize;
    DWORD dwMajorScale;    /* Ö÷ÏÔÊ¾ 0-²»Ëõ·Å£¬1-Ëõ·Å*/
    DWORD dwMinorScale;    /* ¸¨ÏÔÊ¾ 0-²»Ëõ·Å£¬1-Ëõ·Å*/
    DWORD dwRes[2];
}NET_DVR_SCALECFG, *LPNET_DVR_SCALECFG;



//DVR±¨¾¯Êä³ö(9000À©Õ¹)
typedef struct 
{
    DWORD dwSize;
    BYTE sAlarmOutName[NAME_LEN];    /* Ãû³Æ */
    DWORD dwAlarmOutDelay;    /* Êä³ö±£³ÖÊ±¼ä(-1ÎªÎÞÏÞ£¬ÊÖ¶¯¹Ø±Õ) */
    //0-5Ãë,1-10Ãë,2-30Ãë,3-1·ÖÖÓ,4-2·ÖÖÓ,5-5·ÖÖÓ,6-10·ÖÖÓ,7-ÊÖ¶¯
    NET_DVR_SCHEDTIME struAlarmOutTime[MAX_DAYS][MAX_TIMESEGMENT_V30];/* ±¨¾¯Êä³ö¼¤»îÊ±¼ä¶Î */
    BYTE byRes[16];
}NET_DVR_ALARMOUTCFG_V30, *LPNET_DVR_ALARMOUTCFG_V30;

//DVR±¨¾¯Êä³ö
typedef struct 
{
    DWORD dwSize;
    BYTE sAlarmOutName[NAME_LEN];    /* Ãû³Æ */
    DWORD dwAlarmOutDelay;    /* Êä³ö±£³ÖÊ±¼ä(-1ÎªÎÞÏÞ£¬ÊÖ¶¯¹Ø±Õ) */
    //0-5Ãë,1-10Ãë,2-30Ãë,3-1·ÖÖÓ,4-2·ÖÖÓ,5-5·ÖÖÓ,6-10·ÖÖÓ,7-ÊÖ¶¯, 8-1Ãë, 9-3Ãë
    NET_DVR_SCHEDTIME struAlarmOutTime[MAX_DAYS][MAX_TIMESEGMENT];/* ±¨¾¯Êä³ö¼¤»îÊ±¼ä¶Î */
}NET_DVR_ALARMOUTCFG, *LPNET_DVR_ALARMOUTCFG;

//DVR±¾µØÔ¤ÀÀ²ÎÊý(9000À©Õ¹)
/*ÇÐ»»ÊÇÖ¸ÔÚµ±Ç°Ô¤ÀÀÄ£Ê½ÏÂÇÐ»»ÏÔÊ¾»­Ãæ£¬¶ø²»ÊÇÇÐ»»Ô¤ÀÀÄ£Ê½¡£±ÈÈçbyPreviewNumberÎª0£¨1»­Ãæ£©£¬bySwitchSeq[0][0] = 1,bySwitchSeq[0][1] = 2,bySwitchSeq[0][2] = 3 
Ôò±¾µØ»­ÃæÒ»Ö±ÊÇ1»­Ãæ£¬È»ºóÔÚÊä³ö»­Ãæ°´1,2,3Í¨µÀË³ÐòÇÐ»»*/
typedef struct 
{
    DWORD dwSize;
    BYTE byPreviewNumber;//Ô¤ÀÀÄ£Ê½,0-1»­Ãæ,1-4»­Ãæ,2-9»­Ãæ,3-16»­Ãæ,0xff:×î´ó»­Ãæ
    BYTE byEnableAudio;//ÊÇ·ñÉùÒôÔ¤ÀÀ,0-²»Ô¤ÀÀ,1-Ô¤ÀÀ
    WORD wSwitchTime;//ÇÐ»»Ê±¼ä,0-²»ÇÐ»»,1-5s,2-10s,3-20s,4-30s,5-60s,6-120s,7-300s
    BYTE bySwitchSeq[MAX_PREVIEW_MODE][MAX_WINDOW_V30];//ÇÐ»»Ë³Ðò,Èç¹ûlSwitchSeq[i]Îª 0xff±íÊ¾²»ÓÃ
    BYTE byRes[24];
}NET_DVR_PREVIEWCFG_V30, *LPNET_DVR_PREVIEWCFG_V30;

//DVR±¾µØÔ¤ÀÀ²ÎÊý
typedef struct 
{
    DWORD dwSize;
    BYTE byPreviewNumber;//Ô¤ÀÀÊýÄ¿,0-1»­Ãæ,1-4»­Ãæ,2-9»­Ãæ,3-16»­Ãæ,0xff:×î´ó»­Ãæ
    BYTE byEnableAudio;//ÊÇ·ñÉùÒôÔ¤ÀÀ,0-²»Ô¤ÀÀ,1-Ô¤ÀÀ
    WORD wSwitchTime;//ÇÐ»»Ê±¼ä,0-²»ÇÐ»»,1-5s,2-10s,3-20s,4-30s,5-60s,6-120s,7-300s
    BYTE bySwitchSeq[MAX_WINDOW];//ÇÐ»»Ë³Ðò,Èç¹ûlSwitchSeq[i]Îª 0xff±íÊ¾²»ÓÃ
}NET_DVR_PREVIEWCFG, *LPNET_DVR_PREVIEWCFG;

//DVRÊÓÆµÊä³ö
typedef struct 
{
    WORD wResolution;                            /* ·Ö±æÂÊ */
    WORD wFreq;                                    /* Ë¢ÐÂÆµÂÊ */
    DWORD dwBrightness;                            /* ÁÁ¶È */
}NET_DVR_VGAPARA;

/*
* MATRIXÊä³ö²ÎÊý½á¹¹
*/
typedef struct
{        
    WORD    wOrder[MAX_ANALOG_CHANNUM];        /* Ô¤ÀÀË³Ðò, 0xff±íÊ¾ÏàÓ¦µÄ´°¿Ú²»Ô¤ÀÀ */
    WORD    wSwitchTime;                /* Ô¤ÀÀÇÐ»»Ê±¼ä */
    BYTE    res[14];
}NET_DVR_MATRIXPARA_V30, *LPNET_DVR_MATRIXPARA_V30;

typedef struct 
{
    WORD wDisplayLogo;                        /* ÏÔÊ¾ÊÓÆµÍ¨µÀºÅ */
    WORD wDisplayOsd;                        /* ÏÔÊ¾Ê±¼ä */
}NET_DVR_MATRIXPARA;

typedef struct 
{
    BYTE byVideoFormat;                        /* Êä³öÖÆÊ½,0-PAL,1-NTSC */
    BYTE byMenuAlphaValue;                    /* ²Ëµ¥Óë±³¾°Í¼Ïó¶Ô±È¶È */
    WORD wScreenSaveTime;                    /* ÆÁÄ»±£»¤Ê±¼ä 0-´Ó²»,1-1·ÖÖÓ,2-2·ÖÖÓ,3-5·ÖÖÓ,4-10·ÖÖÓ,5-20·ÖÖÓ,6-30·ÖÖÓ */
    WORD wVOffset;                            /* ÊÓÆµÊä³öÆ«ÒÆ */
    WORD wBrightness;                        /* ÊÓÆµÊä³öÁÁ¶È */
    BYTE byStartMode;                        /* Æô¶¯ºóÊÓÆµÊä³öÄ£Ê½(0:²Ëµ¥,1:Ô¤ÀÀ)*/
    BYTE byEnableScaler;                    /* ÊÇ·ñÆô¶¯Ëõ·Å (0-²»Æô¶¯, 1-Æô¶¯)*/
}NET_DVR_VOOUT;

//DVRÊÓÆµÊä³ö(9000À©Õ¹)
typedef struct 
{
    DWORD dwSize;
    NET_DVR_VOOUT struVOOut[MAX_VIDEOOUT_V30];
    NET_DVR_VGAPARA struVGAPara[MAX_VGA_V30];    /* VGA²ÎÊý */
    NET_DVR_MATRIXPARA_V30 struMatrixPara[MAX_MATRIXOUT];        /* MATRIX²ÎÊý */
    BYTE byRes[16];
}NET_DVR_VIDEOOUT_V30, *LPNET_DVR_VIDEOOUT_V30;

//DVRÊÓÆµÊä³ö
typedef struct 
{
    DWORD dwSize;
    NET_DVR_VOOUT struVOOut[MAX_VIDEOOUT];
    NET_DVR_VGAPARA struVGAPara[MAX_VGA];    /* VGA²ÎÊý */
    NET_DVR_MATRIXPARA struMatrixPara;        /* MATRIX²ÎÊý */
}NET_DVR_VIDEOOUT, *LPNET_DVR_VIDEOOUT;


//µ¥ÓÃ»§²ÎÊý(×Ó½á¹¹)(À©Õ¹)
typedef struct tagNET_DVR_USER_INFO_V40
{
    BYTE    sUserName[NAME_LEN];            /* ÓÃ»§ÃûÖ»ÄÜÓÃ16×Ö½Ú */
    BYTE    sPassword[PASSWD_LEN];            /* ÃÜÂë */
    BYTE    byLocalRight[MAX_RIGHT];    /* ±¾µØÈ¨ÏÞ */
    /*Êý×é0: ±¾µØ¿ØÖÆÔÆÌ¨*/
    /*Êý×é1: ±¾µØÊÖ¶¯Â¼Ïó*/
    /*Êý×é2: ±¾µØ»Ø·Å*/
    /*Êý×é3: ±¾µØÉèÖÃ²ÎÊý*/
    /*Êý×é4: ±¾µØ²é¿´×´Ì¬¡¢ÈÕÖ¾*/
    /*Êý×é5: ±¾µØ¸ß¼¶²Ù×÷(Éý¼¶£¬¸ñÊ½»¯£¬ÖØÆô£¬¹Ø»ú)*/
    /*Êý×é6: ±¾µØ²é¿´²ÎÊý */
    /*Êý×é7: ±¾µØ¹ÜÀíÄ£ÄâºÍIP camera */
    /*Êý×é8: ±¾µØ±¸·Ý */
    /*Êý×é9: ±¾µØ¹Ø»ú/ÖØÆô */    
    BYTE    byRemoteRight[MAX_RIGHT];/* Ô¶³ÌÈ¨ÏÞ */    
    /*Êý×é0: Ô¶³Ì¿ØÖÆÔÆÌ¨*/
    /*Êý×é1: Ô¶³ÌÊÖ¶¯Â¼Ïó*/
    /*Êý×é2: Ô¶³Ì»Ø·Å */
    /*Êý×é3: Ô¶³ÌÉèÖÃ²ÎÊý*/
    /*Êý×é4: Ô¶³Ì²é¿´×´Ì¬¡¢ÈÕÖ¾*/
    /*Êý×é5: Ô¶³Ì¸ß¼¶²Ù×÷(Éý¼¶£¬¸ñÊ½»¯£¬ÖØÆô£¬¹Ø»ú)*/
    /*Êý×é6: Ô¶³Ì·¢ÆðÓïÒô¶Ô½²*/
    /*Êý×é7: Ô¶³ÌÔ¤ÀÀ*/
    /*Êý×é8: Ô¶³ÌÇëÇó±¨¾¯ÉÏ´«¡¢±¨¾¯Êä³ö*/
    /*Êý×é9: Ô¶³Ì¿ØÖÆ£¬±¾µØÊä³ö*/
    /*Êý×é10: Ô¶³Ì¿ØÖÆ´®¿Ú*/    
    /*Êý×é11: Ô¶³Ì²é¿´²ÎÊý */
    /*Êý×é12: Ô¶³Ì¹ÜÀíÄ£ÄâºÍIP camera */
    /*Êý×é13: Ô¶³Ì¹Ø»ú/ÖØÆô */    
    DWORD    dwNetPreviewRight[MAX_CHANNUM_V40];            /* Ô¶³Ì¿ÉÒÔÔ¤ÀÀµÄÍ¨µÀ£¬´ÓÇ°ÍùºóË³ÐòÅÅÁÐ£¬Óöµ½0xffffffffºóÐø¾ùÎªÎÞÐ§*/
    DWORD    dwLocalRecordRight[MAX_CHANNUM_V40];            /* ±¾µØ¿ÉÒÔÂ¼ÏñµÄÍ¨µÀ£¬´ÓÇ°ÍùºóË³ÐòÅÅÁÐ£¬Óöµ½0xffffffffºóÐø¾ùÎªÎÞÐ§*/
    DWORD    dwNetRecordRight[MAX_CHANNUM_V40];            /* Ô¶³Ì¿ÉÒÔÂ¼ÏñµÄÍ¨µÀ£¬´ÓÇ°ÍùºóË³ÐòÅÅÁÐ£¬Óöµ½0xffffffffºóÐø¾ùÎªÎÞÐ§*/
    DWORD    dwLocalPlaybackRight[MAX_CHANNUM_V40];            /* ±¾µØ¿ÉÒÔ»Ø·ÅµÄÍ¨µÀ£¬´ÓÇ°ÍùºóË³ÐòÅÅÁÐ£¬Óöµ½0xffffffffºóÐø¾ùÎªÎÞÐ§*/
    DWORD    dwNetPlaybackRight[MAX_CHANNUM_V40];            /* Ô¶³Ì¿ÉÒÔ»Ø·ÅµÄÍ¨µÀ£¬´ÓÇ°ÍùºóË³ÐòÅÅÁÐ£¬Óöµ½0xffffffffºóÐø¾ùÎªÎÞÐ§*/
    DWORD    dwLocalPTZRight[MAX_CHANNUM_V40];                /* ±¾µØ¿ÉÒÔPTZµÄÍ¨µÀ£¬´ÓÇ°ÍùºóË³ÐòÅÅÁÐ£¬Óöµ½0xffffffffºóÐø¾ùÎªÎÞÐ§*/
    DWORD    dwNetPTZRight[MAX_CHANNUM_V40];                /* Ô¶³Ì¿ÉÒÔPTZµÄÍ¨µÀ£¬´ÓÇ°ÍùºóË³ÐòÅÅÁÐ£¬Óöµ½0xffffffffºóÐø¾ùÎªÎÞÐ§*/
    DWORD    dwLocalBackupRight[MAX_CHANNUM_V40];            /* ±¾µØ±¸·ÝÈ¨ÏÞÍ¨µÀ£¬´ÓÇ°ÍùºóË³ÐòÅÅÁÐ£¬Óöµ½0xffffffffºóÐø¾ùÎªÎÞÐ§*/
    NET_DVR_IPADDR    struUserIP;                /* ÓÃ»§IPµØÖ·(Îª0Ê±±íÊ¾ÔÊÐíÈÎºÎµØÖ·) */
    BYTE     byMACAddr[MACADDR_LEN];    /* ÎïÀíµØÖ· */
    BYTE     byPriority;                /* ÓÅÏÈ¼¶£¬0xff-ÎÞ£¬0--µÍ£¬1--ÖÐ£¬2--¸ß */
                                        /* ÎÞ¡­¡­±íÊ¾²»Ö§³ÖÓÅÏÈ¼¶µÄÉèÖÃ
                                        µÍ¡­¡­Ä¬ÈÏÈ¨ÏÞ:°üÀ¨±¾µØºÍÔ¶³Ì»Ø·Å,±¾µØºÍÔ¶³Ì²é¿´ÈÕÖ¾ºÍ
                                        ×´Ì¬,±¾µØºÍÔ¶³Ì¹Ø»ú/ÖØÆô
                                        ÖÐ¡­¡­°üÀ¨±¾µØºÍÔ¶³Ì¿ØÖÆÔÆÌ¨,±¾µØºÍÔ¶³ÌÊÖ¶¯Â¼Ïñ,±¾µØºÍ
                                        Ô¶³Ì»Ø·Å,ÓïÒô¶Ô½²ºÍÔ¶³ÌÔ¤ÀÀ¡¢±¾µØ±¸·Ý,±¾µØ/Ô¶³Ì¹Ø»ú/ÖØÆô
    ¸ß¡­¡­¹ÜÀíÔ± */
    BYTE    byAlarmOnRight;         // ±¨¾¯ÊäÈë¿Ú²¼·ÀÈ¨ÏÞ 1-ÓÐÈ¨ÏÞ£¬0-ÎÞÈ¨ÏÞ
    BYTE    byAlarmOffRight;         // ±¨¾¯ÊäÈë¿Ú³··ÀÈ¨ÏÞ 1-ÓÐÈ¨ÏÞ£¬0-ÎÞÈ¨ÏÞ
    BYTE    byBypassRight;           // ±¨¾¯ÊäÈë¿ÚÅÔÂ·È¨ÏÞ 1-ÓÐÈ¨ÏÞ£¬0-ÎÞÈ¨ÏÞ 
    BYTE    byRes1[2];               //ËÄ×Ö½Ú¶ÔÆë
    BYTE    byPublishRight[MAX_RIGHT];  //ÐÅÏ¢·¢²¼×¨ÓÐÈ¨ÏÞ
    /*Êý×é0: ËØ²ÄÉóºËÈ¨ÏÞ*/
    /*Êý×é1: ½ÚÄ¿ÉóºËÈ¨ÏÞ*/
    /*Êý×é2: ÈÕ³ÌÉóºËÈ¨ÏÞ*/
    /*Êý×é3: ÉÏ´«ËØ²ÄÈ¨ÏÞ*/
    /*Êý×é4: ÐÂ½¨½ÚÄ¿È¨ÏÞ*/
    /*Êý×é5: ÐÂ½¨ÈÕ³ÌÈ¨ÏÞ*/
    /*Êý×é6: ÐÅÏ¢²¥·ÅÈ¨ÏÞ*/
    /*Êý×é7: ÖÕ¶Ë¹ÜÀíÈ¨ÏÞ*/
    /*Êý×é8: ÉÌÒµÖÇÄÜÈ¨ÏÞ*/    
    BYTE    byRes[84];    
}NET_DVR_USER_INFO_V40, *LPNET_DVR_USER_INFO_V40;


//µ¥ÓÃ»§²ÎÊý(×Ó½á¹¹)(9000À©Õ¹)
typedef struct
{
    BYTE sUserName[NAME_LEN];        /* ÓÃ»§Ãû */
    BYTE sPassword[PASSWD_LEN];        /* ÃÜÂë */
    BYTE byLocalRight[MAX_RIGHT];    /* ±¾µØÈ¨ÏÞ */
    /*Êý×é0: ±¾µØ¿ØÖÆÔÆÌ¨*/
    /*Êý×é1: ±¾µØÊÖ¶¯Â¼Ïó*/
    /*Êý×é2: ±¾µØ»Ø·Å*/
    /*Êý×é3: ±¾µØÉèÖÃ²ÎÊý*/
    /*Êý×é4: ±¾µØ²é¿´×´Ì¬¡¢ÈÕÖ¾*/
    /*Êý×é5: ±¾µØ¸ß¼¶²Ù×÷(Éý¼¶£¬¸ñÊ½»¯£¬ÖØÆô£¬¹Ø»ú)*/
    /*Êý×é6: ±¾µØ²é¿´²ÎÊý */
    /*Êý×é7: ±¾µØ¹ÜÀíÄ£ÄâºÍIP camera */
    /*Êý×é8: ±¾µØ±¸·Ý */
    /*Êý×é9: ±¾µØ¹Ø»ú/ÖØÆô */    
    BYTE byRemoteRight[MAX_RIGHT];/* Ô¶³ÌÈ¨ÏÞ */    
    /*Êý×é0: Ô¶³Ì¿ØÖÆÔÆÌ¨*/
    /*Êý×é1: Ô¶³ÌÊÖ¶¯Â¼Ïó*/
    /*Êý×é2: Ô¶³Ì»Ø·Å */
    /*Êý×é3: Ô¶³ÌÉèÖÃ²ÎÊý*/
    /*Êý×é4: Ô¶³Ì²é¿´×´Ì¬¡¢ÈÕÖ¾*/
    /*Êý×é5: Ô¶³Ì¸ß¼¶²Ù×÷(Éý¼¶£¬¸ñÊ½»¯£¬ÖØÆô£¬¹Ø»ú)*/
    /*Êý×é6: Ô¶³Ì·¢ÆðÓïÒô¶Ô½²*/
    /*Êý×é7: Ô¶³ÌÔ¤ÀÀ*/
    /*Êý×é8: Ô¶³ÌÇëÇó±¨¾¯ÉÏ´«¡¢±¨¾¯Êä³ö*/
    /*Êý×é9: Ô¶³Ì¿ØÖÆ£¬±¾µØÊä³ö*/
    /*Êý×é10: Ô¶³Ì¿ØÖÆ´®¿Ú*/    
    /*Êý×é11: Ô¶³Ì²é¿´²ÎÊý */
    /*Êý×é12: Ô¶³Ì¹ÜÀíÄ£ÄâºÍIP camera */
    /*Êý×é13: Ô¶³Ì¹Ø»ú/ÖØÆô */
    BYTE byNetPreviewRight[MAX_CHANNUM_V30];        /* Ô¶³Ì¿ÉÒÔÔ¤ÀÀµÄÍ¨µÀ 0-ÓÐÈ¨ÏÞ£¬1-ÎÞÈ¨ÏÞ*/
    BYTE byLocalPlaybackRight[MAX_CHANNUM_V30];    /* ±¾µØ¿ÉÒÔ»Ø·ÅµÄÍ¨µÀ 0-ÓÐÈ¨ÏÞ£¬1-ÎÞÈ¨ÏÞ*/
    BYTE byNetPlaybackRight[MAX_CHANNUM_V30];    /* Ô¶³Ì¿ÉÒÔ»Ø·ÅµÄÍ¨µÀ 0-ÓÐÈ¨ÏÞ£¬1-ÎÞÈ¨ÏÞ*/
    BYTE byLocalRecordRight[MAX_CHANNUM_V30];        /* ±¾µØ¿ÉÒÔÂ¼ÏñµÄÍ¨µÀ 0-ÓÐÈ¨ÏÞ£¬1-ÎÞÈ¨ÏÞ*/
    BYTE byNetRecordRight[MAX_CHANNUM_V30];        /* Ô¶³Ì¿ÉÒÔÂ¼ÏñµÄÍ¨µÀ 0-ÓÐÈ¨ÏÞ£¬1-ÎÞÈ¨ÏÞ*/
    BYTE byLocalPTZRight[MAX_CHANNUM_V30];        /* ±¾µØ¿ÉÒÔPTZµÄÍ¨µÀ 0-ÓÐÈ¨ÏÞ£¬1-ÎÞÈ¨ÏÞ*/
    BYTE byNetPTZRight[MAX_CHANNUM_V30];            /* Ô¶³Ì¿ÉÒÔPTZµÄÍ¨µÀ 0-ÓÐÈ¨ÏÞ£¬1-ÎÞÈ¨ÏÞ*/
    BYTE byLocalBackupRight[MAX_CHANNUM_V30];        /* ±¾µØ±¸·ÝÈ¨ÏÞÍ¨µÀ 0-ÓÐÈ¨ÏÞ£¬1-ÎÞÈ¨ÏÞ*/
    NET_DVR_IPADDR struUserIP;        /* ÓÃ»§IPµØÖ·(Îª0Ê±±íÊ¾ÔÊÐíÈÎºÎµØÖ·) */
    BYTE byMACAddr[MACADDR_LEN];    /* ÎïÀíµØÖ· */
    BYTE byPriority;                /* ÓÅÏÈ¼¶£¬0xff-ÎÞ£¬0--µÍ£¬1--ÖÐ£¬2--¸ß */
                                    /*
                                    ÎÞ¡­¡­±íÊ¾²»Ö§³ÖÓÅÏÈ¼¶µÄÉèÖÃ
                                    µÍ¡­¡­Ä¬ÈÏÈ¨ÏÞ:°üÀ¨±¾µØºÍÔ¶³Ì»Ø·Å,±¾µØºÍÔ¶³Ì²é¿´ÈÕÖ¾ºÍ×´Ì¬,±¾µØºÍÔ¶³Ì¹Ø»ú/ÖØÆô
                                    ÖÐ¡­¡­°üÀ¨±¾µØºÍÔ¶³Ì¿ØÖÆÔÆÌ¨,±¾µØºÍÔ¶³ÌÊÖ¶¯Â¼Ïñ,±¾µØºÍÔ¶³Ì»Ø·Å,ÓïÒô¶Ô½²ºÍÔ¶³ÌÔ¤ÀÀ
                                    ±¾µØ±¸·Ý,±¾µØ/Ô¶³Ì¹Ø»ú/ÖØÆô
                                    ¸ß¡­¡­¹ÜÀíÔ±
    */
    BYTE    byAlarmOnRight;         // ±¨¾¯ÊäÈë¿Ú²¼·ÀÈ¨ÏÞ
    BYTE    byAlarmOffRight;        // ±¨¾¯ÊäÈë¿Ú³··ÀÈ¨ÏÞ
    BYTE    byBypassRight;          // ±¨¾¯ÊäÈë¿ÚÅÔÂ·È¨ÏÞ
    BYTE    byRes[14];    
}NET_DVR_USER_INFO_V30, *LPNET_DVR_USER_INFO_V30;

//µ¥ÓÃ»§²ÎÊý(SDK_V15À©Õ¹)(×Ó½á¹¹)
typedef struct 
{
    BYTE sUserName[NAME_LEN];        /* ÓÃ»§Ãû */
    BYTE sPassword[PASSWD_LEN];        /* ÃÜÂë */
    DWORD dwLocalRight[MAX_RIGHT];    /* È¨ÏÞ */
    /*Êý×é0: ±¾µØ¿ØÖÆÔÆÌ¨*/
    /*Êý×é1: ±¾µØÊÖ¶¯Â¼Ïó*/
    /*Êý×é2: ±¾µØ»Ø·Å*/
    /*Êý×é3: ±¾µØÉèÖÃ²ÎÊý*/
    /*Êý×é4: ±¾µØ²é¿´×´Ì¬¡¢ÈÕÖ¾*/
    /*Êý×é5: ±¾µØ¸ß¼¶²Ù×÷(Éý¼¶£¬¸ñÊ½»¯£¬ÖØÆô£¬¹Ø»ú)*/
    DWORD dwLocalPlaybackRight;        /* ±¾µØ¿ÉÒÔ»Ø·ÅµÄÍ¨µÀ bit0 -- channel 1*/
    DWORD dwRemoteRight[MAX_RIGHT];    /* È¨ÏÞ */
    /*Êý×é0: Ô¶³Ì¿ØÖÆÔÆÌ¨*/
    /*Êý×é1: Ô¶³ÌÊÖ¶¯Â¼Ïó*/
    /*Êý×é2: Ô¶³Ì»Ø·Å */
    /*Êý×é3: Ô¶³ÌÉèÖÃ²ÎÊý*/
    /*Êý×é4: Ô¶³Ì²é¿´×´Ì¬¡¢ÈÕÖ¾*/
    /*Êý×é5: Ô¶³Ì¸ß¼¶²Ù×÷(Éý¼¶£¬¸ñÊ½»¯£¬ÖØÆô£¬¹Ø»ú)*/
    /*Êý×é6: Ô¶³Ì·¢ÆðÓïÒô¶Ô½²*/
    /*Êý×é7: Ô¶³ÌÔ¤ÀÀ*/
    /*Êý×é8: Ô¶³ÌÇëÇó±¨¾¯ÉÏ´«¡¢±¨¾¯Êä³ö*/
    /*Êý×é9: Ô¶³Ì¿ØÖÆ£¬±¾µØÊä³ö*/
    /*Êý×é10: Ô¶³Ì¿ØÖÆ´®¿Ú*/
    DWORD dwNetPreviewRight;        /* Ô¶³Ì¿ÉÒÔÔ¤ÀÀµÄÍ¨µÀ bit0 -- channel 1*/
    DWORD dwNetPlaybackRight;        /* Ô¶³Ì¿ÉÒÔ»Ø·ÅµÄÍ¨µÀ bit0 -- channel 1*/
    char sUserIP[16];                /* ÓÃ»§IPµØÖ·(Îª0Ê±±íÊ¾ÔÊÐíÈÎºÎµØÖ·) */
    BYTE byMACAddr[MACADDR_LEN];    /* ÎïÀíµØÖ· */
}NET_DVR_USER_INFO_EX, *LPNET_DVR_USER_INFO_EX;

//µ¥ÓÃ»§²ÎÊý(×Ó½á¹¹)
typedef struct 
{
    BYTE sUserName[NAME_LEN];        /* ÓÃ»§Ãû */
    BYTE sPassword[PASSWD_LEN];        /* ÃÜÂë */
    DWORD dwLocalRight[MAX_RIGHT];    /* È¨ÏÞ */
    /*Êý×é0: ±¾µØ¿ØÖÆÔÆÌ¨*/
    /*Êý×é1: ±¾µØÊÖ¶¯Â¼Ïó*/
    /*Êý×é2: ±¾µØ»Ø·Å*/
    /*Êý×é3: ±¾µØÉèÖÃ²ÎÊý*/
    /*Êý×é4: ±¾µØ²é¿´×´Ì¬¡¢ÈÕÖ¾*/
    /*Êý×é5: ±¾µØ¸ß¼¶²Ù×÷(Éý¼¶£¬¸ñÊ½»¯£¬ÖØÆô£¬¹Ø»ú)*/
    DWORD dwRemoteRight[MAX_RIGHT];    /* È¨ÏÞ */
    /*Êý×é0: Ô¶³Ì¿ØÖÆÔÆÌ¨*/
    /*Êý×é1: Ô¶³ÌÊÖ¶¯Â¼Ïó*/
    /*Êý×é2: Ô¶³Ì»Ø·Å */
    /*Êý×é3: Ô¶³ÌÉèÖÃ²ÎÊý*/
    /*Êý×é4: Ô¶³Ì²é¿´×´Ì¬¡¢ÈÕÖ¾*/
    /*Êý×é5: Ô¶³Ì¸ß¼¶²Ù×÷(Éý¼¶£¬¸ñÊ½»¯£¬ÖØÆô£¬¹Ø»ú)*/
    /*Êý×é6: Ô¶³Ì·¢ÆðÓïÒô¶Ô½²*/
    /*Êý×é7: Ô¶³ÌÔ¤ÀÀ*/
    /*Êý×é8: Ô¶³ÌÇëÇó±¨¾¯ÉÏ´«¡¢±¨¾¯Êä³ö*/
    /*Êý×é9: Ô¶³Ì¿ØÖÆ£¬±¾µØÊä³ö*/
    /*Êý×é10: Ô¶³Ì¿ØÖÆ´®¿Ú*/
    char sUserIP[16];                /* ÓÃ»§IPµØÖ·(Îª0Ê±±íÊ¾ÔÊÐíÈÎºÎµØÖ·) */
    BYTE byMACAddr[MACADDR_LEN];    /* ÎïÀíµØÖ· */
}NET_DVR_USER_INFO, *LPNET_DVR_USER_INFO;

//DVRÓÃ»§²ÎÊý(À©Õ¹)
typedef struct  tagNET_DVR_USER_V40
{
    DWORD dwSize;  //½á¹¹Ìå´óÐ¡
    DWORD dwMaxUserNum; //Éè±¸Ö§³ÖµÄ×î´óÓÃ»§Êý-Ö»¶Á
    NET_DVR_USER_INFO_V40 struUser[MAX_USERNUM_V30];  /* ÓÃ»§²ÎÊý */
}NET_DVR_USER_V40,*LPNET_DVR_USER_V40;
typedef struct  tagNET_DVR_USER_V50
{
    DWORD dwSize;  //½á¹¹Ìå´óÐ¡
    DWORD dwMaxUserNum; //Éè±¸Ö§³ÖµÄ×î´óÓÃ»§Êý-Ö»¶Á
    NET_DVR_USER_INFO_V40 struUser[MAX_USERNUM_V30];  /* ÓÃ»§²ÎÊý */
    char	sloginPassword[PASSWD_LEN/*16*/];		  /* µÇÂ½ÃÜÂëÈ·ÈÏ */
    BYTE 	byRes[240]; //±£Áô
}NET_DVR_USER_V50, *LPNET_DVR_USER_V50;
//DVRÓÃ»§²ÎÊý(9000À©Õ¹)
typedef struct
{
    DWORD dwSize;
    NET_DVR_USER_INFO_V30 struUser[MAX_USERNUM_V30];
}NET_DVR_USER_V30, *LPNET_DVR_USER_V30;

//DVRÓÃ»§²ÎÊý(SDK_V15À©Õ¹)
typedef struct 
{
    DWORD dwSize;
    NET_DVR_USER_INFO_EX struUser[MAX_USERNUM];
}NET_DVR_USER_EX, *LPNET_DVR_USER_EX;

//DVRÓÃ»§²ÎÊý
typedef struct 
{
    DWORD dwSize;
    NET_DVR_USER_INFO struUser[MAX_USERNUM];
}NET_DVR_USER, *LPNET_DVR_USER;

typedef struct tagNET_DVR_EXCEPTION_V40
{
    DWORD             dwSize ;             //½á¹¹Ìå´óÐ¡
    DWORD             dwMaxGroupNum ;    //Éè±¸Ö§³ÖµÄ×î´ó×éÊý
    NET_DVR_HANDLEEXCEPTION_V41 struExceptionHandle[MAX_EXCEPTIONNUM_V30];    
    BYTE                byRes[128];          //±£Áô
}NET_DVR_EXCEPTION_V40,*LPNET_DVR_EXCEPTION_V40; /*Òì³£²ÎÊýÅäÖÃÀ©Õ¹½á¹¹Ìå*/

//DVRÒì³£²ÎÊý(9000À©Õ¹)
typedef struct 
{
    DWORD dwSize;
    NET_DVR_HANDLEEXCEPTION_V30 struExceptionHandleType[MAX_EXCEPTIONNUM_V30];
    /*Êý×é0-ÅÌÂú,1- Ó²ÅÌ³ö´í,2-ÍøÏß¶Ï,3-¾ÖÓòÍøÄÚIP µØÖ·³åÍ», 4-·Ç·¨·ÃÎÊ, 5-ÊäÈë/Êä³öÊÓÆµÖÆÊ½²»Æ¥Åä, 6-ÊÓÆµÐÅºÅÒì³£, 7-Â¼ÏñÒì³£ 8-ÕóÁÐÒì³££¬9-Ç°¶Ë/Â¼Ïñ·Ö±æÂÊ²»Æ¥ÅäÒì³££¬10-ÐÐ³µ³¬ËÙ(³µÔØ×¨ÓÃ) 11-ÈÈ±¸Òì³££¨N+1Ê¹ÓÃ£©12-ÎÂ¶È£¬13-×ÓÏµÍ³Òì³££¬14-·çÉÈÒì³£, 15-POE¹©µçÒì³£*/
}NET_DVR_EXCEPTION_V30, *LPNET_DVR_EXCEPTION_V30;



//DVRÒì³£²ÎÊý
typedef struct 
{
    DWORD dwSize;
    NET_DVR_HANDLEEXCEPTION struExceptionHandleType[MAX_EXCEPTIONNUM];
    /*Êý×é0-ÅÌÂú,1- Ó²ÅÌ³ö´í,2-ÍøÏß¶Ï,3-¾ÖÓòÍøÄÚIP µØÖ·³åÍ»,4-·Ç·¨·ÃÎÊ, 5-ÊäÈë/Êä³öÊÓÆµÖÆÊ½²»Æ¥Åä, 6-ÊÓÆµÐÅºÅÒì³£*/
}NET_DVR_EXCEPTION, *LPNET_DVR_EXCEPTION;

//Í¨µÀ×´Ì¬(9000À©Õ¹)
typedef struct 
{
    BYTE byRecordStatic; //Í¨µÀÊÇ·ñÔÚÂ¼Ïñ,0-²»Â¼Ïñ,1-Â¼Ïñ
    BYTE bySignalStatic; //Á¬½ÓµÄÐÅºÅ×´Ì¬,0-Õý³£,1-ÐÅºÅ¶ªÊ§
    BYTE byHardwareStatic;//Í¨µÀÓ²¼þ×´Ì¬,0-Õý³£,1-Òì³£,ÀýÈçDSPËÀµô
    BYTE byRes1;        //±£Áô
    DWORD dwBitRate;//Êµ¼ÊÂëÂÊ
    DWORD dwLinkNum;//¿Í»§¶ËÁ¬½ÓµÄ¸öÊý
    NET_DVR_IPADDR struClientIP[MAX_LINK];//¿Í»§¶ËµÄIPµØÖ·
    DWORD dwIPLinkNum;//Èç¹û¸ÃÍ¨µÀÎªIP½ÓÈë£¬ÄÇÃ´±íÊ¾IP½ÓÈëµ±Ç°µÄÁ¬½ÓÊý
    BYTE byExceedMaxLink;        // ÊÇ·ñ³¬³öÁËµ¥Â·6Â·Á¬½ÓÊý 0 - Î´³¬³ö, 1-³¬³ö
    BYTE byRes[3];        // ±£Áô×Ö½Ú
    DWORD dwAllBitRate;      //ËùÓÐÊµ¼ÊÂëÂÊÖ®ºÍ
    DWORD dwChannelNo;    //µ±Ç°µÄÍ¨µÀºÅ£¬0xffffffff±íÊ¾ÎÞÐ§
}NET_DVR_CHANNELSTATE_V30, *LPNET_DVR_CHANNELSTATE_V30;

//Í¨µÀ×´Ì¬
typedef struct 
{
    BYTE byRecordStatic; //Í¨µÀÊÇ·ñÔÚÂ¼Ïñ,0-²»Â¼Ïñ,1-Â¼Ïñ
    BYTE bySignalStatic; //Á¬½ÓµÄÐÅºÅ×´Ì¬,0-Õý³£,1-ÐÅºÅ¶ªÊ§
    BYTE byHardwareStatic;//Í¨µÀÓ²¼þ×´Ì¬,0-Õý³£,1-Òì³£,ÀýÈçDSPËÀµô
    char reservedData;        //±£Áô
    DWORD dwBitRate;//Êµ¼ÊÂëÂÊ
    DWORD dwLinkNum;//¿Í»§¶ËÁ¬½ÓµÄ¸öÊý
    DWORD dwClientIP[MAX_LINK];//¿Í»§¶ËµÄIPµØÖ·
}NET_DVR_CHANNELSTATE, *LPNET_DVR_CHANNELSTATE;

//Ó²ÅÌ×´Ì¬
typedef struct 
{
    DWORD dwVolume;//Ó²ÅÌµÄÈÝÁ¿
    DWORD dwFreeSpace;//Ó²ÅÌµÄÊ£Óà¿Õ¼ä
    DWORD dwHardDiskStatic; //Ó²ÅÌµÄ×´Ì¬,°´Î»:1-ÐÝÃß,2-²»Õý³£,3-ÐÝÃßÓ²ÅÌ³ö´í,4-Î´¸ñÊ½»¯, 5-Î´Á¬½Ó×´Ì¬(ÍøÂçÓ²ÅÌ),6-Ó²ÅÌÕýÔÚ¸ñÊ½»¯
}NET_DVR_DISKSTATE, *LPNET_DVR_DISKSTATE;

typedef struct tagNET_DVR_WORKSTATE_V40
{ 
    DWORD   dwSize ;            //½á¹¹Ìå´óÐ¡
    DWORD   dwDeviceStatic;      //Éè±¸µÄ×´Ì¬,0-Õý³£,1-CPUÕ¼ÓÃÂÊÌ«¸ß,³¬¹ý85%,2-Ó²¼þ´íÎó,ÀýÈç´®¿ÚËÀµô
    NET_DVR_DISKSTATE  struHardDiskStatic[MAX_DISKNUM_V30];   //Ó²ÅÌ×´Ì¬,Ò»´Î×î¶àÖ»ÄÜ»ñÈ¡33¸öÓ²ÅÌÐÅÏ¢
    NET_DVR_CHANNELSTATE_V30 struChanStatic[MAX_CHANNUM_V40/*512*/];//Í¨µÀµÄ×´Ì¬£¬´ÓÇ°ÍùºóË³ÐòÅÅÁÐ
    DWORD   dwHasAlarmInStatic[MAX_ALARMIN_V40/*512*/]; //ÓÐ±¨¾¯µÄ±¨¾¯ÊäÈë¿Ú£¬°´Öµ±íÊ¾£¬°´ÏÂ±êÖµË³ÐòÅÅÁÐ£¬ÖµÎª0xffffffffÊ±µ±Ç°¼°ºóÐøÖµÎÞÐ§
    DWORD   dwHasAlarmOutStatic[MAX_ALARMOUT_V40/*512*/]; //ÓÐ±¨¾¯Êä³öµÄ±¨¾¯Êä³ö¿Ú£¬°´Öµ±íÊ¾£¬°´ÏÂ±êÖµË³ÐòÅÅÁÐ£¬ÖµÎª0xffffffffÊ±µ±Ç°¼°ºóÐøÖµÎÞÐ§
    DWORD   dwLocalDisplay;            //±¾µØÏÔÊ¾×´Ì¬,0-Õý³£,1-²»Õý³£
    BYTE    byAudioInChanStatus[MAX_AUDIO_V30/*2*/];        //°´Î»±íÊ¾ÓïÒôÍ¨µÀµÄ×´Ì¬ 0-Î´Ê¹ÓÃ£¬1-Ê¹ÓÃÖÐ£¬µÚ0Î»±íÊ¾µÚ1¸öÓïÒôÍ¨µÀ
    BYTE    byRes1[2];
    float    fHumidity;    //´«¸ÐÆ÷»ñÖªµÄÊª¶È,·¶Î§:0.0 ~100.0
    float    fTemperature;    //´«¸ÐÆ÷»ñÖªµÄÎÂ¶È£¬·¶Î§£º-20.0 ~ 90.0
    BYTE    byRes[116];                 //±£Áô
}NET_DVR_WORKSTATE_V40, *LPNET_DVR_WORKSTATE_V40; /*Éè±¸¹¤×÷×´Ì¬À©Õ¹½á¹¹Ìå*/

typedef struct tagNET_DVR_GETWORKSTATE_COND
{
    DWORD   dwSize ;  //½á¹¹Ìå³¤¶È
    BYTE    byFindHardByCond; /*0-²éÕÒÈ«²¿´ÅÅÌ(µ«Ò»´Î×î¶àÖ»ÄÜ²éÕÒ33¸ö)£¬´ËÊ±dwFindHardStatusNumÎÞÐ§*/
    BYTE    byFindChanByCond ;  /*0-²éÕÒÈ«²¿Í¨µÀ£¬´ËÊ±dwFindChanNumÎÞÐ§*/
    BYTE    byRes1[2] ;//±£Áô    
    DWORD   dwFindHardStatus[MAX_DISKNUM_V30/*33*/] ; /*Òª²éÕÒµÄÓ²ÅÌºÅ£¬°´Öµ±íÊ¾£¬¸ÃÖµ²ÉÓÃË³ÐòÅÅÁÐ£¬ Óöµ½0xffffffffÔòÈÏÎªºóÐøÎÞÐ§ */
    DWORD   dwFindChanNo[MAX_CHANNUM_V40/*512*/] ; /*Òª²éÕÒµÄÍ¨µÀºÅ£¬°´Öµ±íÊ¾£¬¸ÃÖµ²ÉÓÃË³ÐòÅÅÁÐ£¬ Óöµ½0xffffffffÔòÈÏÎªºóÐøÎÞÐ§ */
    BYTE     byRes[64] ; //±£Áô
}NET_DVR_GETWORKSTATE_COND, *LPNET_DVR_GETWORKSTATE_COND;

//DVR¹¤×÷×´Ì¬(9000À©Õ¹)
typedef struct 
{
    DWORD dwDeviceStatic;     //Éè±¸µÄ×´Ì¬,0-Õý³£,1-CPUÕ¼ÓÃÂÊÌ«¸ß,³¬¹ý85%,2-Ó²¼þ´íÎó,ÀýÈç´®¿ÚËÀµô
    NET_DVR_DISKSTATE  struHardDiskStatic[MAX_DISKNUM_V30];
    NET_DVR_CHANNELSTATE_V30 struChanStatic[MAX_CHANNUM_V30];//Í¨µÀµÄ×´Ì¬
    BYTE  byAlarmInStatic[MAX_ALARMIN_V30]; //±¨¾¯¶Ë¿ÚµÄ×´Ì¬,0-Ã»ÓÐ±¨¾¯,1-ÓÐ±¨¾¯
    BYTE  byAlarmOutStatic[MAX_ALARMOUT_V30]; //±¨¾¯Êä³ö¶Ë¿ÚµÄ×´Ì¬,0-Ã»ÓÐÊä³ö,1-ÓÐ±¨¾¯Êä³ö
    DWORD  dwLocalDisplay;//±¾µØÏÔÊ¾×´Ì¬,0-Õý³£,1-²»Õý³£
    BYTE  byAudioChanStatus[MAX_AUDIO_V30];//±íÊ¾ÓïÒôÍ¨µÀµÄ×´Ì¬ 0-Î´Ê¹ÓÃ£¬1-Ê¹ÓÃÖÐ, 0xffÎÞÐ§
    BYTE  byRes[10];
}NET_DVR_WORKSTATE_V30, *LPNET_DVR_WORKSTATE_V30;

//DVR¹¤×÷×´Ì¬
typedef struct 
{
    DWORD dwDeviceStatic;     //Éè±¸µÄ×´Ì¬,0-Õý³£,1-CPUÕ¼ÓÃÂÊÌ«¸ß,³¬¹ý85%,2-Ó²¼þ´íÎó,ÀýÈç´®¿ÚËÀµô
    NET_DVR_DISKSTATE  struHardDiskStatic[MAX_DISKNUM];
    NET_DVR_CHANNELSTATE struChanStatic[MAX_CHANNUM];//Í¨µÀµÄ×´Ì¬
    BYTE  byAlarmInStatic[MAX_ALARMIN]; //±¨¾¯¶Ë¿ÚµÄ×´Ì¬,0-Ã»ÓÐ±¨¾¯,1-ÓÐ±¨¾¯
    BYTE  byAlarmOutStatic[MAX_ALARMOUT]; //±¨¾¯Êä³ö¶Ë¿ÚµÄ×´Ì¬,0-Ã»ÓÐÊä³ö,1-ÓÐ±¨¾¯Êä³ö
    DWORD  dwLocalDisplay;//±¾µØÏÔÊ¾×´Ì¬,0-Õý³£,1-²»Õý³£
}NET_DVR_WORKSTATE, *LPNET_DVR_WORKSTATE;



//ÈÕÖ¾ÐÅÏ¢(9000À©Õ¹)
typedef struct 
{
    NET_DVR_TIME strLogTime;
    DWORD    dwMajorType;    //Ö÷ÀàÐÍ 1-±¨¾¯; 2-Òì³£; 3-²Ù×÷; 0xff-È«²¿
    DWORD    dwMinorType;//´ÎÀàÐÍ 0-È«²¿;
    BYTE    sPanelUser[MAX_NAMELEN]; //²Ù×÷Ãæ°åµÄÓÃ»§Ãû
    BYTE    sNetUser[MAX_NAMELEN];//ÍøÂç²Ù×÷µÄÓÃ»§Ãû
    NET_DVR_IPADDR    struRemoteHostAddr;//Ô¶³ÌÖ÷»úµØÖ·
    DWORD    dwParaType;//²ÎÊýÀàÐÍ,9000Éè±¸MINOR_START_VT/MINOR_STOP_VTÊ±£¬±íÊ¾ÓïÒô¶Ô½²µÄ¶Ë×ÓºÅ
    DWORD    dwChannel;//Í¨µÀºÅ
    DWORD    dwDiskNumber;//Ó²ÅÌºÅ
    DWORD    dwAlarmInPort;//±¨¾¯ÊäÈë¶Ë¿Ú
    DWORD    dwAlarmOutPort;//±¨¾¯Êä³ö¶Ë¿Ú
    DWORD   dwInfoLen;
    char    sInfo[LOG_INFO_LEN];
}NET_DVR_LOG_V30, *LPNET_DVR_LOG_V30;

//ÈÕÖ¾ÐÅÏ¢
typedef struct 
{
    NET_DVR_TIME strLogTime;
    DWORD    dwMajorType;    //Ö÷ÀàÐÍ 1-±¨¾¯; 2-Òì³£; 3-²Ù×÷; 0xff-È«²¿
    DWORD    dwMinorType;//´ÎÀàÐÍ 0-È«²¿;
    BYTE    sPanelUser[MAX_NAMELEN]; //²Ù×÷Ãæ°åµÄÓÃ»§Ãû
    BYTE    sNetUser[MAX_NAMELEN];//ÍøÂç²Ù×÷µÄÓÃ»§Ãû
    char    sRemoteHostAddr[16];//Ô¶³ÌÖ÷»úµØÖ·
    DWORD    dwParaType;//²ÎÊýÀàÐÍ
    DWORD    dwChannel;//Í¨µÀºÅ
    DWORD    dwDiskNumber;//Ó²ÅÌºÅ
    DWORD    dwAlarmInPort;//±¨¾¯ÊäÈë¶Ë¿Ú
    DWORD    dwAlarmOutPort;//±¨¾¯Êä³ö¶Ë¿Ú
}NET_DVR_LOG, *LPNET_DVR_LOG;

/************************DVRÈÕÖ¾ end***************************/

/************************¶¯»·±¨¾¯¹ÜÀíÖ÷»úÈÕÖ¾²éÕÒ begin************************************************/
typedef struct tagNET_DVR_ALARMHOST_SEARCH_LOG_PARAM
{
    WORD            wMajorType;        // Ö÷ÀàÐÍ
    WORD            wMinorType;        // ´ÎÀàÐÍ 
    NET_DVR_TIME    struStartTime;    // ¿ªÊ¼Ê±¼ä 
    NET_DVR_TIME    struEndTime;    // ½áÊøÊ±¼ä
    BYTE            byRes[8];        // ±£Áô×Ö½Ú
}NET_DVR_ALARMHOST_SEARCH_LOG_PARAM, LPNET_DVR_ALARMHOST_SEARCH_LOG_PARAM;

typedef struct tagNET_DVR_ALARMHOST_LOG_RET
{
    NET_DVR_TIME    struLogTime;                //  ÈÕÖ¾Ê±¼ä
    BYTE            sUserName[NAME_LEN];     // ²Ù×÷ÓÃ»§
    NET_DVR_IPADDR    struIPAddr;                 // ²Ù×÷IPµØÖ·
    WORD            wMajorType;                 // Ö÷ÀàÐÍ 
    WORD            wMinorType;                 // ´ÎÀàÐÍ
    WORD            wParam;                        // ²Ù×÷²ÎÊý
    BYTE            byRes[10];
    DWORD            dwInfoLen;                    // ÃèÊöÐÅÏ¢³¤¶È
    char            sInfo[LOG_INFO_LEN];       // ÃèÊöÐÅÏ¢
}NET_DVR_ALARMHOST_LOG_RET, *LPNET_DVR_ALARMHOST_LOG_RET;

/*************************¶¯»·±¨¾¯¹ÜÀíÖ÷»úÈÕÖ¾²éÕÒ end***********************************************/

//±¨¾¯Êä³ö×´Ì¬(9000À©Õ¹)
typedef struct 
{
    BYTE Output[MAX_ALARMOUT_V30];
}NET_DVR_ALARMOUTSTATUS_V30, *LPNET_DVR_ALARMOUTSTATUS_V30;

//±¨¾¯Êä³ö×´Ì¬
typedef struct 
{
    BYTE Output[MAX_ALARMOUT];
}NET_DVR_ALARMOUTSTATUS, *LPNET_DVR_ALARMOUTSTATUS;

//½»Ò×ÐÅÏ¢
typedef struct 
{
    USHORT m_Year;
    USHORT m_Month;
    USHORT m_Day;
    USHORT m_Hour;
    USHORT m_Minute;
    USHORT m_Second;
    BYTE DeviceName[24];    //Éè±¸Ãû³Æ
    DWORD dwChannelNumer;    //Í¨µÀºÅ
    BYTE CardNumber[32];    //¿¨ºÅ
    char cTradeType[12];    //½»Ò×ÀàÐÍ
    DWORD dwCash;            //½»Ò×½ð¶î
}NET_DVR_TRADEINFO, *LPNET_DVR_TRADEINFO;


//ATM×¨ÓÃ
/****************************ATM(begin)***************************/
#define NCR        0
#define DIEBOLD    1
#define WINCOR_NIXDORF    2
#define SIEMENS    3
#define OLIVETTI    4
#define FUJITSU    5
#define HITACHI    6
#define SMI        7
#define IBM        8
#define BULL    9
#define YiHua    10
#define LiDe    11
#define GDYT    12
#define Mini_Banl    13
#define GuangLi    14
#define DongXin    15
#define ChenTong    16
#define NanTian    17
#define XiaoXing    18
#define GZYY    19
#define QHTLT    20
#define DRS918    21
#define KALATEL    22
#define NCR_2    23    
#define NXS        24


/*Ö¡¸ñÊ½*/
typedef struct 
{
    BYTE code[12];        /* ´úÂë */
}NET_DVR_FRAMETYPECODE;


//ATM²ÎÊý
typedef struct 
{
    DWORD dwSize;
    char sATMIP[16];                        /* ATM IPµØÖ· */
    DWORD dwATMType;                        /* ATMÀàÐÍ */
    DWORD dwInputMode;                        /* ÊäÈë·½Ê½    0-ÍøÂçÕìÌý 1-ÍøÂç½ÓÊÕ 2-´®¿ÚÖ±½ÓÊäÈë 3-´®¿ÚATMÃüÁîÊäÈë*/
    DWORD dwFrameSignBeginPos;              /* ±¨ÎÄ±êÖ¾Î»µÄÆðÊ¼Î»ÖÃ*/
    DWORD dwFrameSignLength;                /* ±¨ÎÄ±êÖ¾Î»µÄ³¤¶È */
    BYTE  byFrameSignContent[12];            /* ±¨ÎÄ±êÖ¾Î»µÄÄÚÈÝ */
    DWORD dwCardLengthInfoBeginPos;            /* ¿¨ºÅ³¤¶ÈÐÅÏ¢µÄÆðÊ¼Î»ÖÃ */
    DWORD dwCardLengthInfoLength;            /* ¿¨ºÅ³¤¶ÈÐÅÏ¢µÄ³¤¶È */
    DWORD dwCardNumberInfoBeginPos;            /* ¿¨ºÅÐÅÏ¢µÄÆðÊ¼Î»ÖÃ */
    DWORD dwCardNumberInfoLength;            /* ¿¨ºÅÐÅÏ¢µÄ³¤¶È */
    DWORD dwBusinessTypeBeginPos;           /* ½»Ò×ÀàÐÍµÄÆðÊ¼Î»ÖÃ */
    DWORD dwBusinessTypeLength;                /* ½»Ò×ÀàÐÍµÄ³¤¶È */
    NET_DVR_FRAMETYPECODE frameTypeCode[10];/* ÀàÐÍ */
}NET_DVR_FRAMEFORMAT, *LPNET_DVR_FRAMEFORMAT;
//SDK_V31 ATM

/*¹ýÂËÉèÖÃ*/
typedef struct    tagNET_DVR_FILTER
{    
    BYTE                    byEnable;            //0,²»ÆôÓÃ;1,ÆôÓÃ
    BYTE                    byMode;                //0,ASCII;1,HEX    
    BYTE                    byFrameBeginPos;    // ÐèÒª¹ýÂËÄ¿±ê×Ö·û´®ÆðÊ¼Î»ÖÃ     
    BYTE                    byRes;           // ±£Áô×Ö½Ú
    BYTE                     byFilterText[16];    //¹ýÂË×Ö·û´®
    BYTE                    byRes2[12];         // ±£Áô×Ö½Ú
}NET_DVR_FILTER, *LPNET_DVR_FILTER;

//Êý¾Ý°ü·ÖÎö Êý¾Ý°ü±êÊ¶
typedef struct    tagNET_DVR_IDENTIFICAT
{    
    BYTE                    byStartMode;        //ÆðÊ¼×Ö·ûÄ£Ê½:0,ASCII;1,HEX
    BYTE                    byEndMode;            //½áÊø×Ö·ûÄ£Ê½£º0,ASCII;1,HEX
    BYTE                    byRes[2];           //±£Áô×Ö½Ú
    NET_DVR_FRAMETYPECODE    struStartCode;        //Êý¾Ý°üÆðÊ¼±êÊ¶×Ö·û
    NET_DVR_FRAMETYPECODE    struEndCode;        //Êý¾Ý°ü½áÊø±êÊ¶×Ö·û
    BYTE                    byRes1[12];         //±£Áô×Ö½Ú
}NET_DVR_IDENTIFICAT, *LPNET_DVR_IDENTIFICAT;

typedef struct    tagNET_DVR_PACKAGE_LOCATION/*±¨ÎÄÐÅÏ¢Î»ÖÃ*/
{    
    BYTE                     byOffsetMode;            /*±¨ÎÄÎ»ÖÃÐÅÏ¢Ä£Ê½ 0,token(×Ö·û±êÖ¾Ä£Ê½);1,fix£¨¹Ì¶¨Ä£Ê½£©*/
    BYTE                    byRes1[3];                // ±£Áô×Ö½Ú
    DWORD                      dwOffsetPos;            /*modeÎª1µÄÊ±ºòÊ¹ÓÃ,¹Ì¶¨Æ«ÒÆ´óÐ¡*/
    NET_DVR_FRAMETYPECODE    struTokenCode;            /*±êÖ¾Î»*/
    BYTE                    byMultiplierValue;        /*±êÖ¾Î»¶àÉÙ´Î³öÏÖ*/
    BYTE                    byEternOffset;            /*¸½¼Ó×Ö·ûÆ«ÒÆÁ¿*/
    BYTE                    byCodeMode;                /*0,ASCII;1,HEX*/
    BYTE                     byRes2[9];                //±£Áô×Ö½Ú
}NET_DVR_PACKAGE_LOCATION, *LPNET_DVR_PACKAGE_LOCATION;


typedef struct    tagNET_DVR_PACKAGE_LENGTH//±¨ÎÄÐÅÏ¢³¤¶È
{    
    BYTE                    byLengthMode;            //³¤¶ÈÀàÐÍ£¬0,¿É±ä³¤¶È;1,¹Ì¶¨³¤¶È;2,×ÔÖú³¤¶È(´Ó¿¨ºÅÖÐ»ñÈ¡)
    BYTE                    byRes1[3];              // ±£Áô×Ö½Ú
    DWORD                      dwFixLength;                //modeÎª1µÄÊ±ºòÊ¹ÓÃ,¹Ì¶¨³¤¶È´óÐ¡
    DWORD                    dwMaxLength;            //±¨ÎÄÐÅÏ¢×î´ó³¤¶È  byLengthModeÎª0Ê±Ê¹ÓÃ
    DWORD                    dwMinLength;            //±¨ÎÄÐÅÏ¢×îÐ¡³¤¶È  byLengthModeÎª0Ê±Ê¹ÓÃ
    BYTE                    byEndMode;                //¿É±ä³¤¶È ÖÕ½á·ûÄ£Ê½ 0,ASCII;1,HEX    
    BYTE                    byRes2[3];              //±£Áô×Ö½Ú
    NET_DVR_FRAMETYPECODE    struEndCode;        //¿É±ä³¤¶ÈÖÕ½á·û
    DWORD                    dwLengthPos;            //lengthModeÎª2µÄÊ±ºòÊ¹ÓÃ£¬¿¨ºÅ³¤¶ÈÔÚ±¨ÎÄÖÐµÄÎ»ÖÃ
    DWORD                    dwLengthLen;            //lengthModeÎª2µÄÊ±ºòÊ¹ÓÃ£¬¿¨ºÅ³¤¶ÈµÄ³¤¶È
    BYTE                    byRes3[8];              // ±£Áô×Ö½Ú
}NET_DVR_PACKAGE_LENGTH,* LPNET_DVR_PACKAGE_LENGTH;

typedef struct    tagNET_DVR_OSD_POSITION//OSD µþ¼ÓµÄÎ»ÖÃ
{    
    BYTE                    byPositionMode;        //µþ¼Ó·ç¸ñ£¬¹²2ÖÖ£»0£¬²»ÏÔÊ¾£»1£¬×Ô¶¨Òå
    BYTE                    byRes1[3];          // ±£Áô×Ö½Ú
    DWORD                     dwPosX;                //x×ø±ê£¬µþ¼Ó·ç¸ñÎª×Ô¶¨ÒåÊ±Ê¹ÓÃ
    DWORD                    dwPosY;                //y×ø±ê£¬µþ¼Ó·ç¸ñÎª×Ô¶¨ÒåÊ±Ê¹ÓÃ
    BYTE                    byRes2[8];          //±£Áô×Ö½Ú
}NET_DVR_OSD_POSITION, *LPNET_DVR_OSD_POSITION;

typedef struct    tagNET_DVR_DATE_FORMAT//ÈÕÆÚÏÔÊ¾¸ñÊ½
{    
    BYTE                    byMonth;                //Month,0.mm;1.mmm;2.mmmm                            
    BYTE                     byDay;                    //Day,0.dd;                                    
    BYTE                     byYear;                    //Year,0.yy;1.yyyy    
    BYTE                    byDateForm;                //0~5£¬ÄêÔÂÈÕµÄÅÅÁÐ×éºÏ
    BYTE                    byRes[20];              // ±£Áô×Ö½Ú
    char                    chSeprator[4];            //·Ö¸ô·û
    char                    chDisplaySeprator[4];    //ÏÔÊ¾·Ö¸ô·û
    BYTE                    byDisplayForm;            //0~5£¬3¸öitemµÄÅÅÁÐ×éºÏ
    BYTE                    res[27];                // ±£Áô×Ö½Ú
}NET_DVR_DATE_FORMAT, *LPNET_DVR_DATE_FORMAT;
typedef struct    tagNET_DVRT_TIME_FORMAT//Ê±¼äÏÔÊ¾¸ñÊ½
{    
    BYTE                    byTimeForm;                //1. HH MM SS;0. HH MM
    BYTE                     byRes1[23];             // ±£Áô×Ö½Ú
    BYTE                    byHourMode;             //0,12;1,24 
    BYTE                    byRes2[3];              // ±£Áô×Ö½Ú
    char                    chSeprator[4];             //±¨ÎÄ·Ö¸ô·û£¬ÔÝÊ±Ã»ÓÃ
    char                    chDisplaySeprator[4];    //ÏÔÊ¾·Ö¸ô·û
    BYTE                    byDisplayForm;            //0~5£¬3¸öitemµÄÅÅÁÐ×éºÏ
    BYTE                    byRes3[3];              // ±£Áô×Ö½Ú
    BYTE                    byDisplayHourMode;        //0,12;1,24 
    BYTE                    byRes4[19];             // ±£Áô×Ö½Ú
}NET_DVR_TIME_FORMAT, *LPNET_DVR_TIME_FORMAT;

typedef struct tagNET_DVR_OVERLAY_CHANNEL
{    
    BYTE                    byChannel[64];//µþ¼ÓµÄÍ¨µÀ Ã¿¸ö×Ö½Ú±êÊ¶Ò»¸öÍ¨µÀ£¬ ÀýÈçbyChannel[0]ÖµÎª1¶ÔÓ¦µþ¼ÓÍ¨µÀ1£¬0±íÊ¾²»µþ¼ÓÍ¨µÀ1¡£
    DWORD                    dwDelayTime;            //µþ¼ÓÑÓÊ±Ê±¼ä
    BYTE                    byEnableDelayTime;        //ÊÇ·ñÆôÓÃµþ¼ÓÑÓÊ±
    BYTE                    byRes[11];          // ±£Áô×Ö½Ú
}NET_DVR_OVERLAY_CHANNEL, *LPNET_DVR_OVERLAY_CHANNEL;

// ATM ±¨ÎÄÐÐÎªÐÅÏ¢
typedef struct tagNET_DVR_ATM_PACKAGE_ACTION
{    
    NET_DVR_PACKAGE_LOCATION    struPackageLocation;// ±¨ÎÄÎ»ÖÃÐÅÏ¢
    NET_DVR_OSD_POSITION        struOsdPosition;    // OSD µþ¼ÓÎ»ÖÃ
    NET_DVR_FRAMETYPECODE        struActionCode;        //½»Ò×ÀàÐÍÐÐÎªÂë
    NET_DVR_FRAMETYPECODE        struPreCode;        //µþ¼Ó×Ö·ûÇ°µÄ×Ö·û
    BYTE                    byActionCodeMode;        //½»Ò×ÀàÐÍÐÐÎªÂëÄ£Ê½0,ASCII;1,HEX
    BYTE                    byRes[7];               // ±£Áô×Ö½Ú
}NET_DVR_ATM_PACKAGE_ACTION, *LPNET_DVR_ATM_PACKAGE_ACTION;

// ATM ±¨ÎÄDATAÐÅÏ¢
typedef struct tagNET_DVR_ATM_PACKAGE_DATE
{    
    NET_DVR_PACKAGE_LOCATION    struPackageLocation;// ÈÕÆÚÔÚ±¨ÎÄÖÐµÄÎ»ÖÃÐÅÏ¢
    NET_DVR_DATE_FORMAT            struDateForm;        //ÈÕÆÚÏÔÊ¾¸ñÊ½
    NET_DVR_OSD_POSITION        struOsdPosition;    // OSDµþ¼ÓÎ»ÖÃÐÅÏ¢
    BYTE                        res[8];             // ±£Áô×Ö½Ú
}NET_DVR_ATM_PACKAGE_DATE, *LPNET_DVR_ATM_PACKAGE_DATE;


//ATM±¨ÎÄÊ±¼äÐÅÏ¢
typedef struct tagNET_DVR_ATM_PACKAGE_TIME
{    
    NET_DVR_PACKAGE_LOCATION    location;        // Ê±¼äÔÚ±¨ÎÄÖÐµÄÎ»ÖÃÐÅÏ¢
    NET_DVR_TIME_FORMAT            struTimeForm;    // Ê±¼äÏÔÊ¾¸ñÊ½
    NET_DVR_OSD_POSITION        struOsdPosition;// OSD µþ¼ÓÎ»ÖÃÐÅÏ¢
    BYTE                        byRes[8];        // ±£Áô×Ö½Ú
}NET_DVR_ATM_PACKAGE_TIME, *LPNET_DVR_ATM_PACKAGE_TIME;


// ATM ÆäËû±¨ÎÄÐÅÏ¢£¨¿¨ºÅ£¬½»Ò×½ð¶î£¬½»Ò×ÐòºÅ£©
typedef struct tagNET_DVR_ATM_PACKAGE_OTHERS
{    
    NET_DVR_PACKAGE_LOCATION    struPackageLocation; //±¨ÎÄÎ»ÖÃÐÅÏ¢
    NET_DVR_PACKAGE_LENGTH    struPackageLength;        //³¤¶ÈÐÅÏ¢
    NET_DVR_OSD_POSITION        struOsdPosition;    // OSDµþ¼ÓÎ»ÖÃÐÅÏ¢
    NET_DVR_FRAMETYPECODE        struPreCode;        //µþ¼Ó×Ö·ûÇ°µÄ×Ö·û
    BYTE                    res[8];                    //±£Áô×Ö½Ú
}NET_DVR_ATM_PACKAGE_OTHERS, *LPNET_DVR_ATM_PACKAGE_OTHERS;


//ÓÃ»§×Ô¶¨ÒåÐ­Òé
typedef struct tagNET_DVR_ATM_USER_DEFINE_PROTOCOL
{
    NET_DVR_IDENTIFICAT        struIdentification;  //±¨ÎÄ±êÖ¾
    NET_DVR_FILTER             struFilter; //Êý¾Ý°ü¹ýÂËÉèÖÃ
    NET_DVR_ATM_PACKAGE_OTHERS struCardNoPara; //µþ¼Ó¿¨ºÅÉèÖÃ
    NET_DVR_ATM_PACKAGE_ACTION struTradeActionPara[MAX_ACTION_TYPE]; //µþ¼Ó½»Ò×ÐÐÎªÉèÖÃ 0-9 ÒÀ´Î¶ÔÓ¦InCard OutCard OverLay SetTime GetStatus Query WithDraw Deposit ChanPass Transfer
    NET_DVR_ATM_PACKAGE_OTHERS struAmountPara; //µþ¼Ó½»Ò×½ð¶îÉèÖÃ
    NET_DVR_ATM_PACKAGE_OTHERS struSerialNoPara; //µþ¼Ó½»Ò×ÐòºÅÉèÖÃ
    NET_DVR_OVERLAY_CHANNEL    struOverlayChan; //µþ¼ÓÍ¨µÀÉèÖÃ
    NET_DVR_ATM_PACKAGE_DATE   struRes1; //µþ¼ÓÈÕÆÚ£¬±£Áô
    NET_DVR_ATM_PACKAGE_TIME   struRes2; //µþ¼ÓÊ±¼ä£¬±£Áô
    BYTE                       byRes3[124];        //±£Áô
}NET_DVR_ATM_USER_DEFINE_PROTOCOL, *LPNET_DVR_ATM_USER_DEFINE_PROTOCOL;

typedef struct tagNET_DVR_ATM_FRAMEFORMAT_V30
{        
    DWORD                        dwSize;                 //½á¹¹´óÐ¡
    BYTE                        byEnable;                /*ÊÇ·ñÆôÓÃ0,²»ÆôÓÃ;1,ÆôÓÃ*/
    BYTE                        byInputMode;            /**ÊäÈë·½Ê½:0-ÍøÂç¼àÌý¡¢1ÍøÂçÐ­Òé¡¢2-´®¿Ú¼àÌý¡¢3-´®¿ÚÐ­Òé*/
    BYTE                        byRes1[34];              //±£Áô×Ö½Ú 
    NET_DVR_IPADDR                struAtmIp;                /*ATM »úIP ÍøÂç¼àÌýÊ±Ê¹ÓÃ */
    WORD                        wAtmPort;                /* ÍøÂçÐ­Òé·½Ê½Ê±ÊÇÊ¹ÓÃ*/
    BYTE                        byRes2[2];              // ±£Áô×Ö½Ú
    DWORD                        dwAtmType;                /*ATMÐ­ÒéÀàÐÍ£¬´ÓNET_DVR_ATM_PROTOCOL½á¹¹ÖÐ»ñÈ¡£¬Èç¹ûÀàÐÍÎª×Ô¶¨ÒåÊ±Ê¹ÓÃÓÃ»§×Ô¶¨ÒåÐ­Òé*/
    NET_DVR_ATM_USER_DEFINE_PROTOCOL   struAtmUserDefineProtocol; //ÓÃ»§×Ô¶¨ÒåÐ­Òé£¬µ±ATMÀàÐÍÎª×Ô¶¨Ê±ÐèÒªÊ¹ÓÃ¸Ã¶¨Òå
    BYTE                        byRes3[8];
}NET_DVR_ATM_FRAMEFORMAT_V30, *LPNET_DVR_ATM_FRAMEFORMAT_V30;


typedef struct  tagNET_DVR_ATM_PROTO_TYPE
{
    DWORD dwAtmType; //ATMÐ­ÒéÀàÐÍ£¬Í¬Ê±×÷ÎªË÷ÒýÐòºÅ ATM ÅäÖÃÖÐµÄdwAtmType ×Ô¶¨ÒåÊ±Îª1025
    char chDesc[ATM_DESC_LEN]; //ATMÐ­Òé¼òµ¥ÃèÊö
}NET_DVR_ATM_PROTO_TYPE, *LPNET_DVR_ATM_PROTO_TYPE; //Ð­ÒéÐÅÏ¢Êý¾Ý½á¹¹

typedef struct tagNET_DVR_ATM_PROTO_LIST    //ATM Ð­ÒéÁÐ±í
{
    DWORD                  dwAtmProtoNum;           // Ð­ÒéÁÐ±íµÄ¸öÊý
    NET_DVR_ATM_PROTO_TYPE struAtmProtoType[MAX_ATM_PROTOCOL_NUM]; //Ð­ÒéÁÐ±íÐÅÏ¢
}NET_DVR_ATM_PROTO_LIST, *LPNET_DVR_ATM_PROTO_LIST;

typedef struct tagNET_DVR_ATM_PROTOCOL
{
    DWORD dwSize;
    NET_DVR_ATM_PROTO_LIST struNetListenList; // ÍøÂç¼àÌýÐ­ÒéÃèÊö
    NET_DVR_ATM_PROTO_LIST struSerialListenList; //´®¿Ú¼àÌýÐ­ÒéÃèÊö
    NET_DVR_ATM_PROTO_LIST struNetProtoList;     //ÍøÂçÐ­ÒéÃèÊö
    NET_DVR_ATM_PROTO_LIST struSerialProtoList;   //´®¿ÚÐ­ÒéÃèÊö
    NET_DVR_ATM_PROTO_TYPE struCustomProto;        //×Ô¶¨ÒåÐ­Òé
}NET_DVR_ATM_PROTOCOL, *LPNET_DVR_ATM_PROTOCOL;
// SDK_V31

/*****************************DS-6001D/F(begin)***************************/
//DS-6001D Decoder
typedef struct 
{
    BYTE byEncoderIP[16];        //½âÂëÉè±¸Á¬½ÓµÄ·þÎñÆ÷IP
    BYTE byEncoderUser[16];        //½âÂëÉè±¸Á¬½ÓµÄ·þÎñÆ÷µÄÓÃ»§Ãû
    BYTE byEncoderPasswd[16];    //½âÂëÉè±¸Á¬½ÓµÄ·þÎñÆ÷µÄÃÜÂë
    BYTE bySendMode;            //½âÂëÉè±¸Á¬½Ó·þÎñÆ÷µÄÁ¬½ÓÄ£Ê½
    BYTE byEncoderChannel;        //½âÂëÉè±¸Á¬½ÓµÄ·þÎñÆ÷µÄÍ¨µÀºÅ
    WORD wEncoderPort;            //½âÂëÉè±¸Á¬½ÓµÄ·þÎñÆ÷µÄ¶Ë¿ÚºÅ
    BYTE reservedData[4];        //±£Áô
}NET_DVR_DECODERINFO, *LPNET_DVR_DECODERINFO;

typedef struct 
{
    BYTE byEncoderIP[16];        //½âÂëÉè±¸Á¬½ÓµÄ·þÎñÆ÷IP
    BYTE byEncoderUser[16];        //½âÂëÉè±¸Á¬½ÓµÄ·þÎñÆ÷µÄÓÃ»§Ãû
    BYTE byEncoderPasswd[16];    //½âÂëÉè±¸Á¬½ÓµÄ·þÎñÆ÷µÄÃÜÂë
    BYTE byEncoderChannel;        //½âÂëÉè±¸Á¬½ÓµÄ·þÎñÆ÷µÄÍ¨µÀºÅ
    BYTE bySendMode;            //½âÂëÉè±¸Á¬½ÓµÄ·þÎñÆ÷µÄÁ¬½ÓÄ£Ê½
    WORD wEncoderPort;            //½âÂëÉè±¸Á¬½ÓµÄ·þÎñÆ÷µÄ¶Ë¿ÚºÅ
    DWORD dwConnectState;        //½âÂëÉè±¸Á¬½Ó·þÎñÆ÷µÄ×´Ì¬
    BYTE reservedData[4];        //±£Áô
}NET_DVR_DECODERSTATE, *LPNET_DVR_DECODERSTATE;

/*½âÂëÉè±¸¿ØÖÆÂë¶¨Òå*/
#define NET_DEC_STARTDEC        1
#define NET_DEC_STOPDEC            2
#define NET_DEC_STOPCYCLE        3
#define NET_DEC_CONTINUECYCLE    4
/*Á¬½ÓµÄÍ¨µÀÅäÖÃ*/
typedef struct 
{
    char sDVRIP[16];                /* DVR IPµØÖ· */
    WORD wDVRPort;                     /* ¶Ë¿ÚºÅ */
    BYTE sUserName[NAME_LEN];        /* ÓÃ»§Ãû */
    BYTE sPassword[PASSWD_LEN];        /* ÃÜÂë */
    BYTE byChannel;                    /* Í¨µÀºÅ */
    BYTE byLinkMode;                /* Á¬½ÓÄ£Ê½ */
    BYTE byLinkType;                /* Á¬½ÓÀàÐÍ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷ */
}NET_DVR_DECCHANINFO, *LPNET_DVR_DECCHANINFO;

/*Ã¿¸ö½âÂëÍ¨µÀµÄÅäÖÃ*/
typedef struct 
{
    BYTE    byPoolChans;            /*Ã¿Â·½âÂëÍ¨µÀÉÏµÄÑ­»·Í¨µÀÊýÁ¿, ×î¶à4Í¨µÀ 0±íÊ¾Ã»ÓÐ½âÂë*/
    NET_DVR_DECCHANINFO struchanConInfo[MAX_DECPOOLNUM];
    BYTE    byEnablePoll;            /*ÊÇ·ñÂÖÑ² 0-·ñ 1-ÊÇ*/
    BYTE    byPoolTime;                /*ÂÖÑ²Ê±¼ä 0-±£Áô 1-10Ãë 2-15Ãë 3-20Ãë 4-30Ãë 5-45Ãë 6-1·ÖÖÓ 7-2·ÖÖÓ 8-5·ÖÖÓ */
}NET_DVR_DECINFO, *LPNET_DVR_DECINFO;

/*Õû¸öÉè±¸½âÂëÅäÖÃ*/
typedef struct 
{
    DWORD    dwSize;
    DWORD    dwDecChanNum;         /*½âÂëÍ¨µÀµÄÊýÁ¿*/
    NET_DVR_DECINFO struDecInfo[MAX_DECNUM];
}NET_DVR_DECCFG, *LPNET_DVR_DECCFG;

//2005-08-01
/* ½âÂëÉè±¸Í¸Ã÷Í¨µÀÉèÖÃ */
typedef struct 
{
    DWORD dwEnableTransPort;    /* ÊÇ·ñÆô¶¯Í¸Ã÷Í¨µÀ 0£­²»ÆôÓÃ 1£­ÆôÓÃ*/
    char sDecoderIP[16];        /* DVR IPµØÖ· */
    WORD wDecoderPort;            /* ¶Ë¿ÚºÅ */
    WORD wDVRTransPort;            /* ÅäÖÃÇ°¶ËDVRÊÇ´Ó485/232Êä³ö£¬1±íÊ¾232´®¿Ú,2±íÊ¾485´®¿Ú */
    char cReserve[4];
}NET_DVR_PORTINFO, *LPNET_DVR_PORTINFO;

typedef struct 
{
    DWORD dwSize;
    NET_DVR_PORTINFO struTransPortInfo[MAX_TRANSPARENTNUM]; /* Êý×é0±íÊ¾232 Êý×é1±íÊ¾485 */
}NET_DVR_PORTCFG, *LPNET_DVR_PORTCFG;

/* ¿ØÖÆÍøÂçÎÄ¼þ»Ø·Å */
typedef struct 
{
    DWORD dwSize;
    char sDecoderIP[16];        /* DVR IPµØÖ· */
    WORD wDecoderPort;            /* ¶Ë¿ÚºÅ */
    WORD wLoadMode;                /* »Ø·ÅÏÂÔØÄ£Ê½ 1£­°´Ãû×Ö 2£­°´Ê±¼ä */
    union
    {
        BYTE byFile[100];        /* »Ø·ÅµÄÎÄ¼þÃû */
        struct
        {
            DWORD dwChannel;
            BYTE sUserName[NAME_LEN];    /*ÇëÇóÊÓÆµÓÃ»§Ãû*/
            BYTE sPassword[PASSWD_LEN];    /* ÃÜÂë */
            NET_DVR_TIME struStartTime;    /* °´Ê±¼ä»Ø·ÅµÄ¿ªÊ¼Ê±¼ä */
            NET_DVR_TIME struStopTime;    /* °´Ê±¼ä»Ø·ÅµÄ½áÊøÊ±¼ä */
        }bytime;
    }mode_size;
}NET_DVR_PLAYREMOTEFILE, *LPNET_DVR_PLAYREMOTEFILE;

/*µ±Ç°Éè±¸½âÂëÁ¬½Ó×´Ì¬*/
typedef struct 
{
    DWORD dwWorkType;        /*¹¤×÷·½Ê½£º1£ºÂÖÑ²¡¢2£º¶¯Ì¬Á¬½Ó½âÂë¡¢3£ºÎÄ¼þ»Ø·ÅÏÂÔØ 4£º°´Ê±¼ä»Ø·ÅÏÂÔØ*/
    char sDVRIP[16];        /*Á¬½ÓµÄÉè±¸ip*/
    WORD wDVRPort;            /*Á¬½Ó¶Ë¿ÚºÅ*/
    BYTE byChannel;            /* Í¨µÀºÅ */
    BYTE byLinkMode;        /* Á¬½ÓÄ£Ê½ */
    DWORD    dwLinkType;        /*Á¬½ÓÀàÐÍ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷*/
    union
    {
        struct
        {
            BYTE sUserName[NAME_LEN];    /*ÇëÇóÊÓÆµÓÃ»§Ãû*/
            BYTE sPassword[PASSWD_LEN];    /* ÃÜÂë */
            char cReserve[52];
        }userInfo;
        struct
        {
            BYTE   fileName[100];
        }fileInfo;
        struct
        {
            DWORD    dwChannel;
            BYTE    sUserName[NAME_LEN];    /*ÇëÇóÊÓÆµÓÃ»§Ãû*/
            BYTE    sPassword[PASSWD_LEN];    /* ÃÜÂë */
            NET_DVR_TIME struStartTime;        /* °´Ê±¼ä»Ø·ÅµÄ¿ªÊ¼Ê±¼ä */
            NET_DVR_TIME struStopTime;        /* °´Ê±¼ä»Ø·ÅµÄ½áÊøÊ±¼ä */
        }timeInfo;
    }objectInfo;
}NET_DVR_DECCHANSTATUS, *LPNET_DVR_DECCHANSTATUS;

typedef struct 
{
    DWORD   dwSize;
    NET_DVR_DECCHANSTATUS struDecState[MAX_DECNUM];
}NET_DVR_DECSTATUS, *LPNET_DVR_DECSTATUS;
/*****************************DS-6001D/F(end)***************************/

//µ¥×Ö·û²ÎÊý(×Ó½á¹¹)
typedef struct 
{
    WORD wShowString;                // Ô¤ÀÀµÄÍ¼ÏóÉÏÊÇ·ñÏÔÊ¾×Ö·û,0-²»ÏÔÊ¾,1-ÏÔÊ¾ ÇøÓò´óÐ¡704*576,µ¥¸ö×Ö·ûµÄ´óÐ¡Îª32*32
    WORD wStringSize;                /* ¸ÃÐÐ×Ö·ûµÄ³¤¶È£¬²»ÄÜ´óÓÚ44¸ö×Ö·û */
    WORD wShowStringTopLeftX;        /* ×Ö·ûÏÔÊ¾Î»ÖÃµÄx×ø±ê */
    WORD wShowStringTopLeftY;        /* ×Ö·ûÃû³ÆÏÔÊ¾Î»ÖÃµÄy×ø±ê */
    char sString[44];                /* ÒªÏÔÊ¾µÄ×Ö·ûÄÚÈÝ */
}NET_DVR_SHOWSTRINGINFO, *LPNET_DVR_SHOWSTRINGINFO;

//µþ¼Ó×Ö·û(9000À©Õ¹)
typedef struct 
{
    DWORD dwSize;
    NET_DVR_SHOWSTRINGINFO struStringInfo[MAX_STRINGNUM_V30];                /* ÒªÏÔÊ¾µÄ×Ö·ûÄÚÈÝ */
}NET_DVR_SHOWSTRING_V30, *LPNET_DVR_SHOWSTRING_V30;

//µþ¼Ó×Ö·ûÀ©Õ¹(8Ìõ×Ö·û)
typedef struct 
{
    DWORD dwSize;
    NET_DVR_SHOWSTRINGINFO struStringInfo[MAX_STRINGNUM_EX];                /* ÒªÏÔÊ¾µÄ×Ö·ûÄÚÈÝ */
}NET_DVR_SHOWSTRING_EX, *LPNET_DVR_SHOWSTRING_EX;

//µþ¼Ó×Ö·û
typedef struct 
{
    DWORD dwSize;
    NET_DVR_SHOWSTRINGINFO struStringInfo[MAX_STRINGNUM];                /* ÒªÏÔÊ¾µÄ×Ö·ûÄÚÈÝ */
}NET_DVR_SHOWSTRING, *LPNET_DVR_SHOWSTRING;

/****************************DS9000ÐÂÔö½á¹¹(begin)******************************/
/*
EMAIL²ÎÊý½á¹¹
*/
typedef struct
{        
    DWORD        dwSize;
    BYTE        sAccount[NAME_LEN];                /* ÕËºÅ*/ 
    BYTE        sPassword[MAX_EMAIL_PWD_LEN];            /*ÃÜÂë */
    struct
    {
        BYTE    sName[NAME_LEN];                /* ·¢¼þÈËÐÕÃû */
        BYTE    sAddress[MAX_EMAIL_ADDR_LEN];        /* ·¢¼þÈËµØÖ· */
    }struSender;
    BYTE        sSmtpServer[MAX_EMAIL_ADDR_LEN];    /* smtp·þÎñÆ÷ */
    BYTE        sPop3Server[MAX_EMAIL_ADDR_LEN];    /* pop3·þÎñÆ÷ */
    struct
    {
        BYTE    sName[NAME_LEN];                /* ÊÕ¼þÈËÐÕÃû */
        BYTE    sAddress[MAX_EMAIL_ADDR_LEN];        /* ÊÕ¼þÈËµØÖ· */
    }struReceiver[3];                            /* ×î¶à¿ÉÒÔÉèÖÃ3¸öÊÕ¼þÈË */
    BYTE        byAttachment;                    /* ÊÇ·ñ´ø¸½¼þ */
    BYTE        bySmtpServerVerify;                /* ·¢ËÍ·þÎñÆ÷ÒªÇóÉí·ÝÑéÖ¤ */
    BYTE        byMailInterval;                 /* mail interval */
    BYTE        byEnableSSL;                    //sslÊÇ·ñÆôÓÃ9000_1.1
    WORD        wSmtpPort;                        //gmailµÄ465£¬ÆÕÍ¨µÄÎª25 
    BYTE        byEnableTLS;                    /*TLSÊÇ·ñÆôÓÃ*/
    BYTE        byStartTLS;                     /*ÊÇ·ñÆôÓÃStartTLS*/
    BYTE        byRes[72];                        /*±£Áô*/
} NET_DVR_EMAILCFG_V30, *LPNET_DVR_EMAILCFG_V30;

/*
DVRÊµÏÖÑ²º½Êý¾Ý½á¹¹
*/
typedef struct
{    
    DWORD     dwSize;
    BYTE    byPresetNo[CRUISE_MAX_PRESET_NUMS];        /* Ô¤ÖÃµãºÅ */
    BYTE     byCruiseSpeed[CRUISE_MAX_PRESET_NUMS];    /* Ñ²º½ËÙ¶È */
    WORD    wDwellTime[CRUISE_MAX_PRESET_NUMS];        /* Í£ÁôÊ±¼ä */
    BYTE    byEnableThisCruise;                        /* ÊÇ·ñÆôÓÃ */
    BYTE    res[15];
}NET_DVR_CRUISE_PARA, *LPNET_DVR_CRUISE_PARA; 
/****************************DS9000ÐÂÔö½á¹¹(end)******************************/

//Ê±¼äµã
typedef struct 
{
    DWORD dwMonth;        //ÔÂ 0-11±íÊ¾1-12¸öÔÂ
    DWORD dwWeekNo;        //µÚ¼¸ÖÜ 0£­µÚ1ÖÜ 1£­µÚ2ÖÜ 2£­µÚ3ÖÜ 3£­µÚ4ÖÜ 4£­×îºóÒ»ÖÜ
    DWORD dwWeekDate;    //ÐÇÆÚ¼¸ 0£­ÐÇÆÚÈÕ 1£­ÐÇÆÚÒ» 2£­ÐÇÆÚ¶þ 3£­ÐÇÆÚÈý 4£­ÐÇÆÚËÄ 5£­ÐÇÆÚÎå 6£­ÐÇÆÚÁù
    DWORD dwHour;        //Ð¡Ê±    ¿ªÊ¼Ê±¼ä0£­23 ½áÊøÊ±¼ä1£­23
    DWORD dwMin;        //·Ö    0£­59
}NET_DVR_TIMEPOINT;

//ÏÄÁîÊ±²ÎÊý
typedef struct 
{
    DWORD dwSize;
    DWORD dwZoneIndex; //Ó¦ÓÃ²ãÈí¼þÊ¹ÓÃNET_DVR_NTPPARA ÖÐµÄcTimeDifferenceH »òcTimeDifferenceM À´ÉèÖÃÊ±Çø£¬´Ë´¦ÓÃ»ñÈ¡µÄÖµÌî³ä£¬²»¶ÔÓÃ»§Ìá¹©ÊäÈë±à¼­¿ò
    BYTE byRes1[12];            //±£Áô
    DWORD dwEnableDST;        //ÊÇ·ñÆôÓÃÏÄÊ±ÖÆ 0£­²»ÆôÓÃ 1£­ÆôÓÃ
    BYTE byDSTBias;    //ÏÄÁîÊ±Æ«ÒÆÖµ£¬30min, 60min, 90min, 120min, ÒÔ·ÖÖÓ¼Æ£¬´«µÝÔ­Ê¼ÊýÖµ
    BYTE byRes2[3];
    NET_DVR_TIMEPOINT struBeginPoint;    //ÏÄÊ±ÖÆ¿ªÊ¼Ê±¼ä
    NET_DVR_TIMEPOINT struEndPoint;    //ÏÄÊ±ÖÆÍ£Ö¹Ê±¼ä
}NET_DVR_ZONEANDDST, *LPNET_DVR_ZONEANDDST;

//Í¼Æ¬ÖÊÁ¿
typedef struct 
{
/*×¢Òâ£ºµ±Í¼ÏñÑ¹Ëõ·Ö±æÂÊÎªVGAÊ±£¬Ö§³Ö0=CIF, 1=QCIF, 2=D1×¥Í¼£¬
µ±·Ö±æÂÊÎª3=UXGA(1600x1200), 4=SVGA(800x600), 5=HD720p(1280x720),6=VGA,7=XVGA, 8=HD900p
    ½öÖ§³Öµ±Ç°·Ö±æÂÊµÄ×¥Í¼*/
    
    /* ¿ÉÒÔÍ¨¹ýÄÜÁ¦¼¯»ñÈ¡
       0-CIF£¬           1-QCIF£¬           2-D1£¬         3-UXGA(1600x1200), 4-SVGA(800x600),5-HD720p(1280x720)£¬
       6-VGA£¬           7-XVGA£¬           8-HD900p£¬     9-HD1080£¬     10-2560*1920£¬
       11-1600*304£¬     12-2048*1536£¬     13-2448*2048,  14-2448*1200£¬ 15-2448*800£¬
       16-XGA(1024*768), 17-SXGA(1280*1024),18-WD1(960*576/960*480),      19-1080i,      20-576*576£¬     
       21-1536*1536,     22-1920*1920,      23-320*240,    24-720*720,    25-1024*768,
       26-1280*1280,     27-1600*600,       28-2048*768,   29-160*120,    75-336*256,
       78-384*256,         79-384*216,        80-320*256,    82-320*192,    83-512*384,
       127-480*272,      128-512*272,       500-384*288,
       0xff-Auto(Ê¹ÓÃµ±Ç°ÂëÁ÷·Ö±æÂÊ)
    */
    WORD    wPicSize;            
    WORD    wPicQuality;            /* Í¼Æ¬ÖÊÁ¿ÏµÊý 0-×îºÃ 1-½ÏºÃ 2-Ò»°ã */
}NET_DVR_JPEGPARA, *LPNET_DVR_JPEGPARA;

/* aux video out parameter */
//¸¨ÖúÊä³ö²ÎÊýÅäÖÃ
typedef struct 
{
    DWORD dwSize;
    DWORD dwAlarmOutChan;                       /* Ñ¡Ôñ±¨¾¯µ¯³ö´ó±¨¾¯Í¨µÀÇÐ»»Ê±¼ä£º1»­ÃæµÄÊä³öÍ¨µÀ: 0:Ö÷Êä³ö/1:¸¨1/2:¸¨2/3:¸¨3/4:¸¨4 */
    DWORD dwAlarmChanSwitchTime;                /* :1Ãë - 10:10Ãë */
    DWORD dwAuxSwitchTime[MAX_AUXOUT];            /* ¸¨ÖúÊä³öÇÐ»»Ê±¼ä: 0-²»ÇÐ»»,1-5s,2-10s,3-20s,4-30s,5-60s,6-120s,7-300s */
    BYTE  byAuxOrder[MAX_AUXOUT][MAX_WINDOW];    /* ¸¨ÖúÊä³öÔ¤ÀÀË³Ðò, 0xff±íÊ¾ÏàÓ¦µÄ´°¿Ú²»Ô¤ÀÀ */
}NET_DVR_AUXOUTCFG, *LPNET_DVR_AUXOUTCFG;


//ntp
typedef struct 
{
    BYTE sNTPServer[64];   /* Domain Name or IP addr of NTP server */
    WORD wInterval;         /* adjust time interval(hours) */
    BYTE byEnableNTP;    /* enable NPT client 0-no£¬1-yes*/
    signed char cTimeDifferenceH; /* Óë¹ú¼Ê±ê×¼Ê±¼äµÄ Ð¡Ê±Æ«ÒÆ-12 ... +13 */
    signed char cTimeDifferenceM;/* Óë¹ú¼Ê±ê×¼Ê±¼äµÄ ·ÖÖÓÆ«ÒÆ0, 30, 45*/
    BYTE res1;
    WORD wNtpPort;         /* ntp server port 9000ÐÂÔö Éè±¸Ä¬ÈÏÎª123*/
    BYTE res2[8];
}NET_DVR_NTPPARA, *LPNET_DVR_NTPPARA;

//ddns
typedef struct 
{
    BYTE sUsername[NAME_LEN];  /* DDNSÕËºÅÓÃ»§Ãû/ÃÜÂë */
    BYTE sPassword[PASSWD_LEN];
    BYTE sDomainName[64];       /* ÓòÃû */
    BYTE byEnableDDNS;            /*ÊÇ·ñÓ¦ÓÃ 0-·ñ£¬1-ÊÇ*/
    BYTE res[15];
}NET_DVR_DDNSPARA, *LPNET_DVR_DDNSPARA;


typedef struct
{
    BYTE byHostIndex;                    /* 0-Ë½ÓÐDDNS 1£­Dyndns 2£­PeanutHull(»¨Éú¿Ç)*/
    BYTE byEnableDDNS;                    /*ÊÇ·ñÓ¦ÓÃDDNS 0-·ñ£¬1-ÊÇ*/
    WORD wDDNSPort;                        /* DDNS¶Ë¿ÚºÅ */
    BYTE sUsername[NAME_LEN];            /* DDNSÓÃ»§Ãû*/
    BYTE sPassword[PASSWD_LEN];            /* DDNSÃÜÂë */
    BYTE sDomainName[MAX_DOMAIN_NAME];    /* Éè±¸Åä±¸µÄÓòÃûµØÖ· */
    BYTE sServerName[MAX_DOMAIN_NAME];    /* DDNS ¶ÔÓ¦µÄ·þÎñÆ÷µØÖ·£¬¿ÉÒÔÊÇIPµØÖ·»òÓòÃû */
    BYTE byRes[16];
}NET_DVR_DDNSPARA_EX, *LPNET_DVR_DDNSPARA_EX;

//9000À©Õ¹
typedef struct
{
    BYTE byEnableDDNS;
    BYTE byHostIndex;/*0-IPServer 1£­Dyndns 2£­PeanutHull(»¨Éú¿Ç)£¬3- NO-IP, 4- hiDDNS*/
    BYTE byRes1[2];
    struct
    {    
        BYTE sUsername[NAME_LEN];            /* DDNSÕËºÅÓÃ»§Ãû*/
        BYTE sPassword[PASSWD_LEN];            /* ÃÜÂë */
        BYTE sDomainName[MAX_DOMAIN_NAME];    /* Éè±¸Åä±¸µÄÓòÃûµØÖ· */
        BYTE sServerName[MAX_DOMAIN_NAME];    /* DDNSÐ­Òé¶ÔÓ¦µÄ·þÎñÆ÷µØÖ·£¬¿ÉÒÔÊÇIPµØÖ·»òÓòÃû */
        WORD wDDNSPort;                        /* ¶Ë¿ÚºÅ */
        WORD    wCountryID;        //¹ú¼Ò±àºÅ£¬½öÔÚbyHostIndex = 4Ê±ÓÐÐ§£¬0±íÊ¾Ä¬ÈÏ
                                BYTE byStatus;                      /* DDNSÔËÐÐ×´Ì¬£¨Ö»¶Á£©£¬
                                                                    0-ÎÞÒâÒå
                                                                    1-Á¬½Ó·þÎñÆ÷Ê§°Ü(connServerfail)¡¢
                                                                    2-½âÎö·þÎñÆ÷ÏûÏ¢Ê§°Ü(solveServerMesFail)¡¢
                                                                    3-Á¬½ÓÐÄÌø·þÎñÆ÷Ê§°Ü(connHeartSrvfail)¡¢
                                                                    4-½âÎöÐÄÌø·þÎñÆ÷ÏûÏ¢Ê§°Ü(solveHeartSrvMesFail)¡¢
                                                                    5-Á¬½ÓÓòÃû·þÎñÆ÷Ê§°Ü(connHostSrvfail)¡¢
                                                                    6-½âÎöÓòÃû·þÎñÆ÷ÏûÏ¢Ê§°Ü(solveHostSrvMesFail)¡¢
                                                                    7-DDNS×´Ì¬Õý³£(updateSuccess)¡¢
                                                                    8-Î´ÆôÓÃ(disable)¡¢
                                                                    9-×¢²áÓòÃû³É¹¦(registHostSuccess)¡¢
                                                                    10-DNS·þÎñÆ÷ÅäÖÃ´íÎó(DNSSrvError)¡¢
                                                                    11-ÓòÃû±»Õ¼ÓÃ(DomainConflict)¡¢
                                                                    12-±ðÃû(ÓòÃû)²»ºÏ·¨(invalidAlias)¡¢
                                                                    13-¼øÈ¨Ê§°Ü(authenticationFail)
                                                                    14-×¢²á·þÎñÆ÷´íÎó(registServerError)
                                                                    15-×¢²áÊ§°Ü(registFail)
                                */
                                BYTE byRes[7];
    } struDDNS[MAX_DDNS_NUMS];
    BYTE byRes2[16];
}NET_DVR_DDNSPARA_V30, *LPNET_DVR_DDNSPARA_V30;

//email
typedef struct 
{
    BYTE sUsername[64];  /* ÓÊ¼þÕËºÅ/ÃÜÂë */
    BYTE sPassword[64];
    BYTE sSmtpServer[64];
    BYTE sPop3Server[64];
    BYTE sMailAddr[64];   /* email */
    BYTE sEventMailAddr1[64];  /* ÉÏ´«±¨¾¯/Òì³£µÈµÄemail */
    BYTE sEventMailAddr2[64];
    BYTE res[16];
}NET_DVR_EMAILPARA, *LPNET_DVR_EMAILPARA;

//ÍøÂç²ÎÊýÅäÖÃ
typedef struct 
{
    DWORD  dwSize;
    char  sDNSIp[16];                /* DNS·þÎñÆ÷µØÖ· */
    NET_DVR_NTPPARA  struNtpClientParam;      /* NTP²ÎÊý */
    NET_DVR_DDNSPARA struDDNSClientParam;     /* DDNS²ÎÊý */
    BYTE res[464];            /* ±£Áô */
}NET_DVR_NETAPPCFG, *LPNET_DVR_NETAPPCFG;

//nfs½á¹¹ÅäÖÃ
typedef struct
{
    char sNfsHostIPAddr[16];
    BYTE sNfsDirectory[PATHNAME_LEN];        // PATHNAME_LEN = 128
}NET_DVR_SINGLE_NFS, *LPNET_DVR_SINGLE_NFS;

typedef struct 
{
    DWORD  dwSize;
    NET_DVR_SINGLE_NFS struNfsDiskParam[MAX_NFS_DISK];
}NET_DVR_NFSCFG, *LPNET_DVR_NFSCFG;

typedef struct tagNET_DVR_ISCSI_CFG
{   
    DWORD dwSize;                   // ½á¹¹´óÐ¡
    WORD wVrmPort;                  // VRM ¼àÌý¶Ë¿Ú
    BYTE byEnable;                  // ÊÇ·ñÆôÓÃ ISCSI´æ´¢
    BYTE byRes[69];                 // ±£Áô×Ö½Ú
    NET_DVR_IPADDR struVrmAddr;          // VRM ipµØÖ· 16Î»
    char chNvtIndexCode[64];        //nvt index Code 
}NET_DVR_ISCSI_CFG, *LPNET_DVR_ISCSI_CFG;  

//Ñ²º½µãÅäÖÃ(Ë½ÓÐIP¿ìÇò×¨ÓÃ)
typedef struct
{
    BYTE    PresetNum;    //Ô¤ÖÃµã
    BYTE    Dwell;        //Í£ÁôÊ±¼ä
    BYTE    Speed;        //ËÙ¶È
    BYTE    Reserve;    //±£Áô
}NET_DVR_CRUISE_POINT, *LPNET_DVR_CRUISE_POINT;

typedef struct 
{
    NET_DVR_CRUISE_POINT struCruisePoint[32];            //×î´óÖ§³Ö32¸öÑ²º½µã
}NET_DVR_CRUISE_RET, *LPNET_DVR_CRUISE_RET;

/************************************¶àÂ·½âÂëÆ÷(begin)***************************************/
typedef struct 
{
    DWORD    dwSize;
    char    sFirstDNSIP[16];
    char    sSecondDNSIP[16];
    char    sRes[32];
}NET_DVR_NETCFG_OTHER, *LPNET_DVR_NETCFG_OTHER;

typedef struct 
{
    char     sDVRIP[16];                /* DVR IPµØÖ· */
    WORD     wDVRPort;                 /* ¶Ë¿ÚºÅ */
    BYTE     byChannel;                /* Í¨µÀºÅ */
    BYTE    byTransProtocol;            /* ´«ÊäÐ­ÒéÀàÐÍ 0-TCP, 1-UDP */
    BYTE    byTransMode;                /* ´«ÊäÂëÁ÷Ä£Ê½ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷*/
    BYTE    byRes[3];
    BYTE    sUserName[NAME_LEN];            /* ¼à¿ØÖ÷»úµÇÂ½ÕÊºÅ */
    BYTE    sPassword[PASSWD_LEN];            /* ¼à¿ØÖ÷»úÃÜÂë */
}NET_DVR_MATRIX_DECINFO, *LPNET_DVR_MATRIX_DECINFO;

//Æô¶¯/Í£Ö¹¶¯Ì¬½âÂë
typedef struct 
{
    DWORD    dwSize;                
    NET_DVR_MATRIX_DECINFO struDecChanInfo;        /* ¶¯Ì¬½âÂëÍ¨µÀÐÅÏ¢ */
}NET_DVR_MATRIX_DYNAMIC_DEC, *LPNET_DVR_MATRIX_DYNAMIC_DEC;

typedef struct  
{
    DWORD     dwSize;
    DWORD   dwIsLinked;         /* ½âÂëÍ¨µÀ×´Ì¬ 0£­ÐÝÃß 1£­ÕýÔÚÁ¬½Ó 2£­ÒÑÁ¬½Ó 3-ÕýÔÚ½âÂë */
    DWORD   dwStreamCpRate;     /* Stream copy rate, X kbits/second */
    char    cRes[64];        /* ±£Áô */
}NET_DVR_MATRIX_DEC_CHAN_STATUS, *LPNET_DVR_MATRIX_DEC_CHAN_STATUS;

typedef struct 
{
    DWORD    dwSize;
    NET_DVR_MATRIX_DECINFO struDecChanInfo;        /* ½âÂëÍ¨µÀÐÅÏ¢ */
    DWORD    dwDecState;    /* 0-¶¯Ì¬½âÂë 1£­Ñ­»·½âÂë 2£­°´Ê±¼ä»Ø·Å 3£­°´ÎÄ¼þ»Ø·Å */
    NET_DVR_TIME StartTime;        /* °´Ê±¼ä»Ø·Å¿ªÊ¼Ê±¼ä */
    NET_DVR_TIME StopTime;        /* °´Ê±¼ä»Ø·ÅÍ£Ö¹Ê±¼ä */
    char    sFileName[128];        /* °´ÎÄ¼þ»Ø·ÅÎÄ¼þÃû */
}NET_DVR_MATRIX_DEC_CHAN_INFO, *LPNET_DVR_MATRIX_DEC_CHAN_INFO;

//Á¬½ÓµÄÍ¨µÀÅäÖÃ 2007-11-05
typedef struct 
{
    DWORD dwEnable;                    /* ÊÇ·ñÆôÓÃ 0£­·ñ 1£­ÆôÓÃ*/
    NET_DVR_MATRIX_DECINFO struDecChanInfo;        /* ÂÖÑ²½âÂëÍ¨µÀÐÅÏ¢ */
}NET_DVR_MATRIX_DECCHANINFO, *LPNET_DVR_MATRIX_DECCHANINFO;

//2007-11-05 ÐÂÔöÃ¿¸ö½âÂëÍ¨µÀµÄÅäÖÃ
typedef struct 
{
    DWORD    dwSize;
    DWORD    dwPoolTime;            /*ÂÖÑ²Ê±¼ä */
    NET_DVR_MATRIX_DECCHANINFO struchanConInfo[MAX_CYCLE_CHAN];
}NET_DVR_MATRIX_LOOP_DECINFO, *LPNET_DVR_MATRIX_LOOP_DECINFO;

//2007-12-22
typedef struct 
{
    BYTE    baudrate;     /* ²¨ÌØÂÊ */
    BYTE    databits;        /* Êý¾ÝÎ» */
    BYTE    stopbits;        /* Í£Ö¹Î» */
    BYTE    parity;        /* ÆæÅ¼Ð£ÑéÎ» */
    BYTE    flowcontrol;    /* Á÷¿Ø */
    BYTE    res[3];
}TTY_CONFIG, *LPTTY_CONFIG;

typedef struct  
{                    
    BYTE byTranChanEnable;    /* µ±Ç°Í¸Ã÷Í¨µÀÊÇ·ñ´ò¿ª 0£º¹Ø±Õ 1£º´ò¿ª */    
                            /*
                            *    ¶àÂ·½âÂëÆ÷±¾µØÓÐ1¸ö485´®¿Ú£¬1¸ö232´®¿Ú¶¼¿ÉÒÔ×÷ÎªÍ¸Ã÷Í¨µÀ,Éè±¸ºÅ·ÖÅäÈçÏÂ£º
                            *    0 RS485
                            *    1 RS232 Console
    */
    BYTE    byLocalSerialDevice;            /* Local serial device */
                                            /*
                                            *    Ô¶³Ì´®¿ÚÊä³ö»¹ÊÇÁ½¸ö,Ò»¸öRS232£¬Ò»¸öRS485
                                            *    1±íÊ¾232´®¿Ú
                                            *    2±íÊ¾485´®¿Ú
    */
    BYTE    byRemoteSerialDevice;            /* Remote output serial device */
    BYTE    res1;                            /* ±£Áô */
    char    sRemoteDevIP[16];                /* Remote Device IP */
    WORD    wRemoteDevPort;                /* Remote Net Communication Port */
    BYTE    res2[2];                        /* ±£Áô */
    TTY_CONFIG RemoteSerialDevCfg;
}NET_DVR_MATRIX_TRAN_CHAN_INFO, *LPNET_DVR_MATRIX_TRAN_CHAN_INFO;

typedef struct  
{
    DWORD dwSize;
    BYTE     by232IsDualChan; /* ÉèÖÃÄÄÂ·232Í¸Ã÷Í¨µÀÊÇÈ«Ë«¹¤µÄ È¡Öµ1µ½MAX_SERIAL_NUM */
    BYTE    by485IsDualChan; /* ÉèÖÃÄÄÂ·485Í¸Ã÷Í¨µÀÊÇÈ«Ë«¹¤µÄ È¡Öµ1µ½MAX_SERIAL_NUM */
    BYTE    res[2];    /* ±£Áô */
    NET_DVR_MATRIX_TRAN_CHAN_INFO struTranInfo[MAX_SERIAL_NUM];/*Í¬Ê±Ö§³Ö½¨Á¢MAX_SERIAL_NUM¸öÍ¸Ã÷Í¨µÀ*/
}NET_DVR_MATRIX_TRAN_CHAN_CONFIG, *LPNET_DVR_MATRIX_TRAN_CHAN_CONFIG;

//2007-12-24 Merry Christmas Eve...
typedef struct 
{
    DWORD    dwSize;
    char    sDVRIP[16];        /* DVR IPµØÖ· */    
    WORD    wDVRPort;            /* ¶Ë¿ÚºÅ */    
    BYTE    byChannel;            /* Í¨µÀºÅ */
    BYTE     byReserve;
    BYTE    sUserName[NAME_LEN];        /* ÓÃ»§Ãû */
    BYTE    sPassword[PASSWD_LEN];        /* ÃÜÂë */
    DWORD    dwPlayMode;       /* 0£­°´ÎÄ¼þ 1£­°´Ê±¼ä*/            
    NET_DVR_TIME StartTime;
    NET_DVR_TIME StopTime;
    char    sFileName[128];
}NET_DVR_MATRIX_DEC_REMOTE_PLAY, *LPNET_DVR_MATRIX_DEC_REMOTE_PLAY;

/* ÎÄ¼þ²¥·ÅÃüÁî */
#define NET_DVR_PLAYSTART        1//¿ªÊ¼²¥·Å
#define NET_DVR_PLAYSTOP        2//Í£Ö¹²¥·Å
#define NET_DVR_PLAYPAUSE        3//ÔÝÍ£²¥·Å
#define NET_DVR_PLAYRESTART        4//»Ö¸´²¥·Å
#define NET_DVR_PLAYFAST        5//¿ì·Å
#define NET_DVR_PLAYSLOW        6//Âý·Å
#define NET_DVR_PLAYNORMAL        7//Õý³£ËÙ¶È
#define NET_DVR_PLAYSTARTAUDIO    9//´ò¿ªÉùÒô
#define NET_DVR_PLAYSTOPAUDIO    10//¹Ø±ÕÉùÒô
#define NET_DVR_PLAYSETPOS        12//¸Ä±äÎÄ¼þ»Ø·ÅµÄ½ø¶È

typedef struct 
{
    DWORD    dwSize;
    DWORD    dwPlayCmd;        /* ²¥·ÅÃüÁî ¼ûÎÄ¼þ²¥·ÅÃüÁî*/
    DWORD    dwCmdParam;        /* ²¥·ÅÃüÁî²ÎÊý */
}NET_DVR_MATRIX_DEC_REMOTE_PLAY_CONTROL, *LPNET_DVR_MATRIX_DEC_REMOTE_PLAY_CONTROL;

typedef struct  
{
    DWORD dwSize;
    DWORD dwCurMediaFileLen;        /* µ±Ç°²¥·ÅµÄÃ½ÌåÎÄ¼þ³¤¶È */       
    DWORD dwCurMediaFilePosition;    /* µ±Ç°²¥·ÅÎÄ¼þµÄ²¥·ÅÎ»ÖÃ */        
    DWORD dwCurMediaFileDuration;    /* µ±Ç°²¥·ÅÎÄ¼þµÄ×ÜÊ±¼ä */        
    DWORD dwCurPlayTime;            /* µ±Ç°ÒÑ¾­²¥·ÅµÄÊ±¼ä */        
    DWORD dwCurMediaFIleFrames;        /* µ±Ç°²¥·ÅÎÄ¼þµÄ×ÜÖ¡Êý */        
    DWORD dwCurDataType;            /* µ±Ç°´«ÊäµÄÊý¾ÝÀàÐÍ£¬19-ÎÄ¼þÍ·£¬20-Á÷Êý¾Ý£¬ 21-²¥·Å½áÊø±êÖ¾ */        
    BYTE res[72];    
}NET_DVR_MATRIX_DEC_REMOTE_PLAY_STATUS, *LPNET_DVR_MATRIX_DEC_REMOTE_PLAY_STATUS;

//2009-4-11 added by likui ¶àÂ·½âÂëÆ÷new
typedef struct tagNET_MATRIX_PASSIVEMODE
{
    WORD    wTransProtol;        //´«ÊäÐ­Òé£¬0-TCP, 1-UDP, 2-MCAST
    WORD    wPassivePort;        //UDP¶Ë¿Ú, TCPÊ±Ä¬ÈÏ
    NET_DVR_IPADDR  struMcastIP;    //TCP,UDPÊ±ÎÞÐ§, MCASTÊ±Îª¶à²¥µØÖ·
    BYTE    byStreamType;/* Êý¾Ý²¥·ÅÄ£Ê½:REAL_TIME_STREAM(1)ÊµÊ±Á÷,RECORD_STREAM(2)ÎÄ¼þÁ÷ */
    BYTE    byRes[7];
}NET_DVR_MATRIX_PASSIVEMODE, *LPNET_DVR_MATRIX_PASSIVEMODE;

typedef struct tagNET_DVR_MATRIX_TRAN_CHAN_INFO_V30 
{                    
    BYTE  byTranChanEnable;            /* µ±Ç°Í¸Ã÷Í¨µÀÊÇ·ñ´ò¿ª 0£º¹Ø±Õ 1£º´ò¿ª */    
    BYTE  byLocalSerialDevice;      /* Local serial device */
                                    /*
                                    *  ¶àÂ·½âÂëÆ÷±¾µØÓÐ1¸ö485´®¿Ú£¬1¸ö232´®¿Ú¶¼¿ÉÒÔ×÷ÎªÍ¸Ã÷Í¨µÀ,Éè±¸ºÅ·ÖÅäÈçÏÂ£º
                                    *  0 RS485
                                    *  1 RS232 Console
                                    *  2 Dual Scom
                                    */
    BYTE  byRemoteSerialDevice;        /* Remote output serial device */
                                    /*
                                    *  Ô¶³Ì´®¿ÚÊä³ö»¹ÊÇÁ½¸ö,Ò»¸öRS232£¬Ò»¸öRS485
                                    *  1 ±íÊ¾232´®¿Ú
                                    *  2 ±íÊ¾485´®¿Ú
                                    */
    BYTE  byRes1;                    /* ±£Áô */        
    NET_DVR_IPADDR struRemoteDevIP; /* Remote Device IP */
    WORD  wRemoteDevPort;            /* Remote Net Communication Port */
    BYTE  byIsEstablished;            /* Í¸Ã÷Í¨µÀ½¨Á¢³É¹¦±êÖ¾£¬0-Ã»ÓÐ³É¹¦£¬1-½¨Á¢³É¹¦ */
    BYTE  byRes2;                    /* ±£Áô */
    TTY_CONFIG RemoteSerialDevCfg;
    BYTE  byUsername[NAME_LEN];
    BYTE  byPassword[PASSWD_LEN];
    DWORD dwLocalSerialNo;          /* ±¾µØ´®¿Ú */
    DWORD dwRemoteSerialNo;         /* Ô¶³Ì´®¿Ú */
    BYTE  byRes3[8];
} NET_DVR_MATRIX_TRAN_CHAN_INFO_V30,*LPNET_DVR_MATRIX_TRAN_CHAN_INFO_V30;

typedef struct tagMATRIX_TRAN_CHAN_CONFIG 
{
    DWORD dwSize;
    BYTE  by232IsDualChan; /* ÉèÖÃÄÄÂ·232Í¸Ã÷Í¨µÀÊÇÈ«Ë«¹¤µÄ È¡Öµ1µ½MAX_SERIAL_NUM */
    BYTE  by485IsDualChan; /* ÉèÖÃÄÄÂ·485Í¸Ã÷Í¨µÀÊÇÈ«Ë«¹¤µÄ È¡Öµ1µ½MAX_SERIAL_NUM */
    BYTE  byRes[2];           /* ±£Áô */
    NET_DVR_MATRIX_TRAN_CHAN_INFO_V30 struTranInfo[MAX_SERIAL_NUM]; /*Í¬Ê±Ö§³Ö½¨Á¢MAX_SERIAL_NUM¸öÍ¸Ã÷Í¨µÀ*/
}NET_DVR_MATRIX_TRAN_CHAN_CONFIG_V30,*LPNET_DVR_MATRIX_TRAN_CHAN_CONFIG_V30;

typedef struct  
{
    DWORD                                dwEnable;    /* ÊÇ·ñÆôÓÃ 0£­·ñ 1£­ÆôÓÃ*/
    NET_DVR_STREAM_MEDIA_SERVER_CFG    streamMediaServerCfg;    
    NET_DVR_DEV_CHAN_INFO         struDevChanInfo;        /* ÂÖÑ²½âÂëÍ¨µÀÐÅÏ¢ */
}NET_DVR_MATRIX_CHAN_INFO_V30,*LPNET_DVR_CYC_SUR_CHAN_ELE_V30;

typedef struct  tagMATRIX_LOOP_DECINFO_V30
{
    DWORD                            dwSize;
    DWORD                            dwPoolTime;        /*ÂÖÑ²¼ä¸ô*/
    NET_DVR_MATRIX_CHAN_INFO_V30    struchanConInfo[MAX_CYCLE_CHAN_V30];
    BYTE                               byRes[16];
} NET_DVR_MATRIX_LOOP_DECINFO_V30,*LPNET_DVR_MATRIX_LOOP_DECINFO_V30;


typedef struct tagDEC_MATRIX_CHAN_INFO_V30
{
    DWORD    dwSize;
    NET_DVR_STREAM_MEDIA_SERVER_CFG streamMediaServerCfg;    /*Á÷Ã½Ìå·þÎñÆ÷ÅäÖÃ*/
    NET_DVR_DEV_CHAN_INFO               struDevChanInfo;        /* ½âÂëÍ¨µÀÐÅÏ¢ */
    DWORD    dwDecState;        /* 0-¶¯Ì¬½âÂë 1£­Ñ­»·½âÂë 2£­°´Ê±¼ä»Ø·Å 3£­°´ÎÄ¼þ»Ø·Å */
    NET_DVR_TIME StartTime;        /* °´Ê±¼ä»Ø·Å¿ªÊ¼Ê±¼ä */
    NET_DVR_TIME StopTime;        /* °´Ê±¼ä»Ø·ÅÍ£Ö¹Ê±¼ä */
    char    sFileName[128];        /* °´ÎÄ¼þ»Ø·ÅÎÄ¼þÃû */
    DWORD   dwGetStreamMode;    /*È¡Á÷Ä£Ê½:1-Ö÷¶¯£¬2-±»¶¯*/
    NET_DVR_MATRIX_PASSIVEMODE      struPassiveMode;
    BYTE    byRes[32];
}NET_DVR_MATRIX_DEC_CHAN_INFO_V30,*LPNET_DVR_MATRIX_DEC_CHAN_INFO_V30;

#define MAX_RESOLUTIONNUM    64 //Ö§³ÖµÄ×î´ó·Ö±æÂÊÊýÄ¿
typedef struct tagNET_DVR_MATRIX_ABILITY
{
    DWORD dwSize;
    BYTE  byDecNums;
    BYTE  byStartChan;
    BYTE  byVGANums;
    BYTE  byBNCNums;
    BYTE  byVGAWindowMode[8][12];     /*VGAÖ§³ÖµÄ´°¿ÚÄ£Ê½£¬VGA1¿ÉÄÜÓÉ»ìºÏÊä³ö*/
    BYTE  byBNCWindowMode[4];           /*BNCÖ§³ÖµÄ´°¿ÚÄ£Ê½*/
    BYTE  byDspNums;   
    BYTE  byHDMINums;//HDMIÏÔÊ¾Í¨µÀ¸öÊý£¨´Ó25¿ªÊ¼£©
    BYTE  byDVINums;//DVIÏÔÊ¾Í¨µÀ¸öÊý£¨´Ó29¿ªÊ¼£©
    BYTE  byRes1[13];
    BYTE  bySupportResolution[MAX_RESOLUTIONNUM];//°´ÕÕÉÏÃæµÄÃ¶¾Ù¶¨Òå,Ò»¸ö×Ö½Ú´ú±íÒ»¸ö·Ö±æÂÊÊÇ//·ñÖ§³Ö£¬1£ºÖ§³Ö£¬0£º²»Ö§³Ö
    BYTE  byHDMIWindowMode[4][8];//HDMIÖ§³ÖµÄ´°¿ÚÄ£Ê½
    BYTE  byDVIWindowMode[4][8];//DVIÖ§³ÖµÄ´°¿ÚÄ£Ê½
    BYTE  byRes2[24];
}NET_DVR_MATRIX_ABILITY, *LPNET_DVR_MATRIX_ABILITY;
//ÉÏ´«logo½á¹¹
typedef struct tagNET_DVR_DISP_LOGOCFG
{
    DWORD        dwCorordinateX;    //Í¼Æ¬ÏÔÊ¾ÇøÓòX×ø±ê
    DWORD        dwCorordinateY;    //Í¼Æ¬ÏÔÊ¾ÇøÓòY×ø±ê
    WORD        wPicWidth; //Í¼Æ¬¿í
    WORD        wPicHeight; //Í¼Æ¬¸ß
    BYTE        byRes1[4];
    BYTE        byFlash;  //ÊÇ·ñÉÁË¸1-ÉÁË¸£¬0-²»ÉÁË¸
    BYTE        byTranslucent; //ÊÇ·ñ°ëÍ¸Ã÷1-°ëÍ¸Ã÷£¬0-²»°ëÍ¸Ã÷
    BYTE        byRes2[6];                //±£Áô
    DWORD        dwLogoSize;//LOGO´óÐ¡£¬°üÀ¨BMPµÄÎÄ¼þÍ·
}NET_DVR_DISP_LOGOCFG,*LPNET_DVR_DISP_LOGOCFG;

/*±àÂëÀàÐÍ*/
#define NET_DVR_ENCODER_UNKOWN 0 /*Î´Öª±àÂë¸ñÊ½*/
#define NET_DVR_ENCODER_H264   1 /*Ë½ÓÐ 264*/
#define NET_DVR_ENCODER_S264   2 /*Standard H264*/
#define NET_DVR_ENCODER_MPEG4  3 /*MPEG4*/
#define NET_DVR_ORIGINALSTREAM 4 /*Original Stream*/
#define NET_DVR_PICTURE           5/*Picture*/
#define NET_DVR_ENCODER_MJPEG  6
#define NET_DVR_ENCODER_MPEG2  7
#define NET_DVR_ENCODER_H265   8
#define NET_DVR_ENCODER_SVAC    9
#define NET_DVR_ENCODER_SMART264                   10/*Smart 264*/
#define NET_DVR_ENCODER_SMART265                   11/*Smart 265*/

/* ´ò°ü¸ñÊ½ */
#define NET_DVR_STREAM_TYPE_UNKOWN   0     /*Î´Öª´ò°ü¸ñÊ½*/
#define NET_DVR_STREAM_TYPE_PRIVT    1     /*Ë½ÓÐ¸ñÊ½*/
#define NET_DVR_STREAM_TYPE_TS       7   /* TS´ò°ü */
#define NET_DVR_STREAM_TYPE_PS       8   /* PS´ò°ü */
#define NET_DVR_STREAM_TYPE_RTP      9    /* RTP´ò°ü */
#define NET_DVR_STREAM_TYPE_ORIGIN   10 //Î´´ò°ü(ÊÓÆµ×ÛºÏÆ½Ì¨½âÂë×ÓÏµÍ³ÓÃ)

/*½âÂëÍ¨µÀ×´Ì¬*/
typedef struct
{
    BYTE  byDecodeStatus; /*µ±Ç°×´Ì¬:0:Î´Æô¶¯£¬1£ºÆô¶¯½âÂë*/
    BYTE  byStreamType;    /*ÂëÁ÷ÀàÐÍ*/
    BYTE  byPacketType;     /*´ò°ü·½Ê½*/
    BYTE  byRecvBufUsage; /*½ÓÊÕ»º³åÊ¹ÓÃÂÊ*/
    BYTE  byDecBufUsage; /*½âÂë»º³åÊ¹ÓÃÂÊ*/
    BYTE  byFpsDecV; /*ÊÓÆµ½âÂëÖ¡ÂÊ*/
    BYTE  byFpsDecA; /*ÒôÆµ½âÂëÖ¡ÂÊ*/
    BYTE  byCpuLoad;     /*DSP CPUÊ¹ÓÃÂÊ*/ 
    BYTE  byRes1[4];    
    DWORD dwDecodedV; /*½âÂëµÄÊÓÆµÖ¡*/
    DWORD dwDecodedA; /*½âÂëµÄÒôÆµÖ¡*/
    WORD wImgW; /*½âÂëÆ÷µ±Ç°µÄÍ¼Ïñ´óÐ¡,¿í*/
    WORD wImgH; //¸ß
    BYTE byVideoFormat; /*ÊÓÆµÖÆÊ½:0-NON,NTSC--1,PAL--2*/
    BYTE  byRes2[3];
    DWORD  dwDecChan;       /*»ñÈ¡È«²¿½âÂëÍ¨µÀ×´Ì¬Ê±ÓÐÐ§£¬ÉèÖÃÊ±¿ÉÌî0*/
    BYTE  byRes3[20]; 
}NET_DVR_MATRIX_CHAN_STATUS, *LPNET_DVR_MATRIX_CHAN_STATUS;

/*ÏÔÊ¾Í¨µÀ×´Ì¬*/
#define NET_DVR_MAX_DISPREGION 16         /*Ã¿¸öÏÔÊ¾Í¨µÀ×î¶à¿ÉÒÔÏÔÊ¾µÄ´°¿Ú*/
//·Ö±æÂÊ
//
typedef enum
{
    /*VGA*/
    VGA_NOT_AVALIABLE,
        VGA_THS8200_MODE_SVGA_60HZ,    //(800*600)
        VGA_THS8200_MODE_SVGA_75HZ,    //(800*600)
        VGA_THS8200_MODE_XGA_60HZ,     //(1024*768)
        VGA_THS8200_MODE_XGA_75HZ,     //(1024*768)
        VGA_THS8200_MODE_SXGA_60HZ,    //(1280*1024)
        VGA_THS8200_MODE_720P_60HZ,    //(1280*720)
        VGA_THS8200_MODE_1080I_60HZ,   //(1920*1080)
        VGA_THS8200_MODE_1080P_30HZ,   //(1920*1080)
        VGA_THS8200_MODE_UXGA_30HZ,    //(1600*1200)
        /*HDMI*/    
        HDMI_SII9134_MODE_XGA_60HZ,       //(1024*768)
        HDMI_SII9134_MODE_SXGA_60HZ,   //(1280*1024)
        HDMI_SII9134_MODE_SXGA2_60HZ,  //(1280*960)
        HDMI_SII9134_MODE_720P_60HZ,   //(1280*720)    
        HDMI_SII9134_MODE_720P_50HZ,   //(1280*720)        
        HDMI_SII9134_MODE_1080I_60HZ,  //(1920*1080)
        HDMI_SII9134_MODE_1080I_50HZ,  //(1920*1080)    
        HDMI_SII9134_MODE_1080P_25HZ,  //(1920*1080)
        HDMI_SII9134_MODE_1080P_30HZ,  //(1920*1080)
        HDMI_SII9134_MODE_1080P_50HZ,  //(1920*1080)
        HDMI_SII9134_MODE_1080P_60HZ,  //(1920*1080)
        HDMI_SII9134_MODE_UXGA_60HZ,   //(1600*1200)
        /*DVI*/    
        DVI_SII9134_MODE_XGA_60HZ,       //(1024*768)
        DVI_SII9134_MODE_SXGA_60HZ,       //(1280*1024)
        DVI_SII9134_MODE_SXGA2_60HZ,   //(1280*960)
        DVI_SII9134_MODE_720P_60HZ,       //(1280*720)    
        DVI_SII9134_MODE_720P_50HZ,    //(1280*720)        
        DVI_SII9134_MODE_1080I_60HZ,   //(1920*1080)
        DVI_SII9134_MODE_1080I_50HZ,   //(1920*1080)
        DVI_SII9134_MODE_1080P_25HZ,   //(1920*1080)
        DVI_SII9134_MODE_1080P_30HZ,   //(1920*1080)
        DVI_SII9134_MODE_1080P_50HZ,   //(1920*1080)
        DVI_SII9134_MODE_1080P_60HZ,   //(1920*1080)
        DVI_SII9134_MODE_UXGA_60HZ,     //(1600*1200)
        VGA_DECSVR_MODE_SXGA2_60HZ,
        HDMI_DECSVR_MODE_1080P_24HZ,
        DVI_DECSVR_MODE_1080P_24HZ,
        YPbPr_DECSVR_MODE_720P_60HZ,
        YPbPr_DECSVR_MODE_1080I_60HZ
}VGA_MODE;

//µÍÖ¡ÂÊ¶¨Òå
#define           LOW_DEC_FPS_1_2                51
#define           LOW_DEC_FPS_1_4                52
#define           LOW_DEC_FPS_1_8                53
#define           LOW_DEC_FPS_1_16               54

/*ÊÓÆµÖÆÊ½±ê×¼*/
typedef enum
{
    VS_NON = 0,
        VS_NTSC = 1,
        VS_PAL = 2
}VIDEO_STANDARD;

typedef struct tagNET_DVR_VGA_DISP_CHAN_CFG
{        
    DWORD    dwSize; 
    BYTE    byAudio;            /*ÒôÆµÊÇ·ñ¿ªÆô,0-·ñ£¬1-ÊÇ*/
    BYTE    byAudioWindowIdx;      /*ÒôÆµ¿ªÆô×Ó´°¿Ú*/
    BYTE     byVgaResolution;      /*VGAµÄ·Ö±æÂÊ*/
    BYTE    byVedioFormat;         /*1:NTSC,2:PAL,0-NULL*/
    DWORD    dwWindowMode;        /*»­ÃæÄ£Ê½,´ÓÄÜÁ¦¼¯»ñÈ¡,Ä¿Ç°Ö§³Ö1,2,4,9,16*/       
    BYTE    byJoinDecChan[MAX_WINDOWS];/*¸÷¸ö×Ó´°¿Ú¹ØÁªµÄ½âÂëÍ¨µÀ*/
    BYTE    byEnlargeStatus;          /*ÊÇ·ñ´¦ÓÚ·Å´ó×´Ì¬£¬0£º²»·Å´ó£¬1£º·Å´ó*/
    BYTE    byEnlargeSubWindowIndex;//·Å´óµÄ×Ó´°¿ÚºÅ
    union
    {
        BYTE byRes[16];
        struct
        {
            /*¸÷¸ö×Ó´°¿Ú¶ÔÓ¦½âÂëÍ¨µÀËù¶ÔÓ¦µÄ½âÂë×ÓÏµÍ³µÄ²ÛÎ»ºÅ(¶ÔÓÚÊÓÆµ×ÛºÏÆ½Ì¨ÖÐ½âÂë×ÓÏµÍ³ÓÐÐ§)*/
            BYTE     byJoinDecoderId[MAX_WINDOWS];
        }struVideoPlatform;
        struct
        {
            BYTE     byRes[16];
        }struNotVideoPlatform;
    }struDiff;
    /*Çø·Ö¹²ÓÃÌå£¬0-ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿½âÂëÆ÷ÏÔÊ¾Í¨µÀÅäÖÃ£¬1-ÆäËû½âÂëÆ÷ÏÔÊ¾Í¨µÀÅäÖÃ*/
    BYTE        byUnionType;
    BYTE        byScale; /*ÏÔÊ¾Ä£Ê½£¬0---ÕæÊµÏÔÊ¾£¬1---Ëõ·ÅÏÔÊ¾( Õë¶ÔBNC )*/
}NET_DVR_VGA_DISP_CHAN_CFG,*LPNET_DVR_VGA_DISP_CHAN_CFG;


/*ÏÔÊ¾Í¨µÀ×´Ì¬*/
#define NET_DVR_MAX_DISPREGION 16 /*Ã¿¸öÏÔÊ¾Í¨µÀ×î¶à¿ÉÒÔÏÔÊ¾µÄ´°¿Ú*/
typedef struct
{
    BYTE  byDispStatus;          /*ÏÔÊ¾×´Ì¬£º0£ºÎ´ÏÔÊ¾£¬1£ºÆô¶¯ÏÔÊ¾*/
    BYTE  byBVGA;                /*0-BNC£¬1-VGA£¬ 2-HDMI£¬3-DVI*/
    BYTE  byVideoFormat;        /*ÊÓÆµÖÆÊ½:1:NTSC,2:PAL,0-NON*/
    BYTE  byWindowMode;        /*µ±Ç°»­ÃæÄ£Ê½*/
    BYTE  byJoinDecChan[MAX_WINDOWS];        /*¸÷¸ö×Ó´°¿Ú¹ØÁªµÄ½âÂëÍ¨µÀ*/
    BYTE  byFpsDisp[NET_DVR_MAX_DISPREGION]; /*Ã¿¸ö×Ó»­ÃæµÄÏÔÊ¾Ö¡ÂÊ*/
    BYTE  byScreenMode;            //ÆÁÄ»Ä£Ê½0-ÆÕÍ¨ 1-´óÆÁ
    BYTE  byRes2[31];
}NET_DVR_DISP_CHAN_STATUS, *LPNET_DVR_DISP_CHAN_STATUS;

#define MAX_DECODECHANNUM   32//¶àÂ·½âÂëÆ÷×î´ó½âÂëÍ¨µÀÊý
#define MAX_DISPCHANNUM   24//¶àÂ·½âÂëÆ÷×î´óÏÔÊ¾Í¨µÀÊý

/*½âÂëÆ÷Éè±¸×´Ì¬*/
typedef struct tagNET_DVR_DECODER_WORK_STATUS
{
    DWORD dwSize;
    NET_DVR_MATRIX_CHAN_STATUS struDecChanStatus[MAX_DECODECHANNUM]; /*½âÂëÍ¨µÀ×´Ì¬*/
    NET_DVR_DISP_CHAN_STATUS   struDispChanStatus[MAX_DISPCHANNUM];  /*ÏÔÊ¾Í¨µÀ×´Ì¬*/
    BYTE byAlarmInStatus[MAX_ANALOG_ALARMIN];         /*±¨¾¯ÊäÈë×´Ì¬*/
    BYTE byAlarmOutStatus[MAX_ANALOG_ALARMOUT];       /*±¨¾¯Êä³ö×´Ì¬*/
    BYTE byAudioInChanStatus;          /*ÓïÒô¶Ô½²×´Ì¬*/
    BYTE byRes[127];
}NET_DVR_DECODER_WORK_STATUS,*LPNET_DVR_DECODER_WORK_STATUS;

//2009-12-1 Ôö¼Ó±»¶¯½âÂë²¥·Å¿ØÖÆ
typedef struct tagNET_DVR_PASSIVEDECODE_CONTROL
{
    DWORD    dwSize;
    DWORD    dwPlayCmd;        /* ²¥·ÅÃüÁî ¼ûÎÄ¼þ²¥·ÅÃüÁî*/
    DWORD    dwCmdParam;        /* ²¥·ÅÃüÁî²ÎÊý */
    BYTE    byRes[16];//Reverse
}NET_DVR_PASSIVEDECODE_CONTROL,*LPNET_DVR_PASSIVEDECODE_CONTROL;

#define        PASSIVE_DEC_PAUSE            1    /*±»¶¯½âÂëÔÝÍ£(½öÎÄ¼þÁ÷ÓÐÐ§)*/
#define        PASSIVE_DEC_RESUME            2    /*»Ö¸´±»¶¯½âÂë(½öÎÄ¼þÁ÷ÓÐÐ§)*/
#define     PASSIVE_DEC_FAST              3   /*¿ìËÙ±»¶¯½âÂë(½öÎÄ¼þÁ÷ÓÐÐ§)*/
#define     PASSIVE_DEC_SLOW            4   /*ÂýËÙ±»¶¯½âÂë(½öÎÄ¼þÁ÷ÓÐÐ§)*/
#define     PASSIVE_DEC_NORMAL          5   /*Õý³£±»¶¯½âÂë(½öÎÄ¼þÁ÷ÓÐÐ§)*/
#define     PASSIVE_DEC_ONEBYONE          6  /*±»¶¯½âÂëµ¥Ö¡²¥·Å(±£Áô)*/
#define     PASSIVE_DEC_AUDIO_ON         7   /*ÒôÆµ¿ªÆô*/
#define     PASSIVE_DEC_AUDIO_OFF        8       /*ÒôÆµ¹Ø±Õ*/
#define        PASSIVE_DEC_RESETBUFFER        9    /*Çå¿Õ»º³åÇø*/
//2009-12-16 Ôö¼Ó¿ØÖÆ½âÂëÆ÷½âÂëÍ¨µÀËõ·Å
typedef struct tagNET_DVR_MATRIX_DECCHAN_CONTROL
{        
    DWORD    dwSize;
    BYTE    byDecChanScaleStatus;/*½âÂëÍ¨µÀÏÔÊ¾Ëõ·Å¿ØÖÆ,1±íÊ¾Ëõ·ÅÏÔÊ¾£¬0±íÊ¾ÕæÊµÏÔÊ¾*/
    BYTE    byDecodeDelay;//½âÂëÑÓÊ±£¬0-Ä¬ÈÏ£¬1-ÊµÊ±ÐÔºÃ£¬2-ÊµÊ±ÐÔ½ÏºÃ£¬3-ÊµÊ±ÐÔÖÐ£¬Á÷³©ÐÔÖÐ£¬4-Á÷³©ÐÔ½ÏºÃ£¬5-Á÷³©ÐÔºÃ£¬0xff-×Ô¶¯µ÷Õû   
    BYTE    byEnableSpartan;//³©ÏÔÊ¹ÄÜ£¬0-¹Ø£¬1-¿ª
    BYTE    byLowLight;      //µÍÕÕ¶È¡£0-¹Ø£¬1-8´ú±íµÍÕÕ¶ÈµÈ¼¶£¬µÈ¼¶Ô½¸ßÇ¿¶ÈÔ½´ó
    BYTE    byNoiseReduction; //3D½µÔë£¬0-¹Ø£¬1-¿ª£¬2-×Ô¶¯
    BYTE    byDefog;         //Í¸Îí£¬0-¹Ø£¬1-7´ú±íÍ¸ÎíµÈ¼¶£¬µÈ¼¶Ô½¸ßÇ¿¶ÈÔ½´ó
    BYTE    byEnableVcaDec; //ÊÇ·ñÆôÓÃÖÇÄÜ½âÂë£¬0-²»ÆôÓÃ£¬·Ç0-ÆôÓÃ
    BYTE    byRes1;
    DWORD   dwAllCtrlType;    //ËùÓÐ×Ó´°¿ÚÒ»Æð²Ù×÷µÄÀàÐÍ£¬ÉèÖÃÊ±ÓÐÐ§£¬°´Î»±íÊ¾
    //dwAllCtrlType & 0x01,¿ªÆô¹Ø±ÕÖÇÄÜ½âÂë
    BYTE    byRes[56];
}NET_DVR_MATRIX_DECCHAN_CONTROL,*LPNET_DVR_MATRIX_DECCHAN_CONTROL;

/************************************¶àÂ·½âÂëÆ÷(end)***************************************/
//2009-8-19 ÊÓÆµ×ÛºÏÆ½Ì¨½Ó¿Úº¯Êý
/************************************ÊÓÆµ×ÛºÏÆ½Ì¨(begin)***************************************/
#define MAX_SUBSYSTEM_NUM    80   //Ò»¸ö¾ØÕóÏµÍ³ÖÐ×î¶à×ÓÏµÍ³ÊýÁ¿
#define MAX_SERIALLEN        36  //×î´óÐòÁÐºÅ³¤¶È
#define MAX_LOOPPLANNUM        16//×î´ó¼Æ»®ÇÐ»»×é
#define DECODE_TIMESEGMENT 4//¼Æ»®½âÂëÃ¿ÌìÊ±¼ä¶ÎÊý
typedef struct tagNET_DVR_SUBSYSTEMINFO
{
    BYTE        bySubSystemType;//×ÓÏµÍ³ÀàÐÍ£¬1-½âÂëÓÃ×ÓÏµÍ³£¬2-±àÂëÓÃ×ÓÏµÍ³£¬3-¼¶ÁªÊä³ö×ÓÏµÍ³£¬4-¼¶ÁªÊäÈë×ÓÏµÍ³£¬5-Âë·ÖÆ÷×ÓÏµÍ³£¬6-±¨¾¯Ö÷»ú×ÓÏµÍ³£¬7-ÖÇÄÜ×ÓÏµÍ³£¬0-NULL£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©        
    BYTE        byChan;//×ÓÏµÍ³Í¨µÀÊý£¬¶ÔÓÚÂë·Ö×ÓÏµÍ³£¬´ú±í485´®¿ÚÊýÁ¿£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©                    
    BYTE        byLoginType;//×¢²áÀàÐÍ£¬1-Ö±Á¬£¬2-DNS£¬3-»¨Éú¿Ç
    BYTE        byRes1[5];
    NET_DVR_IPADDR   struSubSystemIP;        /*IPµØÖ·£¨¿ÉÐÞ¸Ä£©*/
    WORD        wSubSystemPort;        //×ÓÏµÍ³¶Ë¿ÚºÅ£¨¿ÉÐÞ¸Ä£©
    BYTE        byRes2[6];
    NET_DVR_IPADDR  struSubSystemIPMask;//×ÓÍøÑÚÂë
    NET_DVR_IPADDR    struGatewayIpAddr;    /* Íø¹ØµØÖ·*/   
    BYTE        sUserName[NAME_LEN];    /* ÓÃ»§Ãû £¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©*/
    BYTE        sPassword[PASSWD_LEN];    /*ÃÜÂë£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©*/
    char        sDomainName[MAX_DOMAIN_NAME];//ÓòÃû(¿ÉÐÞ¸Ä)
    char         sDnsAddress[MAX_DOMAIN_NAME];/*DNSÓòÃû»òIPµØÖ·*/
    BYTE        sSerialNumber[SERIALNO_LEN];//ÐòÁÐºÅ£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©
}NET_DVR_SUBSYSTEMINFO, *LPNET_DVR_SUBSYSTEMINFO;

typedef struct tagNET_DVR_ALLSUBSYSTEMINFO
{
    DWORD dwSize;
    NET_DVR_SUBSYSTEMINFO struSubSystemInfo[MAX_SUBSYSTEM_NUM];
    BYTE byRes[8];
}NET_DVR_ALLSUBSYSTEMINFO, *LPNET_DVR_ALLSUBSYSTEMINFO;

typedef struct  tagNET_DVR_LOOPPLAN_SUBCFG
{
    DWORD                             dwSize;
    DWORD                            dwPoolTime;        /*ÂÖÑ²¼ä¸ô£¬µ¥Î»£ºÃë*/      
    NET_DVR_MATRIX_CHAN_INFO_V30 struChanConInfo[MAX_CYCLE_CHAN_V30];
    BYTE                               byRes[16];
}NET_DVR_LOOPPLAN_SUBCFG,*LPNET_DVR_LOOPPLAN_SUBCFG;

typedef struct tagNET_DVR_ALARMMODECFG
{
    DWORD     dwSize;
    BYTE    byAlarmMode;//±¨¾¯´¥·¢ÀàÐÍ£¬1-ÂÖÑ²£¬2-±£³Ö        
    WORD    wLoopTime;//ÂÖÑ²Ê±¼ä, µ¥Î»£ºÃë            
    BYTE    byRes[9];
}NET_DVR_ALARMMODECFG,*LPNET_DVR_ALARMMODECFG;

typedef struct  tagNET_DVR_CODESPLITTERINFO
{
    DWORD            dwSize;
    NET_DVR_IPADDR   struIP;        /*Âë·ÖÆ÷IPµØÖ·*/
    WORD        wPort;                    //Âë·ÖÆ÷¶Ë¿ÚºÅ
    BYTE        byRes1[6];
    BYTE        sUserName[NAME_LEN];    /* ÓÃ»§Ãû */
    BYTE        sPassword[PASSWD_LEN];    /*ÃÜÂë */
    BYTE        byChan;//Âë·ÖÆ÷485ºÅ
    BYTE        by485Port;//485¿ÚµØÖ·
    BYTE        byRes2[14];
} NET_DVR_CODESPLITTERINFO, *LPNET_DVR_CODESPLITTERINFO;

typedef struct tagNET_DVR_ASSOCIATECFG
{
    BYTE    byAssociateType;//¹ØÁªÀàÐÍ£¬1-±¨¾¯
    WORD    wAlarmDelay;//±¨¾¯ÑÓÊ±£¬0£­5Ãë£»1£­10Ãë£»2£­30Ãë£»3£­1·ÖÖÓ£»4£­2·ÖÖÓ£»5£­5·ÖÖÓ£»6£­10·ÖÖÓ£»
    BYTE    byAlarmNum;//±¨¾¯ºÅ£¬¾ßÌåµÄÖµÓÉÓ¦ÓÃ¸³£¬ÏàÍ¬µÄ±¨¾¯¸³ÏàÍ¬µÄÖµ
    BYTE    byRes[8];
} NET_DVR_ASSOCIATECFG,*LPNET_DVR_ASSOCIATECFG;

typedef struct tagNET_DVR_DYNAMICDECODE
{
    DWORD                            dwSize;
    NET_DVR_ASSOCIATECFG           struAssociateCfg;//´¥·¢¶¯Ì¬½âÂë¹ØÁª½á¹¹
    NET_DVR_PU_STREAM_CFG        struPuStreamCfg;//¶¯Ì¬½âÂë½á¹¹
    BYTE                            byRes[8];
}NET_DVR_DYNAMICDECODE,*LPNET_DVR_DYNAMICDECODE;

typedef struct  tagNET_DVR_DECODESCHED
{
    NET_DVR_SCHEDTIME  struSchedTime;//
    BYTE  byDecodeType;/*0-ÎÞ£¬1-ÂÖÑ²½âÂë£¬2-¶¯Ì¬½âÂë*/
    BYTE  byLoopGroup;//ÂÖÑ²×éºÅ
    BYTE  byRes[6];
    NET_DVR_PU_STREAM_CFG struDynamicDec;//¶¯Ì¬½âÂë
} NET_DVR_DECODESCHED, *LPNET_DVR_DECODESCHED;

typedef struct tagNET_DVR_PLANDECODE
{
    DWORD dwSize;
    NET_DVR_DECODESCHED struDecodeSched[MAX_DAYS][DECODE_TIMESEGMENT];//ÖÜÒ»×÷Îª¿ªÊ¼£¬ºÍ9000Ò»ÖÂ
    BYTE byRes[8];
} NET_DVR_PLANDECODE,*LPNET_DVR_PLANDECODE;

//end
/************************************ÊÓÆµ×ÛºÏÆ½Ì¨(end)***************************************/
typedef struct 
{    /* 12 bytes */
    DWORD    dwSize;
    char    sUserName[32];
    char     sPassWord[32];
    char     sFromName[32];            /* Sender *///×Ö·û´®ÖÐµÄµÚÒ»¸ö×Ö·ûºÍ×îºóÒ»¸ö×Ö·û²»ÄÜÊÇ"@",²¢ÇÒ×Ö·û´®ÖÐÒªÓÐ"@"×Ö·û
    char     sFromAddr[48];            /* Sender address */
    char     sToName1[32];            /* Receiver1 */
    char     sToName2[32];            /* Receiver2 */
    char     sToAddr1[48];            /* Receiver address1 */
    char     sToAddr2[48];            /* Receiver address2 */
    char    sEmailServer[32];        /* Email server address */
    BYTE    byServerType;            /* Email server type: 0-SMTP, 1-POP, 2-IMTP¡­*/
    BYTE    byUseAuthen;            /* Email server authentication method: 1-enable, 0-disable */
    BYTE    byAttachment;            /* enable attachment */
    BYTE    byMailinterval;            /* mail interval 0-2s, 1-3s, 2-4s. 3-5s*/
} NET_DVR_EMAILCFG, *LPNET_DVR_EMAILCFG;

typedef struct 
{
    DWORD dwSize;
    NET_DVR_COMPRESSION_INFO_EX  struLowCompression;    //¶¨Ê±Â¼Ïñ
    NET_DVR_COMPRESSION_INFO_EX  struEventCompression;    //ÊÂ¼þ´¥·¢Â¼Ïñ
}NET_DVR_COMPRESSIONCFG_NEW, *LPNET_DVR_COMPRESSIONCFG_NEW;

//Çò»úÎ»ÖÃÐÅÏ¢
typedef struct
{
    WORD wAction;//»ñÈ¡Ê±¸Ã×Ö¶ÎÎÞÐ§
    WORD wPanPos;//Ë®Æ½²ÎÊý
    WORD wTiltPos;//´¹Ö±²ÎÊý
    WORD wZoomPos;//±ä±¶²ÎÊý
}NET_DVR_PTZPOS, *LPNET_DVR_PTZPOS;

//Çò»ú·¶Î§ÐÅÏ¢
typedef struct
{
    WORD wPanPosMin;//Ë®Æ½²ÎÊýmin
    WORD wPanPosMax;//Ë®Æ½²ÎÊýmax
    WORD wTiltPosMin;//´¹Ö±²ÎÊýmin
    WORD wTiltPosMax;//´¹Ö±²ÎÊýmax
    WORD wZoomPosMin;//±ä±¶²ÎÊýmin
    WORD wZoomPosMax;//±ä±¶²ÎÊýmax
}NET_DVR_PTZSCOPE, *LPNET_DVR_PTZSCOPE;

//rtspÅäÖÃ ipcamera×¨ÓÃ
typedef struct
{
    DWORD dwSize;         //³¤¶È
    WORD  wPort;          //rtsp·þÎñÆ÷ÕìÌý¶Ë¿Ú
    BYTE  byReserve[54];  //Ô¤Áô
}NET_DVR_RTSPCFG, *LPNET_DVR_RTSPCFG;

/********************************½Ó¿Ú²ÎÊý½á¹¹(begin)*********************************/

//NET_DVR_Login()²ÎÊý½á¹¹
typedef struct
{
    BYTE sSerialNumber[SERIALNO_LEN];   //ÐòÁÐºÅ
    BYTE byAlarmInPortNum;                //DVR±¨¾¯ÊäÈë¸öÊý
    BYTE byAlarmOutPortNum;                //DVR±¨¾¯Êä³ö¸öÊý
    BYTE byDiskNum;                        //DVRÓ²ÅÌ¸öÊý
    BYTE byDVRType;                        //DVRÀàÐÍ, 1:DVR 2:ATM DVR 3:DVS ......
    BYTE byChanNum;                        //DVR Í¨µÀ¸öÊý
    BYTE byStartChan;                    //ÆðÊ¼Í¨µÀºÅ,ÀýÈçDVS-1,DVR - 1
}NET_DVR_DEVICEINFO, *LPNET_DVR_DEVICEINFO;

//NET_DVR_Login_V30()²ÎÊý½á¹¹
typedef struct
{
    BYTE sSerialNumber[SERIALNO_LEN];  //ÐòÁÐºÅ
    BYTE byAlarmInPortNum;                //±¨¾¯ÊäÈë¸öÊý
    BYTE byAlarmOutPortNum;                //±¨¾¯Êä³ö¸öÊý
    BYTE byDiskNum;                    //Ó²ÅÌ¸öÊý
    BYTE byDVRType;                    //Éè±¸ÀàÐÍ, 1:DVR 2:ATM DVR 3:DVS ......
    BYTE byChanNum;                    //Ä£ÄâÍ¨µÀ¸öÊý
    BYTE byStartChan;                    //ÆðÊ¼Í¨µÀºÅ,ÀýÈçDVS-1,DVR - 1
    BYTE byAudioChanNum;                //ÓïÒôÍ¨µÀÊý
    BYTE byIPChanNum;                    //×î´óÊý×ÖÍ¨µÀ¸öÊý£¬µÍÎ»  
    BYTE byZeroChanNum;            //ÁãÍ¨µÀ±àÂë¸öÊý //2010-01-16
    BYTE byMainProto;            //Ö÷ÂëÁ÷´«ÊäÐ­ÒéÀàÐÍ 0-private, 1-rtsp,2-Í¬Ê±Ö§³ÖprivateºÍrtsp
    BYTE bySubProto;                //×ÓÂëÁ÷´«ÊäÐ­ÒéÀàÐÍ0-private, 1-rtsp,2-Í¬Ê±Ö§³ÖprivateºÍrtsp
    BYTE bySupport;        //ÄÜÁ¦£¬Î»Óë½á¹ûÎª0±íÊ¾²»Ö§³Ö£¬1±íÊ¾Ö§³Ö£¬
    //bySupport & 0x1, ±íÊ¾ÊÇ·ñÖ§³ÖÖÇÄÜËÑË÷
    //bySupport & 0x2, ±íÊ¾ÊÇ·ñÖ§³Ö±¸·Ý
    //bySupport & 0x4, ±íÊ¾ÊÇ·ñÖ§³ÖÑ¹Ëõ²ÎÊýÄÜÁ¦»ñÈ¡
    //bySupport & 0x8, ±íÊ¾ÊÇ·ñÖ§³Ö¶àÍø¿¨
    //bySupport & 0x10, ±íÊ¾Ö§³ÖÔ¶³ÌSADP
    //bySupport & 0x20, ±íÊ¾Ö§³ÖRaid¿¨¹¦ÄÜ
    //bySupport & 0x40, ±íÊ¾Ö§³ÖIPSAN Ä¿Â¼²éÕÒ
    //bySupport & 0x80, ±íÊ¾Ö§³Örtp over rtsp
    BYTE bySupport1;        // ÄÜÁ¦¼¯À©³ä£¬Î»Óë½á¹ûÎª0±íÊ¾²»Ö§³Ö£¬1±íÊ¾Ö§³Ö
    //bySupport1 & 0x1, ±íÊ¾ÊÇ·ñÖ§³Ösnmp v30
    //bySupport1 & 0x2, Ö§³ÖÇø·Ö»Ø·ÅºÍÏÂÔØ
    //bySupport1 & 0x4, ÊÇ·ñÖ§³Ö²¼·ÀÓÅÏÈ¼¶    
    //bySupport1 & 0x8, ÖÇÄÜÉè±¸ÊÇ·ñÖ§³Ö²¼·ÀÊ±¼ä¶ÎÀ©Õ¹
    //bySupport1 & 0x10, ±íÊ¾ÊÇ·ñÖ§³Ö¶à´ÅÅÌÊý£¨³¬¹ý33¸ö£©
    //bySupport1 & 0x20, ±íÊ¾ÊÇ·ñÖ§³Örtsp over http    
    //bySupport1 & 0x80, ±íÊ¾ÊÇ·ñÖ§³Ö³µÅÆÐÂ±¨¾¯ÐÅÏ¢2012-9-28, ÇÒ»¹±íÊ¾ÊÇ·ñÖ§³ÖNET_DVR_IPPARACFG_V40½á¹¹Ìå
    BYTE bySupport2; /*ÄÜÁ¦£¬Î»Óë½á¹ûÎª0±íÊ¾²»Ö§³Ö£¬·Ç0±íÊ¾Ö§³Ö                            
                     bySupport2 & 0x1, ±íÊ¾½âÂëÆ÷ÊÇ·ñÖ§³ÖÍ¨¹ýURLÈ¡Á÷½âÂë
                     bySupport2 & 0x2,  ±íÊ¾Ö§³ÖFTPV40
                     bySupport2 & 0x4,  ±íÊ¾Ö§³ÖANR
                     bySupport2 & 0x8,  ±íÊ¾Ö§³ÖCCDµÄÍ¨µÀ²ÎÊýÅäÖÃ
                     bySupport2 & 0x10,  ±íÊ¾Ö§³Ö²¼·À±¨¾¯»Ø´«ÐÅÏ¢£¨½öÖ§³Ö×¥ÅÄ»ú±¨¾¯ ÐÂÀÏ±¨¾¯½á¹¹£©
                     bySupport2 & 0x20,  ±íÊ¾ÊÇ·ñÖ§³Öµ¥¶À»ñÈ¡Éè±¸×´Ì¬×ÓÏî
    bySupport2 & 0x40,  ±íÊ¾ÊÇ·ñÊÇÂëÁ÷¼ÓÃÜÉè±¸*/
    WORD wDevType;              //Éè±¸ÐÍºÅ
    BYTE bySupport3; //ÄÜÁ¦¼¯À©Õ¹£¬Î»Óë½á¹ûÎª0±íÊ¾²»Ö§³Ö£¬1±íÊ¾Ö§³Ö
    //bySupport3 & 0x1, ±íÊ¾ÊÇ·ñ¶àÂëÁ÷
    // bySupport3 & 0x4 ±íÊ¾Ö§³Ö°´×éÅäÖÃ£¬ ¾ßÌå°üº¬ Í¨µÀÍ¼Ïñ²ÎÊý¡¢±¨¾¯ÊäÈë²ÎÊý¡¢IP±¨¾¯ÊäÈë¡¢Êä³ö½ÓÈë²ÎÊý¡¢
    // ÓÃ»§²ÎÊý¡¢Éè±¸¹¤×÷×´Ì¬¡¢JPEG×¥Í¼¡¢¶¨Ê±ºÍÊ±¼ä×¥Í¼¡¢Ó²ÅÌÅÌ×é¹ÜÀí 
    //bySupport3 & 0x8Îª1 ±íÊ¾Ö§³ÖÊ¹ÓÃTCPÔ¤ÀÀ¡¢UDPÔ¤ÀÀ¡¢¶à²¥Ô¤ÀÀÖÐµÄ"ÑÓÊ±Ô¤ÀÀ"×Ö¶ÎÀ´ÇëÇóÑÓÊ±Ô¤ÀÀ£¨ºóÐø¶¼½«Ê¹ÓÃÕâÖÖ·½Ê½ÇëÇóÑÓÊ±Ô¤ÀÀ£©¡£¶øµ±bySupport3 & 0x8Îª0Ê±£¬½«Ê¹ÓÃ "Ë½ÓÐÑÓÊ±Ô¤ÀÀ"Ð­Òé¡£
    //bySupport3 & 0x10 ±íÊ¾Ö§³Ö"»ñÈ¡±¨¾¯Ö÷»úÖ÷Òª×´Ì¬£¨V40£©"¡£
    //bySupport3 & 0x20 ±íÊ¾ÊÇ·ñÖ§³ÖÍ¨¹ýDDNSÓòÃû½âÎöÈ¡Á÷
    
    BYTE byMultiStreamProto;//ÊÇ·ñÖ§³Ö¶àÂëÁ÷,°´Î»±íÊ¾,0-²»Ö§³Ö,1-Ö§³Ö,bit1-ÂëÁ÷3,bit2-ÂëÁ÷4,bit7-Ö÷ÂëÁ÷£¬bit-8×ÓÂëÁ÷
    BYTE byStartDChan;        //ÆðÊ¼Êý×ÖÍ¨µÀºÅ,0±íÊ¾ÎÞÐ§
    BYTE byStartDTalkChan;    //ÆðÊ¼Êý×Ö¶Ô½²Í¨µÀºÅ£¬Çø±ðÓÚÄ£Äâ¶Ô½²Í¨µÀºÅ£¬0±íÊ¾ÎÞÐ§
    BYTE byHighDChanNum;        //Êý×ÖÍ¨µÀ¸öÊý£¬¸ßÎ»
    BYTE bySupport4;        //ÄÜÁ¦¼¯À©Õ¹£¬Î»Óë½á¹ûÎª0±íÊ¾²»Ö§³Ö£¬1±íÊ¾Ö§³Ö
    //bySupport4 & 0x4±íÊ¾ÊÇ·ñÖ§³ÖÆ´¿ØÍ³Ò»½Ó¿Ú
    // bySupport4 & 0x80 Ö§³ÖÉè±¸ÉÏ´«ÖÐÐÄ±¨¾¯Ê¹ÄÜ¡£±íÊ¾ÅÐ¶Ïµ÷ÓÃ½Ó¿ÚÊÇ NET_DVR_PDC_RULE_CFG_V42»¹ÊÇ NET_DVR_PDC_RULE_CFG_V41
    BYTE byLanguageType;// Ö§³ÖÓïÖÖÄÜÁ¦,°´Î»±íÊ¾,Ã¿Ò»Î»0-²»Ö§³Ö,1-Ö§³Ö  
    //  byLanguageType µÈÓÚ0 ±íÊ¾ ÀÏÉè±¸
    //  byLanguageType & 0x1±íÊ¾Ö§³ÖÖÐÎÄ
    //  byLanguageType & 0x2±íÊ¾Ö§³ÖÓ¢ÎÄ
    BYTE byVoiceInChanNum;   //ÒôÆµÊäÈëÍ¨µÀÊý 
    BYTE byStartVoiceInChanNo; //ÒôÆµÊäÈëÆðÊ¼Í¨µÀºÅ 0±íÊ¾ÎÞÐ§
    BYTE  bySupport5;  //°´Î»±íÊ¾,0-²»Ö§³Ö,1-Ö§³Ö,bit0-Ö§³Ö¶àÂëÁ÷
    //bySupport5 &0x01±íÊ¾Ö§³ÖwEventTypeEx ,¼æÈÝdwEventType µÄÊÂ¼þÀàÐÍ£¨Ö§³ÖÐÐÎªÊÂ¼þÀ©Õ¹£©--ÏÈÕ¼×¡£¬·ÀÖ¹³åÍ»
    //bySupport5 &0x04±íÊ¾ÊÇ·ñÖ§³ÖÊ¹ÓÃÀ©Õ¹µÄ³¡¾°Ä£Ê½½Ó¿Ú
    /*
       bySupport5 &0x08 Éè±¸·µ»Ø¸ÃÖµ±íÊ¾ÊÇ·ñÖ§³Ö¼Æ»®Â¼ÏñÀàÐÍV40½Ó¿ÚÐ­Òé(DVR_SET_RECORDCFG_V40/ DVR_GET_RECORDCFG_V40)(ÔÚ¸ÃÐ­ÒéÖÐÉè±¸Ö§³ÖÀàÐÍÀàÐÍ13µÄÅäÖÃ)
       Ö®Ç°µÄ²¿·Ö·¢²¼µÄÉè±¸£¬Ö§³ÖÂ¼ÏñÀàÐÍ13£¬ÔòÅäÖÃÂ¼ÏñÀàÐÍ13¡£Èç¹û²»Ö§³Ö£¬Í³Ò»×ª»»³ÉÂ¼ÏñÀàÐÍ3¼æÈÝ´¦Àí¡£SDKÍ¨¹ýÃüÁîÌ½²â´¦Àí)
    */
    BYTE  bySupport6;   //ÄÜÁ¦£¬°´Î»±íÊ¾£¬0-²»Ö§³Ö,1-Ö§³Ö
    //bySupport6 0x1  ±íÊ¾Éè±¸ÊÇ·ñÖ§³ÖÑ¹Ëõ 
    //bySupport6 0x2 ±íÊ¾ÊÇ·ñÖ§³ÖÁ÷ID·½Ê½ÅäÖÃÁ÷À´Ô´À©Õ¹ÃüÁî£¬DVR_SET_STREAM_SRC_INFO_V40
    //bySupport6 0x4 ±íÊ¾ÊÇ·ñÖ§³ÖÊÂ¼þËÑË÷V40½Ó¿Ú
    //bySupport6 0x8 ±íÊ¾ÊÇ·ñÖ§³ÖÀ©Õ¹ÖÇÄÜÕì²âÅäÖÃÃüÁî
    //bySupport6 0x40±íÊ¾Í¼Æ¬²éÑ¯½á¹ûV40À©Õ¹
    BYTE  byMirrorChanNum;    //¾µÏñÍ¨µÀ¸öÊý£¬<Â¼²¥Ö÷»úÖÐÓÃÓÚ±íÊ¾µ¼²¥Í¨µÀ>
    WORD wStartMirrorChanNo;  //ÆðÊ¼¾µÏñÍ¨µÀºÅ
    BYTE bySupport7;   //ÄÜÁ¦,°´Î»±íÊ¾,0-²»Ö§³Ö,1-Ö§³Ö
    // bySupport7 & 0x1  ±íÊ¾Éè±¸ÊÇ·ñÖ§³Ö INTER_VCA_RULECFG_V42 À©Õ¹
    // bySupport7 & 0x2  ±íÊ¾Éè±¸ÊÇ·ñÖ§³Ö IPC HVT Ä£Ê½À©Õ¹
    // bySupport7 & 0x04  ±íÊ¾Éè±¸ÊÇ·ñÖ§³Ö ·µ»ØËø¶¨Ê±¼ä
    // bySupport7 & 0x08  ±íÊ¾ÉèÖÃÔÆÌ¨PTZÎ»ÖÃÊ±£¬ÊÇ·ñÖ§³Ö´øÍ¨µÀºÅ
    // bySupport7 & 0x10  ±íÊ¾Éè±¸ÊÇ·ñÖ§³ÖË«ÏµÍ³Éý¼¶±¸·Ý
    // bySupport7 & 0x20  ±íÊ¾Éè±¸ÊÇ·ñÖ§³Ö OSD×Ö·ûµþ¼Ó V50
    // bySupport7 & 0x40  ±íÊ¾Éè±¸ÊÇ·ñÖ§³Ö Ö÷´Ó¸ú×Ù£¨´ÓÉãÏñ»ú£©
    // bySupport7 & 0x80  ±íÊ¾Éè±¸ÊÇ·ñÖ§³Ö ±¨ÎÄ¼ÓÃÜ
    BYTE  byRes2;        //±£Áô
}NET_DVR_DEVICEINFO_V30, *LPNET_DVR_DEVICEINFO_V30;

typedef struct tagNET_DVR_DEVICEINFO_V40
{
    NET_DVR_DEVICEINFO_V30 struDeviceV30;
    BYTE  bySupportLock;        //Éè±¸Ö§³ÖËø¶¨¹¦ÄÜ£¬¸Ã×Ö¶ÎÓÉSDK¸ù¾ÝÉè±¸·µ»ØÖµÀ´¸³ÖµµÄ¡£bySupportLockÎª1Ê±£¬dwSurplusLockTimeºÍbyRetryLoginTimeÓÐÐ§
    BYTE  byRetryLoginTime;        //Ê£Óà¿É³¢ÊÔµÇÂ½µÄ´ÎÊý£¬ÓÃ»§Ãû£¬ÃÜÂë´íÎóÊ±£¬´Ë²ÎÊýÓÐÐ§
    BYTE  byPasswordLevel;      //adminÃÜÂë°²È«µÈ¼¶0-ÎÞÐ§£¬1-Ä¬ÈÏÃÜÂë£¬2-ÓÐÐ§ÃÜÂë,3-·çÏÕ½Ï¸ßµÄÃÜÂë¡£µ±ÓÃ»§µÄÃÜÂëÎª³ö³§Ä¬ÈÏÃÜÂë£¨12345£©»òÕß·çÏÕ½Ï¸ßµÄÃÜÂëÊ±£¬ÉÏ²ã¿Í»§¶ËÐèÒªÌáÊ¾ÓÃ»§¸ü¸ÄÃÜÂë¡£      
    BYTE  byProxyType;  //´úÀíÀàÐÍ£¬0-²»Ê¹ÓÃ´úÀí, 1-Ê¹ÓÃsocks5´úÀí, 2-Ê¹ÓÃEHome´úÀí
    DWORD dwSurplusLockTime;    //Ê£ÓàÊ±¼ä£¬µ¥Î»Ãë£¬ÓÃ»§Ëø¶¨Ê±£¬´Ë²ÎÊýÓÐÐ§
    BYTE  byCharEncodeType;     //×Ö·û±àÂëÀàÐÍ
    BYTE byRes2[255];
}NET_DVR_DEVICEINFO_V40, *LPNET_DVR_DEVICEINFO_V40;

typedef void (CALLBACK *fLoginResultCallBack) (LONG lUserID, DWORD dwResult, LPNET_DVR_DEVICEINFO_V30 lpDeviceInfo , void* pUser);

#define NET_DVR_DEV_ADDRESS_MAX_LEN 129
#define NET_DVR_LOGIN_USERNAME_MAX_LEN 64
#define NET_DVR_LOGIN_PASSWD_MAX_LEN 64


typedef struct  
{
    char sDeviceAddress[NET_DVR_DEV_ADDRESS_MAX_LEN];
    BYTE byUseTransport;    //ÊÇ·ñÆôÓÃÄÜÁ¦¼¯Í¸´«£¬0--²»ÆôÓÃÍ¸´«£¬Ä¬ÈÏ£¬1--ÆôÓÃÍ¸´«
    WORD wPort;
    char sUserName[NET_DVR_LOGIN_USERNAME_MAX_LEN];
    char sPassword[NET_DVR_LOGIN_PASSWD_MAX_LEN];
    fLoginResultCallBack cbLoginResult;
    void *pUser;
    BOOL bUseAsynLogin;
    BYTE byProxyType; //0:²»Ê¹ÓÃ´úÀí£¬1£ºÊ¹ÓÃ±ê×¼´úÀí£¬2£ºÊ¹ÓÃEHome´úÀí
    BYTE byUseUTCTime;    //0-²»½øÐÐ×ª»»£¬Ä¬ÈÏ,1-½Ó¿ÚÉÏÊäÈëÊä³öÈ«²¿Ê¹ÓÃUTCÊ±¼ä,SDKÍê³ÉUTCÊ±¼äÓëÉè±¸Ê±ÇøµÄ×ª»»,2-½Ó¿ÚÉÏÊäÈëÊä³öÈ«²¿Ê¹ÓÃÆ½Ì¨±¾µØÊ±¼ä£¬SDKÍê³ÉÆ½Ì¨±¾µØÊ±¼äÓëÉè±¸Ê±ÇøµÄ×ª»»
    BYTE byRes2[2];
    LONG iProxyID;    //´úÀí·þÎñÆ÷ÐòºÅ£¬Ìí¼Ó´úÀí·þÎñÆ÷ÐÅÏ¢Ê±£¬Ïà¶ÔÓ¦µÄ·þÎñÆ÷Êý×éÏÂ±íÖµ    
    BYTE byRes3[120];
}NET_DVR_USER_LOGIN_INFO,*LPNET_DVR_USER_LOGIN_INFO;

//sdkÍøÂç»·¾³Ã¶¾Ù±äÁ¿£¬ÓÃÓÚÔ¶³ÌÉý¼¶
typedef enum _SDK_NET_ENV
{
    LOCAL_AREA_NETWORK = 0,
        WIDE_AREA_NETWORK
}SDK_NETWORK_ENVIRONMENT;

//ÏÔÊ¾Ä£Ê½
typedef enum
{
    NORMALMODE = 0,
        OVERLAYMODE
}DISPLAY_MODE;

//·¢ËÍÄ£Ê½
typedef enum
{
    PTOPTCPMODE = 0,
        PTOPUDPMODE,
        MULTIMODE,
        RTPMODE,
        RESERVEDMODE
}SEND_MODE;

//×¥Í¼Ä£Ê½
typedef enum 
{
    BMP_MODE = 0,        //BMPÄ£Ê½
        JPEG_MODE = 1        //JPEGÄ£Ê½ 
}CAPTURE_MODE;

//ÊµÊ±ÉùÒôÄ£Ê½
typedef enum
{
    MONOPOLIZE_MODE = 1,//¶ÀÕ¼Ä£Ê½
        SHARE_MODE = 2        //¹²ÏíÄ£Ê½
}REALSOUND_MODE;

//Èí½âÂëÔ¤ÀÀ²ÎÊý
typedef struct
{
    LONG lChannel;//Í¨µÀºÅ
    LONG lLinkMode;//×î¸ßÎ»(31)Îª0±íÊ¾Ö÷ÂëÁ÷£¬Îª1±íÊ¾×Ó£¬0£­30Î»±íÊ¾ÂëÁ÷Á¬½Ó·½Ê½: 0£ºTCP·½Ê½,1£ºUDP·½Ê½,2£º¶à²¥·½Ê½,3 - RTP·½Ê½£¬4-RTP/RTSP,5-RSTP/HTTP 
    HWND hPlayWnd;//²¥·Å´°¿ÚµÄ¾ä±ú,ÎªNULL±íÊ¾²»²¥·ÅÍ¼Ïó
    char* sMultiCastIP;//¶à²¥×éµØÖ·
    BYTE byProtoType; //Ó¦ÓÃ²ãÈ¡Á÷Ð­Òé£¬0-Ë½ÓÐÐ­Òé£¬1-RTSPÐ­Òé
    BYTE byRes[3];
}NET_DVR_CLIENTINFO, *LPNET_DVR_CLIENTINFO;

//SDK×´Ì¬ÐÅÏ¢(9000ÐÂÔö)
typedef struct 
{
    DWORD dwTotalLoginNum;        //µ±Ç°loginÓÃ»§Êý
    DWORD dwTotalRealPlayNum;    //µ±Ç°realplayÂ·Êý
    DWORD dwTotalPlayBackNum;    //µ±Ç°»Ø·Å»òÏÂÔØÂ·Êý
    DWORD dwTotalAlarmChanNum;    //µ±Ç°½¨Á¢±¨¾¯Í¨µÀÂ·Êý
    DWORD dwTotalFormatNum;        //µ±Ç°Ó²ÅÌ¸ñÊ½»¯Â·Êý
    DWORD dwTotalFileSearchNum;    //µ±Ç°ÈÕÖ¾»òÎÄ¼þËÑË÷Â·Êý
    DWORD dwTotalLogSearchNum;    //µ±Ç°ÈÕÖ¾»òÎÄ¼þËÑË÷Â·Êý
    DWORD dwTotalSerialNum;        //µ±Ç°Í¸Ã÷Í¨µÀÂ·Êý
    DWORD dwTotalUpgradeNum;    //µ±Ç°Éý¼¶Â·Êý
    DWORD dwTotalVoiceComNum;    //µ±Ç°ÓïÒô×ª·¢Â·Êý
    DWORD dwTotalBroadCastNum;    //µ±Ç°ÓïÒô¹ã²¥Â·Êý
    DWORD dwTotalListenNum;        //µ±Ç°ÍøÂç¼àÌýÂ·Êý
    DWORD dwEmailTestNum;       //µ±Ç°ÓÊ¼þ¼ÆÊýÂ·Êý
    DWORD dwBackupNum;          // µ±Ç°ÎÄ¼þ±¸·ÝÂ·Êý
    DWORD dwTotalInquestUploadNum; //µ±Ç°ÉóÑ¶ÉÏ´«Â·Êý
    DWORD dwRes[6];
}NET_DVR_SDKSTATE, *LPNET_DVR_SDKSTATE;

//SDK¹¦ÄÜÖ§³ÖÐÅÏ¢(9000ÐÂÔö)
typedef struct 
{
    DWORD dwMaxLoginNum;        //×î´óloginÓÃ»§Êý MAX_LOGIN_USERS
    DWORD dwMaxRealPlayNum;        //×î´órealplayÂ·Êý WATCH_NUM
    DWORD dwMaxPlayBackNum;        //×î´ó»Ø·Å»òÏÂÔØÂ·Êý WATCH_NUM
    DWORD dwMaxAlarmChanNum;    //×î´ó½¨Á¢±¨¾¯Í¨µÀÂ·Êý ALARM_NUM
    DWORD dwMaxFormatNum;        //×î´óÓ²ÅÌ¸ñÊ½»¯Â·Êý SERVER_NUM
    DWORD dwMaxFileSearchNum;    //×î´óÎÄ¼þËÑË÷Â·Êý SERVER_NUM
    DWORD dwMaxLogSearchNum;    //×î´óÈÕÖ¾ËÑË÷Â·Êý SERVER_NUM
    DWORD dwMaxSerialNum;        //×î´óÍ¸Ã÷Í¨µÀÂ·Êý SERVER_NUM
    DWORD dwMaxUpgradeNum;        //×î´óÉý¼¶Â·Êý SERVER_NUM
    DWORD dwMaxVoiceComNum;        //×î´óÓïÒô×ª·¢Â·Êý SERVER_NUM
    DWORD dwMaxBroadCastNum;    //×î´óÓïÒô¹ã²¥Â·Êý MAX_CASTNUM
    DWORD dwRes[10];
}NET_DVR_SDKABL, *LPNET_DVR_SDKABL;

//±¨¾¯Éè±¸ÐÅÏ¢
typedef struct
{   
    BYTE byUserIDValid;                 /* useridÊÇ·ñÓÐÐ§ 0-ÎÞÐ§£¬1-ÓÐÐ§ */
    BYTE bySerialValid;                 /* ÐòÁÐºÅÊÇ·ñÓÐÐ§ 0-ÎÞÐ§£¬1-ÓÐÐ§ */
    BYTE byVersionValid;                /* °æ±¾ºÅÊÇ·ñÓÐÐ§ 0-ÎÞÐ§£¬1-ÓÐÐ§ */
    BYTE byDeviceNameValid;             /* Éè±¸Ãû×ÖÊÇ·ñÓÐÐ§ 0-ÎÞÐ§£¬1-ÓÐÐ§ */
    BYTE byMacAddrValid;                /* MACµØÖ·ÊÇ·ñÓÐÐ§ 0-ÎÞÐ§£¬1-ÓÐÐ§ */    
    BYTE byLinkPortValid;               /* login¶Ë¿ÚÊÇ·ñÓÐÐ§ 0-ÎÞÐ§£¬1-ÓÐÐ§ */
    BYTE byDeviceIPValid;               /* Éè±¸IPÊÇ·ñÓÐÐ§ 0-ÎÞÐ§£¬1-ÓÐÐ§ */
    BYTE bySocketIPValid;               /* socket ipÊÇ·ñÓÐÐ§ 0-ÎÞÐ§£¬1-ÓÐÐ§ */
    LONG lUserID;                       /* NET_DVR_Login()·µ»ØÖµ, ²¼·ÀÊ±ÓÐÐ§ */
    BYTE sSerialNumber[SERIALNO_LEN];    /* ÐòÁÐºÅ */
    DWORD dwDeviceVersion;                /* °æ±¾ÐÅÏ¢ ¸ß16Î»±íÊ¾Ö÷°æ±¾£¬µÍ16Î»±íÊ¾´Î°æ±¾*/
    char sDeviceName[NAME_LEN];            /* Éè±¸Ãû×Ö */
    BYTE byMacAddr[MACADDR_LEN];        /* MACµØÖ· */    
    WORD wLinkPort;                     /* link port */
    char sDeviceIP[128];                /* IPµØÖ· */
    char sSocketIP[128];                /* ±¨¾¯Ö÷¶¯ÉÏ´«Ê±µÄsocket IPµØÖ· */
    BYTE byIpProtocol;                  /* IpÐ­Òé 0-IPV4, 1-IPV6 */
    BYTE byRes2[11];
}NET_DVR_ALARMER, *LPNET_DVR_ALARMER;

//Ó²½âÂëÏÔÊ¾ÇøÓò²ÎÊý(×Ó½á¹¹)
typedef struct
{
    long bToScreen;
    long bToVideoOut;
    long nLeft;
    long nTop;
    long nWidth;
    long nHeight;
    long nReserved;
}NET_DVR_DISPLAY_PARA, *LPNET_DVR_DISPLAY_PARA;

//Ó²½âÂëÔ¤ÀÀ²ÎÊý
typedef struct
{
    LONG lChannel;//Í¨µÀºÅ
    LONG lLinkMode; //×î¸ßÎ»(31)Îª0±íÊ¾Ö÷ÂëÁ÷£¬Îª1±íÊ¾×Ó£¬0£­30Î»±íÊ¾ÂëÁ÷Á¬½Ó·½Ê½:0£ºTCP·½Ê½,1£ºUDP·½Ê½,2£º¶à²¥·½Ê½,3 - RTP·½Ê½£¬4-µç»°Ïß£¬5£­128k¿í´ø£¬6£­256k¿í´ø£¬7£­384k¿í´ø£¬8£­512k¿í´ø£»
    char* sMultiCastIP;
    NET_DVR_DISPLAY_PARA struDisplayPara;
}NET_DVR_CARDINFO, *LPNET_DVR_CARDINFO;

//Â¼ÏóÎÄ¼þ²ÎÊý
typedef struct 
{
    char sFileName[100];//ÎÄ¼þÃû
    NET_DVR_TIME struStartTime;//ÎÄ¼þµÄ¿ªÊ¼Ê±¼ä
    NET_DVR_TIME struStopTime;//ÎÄ¼þµÄ½áÊøÊ±¼ä
    DWORD dwFileSize;//ÎÄ¼þµÄ´óÐ¡
}NET_DVR_FIND_DATA, *LPNET_DVR_FIND_DATA;

//Â¼ÏóÎÄ¼þ²ÎÊý(9000)
typedef struct 
{
    char sFileName[100];//ÎÄ¼þÃû
    NET_DVR_TIME struStartTime;//ÎÄ¼þµÄ¿ªÊ¼Ê±¼ä
    NET_DVR_TIME struStopTime;//ÎÄ¼þµÄ½áÊøÊ±¼ä
    DWORD dwFileSize;//ÎÄ¼þµÄ´óÐ¡
    char sCardNum[32];
    BYTE byLocked;//9000Éè±¸Ö§³Ö,1±íÊ¾´ËÎÄ¼þÒÑ¾­±»Ëø¶¨,0±íÊ¾Õý³£µÄÎÄ¼þ
    BYTE byFileType;  //ÎÄ¼þÀàÐÍ:0£­¶¨Ê±Â¼Ïñ,1-ÒÆ¶¯Õì²â £¬2£­±¨¾¯´¥·¢£¬
    //3-±¨¾¯|ÒÆ¶¯Õì²â 4-±¨¾¯&ÒÆ¶¯Õì²â 5-ÃüÁî´¥·¢ 6-ÊÖ¶¯Â¼Ïñ,7£­Õð¶¯±¨¾¯£¬8-»·¾³±¨¾¯£¬9-ÖÇÄÜ±¨¾¯£¬10-PIR±¨¾¯£¬11-ÎÞÏß±¨¾¯£¬12-ºô¾È±¨¾¯,14-ÖÇÄÜ½»Í¨ÊÂ¼þ
    BYTE byRes[2];
}NET_DVR_FINDDATA_V30, *LPNET_DVR_FINDDATA_V30;

//Â¼ÏóÎÄ¼þ²ÎÊý(cvr)
typedef struct 
{
    char sFileName[100];//ÎÄ¼þÃû
    NET_DVR_TIME struStartTime;//ÎÄ¼þµÄ¿ªÊ¼Ê±¼ä
    NET_DVR_TIME struStopTime;//ÎÄ¼þµÄ½áÊøÊ±¼ä
    DWORD dwFileSize;//ÎÄ¼þµÄ´óÐ¡
    char sCardNum[32];
    BYTE byLocked;//9000Éè±¸Ö§³Ö,1±íÊ¾´ËÎÄ¼þÒÑ¾­±»Ëø¶¨,0±íÊ¾Õý³£µÄÎÄ¼þ
    BYTE byFileType;  //ÎÄ¼þÀàÐÍ:0£­¶¨Ê±Â¼Ïñ,1-ÒÆ¶¯Õì²â £¬2£­±¨¾¯´¥·¢£¬
    //3-±¨¾¯|ÒÆ¶¯Õì²â 4-±¨¾¯&ÒÆ¶¯Õì²â 5-ÃüÁî´¥·¢ 6-ÊÖ¶¯Â¼Ïñ,7£­Õð¶¯±¨¾¯£¬8-»·¾³±¨¾¯£¬9-ÖÇÄÜ±¨¾¯£¬10-PIR±¨¾¯£¬11-ÎÞÏß±¨¾¯£¬12-ºô¾È±¨¾¯,14-ÖÇÄÜ½»Í¨ÊÂ¼þ
    BYTE byQuickSearch; //0:ÆÕÍ¨²éÑ¯½á¹û£¬1£º¿ìËÙ£¨ÈÕÀú£©²éÑ¯½á¹û
    BYTE byRes;
    DWORD dwFileIndex; //ÎÄ¼þË÷ÒýºÅ
    BYTE byStreamType;
    BYTE byRes1[127];    
}NET_DVR_FINDDATA_V40, *LPNET_DVR_FINDDATA_V40;

//Â¼ÏóÎÄ¼þ²ÎÊý(´ø¿¨ºÅ)
typedef struct 
{
    char sFileName[100];//ÎÄ¼þÃû
    NET_DVR_TIME struStartTime;//ÎÄ¼þµÄ¿ªÊ¼Ê±¼ä
    NET_DVR_TIME struStopTime;//ÎÄ¼þµÄ½áÊøÊ±¼ä
    DWORD dwFileSize;//ÎÄ¼þµÄ´óÐ¡
    char sCardNum[32];
}NET_DVR_FINDDATA_CARD, *LPNET_DVR_FINDDATA_CARD;


//Â¼ÏóÎÄ¼þ²éÕÒÌõ¼þ½á¹¹
typedef struct 
{
    LONG lChannel;//Í¨µÀºÅ
    DWORD dwFileType;//Â¼ÏóÎÄ¼þÀàÐÍ
       //²»´ø¿¨ºÅ£¬0xff£­È«²¿£¬0£­¶¨Ê±Â¼Ïñ,1-ÒÆ¶¯Õì²â £¬2£­±¨¾¯´¥·¢£¬3-±¨¾¯|ÒÆ¶¯Õì²â 4-±¨¾¯&ÒÆ¶¯Õì²â 5-ÃüÁî´¥·¢ 6-ÊÖ¶¯Â¼Ïñ,7-ÖÇÄÜÂ¼Ïñ£¬10-PIR±¨¾¯£¬11-ÎÞÏß±¨¾¯£¬12-ºô¾È±¨¾¯£¬13-È«²¿ÊÂ¼þ£¬14-ÖÇÄÜ½»Í¨ÊÂ¼þ
    //´ø¿¨ºÅ£¬0xff£­È«²¿£¬0£­¶¨Ê±Â¼Ïñ£¬1-ÒÆ¶¯Õì²â£¬2£­½Ó½ü±¨¾¯£¬3£­³ö³®±¨¾¯£¬4£­½ø³®±¨¾¯£¬5-ÃüÁî´¥·¢£¬6£­ÊÖ¶¯Â¼Ïñ£¬7£­Õð¶¯±¨¾¯£¬8-»·¾³±¨¾¯£¬9-ÖÇÄÜ±¨¾¯£¬10-PIR±¨¾¯£¬11-ÎÞÏß±¨¾¯£¬12-ºô¾È±¨¾¯£¬13-È«²¿ÊÂ¼þ£¬14-ÖÇÄÜ½»Í¨ÊÂ¼þ
    DWORD dwIsLocked;//ÊÇ·ñËø¶¨ 0-Õý³£ÎÄ¼þ,1-Ëø¶¨ÎÄ¼þ, 0xff±íÊ¾ËùÓÐÎÄ¼þ
    DWORD dwUseCardNo;//ÊÇ·ñÊ¹ÓÃ¿¨ºÅ
    BYTE sCardNumber[32];//¿¨ºÅ
    NET_DVR_TIME struStartTime;//¿ªÊ¼Ê±¼ä
    NET_DVR_TIME struStopTime;//½áÊøÊ±¼ä
}NET_DVR_FILECOND, *LPNET_DVR_FILECOND;

//ÔÆÌ¨ÇøÓòÑ¡Ôñ·Å´óËõÐ¡(Ë½ÓÐ ¿ìÇò×¨ÓÃ)
typedef struct 
{
    int xTop;     //·½¿òÆðÊ¼µãµÄx×ø±ê
    int yTop;     //·½¿ò½áÊøµãµÄy×ø±ê
    int xBottom;  //·½¿ò½áÊøµãµÄx×ø±ê
    int yBottom;  //·½¿ò½áÊøµãµÄy×ø±ê
    int bCounter; //±£Áô
}NET_DVR_POINT_FRAME, *LPNET_DVR_POINT_FRAME;

//ÓïÒô¶Ô½²²ÎÊý
typedef struct tagNET_DVR_COMPRESSION_AUDIO
{
    BYTE  byAudioEncType;   //ÒôÆµ±àÂëÀàÐÍ 0-OggVorbis;1-G711_U;2-G711_A;5-MP2L2;6-G726;7-AAC,8-PCM
    BYTE  byAudioSamplingRate;//ÒôÆµ²ÉÑùÂÊ 0-Ä¬ÈÏ£¬1-16kHZ£¬2-32kHZ£¬3-48kHZ, 4- 44.1kHZ,5-8kHZ
    BYTE  byAudioBitRate;// ÒôÆµÂëÂÊ ²Î¿¼ BITRATE_ENCODE_INDEX
    BYTE  byres[4];//ÕâÀï±£ÁôÒôÆµµÄÑ¹Ëõ²ÎÊý  
    BYTE  bySupport;//bySupport Bit0±íÊ¾ Mp2l2Ç°4¸ö×Ö½ÚµÄº¬Òå±íÊ¾ºóÃæÄÚÈÝÒôÆµÊý¾Ý³¤¶È 
}NET_DVR_COMPRESSION_AUDIO, *LPNET_DVR_COMPRESSION_AUDIO;

//2009-7-22


#define IW_ESSID_MAX_SIZE                         32
#define WIFI_WEP_MAX_KEY_COUNT                     4
#define WIFI_WEP_MAX_KEY_LENGTH                     33
#define WIFI_WPA_PSK_MAX_KEY_LENGTH                 63
#define WIFI_WPA_PSK_MIN_KEY_LENGTH                 8
#define WIFI_MAX_AP_COUNT                         20
#define WIFI_WPA_PSK_MAX_HEXKEY_LENGTH           68   //WPA16½øÖÆÃÜÔ¿×î´ó³¤¶È

typedef struct tagNET_DVR_AP_INFO
{
    char  sSsid[IW_ESSID_MAX_SIZE];
    DWORD  dwMode;                        /* 0 mange Ä£Ê½;1 ad-hocÄ£Ê½£¬²Î¼ûNICMODE */
    DWORD  dwSecurity;           /*0 ²»¼ÓÃÜ£»1 wep¼ÓÃÜ£»2 wpa-psk;3 wpa-Enterprise;4-WPA2_PSK²Î¼ûWIFISECURITY*/
    DWORD  dwChannel;            /*1-11±íÊ¾11¸öÍ¨µÀ*/
    DWORD  dwSignalStrength;    /*0-100ÐÅºÅÓÉ×îÈõ±äÎª×îÇ¿*/
    DWORD  dwSpeed;               /*ËÙÂÊ,µ¥Î»ÊÇ0.01mbps*/
}NET_DVR_AP_INFO,*LPNET_DVR_AP_INFO;

typedef struct tagNET_DVR_AP_INFO_LIST
{
    DWORD dwSize;
    DWORD dwCount;        /*ÎÞÏßAPÊýÁ¿£¬²»³¬¹ý20*/
    NET_DVR_AP_INFO struApInfo[WIFI_MAX_AP_COUNT];
}NET_DVR_AP_INFO_LIST,*LPNET_DVR_AP_INFO_LIST;

typedef struct tagNET_DVR_WIFIETHERNET
{    
    char sIpAddress[16];                /*IPµØÖ·*/
    char sIpMask[16];                    /*ÑÚÂë*/    
    BYTE    byMACAddr[MACADDR_LEN];        /*ÎïÀíµØÖ·£¬Ö»ÓÃÀ´ÏÔÊ¾*/
    BYTE    byCloseWifi;        //ÊÇ·ñ¹Ø±ÕwifiÁ¬½Ó£¬0-²»¹Ø±Õ£¬1-¹Ø±Õ
    BYTE    bRes;
    DWORD    dwEnableDhcp;                /*ÊÇ·ñÆô¶¯dhcp  0²»Æô¶¯ 1Æô¶¯*/
    DWORD    dwAutoDns;                    /*Èç¹ûÆô¶¯dhcpÊÇ·ñ×Ô¶¯»ñÈ¡dns,0²»×Ô¶¯»ñÈ¡ 1×Ô¶¯»ñÈ¡£»¶ÔÓÚÓÐÏßÈç¹ûÆô¶¯dhcpÄ¿Ç°×Ô¶¯»ñÈ¡dns*/    
    char sFirstDns[16];                         /*µÚÒ»¸ödnsÓòÃû*/
    char sSecondDns[16];                     /*µÚ¶þ¸ödnsÓòÃû*/
    char sGatewayIpAddr[16];                 /* Íø¹ØµØÖ·*/
    BYTE   bRes2[8];
}NET_DVR_WIFIETHERNET,*LPNET_DVR_WIFIETHERNET;

typedef struct tagNET_DVR_WIFI_CFG_EX
{
    NET_DVR_WIFIETHERNET struEtherNet;        /*wifiÍø¿Ú*/
    char sEssid[IW_ESSID_MAX_SIZE];     /*SSID*/
    DWORD dwMode;      /* 0 mange Ä£Ê½;1 ad-hocÄ£Ê½£¬²Î¼û*/
    DWORD dwSecurity; /*0-²»¼ÓÃÜ;1-WEP¼ÓÃÜ;2-WPA-personal; 3-WPA-enterprise;4-WPA2-personal;5-WPA2-enterprise */
    union 
    {
        struct 
        {
            DWORD dwAuthentication;/*0 -¿ª·ÅÊ½ 1-¹²ÏíÊ½*/
            DWORD dwKeyLength;/* 0 -64Î»£»1- 128Î»£»2-152Î»*/
            DWORD dwKeyType;/*0 16½øÖÆ;1 ASCI */
            DWORD dwActive;/*0 Ë÷Òý£º0---3±íÊ¾ÓÃÄÄÒ»¸öÃÜÔ¿*/
            char sKeyInfo[WIFI_WEP_MAX_KEY_COUNT][WIFI_WEP_MAX_KEY_LENGTH];
        }wep;
        struct 
        {
            DWORD dwKeyLength;/*8-63¸öASCII×Ö·û*/
            char sKeyInfo[WIFI_WPA_PSK_MAX_KEY_LENGTH];
            BYTE byEncryptType;  /*WPA/WPA2Ä£Ê½ÏÂ¼ÓÃÜÀàÐÍ,0-AES, 1-TKIP*/
            char sNewKeyInfo[WIFI_WPA_PSK_MAX_HEXKEY_LENGTH/*68*/];//ÐÂÃÜÔ¿£¨Ö§³Ö8-63¸öASCII×Ö·ûÒÔ¼°64¸öÊ®ÁùÖÆ×Ö·ûÃÜÔ¿£©
            //µ±byKeyTypeÎª0Ê±£¬ÆôÓÃsKeyInfo£¬µ±byKeyTypeÎª1Ê±£¬ÆôÓÃsNewKeyInfo
            //ÃÜÔ¿ÀàÐÍ£»0 ~ ÀÏÃÜÔ¿ÀàÐÍ£¨Ö»Ö§³Ö8-63¸öASCII×Ö·û£©£¬1 ~ÐÂÃÜÔ¿ÀàÐÍ£¨Ö§³Ö8-63¸öASCII×Ö·ûÒÔ¼°64¸öÊ®ÁùÖÆ×Ö·ûÃÜÔ¿£©
            BYTE byKeyType; 
            BYTE byRes[7];
        }wpa_psk;
        struct 
        {
            BYTE byEncryptType;  /*¼ÓÃÜÀàÐÍ,0-AES, 1-TKIP*/
            BYTE byAuthType; //ÈÏÖ¤ÀàÐÍ£¬0-EAP_TTLS,1-EAP_PEAP,2-EAP_TLS
            BYTE byRes[2];
            union
            {
                struct 
                {
                    BYTE byEapolVersion; //EAPOL°æ±¾£¬0-°æ±¾1£¬1-°æ±¾2
                    BYTE byAuthType; //ÄÚ²¿ÈÏÖ¤·½Ê½£¬0-PAP£¬1-MSCHAPV2
                    BYTE byRes1[2];
                    BYTE byAnonyIdentity [NAME_LEN]; //ÄäÃûÉí·Ý
                    BYTE byUserName[NAME_LEN]; //ÓÃ»§Ãû
                    BYTE byPassword[NAME_LEN]; //ÃÜÂë
                    BYTE byRes[44];
                }EAP_TTLS; //WPA-enterprise/WPA2-enterprisÄ£Ê½ÊÊÓÃ
                struct 
                {
                    BYTE byEapolVersion; //EAPOL°æ±¾£¬0-°æ±¾1£¬1-°æ±¾2
                    BYTE byAuthType; //ÄÚ²¿ÈÏÖ¤·½Ê½£¬0-GTC£¬1-MD5£¬2-MSCHAPV2
                    BYTE byPeapVersion; //PEAP°æ±¾£¬0-°æ±¾0£¬1-°æ±¾1
                    BYTE byPeapLabel; //PEAP±êÇ©£¬0-ÀÏ±êÇ©£¬1-ÐÂ±êÇ©
                    BYTE byAnonyIdentity[NAME_LEN]; //ÄäÃûÉí·Ý
                    BYTE byUserName[NAME_LEN]; //ÓÃ»§Ãû
                    BYTE byPassword[NAME_LEN]; //ÃÜÂë
                    BYTE byRes[44]; 
                }EAP_PEAP; //WPA-enterprise/WPA2-enterprisÄ£Ê½ÊÊÓÃ
                struct 
                {
                    BYTE byEapolVersion; //EAPOL°æ±¾£¬0-°æ±¾1£¬1-°æ±¾2
                    BYTE byRes1[3]; 
                    BYTE byIdentity[NAME_LEN]; //Éí·Ý
                    BYTE byPrivateKeyPswd[NAME_LEN]; //Ë½Ô¿ÃÜÂë
                    BYTE byRes[76]; 
                }EAP_TLS; 
            }auth_param;
        }wpa_wpa2; //WPA-enterprise/WPA2-enterprisÄ£Ê½ÊÊÓÃ
    }key;    
}NET_DVR_WIFI_CFG_EX,*LPNET_DVR_WIFI_CFG_EX;

//wifiÅäÖÃ½á¹¹
typedef struct tagNET_DVR_WIFI_CFG
{
    DWORD dwSize;
    NET_DVR_WIFI_CFG_EX struWifiCfg;
}NET_DVR_WIFI_CFG,*LPNET_DVR_WIFI_CFG;

//wifiÁ¬½Ó×´Ì¬
typedef     struct  tagNET_DVR_WIFI_CONNECT_STATUS
{
    DWORD        dwSize;
    BYTE        byCurStatus;    //1-ÒÑÁ¬½Ó£¬2-Î´Á¬½Ó£¬3-ÕýÔÚÁ¬½Ó
    BYTE        byRes1[3];        //±£Áô
    DWORD        dwErrorCode;    // byCurStatus = 2Ê±ÓÐÐ§,1-ÓÃ»§Ãû»òÃÜÂë´íÎó,2-ÎÞ´ËÂ·ÓÉÆ÷,3-Î´Öª´íÎó
    BYTE        byRes[244];
}NET_DVR_WIFI_CONNECT_STATUS,*LPNET_DVR_WIFI_CONNECT_STATUS;

//wifi¹¤×÷Ä£Ê½
typedef struct tagNET_DVR_WIFI_WORKMODE
{
    DWORD dwSize;
    DWORD dwNetworkInterfaceMode; /*0 ×Ô¶¯ÇÐ»»Ä£Ê½¡¡1 ÓÐÏßÄ£Ê½*/
}NET_DVR_WIFI_WORKMODE,*LPNET_DVR_WIFI_WORKMODE;

//½á¹¹²ÎÊýºê¶¨Òå 
#define VCA_MAX_POLYGON_POINT_NUM        10        //¼ì²âÇøÓò×î¶àÖ§³Ö10¸öµãµÄ¶à±ßÐÎ
#define MAX_RULE_NUM                    8        //×î¶à¹æÔòÌõÊý
#define MAX_RULE_NUM_V42                16      //×î¶à¹æÔòÌõÊýÀ©Õ¹
#define MAX_TARGET_NUM                    30        //×î¶àÄ¿±ê¸öÊý
#define MAX_CALIB_PT                     6        //×î´ó±ê¶¨µã¸öÊý
#define MIN_CALIB_PT                     4        //×îÐ¡±ê¶¨µã¸öÊý
#define MAX_TIMESEGMENT_2                2        //×î´óÊ±¼ä¶ÎÊý
#define DATA_INDEX_LEN                  64      //Êý¾ÝÁ÷Ë®ºÅ
#define MAX_TRAFFIC_PICTURE_NUM         8      //½»Í¨Í¼Æ¬ÊýÁ¿
#define MAX_LICENSE_LEN                    16        //³µÅÆºÅ×î´ó³¤¶È
#define MAX_CARDNO_LEN                  48      //¿¨ºÅ×î´ó³¤¶È 2013-11-04
#define MAX_OPERATE_INDEX_LEN           32      //²Ù×÷Êý×î´ó³¤¶È2014-03-03
#define MAX_PLATE_NUM                    3        //³µÅÆ¸öÊý
#define MAX_MASK_REGION_NUM                4       //×î¶àËÄ¸öÆÁ±ÎÇøÓò
#define MAX_SEGMENT_NUM                    6       //ÉãÏñ»ú±ê¶¨×î´óÑù±¾ÏßÊýÄ¿
#define MIN_SEGMENT_NUM                    3       //ÉãÏñ»ú±ê¶¨×îÐ¡Ñù±¾ÏßÊýÄ¿
#define MAX_REL_SNAPCHAN_NUM            3       //×î´ó¹ØÁª×¥Í¼Í¨µÀÊý
#define MAX_PIC_SWITCH_STORAGE_SERVER   64      //ÔÆ´æ´¢·þÎñÆ÷´æ´¢µÄ×î´óÍ¼Æ¬ÀàÐÍÊý
#define MAX_INFO_SWITCH_STORAGE_SERVER  64      //ÔÆ´æ´¢·þÎñÆ÷´æ´¢µÄ×î´ó¸½¼ÓÐÅÏ¢ÀàÐÍÊý
#define RTMP_URL_LEN                    128     //RTMP URL ³¤¶È
#define MAX_ID_LEN_128                  128     //·¢²¼ÎÄ¼þID³¤¶È
#define MAX_DEBUGCMD_LEN                1024    //Éè±¸µ÷ÊÔÃüÁî×î´ó³¤¶È
#define MAX_DEBUGINFO_LEN               1400    //Éè±¸µ÷ÊÔÐÅÏ¢×î´ó³¤¶È
#define MAX_VEHICLE_ID_LEN              32      //×î´ó³µÁ¾±êÊ¶³¤¶È

//ÖÇÄÜ¿ØÖÆÐÅÏ¢
#define MAX_VCA_CHAN  16//×î´óÖÇÄÜÍ¨µÀÊý
typedef struct tagNET_VCA_CTRLINFO
{
    BYTE   byVCAEnable;        //ÊÇ·ñ¿ªÆôÖÇÄÜ
    BYTE   byVCAType;        //ÖÇÄÜÄÜÁ¦ÀàÐÍ£¬VCA_CHAN_ABILITY_TYPE 
    BYTE   byStreamWithVCA; //ÂëÁ÷ÖÐÊÇ·ñ´øÖÇÄÜÐÅÏ¢
    BYTE   byMode;            //Ä£Ê½£¬ATMÄÜÁ¦Ê±²ÎÕÕVCA_CHAN_MODE_TYPE ,TFSÄÜÁ¦Ê±²ÎÕÕTFS_CHAN_MODE_TYPE
    BYTE   byControlType;   //¿ØÖÆÀàÐÍ£¬°´Î»±íÊ¾£¬0-·ñ£¬1-ÊÇ
    // byControlType &1 ÊÇ·ñÆôÓÃ×¥ÅÄ¹¦ÄÜ
    BYTE   byPicWithVCA ;// ±¨¾¯×¥Í¼µþ¼ÓÄ¿±êÐÅÏ¢(Ä¿±ê¿ò)£º0-²»µþ¼Ó£¨Ä¬ÈÏ£©£¬1-µþ¼Ó£»
    BYTE   byRes[2];         //±£Áô£¬ÉèÖÃÎª0 
}NET_VCA_CTRLINFO, * LPNET_VCA_CTRLINFO;

//ÖÇÄÜ¿ØÖÆÐÅÏ¢½á¹¹
typedef struct tagNET_VCA_CTRLCFG
{
    DWORD dwSize;
    NET_VCA_CTRLINFO  struCtrlInfo[MAX_VCA_CHAN];     //¿ØÖÆÐÅÏ¢,Êý×é0¶ÔÓ¦Éè±¸µÄÆðÊ¼Í¨µÀ
    BYTE byRes[16];
}NET_VCA_CTRLCFG, * LPNET_VCA_CTRLCFG;

//ÖÇÄÜÉè±¸ÄÜÁ¦¼¯
typedef struct tagNET_VCA_DEV_ABILITY
{
    DWORD dwSize;              //½á¹¹³¤¶È
    BYTE byVCAChanNum;         //ÖÇÄÜÍ¨µÀ¸öÊý
    BYTE byPlateChanNum;       //³µÅÆÍ¨µÀ¸öÊý
    BYTE byBBaseChanNum;       //ÐÐÎª»ù±¾°æ¸öÊý
    BYTE byBAdvanceChanNum;    //ÐÐÎª¸ß¼¶°æ¸öÊý
    BYTE byBFullChanNum;       //ÐÐÎªÍêÕû°æ¸öÊý
    BYTE byATMChanNum;           //ÖÇÄÜATM¸öÊý
    BYTE byPDCChanNum;         //ÈËÊýÍ³¼ÆÍ¨µÀ¸öÊý
    BYTE byITSChanNum;         //½»Í¨ÊÂ¼þÍ¨µÀ¸öÊý
    BYTE byBPrisonChanNum;     //ÐÐÎª¼àÓü°æ(¼àÉá)Í¨µÀ¸öÊý
    BYTE byFSnapChanNum;       //ÈËÁ³×¥ÅÄÍ¨µÀ¸öÊý
    BYTE byFSnapRecogChanNum;  //ÈËÁ³×¥ÅÄºÍÊ¶±ðÍ¨µÀ¸öÊý
    BYTE byFRetrievalChanNum;  //ÈËÁ³ºó¼ìË÷¸öÊý
    BYTE bySupport;            //ÄÜÁ¦£¬Î»Óë½á¹ûÎª0±íÊ¾²»Ö§³Ö£¬1±íÊ¾Ö§³Ö
    //bySupport & 0x1£¬±íÊ¾ÊÇ·ñÖ§³ÖÖÇÄÜ¸ú×Ù 2012-3-22
    //bySupport & 0x2£¬±íÊ¾ÊÇ·ñÖ§³Ö128Â·È¡Á÷À©Õ¹2012-12-27
    BYTE byFRecogChanNum;      //ÈËÁ³Ê¶±ðÍ¨µÀ¸öÊý
    BYTE byBPPerimeterChanNum; //ÐÐÎª¼àÓü°æ(ÖÜ½ç)Í¨µÀ¸öÊý
    BYTE byTPSChanNum;         //½»Í¨ÓÕµ¼Í¨µÀ¸öÊý
    BYTE byTFSChanNum;         //µÀÂ·Î¥ÕÂÈ¡Ö¤Í¨µÀ¸öÊý
    BYTE byFSnapBFullChanNum;  //ÈËÁ³×¥ÅÄºÍÐÐÎª·ÖÎöÍ¨µÀ¸öÊý
    BYTE byHeatMapChanNum;     //ÈÈ¶ÈÍ¼Í¨µÀ¸öÊý
    BYTE bySmartVehicleNum;    //SMARTÊÂ¼þ+³µÁ¾¼ì²âÍ¨µÀ¸öÊý
    BYTE bySmartHVTNum;       //SMARTÊÂ¼þ+»ìÐÐ¼ì²âÍ¨µÀ¸öÊý
    BYTE bySmartNum;          //SMARTÊÂ¼þ¸öÊý
    BYTE byVehicleNum;        //³µÁ¾¼ì²âÍ¨µÀ¸öÊý
    BYTE bySmartRoadDetectionNum ; // SMARTÊÂ¼þ+µÀÂ·¼à¿ØÍ¨µÀ¸öÊý
    BYTE bySmartFaceDetectionNum ; // SMARTÊÂ¼þ+ÈËÁ³Õì²âÍ¨µÀ¸öÊý
    BYTE bySmartHeatMapNum ; // SMARTÊÂ¼þ+ÈÈ¶ÈÍ¼Í¨µÀ¸öÊý
    BYTE byRes[14];
}NET_VCA_DEV_ABILITY, *LPNET_VCA_DEV_ABILITY;


//ÐÐÎª·ÖÎöÄÜÁ¦ÀàÐÍ
typedef enum _VCA_ABILITY_TYPE_
{
    TRAVERSE_PLANE_ABILITY      = 0x01,       //´©Ô½¾¯½äÃæ
        ENTER_AREA_ABILITY          = 0x02,       //½øÈëÇøÓò
        EXIT_AREA_ABILITY           = 0x04,       //Àë¿ªÇøÓò
        INTRUSION_ABILITY           = 0x08,       //ÈëÇÖ
        LOITER_ABILITY              = 0x10,       //ÅÇ»²
        LEFT_TAKE_ABILITY           = 0x20,       //ÎïÆ·ÒÅÁôÄÃÈ¡
        PARKING_ABILITY             = 0x40,       //Í£³µ
        RUN_ABILITY                 = 0x80,       //¿ìËÙÒÆ¶¯
        HIGH_DENSITY_ABILITY        = 0x100,      //ÈËÔ±¾Û¼¯
        LF_TRACK_ABILITY            = 0x200,      //Çò»ú¸ú×Ù
        VIOLENT_MOTION_ABILITY        = 0x400,      //¾çÁÒÔË¶¯¼ì²â
        REACH_HIGHT_ABILITY            = 0x800,      //ÅÊ¸ß¼ì²â
        GET_UP_ABILITY                = 0x1000,     //ÆðÉí¼ì²â
        LEFT_ABILITY                = 0x2000,     //ÎïÆ·ÒÅÁô
        TAKE_ABILITY                = 0x4000,     //ÎïÆ·ÄÃÈ¡
        LEAVE_POSITION              = 0x8000,     //Àë¸Ú
        TRAIL_ABILITY               = 0x10000,    //Î²Ëæ 
        KEY_PERSON_GET_UP_ABILITY   = 0x20000,    //ÖØµãÈËÔ±ÆðÉí¼ì²â
        STANDUP_ABILITY             = 0x40000,   //ÆðÁ¢
        FALL_DOWN_ABILITY           = 0x80000,    //µ¹µØ
        AUDIO_ABNORMAL_ABILITY      = 0x100000,   //ÉùÇ¿Í»±ä
        ADV_REACH_HEIGHT_ABILITY    = 0x200000,   //ÕÛÏßÅÊ¸ß
        TOILET_TARRY_ABILITY        = 0x400000,   //Èç²Þ³¬Ê±
        YARD_TARRY_ABILITY          = 0x800000,   //·Å·ç³¡ÖÍÁô
        ADV_TRAVERSE_PLANE_ABILITY  = 0x1000000,  //ÕÛÏß¾¯½äÃæ
        LECTURE_ABILITY                = 0x2000000,  //ÊÚ¿Î
        ANSWER_ABILITY                = 0x4000000,  //»Ø´ðÎÊÌâ
        HUMAN_ENTER_ABILITY         = 0x10000000, //ÈË¿¿½üATM ,Ö»ÔÚATM_PANELÄ£Ê½ÏÂÖ§³Ö
        OVER_TIME_ABILITY           = 0x20000000, //²Ù×÷³¬Ê±,Ö»ÔÚATM_PANELÄ£Ê½ÏÂÖ§³Ö
        STICK_UP_ABILITY            = 0x40000000, //ÌùÖ½Ìõ
        INSTALL_SCANNER_ABILITY     = 0x80000000  //°²×°¶Á¿¨Æ÷
}VCA_ABILITY_TYPE;

typedef enum _VCA_ABILITY_TYPE_EX_
{ 
    PEOPLENUM_CHANGE_ABILITY = 0x00000002, //ÈËÊý±ä»¯¼ì²â
    SPACING_CHANGE_ABILITY = 0x00000004,    //¼ä¾à±ä»¯¼ì²â
    EVENT_COMBINED_ABILITY = 0x00000008,    //×éºÏÊÂ¼þ¹æÔò
    EVENT_SIT_QUIETLY =        0x00000010,    //¾²×ø
    EVENT_HIGH_DENSITY_STATUS_ABILITY = 0x00000020    //ÈËÔ±¾Û¼¯×´Ì¬
}VCA_ABILITY_TYPE_EX;

//ÖÇÄÜÍ¨µÀÀàÐÍ
typedef enum _VCA_CHAN_ABILITY_TYPE_
{
    VCA_BEHAVIOR_BASE     =  1,          //ÐÐÎª·ÖÎö»ù±¾°æ
    VCA_BEHAVIOR_ADVANCE  =  2,          //ÐÐÎª·ÖÎö¸ß¼¶°æ
    VCA_BEHAVIOR_FULL     =  3,          //ÐÐÎª·ÖÎöÍêÕû°æ
    VCA_PLATE               =  4,          //³µÅÆÄÜÁ¦
    VCA_ATM               =  5,          //ATMÄÜÁ¦
    VCA_PDC               =  6,          //ÈËÁ÷Á¿Í³¼Æ
    VCA_ITS               =  7,          //ÖÇÄÜ ½»Í¨ÊÂ¼þ
    VCA_BEHAVIOR_PRISON   =  8,          //ÐÐÎª·ÖÎö¼àÓü°æ(¼àÉá) 
    VCA_FACE_SNAP         =  9,          //ÈËÁ³×¥ÅÄÄÜÁ¦
    VCA_FACE_SNAPRECOG    = 10,          //ÈËÁ³×¥ÅÄºÍÊ¶±ðÄÜÁ¦
    VCA_FACE_RETRIEVAL    = 11,          //ÈËÁ³ºó¼ìË÷ÄÜÁ¦
    VCA_FACE_RECOG        = 12,          //ÈËÁ³Ê¶±ðÄÜÁ¦
    VCA_BEHAVIOR_PRISON_PERIMETER =  13, // ÐÐÎª·ÖÎö¼àÓü°æ (ÖÜ½ç)
    VCA_TPS               = 14,          //½»Í¨ÓÕµ¼
    VCA_TFS               = 15,          //µÀÂ·Î¥ÕÂÈ¡Ö¤
    VCA_BEHAVIOR_FACESNAP = 16,          //ÈËÁ³×¥ÅÄºÍÐÐÎª·ÖÎöÄÜÁ¦
    VCA_HEATMAP           =  17,         //ÈÈ¶ÈÍ¼
    VCA_SMART_VEHICLE_DETECTION  =  18,  // SMARTÊÂ¼þ+³µÁ¾¼ì²â
    VCA_SMART_HVT_DETECTION      =  19,  // SMARTÊÂ¼þ+»ìÐÐ¼ì²â
    VCA_SMART_EVENT          =  20,      // SMARTÊÂ¼þ
    VCA_VEHICLE_DETECTION    =  21,      // ³µÁ¾¼ì²â
    VCA_SMART_ROAD_DETECTION =  22,      // SMARTÊÂ¼þ+µÀÂ·¼à¿Ø
    VCA_SMART_FACE_DETECTION =  23,      // SMARTÊÂ¼þ+ÈËÁ³Õì²â
    VCA_SMART_HEATMAP        =  24       // SMARTÊÂ¼þ+ÈÈ¶ÈÍ¼
}VCA_CHAN_ABILITY_TYPE;

//ÖÇÄÜATMÄ£Ê½ÀàÐÍ(ATMÄÜÁ¦ÌØÓÐ)
typedef enum _VCA_CHAN_MODE_TYPE_
{
    VCA_ATM_PANEL     =  0,  //ATMÃæ°å
        VCA_ATM_SURROUND  =  1,  //ATM»·¾³
        VCA_ATM_FACE      =  2,     //ATMÈËÁ³
        VCA_ATM_SAFETYCABIN = 3  //ATM·À»¤²Õ
}VCA_CHAN_MODE_TYPE;

//½»Í¨È¡Ö¤TFSÍ¨µÀÄ£Ê½(TFSÄÜÁ¦ÌØÓÐ)
typedef enum _TFS_CHAN_MODE_TYPE_
{
    TFS_CITYROAD    =  0,  //TFS ³ÇÊÐµÀÂ·
        TFS_FREEWAY     =  1   //TFS ¸ßËÙµÀÂ·
}TFS_CHAN_MODE_TYPE;

//ÐÐÎª·ÖÎö³¡¾°Ä£Ê½
typedef enum _BEHAVIOR_SCENE_MODE_TYPE_
{
    BEHAVIOR_SCENE_DEFAULT = 0, //ÏµÍ³Ä¬ÈÏ
        BEHAVIOR_SCENE_WALL = 1,    //Î§Ç½
        BEHAVIOR_SCENE_INDOOR = 2   //ÊÒÄÚ
}BEHAVIOR_SCENE_MODE_TYPE;

//¼àÉáÄ£Ê½
typedef enum _BEHAVIOR_PRISON_MODE_TYPE_
{
    BEHAVIOR_PRISON                 = 0, //¼àËù
        BEHAVIOR_HEARING                  = 1, //ÉóÑ¶ÊÒ
        BEHAVIOR_RECFIELD                 = 2  //·Å·ç³¡
}BEHAVIOR_PRISON_MODE_TYPE,LPBEHAVIOR_PRISON_MODE_TYPE;


//Í¨µÀÄÜÁ¦ÊäÈë²ÎÊý
typedef struct tagNET_VCA_CHAN_IN_PARAM
{
    BYTE byVCAType;        //VCA_CHAN_ABILITY_TYPEÃ¶¾ÙÖµ
    BYTE byMode;        //Ä£Ê½£¬ATM ÄÜÁ¦Ê±²ÎÕÕVCA_CHAN_MODE_TYPE,TFSÄÜÁ¦Ê±²ÎÕÕTFS_CHAN_MODE_TYPE,µ±VCA_TYPE Îª½»Í¨ÊÂ¼þÊ±²ÎÕÕTRAFFIC_SCENE_MODE
    BYTE byRes[2];         //±£Áô£¬ÉèÖÃÎª0 
}NET_VCA_CHAN_IN_PARAM, *LPNET_VCA_CHAN_IN_PARAM;


//ÐÐÎªÄÜÁ¦¼¯½á¹¹
typedef struct tagNET_VCA_BEHAVIOR_ABILITY
{
    DWORD dwSize;         //½á¹¹³¤¶È
    DWORD dwAbilityType; //Ö§³ÖµÄÄÜÁ¦ÀàÐÍ£¬°´Î»±íÊ¾£¬¼ûVCA_ABILITY_TYPE¶¨Òå
    BYTE  byMaxRuleNum;     //×î´ó¹æÔòÊý
    BYTE  byMaxTargetNum; //×î´óÄ¿±êÊý
    BYTE  bySupport;        // Ö§³ÖµÄ¹¦ÄÜÀàÐÍ   °´Î»±íÊ¾  
    // bySupport & 0x01 Ö§³Ö±ê¶¨¹¦ÄÜ
    BYTE  byRes[5];         //±£Áô£¬ÉèÖÃÎª0 
    DWORD dwAbilityTypeEx;  //Ö§³ÖµÄÄÜÁ¦ÀàÐÍ£¬°´Î»±íÊ¾£¬¼ûVCA_ABILITY_TYPE_EX¶¨Òå
}NET_VCA_BEHAVIOR_ABILITY, *LPNET_VCA_BEHAVIOR_ABILITY;

//³¡¾°±ä¸üÊý¾Ý¸üÐÂ²ÎÊý
typedef struct tagNET_DVR_SCENE_CHANGE_UPDATE_PARAM
{
    DWORD    dwSize;
    BYTE    byIDCount;    //Êµ¼ÊÁ÷IDÊý
    BYTE    byRes1[3];
    BYTE    byStreamID[MAX_STREAM_ID_NUM][STREAM_ID_LEN];
    BYTE    byRes[256];
}NET_DVR_SCENE_CHANGE_UPDATE_PARAM, *LPNET_DVR_SCENE_CHANGE_UPDATE_PARAM;

// ½»Í¨ÄÜÁ¦¼¯½á¹¹
typedef struct tagNET_DVR_ITS_ABILITY
{
    DWORD     dwSize;             // ½á¹¹Ìå´óÐ¡
    DWORD     dwAbilityType;      // Ö§³ÖµÄÄÜÁ¦ÁÐ±í  ²ÎÕÕITS_ABILITY_TYPE
    BYTE     byMaxRuleNum;         //×î´ó¹æÔòÊý
    BYTE     byMaxTargetNum;     //×î´óÄ¿±êÊý
       BYTE    byRes[10];            // ±£Áô
}NET_DVR_ITS_ABILITY, *LPNET_DVR_ITS_ABILITY;

/***********************************end*******************************************/

/************************************ÖÇÄÜ²ÎÊý½á¹¹*********************************/
//ÖÇÄÜ¹²ÓÃ½á¹¹
//×ø±êÖµ¹éÒ»»¯,¸¡µãÊýÖµÎªµ±Ç°»­ÃæµÄ°Ù·Ö±È´óÐ¡, ¾«¶ÈÎªÐ¡ÊýµãºóÈýÎ»

//ÇøÓò¿ò½á¹¹
typedef struct tagNET_VCA_RECT
{
    float fX;               //±ß½ç¿ò×óÉÏ½ÇµãµÄXÖá×ø±ê, 0.001~1
    float fY;               //±ß½ç¿ò×óÉÏ½ÇµãµÄYÖá×ø±ê, 0.001~1
    float fWidth;           //±ß½ç¿òµÄ¿í¶È, 0.001~1
    float fHeight;          //±ß½ç¿òµÄ¸ß¶È, 0.001~1
}NET_VCA_RECT, *LPNET_VCA_RECT;

//ÐÐÎª·ÖÎöÊÂ¼þÀàÐÍ
typedef enum _VCA_EVENT_TYPE_
{
    VCA_TRAVERSE_PLANE     = 0x1,        //´©Ô½¾¯½äÃæ
        VCA_ENTER_AREA         = 0x2,        //Ä¿±ê½øÈëÇøÓò,Ö§³ÖÇøÓò¹æÔò
        VCA_EXIT_AREA           = 0x4,        //Ä¿±êÀë¿ªÇøÓò,Ö§³ÖÇøÓò¹æÔò
        VCA_INTRUSION          = 0x8,        //ÖÜ½çÈëÇÖ,Ö§³ÖÇøÓò¹æÔò
        VCA_LOITER             = 0x10,       //ÅÇ»²,Ö§³ÖÇøÓò¹æÔò
        VCA_LEFT_TAKE          = 0x20,       //ÎïÆ·ÒÅÁôÄÃÈ¡,Ö§³ÖÇøÓò¹æÔò
        VCA_PARKING               = 0x40,       //Í£³µ,Ö§³ÖÇøÓò¹æÔò
        VCA_RUN                   = 0x80,       //¿ìËÙÒÆ¶¯,Ö§³ÖÇøÓò¹æÔò
        VCA_HIGH_DENSITY       = 0x100,      //ÇøÓòÄÚÈËÔ±¾Û¼¯,Ö§³ÖÇøÓò¹æÔò
        VCA_VIOLENT_MOTION     = 0x200,         //¾çÁÒÔË¶¯¼ì²â
        VCA_REACH_HIGHT        = 0x400,         //ÅÊ¸ß¼ì²â
        VCA_GET_UP             = 0x800,         //ÆðÉí¼ì²â
        VCA_LEFT               = 0x1000,     //ÎïÆ·ÒÅÁô
        VCA_TAKE               = 0x2000,     //ÎïÆ·ÄÃÈ¡
        VCA_LEAVE_POSITION     = 0x4000,     //Àë¸Ú
        VCA_TRAIL              = 0x8000,     //Î²Ëæ
        VCA_KEY_PERSON_GET_UP  = 0x10000,    //ÖØµãÈËÔ±ÆðÉí¼ì²â
        VCA_STANDUP            = 0x20000,    //ÆðÁ¢
        VCA_FALL_DOWN          = 0x80000,    //µ¹µØ¼ì²â
        VCA_AUDIO_ABNORMAL     = 0x100000,   //ÉùÇ¿Í»±ä¼ì²â
        VCA_ADV_REACH_HEIGHT   = 0x200000,   //ÕÛÏßÅÊ¸ß
        VCA_TOILET_TARRY       = 0x400000,   //Èç²Þ³¬Ê±
        VCA_YARD_TARRY         = 0x800000,   //·Å·ç³¡ÖÍÁô
        VCA_ADV_TRAVERSE_PLANE = 0x1000000,  //ÕÛÏß¾¯½äÃæ
        VCA_LECTURE            = 0x2000000,  //ÊÚ¿Î
        VCA_ANSWER             = 0x4000000,  //»Ø´ðÎÊÌâ
        VCA_HUMAN_ENTER        = 0x10000000, //ÈË¿¿½üATM           Ö»ÔÚATM_PANELÄ£Ê½ÏÂÖ§³Ö
        VCA_OVER_TIME          = 0x20000000, //²Ù×÷³¬Ê±            Ö»ÔÚATM_PANELÄ£Ê½ÏÂÖ§³Ö
        VCA_STICK_UP           = 0x40000000, //ÌùÖ½Ìõ,Ö§³ÖÇøÓò¹æÔò
        VCA_INSTALL_SCANNER    = 0x80000000  //°²×°¶Á¿¨Æ÷,Ö§³ÖÇøÓò¹æÔò
}VCA_EVENT_TYPE;

//ÐÐÎª·ÖÎöÊÂ¼þÀàÐÍÀ©Õ¹
typedef enum _VCA_RULE_EVENT_TYPE_EX_
{
    ENUM_VCA_EVENT_TRAVERSE_PLANE     = 1,   //´©Ô½¾¯½äÃæ
        ENUM_VCA_EVENT_ENTER_AREA         = 2,   //Ä¿±ê½øÈëÇøÓò,Ö§³ÖÇøÓò¹æÔò
        ENUM_VCA_EVENT_EXIT_AREA          = 3,   //Ä¿±êÀë¿ªÇøÓò,Ö§³ÖÇøÓò¹æÔò
        ENUM_VCA_EVENT_INTRUSION          = 4,   //ÖÜ½çÈëÇÖ,Ö§³ÖÇøÓò¹æÔò
        ENUM_VCA_EVENT_LOITER             = 5,   //ÅÇ»²,Ö§³ÖÇøÓò¹æÔò
        ENUM_VCA_EVENT_LEFT_TAKE          = 6,   //ÎïÆ·ÒÅÁôÄÃÈ¡,Ö§³ÖÇøÓò¹æÔò
        ENUM_VCA_EVENT_PARKING            = 7,   //Í£³µ,Ö§³ÖÇøÓò¹æÔò
        ENUM_VCA_EVENT_RUN                = 8,   //¿ìËÙÒÆ¶¯,Ö§³ÖÇøÓò¹æÔò
        ENUM_VCA_EVENT_HIGH_DENSITY       = 9,   //ÇøÓòÄÚÈËÔ±¾Û¼¯,Ö§³ÖÇøÓò¹æÔò
        ENUM_VCA_EVENT_VIOLENT_MOTION     = 10,  //¾çÁÒÔË¶¯¼ì²â
        ENUM_VCA_EVENT_REACH_HIGHT        = 11,  //ÅÊ¸ß¼ì²â
        ENUM_VCA_EVENT_GET_UP             = 12,  //ÆðÉí¼ì²â
        ENUM_VCA_EVENT_LEFT               = 13,  //ÎïÆ·ÒÅÁô
        ENUM_VCA_EVENT_TAKE               = 14,  //ÎïÆ·ÄÃÈ¡
        ENUM_VCA_EVENT_LEAVE_POSITION     = 15,  //Àë¸Ú
        ENUM_VCA_EVENT_TRAIL              = 16,  //Î²Ëæ
        ENUM_VCA_EVENT_KEY_PERSON_GET_UP  = 17,  //ÖØµãÈËÔ±ÆðÉí¼ì²â
        ENUM_VCA_EVENT_STANDUP            = 18,  //ÆðÁ¢
        ENUM_VCA_EVENT_FALL_DOWN          = 20,  //µ¹µØ¼ì²â
        ENUM_VCA_EVENT_AUDIO_ABNORMAL     = 21,  //ÉùÇ¿Í»±ä¼ì²â
        ENUM_VCA_EVENT_ADV_REACH_HEIGHT   = 22,  //ÕÛÏßÅÊ¸ß
        ENUM_VCA_EVENT_TOILET_TARRY       = 23,  //Èç²Þ³¬Ê±
        ENUM_VCA_EVENT_YARD_TARRY         = 24,  //·Å·ç³¡ÖÍÁô
        ENUM_VCA_EVENT_ADV_TRAVERSE_PLANE = 25,  //ÕÛÏß¾¯½äÃæ
        ENUM_VCA_EVENT_LECTURE            = 26,  //ÊÚ¿Î£¨ÎÄ½Ì£©
        ENUM_VCA_EVENT_ANSWER             = 27,  //»Ø´ðÎÊÌâ£¨ÎÄ½Ì£©
        ENUM_VCA_EVENT_HUMAN_ENTER        = 29,  //ÈË¿¿½üATM,Ö»ÔÚATM_PANELÄ£Ê½ÏÂÖ§³Ö   
        ENUM_VCA_EVENT_OVER_TIME          = 30,  //²Ù×÷³¬Ê±,Ö»ÔÚATM_PANELÄ£Ê½ÏÂÖ§³Ö
        ENUM_VCA_EVENT_STICK_UP           = 31,  //ÌùÖ½Ìõ,Ö§³ÖÇøÓò¹æÔò
        ENUM_VCA_EVENT_INSTALL_SCANNER    = 32,  //°²×°¶Á¿¨Æ÷,Ö§³ÖÇøÓò¹æÔò
        ENUM_VCA_EVENT_PEOPLENUM_CHANGE   = 35,  //ÈËÊý±ä»¯ÊÂ¼þ
        ENUM_VCA_EVENT_SPACING_CHANGE     = 36,  //¼ä¾à±ä»¯ÊÂ¼þ
        ENUM_VCA_EVENT_COMBINED_RULE      = 37,   //×éºÏ¹æÔòÊÂ¼þ
        ENUM_VCA_EVENT_SIT_QUIETLY        = 38,   //Ò»¶¯²»¶¯£¨¾²×ø£©    ÔòÊÂ¼þ
        ENUM_VCA_EVENT_HIGH_DENSITY_STATUS= 39   //ÇøÓòÄÚÈËÔ±¾Û¼¯×´Ì¬
} VCA_RULE_EVENT_TYPE_EX;

//¾¯½äÃæ´©Ô½·½ÏòÀàÐÍ
typedef enum _VCA_CROSS_DIRECTION_
{
    VCA_BOTH_DIRECTION,  // Ë«Ïò 
        VCA_LEFT_GO_RIGHT,   // ÓÉ×óÖÁÓÒ 
        VCA_RIGHT_GO_LEFT    // ÓÉÓÒÖÁ×ó 
}VCA_CROSS_DIRECTION;

//Ïß½á¹¹
typedef struct tagNET_VCA_LINE
{
    NET_VCA_POINT struStart;    //Æðµã 
    NET_VCA_POINT struEnd;      //ÖÕµã
}NET_VCA_LINE, *LPNET_VCA_LINE;

//¶à±ßÐÍ½á¹¹Ìå
typedef struct tagNET_VCA_POLYGON
{
    DWORD dwPointNum;                                  //ÓÐÐ§µã ´óÓÚµÈÓÚ3£¬ÈôÊÇ3µãÔÚÒ»ÌõÏßÉÏÈÏÎªÊÇÎÞÐ§ÇøÓò£¬Ïß½»²æÈÏÎªÊÇÎÞÐ§ÇøÓò 
    NET_VCA_POINT  struPos[VCA_MAX_POLYGON_POINT_NUM]; //¶à±ßÐÎ±ß½çµã,×î¶àÊ®¸ö 
}NET_VCA_POLYGON, *LPNET_VCA_POLYGON;

//¾¯½äÃæ²ÎÊý
typedef struct tagNET_VCA_TRAVERSE_PLANE
{    
    NET_VCA_LINE struPlaneBottom;          //¾¯½äÃæµ×±ß
    VCA_CROSS_DIRECTION dwCrossDirection;  //´©Ô½·½Ïò: 0-Ë«Ïò£¬1-´Ó×óµ½ÓÒ£¬2-´ÓÓÒµ½×ó
    BYTE bySensitivity;                    //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5]
    BYTE byPlaneHeight;                    //¾¯½äÃæ¸ß¶È
    BYTE byDetectionTarget;    //0-ËùÓÐÄ¿±ê£¬1-ÈË£¬2-³µ
    BYTE byRes2[37];                       //±£ÁôÁô
}NET_VCA_TRAVERSE_PLANE, *LPNET_VCA_TRAVERSE_PLANE;

typedef struct tagNET_VCA_SIT_QUIETLY
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    //¹æÔò´¥·¢Ë³Ðò£¬0-Ë³Ðò»òÄæÐò´¥·¢£¬1-Ë³Ðò´¥·¢
    DWORD   dwDuration;         //³ÖÐøÊ±¼ä  µ¥Î»s ·¶Î§1-3600
    BYTE    byRes[4];
} NET_VCA_SIT_QUIETLY, *LPNET_VCA_SIT_QUIETLY;

//½øÈë/Àë¿ªÇøÓò²ÎÊý
typedef struct tagNET_VCA_AREA
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE bySensitivity;        //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5]
    BYTE byDetectionTarget;    //0-ËùÓÐÄ¿±ê£¬1-ÈË£¬2-³µ
    BYTE byRes[6];
}NET_VCA_AREA, *LPNET_VCA_AREA;

//¸ù¾Ý±¨¾¯ÑÓ³ÙÊ±¼äÀ´±êÊ¶±¨¾¯ÖÐ´øÍ¼Æ¬£¬±¨¾¯¼ä¸ôºÍIO±¨¾¯Ò»ÖÂ£¬1Ãë·¢ËÍÒ»¸ö¡£
//ÈëÇÖ²ÎÊý
typedef struct tagNET_VCA_INTRUSION
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    WORD wDuration;            //ÐÐÎªÊÂ¼þ´¥·¢Ê±¼äãÐÖµ: 1-120Ãë£¬½¨Òé5Ãë£¬ÅÐ¶ÏÊÇÓÐÐ§±¨¾¯µÄÊ±¼ä  ÔÚATMÏµÍ³ÖÐ´¥·¢ÎÄ¼þãÐÖµÎª 1-1000Ãë
    BYTE bySensitivity;        //ÁéÃô¶È²ÎÊý£¬·¶Î§[1-100]
    BYTE byRate;               //Õ¼±È£ºÇøÓòÄÚËùÓÐÎ´±¨¾¯Ä¿±ê³ß´çÄ¿±êÕ¼ÇøÓòÃæ»ýµÄ±ÈÖØ£¬¹éÒ»»¯Îª£­£»
    BYTE byDetectionTarget;    //0-ËùÓÐÄ¿±ê£¬1-ÈË£¬2-³µ
    BYTE byRes[3];             //±£Áô
}NET_VCA_INTRUSION, *LPNET_VCA_INTRUSION;

//ÅÇ»²²ÎÊý
typedef struct tagNET_VCA_LOITER
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    WORD wDuration; //´¥·¢Ê±¼äãÐÖµ£º1-120Ãë£¬½¨Òé10Ãë
    BYTE bySensitivity;            //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5]
    BYTE byRes[5];
}NET_VCA_LOITER, *LPNET_VCA_LOITER;

//ÎïÆ·ÒÅÁô/ÎïÆ·ÄÃÈ¡²ÎÊý
typedef struct tagNET_VCA_TAKE_LEFT
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    WORD wDuration; //´¥·¢Ê±¼äãÐÖµ£º1-120Ãë£¬½¨Òé10Ãë
    BYTE bySensitivity;            //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5]
    BYTE byRes[5];
}NET_VCA_TAKE_LEFT, *LPNET_VCA_TAKE_LEFT;

//Í£³µ²ÎÊý
typedef struct tagNET_VCA_PARKING
{
    NET_VCA_POLYGON struRegion;    //ÇøÓò·¶Î§
    WORD wDuration;                //´¥·¢Ê±¼äãÐÖµ£º1-100Ãë£¬½¨Òé10Ãë
    BYTE bySensitivity;            //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5]
    BYTE byRes[5];
}NET_VCA_PARKING, *LPNET_VCA_PARKING;

//¿ìËÙÒÆ¶¯²ÎÊý
typedef struct tagNET_VCA_RUN
{
    NET_VCA_POLYGON struRegion;    //ÇøÓò·¶Î§
    float  fRunDistance;        //ÈË¿ìËÙÒÆ¶¯×î´ó¾àÀë, ·¶Î§: [0.1, 1.00] ÏñËØÄ£Ê½ Êµ¼ÊÄ£Ê½(1,20)m/s
    BYTE bySensitivity;            //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5]
    BYTE byMode;     // 0 ÏñËØÄ£Ê½  1 Êµ¼ÊÄ£Ê½
    BYTE byDetectionTarget;    //0-ËùÓÐÄ¿±ê£¬1-ÈË£¬2-³µ
    BYTE byRes;
}NET_VCA_RUN, *LPNET_VCA_RUN;

//ÈËÔ±¾Û¼¯²ÎÊý
typedef struct tagNET_VCA_HIGH_DENSITY
{
    NET_VCA_POLYGON struRegion;        //ÇøÓò·¶Î§
    float           fDensity;       //¾Û¼¯±ÈÂÊ, ·¶Î§: [0.1, 1.0]
    BYTE            bySensitivity;    //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5]
    BYTE            byRes;          // ±£Áô×Ö½Ú
    WORD            wDuration;      // ´¥·¢ÈËÔ±¾Û¼¯²ÎÊý±¨¾¯ãÐÖµ 20-360s
}NET_VCA_HIGH_DENSITY, *LPNET_VCA_HIGH_DENSITY; 

//¾çÁÒÔË¶¯²ÎÊý
typedef struct tagNET_VCA_VIOLENT_MOTION
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    WORD  wDuration;           //´¥·¢¾çÁÒÔË¶¯±¨¾¯ãÐÖµ£º1-50Ãë
    BYTE  bySensitivity;       //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5]
    BYTE  byMode;              //0-´¿ÊÓÆµÄ£Ê½£¬1-ÒôÊÓÆµÁªºÏÄ£Ê½£¬2-´¿ÒôÆµÄ£Ê½
    BYTE  byRes[4];            //±£Áô
}NET_VCA_VIOLENT_MOTION, *LPNET_VCA_VIOLENT_MOTION; 

// ÅÊ¸ß²ÎÊý
typedef struct tagNET_VCA_REACH_HIGHT
{
    NET_VCA_LINE struVcaLine;   //ÅÊ¸ß¾¯½äÃæ
    WORD wDuration; //´¥·¢ÅÊ¸ß±¨¾¯ãÐÖµ£º1-120Ãë
    BYTE    byRes[6];           // ±£Áô×Ö½Ú
}NET_VCA_REACH_HIGHT, *LPNET_VCA_REACH_HIGHT;

// Æð´²²ÎÊý
typedef struct tagNET_VCA_GET_UP
{
    NET_VCA_POLYGON struRegion; //ÇøÓò·¶Î§
    WORD    wDuration;            //´¥·¢Æð´²±¨¾¯ãÐÖµ1-100 Ãë
    BYTE    byMode;             //ÆðÉí¼ì²âÄ£Ê½,0-´ó´²Í¨ÆÌÄ£Ê½,1-¸ßµÍÆÌÄ£Ê½,2-´ó´²Í¨ÆÌ×øÁ¢ÆðÉíÄ£Ê½
    BYTE    bySensitivity;      //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,10]
    BYTE    byRes[4];            //±£Áô×Ö½Ú
}NET_VCA_GET_UP, * LPNET_VCA_GET_UP;

// ÎïÆ·ÒÅÁô
typedef struct tagNET_VCA_LEFT
{
    NET_VCA_POLYGON struRegion; // ÇøÓò·¶Î§
    WORD       wDuration;       // ´¥·¢ÎïÆ·ÒÅÁô±¨¾¯ãÐÖµ 10-100Ãë
    BYTE       bySensitivity;   // ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5] 
    BYTE       byRes[5];        // ±£Áô×Ö½Ú
}NET_VCA_LEFT, *LPNET_VCA_LEFT;

// ÎïÆ·ÄÃÈ¡
typedef struct tagNET_VCA_TAKE
{
    NET_VCA_POLYGON struRegion;     // ÇøÓò·¶Î§
    WORD            wDuration;      // ´¥·¢ÎïÆ·ÄÃÈ¡±¨¾¯ãÐÖµ10-100Ãë
    BYTE            bySensitivity;  // ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5] 
    BYTE            byRes[5];       // ±£Áô×Ö½Ú
}NET_VCA_TAKE, *LPNET_VCA_TAKE;

typedef struct tagNET_VCA_OVER_TIME
{
    NET_VCA_POLYGON     struRegion;    // ÇøÓò·¶Î§
    WORD               wDuration;  // ²Ù×÷±¨¾¯Ê±¼äãÐÖµ 4s-60000s
    BYTE   byRes[6];   // ±£Áô×Ö½Ú
}NET_VCA_OVER_TIME, *LPNET_VCA_OVER_TIME;

typedef struct tagNET_VCA_HUMAN_ENTER
{
    DWORD                dwRes[23];            //±£Áô×Ö½Ú
}NET_VCA_HUMAN_ENTER, *LPNET_VCA_HUMAN_ENTER;

//ÌùÖ½Ìõ²ÎÊý
typedef struct tagNET_VCA_STICK_UP
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    WORD wDuration; //´¥·¢Ê±¼äãÐÖµ£º4-60Ãë£¬½¨Òé10Ãë
    BYTE  bySensitivity;       //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5]
    BYTE byRes[5];
}NET_VCA_STICK_UP, *LPNET_VCA_STICK_UP; 

//¶Á¿¨Æ÷²ÎÊý
typedef struct tagNET_VCA_SCANNER
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    WORD wDuration; //¶Á¿¨³ÖÐøÊ±¼ä£º4-60Ãë
    BYTE bySensitivity;       //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5]
    BYTE byRes[5];
}NET_VCA_SCANNER, *LPNET_VCA_SCANNER; 

//Àë¸ÚÊÂ¼þ
typedef struct tagNET_VCA_LEAVE_POSITION
{
    NET_VCA_POLYGON   struRegion; //ÇøÓò·¶Î§
    WORD   wLeaveDelay;  //ÎÞÈË±¨¾¯Ê±¼ä£¬µ¥Î»£ºs£¬È¡Öµ1-1800
    WORD   wStaticDelay; //Ë¯¾õ±¨¾¯Ê±¼ä£¬µ¥Î»£ºs£¬È¡Öµ1-1800
    BYTE   byMode;       //Ä£Ê½£¬0-Àë¸ÚÊÂ¼þ£¬1-Ë¯¸ÚÊÂ¼þ£¬2-Àë¸ÚË¯¸ÚÊÂ¼þ
    BYTE   byPersonType; //Öµ¸ÚÈËÊýÀàÐÍ£¬0-µ¥ÈËÖµ¸Ú£¬1-Ë«ÈËÖµ¸Ú
    BYTE   byRes[2];     //±£Áô
}NET_VCA_LEAVE_POSITION, *LPNET_VCA_LEAVE_POSITION;

//Î²Ëæ²ÎÊý
typedef struct tagNET_VCA_TRAIL
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    WORD  wRes;      /* ±£Áô */
    BYTE  bySensitivity;       /* ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5] */
    BYTE  byRes[5];
}NET_VCA_TRAIL, *LPNET_VCA_TRAIL;

//µ¹µØ²ÎÊý
typedef struct tagNET_VCA_FALL_DOWN
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    WORD  wDuration;      /* ´¥·¢ÊÂ¼þãÐÖµ 1-60s*/
    BYTE  bySensitivity;       /* ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5] */
    BYTE  byHeightThreshold; //¸ß¶ÈãÐÖµ£¬·¶Î§[0,250]£¬Ä¬ÈÏ90£¬µ¥Î»£ºÀåÃ×
    BYTE  byRes[4];
}NET_VCA_FALL_DOWN, *LPNET_VCA_FALL_DOWN;

//ÆðÁ¢
typedef struct tagNET_VCA_STANDUP
{
    NET_VCA_POLYGON  struRegion; //ÇøÓò·¶Î§
    BYTE  bySensitivity;     //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,100]
    BYTE  byHeightThreshold; //¸ß¶ÈãÐÖµ£¬·¶Î§[0,250]£¬Ä¬ÈÏ130£¬µ¥Î»£ºÀåÃ×
    WORD  wDuration;         //´¥·¢ÊÂ¼þãÐÖµ[1,3600]£¬Ä¬ÈÏ2£¬µ¥Î»£ºÃë
    BYTE  byRes[4];          //±£Áô
}NET_VCA_STANDUP, *LPNET_VCA_STANDUP;


//ÈËÊý±ä»¯
typedef struct tagNET_VCA_PEOPLENUM_CHANGE
{
    NET_VCA_POLYGON  struRegion; //ÇøÓò·¶Î§
    BYTE  bySensitivity;  //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,100]
    BYTE  byPeopleNumThreshold; //ÈËÊýãÐÖµ£¬·¶Î§[0,5]£¬Ä¬ÈÏ1 
    BYTE  byDetectMode; //¼ì²â·½Ê½£¬ÓëÈËÊýãÐÖµÏà±È½Ï¡£1-´óÓÚ£¬2-Ð¡ÓÚ£¬3-µÈÓÚ£¬4-²»µÈÓÚ
    BYTE  byNoneStateEffective; //ÎÞÈË×´Ì¬ÊÇ·ñÓÐÐ§£¬0-ÎÞÐ§£¬1-ÓÐÐ§
    WORD  wDuration;  //´¥·¢Ê±¼äãÐÖµ[1,3600]£¬Ä¬ÈÏ2£¬µ¥Î»£ºÃë
    BYTE  byRes[2];   //±£Áô
}NET_VCA_PEOPLENUM_CHANGE, *LPNET_VCA_PEOPLENUM_CHANGE;

//¼ä¾à±ä»¯
typedef struct tagNET_VCA_SPACING_CHANGE
{
    NET_VCA_POLYGON  struRegion; //ÇøÓò·¶Î§
    float fSpacingThreshold; //¼ä¾àãÐÖµ£¬·¶Î§[0,10.0]£¬Ä¬ÈÏ1.0£¬µ¥Î»£ºÃ×
    BYTE  bySensitivity;  //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,100]
    BYTE  byDetectMode; //¼ì²â·½Ê½£¬Óë¼ä¾àãÐÖµÏà±È½Ï¡£1-´óÓÚ£¬2-Ð¡ÓÚ
    WORD  wDuration;  //´¥·¢Ê±¼äãÐÖµ[1,3600]£¬Ä¬ÈÏ2£¬µ¥Î»£ºÃë
}NET_VCA_SPACING_CHANGE, *LPNET_VCA_SPACING_CHANGE;


//ÉùÇ¿Í»±ä²ÎÊý
typedef struct tagNET_VCA_AUDIO_ABNORMAL
{
    WORD wDecibel;       //ÉùÒôÇ¿¶È
    BYTE bySensitivity;  //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,100] 
    BYTE byAudioMode;    //ÉùÒô¼ì²âÄ£Ê½£¬0-ÁéÃô¶È¼ì²â£¬1-·Ö±´ãÐÖµ¼ì²â£¬2-ÁéÃô¶ÈÓë·Ö±´ãÐÖµ¼ì²â 
    BYTE byEnable;       //Ê¹ÄÜ£¬ÊÇ·ñ¿ªÆô(ÉùÇ¿Í»±ä£¬¶¸Éý)
    BYTE byThreshold;    //ÉùÒôãÐÖµ[1,100]
    BYTE byRes[54];      //±£Áô   
}NET_VCA_AUDIO_ABNORMAL, *LPNET_VCA_AUDIO_ABNORMAL;

//ÉùÇ¿¶¸½µ 2014-03-21
typedef struct tagNET_DVR_AUDIO_STEEP_DROP
{
    BYTE  bySensitivity;   /* ÁéÃô¶È²ÎÊý£¬·¶Î§[1,100] */
    BYTE  byEnable;        //Ê¹ÄÜ£¬ÊÇ·ñ¿ªÆô(ÉùÇ¿Í»±ä£¬¶¸½µ)
    BYTE  byRes[6];    
}NET_DVR_AUDIO_STEEP_DROP, *LPNET_DVR_AUDIO_STEEP_DROP;


typedef struct tagNET_DVR_AUDIO_EXCEPTION
{
    DWORD                       dwSize;
    BYTE                        byEnableAudioInException;//Ê¹ÄÜ£¬ÊÇ·ñ¿ªÆô
    BYTE                        byRes1[3];
    NET_VCA_AUDIO_ABNORMAL      struAudioAbnormal;  
    NET_DVR_SCHEDTIME            struAlarmSched[MAX_DAYS][MAX_TIMESEGMENT_V30]; //²¼·ÀÊ±¼ä
    NET_DVR_HANDLEEXCEPTION_V40 struHandleException;     //Òì³£´¦Àí·½Ê½
    DWORD                       dwMaxRelRecordChanNum ;  //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD                       dwRelRecordChanNum ;     //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý Êµ¼ÊÖ§³ÖµÄÊýÁ¿
    DWORD                       byRelRecordChan[MAX_CHANNUM_V30];
    NET_DVR_AUDIO_STEEP_DROP    struAudioSteepDrop;      //ÉùÇ¿¶¸½µ
    BYTE                        byRes2[24];
}NET_DVR_AUDIO_EXCEPTION, *LPNET_DVR_AUDIO_EXCEPTION;

typedef struct tagNET_VCA_TOILET_TARRY
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    WORD wDelay;        //Èç²Þ³¬Ê±Ê±¼ä[1,3600]£¬µ¥Î»£ºÃë
    BYTE byRes[6];    
}NET_VCA_TOILET_TARRY, *LPNET_VCA_TOILET_TARRY;

typedef struct tagNET_VCA_YARD_TARRY
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    WORD wDelay;        //·Å·ç³¡ÖÍÁôÊ±¼ä[1,120]£¬µ¥Î»£ºÃë
    BYTE byRes[6];    
}NET_VCA_YARD_TARRY, *LPNET_VCA_YARD_TARRY;

typedef struct tagNET_VCA_ADV_REACH_HEIGHT
{
    NET_VCA_POLYGON struRegion; //ÅÊ¸ßÕÛÏß
    DWORD   dwCrossDirection;   //¿çÔ½·½Ïò(Ïê¼ûVCA_CROSS_DIRECTION): 0-Ë«Ïò£¬1-´Ó×óµ½ÓÒ2-´ÓÓÒµ½×ó
    BYTE    byRes[4];            // ±£Áô×Ö½Ú
}NET_VCA_ADV_REACH_HEIGHT, * LPNET_VCA_ADV_REACH_HEIGHT;

typedef struct tagNET_VCA_ADV_TRAVERSE_PLANE
{
    NET_VCA_POLYGON struRegion; //¾¯½äÃæÕÛÏß
    DWORD   dwCrossDirection;   //¿çÔ½·½Ïò(Ïê¼ûVCA_CROSS_DIRECTION): 0-Ë«Ïò£¬1-´Ó×óµ½ÓÒ2-´ÓÓÒµ½×ó
    BYTE    bySensitivity;      //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5] 
    BYTE    byRes[3];            //±£Áô×Ö½Ú
} NET_VCA_ADV_TRAVERSE_PLANE,*LPNET_VCA_ADV_TRAVERSE_PLANE;

typedef struct tagNET_VCA_LECTURE
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    WORD wDuration; //ÐÐÎªÊÂ¼þ´¥·¢Ê±¼äãÐÖµ: 1-10Ãë£¬½¨Òé1Ãë£¬ÅÐ¶ÏÊÇÓÐÐ§±¨¾¯µÄÊ±¼ä
    BYTE bySensitivity; //ÁéÃô¶È²ÎÊý£¬·¶Î§[1-100]
    BYTE byAlarmState;//Ö»¶Á×Ö¶Î½çÃæ²»ÏÔÊ¾£»0-±£Áô,1-±¨¾¯¿ªÊ¼,2-±¨¾¯½áÊø 
    BYTE byTrackingMode ;//¸ú×ÙÄ£Ê½£¬0-×Ô¶¯(Ä¬ÈÏ) , 1-Ë®Æ½, 2-´¹Ö±
    BYTE byZoomMode;//±ä±¶Ä£Ê½, 0-¹Ì¶¨(Ä¬ÈÏ), 1-×Ô¶¯
    BYTE byZoomOver;//0-±£Áô,1-±ä±¶µ½Î»(±¨¾¯ÉÏ´«Â¼²¥Ö÷»ú£¬×÷ÎªÇÐ»»»­ÃæÅÐ¶ÏÒÀ¾Ý)
    BYTE byRes;
}NET_VCA_LECTURE, *LPNET_VCA_LECTURE;

typedef struct tagNET_VCA_ANSWER
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE bySensitivity;//ÁéÃô¶È²ÎÊý£¬·¶Î§[1-100]
    BYTE byAlarmState;//Ö»¶Á×Ö¶Î½çÃæ²»ÏÔÊ¾£»0-±£Áô,1-±¨¾¯¿ªÊ¼,2-±¨¾¯½áÊø
    BYTE byZoomOver;//0-±£Áô,1-±ä±¶µ½Î»(±¨¾¯ÉÏ´«Â¼²¥Ö÷»ú£¬×÷ÎªÇÐ»»»­ÃæÅÐ¶ÏÒÀ¾Ý)
    BYTE byRes[5];             //±£Áô
}NET_VCA_ANSWER, *LPNET_VCA_ANSWER;

//¹ØÁª¹æÔò½á¹¹Ìå
typedef struct tagNET_VCA_RELATE_RULE_PARAM
{   
    BYTE  byRuleID;  //¹æÔòÐòºÅ 0-±íÊ¾ÎÞ
    BYTE  byRes;  //±£Áô
    WORD  wEventType;        //ÐÐÎªÊÂ¼þÀàÐÍ£¬²Î¿¼VCA_RULE_EVENT_TYPE_EXÁô
}NET_VCA_RELATE_RULE_PARAM,*LPNET_VCA_RELATE_RULE_PARAM;

typedef struct tagNET_VCA_COMBINED_RULE_
{
    //¹æÔò´¥·¢Ë³Ðò£¬0-Ë³Ðò»òÄæÐò´¥·¢£¬1-Ë³Ðò´¥·¢
    BYTE    byRuleSequence; 
    BYTE    byRes[7];
    DWORD  dwMinInterval;    //×îÐ¡Ê±¼ä¼ä¸ô£¬µ¥Î»£ºÃë
    DWORD  dwMaxInterval;  //×î´óÊ±¼ä¼ä¸ô£¬µ¥Î»£ºÃë
    NET_VCA_RELATE_RULE_PARAM  struRule1Raram;//¹æÔò1
    NET_VCA_RELATE_RULE_PARAM  struRule2Raram;//¹æÔò2
    BYTE    byRes1[36];
} NET_VCA_COMBINED_RULE, *LPNET_VCA_COMBINED_RULE;

//ÈËÔ±¾Û¼¯×´Ì¬
typedef struct tagNET_VCA_HIGH_DENSITY_STATUS
{
    NET_VCA_POLYGON struRegion;        //ÇøÓò·¶Î§
    float           fDensity;       //¾Û¼¯±ÈÂÊ, ·¶Î§: [0.1, 1.0]
    BYTE            bySensitivity;    //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,5]
    BYTE            byRes[3];          // ±£Áô×Ö½Ú
}NET_VCA_HIGH_DENSITY_STATUS, *LPNET_VCA_HIGH_DENSITY_STATUS; 


//¾¯½äÊÂ¼þ²ÎÊý
typedef union tagNET_VCA_EVENT_UNION
{
    DWORD                      uLen[23];            //²ÎÊý
    NET_VCA_TRAVERSE_PLANE     struTraversePlane;   //´©Ô½¾¯½äÃæ²ÎÊý 
    NET_VCA_AREA               struArea;            //½øÈë/Àë¿ªÇøÓò²ÎÊý
    NET_VCA_INTRUSION          struIntrusion;       //ÈëÇÖ²ÎÊý
    NET_VCA_LOITER             struLoiter;          //ÅÇ»²²ÎÊý
    NET_VCA_TAKE_LEFT          struTakeTeft;        //ÎïÆ·ÒÅÁô/ÎïÆ·ÄÃÈ¡²ÎÊý
    NET_VCA_PARKING            struParking;            //Í£³µ²ÎÊý
    NET_VCA_RUN                struRun;                //¿ìËÙÒÆ¶¯²ÎÊý
    NET_VCA_HIGH_DENSITY       struHighDensity;        //ÈËÔ±¾Û¼¯²ÎÊý  
    NET_VCA_VIOLENT_MOTION     struViolentMotion;    //¾çÁÒÔË¶¯
    NET_VCA_REACH_HIGHT           struReachHight;      //ÅÊ¸ß
    NET_VCA_GET_UP               struGetUp;           //Æð´²
    NET_VCA_LEFT               struLeft;            //ÎïÆ·ÒÅÁô
    NET_VCA_TAKE               struTake;            // ÎïÆ·ÄÃÈ¡
    NET_VCA_HUMAN_ENTER        struHumanEnter;      //ÈËÔ±½øÈë
    NET_VCA_OVER_TIME          struOvertime;        //²Ù×÷³¬Ê±
    NET_VCA_STICK_UP            struStickUp;            //ÌùÖ½Ìõ
    NET_VCA_SCANNER            struScanner;            //¶Á¿¨Æ÷²ÎÊý     
    NET_VCA_LEAVE_POSITION     struLeavePos;        //Àë¸Ú²ÎÊý
    NET_VCA_TRAIL              struTrail;           //Î²Ëæ²ÎÊý
    NET_VCA_FALL_DOWN          struFallDown;        //µ¹µØ²ÎÊý
    NET_VCA_AUDIO_ABNORMAL     struAudioAbnormal;   //ÉùÇ¿Í»±ä
    NET_VCA_ADV_REACH_HEIGHT   struReachHeight;     //ÕÛÏßÅÊ¸ß²ÎÊý
    NET_VCA_TOILET_TARRY       struToiletTarry;     //Èç²Þ³¬Ê±²ÎÊý
    NET_VCA_YARD_TARRY         struYardTarry;       //·Å·ç³¡ÖÍÁô²ÎÊý
    NET_VCA_ADV_TRAVERSE_PLANE struAdvTraversePlane;//ÕÛÏß¾¯½äÃæ²ÎÊý
    NET_VCA_LECTURE            struLecture;            //ÊÚ¿ÎÊÂ¼þ
    NET_VCA_ANSWER             struAnswer;            //»Ø´ðÎÊÌâÊÂ¼þ
    NET_VCA_STANDUP               struStandUp;         //ÆðÁ¢²ÎÊý
    NET_VCA_PEOPLENUM_CHANGE   struPeopleNumChange; //ÈËÊý±ä»¯²ÎÊý
    NET_VCA_SPACING_CHANGE     struSpacingChange;   //¼ä¾à±ä»¯²ÎÊý
    NET_VCA_COMBINED_RULE      struCombinedRule;    //×éºÏ¹æÔò²ÎÊý
    NET_VCA_SIT_QUIETLY        struSitQuietly;      //¾²×ø²ÎÊý
    NET_VCA_HIGH_DENSITY_STATUS       struHighDensityStatus;        //ÈËÔ±¾Û¼¯×´Ì¬ 
}NET_VCA_EVENT_UNION, *LPNET_VCA_EVENT_UNION;

// ³ß´ç¹ýÂËÆ÷ÀàÐÍ
typedef enum _VCA_SIZE_FILTER_MODE_
{
    IMAGE_PIX_MODE, //¸ù¾ÝÏñËØ´óÐ¡ÉèÖÃ
        REAL_WORLD_MODE, //¸ù¾ÝÊµ¼Ê´óÐ¡ÉèÖÃ
        DEFAULT_MODE     // Ä¬ÈÏÄ£Ê½
}SIZE_FILTER_MODE;
//³ß´ç¹ýÂËÆ÷
typedef struct tagNET_VCA_SIZE_FILTER
{
    BYTE    byActive;            //ÊÇ·ñ¼¤»î³ß´ç¹ýÂËÆ÷ 0-·ñ ·Ç0-ÊÇ
    BYTE    byMode;         //¹ýÂËÆ÷Ä£Ê½SIZE_FILTER_MODE
    BYTE    byRes[2];        //±£Áô£¬ÖÃ0
    NET_VCA_RECT struMiniRect;    //×îÐ¡Ä¿±ê¿ò,È«0±íÊ¾²»ÉèÖÃ
    NET_VCA_RECT struMaxRect;      //×î´óÄ¿±ê¿ò,È«0±íÊ¾²»ÉèÖÃ
}NET_VCA_SIZE_FILTER, *LPNET_VCA_SIZE_FILTER;

//¾¯½ä¹æÔò½á¹¹
typedef struct tagNET_VCA_ONE_RULE
{
    BYTE   byActive;                    //ÊÇ·ñ¼¤»î¹æÔò,0-·ñ,·Ç0-ÊÇ
    BYTE   byRes[7];                     //±£Áô£¬ÉèÖÃÎª0×Ö¶Î
    BYTE   byRuleName[NAME_LEN];        //¹æÔòÃû³Æ
    VCA_EVENT_TYPE dwEventType;            //ÐÐÎª·ÖÎöÊÂ¼þÀàÐÍ
    NET_VCA_EVENT_UNION uEventParam;    //ÐÐÎª·ÖÎöÊÂ¼þ²ÎÊý
    NET_VCA_SIZE_FILTER  struSizeFilter;  //³ß´ç¹ýÂËÆ÷
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_2];//²¼·ÀÊ±¼ä
    NET_DVR_HANDLEEXCEPTION_V30 struHandleType;      //´¦Àí·½Ê½ 
    BYTE byRelRecordChan[MAX_CHANNUM_V30];            //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
}NET_VCA_ONE_RULE, *LPNET_VCA_ONE_RULE;

//ÐÐÎª·ÖÎöÅäÖÃ½á¹¹Ìå
typedef struct tagNET_VCA_RULECFG
{
    DWORD  dwSize;            //½á¹¹³¤¶È
    BYTE   byPicProType;    //±¨¾¯Ê±Í¼Æ¬´¦Àí·½Ê½ 0-²»´¦Àí ·Ç0-ÉÏ´«
    BYTE   byUpLastAlarm; //2011-04-06 ÊÇ·ñÏÈÉÏ´«×î½üÒ»´ÎµÄ±¨¾¯
    BYTE   byPicRecordEnable;  /*2012-3-1ÊÇ·ñÆôÓÃÍ¼Æ¬´æ´¢, 0-²»ÆôÓÃ, 1-ÆôÓÃ*/
    BYTE   byRes;
    NET_DVR_JPEGPARA  struPictureParam;         //Í¼Æ¬¹æ¸ñ½á¹¹
    NET_VCA_ONE_RULE  struRule[MAX_RULE_NUM];  //¹æÔòÊý×é
}NET_VCA_RULECFG, *LPNET_VCA_RULECFG;

//Ç°¶ËÉè±¸µØÖ·ÐÅÏ¢£¬ÖÇÄÜ·ÖÎöÒÇ±íÊ¾µÄÊÇÇ°¶ËÉè±¸µÄµØÖ·ÐÅÏ¢£¬ÆäËûÉè±¸±íÊ¾±¾»úµÄµØÖ·
/*
µ±½ÓÈëÉè±¸Ä£ÄâÍ¨µÀ(IPC/DVR/DVS/IVMS)±¨¾¯µÄÊ±ºò£¬ÏÂÃæ×Ö¶ÎÌîÐ´Éè±¸µÄIPµØÖ·£¬¶Ë¿Ú£¬byChannelºÍbyIvmsChannel ¾ùÎªµ±Ç°µÄÄ£ÄâÍ¨µÀºÅ
eg:
struDevIP =  Ä£ÄâÍ¨µÀ¶ÔÓ¦Éè±¸µÄIPµØÖ·
wPort  =  Ä£ÄâÍ¨µÀ¶ÔÓ¦Éè±¸µÄ¶Ë¿Ú
byChannel =  ±¨¾¯¶ÔÓ¦Ä£ÄâÍ¨µÀµÄÍ¨µÀºÅ
byIvmsChannel = ±¨¾¯¶ÔÓ¦Ä£ÄâÍ¨µÀµÄÍ¨µÀºÅ

  µ±½ÓÈëÉè±¸Êý×ÖÍ¨µÀ(DVR/DVS/IVMS)±¨¾¯µÄÊ±ºò£¬ÏÂÃæ×Ö¶ÎÌîÐ´Êý×ÖÍ¨µÀ½ÓÈëÉè±¸µÄIPµØÖ·£¬¶Ë¿Ú£¬byChannelÎªÊý×ÖÍ¨µÀ½ÓÈëÉè±¸µÄÍ¨µÀºÅ£¬byIvmsChannelÎªÊý×ÖÍ¨µÀºÅ
  eg:
  struDevIP =  Êý×ÖÍ¨µÀ½ÓÈëÉè±¸µÄIPµØÖ·
  wPort  =  Êý×ÖÍ¨µÀ½ÓÈëÉè±¸µÄ¶Ë¿Ú
  byChannel =  Êý×ÖÍ¨µÀ½ÓÈëÉè±¸µÄÍ¨µÀºÅ
  byIvmsChannel = Êý×ÖÍ¨µÀºÅ    
*/
typedef struct tagNET_VCA_DEV_INFO
{
    NET_DVR_IPADDR  struDevIP; //Ç°¶ËÉè±¸µØÖ·£¬ 
    WORD wPort;             //Ç°¶ËÉè±¸¶Ë¿ÚºÅ£¬ 
    BYTE byChannel;          //Ç°¶ËÉè±¸Í¨µÀ£¬ 
    BYTE byIvmsChannel;        // Ivms Í¨µÀ 
}NET_VCA_DEV_INFO, *LPNET_VCA_DEV_INFO;

typedef struct tagNET_DVR_TARGET_LEFT_REGION_ALARM
{
    DWORD     dwSize; //½á¹¹´óÐ¡
    DWORD     dwRelativeTime; //Ïà¶ÔÊ±±ê
    DWORD        dwAbsTime; //¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO  struDevInfo;   //Ç°¶ËÉè±¸ÐÅÏ¢
    BYTE     byTargetType;//¼ì²âÄ¿±êÀàÐÍ 0-ÎÞÐ§Ä¿±ê£¬1-½ÌÊ¦    
    BYTE     byLeftDirection;//¼ì²âÄ¿±êÀë¿ª·½ÏòÀàÐÍ0-±£Áô,1-ÉÏ,2-ÏÂ,3-×ó,4-ÓÒ
    BYTE     byRes[126];
}NET_DVR_TARGET_LEFT_REGION_ALARM,*LPNET_DVR_TARGET_LEFT_REGION_ALARM;

//³ß´ç¹ýÂË²ßÂÔ
typedef struct tagNET_VCA_FILTER_STRATEGY
{
    BYTE    byStrategy;      //³ß´ç¹ýÂË²ßÂÔ 0 - ²»ÆôÓÃ 1-¸ß¶ÈºÍ¿í¶È¹ýÂË,2-Ãæ»ý¹ýÂË
    BYTE    byRes[11];       //±£Áô
}NET_VCA_FILTER_STRATEGY,*LPNET_VCA_FILTER_STRATEGY;

//¹æÔò´¥·¢²ÎÊý
typedef struct tagNET_VCA_RULE_TRIGGER_PARAM
{
    BYTE   byTriggerMode;   //¹æÔòµÄ´¥·¢·½Ê½£¬0- ²»ÆôÓÃ£¬1- ¹ì¼£µã 2- Ä¿±êÃæ»ý 
    BYTE   byTriggerPoint;  //´¥·¢µã£¬´¥·¢·½Ê½Îª¹ì¼£µãÊ±ÓÐÐ§ 0- ÖÐ,1-ÉÏ,2-ÏÂ
    BYTE   byRes1[2];       //±£Áô
    float  fTriggerArea;    //´¥·¢Ä¿±êÃæ»ý°Ù·Ö±È [0,100]£¬´¥·¢·½Ê½ÎªÄ¿±êÃæ»ýÊ±ÓÐÐ§
    BYTE   byRes2[4];       //±£Áô
}NET_VCA_RULE_TRIGGER_PARAM,*LPNET_VCA_RULE_TRIGGER_PARAM;

//¾¯½ä¹æÔò½á¹¹
typedef struct tagNET_VCA_ONE_RULE_V41
{
    BYTE   byActive; //ÊÇ·ñ¼¤»î¹æÔò,0-·ñ,·Ç0-ÊÇ
    BYTE   byRes1[4];  //±£Áô£¬ÉèÖÃÎª0×Ö¶Î
    BYTE   byEventTypeFlag;  //±êÖ¾ÐÐÎªÊÂ¼þÀàÐÍ×Ö¶ÎµÄÓÐÐ§ÐÔ£¬0-dwEventTypeÓÐÐ§£¬1-wEventTypeExÓÐÐ§
    //×¢£º´Ë×Ö¶ÎbyEventTypeFlagÖ»ÔÚÉèÖÃ²ÎÊýÊ±ÓÐÐ§£¬´ÓÉè±¸»ñÈ¡²ÎÊýÊ±£¬¿ÉÖ±½Ó´ÓwEventTypeEx»ñÈ¡ÊÂ¼þÀàÐÍ£¬ÎÞÐèÅÐ¶Ï´Ë×Ö¶ÎµÄÖµ
    WORD   wEventTypeEx; //ÐÐÎªÊÂ¼þÀàÐÍÀ©Õ¹£¬ÓÃÓÚ´úÌæ×Ö¶ÎdwEventType£¬²Î¿¼VCA_RULE_EVENT_TYPE_EX
    BYTE   byRuleName[NAME_LEN]; //¹æÔòÃû³Æ
    VCA_EVENT_TYPE dwEventType;    //ÐÐÎªÊÂ¼þÀàÐÍ£¬±£ÁôÊÇÎªÁË¼æÈÝ£¬ºóÐø½¨ÒéÊ¹ÓÃwEventTypeEx»ñÈ¡ÊÂ¼þÀàÐÍ
    NET_VCA_EVENT_UNION uEventParam; //ÐÐÎª·ÖÎöÊÂ¼þ²ÎÊý
    NET_VCA_SIZE_FILTER  struSizeFilter;  //³ß´ç¹ýÂËÆ÷
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//²¼·ÀÊ±¼ä
    NET_DVR_HANDLEEXCEPTION_V30 struHandleType;    //´¦Àí·½Ê½ 
    BYTE   byRelRecordChan[MAX_CHANNUM_V30]; //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
    WORD   wAlarmDelay; //ÖÇÄÜ±¨¾¯ÑÓÊ±£¬0-5s,1-10,2-30s,3-60s,4-120s,5-300s,6-600s
    BYTE   byRes2[2]; //±£Áô
    NET_VCA_FILTER_STRATEGY     struFilterStrategy; //³ß´ç¹ýÂË²ßÂÔ
    NET_VCA_RULE_TRIGGER_PARAM  struTriggerParam;   //¹æÔò´¥·¢²ÎÊý
    BYTE   byRes[32];
}NET_VCA_ONE_RULE_V41, *LPNET_VCA_ONE_RULE_V41;

//ÐÐÎª·ÖÎöÅäÖÃ½á¹¹Ìå
typedef struct tagNET_VCA_RULECFG_V41
{
    DWORD  dwSize;            //½á¹¹³¤¶È
    BYTE    byPicProType;    //±¨¾¯Ê±Í¼Æ¬´¦Àí·½Ê½ 0-²»´¦Àí ·Ç0-ÉÏ´«
    BYTE    byUpLastAlarm; //2011-04-06 ÊÇ·ñÏÈÉÏ´«×î½üÒ»´ÎµÄ±¨¾¯
    BYTE    byPicRecordEnable;  /*2012-3-1ÊÇ·ñÆôÓÃÍ¼Æ¬´æ´¢, 0-²»ÆôÓÃ, 1-ÆôÓÃ*/
    BYTE    byRes1;
    NET_DVR_JPEGPARA struPictureParam;         //Í¼Æ¬¹æ¸ñ½á¹¹
    NET_VCA_ONE_RULE_V41  struRule[MAX_RULE_NUM];  //¹æÔòÊý×é
    WORD   wRelSnapChan[MAX_REL_SNAPCHAN_NUM]; //¹ØÁª×¥Í¼Í¨µÀ£¬µ±Ö÷Í¨µÀ±¨¾¯Ê±£¬Í¬Ê±»áÉÏ´«¹ØÁªÍ¨µÀµÄ×¥ÅÄÍ¼Æ¬£¬0±íÊ¾²»¹ØÁª£¬ÆäËûÖµÎª¹ØÁªÍ¨µÀºÅ
    BYTE   byRes[26];
}NET_VCA_RULECFG_V41, *LPNET_VCA_RULECFG_V41;

//¾¯½ä¹æÔò½á¹¹
typedef struct NET_VCA_ONE_RULE_V42_  
{
    BYTE           byActive;       //ÊÇ·ñ¼¤»î¹æÔò, 0-·ñ£¬·Ç0-ÊÇ
    BYTE        byEventPriority;//ÊÂ¼þÓÅÏÈ¼¶ 0-µÍ£¬1-ÖÐ£¬2-¸ß
    BYTE           byRes1[4];           //±£Áô£¬ÉèÖÃÎª0×Ö¶Î
    WORD          wEventType;        //ÐÐÎªÊÂ¼þÀàÐÍ£¬²Î¿¼VCA_RULE_EVENT_TYPE_EX
    BYTE        byRuleName[NAME_LEN/*32*/];        //¹æÔòÃû³Æ
    NET_VCA_EVENT_UNION  uEventParam;            //ÐÐÎª·ÖÎöÊÂ¼þ²ÎÊý
    NET_VCA_SIZE_FILTER  struSizeFilter;          //³ß´ç¹ýÂËÆ÷
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//²¼·ÀÊ±¼ä
    NET_DVR_HANDLEEXCEPTION_V40  struAlarmHandleType; /*´¦Àí·½Ê½*/
    //Òì³£´¦Àí·½Ê½ÖÐ±¨¾¯Êä³öºÅÓë×éºÅ°ó¶¨£¬¼´×éºÅÎª0Ê±£¬±íÊ¾¹ØÁªµÄ±¨¾¯Êä³öºÅ·¶Î§Îª1-64£¬µ±×éºÅÎª1Ê±£¬±íÊ¾¹ØÁªµÄ±¨¾¯Êä³öºÅ·¶Î§Îª65-128£¬ ÇÒÊÇ×éÄÚ½ô´ÕÅÅÁÐ£¬Èç¹ûÓöµ½0xffffffff±íÊ¾±¾×é µ±Ç°µÄ¼°×éÄÚºóÐøµÄ±¨¾¯³öºÅÎÞÐ§
    DWORD       dwRelRecordChan[MAX_CHANNUM_V30];    /* ±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ£¨ËÄ×Ö½ÚµÄÍ¨µÀºÅ£¬³õÊ¼ÖµÊÇ 0xffffffff£©*/
    //¹ØÁªµÄÂ¼ÏñÍ¨µÀºÅÓë×éºÅ°ó¶¨£¬¼´×éºÅÎª0Ê±£¬±íÊ¾¹ØÁªµÄÍ¨µÀºÅ·¶Î§Îª1-64£¬µ±×éºÅÎª1Ê±£¬±íÊ¾¹ØÁªµÄÍ¨µÀºÅ·¶Î§Îª65-128£¬ ÇÒÊÇ×éÄÚ½ô´ÕÅÅÁÐ£¬Èç¹ûÓöµ½0xffffffff±íÊ¾±¾×é µ±Ç°µÄ¼°×éÄÚºóÐøµÄ¹ØÁªÍ¨µÀºÅÎÞÐ§
    WORD          wAlarmDelay; //ÖÇÄÜ±¨¾¯ÑÓÊ±£¬0-5s,1-10,2-30s,3-60s,4-120s,5-300s,6-600s
    BYTE           byRes2[2];           //±£Áô
    NET_VCA_FILTER_STRATEGY     struFilterStrategy;  //³ß´ç¹ýÂË²ßÂÔ
    NET_VCA_RULE_TRIGGER_PARAM     struTriggerParam; //¹æÔò´¥·¢²ÎÊý
    BYTE byRes[32];
}NET_VCA_ONE_RULE_V42, *LPNET_VCA_ONE_RULE_V42;


typedef struct    tagNET_DVR_PTZ_POSITION
{
    // ÊÇ·ñÆôÓÃ³¡¾°£¬ÔÚÉèÖÃ³¡¾°ÐÐÎª¹æÔòµÄÊ±ºò¸Ã×Ö¶ÎÎÞÐ§£¬ÔÚÉèÖÃÇò»ú±¾µØÅäÖÃ³¡¾°Î»ÖÃÐÅÏ¢Ê±×÷ÎªÊ¹ÄÜÎ»
    BYTE byEnable;
    BYTE byRes1[3];  //±£Áô
    BYTE byPtzPositionName[NAME_LEN]; //³¡¾°Î»ÖÃÃû³Æ
    NET_DVR_PTZPOS struPtzPos; //ptz ×ø±ê
    BYTE byRes2[40];
}NET_DVR_PTZ_POSITION, *LPNET_DVR_PTZ_POSITION;

//ÐÐÎª·ÖÎöÅäÖÃ½á¹¹Ìå
typedef struct tagNET_VCA_RULECFG_V42
{
    DWORD            dwSize;             //½á¹¹Í¼´óÐ¡
    BYTE                byPicProType;            //±¨¾¯Ê±Í¼Æ¬´¦Àí·½Ê½ 0-²»´¦Àí 1-ÉÏ´«
    BYTE            byUpLastAlarm;         //ÊÇ·ñÏÈÉÏ´«×î½üÒ»´ÎµÄ±¨¾¯£¬0-·ñ£¬1-ÊÇ
    BYTE             byPicRecordEnable;   //ÊÇ·ñÆôÓÃÍ¼Æ¬´æ´¢, 0-²»ÆôÓÃ, 1-ÆôÓÃ
    BYTE            byRes1;
    NET_DVR_JPEGPARA     struPicParam;         //Í¼Æ¬¹æ¸ñ½á¹¹
    NET_VCA_ONE_RULE_V42  struRule[MAX_RULE_NUM_V42 /*16*/];       /* ¹æÔòÊý×é*/
    WORD            wRelSnapChan[MAX_REL_SNAPCHAN_NUM]; //¹ØÁª×¥Í¼Í¨µÀ£¬µ±Ö÷Í¨µÀ±¨¾¯Ê±£¬Í¬Ê±»áÉÏ´«¹ØÁªÍ¨µÀµÄ×¥ÅÄÍ¼Æ¬£¬0±íÊ¾²»¹ØÁª£¬ÆäËûÖµÎª¹ØÁªÍ¨µÀºÅ
    BYTE            byTrackEnable; //ÊÇ·ñÆôÓÃ¸ú×Ù
    BYTE            byRes2;
    NET_DVR_PTZ_POSITION  struPTZPosition;  //³¡¾°Î»ÖÃÐÅÏ¢
    WORD            wTrackDuration; //¸ú×Ù³ÖÐøÊ±¼ä£¬µ¥Î»s
    BYTE            byRes[62];//±£Áô
}NET_VCA_RULECFG_V42, *LPNET_VCA_RULECFG_V42;


//¼ò»¯Ä¿±ê½á¹¹Ìå
typedef struct tagNET_VCA_TARGET_INFO
{
    DWORD    dwID;                //Ä¿±êID ,ÈËÔ±¾Û¼¯¹ý¸ß±¨¾¯Ê±Îª0
    NET_VCA_RECT struRect;      //Ä¿±ê±ß½ç¿ò 
    BYTE      byRes[4];            //±£Áô
}NET_VCA_TARGET_INFO, *LPNET_VCA_TARGET_INFO;

//¼ò»¯µÄ¹æÔòÐÅÏ¢, °üº¬¹æÔòµÄ»ù±¾ÐÅÏ¢
typedef struct tagNET_VCA_RULE_INFO
{
    BYTE   byRuleID;                //¹æÔòID,0-7
    BYTE   byRes;                //±£Áô
    WORD   wEventTypeEx;            //ÐÐÎªÊÂ¼þÀàÐÍÀ©Õ¹£¬ÓÃÓÚ´úÌæ×Ö¶ÎdwEventType£¬²Î¿¼VCA_RULE_EVENT_TYPE_EX
    BYTE   byRuleName[NAME_LEN];    //¹æÔòÃû³Æ
    VCA_EVENT_TYPE  dwEventType;    //ÐÐÎªÊÂ¼þÀàÐÍ£¬±£ÁôÊÇÎªÁË¼æÈÝ£¬ºóÐø½¨ÒéÊ¹wEventTypeEx»ñÈ¡ÊÂ¼þÀàÐÍ
    NET_VCA_EVENT_UNION uEventParam;//ÊÂ¼þ²ÎÊý
}NET_VCA_RULE_INFO, *LPNET_VCA_RULE_INFO;

//ÐÐÎª·ÖÎö½á¹ûÉÏ±¨½á¹¹
typedef struct  tagNET_VCA_RULE_ALARM
{
    DWORD    dwSize;                        //½á¹¹³¤¶È
    DWORD    dwRelativeTime;                //Ïà¶ÔÊ±±ê
    DWORD    dwAbsTime;                        //¾ø¶ÔÊ±±ê
    NET_VCA_RULE_INFO     struRuleInfo;        //ÊÂ¼þ¹æÔòÐÅÏ¢
    NET_VCA_TARGET_INFO  struTargetInfo;    //±¨¾¯Ä¿±êÐÅÏ¢
    NET_VCA_DEV_INFO       struDevInfo;        //Ç°¶ËÉè±¸ÐÅÏ¢
    DWORD dwPicDataLen;                        //·µ»ØÍ¼Æ¬µÄ³¤¶È Îª0±íÊ¾Ã»ÓÐÍ¼Æ¬£¬´óÓÚ0±íÊ¾¸Ã½á¹¹ºóÃæ½ô¸úÍ¼Æ¬Êý¾Ý*/
    BYTE       byPicType;        //  0-ÆÕÍ¨Í¼Æ¬ 1-¶Ô±ÈÍ¼Æ¬
    BYTE       byRelAlarmPicNum; //¹ØÁªÍ¨µÀ±¨¾¯Í¼Æ¬ÊýÁ¿
    BYTE       bySmart;//IDSÉè±¸·µ»Ø0(Ä¬ÈÏÖµ)£¬Smart Functiom Return 1
    BYTE       byRes;        // ±£Áô×Ö½Ú
    DWORD      dwAlarmID;     //±¨¾¯ID£¬ÓÃÒÔ±êÊ¶Í¨µÀ¼ä¹ØÁª²úÉúµÄ×éºÏ±¨¾¯£¬0±íÊ¾ÎÞÐ§
    BYTE       byRes2[8];        //±£Áô
    BYTE       *pImage;       //Ö¸ÏòÍ¼Æ¬µÄÖ¸Õë
}NET_VCA_RULE_ALARM, *LPNET_VCA_RULE_ALARM;

//ÐÐÎª·ÖÎö¹æÔòDSPÐÅÏ¢µþ¼Ó½á¹¹
typedef struct tagNET_VCA_DRAW_MODE
{ 
    DWORD  dwSize;
    BYTE    byDspAddTarget;            //±àÂëÊÇ·ñµþ¼ÓÄ¿±ê
    BYTE    byDspAddRule;            //±àÂëÊÇ·ñµþ¼Ó¹æÔò
    BYTE    byDspPicAddTarget;        //×¥Í¼ÊÇ·ñµþ¼ÓÄ¿±ê
    BYTE    byDspPicAddRule;        //×¥Í¼ÊÇ·ñµþ¼Ó¹æÔò
    BYTE    byRes[4];            
}NET_VCA_DRAW_MODE, *LPNET_VCA_DRAW_MODE;

//ÎïÌåÀàÐÍ
typedef enum tagOBJECT_TYPE_ENUM
{    
    ENUM_OBJECT_TYPE_COAT  = 1  //ÉÏÒÂ
}OBJECT_TYPE_ENUM;

//ÎïÌåÑÕÉ«Ìõ¼þ½á¹¹Ìå
typedef struct tagNET_DVR_OBJECT_COLOR_COND
{   
    DWORD  dwChannel;   //Í¨µÀºÅ
    DWORD  dwObjType;   //ÎïÌåÀàÐÍ£¬²Î¼ûOBJECT_TYPE_ENUM
    BYTE   byRes[64];   //±£Áô
}NET_DVR_OBJECT_COLOR_COND,*LPNET_DVR_OBJECT_COLOR_COND;

//Í¼Æ¬²ÎÊý
typedef struct tagNET_DVR_PIC
{
    BYTE   byPicType;        //Í¼Æ¬ÀàÐÍ£¬1-jpg
    BYTE   byRes1[3];        //±£Áô
    DWORD  dwPicWidth;       //Í¼Æ¬¿í¶È
    DWORD  dwPicHeight;      //Í¼Æ¬¸ß¶È
    DWORD  dwPicDataLen;     //Í¼Æ¬Êý¾ÝÊµ¼Ê´óÐ¡
    DWORD  dwPicDataBuffLen; //Í¼Æ¬Êý¾Ý»º³åÇø´óÐ¡
    BYTE*  byPicDataBuff;    //Í¼Æ¬Êý¾Ý»º³åÇø
    BYTE   byRes2[40];       //±£Áô
}NET_DVR_PIC,*LPNET_DVR_PIC;

//ÑÕÉ«ÁªºÏÌå
typedef union tagNET_DVR_OBJECT_COLOR_UNION
{    
    NET_DVR_COLOR  struColor;   //ÑÕÉ«Öµ
    NET_DVR_PIC    struPicture; //Í¼Æ¬
    BYTE           byRes[64];   //±£Áô
}NET_DVR_OBJECT_COLOR_UNION,*LPNET_DVR_OBJECT_COLOR_UNION;

//ÎïÌåÑÕÉ«²ÎÊý½á¹¹Ìå
typedef struct tagNET_DVR_OBJECT_COLOR
{    
    DWORD  dwSize;       //½á¹¹Ìå´óÐ¡
    BYTE   byEnable;     //0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE   byColorMode;  //È¡É«·½Ê½£¬1-ÑÕÉ«Öµ£¬2-Í¼Æ¬
    BYTE   byRes1[2];    //±£Áô
    NET_DVR_OBJECT_COLOR_UNION uObjColor; //ÎïÌåÑÕÉ«ÁªºÏÌå£¬È¡ÖµÒÀÀµÓÚÈ¡É«·½Ê½
    BYTE   byRes2[64];   //±£Áô
}NET_DVR_OBJECT_COLOR, *LPNET_DVR_OBJECT_COLOR;

//ÇøÓòÀàÐÍ
typedef enum tagAREA_TYPE_ENUM
{    
    ENUM_OVERLAP_REGION  = 1,//¹²Í¬ÇøÓò
        ENUM_BED_LOCATION  = 2   //´²ÆÌÎ»ÖÃ
}AREA_TYPE_ENUM;

//¸¨ÖúÇøÓò
typedef struct tagNET_DVR_AUXAREA
{
    DWORD  dwAreaType;   //ÇøÓòÀàÐÍ£¬²Î¼ûAREA_TYPE_ENUM
    BYTE   byEnable;     //0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE   byRes1[3];     //±£Áô
    NET_VCA_POLYGON struPolygon; //ÇøÓò
    BYTE   byRes2[16];   //±£Áô
}NET_DVR_AUXAREA,*LPNET_DVR_AUXAREA;

//¸¨ÖúÇøÓòÁÐ±í
typedef struct tagNET_DVR_AUXAREA_LIST
{
    DWORD     dwSize;    // ½á¹¹Ìå´óÐ¡
    NET_DVR_AUXAREA struArea[MAX_AUXAREA_NUM]; //¸¨ÖúÇøÓò
    BYTE    byRes2[64];    // ±£Áô
}NET_DVR_AUXAREA_LIST,*LPNET_DVR_AUXAREA_LIST;

//Í¨µÀ¹¤×÷Ä£Ê½
typedef enum tagCHAN_WORKMODE_ENUM
{    
    ENUM_CHAN_WORKMODE_INDEPENDENT = 1,  //¶ÀÁ¢Ä£Ê½
        ENUM_CHAN_WORKMODE_MASTER  = 2,      //Ö÷Ä£Ê½
        ENUM_CHAN_WORKMODE_SLAVE  = 3        //´ÓÄ£Ê½
}CHAN_WORKMODE_ENUM;

//Í¨µÀ¹¤×÷Ä£Ê½²ÎÊý½á¹¹Ìå
typedef struct tagNET_DVR_CHANNEL_WORKMODE
{   
    DWORD dwSize;        //½á¹¹Ìå´óÐ¡
    BYTE  byWorkMode;    //¹¤×÷Ä£Ê½£¬²Î¼ûCHAN_WORKMODE_ENUM
    BYTE  byRes[63];     //±£Áô
}NET_DVR_CHANNEL_WORKMODE,*LPNET_DVR_CHANNEL_WORKMODE;

//Éè±¸Í¨µÀ²ÎÊý½á¹¹Ìå
typedef struct tagNET_DVR_CHANNEL
{
    BYTE   byAddress[MAX_DOMAIN_NAME];    //Éè±¸IP»òÓòÃû
    WORD   wDVRPort;                     //¶Ë¿ÚºÅ
    BYTE   byRes1[2];                   //±£Áô
    BYTE   sUserName[NAME_LEN];            //Ö÷»úÓÃ»§Ãû
    BYTE   sPassword[PASSWD_LEN];       //Ö÷»úÃÜÂë
    DWORD  dwChannel;                   //Í¨µÀºÅ
    BYTE   byRes2[32];                  //±£Áô
}NET_DVR_CHANNEL,*LPNET_DVR_CHANNEL;

//´ÓÍ¨µÀÐÅÏ¢ÁªºÏÌå
typedef union tagNET_DVR_SLAVE_CHANNEL_UNION
{
    BYTE            byRes[152];        //ÁªºÏÌå´óÐ¡
    DWORD           dwLocalChannel;    //±¾»úÍ¨µÀ
    NET_DVR_CHANNEL struRemoteChannel; //Ô¶³ÌÍ¨µÀ
}NET_DVR_SLAVE_CHANNEL_UNION,*LPNET_DVR_SLAVE_CHANNEL_UNION;

//´ÓÍ¨µÀ²ÎÊý½á¹¹Ìå
typedef struct tagNET_DVR_SLAVE_CHANNEL_PARAM
{
    BYTE   byChanType;   //´ÓÍ¨µÀÀàÐÍ£¬1-±¾»úÍ¨µÀ£¬2-Ô¶³ÌÍ¨µÀ 
    BYTE   byRes1[3];    //±£Áô
    NET_DVR_SLAVE_CHANNEL_UNION uSlaveChannel; //´ÓÍ¨µÀÁªºÏÌå£¬È¡ÖµÒÀÀµÓÚbyChanType
    BYTE   byRes2[64];   //±£Áô
}NET_DVR_SLAVE_CHANNEL_PARAM,*LPNET_DVR_SLAVE_CHANNEL_PARAM;


//´ÓÍ¨µÀ²ÎÊýÅäÖÃ½á¹¹Ìå
typedef struct tagNET_DVR_SLAVE_CHANNEL_CFG
{   
    DWORD dwSize;   //½á¹¹Ìå´óÐ¡
    NET_DVR_SLAVE_CHANNEL_PARAM struChanParam[MAX_SLAVE_CHANNEL_NUM];//´ÓÍ¨µÀ²ÎÊý
    BYTE  byRes[64];  //±£Áô
}NET_DVR_SLAVE_CHANNEL_CFG,*LPNET_DVR_SLAVE_CHANNEL_CFG;

//ÊÓÆµÖÊÁ¿Õï¶Ï¼ì²âÊÂ¼þ
typedef enum tagVQD_EVENT_ENUM
{    
    ENUM_VQD_EVENT_BLUR           = 1,  //Í¼ÏñÄ£ºý
        ENUM_VQD_EVENT_LUMA           = 2,  //ÁÁ¶ÈÒì³£
        ENUM_VQD_EVENT_CHROMA         = 3,  //Í¼ÏñÆ«É«
        ENUM_VQD_EVENT_SNOW           = 4,  //Ñ©»¨¸ÉÈÅ
        ENUM_VQD_EVENT_STREAK         = 5,  //ÌõÎÆ¸ÉÈÅ
        ENUM_VQD_EVENT_FREEZE         = 6,  //»­Ãæ¶³½á
        ENUM_VQD_EVENT_SIGNAL_LOSS    = 7,  //ÐÅºÅ¶ªÊ§
        ENUM_VQD_EVENT_PTZ            = 8,  //ÔÆÌ¨Ê§¿Ø
        ENUM_VQD_EVENT_SCNENE_CHANGE  = 9,  //³¡¾°Í»±ä
        ENUM_VQD_EVENT_VIDEO_ABNORMAL = 10, //ÊÓÆµÒì³£
        ENUM_VQD_EVENT_VIDEO_BLOCK    = 11, //ÊÓÆµÕÚµ²
}VQD_EVENT_ENUM;

//ÊÓÆµÖÊÁ¿Õï¶ÏÊÂ¼þÌõ¼þ½á¹¹Ìå
typedef struct tagNET_DVR_VQD_EVENT_COND
{
    DWORD dwChannel;   //Í¨µÀºÅ
    DWORD dwEventType; //¼ì²âÊÂ¼þÀàÐÍ£¬²Î¼ûVQD_EVENT_ENUM
    BYTE  byRes[64];   //±£Áô
}NET_DVR_VQD_EVENT_COND,*LPNET_DVR_VQD_EVENT_COND;

//ÊÓÆµÖÊÁ¿Õï¶ÏÊÂ¼þ²ÎÊý
typedef struct tagNET_DVR_VQD_EVENT_PARAM
{ 
    BYTE   byThreshold;    //±¨¾¯ãÐÖµ£¬·¶Î§[0,100]
    BYTE   byTriggerMode;  //1-³ÖÐø´¥·¢£¬2-µ¥´Î´¥·¢
    BYTE   byUploadPic;    //0-²»ÉÏ´«Í¼Æ¬£¬1-ÉÏ´«Í¼Æ¬£¬ÎÞÂÛÊÇ·ñÉÏ´«Í¼Æ¬£¬ÊÂºó¶¼¿ÉÒÔ´ÓÉè±¸»ñÈ¡¸ÃÊÂ¼þËù¶ÔÓ¦×îÐÂµÄÒ»ÕÅ±¨¾¯Í¼Æ¬£¬²Î¼û½Ó¿ÚNET_DVR_StartDownload
    BYTE   byRes1;         //±£Áô
    DWORD  dwTimeInterval; //³ÖÐø´¥·¢±¨¾¯Ê±¼ä¼ä¸ô£¬·¶Î§[0,3600] µ¥Î»£ºÃë
    BYTE   byRes2[64];     //±£Áô
}NET_DVR_VQD_EVENT_PARAM,*LPNET_DVR_VQD_EVENT_PARAM;

//ÊÓÆµÖÊÁ¿Õï¶ÏÊÂ¼þ¹æÔò
typedef struct tagNET_DVR_VQD_EVENT_RULE
{   
    DWORD  dwSize;       //½á¹¹Ìå´óÐ¡ 
    BYTE   byEnable;     //0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE   byRes1[3];    //±£Áô
    NET_DVR_VQD_EVENT_PARAM struEventParam; //ÊÓÆµÖÊÁ¿Õï¶ÏÊÂ¼þ²ÎÊý
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//¼ì²âÊ±¼ä
    NET_DVR_HANDLEEXCEPTION_V30 struHandleType;  //´¦Àí·½Ê½
    BYTE   byRelRecordChan[MAX_IVMS_IP_CHANNEL]; //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ£º1±íÊ¾´¥·¢¸ÃÍ¨µÀ£»0±íÊ¾²»´¥·¢ 
    BYTE   byRes2[128];    //±£Áô
}NET_DVR_VQD_EVENT_RULE,*LPNET_DVR_VQD_EVENT_RULE;

//»ù×¼³¡¾°²ÎÊý
typedef struct tagNET_DVR_BASELINE_SCENE
{   
    DWORD dwSize;     //½á¹¹Ìå´óÐ¡
    BYTE  byEnable;   //0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE  byRes[63];  //±£Áô
}NET_DVR_BASELINE_SCENE,*LPNET_DVR_BASELINE_SCENE;

//»ù×¼³¡¾°²Ù×÷²ÎÊý½á¹¹Ìå
typedef struct tagNET_DVR_CONTROL_BASELINE_SCENE_PARAM
{   
    DWORD dwSize;     //½á¹¹Ìå´óÐ¡
    DWORD dwChannel;  //Í¨µÀºÅ
    BYTE  byCommand;  //²Ù×÷ÀàÐÍ£¬1-´Ë×Ö¶Î±£Áô£¬ÔÝ²»Ê¹ÓÃ£¬2-¸üÐÂ»ù×¼³¡¾°
    BYTE  byRes[127];  //±£Áô
}NET_DVR_CONTROL_BASELINE_SCENE_PARAM,*LPNET_DVR_CONTROL_BASELINE_SCENE_PARAM;

//ÊÓÆµÖÊÁ¿Õï¶Ï±¨¾¯½á¹¹Ìå
typedef struct tagNET_DVR_VQD_ALARM
{   
    DWORD  dwSize;                //½á¹¹Ìå´óÐ¡
    DWORD  dwRelativeTime;        //Ïà¶ÔÊ±±ê
    DWORD  dwAbsTime;              //¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO struDevInfo; //Ç°¶ËÉè±¸ÐÅÏ¢ 
    DWORD  dwEventType;           //ÊÂ¼þÀàÐÍ£¬²Î¿¼VQD_EVENT_ENUM
    float  fThreshold;            //±¨¾¯ãÐÖµ[0.000,1.000]
    DWORD  dwPicDataLen;          //Í¼Æ¬³¤¶È£¬Îª0±íÊ¾Ã»ÓÐÍ¼Æ¬
    BYTE   *pImage;               //Ö¸ÏòÍ¼Æ¬µÄÖ¸Õë           
    BYTE   byRes[128];            //±£Áô
}NET_DVR_VQD_ALARM,*LPNET_DVR_VQD_ALARM;

//±ê¶¨µã×Ó½á¹¹
typedef struct tagNET_DVR_CB_POINT
{
    NET_VCA_POINT struPoint;     //±ê¶¨µã£¬Ö÷ÉãÏñ»ú£¨Ç¹»ú£©
    NET_DVR_PTZPOS struPtzPos;  //Çò»úÊäÈëµÄPTZ×ø±ê
    BYTE    byRes[8];
}NET_DVR_CB_POINT, LPNET_DVR_CB_POINT;

//±ê¶¨²ÎÊýÅäÖÃ½á¹¹
typedef struct tagNET_DVR_TRACK_CALIBRATION_PARAM
{    
    BYTE byPointNum;            //ÓÐÐ§±ê¶¨µã¸öÊý
    BYTE byRes[3];                
    NET_DVR_CB_POINT  struCBPoint[MAX_CALIB_PT]; //±ê¶¨µã×é
}NET_DVR_TRACK_CALIBRATION_PARAM, *LPNET_DVR_TRACK_CALIBRATION_PARAM;

//Çò»úÅäÖÃ½á¹¹
typedef struct tagNET_DVR_TRACK_CFG 
{    
    DWORD dwSize;                //½á¹¹³¤¶È    
    BYTE byEnable;                //±ê¶¨Ê¹ÄÜ
    BYTE byFollowChan;          // ±»¿ØÖÆµÄ´ÓÍ¨µÀ
    BYTE byDomeCalibrate;            //ÉèÖÃÖÇÄÜ¸ú×ÙÇò»ú±ê¶¨£¬1ÉèÖÃ 0²»ÉèÖÃ 
    BYTE byRes;                    // ±£Áô×Ö½Ú
    NET_DVR_TRACK_CALIBRATION_PARAM  struCalParam; //±ê¶¨µã×é
}NET_DVR_TRACK_CFG, *LPNET_DVR_TRACK_CFG ;

//¸ú×ÙÄ£Ê½
typedef enum _TRACK_MODE_
{
    MANUAL_CTRL = 0,  //ÊÖ¶¯¸ú×Ù
        ALARM_TRACK    //±¨¾¯´¥·¢¸ú×Ù
}TRACK_MODE;

//ÊÖ¶¯¿ØÖÆ½á¹¹
typedef struct tagNET_DVR_MANUAL_CTRL_INFO 
{
    NET_VCA_POINT struCtrlPoint;
    BYTE  byRes[8];
}NET_DVR_MANUAL_CTRL_INFO, *LPNET_DVR_MANUAL_CTRL_INFO ;

//¸ú×ÙÄ£Ê½½á¹¹
typedef struct tagNET_DVR_TRACK_MODE
{
    DWORD dwSize;        //½á¹¹³¤¶È
    BYTE byTrackMode;   //¸ú×ÙÄ£Ê½
    BYTE byRuleConfMode;   //¹æÔòÅäÖÃ¸ú×ÙÄ£Ê½0-±¾µØÅäÖÃ¸ú×Ù£¬1-Ô¶³ÌÅäÖÃ¸ú×Ù
    BYTE byRes[2];   //±£Áô£¬ÖÃ0
    union
    {
        DWORD dwULen[4];
        NET_DVR_MANUAL_CTRL_INFO  struManualCtrl;//ÊÖ¶¯¸ú×Ù½á¹¹
    }uModeParam;
}NET_DVR_TRACK_MODE,*LPNET_DVR_TRACK_MODE;

typedef struct tagNET_DVR_ALARM_JPEG
{
    BYTE    byPicProType;        /*±¨¾¯Ê±Í¼Æ¬´¦Àí·½Ê½ 0-²»´¦Àí 1-ÉÏ´«*/
    BYTE    byRes[3];           //±£Áô×Ö½Ú
    NET_DVR_JPEGPARA struPicParam;                 /*Í¼Æ¬¹æ¸ñ½á¹¹*/
}NET_DVR_ALARM_JPEG, *LPNET_DVR_ALARM_JPEG;

/**********************ipc/d5.3.0********************************/
typedef struct tagNET_DVR_PHY_RATIO
{
    DWORD  dwSize;
    DWORD  dwPhysicsRatio;//ÎïÀí±¶ÂÊ×ø±ê
    BYTE   byRes[60];
}NET_DVR_PHY_RATIO, *LPNET_DVR_PHY_RATIO;

typedef struct tagNET_DVR_SLAVECAMERA_COND
{
    DWORD            dwSize;
    DWORD            dwChannel;
    BYTE             byID;//Ö÷´Ó¸ú×Ù ´ÓÉãÏñ»úID±àºÅ[1,4]
    BYTE             byRes[63];
}NET_DVR_SLAVECAMERA_COND, *LPNET_DVR_SLAVECAMERA_COND;

typedef struct tagNET_DVR_SLAVECAMERA_CFG
{
    DWORD            dwSize;
    BYTE                 byAddressType;   //0-Êµ¼Êipv4 ipv6µØÖ· 1-ÓòÃû
    // ¿ØÖÆunionServerÊÇÊ¹ÓÃÊµ¼ÊµØÖ·»¹ÊÇÓòÃû
    WORD                wPort;            /*¶Ë¿Ú*/
    BYTE               byLoginStatus; /*´ÓÉè±¸µÄµÇÂ½×´Ì¬ 0-logout,1-login*/
    union
    {
        struct
        {
            BYTE            szDomain[MAX_DOMAIN_NAME/*64*/];//·þÎñÆ÷µØÖ·£¬ÓòÃû 
            BYTE            byRes1[80];
        }struDomain;
        struct
        {
            NET_DVR_IPADDR     struIp;/*IPµØÖ·*/        //IPv4 IPv6µØÖ·, 144×Ö½Ú
        } struAddrIP;
    }unionServer;  //Ê¹ÓÃÁªºÏÌå½á¹¹£¬Í¨¹ýbyAddressType×Ö¶Î±íÊ¾ÊÇIPµØÖ·»¹ÊÇÓòÃû 64    
    BYTE                szUserName[NAME_LEN/*32*/];        /*ÓÃ»§Ãû*/
    BYTE                szPassWord[PASSWD_LEN/*16*/];        /*ÃÜÂë*/
    BYTE        byRes1[128];
}NET_DVR_SLAVECAMERA_CFG, *LPNET_DVR_SLAVECAMERA_CFG;

typedef struct tagNET_DVR_SLAVECAMERA_PARAM
{
    BYTE             byLinkStatus ;//Á¬½Ó×´Ì¬ 0- Î´Á¬½Ó£¬1-Á¬½Ó
    BYTE             byRes[15];
}NET_DVR_SLAVECAMERA_PARAM, *LPNET_DVR_SLAVECAMERA_PARAM;

typedef struct tagNET_DVR_SLAVECAMERA_STATUS
{
    DWORD            dwSize;
    NET_DVR_SLAVECAMERA_PARAM  struSlaveCamera[MAX_SLAVECAMERA_NUM/*8*/];//Êý×éÏÂ±ê0±íÊ¾´ÓÉãÏñ»úID 1,ÒÀ´ÎÀàÍÆ
    BYTE             byRes[64];
}NET_DVR_SLAVECAMERA_STATUS, *LPNET_DVR_SLAVECAMERA_STATUS;

typedef struct tagNET_PTZ_INFO
{    
    float fPan;
    float fTilt;
    float fZoom;
    BYTE  byRes[8];
}NET_PTZ_INFO, *LPNET_PTZ_INFO;

typedef struct tagNET_DVR_CALIB_PARAM
{
    NET_PTZ_INFO   struPtzInfo;
    NET_VCA_POINT  struCalibCoordinates;//±ê¶¨×ø±ê
    BYTE      byRes[16];
}NET_DVR_CALIB_PARAM, *LPNET_DVR_CALIB_PARAM;

typedef struct tagNET_DVR_SLAVECAMERA_CALIB_CFG
{
    DWORD            dwSize;
    BYTE              byCalibMode;//±ê¶¨Ä£Ê½: 0-±£Áô,1-×Ô¶¯±ê¶¨, 2-ÊÖ¶¯±ê¶¨
    BYTE             byRes[3]; 
    //Êý×éÏÂ±ê0±íÊ¾´ÓÉãÏñ»úID 1£¬ÒÀ´ÎÀàÍÆ
    //ÊÖ¶¯±ê¶¨Ä£Ê½ÏÂÖ§³ÖÅäÖÃ£¨ÉèÖÃ&&»ñÈ¡£©£¬×Ô¶¯Ä£Ê½ÏÂÖ§³Ö»ñÈ¡²Ù×÷
    NET_DVR_CALIB_PARAM  struCalibParam[MAX_CALIB_NUM/*6*/];//Ö»ÔÚÊÖ¶¯±ê¶¨Ä£Ê½ÏÂÉúÐ§
    BYTE             byRes1[64];
}NET_DVR_SLAVECAMERA_CALIB_CFG, *LPNET_DVR_SLAVECAMERA_CALIB_CFG;

typedef struct tagNET_DVR_TRACKING
{
    DWORD dwSize;        //½á¹¹³¤¶È
    BYTE byEnable;      //Ê¹ÄÜ 0-false,1-true
    BYTE byMode;        //Ä£Ê½ 0-¹Ø±Õ£¬1-ÊÖ¶¯£¬2-×Ô¶¯
    WORD  wTrackingTime;//¸ú×ÙÊ±¼ä£º[0,60]s
    NET_VCA_POLYGON struRegion;//ÊÖ¶¯¸ú×ÙÄ¿±êÇøÓò·¶Î§
    BYTE byRes[64];
}NET_DVR_TRACKING,*LPNET_DVR_TRACKING;

typedef struct tagNET_DVR_SLAVECAMERA_CALIB_V50
{
    DWORD            dwSize;
    BYTE               byCalibMode;//±ê¶¨Ä£Ê½: 0-±£Áô,1-×Ô¶¯±ê¶¨, 2-ÊÖ¶¯±ê¶¨
    BYTE             byRes[3]; 
    //Êý×éÏÂ±ê0±íÊ¾´ÓÉãÏñ»úID 1£¬ÒÀ´ÎÀàÍÆ
    //ÊÖ¶¯±ê¶¨Ä£Ê½ÏÂÖ§³ÖÅäÖÃ£¨ÉèÖÃ&&»ñÈ¡£©£¬×Ô¶¯Ä£Ê½ÏÂÖ§³Ö»ñÈ¡²Ù×÷
    NET_DVR_CALIB_PARAM  struCalibParam[MAX_CALIB_NUM_EX/*20*/]; 
    BYTE             byRes1[64];
}NET_DVR_SLAVECAMERA_CALIB_V50, *LPNET_DVR_SLAVECAMERA_CALIB_V50;

typedef struct tagNET_DVR_TRACK_INITPOSTION
{
    DWORD            dwSize;
    DWORD            dwChannel;
    BYTE             byID;//Ö÷´Ó¸ú×Ù ´ÓÉãÏñ»úID±àºÅ[1,4]
    BYTE             byRes[127];
}NET_DVR_TRACK_INITPOSTION, *LPNET_DVR_TRACK_INITPOSTION;

typedef struct tagNET_DVR_MANUAL_TRACKRATIO
{
    DWORD            dwSize;
    BYTE             byCoefficient;//±¶ÂÊÏµÊý[1,60]
    BYTE             byRes[127];
}NET_DVR_MANUAL_TRACKRATIO, *LPNET_DVR_MANUAL_TRACKRATIO;

/**********************ipc/d5.3.0********************************/

//·ÖÎöÒÇÐÐÎª·ÖÎö¹æÔò½á¹¹
//¾¯½ä¹æÔò½á¹¹
typedef struct tagNET_IVMS_ONE_RULE_
{
    BYTE    byActive;           /* ÊÇ·ñ¼¤»î¹æÔò,0-·ñ, ·Ç0-ÊÇ */
    BYTE    byRes1[7];    //±£Áô£¬ÉèÖÃÎª0×Ö¶Î
    BYTE   byRuleName[NAME_LEN]; //¹æÔòÃû³Æ
    VCA_EVENT_TYPE dwEventType;   //ÐÐÎª·ÖÎöÊÂ¼þÀàÐÍ
    NET_VCA_EVENT_UNION uEventParam;//ÐÐÎª·ÖÎöÊÂ¼þ²ÎÊý
    NET_VCA_SIZE_FILTER  struSizeFilter;  //³ß´ç¹ýÂËÆ÷
    BYTE byRes2[68]; /*±£Áô£¬ÉèÖÃÎª0*/
}NET_IVMS_ONE_RULE, *LPNET_IVMS_ONE_RULE;

// ·ÖÎöÒÇ¹æÔò½á¹¹
typedef struct tagNET_IVMS_RULECFG
{
    NET_IVMS_ONE_RULE  struRule[MAX_RULE_NUM];   //¹æÔòÊý×é
}NET_IVMS_RULECFG, *LPNET_IVMS_RULECFG;

// IVMSÐÐÎª·ÖÎöÅäÖÃ½á¹¹
typedef struct tagNET_IVMS_BEHAVIORCFG
{
    DWORD dwSize;
    BYTE    byPicProType;        //±¨¾¯Ê±Í¼Æ¬´¦Àí·½Ê½ 0-²»´¦Àí ·Ç0-ÉÏ´«
    BYTE    byRes[3];
    NET_DVR_JPEGPARA struPicParam;                 //Í¼Æ¬¹æ¸ñ½á¹¹
    NET_IVMS_RULECFG struRuleCfg[MAX_DAYS][MAX_TIMESEGMENT];//Ã¿¸öÊ±¼ä¶Î¶ÔÓ¦¹æÔò
} NET_IVMS_BEHAVIORCFG, *LPNET_IVMS_BEHAVIORCFG;

//ÖÇÄÜ·ÖÎöÒÇÈ¡Á÷¼Æ»®×Ó½á¹¹
typedef struct tagNET_IVMS_DEVSCHED
{
    NET_DVR_SCHEDTIME     struTime;       //Ê±¼ä²ÎÊý
    NET_DVR_PU_STREAM_CFG struPUStream; //Ç°¶ËÈ¡Á÷²ÎÊý
}NET_IVMS_DEVSCHED, *LPNET_IVMS_DEVSCHED;

//ÖÇÄÜ·ÖÎöÒÇ²ÎÊýÅäÖÃ½á¹¹
typedef struct tagNET_IVMS_STREAMCFG
{
    DWORD dwSize;
    NET_IVMS_DEVSCHED    struDevSched[MAX_DAYS][MAX_TIMESEGMENT];//°´Ê±¼ä¶ÎÅäÖÃÇ°¶ËÈ¡Á÷ÒÔ¼°¹æÔòÐÅÏ¢
} NET_IVMS_STREAMCFG, *LPNET_IVMS_STREAMCFG;

//ÆÁ±ÎÇøÓò
typedef struct tagNET_VCA_MASK_REGION
{
    BYTE byEnable;            //ÊÇ·ñ¼¤»î, 0-·ñ£¬·Ç0-ÊÇ
    BYTE byRes[3];         //±£Áô£¬ÖÃ0
    NET_VCA_POLYGON  struPolygon; //ÆÁ±Î¶à±ßÐÎ
}NET_VCA_MASK_REGION, * LPNET_VCA_MASK_REGION;

//ÆÁ±ÎÇøÓòÁ´±í½á¹¹
typedef struct tagNET_VCA_MASK_REGION_LIST
{
    DWORD dwSize;     //½á¹¹³¤¶È
    BYTE byRes[4];     //±£Áô£¬ÖÃ0
    NET_VCA_MASK_REGION  struMask[MAX_MASK_REGION_NUM]; //ÆÁ±ÎÇøÓòÊý×é
}NET_VCA_MASK_REGION_LIST, *LPNET_VCA_MASK_REGION_LIST;


//ATM½øÈëÇøÓò²ÎÊý
typedef struct tagNET_VCA_ENTER_REGION//·ÀÖ¹¸ÉÈÅATM¼ì²â
{
    DWORD dwSize;
    BYTE byEnable;            //ÊÇ·ñ¼¤»î£¬0-·ñ£¬·Ç0-ÊÇ
    BYTE byRes1[3];
    NET_VCA_POLYGON  struPolygon; //½øÈëÇøÓò
    BYTE byRes2[16];
}NET_VCA_ENTER_REGION, * LPNET_VCA_ENTER_REGION;

//IVMSÆÁ±ÎÇøÓòÁ´±í
typedef struct tagNET_IVMS_MASK_REGION_LIST
{
    DWORD dwSize;    //½á¹¹³¤¶È
    NET_VCA_MASK_REGION_LIST struList[MAX_DAYS][ MAX_TIMESEGMENT];
}NET_IVMS_MASK_REGION_LIST, *LPNET_IVMS_MASK_REGION_LIST;

//IVMSµÄATM½øÈëÇøÓò²ÎÊý
typedef struct tagNET_IVMS_ENTER_REGION
{
    DWORD dwSize;
    NET_VCA_ENTER_REGION  struEnter[MAX_DAYS][ MAX_TIMESEGMENT]; //½øÈëÇøÓò
}NET_IVMS_ENTER_REGION, *LPNET_IVMS_ENTER_REGION;

// ivms ±¨¾¯Í¼Æ¬ÉÏ´«½á¹¹
typedef struct tagNET_IVMS_ALARM_JPEG
{
    BYTE                byPicProType;               
    BYTE                byRes[3];
    NET_DVR_JPEGPARA      struPicParam;     
}NET_IVMS_ALARM_JPEG, *LPNET_IVMS_ALARM_JPEG;

// IVMS ºó¼ìË÷ÅäÖÃ
typedef struct tagNET_IVMS_SEARCHCFG
{
    DWORD                        dwSize;
    NET_DVR_MATRIX_DEC_REMOTE_PLAY struRemotePlay;// Ô¶³Ì»Ø·Å
    NET_IVMS_ALARM_JPEG         struAlarmJpeg; // ±¨¾¯ÉÏ´«Í¼Æ¬ÅäÖÃ
    NET_IVMS_RULECFG           struRuleCfg;   //IVMS ÐÐÎª¹æÔòÅäÖÃ
}NET_IVMS_SEARCHCFG, *LPNET_IVMS_SEARCHCFG;

//±ê¶¨²ÎÊý½á¹¹Ìå
typedef struct tagNET_DVR_TRACK_CALIBRATION_PARAM_V41
{    
    BYTE byPointNum;    //ÓÐÐ§±ê¶¨µã¸öÊý
    BYTE byRes[3];        //±£Áô
    NET_DVR_CB_POINT  struCBPoint[MAX_CALIB_PT]; //±ê¶¨µã×é
    NET_DVR_PTZPOS struHorizonPtzPos;  //Çò»úË®Æ½ÏßPTZ×ø±ê
    BYTE byRes2[256];    //±£Áô
}NET_DVR_TRACK_CALIBRATION_PARAM_V41, *LPNET_DVR_TRACK_CALIBRATION_PARAM_V41;

//¸ú×ÙÉè±¸ÅäÖÃ²ÎÊý
typedef struct tagNET_DVR_TRACK_DEV_PARAM_
{    
    DWORD  dwSize;         //½á¹¹Ìå´óÐ¡
    BYTE   byEnable;       //ÆôÓÃ´Ë¸ú×ÙÉè±¸, 0-²»ÆôÓÃ, 1 -ÆôÓÃ
    BYTE   byTransMode;    //Í¨Ñ¶·½Ê½£¬0-ÍøÂçSDK£¬1-485´®¿Ú
    BYTE   byRes1[2];       //±£Áô    
    NET_DVR_CHANNEL  struTrackDevChan; //Áª¶¯¸ú×ÙÉè±¸²ÎÊý    
    NET_DVR_TRACK_CALIBRATION_PARAM_V41 struCalParam; //¸ú×ÙÉè±¸±ê¶¨²ÎÊý    
    BYTE    byRes2[256];    //±£Áô    
}NET_DVR_TRACK_DEV_PARAM, *LPNET_DVR_TRACK_DEV_PARAM;
/************************************end******************************************/
//NASÈÏÖ¤ÅäÖÃ
typedef struct tagNET_DVR_IDENTIFICATION_PARAM
{
    BYTE    sUserName[NAME_LEN];        /* ÓÃ»§Ãû 32*/
    BYTE    sPassword[PASSWD_LEN];        /* ÃÜÂë 16*/
    BYTE    byRes1[4];    //±£Áô
}NET_DVR_IDENTIFICATION_PARAM, *LPNET_DVR_IDENTIFICATION_PARAM;

typedef union tagNET_DVR_MOUNT_PARAM_UNION
{
    BYTE  uLen[52];                    //ÁªºÏÌå½á¹¹´óÐ¡
    NET_DVR_IDENTIFICATION_PARAM struIdentificationParam;//(SMB/CIFSÊ±ÉúÐ§)
} NET_DVR_MOUNT_PARAM_UNION, *LPNET_DVR_MOUNT_PARAM_UNION;

typedef struct tagNET_DVR_NAS_MOUNT_PARAM
{
    BYTE  byMountType; //0¡«±£Áô,1~NFS, 2~ SMB/CIFS
    BYTE  byRes[3];
    NET_DVR_MOUNT_PARAM_UNION uMountParam;
}NET_DVR_NAS_MOUNT_PARAM, *LPNET_DVR_NAS_MOUNT_PARAM;

typedef union tagNET_DVR_MOUNTMETHOD_PARAM_UNION
{
    BYTE  uLen[56]; //ÁªºÏÌå½á¹¹´óÐ¡                    
    NET_DVR_NAS_MOUNT_PARAM struNasMountParam;//NAS¹ÒÔØ·½Ê½ (byNetDiskTypeÎªNFS(NAS)Ê±ÉúÐ§) 
}NET_DVR_MOUNTMETHOD_PARAM_UNION, *LPNET_DVR_MOUNTMETHOD_PARAM_UNION;

//ÍøÂçÓ²ÅÌ½á¹¹ÅäÖÃ
typedef struct tagNET_DVR_SINGLE_NET_DISK_INFO
{
    BYTE byNetDiskType;                        //ÍøÂçÓ²ÅÌÀàÐÍ, 0-NFS(NAS),1-iSCSI
    BYTE byRes1[3];                            //±£Áô
    NET_DVR_IPADDR struNetDiskAddr;            //ÍøÂçÓ²ÅÌµØÖ·
    BYTE sDirectory[PATHNAME_LEN];            // PATHNAME_LEN = 128
    WORD wPort;                                //iscsiÓÐ¶Ë¿Ú£¬ÏÖÔÚÎªÄ¬ÈÏ
    BYTE  byRes2[2];
    NET_DVR_MOUNTMETHOD_PARAM_UNION  uMountMethodParam;
    BYTE  byRes3[8];                //±£Áô
}NET_DVR_SINGLE_NET_DISK_INFO, *LPNET_DVR_SINGLE_NET_DISK_INFO;

#define MAX_NET_DISK    16//×î´óÍøÂçÓ²ÅÌ¸öÊý

typedef struct tagNET_DVR_NET_DISKCFG 
{
    DWORD  dwSize;
    NET_DVR_SINGLE_NET_DISK_INFO struNetDiskParam[MAX_NET_DISK];
}NET_DVR_NET_DISKCFG, *LPNET_DVR_NET_DISKCFG;

typedef struct tagNET_DVR_SINGLE_NET_DISK_INFO_V40
{
    BYTE byNetDiskType;                        //ÍøÂçÓ²ÅÌÀàÐÍ, 0-NFS(NAS),1-iSCSI
    BYTE byRes1[3];                            //±£Áô
    BYTE sDirectory[PATHNAME_LEN];            // PATHNAME_LEN = 128
    BYTE byDevAddr[MAX_DOMAIN_NAME];    /*ÓòÃû 64*/
    WORD wPort;                                //iscsiÓÐ¶Ë¿Ú£¬ÏÖÔÚÎªÄ¬ÈÏ
    BYTE  byRes2[2];
    NET_DVR_MOUNTMETHOD_PARAM_UNION  uMountMethodParam;
    BYTE    byRes4[80];
}NET_DVR_SINGLE_NET_DISK_INFO_V40, *LPNET_DVR_SINGLE_NET_DISK_INFO_V40;

typedef struct tagNET_DVR_NET_DISKCFG_V40 
{
    DWORD  dwSize;
    NET_DVR_SINGLE_NET_DISK_INFO_V40 struNetDiskParam[MAX_NET_DISK];
}NET_DVR_NET_DISKCFG_V40, *LPNET_DVR_NET_DISKCFG_V40;
//ÊÂ¼þÀàÐÍ
//Ö÷ÀàÐÍ
typedef enum _MAIN_EVENT_TYPE_
{
    EVENT_MOT_DET = 0,        //ÒÆ¶¯Õì²â
        EVENT_ALARM_IN = 1,        //±¨¾¯ÊäÈë
        EVENT_VCA_BEHAVIOR = 2,    // ÐÐÎª·ÖÎö
        EVENT_INQUEST = 3,       //ÉóÑ¶ÊÂ¼þ
        EVENT_VCA_DETECTION = 4, //ÖÇÄÜÕì²â
        EVENT_POS = 5,
        EVENT_TRIAL_CASE = 6,//Í¥Éó°¸¼þÐÅÏ¢
        EVENT_STREAM_INFO = 100  //Á÷IDÐÅÏ¢
}MAIN_EVENT_TYPE;

#define INQUEST_START_INFO        0x1001       /*Ñ¶ÎÊ¿ªÊ¼ÐÅÏ¢*/
#define INQUEST_STOP_INFO         0x1002       /*Ñ¶ÎÊÍ£Ö¹ÐÅÏ¢*/
#define INQUEST_TAG_INFO          0x1003       /*ÖØµã±ê¼ÇÐÅÏ¢*/
#define INQUEST_SEGMENT_INFO      0x1004       /*ÉóÑ¶Æ¬¶Ï×´Ì¬ÐÅÏ¢*/
#define INQUEST_CASE_INFO          0x1005        // °¸¼þÐÅÏ¢ÀàÐÍ

typedef enum _VCA_DETECTION_MINOR_TYPE_
{
    EVENT_VCA_TRAVERSE_PLANE     = 1,           //Ô½¾¯Õì²â
        EVENT_FIELD_DETECTION,                        //ÇøÓòÈëÇÖÕì²â
        EVENT_AUDIO_INPUT_ALARM,                    //ÒôÆµÊäÈëÒì³£
        EVENT_SOUND_INTENSITY_ALARM,                //ÉùÇ¿Í»±äÕì²â
        EVENT_FACE_DETECTION,                       //ÈËÁ³Õì²â
        EVENT_VIRTUAL_FOCUS_ALARM,                  //Ðé½¹Õì²â
        EVENT_SCENE_CHANGE_ALARM,                   //³¡¾°±ä¸üÕì²â
        EVENT_PIR_ALARM,                            //PIR±¨¾¯
        EVENT_ENTER_REGION,                           //½øÈëÇøÓò
        EVENT_EXIT_REGION,                            //Ä¿±êÀë¿ªÇøÓò
        EVENT_LOITERING,                               //ÅÇ»²
        EVENT_GROUPDETECTION,                       //ÇøÓòÄÚÈËÔ±¾Û¼¯,Ö§³ÖÇøÓò¹æÔò
        EVENT_RAPIDMOVE,                            //¿ìËÙÒÆ¶¯
        EVENT_PARK,                              //Í£³µ
        EVENT_UNATTENDED_BAGGAGE,                   //ÎïÆ·ÒÅÁô
        EVENT_ATTENDEDBAGGAGE,                      //ÎïÆ·ÄÃÈ¡
        EVENT_VEHICLE_DETECTION,                     //³µÁ¾¼ì²â
        EVENT_ALL = 0xffffffff                        //±íÊ¾È«²¿
}VCA_DETECTION_MINOR_TYPE;



//ÐÐÎª·ÖÎöÖ÷ÀàÐÍ¶ÔÓ¦µÄ´ÎÀàÐÍ£¬ 0xffff±íÊ¾È«²¿
typedef enum _BEHAVIOR_MINOR_TYPE_
{
    EVENT_TRAVERSE_PLANE     = 0,    // ´©Ô½¾¯½äÃæ
        EVENT_ENTER_AREA,                //Ä¿±ê½øÈëÇøÓò,Ö§³ÖÇøÓò¹æÔò
        EVENT_EXIT_AREA,                //Ä¿±êÀë¿ªÇøÓò,Ö§³ÖÇøÓò¹æÔò
        EVENT_INTRUSION,                 // ÖÜ½çÈëÇÖ,Ö§³ÖÇøÓò¹æÔò
        EVENT_LOITER,                 //ÅÇ»²,Ö§³ÖÇøÓò¹æÔò
        EVENT_LEFT_TAKE,                //ÎïÆ·ÒÅÁôÄÃÈ¡,Ö§³ÖÇøÓò¹æÔò
        EVENT_PARKING,                    //Í£³µ,Ö§³ÖÇøÓò¹æÔò
        EVENT_RUN,                    //¿ìËÙÒÆ¶¯,Ö§³ÖÇøÓò¹æÔò
        EVENT_HIGH_DENSITY,                 //ÇøÓòÄÚÈËÔ±¾Û¼¯,Ö§³ÖÇøÓò¹æÔò
        EVENT_STICK_UP,                //ÌùÖ½Ìõ,Ö§³ÖÇøÓò¹æÔò
        EVENT_INSTALL_SCANNER,                //°²×°¶Á¿¨Æ÷,Ö§³ÖÇøÓò¹æÔò
        EVENT_OPERATE_OVER_TIME,        // ²Ù×÷³¬Ê±
        EVENT_FACE_DETECT,              // Òì³£ÈËÁ³
        EVENT_LEFT,                     // ÎïÆ·ÒÅÁô
        EVENT_TAKE,                      // ÎïÆ·ÄÃÈ¡
        EVENT_LEAVE_POSITION,         //Àë¸ÚÊÂ¼þ
        EVENT_TRAIL_INFO = 16,            //Î²Ëæ
        EVENT_FALL_DOWN_INFO = 19,                 //µ¹µØ
        EVENT_OBJECT_PASTE        =20,        // ÒìÎïÕ³ÌùÇøÓò
        EVENT_FACE_CAPTURE_INFO = 21,                //Õý³£ÈËÁ³
        EVENT_MULTI_FACES_INFO = 22,                  //¶àÕÅÈËÁ³
        EVENT_AUDIO_ABNORMAL_INFO = 23             //ÉùÇ¿Í»±ä
}BEHAVIOR_MINOR_TYPE;

//Ö÷ÀàÐÍ6¶ÔÓ¦µÄ´ÎÀàÐÍ
typedef enum _TRIAL_CASE_MINOR_TYPE_
{
    TRIAL_START_INFO  = 0x1001,    // Í¥Éó¿ªÊ¼ÊÂ¼þ
        TRIAL_STOP_INFO   = 0x1002,        //Í¥Éó½áÊøÊÂ¼þ
        TRIAL_TAG_INFO    = 0x1003,        //Í¥ÉóÖØµã±ê×¢ÊÂ¼þ
        TRIAL_SEGMENT_INFO = 0x1004,    // Í¥ÉóÆ¬¶Î×´Ì¬ÐÅÏ¢
        TRIAL_JUDGE_CASE_INFO=0x1005 //Í¥Éó°¸¼þÐÅÏ¢
}TRIAL_CASE_MINOR_TYPE;

// Ö÷ÀàÐÍ100£¬¶ÔÓ¦µÄÐ¡ÀàÐÍ
typedef enum _STREAM_INFO_MINOR_TYPE_
{
    EVENT_STREAM_ID  = 0,                    // Á÷ID
        EVENT_TIMING = 1,                    // ¶¨Ê±Â¼Ïñ
        EVENT_MOTION_DETECT = 2,            // ÒÆ¶¯Õì²â
        EVENT_ALARM = 3,                    // ±¨¾¯Â¼Ïñ
        EVENT_ALARM_OR_MOTION_DETECT = 4,    // ±¨¾¯»òÒÆ¶¯Õì²â
        EVENT_ALARM_AND_MOTION_DETECT = 5,    // ±¨¾¯ºÍÒÆ¶¯Õì²â
        EVENT_COMMAND_TRIGGER = 6,            // ÃüÁî´¥·¢
        EVENT_MANNUAL = 7,                    // ÊÖ¶¯Â¼Ïñ
        EVENT_BACKUP_VOLUME = 8,            // ´æµµ¾íÂ¼Ïñ
        STREAM_EVENT_SEMAPHORE,                //ÐÅºÅÁ¿
        STREAM_EVENT_HIDE,                    //ÕÚµ²
        STREAM_EVENT_INVERSE,                //ÄæÐÐ
        STREAM_EVENT_VIDEO_LOST,            //ÊÓÆµ¶ªÊ§
        STREAM_EVENT_WIRELESS_ALARM,        //ÎÞÏß±¨¾¯
        STREAM_EVENT_PIR_ALARM,                //PIR±¨¾¯
        STREAM_EVENT_CALLHELP_ALARM,        //ºô¾È±¨¾¯
        
        STREAM_EVENT_FACESNAP,                //ÈËÁ³×¥ÅÄ
        STREAM_EVENT_FACE_DETECTION,        //ÈËÁ³Õì²â
        STREAM_EVENT_ITS_PLATE,                //³µÁ¾¼ì²â
        STREAM_EVENT_PDC,                    //¿ÍÁ÷Á¿Í³¼Æ
        STREAM_EVENT_SCENECHANGE_DETECTION,    //³¡¾°±ä¸ü
        STREAM_EVENT_DEFOCUS_DETECTION,        //Ðé½¹Õì²â
        STREAM_EVENT_AUDIOEXCEPTION,        //ÒôÆµÒì³£
        
        //ÒÔÏÂÎªÐÐÎª·ÖÎö£¨COMM_ALARM_RULE£©µÄ×ÓÀàÐÍ£¬¾ßÌå¼ûVCA_EVENT_TYPE
        VCA_EVENT_TRAVERSE_PLANE,            //´©Ô½¾¯½äÃæ
        VCA_EVENT_INTRUSION,                //ÖÜ½çÈëÇÖ
        VCA_EVENT_ENTER_AREA,                //½øÈëÇøÓò
        VCA_EVENT_EXIT_AREA,                //Àë¿ªÇøÓò
        VCA_EVENT_LOITER,                    //ÅÇ»²Õì²â
        VCA_EVENT_HIGH_DENSITY,                //ÈËÔ±¾Û¼¯
        VCA_EVENT_RUN,                        //¿ìËÙÒÆ¶¯
        VCA_EVENT_PARKING,                    //·Ç·¨Í£³µ
        VCA_EVENT_LEFT,                        //ÎïÆ·ÒÅÁô
    VCA_EVENT_TAKE                            //ÎïÆ·ÄÃÈ¡
}STREAM_INFO_MINOR_TYPE;

// typedef enum tagITS_MINOR_TYPE
// {
//     ITS_EVENT_CONGESTION    = 0,    // Óµ¶Â
//     ITS_EVENT_PARKING,              // Í£³µ
//     ITS_EVENT_INVERSE,              // ÄæÐÐ
//     ITS_EVENT_PEDESTRIAN,           // ÐÐÈË
//     ITS_EVENT_DEBRIS                // ÒÅÁôÎï£¬Å×È÷ÎïËéÆ¬
// }ITS_MINOR_TYPE;


#define SEARCH_EVENT_INFO_LEN   300    //ÊÂ¼þÐÅÏ¢³¤¶È
#define CASE_NO_LEN                64
#define CASE_NAME_LEN            128
#define LITIGANT_LEN            32
#define CHIEF_JUDGE_LEN         32
#define     SEARCH_CASE_NO_LEN        56
#define  SEARCH_CASE_NAME_LEN    100
#define  SEARCH_LITIGANT_LEN    32
#define  SEARCH_CHIEF_JUDGE_LEN 32
#define     CASE_NO_RET_LEN        52
#define  CASE_NAME_RET_LEN        64
#define     LITIGANT_RET_LEN        24
#define     CHIEF_JUDGE_RET_LEN    24
//ÊÂ¼þËÑË÷Ìõ¼þ
typedef struct tagNET_DVR_SEARCH_EVENT_PARAM
{
    WORD wMajorType;            //0-ÒÆ¶¯Õì²â£¬1-±¨¾¯ÊäÈë, 2-ÖÇÄÜÊÂ¼þ
    WORD wMinorType;            //ËÑË÷´ÎÀàÐÍ- ¸ù¾ÝÖ÷ÀàÐÍ±ä»¯£¬0xffff±íÊ¾È«²¿
    NET_DVR_TIME struStartTime;    //ËÑË÷µÄ¿ªÊ¼Ê±¼ä£¬Í£Ö¹Ê±¼ä: Í¬Ê±Îª(0, 0) ±íÊ¾´Ó×îÔçµÄÊ±¼ä¿ªÊ¼£¬µ½×îºó£¬×îÇ°ÃæµÄ4000¸öÊÂ¼þ
    NET_DVR_TIME struEndTime;    //
    BYTE            byLockType;        // 0xff-È«²¿£¬0-Î´Ëø£¬1-Ëø¶¨
    BYTE             byValue;            //0-°´Î»±íÊ¾£¬1-°´Öµ±íÊ¾
    BYTE             byRes[130];        // ±£Áô
    union    
    {
        BYTE byLen[SEARCH_EVENT_INFO_LEN];          
        struct//±¨¾¯ÊäÈë
        {
            BYTE byAlarmInNo[MAX_ALARMIN_V30];    //±¨¾¯ÊäÈëºÅ£¬byAlarmInNo[0]ÈôÖÃ1Ôò±íÊ¾²éÕÒÓÉ±¨¾¯ÊäÈë1´¥·¢µÄÊÂ¼þ
            BYTE byRes[SEARCH_EVENT_INFO_LEN - MAX_ALARMIN_V30];
        }struAlarmParam;
        
        struct//±¨¾¯ÊäÈë--°´Öµ
        {
            WORD wAlarmInNo[128];     /*±¨¾¯ÊäÈëºÅ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ*/
            BYTE byRes[44]; //±£Áô
        }struAlarmParamByValue;
        
        struct//ÒÆ¶¯Õì²â
        {
            BYTE byMotDetChanNo[MAX_CHANNUM_V30];//ÒÆ¶¯Õì²âÍ¨µÀ£¬byMotDetChanNo[0]ÈôÖÃ1Ôò±íÊ¾²éÕÒÓÉÍ¨µÀ1·¢ÉúÒÆ¶¯Õì²â´¥·¢µÄÊÂ¼þ
            BYTE byRes[SEARCH_EVENT_INFO_LEN - MAX_CHANNUM_V30];
        }struMotionParam;
        
        struct//ÒÆ¶¯Õì²â--°´Öµ
        {
            WORD wMotDetChanNo[64];        /* ÒÆ¶¯Õì²âÍ¨µÀ£¬°´Öµ±íÊ¾ ,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ*/
            BYTE byRes[172];                /*±£Áô*/
        }struMotionParamByValue;
        
        struct//ÐÐÎª·ÖÎö
        {
            BYTE byChanNo[MAX_CHANNUM_V30];    //´¥·¢ÊÂ¼þµÄÍ¨µÀ
            BYTE byRuleID;                    //¹æÔòID£¬0xff±íÊ¾È«²¿
            BYTE byRes1[43];                //±£Áô
        }struVcaParam;
        
        struct //ÐÐÎª·ÖÎö--°´Öµ·½Ê½²éÕÒ 
        {
            WORD wChanNo[64];     //ÐÐÎª·ÖÎö¶ÔÓ¦µÄÍ¨µÀ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ
            BYTE byRuleID;      //ÐÐÎª·ÖÎöÀàÐÍ£¬¹æÔò0xff±íÊ¾È«²¿£¬´Ó0¿ªÊ¼
            BYTE byRes[171];     /*±£Áô*/           
        }struVcaParamByValue;
        
        struct//ÉóÑ¶ÊÂ¼þËÑË÷Ìõ¼þ
        {            
            BYTE byRoomIndex;    //ÉóÑ¶ÊÒ±àºÅ,°´Öµ±íÊ¾£¬´Ó1¿ªÊ¼
            BYTE byRes1[3];
            BYTE sInquestInfo[INQUEST_CASE_LEN];
            BYTE byRes2[232];     //±£Áô
        } struInquestParam;
        struct  //ÖÇÄÜÕì²â²éÕÒÌõ¼þ
        {
            BYTE byChan [256];//´¥·¢ÖÇÄÜÕì²âµÄÍ¨µÀºÅ£¬°´Êý×éÏÂ±ê±íÊ¾£¬byChan[0]ÈôÖÃ1Ôò±íÊ¾²éÕÒÓÉÍ¨µÀ1·¢ÉúÒÆ¶¯Õì²â´¥·¢µÄÊÂ¼þ 
        }struVCADetectByBit;
        
        struct//ÖÇÄÜÕì²â²éÕÒÌõ¼þ £¬Í¨µÀºÅ°´Öµ±íÊ¾
        {
            DWORD dwChanNo[MAX_CHANNUM_V30-1];// ´¥·¢Í¨µÀºÅ,°´Öµ±íÊ¾£¬0xffffffffÎÞÐ§£¬ÇÒºóÐøÊý¾ÝÒ²±íÊ¾ÎÞÐ§Öµ
            BYTE byAll;//0-±íÊ¾²»ÊÇÈ«²¿£¬1-±íÊ¾È«²¿¡£
            BYTE byres[3];
        }struVCADetectByValue;
        struct
        {
            NET_DVR_STREAM_INFO struIDInfo; // Á÷idÐÅÏ¢£¬72×Ö½Ú³¤
            DWORD                dwCmdType;  // Íâ²¿´¥·¢ÀàÐÍ£¬NVR½ÓÈëÔÆ´æ´¢Ê¹ÓÃ
            BYTE                byBackupVolumeNum; //´æµµ¾íºÅ£¬CVRÊ¹ÓÃ
            BYTE                byRes[223];
        }struStreamIDParam;
        struct
        {
            BYTE    byCaseNo[SEARCH_CASE_NO_LEN];  //°¸¼þ±àºÅ
            BYTE    byCaseName[SEARCH_CASE_NAME_LEN]; //°¸¼þÃû³Æ£»
            BYTE    byLitigant1[SEARCH_LITIGANT_LEN]; //µ±ÊÂÈË1£»
            BYTE    byLitigant2[SEARCH_LITIGANT_LEN]; //µ±ÊÂÈË2£»
            BYTE    byChiefJudge[SEARCH_CHIEF_JUDGE_LEN];//ÉóÅÐ³¤
            BYTE    byCaseType; //°¸¼þÀàÐÍ£»0-È«²¿¡¢1-ÐÌÊÂ°¸¼þ¡¢2-ÃñÊÂ°¸¼þ
            BYTE    byRes[47];
        }struTrialParam;
    }uSeniorParam;
}NET_DVR_SEARCH_EVENT_PARAM, *LPNET_DVR_SEARCH_EVENT_PARAM;

#define  MAX_POS_KEYWORDS_NUM               3          //Ö§³Ö¹Ø¼ü×Ö²éÕÒÌõÊý
#define  MAX_POS_KEYWORD_LEN                128         //Ã¿Ìõ¹Ø¼ü×Ö³¤¶È
#define  SEARCH_EVENT_INFO_LEN_V40             800

//ÊÂ¼þËÑË÷Ìõ¼þ
typedef struct tagNET_DVR_SEARCH_EVENT_PARAM_V40
{
    WORD wMajorType;            //0-ÒÆ¶¯Õì²â£¬1-±¨¾¯ÊäÈë, 2-ÖÇÄÜÊÂ¼þ 5-posÂ¼Ïñ
    WORD wMinorType;            //ËÑË÷´ÎÀàÐÍ- ¸ù¾ÝÖ÷ÀàÐÍ±ä»¯£¬0xffff±íÊ¾È«²¿
    NET_DVR_TIME struStartTime;    //ËÑË÷µÄ¿ªÊ¼Ê±¼ä£¬Í£Ö¹Ê±¼ä: Í¬Ê±Îª(0, 0) ±íÊ¾´Ó×îÔçµÄÊ±¼ä¿ªÊ¼£¬µ½×îºó£¬×îÇ°ÃæµÄ4000¸öÊÂ¼þ
    NET_DVR_TIME struEndTime;    //
    BYTE            byLockType;        // 0xff-È«²¿£¬0-Î´Ëø£¬1-Ëø¶¨
    BYTE             byRes[131];        // ±£Áô
    union    
    {
        BYTE byLen[SEARCH_EVENT_INFO_LEN_V40/*800*/];          
        struct//±¨¾¯ÊäÈë
        {
            /*±¨¾¯ÊäÈëºÅ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬0xffff±íÊ¾ºóÐøÎÞÐ§*/
            WORD wAlarmInNo[128];     
            BYTE byRes[544]; //±£Áô
        }struAlarmParam;
        
        struct//ÒÆ¶¯Õì²â
        {
            /* ÒÆ¶¯Õì²âÍ¨µÀ£¬°´Öµ±íÊ¾ ,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬0xffff±íÊ¾ºóÐøÎÞÐ§*/
            WORD wMotDetChanNo[MAX_CHANNUM_V30];        
            BYTE byRes[672];                /*±£Áô*/
        }struMotionParam;
        
        struct //ÐÐÎª·ÖÎö 
        {
            //ÐÐÎª·ÖÎö¶ÔÓ¦µÄÍ¨µÀ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬0xffff±íÊ¾ºóÐøÎÞÐ§
            WORD wChanNo[MAX_CHANNUM_V30];
            BYTE byRuleID;      //ÐÐÎª·ÖÎöÀàÐÍ£¬¹æÔò0xff±íÊ¾È«²¿£¬´Ó0¿ªÊ¼
            BYTE byRes[671];     /*±£Áô*/           
        }struVcaParam;
        
        struct//ÉóÑ¶ÊÂ¼þËÑË÷Ìõ¼þ
        {            
            BYTE byRoomIndex;    //ÉóÑ¶ÊÒ±àºÅ,´Ó1¿ªÊ¼
            BYTE byRes[799];     //±£Áô
        } struInquestParam;
        
        struct//ÖÇÄÜÕì²â²éÕÒÌõ¼þ £¬Í¨µÀºÅ°´Öµ±íÊ¾
        {
            BYTE byAll;                //²éÕÒÈ«²¿Í¨µÀ£¬0-·ñ£¬´ËÊ±dwChanNo²ÎÊýÓÐÐ§£¬
            //1-²éÕÒÈ«²¿Í¨µÀ£¬´ËÊ±dwChanNo²ÎÊýÎÞÐ§¡£
            BYTE byRes1[3];
            WORD wChanNo[MAX_CHANNUM_V30];// ´¥·¢Í¨µÀºÅ,°´Öµ±íÊ¾£¬0xffffÎÞÐ§£¬ÇÒºóÐøÊý¾ÝÒ²±íÊ¾ÎÞÐ§Öµ
            BYTE byRes[668];
        }struVCADetect;
        
        struct
        {
            NET_DVR_STREAM_INFO struIDInfo; // Á÷idÐÅÏ¢£¬72×Ö½Ú³¤
            DWORD                dwCmdType;  // Íâ²¿´¥·¢ÀàÐÍ£¬NVR½ÓÈëÔÆ´æ´¢Ê¹ÓÃ
            BYTE                byBackupVolumeNum; //´æµµ¾íºÅ£¬CVRÊ¹ÓÃ
            BYTE                byRes[723];
        }struStreamIDParam;
        
        struct //posÂ¼Ïñ
        {
            WORD   wChannel[MAX_CHANNUM_V30];        //Í¨µÀ£¬°´Öµ±íÊ¾,½ô´ÕÐÍÅÅÁÐ£¬Óöµ½0xffffÊ±±íÊ¾Êý×éºóÐøÖµÎÞÐ§
            BYTE     byAllChan;        //ÊÇ·ñ²éÕÒÈ«²¿Í¨µÀ£¬0-·ñ£¬´ËÊ±wChannelÓÐÐ§£¬1-È«²¿Í¨µÀ£¬´ËÊ±wChannelÎÞÐ§
            BYTE      byCaseSensitive;      //0-²»Çø·Ö´óÐ¡Ð´£¬ 1-Çø·Ö´óÐ¡Ð´
            BYTE      byCombinateMode;  //¹Ø¼ü×Ö×éºÏ·½Ê½£¬0-»ò£¬1-Óë
            BYTE      byRes1;              //±£Áô
            char     sKeyWord[MAX_POS_KEYWORDS_NUM][MAX_POS_KEYWORD_LEN]; 
                                             //¹Ø¼ü×Ö²éÕÒÊ±µÄÌõ¼þ
            BYTE    byRes[284];          //±£Áô
        }struPosAlarm;
        
        struct
        {
            BYTE    byCaseNo[SEARCH_CASE_NO_LEN];       //°¸¼þ±àºÅ
            BYTE    byCaseName[SEARCH_CASE_NAME_LEN];   //°¸¼þÃû³Æ
            BYTE    byLitigant1[SEARCH_LITIGANT_LEN];   //µ±ÊÂÈË1
            BYTE    byLitigant2[SEARCH_LITIGANT_LEN];   //µ±ÊÂÈË2
            BYTE    byChiefJudge[SEARCH_CHIEF_JUDGE_LEN];   //ÉóÅÐ³¤
            BYTE    byCaseType;
            BYTE    byRes[47];
        }struTrialParam;
    }uSeniorParam;
}NET_DVR_SEARCH_EVENT_PARAM_V40, *LPNET_DVR_SEARCH_EVENT_PARAM_V40;


//²éÕÒ·µ»Ø½á¹û
typedef struct tagNET_DVR_SEARCH_EVENT_RET
{
    WORD wMajorType;            //Ö÷ÀàÐÍ
    WORD wMinorType;            //´ÎÀàÐÍ
    NET_DVR_TIME struStartTime;    //ÊÂ¼þ¿ªÊ¼µÄÊ±¼ä
    NET_DVR_TIME struEndTime;   //ÊÂ¼þÍ£Ö¹µÄÊ±¼ä£¬Âö³åÊÂ¼þÊ±ºÍ¿ªÊ¼Ê±¼äÒ»Ñù
    BYTE byChan[MAX_CHANNUM_V30];    
    BYTE byChanEx[32];   //¹ØÁªÍ¨µÀ£¬°´Î»±íÊ¾£¬Ê¹ÓÃ¸Ã×Ö¶ÎºóbyChan¿ÉÒÔ²»Ê¹ÓÃ
    BYTE byRes[4];
    union        
    {
        struct//±¨¾¯ÊäÈë½á¹û
        {
            DWORD dwAlarmInNo;     //±¨¾¯ÊäÈëºÅ
            BYTE byRes[SEARCH_EVENT_INFO_LEN];
        }struAlarmRet;
        struct//ÒÆ¶¯Õì²â½á¹û
        {
            DWORD dwMotDetNo;    //ÒÆ¶¯Õì²âÍ¨µÀ
            BYTE byRes[SEARCH_EVENT_INFO_LEN];
        }struMotionRet;
        struct//ÐÐÎª·ÖÎö½á¹û  
        {
            DWORD dwChanNo;                    //´¥·¢ÊÂ¼þµÄÍ¨µÀºÅ
            BYTE byRuleID;                    //¹æÔòID
            BYTE byRes1[3];                    //±£Áô
            BYTE byRuleName[NAME_LEN];        //¹æÔòÃû³Æ
            NET_VCA_EVENT_UNION uEvent;     //ÐÐÎªÊÂ¼þ²ÎÊý
        }struVcaRet;
        struct//ÉóÑ¶ÊÂ¼þ
        {
            BYTE  byRoomIndex;     //ÉóÑ¶ÊÒ±àºÅ,´Ó1¿ªÊ¼
            BYTE  byDriveIndex;    //¿ÌÂ¼»ú±àºÅ,´Ó1¿ªÊ¼
            BYTE  byRes1[6];       //±£Áô
            DWORD dwSegmentNo;     //±¾Æ¬¶ÏÔÚ±¾´ÎÉóÑ¶ÖÐµÄÐòºÅ,´Ó1¿ªÊ¼ 
            WORD  wSegmetSize;     //±¾Æ¬¶ÏµÄ´óÐ¡, µ¥Î»M 
            WORD  wSegmentState;   //±¾Æ¬¶Ï×´Ì¬ 0 ¿ÌÂ¼Õý³££¬1 ¿ÌÂ¼Òì³££¬2 ²»¿ÌÂ¼ÉóÑ¶
            BYTE  byRes2[288];     //±£Áô
        }struInquestRet;
        struct //Á÷idÂ¼Ïñ²éÑ¯½á¹û
        {
            DWORD dwRecordType;    //Â¼ÏñÀàÐÍ 0-¶¨Ê±Â¼Ïñ 1-ÒÆ¶¯Õì²â 2-±¨¾¯Â¼Ïñ 3-±¨¾¯|ÒÆ¶¯Õì²â 4-±¨¾¯&ÒÆ¶¯Õì²â 5-ÃüÁî´¥·¢ 6-ÊÖ¶¯Â¼Ïñ 7-Õð¶¯±¨¾¯ 8-»·¾³´¥·¢ 9-ÖÇÄÜ±¨¾¯ 10-»Ø´«Â¼Ïñ
            DWORD dwRecordLength;    //Â¼Ïñ´óÐ¡
            BYTE  byLockFlag;    // Ëø¶¨±êÖ¾ 0£ºÃ»Ëø¶¨ 1£ºËø¶¨
            BYTE  byDrawFrameType;    // 0£º·Ç³éÖ¡Â¼Ïñ 1£º³éÖ¡Â¼Ïñ
            BYTE  byRes1[2];
            BYTE  byFileName[NAME_LEN];     //ÎÄ¼þÃû
            DWORD dwFileIndex;            // ´æµµ¾íÉÏµÄÎÄ¼þË÷Òý
            BYTE  byRes[256];
        }struStreamIDRet;
        struct
        {
            BYTE    byRoomIndex;     //ÉóÑ¶ÊÒ±àºÅ,´Ó1¿ªÊ¼
            BYTE    byDriveIndex;    //¿ÌÂ¼»ú±àºÅ,´Ó1¿ªÊ¼
            WORD    wSegmetSize;     //±¾Æ¬¶ÏµÄ´óÐ¡, µ¥Î»M
            DWORD    dwSegmentNo;    //±¾Æ¬¶ÏÔÚ±¾´ÎÉóÑ¶ÖÐµÄÐòºÅ,´Ó1¿ªÊ¼
            BYTE    bySegmentState;   //±¾Æ¬¶Ï×´Ì¬£¬0-¿ÌÂ¼Õý³££¬1-¿ÌÂ¼Òì³££¬2-²»¿ÌÂ¼ÉóÑ¶
            BYTE    byCaseType; //°¸¼þÀàÐÍ£»0-È«²¿¡¢1-ÐÌÊÂ°¸¼þ¡¢2-ÃñÊÂ°¸¼þ
            BYTE    byRes[2];
            BYTE    byCaseNo[CASE_NO_RET_LEN];  //°¸¼þ±àºÅ
            BYTE    byCaseName[CASE_NAME_RET_LEN]; //°¸¼þÃû³Æ£»
            BYTE    byLitigant1[LITIGANT_RET_LEN]; //µ±ÊÂÈË1£»
            BYTE    byLitigant2[LITIGANT_RET_LEN]; //µ±ÊÂÈË2£»
            BYTE    byChiefJudge[CHIEF_JUDGE_RET_LEN];//ÉóÅÐ³¤
            BYTE    byRes1[104];
        }struTrialRet;
    }uSeniorRet;
}NET_DVR_SEARCH_EVENT_RET, *LPNET_DVR_SEARCH_EVENT_RET;

//²éÕÒ·µ»Ø½á¹û
typedef struct tagNET_DVR_SEARCH_EVENT_RET_V40
{
    WORD wMajorType;            //Ö÷ÀàÐÍ
    WORD wMinorType;            //´ÎÀàÐÍ
    NET_DVR_TIME struStartTime;    //ÊÂ¼þ¿ªÊ¼µÄÊ±¼ä
    NET_DVR_TIME struEndTime;   //ÊÂ¼þÍ£Ö¹µÄÊ±¼ä£¬Âö³åÊÂ¼þÊ±ºÍ¿ªÊ¼Ê±¼äÒ»Ñù
    WORD  wChan[MAX_CHANNUM_V40/*512*/];    //´¥·¢µÄÍ¨µÀºÅ£¬0xffff±íÊ¾ºóÐøÎÞÐ§
    BYTE byRes[36];
    union        
    {
        BYTE  byLen[800];               //ÁªºÏÌå³¤¶È
        struct//±¨¾¯ÊäÈë½á¹û
        {
            DWORD dwAlarmInNo;     //±¨¾¯ÊäÈëºÅ
            BYTE byRes[796];
        }struAlarmRet;
        struct//ÒÆ¶¯Õì²â½á¹û
        {
            DWORD dwMotDetNo;    //ÒÆ¶¯Õì²âÍ¨µÀ
            BYTE byRes[796];
        }struMotionRet;
        struct//ÐÐÎª·ÖÎö½á¹û  
        {
            DWORD dwChanNo;                    //´¥·¢ÊÂ¼þµÄÍ¨µÀºÅ
            BYTE byRuleID;                    //¹æÔòID
            BYTE byRes1[3];                    //±£Áô
            BYTE byRuleName[NAME_LEN];        //¹æÔòÃû³Æ
            NET_VCA_EVENT_UNION uEvent;     //ÐÐÎªÊÂ¼þ²ÎÊý
            BYTE byRes[668];                    //±£Áô
        }struVcaRet;
        
        struct//ÉóÑ¶ÊÂ¼þ
        {
            BYTE  byRoomIndex;     //ÉóÑ¶ÊÒ±àºÅ,´Ó1¿ªÊ¼
            BYTE  byDriveIndex;    //¿ÌÂ¼»ú±àºÅ,´Ó1¿ªÊ¼
            BYTE  byRes1[6];       //±£Áô
            DWORD dwSegmentNo;     //±¾Æ¬¶ÏÔÚ±¾´ÎÉóÑ¶ÖÐµÄÐòºÅ,´Ó1¿ªÊ¼ 
            WORD  wSegmetSize;     //±¾Æ¬¶ÏµÄ´óÐ¡, µ¥Î»M 
            WORD  wSegmentState;   //±¾Æ¬¶Ï×´Ì¬ 0 ¿ÌÂ¼Õý³££¬1 ¿ÌÂ¼Òì³££¬2 ²»¿ÌÂ¼ÉóÑ¶
            BYTE  byRes2[784];     //±£Áô
        }struInquestRet;
        
        struct //Á÷idÂ¼Ïñ²éÑ¯½á¹û
        {
            DWORD dwRecordType;    //Â¼ÏñÀàÐÍ 0-¶¨Ê±Â¼Ïñ 1-ÒÆ¶¯Õì²â 2-±¨¾¯Â¼Ïñ 3-±¨¾¯|ÒÆ¶¯Õì²â 4-±¨¾¯&ÒÆ¶¯Õì²â 5-ÃüÁî´¥·¢ 6-ÊÖ¶¯Â¼Ïñ 7-Õð¶¯±¨¾¯ 8-»·¾³´¥·¢ 9-ÖÇÄÜ±¨¾¯ 10-»Ø´«Â¼Ïñ
            DWORD dwRecordLength;    //Â¼Ïñ´óÐ¡
            BYTE  byLockFlag;    // Ëø¶¨±êÖ¾ 0£ºÃ»Ëø¶¨ 1£ºËø¶¨
            BYTE  byDrawFrameType;    // 0£º·Ç³éÖ¡Â¼Ïñ 1£º³éÖ¡Â¼Ïñ
            BYTE  byRes1[2];
            BYTE  byFileName[NAME_LEN];     //ÎÄ¼þÃû
            DWORD dwFileIndex;            // ´æµµ¾íÉÏµÄÎÄ¼þË÷Òý
            BYTE  byRes[752];
        }struStreamIDRet;
        
        struct//POSÂ¼Ïñ²éÑ¯½á¹û
        {
            DWORD dwChanNo;        //´¥·¢²úÉúposÊÂ¼þµÄÍ¨µÀ
            BYTE  byRes[796];
        }struPosRet;
        
        struct
        {
            BYTE    byRoomIndex;     //ÉóÑ¶ÊÒ±àºÅ,´Ó1¿ªÊ¼
            BYTE    byDriveIndex;    //¿ÌÂ¼»ú±àºÅ,´Ó1¿ªÊ¼
            WORD    wSegmetSize;     //±¾Æ¬¶ÏµÄ´óÐ¡, µ¥Î»M
            DWORD    dwSegmentNo;    //±¾Æ¬¶ÏÔÚ±¾´ÎÉóÑ¶ÖÐµÄÐòºÅ,´Ó1¿ªÊ¼
            BYTE    bySegmentState;   //±¾Æ¬¶Ï×´Ì¬£¬0-¿ÌÂ¼Õý³££¬1-¿ÌÂ¼Òì³££¬2-²»¿ÌÂ¼ÉóÑ¶
            BYTE    byCaseType; //°¸¼þÀàÐÍ£»0-È«²¿¡¢1-ÐÌÊÂ°¸¼þ¡¢2-ÃñÊÂ°¸¼þ
            BYTE    byRes[2];
            BYTE    byCaseNo[CASE_NO_RET_LEN];  //°¸¼þ±àºÅ
            BYTE    byCaseName[CASE_NAME_RET_LEN]; //°¸¼þÃû³Æ£»
            BYTE    byLitigant1[LITIGANT_RET_LEN]; //µ±ÊÂÈË1£»
            BYTE    byLitigant2[LITIGANT_RET_LEN]; //µ±ÊÂÈË2£»
            BYTE    byChiefJudge[CHIEF_JUDGE_RET_LEN];//ÉóÅÐ³¤
            BYTE    byRes1[600];
        }struTrialRet;
    }uSeniorRet;
}NET_DVR_SEARCH_EVENT_RET_V40, *LPNET_DVR_SEARCH_EVENT_RET_V40;


//SDK_V35  2009-10-26

// ±ê¶¨ÅäÖÃÀàÐÍ
typedef enum tagCALIBRATE_TYPE
{
    PDC_CALIBRATE  = 0x01,  // PDC ±ê¶¨
        BEHAVIOR_OUT_CALIBRATE  = 0x02, //ÐÐÎªÊÒÍâ³¡¾°±ê¶¨  
        BEHAVIOR_IN_CALIBRATE = 0x03,    // ÐÐÎªÊÒÄÚ³¡¾°±ê¶¨ 
        ITS_CALBIRETE       = 0x04,      //  ½»Í¨ÊÂ¼þ±ê¶¨
        BV_DIRECT_CALIBRATE      = 0x05,   //Ë«Ä¿Ö±½Ó±ê¶¨
        PDC_LINE_CALIBRATE  = 0x06  //PDC Ïß ±ê¶¨
}CALIBRATE_TYPE;

#define MAX_RECT_NUM  6
typedef struct tagNET_DVR_RECT_LIST
{    
    BYTE    byRectNum;    // ¾ØÐÎ¿òµÄ¸öÊý
    BYTE    byRes1[11];  //±£Áô×Ö½Ú 
    NET_VCA_RECT struVcaRect[MAX_RECT_NUM]; // ×î´óÎª6¸öRect 
}NET_DVR_RECT_LIST, *LPNET_DVR_RECT_LIST;

// PDC ±ê¶¨²ÎÊý
typedef struct tagNET_DVR_PDC_CALIBRATION
{
    NET_DVR_RECT_LIST struRectList;       // ±ê¶¨¾ØÐÎ¿òÁÐ±í
    BYTE           byRes[120];       // ±£Áô×Ö½Ú 
}NET_DVR_PDC_CALIBRATION, *LPNET_DVR_PDC_CALIBRATION;


// ±ê¶¨ÏßµÄÊôÐÔÀà±ð£¬ÓÃÀ´±íÊ¾µ±Ç°±ê¶¨ÏßÔÚÊµ¼Ê±íÊ¾µÄÊÇ¸ß¶ÈÏß»¹ÊÇ³¤¶ÈÏß¡£
typedef enum tagLINE_MODE
{
    HEIGHT_LINE,        //¸ß¶ÈÑù±¾Ïß
        LENGTH_LINE        //³¤¶ÈÑù±¾Ïß
}LINE_MODE;
/*
ÔÚÉèÖÃ±ê¶¨ÐÅÏ¢µÄÊ±ºò£¬Èç¹ûÏàÓ¦Î»ÉèÖÃÁËÊ¹ÄÜ£¬²¢ÉèÖÃÏà¹Ø²ÎÊý£¬
ÈôÃ»ÓÐÉèÖÃÊ¹ÄÜ£¬Ôò±ê¶¨ºó¿ÉÒÔ»ñÈ¡Ïà¹ØµÄÉãÏñ»ú²ÎÊý
*/
typedef struct tagNET_DVR_CAMERA_PARAM
{
    BYTE    byEnableHeight;     // ÊÇ·ñÊ¹ÄÜÉèÖÃÉãÏñ»ú¸ß¶ÈÏß
    BYTE    byEnableAngle;      // ÊÇ·ñÊ¹ÄÜÉèÖÃÉãÏñ»ú¸©Ñö½Ç¶È
    BYTE    byEnableHorizon;    // ÊÇ·ñÊ¹ÄÜÉèÖÃÉãÏñ»úµØÆ½Ïß
    BYTE    byRes[5];   // ±£Áô×Ö½Ú 
    float   fCameraHeight;    // ÉãÏñ»ú¸ß¶È
    float   fCameraAngle;     // ÉãÏñ»ú¸©Ñö½Ç¶È
    float   fHorizon;         // ³¡¾°ÖÐµÄµØÆ½Ïß
}NET_DVR_CAMERA_PARAM, *LPNET_DVR_CAMERA_PARAM;
/*
µ±fValue±íÊ¾Ä¿±ê¸ß¶ÈµÄÊ±ºò£¬struStartPointºÍstruEndPoint·Ö±ð±íÊ¾Ä¿±êÍ·²¿µãºÍ½Å²¿µã¡£
µ±fValue±íÊ¾Ïß¶Î³¤¶ÈµÄÊ±ºò£¬struStartPointºÍstruEndPoint·Ö±ð±íÊ¾Ïß¶ÎÆðÊ¼µãºÍÖÕµã£¬
mode±íÊ¾µ±Ç°Ñù±¾Ïß±íÊ¾¸ß¶ÈÏß»¹ÊÇ³¤¶ÈÏß¡£
*/
typedef struct tagNET_DVR_LINE_SEGMENT
{
    BYTE            byLineMode;     // ²ÎÕÕ LINE_MODE
    BYTE            byRes[3];       // ±£Áô×Ö½Ú 
    NET_VCA_POINT   struStartPoint;  
    NET_VCA_POINT   struEndPoint;
    float           fValue;
}NET_DVR_LINE_SEGMENT, *LPNET_DVR_LINE_SEGMENT;

#define  MAX_LINE_SEG_NUM 8

/*
±ê¶¨Ñù±¾ÏßÄ¿Ç°ÐèÒª4-8µ÷Ñù±¾Ïß£¬ÒÔ»ñÈ¡ÉãÏñ»úÏà¹Ø²ÎÊý
*/
typedef struct tagNET_DVR_BEHAVIOR_OUT_CALIBRATION
{
    DWORD                   dwLineSegNum;          // Ñù±¾Ïß¸öÊý
    NET_DVR_LINE_SEGMENT    struLineSegment[MAX_LINE_SEG_NUM];    // Ñù±¾Ïß×î´ó¸öÊý
    NET_DVR_CAMERA_PARAM    struCameraParam;    // ÉãÏñ»ú²ÎÊý
    BYTE byRes[20];
}NET_DVR_BEHAVIOR_OUT_CALIBRATION, *LPNET_DVR_BEHAVIOR_OUT_CALIBRATION;

/*
¸Ã½á¹¹Ìå±íÊ¾IASÖÇÄÜ¿â±ê¶¨Ñù±¾£¬
ÆäÖÐ°üÀ¨Ò»¸öÄ¿±ê¿òºÍÒ»Ìõ¶ÔÓ¦µÄ¸ß¶È±ê¶¨Ïß£»
Ä¿±ê¿òÎªÕ¾Á¢µÄÈËÌåÍâ½Ó¾ØÐÎ¿ò£»¸ß¶ÈÏßÑù±¾±êÊ¶´ÓÈËÍ·¶¥µãµ½½ÅµãµÄ±ê¶¨Ïß£»
ÓÃ¹éÒ»»¯×ø±ê±íÊ¾£»
*/
typedef struct tagNET_DVR_IN_CAL_SAMPLE
{
    NET_VCA_RECT struVcaRect;   // Ä¿±ê¿ò
    NET_DVR_LINE_SEGMENT struLineSegment;    // ¸ß¶È±ê¶¨Ïß
}NET_DVR_IN_CAL_SAMPLE, *LPNET_DVR_IN_CAL_SAMPLE;

#define  MAX_SAMPLE_NUM 5

typedef struct tagNET_DVR_BEHAVIOR_IN_CALIBRATION 
{
    DWORD    dwCalSampleNum;      //  ±ê¶¨Ñù±¾¸öÊý
    NET_DVR_IN_CAL_SAMPLE  struCalSample[MAX_SAMPLE_NUM]; // ±ê¶¨Ñù±¾×î´ó¸öÊý
    NET_DVR_CAMERA_PARAM    struCameraParam;    // ÉãÏñ»ú²ÎÊý
    BYTE byRes[16];
}NET_DVR_BEHAVIOR_IN_CALIBRATION, *LPNET_DVR_BEHAVIOR_IN_CALIBRATION;

#define  CALIB_PT_NUM 4
typedef struct tagNET_DVR_ITS_CALIBRATION
{
    DWORD dwPointNum; //±ê¶¨µãÊý
    NET_VCA_POINT struPoint[CALIB_PT_NUM]; //Í¼Ïñ×ø±ê
    float       fWidth;
    float       fHeight;
    BYTE        byRes1[100];        // ±£Áô×Ö½Ú
}NET_DVR_ITS_CALIBRATION, *LPNET_DVR_ITS_CALIBRATION;

typedef struct tagNET_DVR_BV_DIRECT_CALIBRATION
{   
    DWORD  dwCameraHeight;  //ÉãÏñ»ú¸ß¶È£¬µ¥Î»cm
    float  fPitchAngle;     //ÉãÏñ»ú¸©ÊÓ½Ç¶È[0¡ã, 60¡ã],
    float  fInclineAngle;   //ÉãÏñ»úÇãÐ±½Ç¶È[-20¡ã,20¡ã]
    BYTE   byRes1[228];     //±£Áô
}NET_DVR_BV_DIRECT_CALIBRATION,*LPNET_DVR_BV_DIRECT_CALIBRATION;

// PDC ±ê¶¨²ÎÊý
typedef struct  tagNET_DVR_PDC_LINE_CALIBRATION
{
    NET_VCA_LINE  struCalibrationLine;
    BYTE       byRes[224];// ±£Áô×Ö½Ú 
} NET_DVR_PDC_LINE_CALIBRATION, *LPNET_DVR_PDC_LINE_CALIBRATION;

// ±ê¶¨²ÎÊýÁªºÏÌå
// ºóÐøµÄÏà¹Ø±ê¶¨²ÎÊý¿ÉÒÔ·ÅÔÚ¸Ã½á¹¹ÀïÃæ
typedef union tagNET_DVR_CALIBRATION_PRARM_UNION
{
    BYTE byRes[240];                    //ÁªºÏÌå½á¹¹´óÐ¡
    NET_DVR_PDC_CALIBRATION struPDCCalibration;  //PDC ±ê¶¨²ÎÊý
    NET_DVR_BEHAVIOR_OUT_CALIBRATION  struBehaviorOutCalibration;  //  ÐÐÎªÊÒÍâ³¡¾°±ê¶¨  Ö÷ÒªÓ¦ÓÃÓÚIVSµÈ
    NET_DVR_BEHAVIOR_IN_CALIBRATION  struBehaviorInCalibration;     // ÐÐÎªÊÒÄÚ³¡¾°±ê¶¨£¬Ö÷ÒªÓ¦ÓÃIASµÈ 
    NET_DVR_ITS_CALIBRATION struITSCalibration;
    NET_DVR_BV_DIRECT_CALIBRATION struBvDirectCalibration; //Ë«Ä¿Ö±½Ó±ê¶¨
    NET_DVR_PDC_LINE_CALIBRATION struPDCLineCalibration; //PDC Ïß±ê¶¨²ÎÊý
}NET_DVR_CALIBRATION_PRARM_UNION, *LPNET_DVR_CALIBRATION_PRARM_UNION;


// ±ê¶¨ÅäÖÃ½á¹¹
typedef struct tagNET_DVR_CALIBRATION_CFG
{
    DWORD   dwSize;               //±ê¶¨½á¹¹´óÐ¡
    BYTE    byEnable;           // ÊÇ·ñÆôÓÃ±ê¶¨
    BYTE    byCalibrationType;    // ±ê¶¨ÀàÐÍ ¸ù¾Ý²»Í¬ÀàÐÍÔÚÁªºÏÌåÀàÑ¡Ôñ²»Í¬µÄ±ê¶¨ ²Î¿¼CALIBRATE_TYPE
    BYTE    byRes1[2];
    NET_DVR_CALIBRATION_PRARM_UNION uCalibrateParam;  // ±ê¶¨²ÎÊýÁªºÏÌå
    BYTE    byRes2[12];
}NET_DVR_CALIBRATION_CFG, *LPNET_DVR_CALIBRATION_CFG; 

//Á÷Á¿Í³¼Æ·½Ïò½á¹¹Ìå
typedef struct  tagNET_DVR_PDC_ENTER_DIRECTION
{
    NET_VCA_POINT struStartPoint; //Á÷Á¿Í³¼Æ·½ÏòÆðÊ¼µã
    NET_VCA_POINT struEndPoint;    // Á÷Á¿Í³¼Æ·½Ïò½áÊøµã 
}NET_DVR_PDC_ENTER_DIRECTION, *LPNET_DVR_PDC_ENTER_DIRECTION;

typedef struct tagNET_DVR_PDC_RULE_CFG
{
    DWORD           dwSize;              //½á¹¹´óÐ¡
    BYTE            byEnable;             // ÊÇ·ñ¼¤»î¹æÔò;
    BYTE            byRes1[23];       // ±£Áô×Ö½Ú 
    NET_VCA_POLYGON          struPolygon;            // ¶à±ßÐÎ
    NET_DVR_PDC_ENTER_DIRECTION  struEnterDirection;    // Á÷Á¿½øÈë·½Ïò
} NET_DVR_PDC_RULE_CFG, *LPNET_DVR_PDC_RULE_CFG;

typedef struct tagNET_DVR_PDC_RULE_CFG_V41
{
    DWORD           dwSize;              //½á¹¹´óÐ¡
    BYTE            byEnable;             // ÊÇ·ñ¼¤»î¹æÔò;
    BYTE            byRes1[23];       // ±£Áô×Ö½Ú 
    NET_VCA_POLYGON struPolygon;            // ¶à±ßÐÎ
    NET_DVR_PDC_ENTER_DIRECTION  struEnterDirection;    // Á÷Á¿½øÈë·½Ïò
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//²¼·ÀÊ±¼ä
    NET_DVR_TIME_EX struDayStartTime; //°×Ìì¿ªÊ¼Ê±¼ä£¬Ê±·ÖÃëÓÐÐ§
    NET_DVR_TIME_EX struNightStartTime; //Ò¹Íí¿ªÊ¼Ê±¼ä£¬Ê±·ÖÃëÓÐÐ§
    BYTE            byRes[100];       // ±£Áô×Ö½Ú
}NET_DVR_PDC_RULE_CFG_V41, *LPNET_DVR_PDC_RULE_CFG_V41;

/********* IPC5.1.7 ÈËÁ÷Á¿Í³¼Æ¹æÔò Begin 2014-03-21***********/
//Ìõ¼þ½á¹¹
typedef struct tagNET_DVR_PDC_RULE_COND
{
    DWORD  dwSize; //½á¹¹´óÐ¡
    DWORD  dwChannel; //Í¨µÀºÅ
    DWORD dwID; //³¡¾°ID£¬¼æÈÝÇò»ú¶à³¡¾°¸ÅÄî£¬¼æÈÝÀÏ°æ±¾SDKÅäÖÃÐÂÉè±¸Ê±£¬±£Áô×Ö½ÚÎª0µÄÇé¿ö£¬ËùÒÔÕâ¸ö×Ö½ÚÎª0Ê±£¬Ò²Ä¬ÈÏÎª³¡¾°1 
    BYTE  byRes[60]; 
}NET_DVR_PDC_RULE_COND, *LPNET_DVR_PDC_RULE_COND;

//ÅäÖÃ½á¹¹
typedef struct tagNET_DVR_PDC_RULE_CFG_V42
{
    DWORD  dwSize; //½á¹¹´óÐ¡
    BYTE   byEnable; //ÊÇ·ñ¼¤»î¹æÔò;
    BYTE   byOSDEnable;//¿ÍÁ÷Í³¼ÆOSDÏÔÊ¾ÊÇ·ñÆôÓÃ,  0-·ñ£¨0-ÎÞ£©£¬1-ÊÇ£¨0-½øÈëºÍÀë¿ª£©£¬ 2-½øÈë£¬ 3-Àë¿ª   ¶ÔÓÚÀÏÉè±¸µÄ²»ÆôÓÃOSDµþ¼Ó¶ÔÓ¦£¨ÎÞ£©£¬ÆôÓÃ¶ÔÓ¦£¨½øÈë/Àë¿ª£©¡£
    BYTE   byCurDetectType;//µ±Ç°¼ì²âÇøÓòÀàÐÍ£¬0-¶à±ßÐÎ£¬1-¼ì²âÏß
    BYTE   byInterferenceSuppression; //¸ÉÈÅÒÖÖÆ£¬°´Î»±íÊ¾,0-Î´¹´Ñ¡,1-¹´Ñ¡£¬bit0-ÒõÓ°£¬bit1-ÅÇ»²£¬bit2-ÍÆ³µ
    NET_VCA_POINT   struOSDPoint;//¿ÍÁ÷Í³¼ÆÏÔÊ¾OSDÏÔÊ¾×óÉÏ½Ç×ø±ê
    //¿ÍÁ÷Á¿¼ì²âÊý¾ÝÉÏ´«ÖÜÆÚ£¨0-15¡¢1-1¡¢2-5¡¢3-10¡¢4-20¡¢5-30¡¢6-60£©µ¥Î»£º·ÖÖÓ
    BYTE   byDataUploadCycle; 
    //Ã¿ÃëÉÏ´«»úÖÆÊ¹ÄÜ£¨0-¹Ø±Õ£¬1-¿ªÆô£©
    BYTE   bySECUploadEnable;
    BYTE   byEmailDayReport;//¿ÍÁ÷ÈÕ±¨±íÊ¹ÄÜ 0-¹Ø±Õ£¬1-¿ªÆô
    BYTE   byEmailWeekReport;//¿ÍÁ÷ÖÜ±¨±íÊ¹ÄÜ 0-¹Ø±Õ£¬1-¿ªÆô
    BYTE   byEmailMonthReport;//¿ÍÁ÷ÔÂ±¨±íÊ¹ÄÜ0-¹Ø±Õ£¬1-¿ªÆô
    BYTE   byEmailYearReport;//¿ÍÁ÷Äê±¨±íÊ¹ÄÜ0-¹Ø±Õ£¬1-¿ªÆô
    BYTE   byRes2[6];// ±£Áô×Ö½Ú  
    NET_VCA_POLYGON          struPolygon; // ¶à±ßÐÎ
    NET_DVR_PDC_ENTER_DIRECTION  struEnterDirection; // Á÷Á¿½øÈë·½Ïò
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//²¼·ÀÊ±¼ä
    NET_DVR_TIME_EX struDayStartTime; //°×Ìì¿ªÊ¼Ê±¼ä£¬Ê±·ÖÃëÓÐÐ§
    NET_DVR_TIME_EX struNightStartTime; //Ò¹Íí¿ªÊ¼Ê±¼ä£¬Ê±·ÖÃëÓÐÐ§
    NET_DVR_HANDLEEXCEPTION_V40 struAlarmHandleType; /*´¦Àí·½Ê½ ½öÖ§³ÖÉÏ´«ÖÐÐÄ*/
    BYTE   byDetecteSensitivity;//Ä¿±ê¼ì²âÁéÃô¶È£º·¶Î§1-100£¬Ä¬ÈÏ50
    BYTE   byGenerateSpeedSpace;//Ä¿±êÉú³ÉËÙ¶È£¨¿ÕÓò£©£º·¶Î§1-100£¬Ä¬ÈÏ50
    BYTE   byGenerateSpeedTime;// Ä¿±êÉú³ÉËÙ¶È£¨Ê±Óò£©£º·¶Î§1-100£¬Ä¬ÈÏ50
    BYTE   byCountSpeed;// ¼ÆÊýËÙ¶È£º·¶Î§1-100£¬Ä¬ÈÏ50
    BYTE   byDetecteType;// Ä¿±ê¼ì²âÀàÐÍ£º0-×Ô¶¯£¬1-ÈËÍ·£¬2-Í·¼ç£¬Ä¬ÈÏ0-×Ô¶¯£¬×Ô¶¯Ä£Ê½ÏÂDSPµ÷ÕûËã·¨µÄ²ÎÊýÅäÖÃ¸øËã·¨¿â
    BYTE   byTargetSizeCorrect;//Ä¿±ê³ß´çÐÞÕý£º·¶Î§1-100£¬Ä¬ÈÏ50
    BYTE   byRes3[2];// ±£Áô×Ö½Ú
    NET_VCA_LINE  struLine;//¼ì²âÏß
    BYTE   byRes[236]; //±£Áô×Ö½Ú
}NET_DVR_PDC_RULE_CFG_V42, *LPNET_DVR_PDC_RULE_CFG_V42;
/********* IPC5.1.7 ÈËÁ÷Á¿Í³¼Æ¹æÔò End 2014-03-21***********/

//ÊÔÓÃ°æÐÅÏ¢½á¹¹Ìå
typedef struct tagNET_DVR_TRIAL_VERSION_CFG
{
    DWORD dwSize;
    WORD wReserveTime; //ÊÔÓÃÆÚÊ£ÓàÊ±¼ä£¬0xffff±íÊ¾ÎÞÐ§£¬µ¥Î»£ºÌì
    BYTE byRes[62];
}NET_DVR_TRIAL_VERSION_CFG, *LPNET_DVR_TRIAL_VERSION_CFG;

typedef struct tagNET_DVR_SYN_CHANNEL_NAME_PARAM
{
    DWORD dwSize;
    DWORD dwChannel; //Í¨µÀºÅ
    BYTE  byRes[64]; 
}NET_DVR_SYN_CHANNEL_NAME_PARAM, *LPNET_DVR_SYN_CHANNEL_NAME_PARAM;

typedef struct tagNET_DVR_RESET_COUNTER_CFG
{
    DWORD dwSize;
    BYTE  byEnable; //ÊÇ·ñÆôÓÃ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE  byMode; //ÉúÐ§Ä£Ê½£¬0-¶¨Ê±£¬1-ÊÖ¶¯
    BYTE  byRes1[2];
    NET_DVR_TIME_EX struTime[MAX_DAYS];//Êý¾ÝÇåÁãÊ±¼ä£¬Ê±·ÖÃëÓÐÐ§
    BYTE  byRes[64]; 
}NET_DVR_RESET_COUNTER_CFG, *LPNET_DVR_RESET_COUNTER_CFG;

typedef struct tagNET_DVR_VCA_CTRLINFO_COND
{
    DWORD dwSize;
    NET_DVR_STREAM_INFO  struStreamInfo;
    BYTE byRes[64];
}NET_DVR_VCA_CTRLINFO_COND, *LPNET_DVR_VCA_CTRLINFO_COND;

typedef struct tagNET_DVR_VCA_CTRLINFO_CFG
{
    DWORD  dwSize;
    BYTE   byVCAEnable;     //ÊÇ·ñ¿ªÆôÖÇÄÜ
    BYTE   byVCAType;       //ÖÇÄÜÄÜÁ¦ÀàÐÍ£¬VCA_CHAN_ABILITY_TYPE 
    BYTE   byStreamWithVCA; //ÂëÁ÷ÖÐÊÇ·ñ´øÖÇÄÜÐÅÏ¢
    BYTE   byMode;            //Ä£Ê½£¬ATM ÄÜÁ¦Ê±²ÎÕÕVCA_CHAN_MODE_TYPE ,TFS ÄÜÁ¦Ê±²ÎÕÕ TFS_CHAN_MODE_TYPE£¬ÐÐÎª·ÖÎöÍêÕû°æÊ±²ÎÕÕBEHAVIOR_SCENE_MODE_TYPE
    BYTE   byControlType;   //¿ØÖÆÀàÐÍ£¬°´Î»±íÊ¾£¬0-·ñ£¬1-ÊÇ
    //byControlType &1 ÊÇ·ñÆôÓÃ×¥ÅÄ¹¦ÄÜ
    //byControlType &2 ÊÇ·ñÆôÓÃÁª¶¯Ç°¶ËÉè±¸
    BYTE   byRes[83];         //±£Áô£¬ÉèÖÃÎª0
}NET_DVR_VCA_CTRLINFO_CFG, *LPNET_DVR_VCA_CTRLINFO_CFG;

//ÉèÖÃÈËÁ÷Á¿Í³¼Æ²ÎÊý  ¸´ÓÃÐÐÎªÄÚ²¿¹Ø¼ü×Ö²ÎÊý 
// HUMAN_GENERATE_RATE
// Ä¿±êÉú³ÉËÙ¶È²ÎÊý£¬¿ØÖÆPDC¿âÉú³ÉÄ¿±êµÄËÙ¶È¡£ËÙ¶ÈÔ½¿ì£¬Ä¿±êÔ½ÈÝÒ×Éú³É¡£µ±ÊäÈëÊÓÆµ¹âÕÕÌõ¼þ½Ï²î£¬¶Ô±È¶È½ÏµÍÊ±£¬»òÕßÉèÖÃµÄ¹æÔòÇøÓò½ÏÐ¡Ê±£¬Ó¦¼Ó¿ìÄ¿±êÉú³ÉËÙ¶È£¬ ±ÜÃâÄ¿±êµÄÂ©¼ì£»µ±ÊäÈëÊÓÆµÖÐ¶Ô±È¶È½Ï¸ßÊ±£¬»òÕß¹æÔòÇøÓò½Ï´óÊ±£¬Ó¦¸Ã½µµÍÄ¿±êÉú³ÉËÙ¶È£¬ÒÔ¼õÉÙÎó¼ì¡£Ä¿±êÉú³ÉËÙ¶È²ÎÊý¹²ÓÐ5¼¶£¬1¼¶ËÙ¶È×îÂý£¬5¼¶×î¿ì£¬Ä¬ÈÏ²ÎÊýÎª3¡£
// 
// DETECT_SENSITIVE
// Ä¿±ê¼ì²âÁéÃô¶È¿ØÖÆ²ÎÊý£¬¿ØÖÆPDC¿âÖÐÒ»¸ö¾ØÐÎÇøÓò±»¼ì²âÎªÄ¿±êµÄÁéÃô¶È¡£ÁéÃô¶ÈÔ½¸ß£¬¾ØÐÎÇøÓòÔ½ÈÝÒ×±»¼ì²âÎªÄ¿±ê£¬ÁéÃô¶ÈÔ½µÍÔòÔ½ÄÑ¼ì²âÎªÄ¿±ê¡£µ±ÊäÈëÊÓÆµ¹âÕÕÌõ¼þ½Ï²î£¬¶Ô±È¶È½ÏµÍÊ±£¬Ó¦Ìá¸ß¼ì²âÁéÃô¶È£¬ ±ÜÃâÄ¿±êµÄÂ©¼ì£»µ±ÊäÈëÊÓÆµÖÐ¶Ô±È¶È½Ï¸ßÊ±£¬Ó¦¸Ã½µµÍ¼ì²âÁéÃô¶È£¬ÒÔ¼õÉÙÎó¼ì¡£¶ÔÓ¦²ÎÊý¹²ÓÐ5¼¶£¬¼¶±ð1ÁéÃô¶È×îµÍ£¬5¼¶×î¸ß£¬Ä¬ÈÏ¼¶±ðÎª3¡£
// TRAJECTORY_LEN
// ¹ì¼£Éú³É³¤¶È¿ØÖÆ²ÎÊý£¬±íÊ¾Éú³É¹ì¼£Ê±ÒªÇóÄ¿±êµÄ×î´óÎ»ÒÆÏñËØ¡£¶ÔÓ¦²ÎÊý¹²ÓÐ5¼¶£¬¼¶±ð1£¬Éú³É³¤¶È×î³¤£¬¹ì¼£Éú³É×îÂý£¬5¼¶Éú³É³¤¶È×î¶Ì£¬¹ì¼£Éú³É×î¿ì£¬Ä¬ÈÏ¼¶±ðÎª3¡£
// TRAJECT_CNT_LEN
// ¹ì¼£¼ÆÊý³¤¶È¿ØÖÆ²ÎÊý£¬±íÊ¾¹ì¼£¼ÆÊýÊ±ÒªÇóÄ¿±êµÄ×î´óÎ»ÒÆÏñËØ¡£¶ÔÓ¦²ÎÊý¹²ÓÐ5¼¶£¬¼¶±ð1£¬¼ÆÊýÒªÇó³¤¶È×î³¤£¬¹ì¼£¼ÆÊý×îÂý£¬5¼¶¼ÆÊýÒªÇó³¤¶È×î¶Ì£¬¹ì¼£¼ÆÊý×î¿ì£¬Ä¬ÈÏ¼¶±ðÎª3¡£
// PREPROCESS
// Í¼ÏñÔ¤´¦Àí¿ØÖÆ²ÎÊý£¬0 - ²»´¦Àí£»1 - ´¦Àí¡£Ä¬ÈÏÎª0£»
// CAMERA_ANGLE
// ÉãÏñ»ú½Ç¶ÈÊäÈë²ÎÊý£¬ 0 - ÇãÐ±£» 1 - ´¹Ö±¡£Ä¬ÈÏÎª0£»
typedef enum tagPDC_PARAM_KEY
{
    HUMAN_GENERATE_RATE = 50,              // Ä¿±êÉú³ÉËÙ¶È ´Ó50¿ªÊ¼
        DETECT_SENSITIVE    = 51,               // ¼ì²âÁéÃô¶È
}PDC_PARAM_KEY;

typedef struct tagNET_DVR_PDC_TARGET_INFO
{
    DWORD       dwTargetID;                 // Ä¿±êid 
    NET_VCA_RECT struTargetRect;               // Ä¿±ê¿ò
    BYTE      byRes1[8];        // ±£Áô×Ö½Ú
}NET_DVR_PDC_TARGET_INFO, *LPNET_DVR_PDC_TARGET_INFO;

typedef struct tagNET_DVR_PDC_TARGET_IN_FRAME
{
    BYTE           byTargetNum;                   //Ä¿±ê¸öÊý
    BYTE            byRes1[3];
    NET_DVR_PDC_TARGET_INFO  struTargetInfo[MAX_TARGET_NUM];   //Ä¿±êÐÅÏ¢Êý×é
    BYTE    byRes2[8];                  // ±£Áô×Ö½Ú
}NET_DVR_PDC_TARGET_IN_FRAME, *LPNET_DVR_PDC_TARGET_IN_FRAME;

typedef struct tagNET_DVR_PDC_ALRAM_INFO
{
    DWORD                       dwSize;          // PDCÈËÁ÷Á¿±¨¾¯ÉÏ´«½á¹¹Ìå´óÐ¡
    BYTE                        byMode;          // 0 µ¥Ö¡Í³¼Æ½á¹û 1×îÐ¡Ê±¼ä¶ÎÍ³¼Æ½á¹û  
    BYTE                        byChannel;       // ±¨¾¯ÉÏ´«Í¨µÀºÅ
    /********* IPC5.1.7 ÐÂÔö²ÎÊý Begin 2014-03-21***********/
    BYTE                        bySmart;         //×¨ÒµÖÇÄÜ·µ»Ø0£¬Smart ·µ»Ø 1
    BYTE                        byRes1;          // ±£Áô×Ö½Ú    
    /********* IPC5.1.7 ÐÂÔö²ÎÊý End 2014-03-21***********/
    NET_VCA_DEV_INFO       struDevInfo;             //Ç°¶ËÉè±¸ÐÅÏ¢
    union        
    {
        struct   // µ¥Ö¡Í³¼Æ½á¹ûÊ±Ê¹ÓÃ
        {
            DWORD   dwRelativeTime;     // Ïà¶ÔÊ±±ê
            DWORD   dwAbsTime;          // ¾ø¶ÔÊ±±ê
            BYTE    byRes[92];            
        }struStatFrame;
        struct
        {
            NET_DVR_TIME                      tmStart; // Í³¼ÆÆðÊ¼Ê±¼ä 
            NET_DVR_TIME                      tmEnd;  //  Í³¼Æ½áÊøÊ±¼ä 
            BYTE byRes[92];
        }struStatTime;
    }uStatModeParam;  // ×÷ÎªÒ»¸öÁªºÏÌå µ¥Ö¡µÄÊ±ºò²ÅÓÐÖ¡ÄÚÄ¿±êÐÅÏ¢ ×îÐ¡Ê±¼ä¶ÎÍ³¼Æ½á¹ûÐèÒªÍ³¼ÆÊ±¼ä ²ÎÊý
    DWORD                       dwLeaveNum;        // Àë¿ªÈËÊý
    DWORD                       dwEnterNum;        // ½øÈëÈËÊý
    BYTE                        byRes2[40];           // ±£Áô×Ö½Ú
}NET_DVR_PDC_ALRAM_INFO, *LPNET_DVR_PDC_ALRAM_INFO;


//  ÈËÁ÷Á¿ÐÅÏ¢²éÑ¯ 
typedef struct tagNET_DVR_PDC_QUERY
{
    NET_DVR_TIME tmStart;
    NET_DVR_TIME tmEnd;
    DWORD       dwLeaveNum;
    DWORD       dwEnterNum; 
    BYTE        byRes1[256];
}NET_DVR_PDC_QUERY, *LPNET_DVR_PDC_QUERY;

typedef struct tagNET_DVR_POSITION_RULE_CFG
{
    DWORD                   dwSize;             // ½á¹¹´óÐ¡ 
    NET_DVR_PTZ_POSITION    struPtzPosition;    // ³¡¾°Î»ÖÃÐÅÏ¢
    NET_VCA_RULECFG         struVcaRuleCfg;     //ÐÐÎª¹æÔòÅäÖÃ
    BYTE                    byRes2[80];         // ±£Áô×Ö½Ú
}NET_DVR_POSITION_RULE_CFG, *LPNET_DVR_POSITION_RULE_CFG;

typedef struct tagNET_DVR_POSITION_RULE_CFG_V41
{
    DWORD                   dwSize;             // ½á¹¹´óÐ¡ 
    NET_DVR_PTZ_POSITION    struPtzPosition;    // ³¡¾°Î»ÖÃÐÅÏ¢
    NET_VCA_RULECFG_V41         struVcaRuleCfg;     //ÐÐÎª¹æÔòÅäÖÃ
    BYTE  byTrackEnable; //ÊÇ·ñÆôÓÃ¸ú×Ù
    BYTE  byRes1;
    WORD wTrackDuration; //¸ú×Ù³ÖÐøÊ±¼ä£¬µ¥Î»s
    BYTE                    byRes2[76];         // ±£Áô×Ö½Ú
}NET_DVR_POSITION_RULE_CFG_V41, *LPNET_DVR_POSITION_RULE_CFG_V41;


typedef struct tagNET_DVR_LIMIT_ANGLE
{
    BYTE                byEnable;    // ÊÇ·ñÆôÓÃ³¡¾°ÏÞÎ»¹¦ÄÜ
    BYTE                byRes1[3];
    NET_DVR_PTZPOS      struUp;     // ÉÏÏÞÎ»
    NET_DVR_PTZPOS      struDown;   // ÏÂÏÞÎ»
    NET_DVR_PTZPOS      struLeft;   // ×óÏÞÎ»
    NET_DVR_PTZPOS      struRight;  // ÓÒÏÞÎ»
    BYTE                byRes2[20];
}NET_DVR_LIMIT_ANGLE, *LPNET_DVR_LIMIT_ANGLE;

typedef struct tagNET_DVR_POSITION_INDEX
{
    BYTE    byIndex;    // ³¡¾°Ë÷Òý
    BYTE    byRes1;
    WORD    wDwell;    // Í£ÁôÊ±¼ä 
    BYTE    byRes2[4];   // ±£Áô×Ö½Ú
}NET_DVR_POSITION_INDEX, *LPNET_DVR_POSITION_INDEX;

#define  MAX_POSITION_NUM 10
typedef struct tagNET_DVR_POSITION_TRACK_CFG
{
    DWORD dwSize;
    BYTE    byNum; // ³¡¾°¸öÊý
    BYTE    byRes1[3];
    NET_DVR_POSITION_INDEX   struPositionIndex[MAX_POSITION_NUM];
    BYTE    byRes2[8];
}NET_DVR_POSITION_TRACK_CFG, *LPNET_DVR_POSITION_TRACK_CFG;

//Ñ²º½Â·¾¶³¡¾°ÐÅÏ¢
typedef struct tagNET_DVR_PATROL_SCENE_INFO
{
    WORD   wDwell;         // Í£ÁôÊ±¼ä 30-300
    BYTE   byPositionID;   // ³¡¾°ºÅ1-10£¬Ä¬ÈÏ0±íÊ¾¸ÃÑ²º½µã²»Ìí¼Ó³¡¾°
    BYTE   byRes[5];
}NET_DVR_PATROL_SCENE_INFO, *LPNET_DVR_PATROL_SCENE_INFO;

// ³¡¾°Ñ²º½¸ú×ÙÅäÖÃÐÅÏ¢
typedef struct tagNET_DVR_PATROL_TRACKCFG
{
    DWORD  dwSize;                                 // ½á¹¹´óÐ¡
    NET_DVR_PATROL_SCENE_INFO struPatrolSceneInfo[10];    // Ñ²º½Â·¾¶
    BYTE   byRes[16];                              // ±£Áô×Ö½Ú
}NET_DVR_PATROL_TRACKCFG, *LPNET_DVR_PATROL_TRACKCFG;

//Çò»ú±¾µØ¹æÔò²Ëµ¥ÅäÖÃ½á¹¹Ìå
typedef struct tagNET_DVR_TRACK_PARAMCFG
{
    DWORD   dwSize;             // ½á¹¹´óÐ¡
    WORD    wAlarmDelayTime;    // ±¨¾¯ÑÓÊ±Ê±¼ä£¬Ä¿Ç°Çò»úÖ»Ö§³ÖÈ«¾ÖÈëÇÖ ·¶Î§1-120Ãë
    WORD    wTrackHoldTime;     // ±¨¾¯¸ú×Ù³ÖÐøÊ±¼ä  ·¶Î§0-300Ãë
    BYTE    byTrackMode;        //  ²ÎÕÕ IPDOME_TRACK_MODE
    BYTE     byPreDirection;    // ¸ú×Ù·½ÏòÔ¤ÅÐ 0-²»ÆôÓÃ 1-ÆôÓÃ
    BYTE      byTrackSmooth;        // ¸ú×ÙÁ¬Ðø  0-²»ÆôÓÃ 1-ÆôÓÃ
    BYTE     byZoomAdjust;    // ±¶ÂÊÏµÊýµ÷Õû ²Î¼ûÏÂ±í
    BYTE    byMaxTrackZoom;    //×î´ó¸ú×Ù±¶ÂÊÏµÊý,0-±íÊ¾Ä¬ÈÏ±¶ÂÊÏµÊý,µÈ¼¶6-±ê¶¨Öµ*1.0(Ä¬ÈÏ),1-5ÎªËõÐ¡±ê¶¨Öµ£¬ÖµÔ½Ð¡£¬ËõÐ¡µÄ±ÈÀýÔ½´ó,7-15Îª·Å´ó£¬ÖµÔ½´ó£¬·Å´óµÄ±ÈÀýÔ½´ó
    BYTE   byStopTrackWhenFindFace;  //ÈËÁ³¼ì²âµ½ºóÊÇ·ñÍ£Ö¹¸ú×Ù 0-·ñ 1-ÊÇ
    BYTE   byStopTrackThreshold;   //¸ú×ÙÖÕÖ¹ÆÀ·ÖãÐÖµ
    BYTE   byRes[9];          //  ±£Áô×Ö½Ú                
}NET_DVR_TRACK_PARAMCFG, *LPNET_DVR_TRACK_PARAMCFG;

// Çò»ú»úÐ¾²ÎÊý
typedef struct tagNET_DVR_DOME_MOVEMENT_PARAM
{
    WORD wMaxZoom;   // Çò»ú×î´ó±¶ÂÊÏµÊý
    BYTE    byRes[42];  // ±£Áô×Ö½Ú
}NET_DVR_DOME_MOVEMENT_PARAM, *LPNET_DVR_DOME_MOVEMENT_PARAM;

/********************************ÖÇÄÜ½»Í¨ÊÂ¼þ begin****************************************/
#define  MAX_REGION_NUM            8       // ÇøÓòÁÐ±í×î´óÊýÄ¿
#define  MAX_TPS_RULE            8       // ×î´ó²ÎÊý¹æÔòÊýÄ¿
#define  MAX_AID_RULE            8      // ×î´óÊÂ¼þ¹æÔòÊýÄ¿
#define  MAX_LANE_NUM            8        // ×î´ó³µµÀÊýÄ¿

//½»Í¨ÊÂ¼þÀàÐÍ£¬
typedef enum tagTRAFFIC_AID_TYPE
{
    CONGESTION          = 0x01,    //Óµ¶Â
        PARKING             = 0x02,    //Í£³µ  
        INVERSE             = 0x04,    //ÄæÐÐ
        PEDESTRIAN          = 0x08,    //ÐÐÈË                      
        DEBRIS              = 0x10,    //ÒÅÁôÎï Å×È÷ÎïËéÆ¬ 
        SMOKE               = 0x20,    //ÑÌÎí  
        OVERLINE            = 0x40,     //Ñ¹Ïß
        VEHICLE_CONTROL_LIST  = 0x80,  //ºÚÃûµ¥Êý¾Ý
        SPEED                 = 0x100,  //³¬ËÙ
        LANECHANGE         = 0x200,      //±äµÀ
        TURNAROUND         = 0x400,     //µôÍ·
        VEHICLE_OCCUPANCY_NONVEHICLE = 0x800, //»ú¶¯³µÕ¼ÓÃ·Ç»ú¶¯³µÎ»
        GASSER            = 0x1000    //¼ÓÈû
}TRAFFIC_AID_TYPE;

typedef enum tagTRAFFIC_SCENE_MODE
{
    FREEWAY = 0,    //  ¸ßËÙ»§Íâ³¡¾°
        TUNNEL,         //  ¸ßËÙËíµÀ³¡¾°
        BRIDGE          //  ¸ßËÙÇÅÁº³¡¾°
}TRAFFIC_SCENE_MODE;

typedef enum tagITS_ABILITY_TYPE
{
    ITS_CONGESTION_ABILITY             = 0x01,      //Óµ¶Â
        ITS_PARKING_ABILITY                = 0x02,      //Í£³µ  
        ITS_INVERSE_ABILITY                = 0x04,      //ÄæÐÐ
        ITS_PEDESTRIAN_ABILITY             = 0x08,      //ÐÐÈË                      
        ITS_DEBRIS_ABILITY                 = 0x10,      //ÒÅÁôÎï Å×È÷ÎïËéÆ¬
        ITS_SMOKE_ABILITY                  = 0x20,      //ÑÌÎí-ËíµÀ
        ITS_OVERLINE_ABILITY               = 0x40,      //Ñ¹Ïß
        ITS_VEHICLE_CONTROL_LIST_ABILITY   = 0x80,        //ºÚÃûµ¥Êý¾Ý
        ITS_SPEED_ABILITY                   = 0x100,        //³¬ËÙ        
        ITS_LANECHANGE_ABILITY             = 0x200,     //±äµÀ
        ITS_TURNAROUND_ABILITY             = 0x400,      //µôÍ·
        ITS_LANE_VOLUME_ABILITY            = 0x010000,  //³µµÀÁ÷Á¿
        ITS_LANE_VELOCITY_ABILITY          = 0x020000,  //³µµÀÆ½¾ùËÙ¶È
        ITS_TIME_HEADWAY_ABILITY           = 0x040000,  //³µÍ·Ê±¾à
        ITS_SPACE_HEADWAY_ABILITY          = 0x080000,  //³µÍ·¼ä¾à
        ITS_TIME_OCCUPANCY_RATIO_ABILITY   = 0x100000,  //³µµÀÕ¼ÓÐÂÊ£¬£¨Ê±¼äÉÏ)
        ITS_SPACE_OCCUPANCY_RATIO_ABILITY  = 0x200000,  //³µµÀÕ¼ÓÐÂÊ£¬°Ù·Ö±È¼ÆËã£¨¿Õ¼äÉÏ)
        ITS_LANE_QUEUE_ABILITY             = 0x400000,  //ÅÅ¶Ó³¤¶È
        ITS_VEHICLE_TYPE_ABILITY           = 0x800000,  //³µÁ¾ÀàÐÍ
        ITS_TRAFFIC_STATE_ABILITY          = 0x1000000  //½»Í¨×´Ì¬
}ITS_ABILITY_TYPE;

// ½»Í¨Í³¼Æ²ÎÊý
typedef enum tagITS_TPS_TYPE
{
    LANE_VOLUME           = 0x01,    //³µµÀÁ÷Á¿
        LANE_VELOCITY         = 0x02,    //³µµÀËÙ¶È
        TIME_HEADWAY          = 0x04,    //³µÍ·Ê±¾à
        SPACE_HEADWAY         = 0x08,    //³µÍ·¼ä¾à
        TIME_OCCUPANCY_RATIO  = 0x10,    //³µµÀÕ¼ÓÐÂÊ (Ê±¼äÉÏ)
        SPACE_OCCUPANCY_RATIO = 0x20,    //³µµÀÕ¼ÓÐÂÊ£¬°Ù·Ö±È¼ÆËã(¿Õ¼äÉÏ)
        QUEUE                 = 0x40,    //ÅÅ¶Ó³¤¶È
        VEHICLE_TYPE          = 0x80,    //³µÁ¾ÀàÐÍ
        TRAFFIC_STATE         = 0x100    //½»Í¨×´Ì¬
}ITS_TPS_TYPE; 

typedef struct tagNET_DVR_REGION_LIST 
{
    DWORD    dwSize;    // ½á¹¹Ìå´óÐ¡
    BYTE    byNum;      // ÇøÓò¸öÊý
    BYTE    byRes1[3];    // ±£Áô×Ö½Ú
    NET_VCA_POLYGON struPolygon[MAX_REGION_NUM]; // ÇøÓò
    BYTE    byRes2[20];    // ±£Áô×Ö½Ú
}NET_DVR_REGION_LIST,*LPNET_DVR_REGION_LIST;


// ·½Ïò½á¹¹Ìå
typedef struct tagNET_DVR_DIRECTION
{
    NET_VCA_POINT struStartPoint;   // ·½ÏòÆðÊ¼µã
    NET_VCA_POINT struEndPoint;     // ·½Ïò½áÊøµã 
}NET_DVR_DIRECTION, *LPNET_DVR_DIRECTION;

// µ¥¸ö³µµÀ
typedef struct tagNET_DVR_ONE_LANE
{
    BYTE    byEnable;                   // ³µµÀÊÇ·ñÆôÓÃ
    BYTE    byRes1[11];                    // ±£Áô×Ö½Ú
    BYTE    byLaneName[NAME_LEN];       // ³µµÀ¹æÔòÃû³Æ
    NET_DVR_DIRECTION struFlowDirection;// ³µµÀÄÚ³µÁ÷·½Ïò
    NET_VCA_POLYGON struPolygon;        // ³µµÀÇøÓò
}NET_DVR_ONE_LANE, *LPNET_DVR_ONE_LANE;

// ³µµÀÅäÖÃ
typedef struct tagNET_DVR_LANE_CFG
{
    DWORD    dwSize;    // ½á¹¹Ìå´óÐ¡
    NET_DVR_ONE_LANE struLane[MAX_LANE_NUM];    // ³µµÀ²ÎÊý Êý×éÏÂ±ê×÷Îª³µµÀID£¬
    BYTE    byRes1[40];     // ±£Áô×Ö½Ú
}NET_DVR_LANE_CFG, *LPNET_DVR_LANE_CFG;

// ½»Í¨ÊÂ¼þ²ÎÊý
typedef struct tagNET_DVR_AID_PARAM
{
    WORD    wParkingDuration;       // Î¥Í£¼ì²âÁéÃô¶È  10-120s
    WORD    wPedestrianDuration;    // ÐÐÈË³ÖÐøÊ±¼ä    1-120s
    WORD    wDebrisDuration;        // Å×È÷Îï³ÖÐøÊ±¼ä  10-120s
    WORD    wCongestionLength;      // Óµ¶Â³¤¶ÈãÐÖµ    5-200£¨Ã×£©
    WORD    wCongestionDuration;    // Óµ¶Â³ÖÐø²ÎÊý    10-120s
    WORD    wInverseDuration;       // ÄæÐÐ³ÖÐøÊ±¼ä    1-10s
    WORD    wInverseDistance;       // ÄæÐÐ¾àÀëãÐÖµ µ¥Î»m ·¶Î§[2-100] Ä¬ÈÏ 10Ã×
    WORD    wInverseAngleTolerance; // ÔÊÐí½Ç¶ÈÆ«²î 90-180¶È,³µÁ÷ÓëÄæÐÐÔÊÐíµÄ¼Ð½Ç
    WORD    wIllegalParkingTime;    // Î¥Í£Ê±¼ä[4,60]£¬µ¥Î»£º·ÖÖÓ ,TFS(½»Í¨Î¥ÕÂÈ¡Ö¤) ³ÇÊÐÄ£Ê½ÏÂ
    WORD    wIllegalParkingPicNum;  // Î¥Í£Í¼Æ¬ÊýÁ¿[1,6], TFS(½»Í¨Î¥ÕÂÈ¡Ö¤) ³ÇÊÐÄ£Ê½ÏÂ
    BYTE    byMergePic;             // Í¼Æ¬Æ´½Ó,TFS ³ÇÊÐÄ£Ê½ÏÂ 0- ²»Æ´½Ó 1- Æ´½Ó
    BYTE    byRes1[23];             // ±£Áô×Ö½Ú
}NET_DVR_AID_PARAM, *LPNET_DVR_AID_PARAM;

// µ¥Ìõ½»Í¨ÊÂ¼þ¹æÔò½á¹¹Ìå
typedef struct tagNET_DVR_ONE_AID_RULE
{   
    BYTE    byEnable;                   // ÊÇ·ñÆôÓÃÊÂ¼þ¹æÔò
    BYTE    byRes1[3];                  // ±£Áô×Ö½Ú
    BYTE    byRuleName[NAME_LEN];       // ¹æÔòÃû³Æ 
    DWORD   dwEventType;                // ½»Í¨ÊÂ¼þ¼ì²âÀàÐÍ TRAFFIC_AID_TYPE
    NET_VCA_SIZE_FILTER struSizeFilter; // ³ß´ç¹ýÂËÆ÷
    NET_VCA_POLYGON     struPolygon;    // ¹æÔòÇøÓò
    NET_DVR_AID_PARAM   struAIDParam;   //  ÊÂ¼þ²ÎÊý
    NET_DVR_SCHEDTIME   struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_2];//²¼·ÀÊ±¼ä
    NET_DVR_HANDLEEXCEPTION_V30 struHandleType;      //´¦Àí·½Ê½ 
    BYTE byRelRecordChan[MAX_CHANNUM_V30];        //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
    BYTE byRes2[20];
}NET_DVR_ONE_AID_RULE, *LPNET_DVR_ONE_AID_RULE;

// ½»Í¨ÊÂ¼þ¹æÔò
typedef struct tagNET_DVR_AID_RULECFG
{
    DWORD   dwSize;                    // ½á¹¹Ìå´óÐ¡ 
    BYTE    byPicProType;              //±¨¾¯Ê±Í¼Æ¬´¦Àí·½Ê½ 0-²»´¦Àí ·Ç0-ÉÏ´«
    BYTE    byRes1[3];                 // ±£Áô×Ö½Ú
    NET_DVR_JPEGPARA struPictureParam; //Í¼Æ¬¹æ¸ñ½á¹¹
    NET_DVR_ONE_AID_RULE  struOneAIDRule[MAX_AID_RULE];
    BYTE    byRes2[32];
}NET_DVR_AID_RULECFG, *LPNET_DVR_AID_RULECFG;

// µ¥Ìõ½»Í¨ÊÂ¼þ¹æÔò½á¹¹Ìå(À©Õ¹)
typedef struct tagNET_DVR_ONE_AID_RULE_V41
{   
    BYTE                        byEnable;                 // ÊÇ·ñÆôÓÃÊÂ¼þ¹æÔò
    BYTE                        byLaneNo;                 // ¹ØÁª³µµÀºÅ
    BYTE                        byRes1[2];                // ±£Áô×Ö½Ú
    BYTE                        byRuleName[NAME_LEN];     // ¹æÔòÃû³Æ 
    DWORD                       dwEventType;              // ½»Í¨ÊÂ¼þ¼ì²âÀàÐÍ TRAFFIC_AID_TYPE
    NET_VCA_SIZE_FILTER         struSizeFilter;           // ³ß´ç¹ýÂËÆ÷
    NET_VCA_POLYGON             struPolygon;              // ¹æÔòÇøÓò
    NET_DVR_AID_PARAM           struAIDParam;             // ÊÂ¼þ²ÎÊý
    NET_DVR_SCHEDTIME           struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];// ²¼·ÀÊ±¼ä¶Î
    NET_DVR_HANDLEEXCEPTION_V30 struHandleType;              //´¦Àí·½Ê½ 
    BYTE                        byRelRecordChan[MAX_IVMS_IP_CHANNEL]; //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ£º1±íÊ¾´¥·¢¸ÃÍ¨µÀ£»0±íÊ¾²»´¥·¢ 
    BYTE                        byRes2[60];               //±£Áô
}NET_DVR_ONE_AID_RULE_V41, *LPNET_DVR_ONE_AID_RULE_V41;

// ½»Í¨ÊÂ¼þ¹æÔò(À©Õ¹)
typedef struct tagNET_DVR_AID_RULECFG_V41
{
    DWORD   dwSize;                     // ½á¹¹Ìå´óÐ¡ 
    BYTE    byPicProType;               // ±¨¾¯Ê±Í¼Æ¬´¦Àí·½Ê½ 0-²»´¦Àí ·Ç0-ÉÏ´«
    BYTE    byRes1[3];                  // ±£Áô×Ö½Ú
    NET_DVR_JPEGPARA struPictureParam;     // Í¼Æ¬¹æ¸ñ½á¹¹
    NET_DVR_ONE_AID_RULE_V41  struAIDRule[MAX_AID_RULE];  //¹æÔòÊý×é
    BYTE    byRes2[128];                //±£Áô
} NET_DVR_AID_RULECFG_V41, *LPNET_DVR_AID_RULECFG_V41;

// ½»Í¨Í³¼Æ²ÎÊý½á¹¹Ìå
typedef struct tagNET_DVR_ONE_TPS_RULE
{
    BYTE    byEnable;                   //ÊÇ·ñÊ¹ÄÜ³µµÀ½»Í¨¹æÔò²ÎÊý
    BYTE    byLaneID;                    //³µµÀID
    BYTE    byRes1[2];
    DWORD   dwCalcType;                 //Í³¼Æ²ÎÊýÀàÐÍITS_TPS_TYPE
    NET_VCA_SIZE_FILTER struSizeFilter; //³ß´ç¹ýÂËÆ÷ 
    NET_VCA_POLYGON struVitrualLoop;    //ÐéÄâÏßÈ¦
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_2];//²¼·ÀÊ±¼ä
    NET_DVR_HANDLEEXCEPTION_V30 struHandleType;    //´¦Àí·½Ê½,Ò»°ãÎª´¦ÀíÊÇ·ñÉÏ´«ÖÐÐÄ£¬ÆäËû¹¦ÄÜ²»ÐèÒª
    BYTE    byRes2[20];                         //±£Áô×Ö½Ú
}NET_DVR_ONE_TPS_RULE, *LPNET_DVR_ONE_TPS_RULE;

// ½»Í¨²ÎÊýÍ³¼Æ¹æÔòÅäÖÃ½á¹¹Ìå
typedef struct tagNET_DVR_TPS_RULECFG
{
    DWORD   dwSize;              // ½á¹¹´óÐ¡
    NET_DVR_ONE_TPS_RULE struOneTpsRule[MAX_TPS_RULE]; // ÏÂ±ê¶ÔÓ¦½»Í¨²ÎÊýID
    BYTE    byRes2[40];         // ±£Áô×Ö½Ú
}NET_DVR_TPS_RULECFG, *LPNET_DVR_TPS_RULECFG;

// ½»Í¨Í³¼Æ²ÎÊý½á¹¹Ìå(À©Õ¹)
typedef struct tagNET_DVR_ONE_TPS_RULE_V41
{
    BYTE    byEnable;                     //ÊÇ·ñÊ¹ÄÜ³µµÀ½»Í¨¹æÔò²ÎÊý
    BYTE    byLaneID;                      //³µµÀID
    BYTE    byRes1[2];                    //±£Áô
    DWORD   dwCalcType;                   // Í³¼Æ²ÎÊýÀàÐÍITS_TPS_TYPE
    NET_VCA_SIZE_FILTER  struSizeFilter;  //³ß´ç¹ýÂËÆ÷ 
    NET_VCA_POLYGON      struVitrualLoop; //ÐéÄâÏßÈ¦
    NET_DVR_SCHEDTIME    struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//²¼·ÀÊ±¼ä
    NET_DVR_HANDLEEXCEPTION_V30 struHandleType;       //´¦Àí·½Ê½ 
    BYTE    byRes2[60];                   // ±£Áô×Ö½Ú
}NET_DVR_ONE_TPS_RULE_V41, *LPNET_DVR_ONE_TPS_RULE_V41;


// ½»Í¨²ÎÊýÍ³¼Æ¹æÔòÅäÖÃ½á¹¹Ìå(À©Õ¹)
typedef struct tagNET_DVR_TPS_RULECFG_V41
{
    DWORD   dwSize;         // ½á¹¹´óÐ¡
    NET_DVR_ONE_TPS_RULE_V41 struOneTpsRule[MAX_TPS_RULE]; // ÏÂ±ê¶ÔÓ¦½»Í¨²ÎÊýID
    BYTE    byRes[128];     // ±£Áô
}NET_DVR_TPS_RULECFG_V41, *LPNET_DVR_TPS_RULECFG_V41;

// ½»Í¨ÊÂ¼þÐÅÏ¢
typedef struct tagNET_DVR_AID_INFO
{
    BYTE            byRuleID;   // ¹æÔòÐòºÅ£¬Îª¹æÔòÅäÖÃ½á¹¹ÏÂ±ê£¬0-16
    BYTE            byRes1[3];
    BYTE            byRuleName[NAME_LEN]; //  ¹æÔòÃû³Æ
    DWORD           dwAIDType;  // ±¨¾¯ÊÂ¼þÀàÐÍ
    NET_DVR_DIRECTION   struDirect; // ±¨¾¯Ö¸ÏòÇøÓò  
    BYTE    bySpeedLimit; //ÏÞËÙÖµ£¬µ¥Î»km/h[0,255]
    BYTE    byCurrentSpeed; //µ±Ç°ËÙ¶ÈÖµ£¬µ¥Î»km/h[0,255]
    BYTE            byRes2[38];  // ±£Áô×Ö½Ú 
}NET_DVR_AID_INFO, *LPNET_DVR_AID_INFO;

// ½»Í¨ÊÂ¼þ±¨¾¯ 
typedef struct tagNET_DVR_AID_ALARM
{
    DWORD               dwSize;         // ½á¹¹³¤¶È
    DWORD               dwRelativeTime;    // Ïà¶ÔÊ±±ê
    DWORD               dwAbsTime;        // ¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO      struDevInfo;    // Ç°¶ËÉè±¸ÐÅÏ¢
    NET_DVR_AID_INFO    struAIDInfo;    // ½»Í¨ÊÂ¼þÐÅÏ¢
    DWORD               dwPicDataLen;   // ·µ»ØÍ¼Æ¬µÄ³¤¶È Îª0±íÊ¾Ã»ÓÐÍ¼Æ¬£¬´óÓÚ0±íÊ¾¸Ã½á¹¹ºóÃæ½ô¸úÍ¼Æ¬Êý¾Ý
    BYTE                *pImage;        // Ö¸ÏòÍ¼Æ¬µÄÖ¸Õë 
    BYTE                byRes[40];      // ±£Áô×Ö½Ú  
}NET_DVR_AID_ALARM, *LPNET_DVR_AID_ALARM;

// ³µµÀ¶ÓÁÐ½á¹¹Ìå 
typedef struct tagNET_DVR_LANE_QUEUE
{
    NET_VCA_POINT   struHead;       //¶ÓÁÐÍ·
    NET_VCA_POINT   struTail;       //¶ÓÁÐÎ²
    DWORD           dwLength;      //Êµ¼Ê¶ÓÁÐ³¤¶È µ¥Î»ÎªÃ× [0-500]
}NET_DVR_LANE_QUEUE, *LPNET_DVR_LANE_QUEUE; 

typedef enum tagTRAFFIC_DATA_VARY_TYPE
{
    NO_VARY,         //ÎÞ±ä»¯ 
        VEHICLE_ENTER,   //³µÁ¾½øÈëÐéÄâÏßÈ¦
        VEHICLE_LEAVE,   //³µÁ¾Àë¿ªÐéÄâÏßÈ¦ 
        UEUE_VARY        //¶ÓÁÐ±ä»¯             
}TRAFFIC_DATA_VARY_TYPE; 

typedef struct tagNET_DVR_LANE_PARAM
{
    BYTE    byRuleName[NAME_LEN];  //³µµÀ¹æÔòÃû³Æ 
    BYTE    byRuleID;              //¹æÔòÐòºÅ£¬Îª¹æÔòÅäÖÃ½á¹¹ÏÂ±ê£¬0-7 
    BYTE    byVaryType;            //³µµÀ½»Í¨²ÎÊý±ä»¯ÀàÐÍ ²ÎÕÕ TRAFFIC_DATA_VARY_TYPE
    BYTE    byLaneType;               //³µµÀÉÏÐÐ»òÏÂÐÐ
    BYTE    byRes1;
    DWORD    dwLaneVolume;         //³µµÀÁ÷Á¿ £¬Í³¼ÆÓÐ¶àÉÙ³µ×ÓÍ¨¹ý
    DWORD   dwLaneVelocity;        //³µµÀËÙ¶È£¬¹«Àï¼ÆËã
    DWORD   dwTimeHeadway;         //³µÍ·Ê±¾à£¬ÒÔÃë¼ÆËã
    DWORD   dwSpaceHeadway;        //³µÍ·¼ä¾à£¬ÒÔÃ×À´¼ÆËã
    float   fSpaceOccupyRation;    //³µµÀÕ¼ÓÐÂÊ£¬°Ù·Ö±È¼ÆËã£¨¿Õ¼äÉÏ)
    NET_DVR_LANE_QUEUE  struLaneQueue;    //³µµÀ¶ÓÁÐ³¤¶È
    NET_VCA_POINT       struRuleLocation; //ÏßÈ¦¹æÔòµÄÖÐÐÄµãÎ»ÖÃ
    BYTE    byRes2[32];
}NET_DVR_LANE_PARAM, *LPNET_DVR_LANE_PARAM;


typedef struct tagNET_DVR_TPS_INFO
{
    DWORD   dwLanNum;   // ½»Í¨²ÎÊýµÄ³µµÀÊýÄ¿
    NET_DVR_LANE_PARAM  struLaneParam[MAX_TPS_RULE];
}NET_DVR_TPS_INFO, *LPNET_DVR_TPS_INFO;

typedef struct tagNET_DVR_TPS_ALARM
{
    DWORD             dwSize;          //½á¹¹Ìå´óÐ¡
    DWORD             dwRelativeTime;  //Ïà¶ÔÊ±±ê
    DWORD             dwAbsTime;       //¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO  struDevInfo;     //Ç°¶ËÉè±¸ÐÅÏ¢
    NET_DVR_TPS_INFO  struTPSInfo;     //½»Í¨ÊÂ¼þÐÅÏ¢
    BYTE              byRes1[32];      //±£Áô×Ö½Ú
}NET_DVR_TPS_ALARM, *LPNET_DVR_TPS_ALARM;

typedef enum tagTRAFFIC_DATA_VARY_TYPE_EX_ENUM
{    
    ENUM_TRAFFIC_VARY_NO             = 0x00,   //ÎÞ±ä»¯
        ENUM_TRAFFIC_VARY_VEHICLE_ENTER  = 0x01,   //³µÁ¾½øÈëÐéÄâÏßÈ¦
        ENUM_TRAFFIC_VARY_VEHICLE_LEAVE  = 0x02,   //³µÁ¾Àë¿ªÐéÄâÏßÈ¦
        ENUM_TRAFFIC_VARY_QUEUE          = 0x04,   //¶ÓÁÐ±ä»¯
        ENUM_TRAFFIC_VARY_STATISTIC      = 0x08,   //Í³¼ÆÊý¾Ý±ä»¯£¨Ã¿·ÖÖÓ±ä»¯Ò»´Î°üÀ¨Æ½¾ùËÙ¶È£¬³µµÀ¿Õ¼ä/Ê±¼äÕ¼ÓÐÂÊ£¬½»Í¨×´Ì¬£©        
}TRAFFIC_DATA_VARY_TYPE_EX_ENUM;  

typedef struct tagNET_DVR_LANE_PARAM_V41
{
    BYTE               byRuleName[NAME_LEN]; // ³µµÀ¹æÔòÃû³Æ
    BYTE               byRuleID;             // ¹æÔòÐòºÅ£¬Îª¹æÔòÅäÖÃ½á¹¹ÏÂ±ê£¬0-7 
    BYTE               byLaneType;             // ³µµÀÉÏÐÐ»òÏÂÐÐ
    BYTE               byTrafficState;       // ³µµÀµÄ½»Í¨×´Ì¬£¬0-ÎÞÐ§£¬1-³©Í¨£¬2-Óµ¼·£¬3-¶ÂÈû
    BYTE               byLaneNo;            //³µµÀºÅ
    DWORD              dwVaryType;           // ³µµÀ½»Í¨²ÎÊý±ä»¯ÀàÐÍ²ÎÕÕ  TRAFFIC_DATA_VARY_TYPE_EX_ENUM£¬°´Î»Çø·Ö
    DWORD              dwTpsType;            // Êý¾Ý±ä»¯ÀàÐÍ±êÖ¾£¬±íÊ¾µ±Ç°ÉÏ´«µÄÍ³¼Æ²ÎÊýÖÐ£¬ÄÄÐ©Êý¾ÝÓÐÐ§£¬²ÎÕÕITS_TPS_TYPE,°´Î»Çø·Ö
    DWORD              dwLaneVolume;         // ³µµÀÁ÷Á¿£¬Í³¼ÆÓÐ¶àÉÙ³µ×ÓÍ¨¹ý
    DWORD              dwLaneVelocity;       // ³µµÀËÙ¶È£¬¹«Àï¼ÆËã
    DWORD              dwTimeHeadway ;       // ³µÍ·Ê±¾à£¬ÒÔÃë¼ÆËã
    DWORD              dwSpaceHeadway;       // ³µÍ·¼ä¾à£¬ÒÔÃ×À´¼ÆËã
    float              fSpaceOccupyRation;   // ³µµÀÕ¼ÓÐÂÊ£¬°Ù·Ö±È¼ÆËã£¨¿Õ¼äÉÏ)
    float              fTimeOccupyRation;    // Ê±¼äÕ¼ÓÐÂÊ£¬°Ù·Ö±È¼ÆËã
    DWORD              dwLightVehicle;       // Ð¡ÐÍ³µÊýÁ¿
    DWORD              dwMidVehicle;         // ÖÐÐÍ³µÊýÁ¿
    DWORD              dwHeavyVehicle;       // ÖØÐÍ³µÊýÁ¿
    NET_DVR_LANE_QUEUE struLaneQueue;        // ³µµÀ¶ÓÁÐ³¤¶È
    NET_VCA_POINT      struRuleLocation;     // ¹æÔòÎ»ÖÃÐéÄâÏßÈ¦µÄÖÐÐÄ
    DWORD               dwOversizeVehicle;    // ´óÐÍ³µÊýÁ¿
    BYTE               byRes2[60];           // ±£Áô
}NET_DVR_LANE_PARAM_V41, *LPNET_DVR_LANE_PARAM_V41;


typedef struct tagNET_DVR_TPS_INFO_V41
{
    DWORD                   dwLanNum;          // ½»Í¨²ÎÊýµÄ³µµÀÊýÄ¿
    NET_DVR_LANE_PARAM_V41  struLaneParam[MAX_TPS_RULE];
    BYTE                    byRes[32];         //±£Áô
}NET_DVR_TPS_INFO_V41, *LPNET_DVR_TPS_INFO_V41;

// ÈËÁ³¹æÔòÅäÖÃ 
typedef struct tagNET_DVR_FACEDETECT_RULECFG
{
    DWORD          dwSize;              // ½á¹¹Ìå´óÐ¡
    BYTE           byEnable;            // ÊÇ·ñÆôÓÃ
    BYTE           byEventType;            //¾¯½äÊÂ¼þÀàÐÍ£¬ 0-Òì³£ÈËÁ³; 1-Õý³£ÈËÁ³;2-Òì³£ÈËÁ³&Õý³£ÈËÁ³;
    BYTE           byUpLastAlarm;       //2011-04-06 ÊÇ·ñÏÈÉÏ´«×î½üÒ»´ÎµÄ±¨¾¯
    BYTE           byUpFacePic; //ÊÇ·ñÉÏ´«ÈËÁ³×ÓÍ¼£¬0-·ñ£¬1-ÊÇ    
    BYTE           byRuleName[NAME_LEN];
    NET_VCA_POLYGON     struVcaPolygon;    // ÈËÁ³¼ì²â¹æÔòÇøÓò
    BYTE           byPicProType;    //±¨¾¯Ê±Í¼Æ¬´¦Àí·½Ê½ 0-²»´¦Àí ·Ç0-ÉÏ´«
    BYTE           bySensitivity;   // ¹æÔòÁéÃô¶È
    WORD            wDuration;      // ´¥·¢ÈËÁ³±¨¾¯Ê±¼äãÐÖµ
    NET_DVR_JPEGPARA    struPictureParam;         //Í¼Æ¬¹æ¸ñ½á¹¹
    NET_VCA_SIZE_FILTER struSizeFilter;         //³ß´ç¹ýÂËÆ÷
    NET_DVR_SCHEDTIME   struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_2];//²¼·ÀÊ±¼ä
    NET_DVR_HANDLEEXCEPTION_V30 struHandleType;      //´¦Àí·½Ê½ 
    BYTE           byRelRecordChan[MAX_CHANNUM_V30];            //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
    BYTE           byPicRecordEnable;  /*2012-3-1ÊÇ·ñÆôÓÃÍ¼Æ¬´æ´¢, 0-²»ÆôÓÃ, 1-ÆôÓÃ*/
    BYTE            byRes2[39];         //±£Áô×Ö½Ú
}NET_DVR_FACEDETECT_RULECFG, *LPNET_DVR_FACEDETECT_RULECFG;

typedef struct tagNET_DVR_FACE_PIPCFG
{    
    BYTE byEnable; //ÊÇ·ñ¿ªÆô»­ÖÐ»­
    BYTE byBackChannel; //±³¾°Í¨µÀºÅ£¨Ãæ°åÍ¨µÀ£©
    BYTE byPosition; //µþ¼ÓÎ»ÖÃ£¬0-×óÉÏ,1-×óÏÂ,2-ÓÒÉÏ,3-ÓÒÏÂ
    BYTE byPIPDiv; //·ÖÆÁÏµÊý(ÈËÁ³»­Ãæ:Ãæ°å»­Ãæ)£¬0-1:4,1-1:9,2-1:16
    BYTE byRes[4];
}NET_DVR_FACE_PIPCFG, *LPNET_DVR_FACE_PIPCFG;

typedef struct tagNET_DVR_FACEDETECT_RULECFG_V41
{
    DWORD dwSize;              // ½á¹¹Ìå´óÐ¡
    BYTE  byEnable;            // ÊÇ·ñÆôÓÃ
    BYTE  byEventType;            //¾¯½äÊÂ¼þÀàÐÍ£¬ 0-Òì³£ÈËÁ³; 1-Õý³£ÈËÁ³;2-Òì³£ÈËÁ³&Õý³£ÈËÁ³;
    BYTE  byUpLastAlarm;       //2011-04-06 ÊÇ·ñÏÈÉÏ´«×î½üÒ»´ÎµÄ±¨¾¯
    BYTE  byUpFacePic; //ÊÇ·ñÉÏ´«ÈËÁ³×ÓÍ¼£¬0-·ñ£¬1-ÊÇ    
    BYTE  byRuleName[NAME_LEN];
    NET_VCA_POLYGON struVcaPolygon;    // ÈËÁ³¼ì²â¹æÔòÇøÓò
    BYTE  byPicProType;    //±¨¾¯Ê±Í¼Æ¬´¦Àí·½Ê½ 0-²»´¦Àí ·Ç0-ÉÏ´«
    BYTE  bySensitivity;   // ¹æÔòÁéÃô¶È
    WORD  wDuration;      // ´¥·¢ÈËÁ³±¨¾¯Ê±¼äãÐÖµ
    NET_DVR_JPEGPARA    struPictureParam;         //Í¼Æ¬¹æ¸ñ½á¹¹
    NET_VCA_SIZE_FILTER struSizeFilter;         //³ß´ç¹ýÂËÆ÷
    NET_DVR_SCHEDTIME   struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//²¼·ÀÊ±¼ä
    NET_DVR_HANDLEEXCEPTION_V30 struHandleType;      //´¦Àí·½Ê½ 
    BYTE  byRelRecordChan[MAX_CHANNUM_V30];            //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
    BYTE  byPicRecordEnable;  /*2012-10-22ÊÇ·ñÆôÓÃÍ¼Æ¬´æ´¢, 0-²»ÆôÓÃ, 1-ÆôÓÃ*/
    BYTE  byRes1;
    WORD  wAlarmDelay; //2012-10-22ÖÇÄÜ±¨¾¯ÑÓÊ±£¬0-5s,1-10,2-30s,3-60s,4-120s,5-300s,6-600s
    NET_DVR_FACE_PIPCFG struFacePIP; //2012-11-7»­ÖÐ»­²ÎÊý
    WORD  wRelSnapChan[MAX_REL_SNAPCHAN_NUM]; //¹ØÁª×¥Í¼Í¨µÀ£¬µ±Ö÷Í¨µÀ±¨¾¯Ê±£¬Í¬Ê±»áÉÏ´«¹ØÁªÍ¨µÀµÄ×¥ÅÄÍ¼Æ¬£¬0±íÊ¾²»¹ØÁª£¬ÆäËûÖµÎª¹ØÁªÍ¨µÀºÅ
    BYTE  byRes[22];         //±£Áô×Ö½Ú
}NET_DVR_FACEDETECT_RULECFG_V41, *LPNET_DVR_FACEDETECT_RULECFG_V41;

typedef struct tagNET_DVR_FACEDETECT_ALARM
{
    DWORD   dwSize;         //½á¹¹´óÐ¡
    DWORD     dwRelativeTime; //Ïà¶ÔÊ±±ê
    DWORD    dwAbsTime;        //¾ø¶ÔÊ±±ê
    BYTE    byRuleName[NAME_LEN];   //¹æÔòÃû³Æ
    NET_VCA_TARGET_INFO  struTargetInfo;//±¨¾¯Ä¿±êÐÅÏ¢
    NET_VCA_DEV_INFO       struDevInfo;//Ç°¶ËÉè±¸ÐÅÏ¢
    DWORD   dwPicDataLen;    //·µ»ØÍ¼Æ¬µÄ³¤¶È Îª0±íÊ¾Ã»ÓÐÍ¼Æ¬£¬´óÓÚ0±íÊ¾¸Ã½á¹¹ºóÃæ½ô¸úÍ¼Æ¬Êý¾Ý*/
    BYTE    byAlarmPicType;    // 0-Òì³£ÈËÁ³±¨¾¯Í¼Æ¬ 1- ÈËÁ³Í¼Æ¬,2-¶àÕÅÈËÁ³ 
    BYTE    byPanelChan;    /*2012-3-1ÈËÁ³Í¨µÀ¹ØÁªµÄÃæ°åÍ¨µÀ*/
    BYTE    byRelAlarmPicNum; //¹ØÁªÍ¨µÀ±¨¾¯Í¼Æ¬ÊýÁ¿
    BYTE    byRes1;
    DWORD   dwFacePicDataLen;//ÈËÁ³Í¼Æ¬µÄ³¤¶È Îª0±íÊ¾Ã»ÓÐÍ¼Æ¬£¬´óÓÚ0±íÊ¾¸Ã½á¹¹ºóÃæ½ô¸úÍ¼Æ¬Êý¾Ý*/
    DWORD   dwAlarmID;    //±¨¾¯ID£¬ÓÃÒÔ±êÊ¶Í¨µÀ¼ä¹ØÁª²úÉúµÄ×éºÏ±¨¾¯£¬0±íÊ¾ÎÞÐ§
    BYTE    byRes2[44];   // ±£Áô×Ö½Ú
    BYTE    *pFaceImage; //Ö¸ÏòÈËÁ³Í¼Ö¸Õë
    BYTE    *pImage;                           //Ö¸ÏòÍ¼Æ¬µÄÖ¸Õë
}NET_DVR_FACEDETECT_ALARM, *LPNET_DVR_FACEDETECT_ALARM;

typedef struct tagNET_DVR_EVENT_PARAM_UNION
{
    DWORD   uLen[3];            // ÁªºÏÌå´óÐ¡Îª12×Ö½Ú
    DWORD  dwHumanIn;      //ÓÐÎÞÈË½Ó½ü 0 - ÎÞÈË 1- ÓÐÈË  
    float       fCrowdDensity;  // ÈËÔ±¾Û¼¯Öµ
}NET_DVR_EVENT_PARAM_UNION, *LPNET_DVR_EVENT_PARAM_UNION;

// Ä¿Ç°Ö»ÓÐÓÐÈËÎÞÈËÊÂ¼þºÍÈËÔ±¾Û¼¯ÊÂ¼þÊµÊ±±¨¾¯ÉÏ´«
typedef struct tagNET_DVR_EVENT_INFO
{
    BYTE   byRuleID;                // Rule ID
    BYTE   byRes[3];                // ±£Áô×Ö½Ú
    BYTE   byRuleName[NAME_LEN];    // ¹æÔòÃû³Æ
    DWORD       dwEventType;            // ²ÎÕÕVCA_EVENT_TYPE
    NET_DVR_EVENT_PARAM_UNION uEventParam;  // 
}NET_DVR_EVENT_INFO, *LPNET_DVR_EVENT_INFO;

typedef struct tagNET_DVR_EVENT_INFO_LIST
{
    BYTE            byNum;        // ÊÂ¼þÊµÊ±ÐÅÏ¢¸öÊý
    BYTE            byRes1[3];            // ±£Áô×Ö½Ú
    NET_DVR_EVENT_INFO struEventInfo[MAX_RULE_NUM];    // ÊÂ¼ÊÊµÊ±ÐÅÏ¢
}NET_DVR_EVENT_INFO_LIST,*LPNET_DVR_EVENT_INFO_LIST;

typedef struct tagNET_DVR_RULE_INFO_ALARM
{
    DWORD             dwSize;                // ½á¹¹Ìå´óÐ¡
    DWORD         dwRelativeTime;     // Ïà¶ÔÊ±±ê
    DWORD        dwAbsTime;            // ¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO      struDevInfo;        // Ç°¶ËÉè±¸ÐÅÏ¢
    NET_DVR_EVENT_INFO_LIST struEventInfoList;    //ÊÂ¼þÐÅÏ¢ÁÐ±í
    BYTE            byRes2[40];            // ±£Áô×Ö½Ú
}NET_DVR_RULE_INFO_ALARM, *LPNET_DVR_RULE_INFO_ALARM;

//µ¥Ìõ³¡¾°Ê±¼ä¶Î
typedef struct tagNET_DVR_ONE_SCENE_TIME
{
    BYTE     byActive;                     //0 -ÎÞÐ§,1¨CÓÐÐ§
    BYTE     byRes1[3];                    //±£Áô
    DWORD    dwSceneID;                    //³¡¾°ID
    NET_DVR_SCHEDTIME struEffectiveTime;   //³¡¾°ÆðÐ§Ê±¼ä
    BYTE     byRes2[16];                   //±£Áô
}NET_DVR_ONE_SCENE_TIME, *LPNET_DVR_ONE_SCENE_TIME ;

//³¡¾°ÆðÐ§Ê±¼ä¶ÎÅäÖÃ
typedef struct tagNET_DVR_SCENE_TIME_CFG
{   
    DWORD  dwSize;                                               //½á¹¹´óÐ¡
    NET_DVR_ONE_SCENE_TIME struSceneTime[MAX_SCENE_TIMESEG_NUM]; //³¡¾°Ê±¼ä¶ÎÊý×é
    BYTE   byRes[64];                                            //±£Áô
}NET_DVR_SCENE_TIME_CFG, *LPNET_DVR_SCENE_TIME_CFG;


//µ¥Ìõ³¡¾°ÅäÖÃÐÅÏ¢
typedef struct  tagNET_DVR_ONE_SCENE_CFG_
{    
    BYTE   byEnable;                 //ÊÇ·ñÆôÓÃ¸Ã³¡¾°,0-²»ÆôÓÃ 1- ÆôÓÃ
    BYTE   byDirection;              //¼à²â·½Ïò 1-ÉÏÐÐ£¬2-ÏÂÐÐ£¬3-Ë«Ïò£¬4-ÓÉ¶«ÏòÎ÷£¬5-ÓÉÄÏÏò±±£¬6-ÓÉÎ÷Ïò¶«£¬7-ÓÉ±±ÏòÄÏ£¬8-ÆäËü
    BYTE   byRes1[2];                //±£Áô
    DWORD  dwSceneID;                //³¡¾°ID(Ö»¶Á), 0 - ±íÊ¾¸Ã³¡¾°ÎÞÐ§
    BYTE   bySceneName[NAME_LEN];    //³¡¾°Ãû³Æ
    NET_DVR_PTZPOS struPtzPos;       //ptz ×ø±ê
    DWORD  dwTrackTime;              //Çò»ú¸ú×ÙÊ±¼ä[5,300] Ãë£¬TFS(½»Í¨È¡Ö¤)Ä£Ê½ÏÂÓÐÐ§
    BYTE   byRes2[24];               //±£Áô
}NET_DVR_ONE_SCENE_CFG, *LPNET_DVR_ONE_SCENE_CFG;

//³¡¾°ÅäÖÃ½á¹¹Ìå
typedef struct tagNET_DVR_SCENE_CFG
{
    DWORD dwSize;                                          //½á¹¹´óÐ¡
    NET_DVR_ONE_SCENE_CFG struSceneCfg[MAX_ITS_SCENE_NUM]; //³¡¾°ÅäÖÃÐÅÏ¢
    BYTE   byRes[40];                                      //±£Áô
}NET_DVR_SCENE_CFG,*LPNET_DVR_SCENE_CFG;

//¶à³¡¾°²Ù×÷Ìõ¼þ
typedef struct tagNET_DVR_SCENE_COND
{
    DWORD   dwSize;       //½á¹¹´óÐ¡
    LONG    lChannel;     //Í¨µÀºÅ
    DWORD   dwSceneID;    //³¡¾°ID, 0-±íÊ¾¸Ã³¡¾°ÎÞÐ§
    BYTE    byRes[48];    //±£Áô
}NET_DVR_SCENE_COND, *LPNET_DVR_SCENE_COND;

//È¡Ö¤·½Ê½
typedef struct tagNET_DVR_FORENSICS_MODE
{
    DWORD  dwSize;      //½á¹¹´óÐ¡
    BYTE   byMode;      // 0-ÊÖ¶¯È¡Ö¤ ,1-×Ô¶¯È¡Ö¤£¬2-°ë×Ô¶¯¸ú×ÙºÍ¾²Ì¬È¡Ö¤
    BYTE   byRes[23];   //±£Áô
}NET_DVR_FORENSICS_MODE,*LPNET_DVR_FORENSICS_MODE;

//±¨¾¯³¡¾°ÐÅÏ¢
typedef struct tagNET_DVR_SCENE_INFO_
{  
    DWORD           dwSceneID;              //³¡¾°ID, 0 - ±íÊ¾¸Ã³¡¾°ÎÞÐ§
    BYTE            bySceneName[NAME_LEN];  //³¡¾°Ãû³Æ
    BYTE            byDirection;            //¼à²â·½Ïò 1-ÉÏÐÐ£¬2-ÏÂÐÐ£¬3-Ë«Ïò£¬4-ÓÉ¶«ÏòÎ÷£¬5-ÓÉÄÏÏò±±£¬6-ÓÉÎ÷Ïò¶«£¬7-ÓÉ±±ÏòÄÏ£¬8-ÆäËü
    BYTE            byRes1[3];              //±£Áô
    NET_DVR_PTZPOS  struPtzPos;             //Ptz ×ø±ê
    BYTE            byRes2[64] ;            //±£Áô
}NET_DVR_SCENE_INFO,*LPNET_DVR_SCENE_INFO;

//½»Í¨ÊÂ¼þ±¨¾¯(À©Õ¹)
typedef struct tagNET_DVR_AID_ALARM_V41
{
    DWORD              dwSize;              //½á¹¹³¤¶È
    DWORD              dwRelativeTime;        //Ïà¶ÔÊ±±ê
    DWORD              dwAbsTime;            //¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO   struDevInfo;            //Ç°¶ËÉè±¸ÐÅÏ¢
    NET_DVR_AID_INFO   struAIDInfo;         //½»Í¨ÊÂ¼þÐÅÏ¢
    NET_DVR_SCENE_INFO struSceneInfo;       //³¡¾°ÐÅÏ¢
    DWORD              dwPicDataLen;        //Í¼Æ¬³¤¶È
    BYTE               *pImage;             //Ö¸ÏòÍ¼Æ¬µÄÖ¸Õë
    // 0-Êý¾ÝÖ±½ÓÉÏ´«; 1-ÔÆ´æ´¢·þÎñÆ÷URL(3.7Ver)Ô­ÏÈµÄÍ¼Æ¬Êý¾Ý±ä³ÉURLÊý¾Ý£¬Í¼Æ¬³¤¶È±ä³ÉURL³¤¶È
    BYTE               byDataType;
    BYTE               byLaneNo;  //¹ØÁª³µµÀºÅ 
    WORD               wMilliSecond;        //Ê±±êºÁÃë
    //¼à²âµã±àºÅ£¨Â·¿Ú±àºÅ¡¢ÄÚ²¿±àºÅ£©
    BYTE                  byMonitoringSiteID[MONITORSITE_ID_LEN/*48*/];
    BYTE                  byDeviceID[DEVICE_ID_LEN/*48*/];//Éè±¸±àºÅ
    BYTE               byRes[28]; // ±£Áô×Ö½Ú   
}NET_DVR_AID_ALARM_V41, *LPNET_DVR_AID_ALARM_V41;

//½»Í¨Í³¼ÆÐÅÏ¢±¨¾¯(À©Õ¹)
typedef struct tagNET_DVR_TPS_ALARM_V41
{
    DWORD                 dwSize;          // ½á¹¹Ìå´óÐ¡
    DWORD                 dwRelativeTime;  // Ïà¶ÔÊ±±ê
    DWORD                 dwAbsTime;       // ¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO      struDevInfo;     // Ç°¶ËÉè±¸ÐÅÏ¢
    NET_DVR_TPS_INFO_V41  struTPSInfo;     // ½»Í¨²ÎÊýÍ³¼ÆÐÅÏ¢ 
    //¼à²âµã±àºÅ£¨Â·¿Ú±àºÅ¡¢ÄÚ²¿±àºÅ£©
    BYTE           byMonitoringSiteID[MONITORSITE_ID_LEN/*48*/];
    BYTE           byDeviceID[DEVICE_ID_LEN/*48*/];//Éè±¸±àºÅ 
    DWORD                dwStartTime;  // ¿ªÊ¼Í³¼ÆÊ±¼ä
    DWORD                dwStopTime;    // ½áÊøÍ³¼ÆÊ±¼ä
    BYTE                   byRes[24];      // ±£Áô
} NET_DVR_TPS_ALARM_V41,*LPNET_DVR_TPS_ALARM_V41;

/*******************************ÖÇÄÜ½»Í¨ÊÂ¼þ end*****************************************/

#define XXX_MAJOR_VERSION      2

/* ×Ó°æ±¾ºÅ£¬ÐÔÄÜÓÅ»¯¡¢¾Ö²¿½á¹¹µ÷Õû¡¢Ä£¿éÄÚ¼¯³ÉÆäËû¿âµÄÖ÷°æ±¾ÌáÉýÊ±µÝÔö£¬×î´ó31 */

#define XXX_SUB_VERSION        3

/* ÐÞÕý°æ±¾ºÅ£¬ÐÞÕýbugºóµÝÔö£¬×î´ó31 */

#define XXX_REVISION_VERSION   4

typedef struct tagNET_DVR_VCA_VERSION
{
    WORD    wMajorVersion;        // Ö÷°æ±¾ºÅ
    WORD    wMinorVersion;        // ´Î°æ±¾ºÅ
    WORD    wRevisionNumber;    // ÐÞÕýºÅ
    WORD    wBuildNumber;        // ±àÒëºÅ
    WORD    wVersionYear;        //    °æ±¾ÈÕÆÚ-Äê
    BYTE    byVersionMonth;        //    °æ±¾ÈÕÆÚ-ÔÂ
    BYTE    byVersionDay;        //    °æ±¾ÈÕÆÚ-ÈÕ
    BYTE    byRes[8];            // ±£Áô×Ö½Ú
}NET_DVR_VCA_VERSION, *LPNET_DVR_VCA_VERSION;


/******************************ÖÇÄÜ end***********************************/

/******************************³µÅÆÊ¶±ð begin******************************************/
typedef struct tagNET_DVR_PLATE_PARAM
{    
    BYTE    byPlateRecoMode;    //³µÅÆÊ¶±ðµÄÄ£Ê½,Ä¬ÈÏÎª1(ÊÓÆµ´¥·¢Ä£Ê½)
    BYTE    byBelive;            //ÕûÅÆÖÃÐÅ¶ÈãÐÖµ, Ö»ÓÃÓÚÊÓÆµÊ¶±ð·½Ê½, ¸ù¾Ý±³¾°¸´ÔÓ³Ì¶ÈÉèÖÃ, Îó´¥·¢ÂÊ¸ß¾ÍÉè¸ß, Â©³µÂÊ¸ß¾ÍÉèµÍ, ½¨ÒéÔÚ80-90·¶Î§ÄÚ
    BYTE    byRes[22];          //±£Áô×Ö½Ú
}NET_DVR_PALTE_PARAM, *LPNET_DVR_PALTE_PARAM;

typedef struct tagNET_DVR_PLATECFG
{    
    DWORD        dwSize;
    DWORD    dwEnable;                           /* ÊÇ·ñÆôÓÃÊÓÆµ³µÅÆÊ¶±ð 0£­·ñ 1£­ÊÇ */
    BYTE    byPicProType;    //±¨¾¯Ê±Í¼Æ¬´¦Àí·½Ê½ 0-²»´¦Àí ·Ç0-ÉÏ´«
    BYTE    byRes1[3];  // ±£Áô×Ö½Ú
    NET_DVR_JPEGPARA struPictureParam;         //Í¼Æ¬¹æ¸ñ½á¹¹
    NET_DVR_PALTE_PARAM struPlateParam;   // ³µÅÆÊ¶±ð²ÎÊýÅäÖÃ
    NET_DVR_HANDLEEXCEPTION struHandleType;       /* ´¦Àí·½Ê½ */
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT];//²¼·ÀÊ±¼ä
    BYTE    byRelRecordChan[MAX_CHANNUM];        //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
    BYTE   byRes[20];   // ±£Áô×Ö½Ú
}NET_DVR_PLATECFG, *LPNET_DVR_PLATECFG;

// ³µÅÆÊ¶±ð½á¹û×Ó½á¹¹
typedef struct tagNET_DVR_PLATE_INFO
{
    BYTE  byPlateType;                    //³µÅÆÀàÐÍ
    BYTE  byColor;                        //³µÅÆÑÕÉ«
    BYTE  byBright;                        //³µÅÆÁÁ¶È
    BYTE  byLicenseLen;                    //³µÅÆ×Ö·û¸öÊý
    BYTE  byEntireBelieve;                //Õû¸ö³µÅÆµÄÖÃÐÅ¶È£¬-100
    BYTE  byRegion;     // ÇøÓòË÷ÒýÖµ 0-±£Áô£¬1-Å·ÖÞ(EU)£¬2-¶íÓïÇøÓò(ER)£¬3-Å·ÖÞ&¶íÂÞË¹(EU&CIS) ,0xff-ËùÓÐ
    BYTE  byCountry;     // ¹ú¼ÒË÷ÒýÖµ£¬²ÎÕÕÃ¶¾ÙCOUNTRY_INDEX£¨²»Ö§³Ö"COUNTRY_ALL = 0xff, //ALL  È«²¿"£©
    BYTE  byRes[33];                    //±£Áô
    NET_VCA_RECT    struPlateRect;        //³µÅÆÎ»ÖÃ
    char sLicense[MAX_LICENSE_LEN];        //³µÅÆºÅÂë
    BYTE byBelieve[MAX_LICENSE_LEN];    //¸÷¸öÊ¶±ð×Ö·ûµÄÖÃÐÅ¶È£¬Èç¼ì²âµ½³µÅÆ"ÕãA12345", ÖÃÐÅ¶ÈÎª,20,30,40,50,60,70£¬Ôò±íÊ¾"Õã"×ÖÕýÈ·µÄ¿ÉÄÜÐÔÖ»ÓÐ%£¬"A"×ÖµÄÕýÈ·µÄ¿ÉÄÜÐÔÊÇ%
}NET_DVR_PLATE_INFO, *LPNET_DVR_PLATE_INFO;

typedef struct tagNET_DVR_PLATERECO_RESULE
{
    DWORD dwSize;
    DWORD    dwRelativeTime;                //Ïà¶ÔÊ±±ê
    DWORD    dwAbsTime;                        //¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO struDevInfo;           // Ç°¶ÎÉè±¸ÐÅÏ¢
    NET_DVR_PLATE_INFO struPlateInfo;
    DWORD dwPicDataLen;                        //·µ»ØÍ¼Æ¬µÄ³¤¶È Îª0±íÊ¾Ã»ÓÐÍ¼Æ¬£¬´óÓÚ0±íÊ¾¸Ã½á¹¹ºóÃæ½ô¸úÍ¼Æ¬Êý¾Ý*/
    DWORD dwRes[4];                            //±£Áô£¬ÉèÖÃÎª0
    BYTE  *pImage;                           //Ö¸ÏòÍ¼Æ¬µÄÖ¸Õë
}NET_DVR_PLATERECO_RESULE, *LPNET_DVR_PLATERECO_RESULE;

/******************************³µÅÆÊ¶±ð end******************************************/

/*******************************ÊÓÆµ×ÛºÏÆ½Ì¨***********************************/
typedef struct 
{
    NET_DVR_TIME strLogTime;
    DWORD    dwMajorType;    //Main type 1-alarm; 2-abnormal; 3-operation; 0xff-all 
    DWORD    dwMinorType;    //Hypo-Type 0-all;
    BYTE    sPanelUser[MAX_NAMELEN]; //user ID for local panel operation
    BYTE    sNetUser[MAX_NAMELEN];//user ID for network operation
    NET_DVR_IPADDR    struRemoteHostAddr;//remote host IP
    DWORD    dwParaType;//parameter type
    DWORD    dwChannel;//channel number
    DWORD    dwDiskNumber;//HD number
    DWORD    dwAlarmInPort;//alarm input port
    DWORD    dwAlarmOutPort;//alarm output port
    DWORD   dwInfoLen;
    BYTE    byDevSequence;//²ÛÎ»ºÅ
    BYTE    byMacAddr[MACADDR_LEN];//MACµØÖ·,6
    BYTE    sSerialNumber[SERIALNO_LEN];//ÐòÁÐºÅ£¬48
    char    sInfo[LOG_INFO_LEN - SERIALNO_LEN - MACADDR_LEN - 1 ];
}NET_DVR_LOG_MATRIX, *LPNET_DVR_LOG_MATRIX;

//2009-11-21 ÊÓÆµ×ÛºÏÆ½Ì¨
typedef struct tagVEDIOPLATLOG
{
    BYTE bySearchCondition;//ËÑË÷Ìõ¼þ£¬0-°´²ÛÎ»ºÅËÑË÷£¬1-°´ÐòÁÐºÅËÑË÷£¬2-°´MACµØÖ·½øÐÐËÑË÷
    //²ÛÎ»ºÅ£¬0-79£º¶ÔÓ¦×ÓÏµÍ³µÄ²ÛÎ»ºÅ£»
    //0xff£º±íÊ¾ËÑË÷ËùÓÐµÄÈÕÖ¾£¬°üÀ¨78KºÍËùÓÐ6467£»
    //0xfe£º±íÊ¾ËÑË÷78KÉÏµÄÈÕÖ¾£»0xfd£º×ÓÓòÈÕÖ¾£»0xfc£ºÓòÈÕÖ¾¡£¡£
    BYTE byDevSequence;
    BYTE  sSerialNumber[SERIALNO_LEN];//ÐòÁÐºÅ£¬48
    BYTE  byMacAddr[MACADDR_LEN];//MACµØÖ·,6
} NET_DVR_VEDIOPLATLOG, *LPNET_DVR_VEDIOPLATLOG;

typedef struct tagNET_DVR_CODESYSTEMABILITY
{
    DWORD dwSize;
    DWORD dwAbilityVersion;//ÄÜÁ¦¼¯°æ±¾ºÅ£¬¸ß16Î»±íÊ¾Ö÷°æ±¾£¬µÍ16Î»±íÊ¾´Î°æ±¾ 
    DWORD dwSupportMaxVideoFrameRate;//µ¥Î»(K)
                                     /*°´Î»:
                                     0:¶¨Ê±Â¼Ïñ£»
                                     1:¶¨Ê±|ÊÂ¼þ´¥·¢Â¼Ïñ 
                                     2:ÒÆ¶¯Õì²âÂ¼Ïñ£»
                                     3:ÍøÂç¿ª¹ØÁ¿±¨¾¯Â¼Ïñ£»
                                     4:ÒÆ¶¯Õì²â|ÍøÂç¿ª¹ØÁ¿±¨¾¯Â¼Ïñ£»
                                     5:ÒÆ¶¯Õì²â&ÍøÂç¿ª¹ØÁ¿±¨¾¯Â¼Ïñ£»
                                     6:ÖÜ½ç·À·¶´¥·¢Â¼Ïñ£»
                                     7:ÈËÁ³¼ì²â´¥·¢Â¼Ïñ£»
                                     8:³µÅÆÊ¶±ð´¥·¢Â¼Ïñ£»
    9:ÊÖ¶¯Â¼Ïñ*/
    DWORD dwSupportRecordType;
    BYTE  bySupportLinkMode;//°´Î»:µÚ0Î»:±íÊ¾Ö÷ÂëÁ÷£¬µÚ1Î»:±íÊ¾×ÓÂëÁ÷
    BYTE  bySupportStringRow;//Ö§³Ö×Ö·ûµþ¼ÓÐÐÊý
    BYTE  bySupportHideNum;//Ö§³ÖÊÓÆµÕÚµ²ÊýÁ¿
    BYTE  byRes1;
    /*0-DCIF£¬1-CIF£¬2-QCIF£¬3-4CIF£¬4-2CIF£¬6-QVGA(320*240), 16-VGA£¬17-UXGA£¬18-SVGA£¬19-HD720p£¬20-XVGA£¬21-HD900p£¬22-SXGAp£¬27-HD1080i£¬28-2560*1920£¬29-1600*304£¬30-2048*1536£¬31-2448*2048£¬32-2448*1200£¬33-2448*800 £¬34-XGA£¨1024x768£©£¬35-SXGA£¨1280x1024£©*/
    BYTE  byMainStreamSupportResolution[8];//Ö÷ÂëÁ÷Ö§³ÖµÄ·Ö±æÂÊ£¬°´Î»
    BYTE  bySubStreamSupportResolution[8];//×ÓÂëÁ÷Ö§³ÖµÄ·Ö±æÂÊ£¬°´Î»
    BYTE  byEventStreamSupportResolution[8];//ÊÂ¼þ´¥·¢ÂëÁ÷Ö§³ÖµÄ·Ö±æÂÊ£¬°´Î»
    BYTE  byNotSupportPreview;//ÊÇ·ñÖ§³ÖÔ¤ÀÀ,1-²»Ö§³Ö£¬0-Ö§³Ö
    BYTE  byNotSupportStorage;//ÊÇ·ñÖ§³Ö´æ´¢,1-²»Ö§³Ö£¬0-Ö§³Ö
    BYTE  byRes2[98];//±£Áô        
}NET_DVR_CODESYSTEMABILITY, *LPNET_DVR_CODESYSTEMABILITY;

/********************************end*******************************************/

/******************************×¥ÅÄ»ú*******************************************/
//IOÊäÈëÅäÖÃ
typedef struct tagNET_DVR_IO_INCFG
{
    DWORD   dwSize;
    BYTE    byIoInStatus;//ÊäÈëµÄIO¿Ú×´Ì¬£¬0-ÏÂ½µÑØ£¬1-ÉÏÉýÑØ£¬2-ÉÏÉýÑØºÍÏÂ½µÑØ£¬3-¸ßµçÆ½£¬4-µÍµçÆ½
    BYTE    byRes[3];//±£Áô×Ö½Ú
}NET_DVR_IO_INCFG, *LPNET_DVR_IO_INCFG;

//IOÊä³öÅäÖÃ
typedef struct tagNET_DVR_IO_OUTCFG
{
    DWORD   dwSize;
    BYTE    byDefaultStatus;//IOÄ¬ÈÏ×´Ì¬£º0-µÍµçÆ½£¬1-¸ßµçÆ½ 
    BYTE    byIoOutStatus;//IOÆðÐ§Ê±×´Ì¬£º0-µÍµçÆ½£¬1-¸ßµçÆ½£¬2-Âö³å
    WORD    wAheadTime;//Êä³öIOÌáÇ°Ê±¼ä£¬µ¥Î»us
    DWORD   dwTimePluse;//Âö³å¼ä¸ôÊ±¼ä£¬µ¥Î»us
    DWORD   dwTimeDelay;//IOÓÐÐ§³ÖÐøÊ±¼ä£¬µ¥Î»us
    BYTE    byFreqMulti;        //±¶Æµ£¬ÊýÖµ·¶Î§[1,15]
    BYTE    byDutyRate;        //Õ¼¿Õ±È£¬[0,40%]
    BYTE    byRes[2];
}NET_DVR_IO_OUTCFG, *LPNET_DVR_IO_OUTCFG;

//ÉÁ¹âµÆÅäÖÃ
typedef struct tagNET_DVR_FLASH_OUTCFG
{
    DWORD  dwSize;
    BYTE   byMode;//ÉÁ¹âµÆÉÁË¸Ä£Ê½£¬0-²»ÉÁ£¬1-ÉÁ£¬2-¹ØÁªÉÁ£¬3-ÂÖÉÁ
    BYTE   byRelatedIoIn;//ÉÁ¹âµÆ¹ØÁªµÄÊäÈëIOºÅ£¨¹ØÁªÉÁÊ±´Ë²ÎÊýÓÐÐ§£©
    BYTE   byRecognizedLane;  /*¹ØÁªµÄIOºÅ£¬°´Î»±íÊ¾£¬bit0±íÊ¾IO1ÊÇ·ñ¹ØÁª£¬0-²»¹ØÁª£¬1-¹ØÁª*/
    BYTE   byDetectBrightness;/*×Ô¶¯¼ì²âÁÁ¶ÈÊ¹ÄÜÉÁ¹âµÆ0-²»¼ì²â£»1-¼ì²â*/
    BYTE   byBrightnessThreld;/*Ê¹ÄÜÉÁ¹âµÆÁÁ¶ÈãÐÖµ£¬·¶Î§[0,100],¸ßÓÚãÐÖµÉÁ*/
    BYTE   byStartHour;        //¿ªÊ¼Ê±¼ä-Ð¡Ê±,È¡Öµ·¶Î§0-23
    BYTE   byStartMinute;        //¿ªÊ¼Ê±¼ä-·Ö,È¡Öµ·¶Î§0-59
    BYTE   byEndHour;             //½áÊøÊ±¼ä-Ð¡Ê±,È¡Öµ·¶Î§0-23
    BYTE   byEndMinute;        //½áÊøÊ±¼ä-·Ö,È¡Öµ·¶Î§0-59
    BYTE   byFlashLightEnable;    //ÉèÖÃÉÁ¹âµÆÊ±¼äÊ¹ÄÜ:0-¹Ø;1-¿ª
    BYTE   byRes[2];
}NET_DVR_FLASH_OUTCFG, *LPNET_DVR_FLASH_OUTCFG;

//ºìÂÌµÆ¹¦ÄÜ£¨2¸öIOÊäÈëÒ»×é£©
typedef struct tagNET_DVR_LIGHTSNAPCFG
{
    DWORD   dwSize;
    BYTE    byLightIoIn;//ºìÂÌµÆµÄIO ºÅ
    BYTE    byTrigIoIn;//´¥·¢µÄIOºÅ
    BYTE    byRelatedDriveWay;//´¥·¢IO¹ØÁªµÄ³µµÀºÅ
    BYTE    byTrafficLight; //0-¸ßµçÆ½ºìµÆ£¬µÍµçÆ½ÂÌµÆ£»1-¸ßµçÆ½ÂÌµÆ£¬µÍµçÆ½ºìµÆ
    BYTE     bySnapTimes1; //ºìµÆ×¥ÅÄ´ÎÊý1£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬×î´ó5´Î 
    BYTE     bySnapTimes2; //ÂÌµÆ×¥ÅÄ´ÎÊý2£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬×î´ó5´Î 
    BYTE    byRes1[2];
    WORD    wIntervalTime1[MAX_INTERVAL_NUM];//ºìµÆÁ¬ÅÄ¼ä¸ôÊ±¼ä£¬ms
    WORD    wIntervalTime2[MAX_INTERVAL_NUM];//ÂÌµÆÁ¬ÅÄ¼ä¸ôÊ±¼ä£¬ms
    BYTE    byRecord;//´³ºìµÆÖÜÆÚÂ¼Ïñ±êÖ¾£¬0-²»Â¼Ïñ£¬1-Â¼Ïñ
    BYTE    bySessionTimeout;//´³ºìµÆÖÜÆÚÂ¼Ïñ³¬Ê±Ê±¼ä£¨Ãë£©
    BYTE    byPreRecordTime;//´³ºìµÆÂ¼ÏñÆ¬¶ÎÔ¤Â¼Ê±¼ä(Ãë)
    BYTE    byVideoDelay;//´³ºìµÆÂ¼ÏñÆ¬¶ÎÑÓÊ±Ê±¼ä£¨Ãë£©
    BYTE    byRes2[32];//±£Áô×Ö½Ú
}NET_DVR_LIGHTSNAPCFG, *LPNET_DVR_LIGHTSNAPCFG;

//²âËÙ¹¦ÄÜ(2¸öIOÊäÈëÒ»×é£©
typedef struct tagNET_DVR_MEASURESPEEDCFG
{
    DWORD   dwSize;
    BYTE    byTrigIo1;   //²âËÙµÚ1ÏßÈ¦
    BYTE    byTrigIo2;   //²âËÙµÚ2ÏßÈ¦
    BYTE    byRelatedDriveWay;//´¥·¢IO¹ØÁªµÄ³µµÀºÅ
    BYTE    byTestSpeedTimeOut;//²âËÙÄ£Ê½³¬Ê±Ê±¼ä£¬µ¥Î»s
    DWORD   dwDistance;//ÏßÈ¦¾àÀë,cm
    BYTE    byCapSpeed;//²âËÙÄ£Ê½ÆðÅÄËÙ¶È£¬µ¥Î»km/h
    BYTE    bySpeedLimit;//ÏÞËÙÖµ£¬µ¥Î»km/h
    BYTE     bySnapTimes1; //ÏßÈ¦1×¥ÅÄ´ÎÊý£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬×î´ó5´Î 
    BYTE     bySnapTimes2; //ÏßÈ¦2×¥ÅÄ´ÎÊý£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬×î´ó5´Î 
    WORD    wIntervalTime1[MAX_INTERVAL_NUM];//ÏßÈ¦1Á¬ÅÄ¼ä¸ôÊ±¼ä£¬ms
    WORD    wIntervalTime2[MAX_INTERVAL_NUM];//ÏßÈ¦2Á¬ÅÄ¼ä¸ôÊ±¼ä£¬ms
    BYTE    byRes[32];//±£Áô×Ö½Ú
}NET_DVR_MEASURESPEEDCFG, *LPNET_DVR_MEASURESPEEDCFG;


//ÅäÖÃÌõ¼þ
typedef struct tagNET_DVR_CLOUDSTORAGE_COND
{
    DWORD  dwSize;
    DWORD  dwChannel;
    BYTE    byRes1[64];
}NET_DVR_CLOUDSTORAGE_COND,*LPNET_DVR_CLOUDSTORAGE_COND;

//ÅäÖÃ½á¹¹
typedef struct tagNET_DVR_POOLPARAM
{
    DWORD  dwPoolID;// ÔÆ´æ´¢·ÖÅä½ÚµãºÅ
    BYTE    byRes[4];
}NET_DVR_POOLPARAM,*LPNET_DVR_POOLPARAM;

typedef struct tagNET_DVR_CLOUDSTORAGE_CFG
{
    DWORD   dwSize;
    BYTE    byEnable;//0-²»¿ªÆô£¬1-¿ªÆô
    BYTE    byRes[3];
    NET_DVR_IPADDR  struIP;
    WORD    wPort;//Êý¾Ý¶Ë¿Ú
    BYTE    byRes1[2];
    char    szUser[CLOUD_NAME_LEN/*48*/]; //ÓÃ»§Ãû
    char    szPassword[CLOUD_PASSWD_LEN/*48*/];     // ÃÜÂë
    NET_DVR_POOLPARAM  struPoolInfo[16];//Êý×é0±íÊ¾¿¨¿ÚÂ¼Ïñ³Ø£¬Êý×é1±íÊ¾Î¥ÕÂÂ¼Ïñ³Ø£¬Êý×é2±íÊ¾³µÁ¾Õì²âÊý¾Ý³Ø£¨IPC/D£©
    BYTE    byRes2[128];
}NET_DVR_CLOUDSTORAGE_CFG,*LPNET_DVR_CLOUDSTORAGE_CFG;

typedef  struct  tagNET_DVR_PARKLAMP_COND
{ 
    DWORD  dwSize;
    DWORD  dwChannel;   //Í¨µÀºÅ
    BYTE   byParkingIndex;   //Ïà¶Ô³µÎ»ºÅ£¨1¡«4£©
    BYTE   byRes[15];     //±£Áô
}NET_DVR_PARKLAMP_COND, *LPNET_DVR_PARKLAMP_COND;

typedef  struct  tagNET_DVR_PARKLAMP_INFOCFG
{ 
    DWORD dwSize;
    char  sLicense[MAX_LICENSE_LEN/*16*/];//³µÅÆºÅÂë
    char  sParkingNo[MAX_LICENSE_LEN/*16*/];//³µÎ»±àºÅ(Êµ¼ÊµÄ³µÎ»±àºÅ)
    BYTE   byLampFlicker;//0~²»ÉÁË¸ 1 ¡«ÉÁË¸ (³µÎ»Ö¸Ê¾µÆÉÁË¸)
    BYTE   byLampColor;//0- Ãð 1-ºì 2-ÂÌ  3-»Æ  4-À¶ 5-Æ·ºì 6-Çà 7-°×É«  (³µÎ»Ö¸Ê¾µÆÑÕÉ«)
    BYTE   byStatus; //³µÎ»×´Ì¬ 0-ÎÞ³µ£¬1-ÓÐ³µ
    BYTE   byColorDepth; //³µÉíÑÕÉ«ÉîÇ³£¬0-ÉîÉ«£¬1-Ç³É«
    BYTE   byColor;//³µÉíÑÕÉ«£¬0-ÆäËûÉ«£¬1-°×É«£¬2-ÒøÉ«£¬3-»ÒÉ«£¬4-ºÚÉ«£¬5-ºìÉ«£¬6-ÉîÀ¶£¬7-À¶É«£¬8-»ÆÉ«£¬9-ÂÌÉ«£¬10-×ØÉ«£¬11-·ÛÉ«£¬12-×ÏÉ«£¬0xff-Î´½øÐÐ³µÉíÑÕÉ«Ê¶±ð 
    //³µÁ¾Æ·ÅÆÀàÐÍÊ¶±ð£» ²Î¿¼Ã¶¾ÙÀàÐÍ VLR_VEHICLE_CLASS
    BYTE   byVehicleLogoRecog; 
    BYTE   byRes[250];//±£Áô
}NET_DVR_PARKLAMP_INFOCFG, *LPNET_DVR_PARKLAMP_INFOCFG;

//ÊÓÆµ²ÎÊýÅäÖÃ
typedef struct tagNET_DVR_VIDEOEFFECT
{
    BYTE byBrightnessLevel; /*0-100*/
    BYTE byContrastLevel; /*0-100*/
    BYTE bySharpnessLevel; /*0-100*/
    BYTE bySaturationLevel; /*0-100*/
    BYTE byHueLevel; /*0-100,£¨±£Áô£©*/
    BYTE byEnableFunc; //Ê¹ÄÜ£¬°´Î»±íÊ¾£¬bit0-SMART IR(·À¹ýÆØ)£¬bit1-µÍÕÕ¶È,bit2-Ç¿¹âÒÖÖÆÊ¹ÄÜ£¬0-·ñ£¬1-ÊÇ
    BYTE byLightInhibitLevel; //Ç¿¹âÒÖÖÆµÈ¼¶£¬[1-3]±íÊ¾µÈ¼¶
    BYTE byGrayLevel; //»Ò¶ÈÖµÓò£¬0-[0-255]£¬1-[16-235]
}NET_DVR_VIDEOEFFECT, *LPNET_DVR_VIDEOEFFECT;

//ÔöÒæÅäÖÃ
typedef struct tagNET_DVR_GAIN
{
    BYTE byGainLevel; /*ÔöÒæ£º0-100*/
    BYTE byGainUserSet; /*ÓÃ»§×Ô¶¨ÒåÔöÒæ£»0-100£¬¶ÔÓÚ×¥ÅÄ»ú£¬ÊÇCCDÄ£Ê½ÏÂµÄ×¥ÅÄÔöÒæ*/
    BYTE byRes[2];
    DWORD dwMaxGainValue;/*×î´óÔöÒæÖµ£¬µ¥Î»dB*/
}NET_DVR_GAIN, *LPNET_DVR_GAIN;

//°×Æ½ºâÅäÖÃ
typedef struct tagNET_DVR_WHITEBALANCE
{
BYTE byWhiteBalanceMode; /*0-ÊÖ¶¯°×Æ½ºâ£¨MWB£©,1-×Ô¶¯°×Æ½ºâ1£¨AWB1£©,2-×Ô¶¯°×Æ½ºâ2 (AWB2),3-×Ô¶¯¿ØÖÆ¸ÄÃûÎªËø¶¨°×Æ½ºâ(Locked WB)£¬
                         4-ÊÒÍâ(Indoor)£¬5-ÊÒÄÚ(Outdoor)6-ÈÕ¹âµÆ(Fluorescent Lamp)£¬7-ÄÆµÆ(Sodium Lamp)£¬
                         8-×Ô¶¯¸ú×Ù(Auto-Track)9-Ò»´Î°×Æ½ºâ(One Push)£¬10-ÊÒÍâ×Ô¶¯(Auto-Outdoor)£¬
                         11-ÄÆµÆ×Ô¶¯ (Auto-Sodiumlight)£¬12-Ë®ÒøµÆ(Mercury Lamp)£¬13-×Ô¶¯°×Æ½ºâ(Auto)£¬
14-°×³ãµÆ (IncandescentLamp)£¬15-Å¯¹âµÆ(Warm Light Lamp)£¬16-×ÔÈ»¹â(Natural Light) */
BYTE byWhiteBalanceModeRGain; /*ÊÖ¶¯°×Æ½ºâÊ±ÓÐÐ§£¬ÊÖ¶¯°×Æ½ºâ RÔöÒæ*/
BYTE byWhiteBalanceModeBGain; /*ÊÖ¶¯°×Æ½ºâÊ±ÓÐÐ§£¬ÊÖ¶¯°×Æ½ºâ BÔöÒæ*/
BYTE byRes[5];
}NET_DVR_WHITEBALANCE, *LPNET_DVR_WHITEBALANCE;

//ÆØ¹â¿ØÖÆ
typedef struct tagNET_DVR_EXPOSURE
{
    BYTE  byExposureMode; /*0 ÊÖ¶¯ÆØ¹â 1×Ô¶¯ÆØ¹â*/
    BYTE  byAutoApertureLevel; /* ×Ô¶¯¹âÈ¦ÁéÃô¶È, 0-10 */ 
    BYTE  byRes[2];
    DWORD dwVideoExposureSet; /* ×Ô¶¨ÒåÊÓÆµÆØ¹âÊ±¼ä£¨µ¥Î»us£©*//*×¢:×Ô¶¯ÆØ¹âÊ±¸ÃÖµÎªÆØ¹â×îÂýÖµ ÐÂÔö20-1s(1000000us)*/        
    DWORD dwExposureUserSet; /* ×Ô¶¨ÒåÆØ¹âÊ±¼ä,ÔÚ×¥ÅÄ»úÉÏÓ¦ÓÃÊ±£¬CCDÄ£Ê½Ê±ÊÇ×¥ÅÄ¿ìÃÅËÙ¶È*/   
    DWORD dwRes;    
} NET_DVR_EXPOSURE, *LPNET_DVR_EXPOSURE;

//¿í¶¯Ì¬ÅäÖÃ
typedef struct tagNET_DVR_WDR
{
    BYTE byWDREnabled; /*¿í¶¯Ì¬£º0 dsibale  1 enable 2 auto*/
    BYTE byWDRLevel1; /*0-F*/
    BYTE byWDRLevel2; /*0-F*/
    BYTE byWDRContrastLevel; /*0-100*/
    BYTE byRes[16];
} NET_DVR_WDR, *LPNET_DVR_WDR;

typedef struct tagNET_DVR_WDR_CFG
{
    DWORD  dwSize;   //½á¹¹Ìå´óÐ¡
    NET_DVR_WDR  struWDR; //ÅäÖÃÐÅÏ¢
}NET_DVR_WDR_CFG, *LPNET_DVR_WDR_CFG;


//ÈÕÒ¹×ª»»¹¦ÄÜÅäÖÃ
typedef struct tagNET_DVR_DAYNIGHT
{
    BYTE byDayNightFilterType; /*ÈÕÒ¹ÇÐ»»£º0-°×Ìì£¬1-Ò¹Íí£¬2-×Ô¶¯£¬3-¶¨Ê±£¬4-±¨¾¯ÊäÈë´¥·¢, 5-×Ô¶¯Ä£Ê½2£¨ÎÞ¹âÃô£©*/
    BYTE bySwitchScheduleEnabled; /*0 dsibale  1 enable,(±£Áô)*/
    //¶¨Ê±Ä£Ê½²ÎÊý
    BYTE byBeginTime; /*¿ªÊ¼Ê±¼ä£¨Ð¡Ê±£©£¬0-23*/
    BYTE byEndTime; /*½áÊøÊ±¼ä£¨Ð¡Ê±£©£¬0-23*/
    //Ä£Ê½2
    BYTE byDayToNightFilterLevel; //0-7
    BYTE byNightToDayFilterLevel; //0-7
    BYTE byDayNightFilterTime;//(60Ãë)
    //¶¨Ê±Ä£Ê½²ÎÊý
    BYTE byBeginTimeMin; //¿ªÊ¼Ê±¼ä£¨·Ö£©£¬0-59
    BYTE byBeginTimeSec; //¿ªÊ¼Ê±¼ä£¨Ãë£©£¬0-59
    BYTE byEndTimeMin; //½áÊøÊ±¼ä£¨·Ö£©£¬0-59
    BYTE byEndTimeSec; //½áÊøÊ±¼ä£¨Ãë£©£¬0-59
    //±¨¾¯ÊäÈë´¥·¢Ä£Ê½²ÎÊý
    BYTE byAlarmTrigState; //±¨¾¯ÊäÈë´¥·¢×´Ì¬£¬0-°×Ìì£¬1-Ò¹Íí
} NET_DVR_DAYNIGHT, *LPNET_DVR_DAYNIGHT;

//GammaÐ£Õý
typedef struct tagNET_DVR_GAMMACORRECT
{
    BYTE byGammaCorrectionEnabled; /*0 dsibale  1 enable*/
    BYTE byGammaCorrectionLevel; /*0-100*/
    BYTE byRes[6];
} NET_DVR_GAMMACORRECT, *LPNET_DVR_GAMMACORRECT;

//±³¹â²¹³¥ÅäÖÃ
typedef struct tagNET_DVR_BACKLIGHT
{
    BYTE byBacklightMode; /*±³¹â²¹³¥:0 off 1 UP¡¢2 DOWN¡¢3 LEFT¡¢4 RIGHT¡¢5MIDDLE¡¢6×Ô¶¨Òå£¬10-¿ª£¬11-×Ô¶¯£¬12-¶àÇøÓò±³¹â²¹³¥*/
    BYTE byBacklightLevel; /*0x0-0xF*/
    BYTE byRes1[2];
    DWORD dwPositionX1; //£¨X×ø±ê1£©
    DWORD dwPositionY1; //£¨Y×ø±ê1£©
    DWORD dwPositionX2; //£¨X×ø±ê2£©
    DWORD dwPositionY2; //£¨Y×ø±ê2£©
    BYTE byRes2[4];
} NET_DVR_BACKLIGHT, *LPNET_DVR_BACKLIGHT;

//Êý×Ö½µÔë¹¦ÄÜ
typedef struct tagNET_DVR_NOISEREMOVE
{
    BYTE byDigitalNoiseRemoveEnable; /*0-²»ÆôÓÃ£¬1-ÆÕÍ¨Ä£Ê½Êý×Ö½µÔë£¬2-×¨¼ÒÄ£Ê½Êý×Ö½µÔë*/
    BYTE byDigitalNoiseRemoveLevel; /*ÆÕÍ¨Ä£Ê½Êý×Ö½µÔë¼¶±ð£º0x0-0xF*/
    BYTE bySpectralLevel;       /*×¨¼ÒÄ£Ê½ÏÂ¿ÕÓòÇ¿¶È£º0-100*/
    BYTE byTemporalLevel;   /*×¨¼ÒÄ£Ê½ÏÂÊ±ÓòÇ¿¶È£º0-100*/
    BYTE byDigitalNoiseRemove2DEnable;         /* ×¥ÅÄÖ¡2D½µÔë£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ */    
    BYTE byDigitalNoiseRemove2DLevel;            /* ×¥ÅÄÖ¡2D½µÔë¼¶±ð£¬0-100 */
    BYTE byRes[2];
} NET_DVR_NOISEREMOVE, *LPNET_DVR_NOISEREMOVE;

//CMOSÄ£Ê½ÏÂÇ°¶Ë¾µÍ·ÅäÖÃ
typedef struct tagNET_DVR_CMOSMODCFG
{
    BYTE byCaptureMod;   //×¥ÅÄÄ£Ê½£º0-×¥ÅÄÄ£Ê½1£»1-×¥ÅÄÄ£Ê½2
    BYTE byBrightnessGate;//ÁÁ¶ÈãÐÖµ
    BYTE byCaptureGain1;   //×¥ÅÄÔöÒæ1,0-100
    BYTE byCaptureGain2;   //×¥ÅÄÔöÒæ2,0-100
    DWORD dwCaptureShutterSpeed1;//×¥ÅÄ¿ìÃÅËÙ¶È1
    DWORD dwCaptureShutterSpeed2;//×¥ÅÄ¿ìÃÅËÙ¶È2
    BYTE  byRes[4];
}NET_DVR_CMOSMODECFG, *LPNET_DVR_CMOSMODECFG;

//Ç°¶Ë²ÎÊýÅäÖÃ
typedef struct tagNET_DVR_CAMERAPARAMCFG
{
    DWORD dwSize;
    NET_DVR_VIDEOEFFECT struVideoEffect;/*ÁÁ¶È¡¢¶Ô±È¶È¡¢±¥ºÍ¶È¡¢Èñ¶È¡¢É«µ÷ÅäÖÃ*/    
    NET_DVR_GAIN struGain;/*×Ô¶¯ÔöÒæ*/
    NET_DVR_WHITEBALANCE struWhiteBalance;/*°×Æ½ºâ*/
    NET_DVR_EXPOSURE struExposure; /*ÆØ¹â¿ØÖÆ*/
    NET_DVR_GAMMACORRECT struGammaCorrect;/*GammaÐ£Õý*/
    NET_DVR_WDR struWdr;/*¿í¶¯Ì¬*/
    NET_DVR_DAYNIGHT struDayNight;/*ÈÕÒ¹×ª»»*/
    NET_DVR_BACKLIGHT struBackLight;/*±³¹â²¹³¥*/
    NET_DVR_NOISEREMOVE struNoiseRemove;/*Êý×Ö½µÔë*/
    BYTE byPowerLineFrequencyMode; /*0-50HZ; 1-60HZ*/
    /*
        0-×Ô¶¯¹âÈ¦, 
        1-ÊÖ¶¯¹âÈ¦, 
        2-P-Iris1,
        3-Union 3-9mm F1.6-2.7 (T5280-PQ1) [IPC5.1.7]
        4-Union 2.8-12mm F1.6-2.7 (T5289-PQ1) [IPC5.1.7]
        5-HIK 3.8-16mm F1.5£¨HV3816P-8MPIR)
        6-HIK 11-40mm F1.7 (HV1140P-8MPIR)
        7-HIK 2.7-12mm F1.2£¨TV2712P-MPIR£©
    */
    BYTE byIrisMode;  
    BYTE byMirror ;  /* ¾µÏñ£º0 off£¬1- leftright£¬2- updown£¬3-center */
    BYTE byDigitalZoom;  /*Êý×ÖËõ·Å:0 dsibale  1 enable*/
    BYTE byDeadPixelDetect;   /*»µµã¼ì²â,0 dsibale  1 enable*/
    BYTE byBlackPwl;/*ºÚµçÆ½²¹³¥ ,  0-255*/ 
    BYTE byEptzGate;// EPTZ¿ª¹Ø±äÁ¿:0-²»ÆôÓÃµç×ÓÔÆÌ¨£¬1-ÆôÓÃµç×ÓÔÆÌ¨
    BYTE byLocalOutputGate;//±¾µØÊä³ö¿ª¹Ø±äÁ¿0-±¾µØÊä³ö¹Ø±Õ1-±¾µØBNCÊä³ö´ò¿ª 2-HDMIÊä³ö¹Ø±Õ  
    //20-HDMI_720P50Êä³ö¿ª
    //21-HDMI_720P60Êä³ö¿ª
    //22-HDMI_1080I60Êä³ö¿ª
    //23-HDMI_1080I50Êä³ö¿ª
    //24-HDMI_1080P24Êä³ö¿ª
    //25-HDMI_1080P25Êä³ö¿ª
    //26-HDMI_1080P30Êä³ö¿ª
    //27-HDMI_1080P50Êä³ö¿ª
    //28-HDMI_1080P60Êä³ö¿ª
    //40-SDI_720P50,
    //41-SDI_720P60,
    //42-SDI_1080I50,
    //43-SDI_1080I60,
    //44-SDI_1080P24,
    //45-SDI_1080P25,
    //46-SDI_1080P30,
    //47-SDI_1080P50,
    //48-SDI_1080P60
    BYTE byCoderOutputMode;//±àÂëÆ÷fpgaÊä³öÄ£Ê½0Ö±Í¨3ÏñËØ°á¼Ò
    BYTE byLineCoding; //ÊÇ·ñ¿ªÆôÐÐ±àÂë£º0-·ñ£¬1-ÊÇ
    BYTE byDimmerMode; //µ÷¹âÄ£Ê½£º0-°ë×Ô¶¯£¬1-×Ô¶¯
    BYTE byPaletteMode; //µ÷É«°å£º0-°×ÈÈ£¬1-ºÚÈÈ£¬2-µ÷É«°å2£¬¡­£¬8-µ÷É«°å8
    BYTE byEnhancedMode; //ÔöÇ¿·½Ê½£¨Ì½²âÎïÌåÖÜ±ß£©£º0-²»ÔöÇ¿£¬1-1£¬2-2£¬3-3£¬4-4
    BYTE byDynamicContrastEN;    //¶¯Ì¬¶Ô±È¶ÈÔöÇ¿ 0-1
    BYTE byDynamicContrast;    //¶¯Ì¬¶Ô±È¶È 0-100
    BYTE byJPEGQuality;    //JPEGÍ¼ÏñÖÊÁ¿ 0-100
    NET_DVR_CMOSMODECFG struCmosModeCfg;//CMOSÄ£Ê½ÏÂÇ°¶Ë²ÎÊýÅäÖÃ£¬¾µÍ·Ä£Ê½´ÓÄÜÁ¦¼¯»ñÈ¡
    BYTE byFilterSwitch; //ÂË²¨¿ª¹Ø£º0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byFocusSpeed; //¾µÍ·µ÷½¹ËÙ¶È£º0-10
    BYTE byAutoCompensationInterval; //¶¨Ê±×Ô¶¯¿ìÃÅ²¹³¥£º1-120£¬µ¥Î»£º·ÖÖÓ
    BYTE bySceneMode;  //³¡¾°Ä£Ê½£º0-ÊÒÍâ£¬1-ÊÒÄÚ£¬2-Ä¬ÈÏ£¬3-Èõ¹â
}NET_DVR_CAMERAPARAMCFG, *LPNET_DVR_CAMERAPARAMCFG;

//Í¸Îí
typedef struct tagNET_DVR_DEFOGCFG
{
    BYTE byMode; //Ä£Ê½£¬0-²»ÆôÓÃ£¬1-×Ô¶¯Ä£Ê½£¬2-³£¿ªÄ£Ê½
    BYTE byLevel; //µÈ¼¶£¬0-100
    BYTE byRes[6]; 
}NET_DVR_DEFOGCFG, *LPNET_DVR_DEFOGCFG;

//µç×Ó·À¶¶
typedef struct tagNET_DVR_ELECTRONICSTABILIZATION
{
    BYTE byEnable;//Ê¹ÄÜ 0- ²»ÆôÓÃ£¬1- ÆôÓÃ
    BYTE byLevel; //µÈ¼¶£¬0-100
    BYTE byRes[6]; 
}NET_DVR_ELECTRONICSTABILIZATION, *LPNET_DVR_ELECTRONICSTABILIZATION;

//×ßÀÈÄ£Ê½
typedef struct tagNET_DVR_CORRIDOR_MODE_CCD
{
    BYTE       byEnableCorridorMode; //ÊÇ·ñÆôÓÃ×ßÀÈÄ£Ê½ 0¡«²»ÆôÓÃ£¬ 1¡«ÆôÓÃ
    BYTE       byRes[11];
}NET_DVR_CORRIDOR_MODE_CCD, *LPNET_DVR_CORRIDOR_MODE_CCD;

// SMART IR(·À¹ýÆØ)ÅäÖÃ²ÎÊý
typedef struct tagNET_DVR_SMARTIR_PARAM
{
    BYTE  byMode;//0¡«ÊÖ¶¯£¬1¡«×Ô¶¯
    BYTE  byIRDistance;//ºìÍâ¾àÀëµÈ¼¶(µÈ¼¶£¬¾àÀëÕý±ÈÀý)level:1~100 Ä¬ÈÏ:50£¨ÊÖ¶¯Ä£Ê½ÏÂÔö¼Ó£©
    BYTE  byShortIRDistance;// ½ü¹âµÆ¾àÀëµÈ¼¶(1~100)
    BYTE  byLongIRDistance;// Ô¶¹âµÆ¾àÀëµÈ¼¶(1~100)
}NET_DVR_SMARTIR_PARAM,*LPNET_DVR_SMARTIR_PARAM;

//ÔÚbyIrisMode ÎªP-Iris1Ê±ÉúÐ§£¬ÅäÖÃºìÍâ¹âÈ¦´óÐ¡µÈ¼¶£¬ÅäÖÃÄ£Ê½
typedef struct tagNET_DVR_PIRIS_PARAM
{
    BYTE  byMode;//0-×Ô¶¯£¬1-ÊÖ¶¯
    BYTE  byPIrisAperture;//ºìÍâ¹âÈ¦´óÐ¡µÈ¼¶(µÈ¼¶,¹âÈ¦´óÐ¡Õý±ÈÀý)level:1~100 Ä¬ÈÏ:50£¨ÊÖ¶¯Ä£Ê½ÏÂÔö¼Ó£©
    BYTE  byRes[6];
}NET_DVR_PIRIS_PARAM,*LPNET_DVR_PIRIS_PARAM;


//¼¤¹â²ÎÊýÅäÖÃ 2014-02-25
typedef struct tagNET_DVR_LASER_PARAM_CFG
{
    //Length = 16
    BYTE    byControlMode;        //¿ØÖÆÄ£Ê½            0-ÎÞÐ§£¬1-×Ô¶¯£¬2-ÊÖ¶¯ Ä¬ÈÏ×Ô¶¯
    BYTE    bySensitivity;        //¼¤¹âµÆÁéÃô¶È        0-100 Ä¬ÈÏ50
    BYTE    byTriggerMode;        //¼¤¹âµÆ´¥·¢Ä£Ê½    0-ÎÞÐ§£¬1-»úÐ¾´¥·¢£¬2-¹âÃô´¥·¢ Ä¬ÈÏ»úÐ¾´¥·¢
    BYTE    byBrightness;        //¿ØÖÆÄ£Ê½ÎªÊÖ¶¯Ä£Ê½ÏÂÓÐÐ§£»¼¤¹âµÆÁÁ¶È        0-255 Ä¬ÈÏ100
    BYTE    byAngle;            //¼¤¹âµÆ½Ç¶È        0-ÎÞÐ§£¬·¶Î§1-36  Ä¬ÈÏ12£¬¼¤¹âµÆÕÕÉä·¶Î§ÎªÒ»¸öÔ²È¦£¬µ÷½Ú¼¤¹â½Ç¶ÈÊÇµ÷½ÚÕâ¸öÔ²µÄ°ë¾¶µÄ´óÐ¡
    BYTE    byLimitBrightness;  //¿ØÖÆÄ£Ê½Îª×Ô¶¯Ä£Ê½ÏÂÓÐÐ§£»¼¤¹âµÆÁÁ¶ÈÏÞÖÆ 0~100 £¨ÐÂÔö£©2014-01-26
    BYTE    byEnabled ;         //ÊÖ¶¯¿ØÖÆ¼¤¹âµÆÊ¹ÄÜ 0-¹Ø±Õ£¬1-Æô¶¯
    BYTE    byIllumination;     //¼¤¹âµÆÇ¿¶ÈÅäÖÃ0~100
    BYTE    byLightAngle;       //²¹¹â½Ç¶È 0~100
    BYTE    byRes[7];           //±£Áô
} NET_DVR_LASER_PARAM_CFG, *LPNET_DVR_LASER_PARAM_CFG;

typedef struct tagNET_DVR_FFC_PARAM
{
    //1-Schedule Mode,2-Temperature Mode, 3-Off 
    BYTE   byMode;
    //£¨Ê±¼ä:°´ÄÜÁ¦ÏÔÊ¾£¬µ¥Î»·ÖÖÓ£¬Ñ¡ÏîÓÐ10,20,30,40,50,60,120,180,240£©
    BYTE   byRes1;
    WORD   wCompensateTime; //¶¨Ê±Ä£Ê½ÏÂÉúÐ§
    BYTE   byRes2[4];
}NET_DVR_FFC_PARAM,*LPNET_DVR_FFC_PARAM;

typedef struct tagNET_DVR_DDE_PARAM   //ÔÚsensorÖÐÍê³É
{
    BYTE  byMode;//1-Off,2-Normal Mode,3-Expert Mode
    BYTE  byNormalLevel;//ÆÕÍ¨Ä£Ê½µÈ¼¶·¶Î§[1,100]£¬ÆÕÍ¨Ä£Ê½ÏÂÉúÐ§
    BYTE  byExpertLevel;//×¨¼ÒÄ£Ê½µÈ¼¶·¶Î§[1,100]£¬×¨¼ÒÄ£Ê½ÏÂÉúÐ§
    BYTE  byRes[5];
}NET_DVR_DDE_PARAM,*LPNET_DVR_DDE_PARAM;

typedef struct tagNET_DVR_AGC_PARAM
{
    BYTE  bySceneType;//1-Normal Sence,2-Highlight Sence,3-Manual Sence
    BYTE  byLightLevel;//ÁÁ¶ÈµÈ¼¶[1,100]£»ÊÖ¶¯Ä£Ê½ÏÂÉúÐ§
    BYTE  byGainLevel; //ÔöÒæµÈ¼¶[1,100]£»ÊÖ¶¯Ä£Ê½ÏÂÉúÐ§
    BYTE  byRes[5];
}NET_DVR_AGC_PARAM,*LPNET_DVR_AGC_PARAM;

//×¥ÅÄ»úCCD²ÎÊý ¹²64×Ö½Ú
typedef struct tagNET_DVR_SNAP_CAMERAPARAMCFG 
{
    BYTE byWDRMode;   // ¿í¶¯Ì¬Ä£Ê½;0~¹Ø±Õ£¬1~Êý×Ö¿í¶¯Ì¬ 2~¿í¶¯Ì¬
    BYTE byWDRType;    // ¿í¶¯Ì¬ÇÐ»»Ä£Ê½; 0~Ç¿ÖÆÆôÓÃ£¬1~°´Ê±¼äÆôÓÃ£¬2~°´ÁÁ¶ÈÆôÓÃ
    BYTE byWDRLevel;   // ¿í¶¯Ì¬µÈ¼¶£¬0~6Ë÷Òý¶ÔÓ¦1-7£¬Ä¬ÈÏË÷Òý2£¨¼´3¼¶£©£»
    BYTE byRes1;
    NET_DVR_TIME_EX struStartTime; //¿ªÊ¼¿í¶¯Ì¬Ê±¼ä
    NET_DVR_TIME_EX struEndTime; //½áÊø¿í¶¯Ì¬Ê±¼ä
    BYTE byDayNightBrightness; //ÈÕÒ¹×ª»»ÁÁ¶ÈãÐÖµ£¬0-100£¬Ä¬ÈÏ50£»
    //¼ÇÒäÉ«ÔöÇ¿
    BYTE byMCEEnabled;//¼ÇÒäÉ«ÔöÇ¿Ê¹ÄÜ£¬true£º¿ªÆô£¬false£º¹Ø±Õ
    BYTE byMCELevel;//¼ÇÒäÉ«ÔöÇ¿Ç¿¶È£¬0~100£¬Ä¬ÈÏÖµ50
    //×Ô¶¯¶Ô±È¶È
    BYTE byAutoContrastEnabled;//×Ô¶¯¶Ô±È¶ÈÊ¹ÄÜ£¬true£º¿ªÆô£¬false£º¹Ø±Õ
    BYTE byAutoContrastLevel;//×Ô¶¯¶Ô±ÈµÈ¼¶£¨0-100£©,Ä¬ÈÏ50
    //Ï¸½ÚÔöÇ¿
    BYTE byLSEDetailEnabled;//Ï¸½ÚÔöÇ¿Ê¹ÄÜ£¬true£º¿ªÆô£¬false£º¹Ø±Õ
    BYTE byLSEDetailLevel;//Ï¸½ÚÔöÇ¿µÈ¼¶£¨0-100£©,Ä¬ÈÏ50
    // License Plate Definition Enhancement³µÅÆÔöÇ¿
    BYTE byLPDEEnabled;//³µÅÆÔöÇ¿Ê¹ÄÜ£¬true£º¿ªÆô£¬false£º¹Ø±Õ
    BYTE byLPDELevel;//³µÅÆÔöÇ¿µÈ¼¶£¨0-100£©,Ä¬ÈÏ50
    BYTE byRes[35];
} NET_DVR_SNAP_CAMERAPARAMCFG,*LPNET_DVR_SNAP_CAMERAPARAMCFG;

//¹âÑ§Í¸Îí²ÎÊý
typedef struct tagNET_DVR_OPTICAL_DEHAZE
{
    BYTE byEnable; //0~²»ÆôÓÃ¹âÑ§Í¸Îí£¬1~ÆôÓÃ¹âÑ§Í¸Îí
    BYTE byRes[7]; 
} NET_DVR_OPTICAL_DEHAZE, *LPNET_DVR_OPTICAL_DEHAZE;

//Ç°¶Ë²ÎÊýÅäÖÃ
typedef struct tagNET_DVR_CAMERAPARAMCFG_EX
{
    DWORD dwSize;
    NET_DVR_VIDEOEFFECT struVideoEffect;/*ÁÁ¶È¡¢¶Ô±È¶È¡¢±¥ºÍ¶È¡¢Èñ¶È¡¢É«µ÷ÅäÖÃ*/    
    NET_DVR_GAIN struGain;/*×Ô¶¯ÔöÒæ*/
    NET_DVR_WHITEBALANCE struWhiteBalance;/*°×Æ½ºâ*/
    NET_DVR_EXPOSURE struExposure; /*ÆØ¹â¿ØÖÆ*/
    NET_DVR_GAMMACORRECT struGammaCorrect;/*GammaÐ£Õý*/
    NET_DVR_WDR struWdr;/*¿í¶¯Ì¬*/
    NET_DVR_DAYNIGHT struDayNight;/*ÈÕÒ¹×ª»»*/
    NET_DVR_BACKLIGHT struBackLight;/*±³¹â²¹³¥*/
    NET_DVR_NOISEREMOVE struNoiseRemove;/*Êý×Ö½µÔë*/
    BYTE byPowerLineFrequencyMode; /*0-50HZ; 1-60HZ*/
    BYTE byIrisMode; /*0-×Ô¶¯¹âÈ¦ 1-ÊÖ¶¯¹âÈ¦, 2-P-Iris1, 3-Union 3-9mm F1.6-2.7 (T5280-PQ1), 4-Union 2.8-12mm F1.6-2.7 (T5289-PQ1),5-HIK 3.8-16mm F1.5£¨HV3816P-8MPIR£©*/ 
    BYTE byMirror ;  /* ¾µÏñ£º0 off£¬1- leftright£¬2- updown£¬3-center 4-Auto*/
    BYTE byDigitalZoom;  /*Êý×ÖËõ·Å:0 dsibale  1 enable*/
    BYTE byDeadPixelDetect;   /*»µµã¼ì²â,0 dsibale  1 enable*/
    BYTE byBlackPwl;/*ºÚµçÆ½²¹³¥ ,  0-255*/ 
    BYTE byEptzGate;// EPTZ¿ª¹Ø±äÁ¿:0-²»ÆôÓÃµç×ÓÔÆÌ¨£¬1-ÆôÓÃµç×ÓÔÆÌ¨
    BYTE byLocalOutputGate;//±¾µØÊä³ö¿ª¹Ø±äÁ¿0-±¾µØÊä³ö¹Ø±Õ1-±¾µØBNCÊä³ö´ò¿ª 2-HDMIÊä³ö¹Ø±Õ  
    //20-HDMI_720P50Êä³ö¿ª
    //21-HDMI_720P60Êä³ö¿ª
    //22-HDMI_1080I60Êä³ö¿ª
    //23-HDMI_1080I50Êä³ö¿ª
    //24-HDMI_1080P24Êä³ö¿ª
    //25-HDMI_1080P25Êä³ö¿ª
    //26-HDMI_1080P30Êä³ö¿ª
    //27-HDMI_1080P50Êä³ö¿ª
    //28-HDMI_1080P60Êä³ö¿ª
    BYTE byCoderOutputMode;//±àÂëÆ÷fpgaÊä³öÄ£Ê½0Ö±Í¨3ÏñËØ°á¼Ò
    BYTE byLineCoding; //ÊÇ·ñ¿ªÆôÐÐ±àÂë£º0-·ñ£¬1-ÊÇ
    BYTE byDimmerMode; //µ÷¹âÄ£Ê½£º0-°ë×Ô¶¯£¬1-×Ô¶¯
    BYTE byPaletteMode; //µ÷É«°å£º0-°×ÈÈ£¬1-ºÚÈÈ£¬2-µ÷É«°å2£¬¡­£¬8-µ÷É«°å8, 9-ÈÚºÏ1,10-²Êºç,11-ÈÚºÏ2,12-Ìúºì1,13-Ìúºì2,14-ÉîºÖÉ«,15-É«²Ê1,16-É«²Ê2,17-±ù»ð,18-Óê,19-ºìÈÈ,20-ÂÌÈÈ
    BYTE byEnhancedMode; //ÔöÇ¿·½Ê½£¨Ì½²âÎïÌåÖÜ±ß£©£º0-²»ÔöÇ¿£¬1-1£¬2-2£¬3-3£¬4-4
    BYTE byDynamicContrastEN;    //¶¯Ì¬¶Ô±È¶ÈÔöÇ¿ 0-1
    BYTE byDynamicContrast;    //¶¯Ì¬¶Ô±È¶È 0-100
    BYTE byJPEGQuality;    //JPEGÍ¼ÏñÖÊÁ¿ 0-100
    NET_DVR_CMOSMODECFG struCmosModeCfg;//CMOSÄ£Ê½ÏÂÇ°¶Ë²ÎÊýÅäÖÃ£¬¾µÍ·Ä£Ê½´ÓÄÜÁ¦¼¯»ñÈ¡
    BYTE byFilterSwitch; //ÂË²¨¿ª¹Ø£º0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byFocusSpeed; //¾µÍ·µ÷½¹ËÙ¶È£º0-10
    BYTE byAutoCompensationInterval; //¶¨Ê±×Ô¶¯¿ìÃÅ²¹³¥£º1-120£¬µ¥Î»£º·ÖÖÓ
    BYTE bySceneMode;  //³¡¾°Ä£Ê½£º0-ÊÒÍâ£¬1-ÊÒÄÚ£¬2-Ä¬ÈÏ£¬3-Èõ¹â
    NET_DVR_DEFOGCFG struDefogCfg;//Í¸Îí²ÎÊý
    NET_DVR_ELECTRONICSTABILIZATION struElectronicStabilization;//µç×Ó·À¶¶
    NET_DVR_CORRIDOR_MODE_CCD struCorridorMode;//×ßÀÈÄ£Ê½
    BYTE   byExposureSegmentEnable; //0~²»ÆôÓÃ,1~ÆôÓÃ  ÆØ¹âÊ±¼äºÍÔöÒæ³Ê½×ÌÝ×´µ÷Õû£¬±ÈÈçÆØ¹âÍùÉÏµ÷ÕûÊ±£¬ÏÈÌá¸ßÆØ¹âÊ±¼äµ½ÖÐ¼äÖµ£¬È»ºóÌá¸ßÔöÒæµ½ÖÐ¼äÖµ£¬ÔÙÌá¸ßÆØ¹âµ½×î´óÖµ£¬×îºóÌá¸ßÔöÒæµ½×î´óÖµ
    BYTE   byBrightCompensate;//ÁÁ¶ÈÔöÇ¿ [0~100]
    /*
    0-¹Ø±Õ¡¢1-640*480@25fps¡¢2-640*480@30ps¡¢3-704*576@25fps¡¢4-704*480@30fps¡¢5-1280*720@25fps¡¢6-1280*720@30fps¡¢
    7-1280*720@50fps¡¢8-1280*720@60fps¡¢9-1280*960@15fps¡¢10-1280*960@25fps¡¢11-1280*960@30fps¡¢
    12-1280*1024@25fps¡¢13--1280*1024@30fps¡¢14-1600*900@15fps¡¢15-1600*1200@15fps¡¢16-1920*1080@15fps¡¢
    17-1920*1080@25fps¡¢18-1920*1080@30fps¡¢19-1920*1080@50fps¡¢20-1920*1080@60fps¡¢21-2048*1536@15fps¡¢22-2048*1536@20fps¡¢
    23-2048*1536@24fps¡¢24-2048*1536@25fps¡¢25-2048*1536@30fps¡¢26-2560*2048@25fps¡¢27-2560*2048@30fps¡¢
    28-2560*1920@7.5fps¡¢29-3072*2048@25fps¡¢30-3072*2048@30fps¡¢31-2048*1536@12.5¡¢32-2560*1920@6.25¡¢
    33-1600*1200@25¡¢34-1600*1200@30¡¢35-1600*1200@12.5¡¢36-1600*900@12.5¡¢37-1280*960@12.5fps¡¢38-800*600@25fps¡¢39-800*600@30fps40¡¢
    4000*3000@12.5fps¡¢41-4000*3000@15fps¡¢42-4096*2160@20fps¡¢43-3840x2160@20fps ¡¢44-960*576@25fps¡¢45-960*480@30fps¡¢46-752*582@25fps¡¢
    47-768*494@30fps¡¢48-2560*1440@25fps¡¢49-2560*1440@30fps ¡¢50-720P@100fps¡¢51-720P@120fps¡¢52-2048*1536@50fps¡¢53-2048*1536@60fps¡¢
    54-3840*2160@25fps¡¢55-3840*2160@30fps¡¢56-4096*2160@25fps¡¢57-4096*2160@30fps ¡¢58-1280*1024@50fps¡¢59-1280*1024@60fps¡¢
    60-3072*2048@50fps¡¢61-3072*2048@60fps¡¢62-3072*1728@25fps¡¢63-3072*1728@30fps¡¢64-3072*1728@50fps¡¢65-3072*1728@60fps¡¢66-336*256@50fps¡¢67-336*256@60fps¡¢
    68-384*288@50fps¡¢69-384*288@60fps ¡¢70- 640 * 512@50fps ¡¢71- 640 * 512@60fps¡¢72-2592*1944@25fps¡¢73-2592*1944@30fps¡¢74-2688*1536@25fps¡¢75-2688*1536@30fps 
    76-2592*1944@20fps¡¢77-2592*1944@15fps¡¢78-2688*1520@20fps¡¢79-2688*1520@15fps¡¢80-2688*1520@25fps¡¢81-2688*1520@30fps¡¢82- 2720*2048@25fps¡¢ 83- 2720*2048@30fps¡¢
    84-336*256@25fps¡¢85- 384*288@25fps¡¢86-640*512@25fps¡¢87-1280*960@50fps¡¢88-1280*960@60fps¡¢89-1280*960@100fps¡¢90-1280*960@120fps¡¢91-4000*3000@20fps¡¢
    92-1920*1200@25fps¡¢93-1920*1200@30fps¡¢94-2560*1920@25fps¡¢95-2560*1920@20fps¡¢96-2560*1920@30fps¡¢97-1280*1920@25fps¡¢98-1280*1920@30fps
    99-4000*3000@24fps¡¢100-4000*3000@25fps¡¢101-4000*3000@10fps¡¢102- 384*288@30fps¡¢103-2560*1920@15fps¡¢104-2400*3840@25fps¡¢105-1200*1920@25fps
    106-4096*1800@30fps¡¢107-3840*1680@30fps¡¢108-2560*1120@30fps¡¢109-704*320@30fps¡¢110-1280*560@30fps¡¢111-4096*1800@25fps¡¢112-3840*1680@25fps
    113-2560*1120@25fps¡¢114-704*320@25fps¡¢115-1280*560@25fps¡¢116-2400*3840@24fps¡¢117-3840*2400@24fps¡¢118-3840*2400@25fps¡¢119-2560*1920@12.5fps
    120-2560*2048@12fps¡¢121-2560*2048@15fps¡¢122-2560*1536@25fps¡¢123-2560*1536@30fps¡¢124-2256*2048@25fps¡¢125-2256*2048@30fps¡¢126-2592*2592@12.5fps¡¢127-2592*2592@15fps¡¢
    128 - 640*512@30fps¡¢129-2048*1520@30fps¡¢130-2048*1520@25fps¡¢131-3840*2160@24fps*/
    BYTE   byCaptureModeN; //ÊÓÆµÊäÈëÄ£Ê½£¨NÖÆ£©
    BYTE   byCaptureModeP; //ÊÓÆµÊäÈëÄ£Ê½£¨PÖÆ£©
    NET_DVR_SMARTIR_PARAM struSmartIRParam; //ºìÍâ·Å¹ý±¬ÅäÖÃÐÅÏ¢
    NET_DVR_PIRIS_PARAM struPIrisParam;//PIrisÅäÖÃÐÅÏ¢¶ÔÓ¦byIrisMode×Ö¶Î´Ó2-PIris1¿ªÊ¼ÉúÐ§
    //2014-02-25 ÐÂÔö²ÎÊý
    NET_DVR_LASER_PARAM_CFG struLaserParam;    //¼¤¹â²ÎÊý
    NET_DVR_FFC_PARAM  struFFCParam;
    NET_DVR_DDE_PARAM  struDDEParam;
    NET_DVR_AGC_PARAM  struAGCParam;
    BYTE   byLensDistortionCorrection;//¾µÍ·»û±äÐ£Õý 0-¹Ø±Õ,1-¿ªÆô
    BYTE   byRes1[3]; 
    NET_DVR_SNAP_CAMERAPARAMCFG struSnapCCD ; //×¥ÅÄ»úCCD²ÎÊý£¬Ö»ÓÃÓÚ×¥ÅÄ»ú
    NET_DVR_OPTICAL_DEHAZE struOpticalDehaze;//¹âÑ§Í¸Îí²ÎÊý
    BYTE   byRes2[180];
}NET_DVR_CAMERAPARAMCFG_EX, *LPNET_DVR_CAMERAPARAMCFG_EX;

typedef struct tagNET_DVR_FOCUSING_POSITION_STATE
{
    DWORD   dwSize;
    BYTE    byState;//¾Û½¹µ½Î»×´Ì¬²ÎÊý 0-²»µ½Î»£¬1-µ½Î»
    BYTE    byRes[31];    
}NET_DVR_FOCUSING_POSITION_STATE, *LPNET_DVR_FOCUSING_POSITION_STATE;

typedef enum _VCA_PLATE_COLOR_
{
    VCA_BLUE_PLATE  = 0,   //À¶É«³µÅÆ
        VCA_YELLOW_PLATE,      //»ÆÉ«³µÅÆ
        VCA_WHITE_PLATE,       //°×É«³µÅÆ
        VCA_BLACK_PLATE,       //ºÚÉ«³µÅÆ
        VCA_GREEN_PLATE,       //ÂÌÉ«³µÅÆ
        VCA_BKAIR_PLATE,       //Ãñº½ºÚÉ«³µÅÆ
        VCA_OTHER = 0xff       //ÆäËû
}VCA_PLATE_COLOR;

//³µÅÆÀàÐÍ
typedef enum _VCA_PLATE_TYPE_
{
    VCA_STANDARD92_PLATE = 0,    //±ê×¼ÃñÓÃ³µÓë¾ü³µ
        VCA_STANDARD02_PLATE,        //02Ê½ÃñÓÃ³µÅÆ 
        VCA_WJPOLICE_PLATE,            //Îä¾¯³µ 
        VCA_JINGCHE_PLATE,            //¾¯³µ
        STANDARD92_BACK_PLATE,         //ÃñÓÃ³µË«ÐÐÎ²ÅÆ
        VCA_SHIGUAN_PLATE,          //Ê¹¹Ý³µÅÆ
        VCA_NONGYONG_PLATE,         //Å©ÓÃ³µ
        VCA_MOTO_PLATE              //Ä¦ÍÐ³µ
}VCA_PLATE_TYPE;

//³µÐÍÊ¶±ð½á¹û
typedef enum _VTR_RESULT
{
    VTR_RESULT_OTHER      =  0,  //Î´Öª
    VTR_RESULT_BUS        =  1,  //¿Í³µ
    VTR_RESULT_TRUCK      =  2,  //»õ³µ
    VTR_RESULT_CAR        =  3,  //½Î³µ
    VTR_RESULT_MINIBUS    =  4,  //Ãæ°ü³µ
    VTR_RESULT_SMALLTRUCK =  5,  //Ð¡»õ³µ
    VTR_RESULT_HUMAN      =  6,  //ÐÐÈË
    VTR_RESULT_TUMBREL    =  7,  //¶þÂÖ³µ
    VTR_RESULT_TRIKE      =  8,  //ÈýÂÖ³µ
    VTR_RESULT_SUV_MPV    =  9,  //SUV/MPV
    VTR_RESULT_MEDIUM_BUS =  10,  //ÖÐÐÍ¿Í³µ
    VTR_RESULT_MOTOR_VEHICLE = 11, //»ú¶¯³µ
    VTR_RESULT_NON_MOTOR_VEHICLE = 12,  //·Ç»ú¶¯³µ
    VTR_RESULT_SMALLCAR   = 13,   //Ð¡ÐÍ½Î³µ
    VTR_RESULT_MICROCAR   = 14,   //Î¢ÐÍ½Î³µ
    VTR_RESULT_PICKUP     = 15    //Æ¤¿¨³µ
}VTR_RESULT;


//³µÉíÑÕÉ«
typedef enum _VCR_CLR_CLASS
{
    VCR_CLR_UNSUPPORT  = 0,      //²»Ö§³Ö
        VCR_CLR_WHITE       = 1,   //°×
        VCR_CLR_SILVER        = 2,   //Òø
        VCR_CLR_GRAY       = 3,      //»Ò
        VCR_CLR_BLACK      = 4,      //ºÚ
        VCR_CLR_RED           = 5,      //ºì
        VCR_CLR_DARKBLUE   = 6,      //ÉîÀ¶
        VCR_CLR_BLUE       = 7,      //À¶
        VCR_CLR_YELLOW     = 8,      //»Æ
        VCR_CLR_GREEN      = 9,      //ÂÌ
        VCR_CLR_BROWN      = 10,  //×Ø
        VCR_CLR_PINK       = 11,  //·Û
        VCR_CLR_PURPLE     = 12,  //×Ï
        VCR_CLR_DARKGRAY   = 13,  //Éî»Ò
        VCR_CLR_CYAN       = 14  //ÇàÉ«
}VCR_CLR_CLASS;

//³µÁ¾²Ù×÷ÀàÐÍ 2013-11-04
typedef enum _VCA_OPERATE_TYPE_
{
    VCA_LICENSE_TYPE       = 0x1,  //³µÅÆºÅÂë
        VCA_PLATECOLOR_TYPE    = 0x2,  //³µÅÆÑÕÉ«
        VCA_CARDNO_TYPE        = 0x4,  //¿¨ºÅ
        VCA_PLATETYPE_TYPE     = 0x8,  //³µÅÆÀàÐÍ
        VCA_LISTTYPE_TYPE      = 0x10, //³µÁ¾Ãûµ¥ÀàÐÍ
        VCA_INDEX_TYPE         = 0x20, //Êý¾ÝÁ÷Ë®ºÅ 2014-02-25
        VCA_OPERATE_INDEX_TYPE = 0x40  //²Ù×÷Êý 2014-03-03
}VCA_OPERATE_TYPE;

typedef enum _VCA_ILLEGAL_TYPE_
{
    VCA_POSTPIC_TYPE          = 0x1, //¿¨¿ÚÍ¼Æ¬
        VCA_LOWSPEED_TYPE         = 0x2,  //µÍËÙ
        VCA_HIGHSPEED_TYPE        = 0x4,  //¸ßËÙ
        VCA_RETROGRADE_TYPE       = 0x8,  //ÄæÐÐ
        VCA_RUSH_REDLIGHT_TYPE    = 0x10,   //´³ºìµÆ
        VCA_PRESS_LANE_TYPE       = 0x20, //Ñ¹³µµÀÏß
        VCA_VIOLATE_GUIDE_TYPE    = 0x40,//²»°´µ¼Ïò
        VCA_ROAD_STRAND_TYPE      = 0x80,//Â·¿ÚÖÍÁô(Éè±¸²»Ö§³Ö)
        VCA_VEHICLE_ILLEGAL_LANE_TYPE  = 0x100,//»úÕ¼·Ç
        VCA_ILLEGAL_LANE_CHANGE_TYPE   = 0x200,//Î¥·¨±äµÀ
        VCA_ILLEGAL_LANE_DRIVE_TYPE    = 0x400,//²»°´³µµÀ
        VCA_VIOLATE_BAN_TYPE           = 0x800,//Î¥·¨½ûÁî
        VCA_CROSS_PARKING_TYPE         = 0x1000,//Â·¿ÚÍ£³µ
        VCA_GREEN_PARKING_TYPE         = 0x2000//ÂÌµÆÍ£³µ
}VCA_ILLEGAL_TYPE;

typedef enum _VCA_VEHICLE_TYPE_
{
    VCA_OTHER_TYPE          = 0x1,  //ÆäËü³µÐÍ
        VCA_SMALLCAR_TYPE       = 0x2,  //Ð¡ÐÍ³µ
        VCA_BIGCAR_TYPE         = 0x4,  //´óÐÍ³µ
        VCA_BUS_TYPE            = 0x8,  //¿Í³µ
        VCA_TRUCK_TYPE          = 0x10,  //»õ³µ
        VCA_CAR_TYPE            = 0x20,   //½Î³µ
        VCA_MINIBUS_TYPE        = 0x40,   //Ãæ°ü³µ
        VCA_SMALL_TRUCK_TYPE    = 0x80  //Ð¡»õ³µ
}VCA_VEHICLE_TYPE;

//³µÁ¾Æ·ÅÆÖ÷ÀàÐÍ
typedef enum _VLR_VEHICLE_CLASS
{
    VLR_OTHER       = 0,    //ÆäËü
        VLR_VOLKSWAGEN  = 1,    //´óÖÚ
        VLR_BUICK       = 2,    //±ð¿Ë
        VLR_BMW         = 3,    //±¦Âí
        VLR_HONDA       = 4,    //±¾Ìï
        VLR_PEUGEOT     = 5,    //±êÖÂ
        VLR_TOYOTA      = 6,    //·áÌï
        VLR_FORD        = 7,    //¸£ÌØ
        VLR_NISSAN      = 8,    //ÈÕ²ú
        VLR_AUDI        = 9,    //°ÂµÏ
        VLR_MAZDA       = 10,   //Âí×Ô´ï
        VLR_CHEVROLET   = 11,   //Ñ©·ðÀ¼
        VLR_CITROEN     = 12,   //Ñ©ÌúÁú
        VLR_HYUNDAI     = 13,   //ÏÖ´ú
        VLR_CHERY       = 14,   //ÆæÈð
        VLR_KIA         = 15,   //ÆðÑÇ
        VLR_ROEWE       = 16,   //ÈÙÍþ
        VLR_MITSUBISHI  = 17,   //ÈýÁâ
        VLR_SKODA       = 18,   //Ë¹¿Â´ï
        VLR_GEELY       = 19,   //¼ªÀû
        VLR_ZHONGHUA    = 20,   //ÖÐ»ª
        VLR_VOLVO       = 21,   //ÎÖ¶ûÎÖ
        VLR_LEXUS       = 22,   //À×¿ËÈøË¹
        VLR_FIAT        = 23,   //·ÆÑÇÌØ
        VLR_EMGRAND     = 24,   //µÛºÀ(¼ªÀû)
        VLR_DONGFENG    = 25,   //¶«·ç
        VLR_BYD         = 26,   //±ÈÑÇµÏ
        VLR_SUZUKI      = 27,   //ÁåÄ¾
        VLR_JINBEI      = 28,   //½ð±­
        VLR_HAIMA       = 29,   //º£Âí
        VLR_SGMW        = 30,   //ÎåÁâ
        VLR_JAC         = 31,   //½­»´
        VLR_SUBARU      = 32,   //Ë¹°ÍÂ³
        VLR_ENGLON      = 33,   //Ó¢Â×(¼ªÀû)
        VLR_GREATWALL   = 34,   //³¤³Ç
        VLR_HAFEI       = 35,   //¹þ·É
        VLR_ISUZU       = 36,   //ÎåÊ®Áå(ÇìÁå)
        VLR_SOUEAST     = 37,   //¶«ÄÏ
        VLR_CHANA       = 38,   //³¤°²
        VLR_FOTON       = 39,   //¸£Ìï
        VLR_XIALI       = 40,   //ÏÄÀû(Ò»Æû)
        VLR_BENZ        = 41,   //±¼³Û
        VLR_FAW         = 42,   //Ò»Æû
        VLR_NAVECO      = 43,   //ÒÀÎ¬¿Â
        VLR_LIFAN       = 44,   //Á¦·«
        VLR_BESTURN     = 45,   //Ò»Æû±¼ÌÚ(Ò»Æû)
        VLR_CROWN       = 46,   //»Ê¹Ú(·áÌï)
        VLR_RENAULT     = 47,   //À×Åµ
        VLR_JMC         = 48,   //JMC(½­Áå)
        VLR_MG          = 49,   //MGÃû¾ô
        VLR_KAMA        = 50,   //¿­Âí
        VLR_ZOTYE       = 51,   //ÖÚÌ©
        VLR_CHANGHE     = 52,   //²ýºÓ
        VLR_XMKINGLONG  = 53,   //ÏÃÃÅ½ðÁú(½ðÂÃ)
        VLR_HUIZHONG    = 54,   //ÉÏº£»ãÖÚ(ÉÏÆû¼¯ÍÅ)
        VLR_SZKINGLONG  = 55,   //ËÕÖÝ½ðÁú
        VLR_HIGER       = 56,   //º£¸ñ
        VLR_YUTONG      = 57,   //ÓîÍ¨
        VLR_CNHTC       = 58,   //ÖÐ¹úÖØÆû
        VLR_BEIBEN      = 59,   //±±±¼ÖØ¿¨
        VLR_XINGMA      = 60,   //»ªÁâÐÇÂí
        VLR_YUEJIN      = 61,   //Ô¾½ø
        VLR_HUANGHAI    = 62,   //»Æº£
        VLR_OLDWALL     = 63,   //ÀÏ¿î³¤³Ç
        VLR_CHANACOMMERCIAL = 64,   //³¤°²ÉÌÓÃ
        VLR_PORSCHE                   = 65,               // ±£Ê±½Ý
        VLR_CADILLAC                  = 66,               // ¿­µÏÀ­¿Ë
        VLR_INFINITI                  = 67,               // Ó¢·ÆÄáµÏ
        VLR_GLEAGLE                   = 68,               // ¼ªÀûÈ«ÇòÓ¥(¼ªÀû)
        VLR_JEEP                      = 69,               // JEEP(¼ªÆÕ)
        VLR_LANDROVER                 = 70,               // Â·»¢
        VLR_CHANGFENG                 = 71,               // ³¤·á
        VLR_BENNI                     = 72,               // ³¤°²±¼±¼(³¤°²)
        VLR_ERA                       = 73,               // ¸£ÌïÊ±´ú(Ê±´ú)
        VLR_TAURUS                    = 74,               // ³¤°²½ðÅ£ÐÇ(³¤°²ÉÌÓÃ)
        VLR_EADO                      = 75,               // ³¤°²ÒÝ¶¯
        VLR_SHANQI                    = 76,               // ÉÂÆû
        VLR_HONGYAN                   = 77,               // ºìÑÒÆû³µ(ÉÏÆûÒÀÎ¬¿ÂºìÑÒ)
        VLR_DRAGON                    = 78,               // °ÔÁúÆû³µ(¶«·çÁøÆû)
        VLR_JACTEXT                   = 79,               // ½­»´JAC (½­»´)
        VLR_JACBUS                    = 80,               // ½­»´ÏÖ´ú¿Í³µ (½­»´)
        VLR_ANKAI                     = 81,               // °²¿­¿Í³µ
        VLR_SHENLONG                  = 82,               // ÉêÁú¿Í³µ
        VLR_DAEWOO                    = 83,               // ´óÓî¿Í³µ
        VLR_WUZHENG                   = 84,               // ÎåÕ÷Æû³µ
        VLR_MAN                       = 85,               // MANÆû³µ
        VLR_ZHONGTONG                 = 86,               // ÖÐÍ¨¿Í³µ
        VLR_BAOJUN                    = 87,               // ±¦¿¥
        VLR_BQWEIWANG                 = 88,               // ±±ÆûÍþÍú
        VLR_TRUMPCHE                  = 89,               // ´«ì÷
        VLR_LUFENG                    = 90,               // Â½·ç
        VLR_HMZHENGZHOU               = 91,               // º£ÂíÖ£ÖÝ
        VLR_BEIJING                   = 92,               // ±±¾©Æû³µ
        VLR_ZHONGSHUN                 = 93,               // ÖÐË³
        VLR_WEILIN                    = 94,               // Íþ÷ëÆû³µ
        VLR_OPEL                      = 95,               // Å·±¦
        VLR_KARRY                     = 96,               // ¿ªÈð
        VLR_SMA                       = 97,               // »ªÆÕÆû³µ
        VLR_SMATEXT                   = 98,               // »ªÆÕÆû³µÎÄ×ÖSMA
        VLR_YUWIN                     = 99,               // ½­ÁåÔ¦Ê¤
        VLR_MINI                      = 100,               // ±¦ÂíMINI
        VLR_MARK                      = 101,               // ·áÌïMARKX 
        VLR_HAVAL                     = 102,               // ¹þ¸¥HAVAL
        VLR_OGA                       = 103,               // Ú©¸è
        VLR_VENUCIA                   = 104,               // Æô³½
        VLR_BYD2                      = 105,               // ±ÈÑÇµÏÑùÊ½2 (±ÈÑÇµÏ)
        VLR_SMART                     = 106,               // ±¼³ÛSMART
        VLR_BAW                       = 107,               // ±±¾©Æû³µÖÆÔì³§BAW
        VLR_LUXGEN                    = 108,               // ÄÉÖÇ½Ý
        VLR_YEMA                      = 109,               // Ò°Âí
        VLR_ZTE                       = 110,               // ÖÐÐË
        VLR_EVERUS                    = 111,               // ÀíÄî
        VLR_CHRYSLER                  = 112,               // ¿ËÀ³Ë¹ÀÕ
        VLR_GONOW                     = 113,               // ¼ª°ÂÆû³µ
        VLR_SHJIANG                   = 114,               // ËÉ»¨½­
        VLR_RUILIN                    = 115,               // Èð÷ë
        VLR_FORTA                     = 116,               // ¸£´ï
        VLR_GAGUAR                    = 117,               // ½Ý±ª
        VLR_HEIBAO                    = 118,               // ºÚ±ª
        VLR_TKING                     = 119,               // ÌÆ¿¥
        VLR_TKINGTEXT                 = 120,               // ÌÆ¿¥ÎÄ×Ö
        VLR_FODAY                     = 121,               // ¸£µÏ
        VLR_LOTUS                     = 122,               // Á«»¨Æû³µ
        VLR_NANJUN                    = 123,               // ÄÏ¿¥
        VLR_SHUANGHUAN                = 124,               // Ë«»·Æû³µ
        VLR_SAIBAO                    = 125,               // ¹þ·ÉÈü±ª
        VLR_HAWTAI                    = 126,               // »ªÌ©
        VLR_LIFO                      = 127,               // ÓÀÔ´·Éµú
        VLR_JONWAY                    = 128,               // ÓÀÔ´Æû³µ
        VLR_FULONGMA                  = 129,               // ¸£ÁúÂí
        VLR_WEILI                     = 130,               // Î«Á¦
        VLR_ANCHI                     = 131,               // ½­»´°²³Û
        VLR_PAIXI                     = 132,               // ÅÉÏ²
        VLR_HIGERTEXT                 = 133,               // º£¸ñHIGERÎÄ×Ö
        VLR_RIYECAR                   = 134,               // ¹ãÆûÈÕÒ°Çá¿¨
        VLR_RIYETRUCK                 = 135,               // ¹ãÆûÈÕÒ°ÖØ¿¨
        VLR_JIANGNAN                  = 136,               // ½­ÄÏ
        VLR_OLDZOTYE                  = 137,               // ÀÏ¿îÖÚÌ©
        VLR_OLDXIALI                  = 138,               // ÀÏ¿îÏÄÀû
        VLR_NEWAOCHI                  = 139,               // ÐÂ°Â³Û
        VLR_CDW                       = 140,               // ÍõÅÆÖØÆû
        VLR_CDWTEXT                   = 141,               // ÍõÅÆÖØÆûÎÄ×Ö
        VLR_CIIMO                     = 142,               // ±¾ÌïË¼Ãú
        VLR_CHANADS                   = 143,               // ³¤°²ÚÐ°¬ÊË
        VLR_DS                        = 144,               // µÀÆæ
        VLR_ROHENS                    = 145,               // ÏÖ´úÀÍ¶÷Ë¹¿áÅÉ
        VLR_YANTAI                    = 146,               // ÑàÌ¨
        VLR_SHUANGLONG                = 147,               // Ë«Áú
        VLR_FENGLING                  = 148,               // Ê±´ú·çÁâ
        VLR_XINKAI                    = 149,               // ÐÂ¿­
        VLR_GMC                       = 150,               // GMC
        VLR_DATONG                    = 151,               // ÉÏÆû´óÍ¨
        VLR_BQYINXIANG                = 152,               // ±±ÆûÒøÏè
        VLR_NEWCHERY                  = 153,               // ÐÂÆæÈð
        VLR_MUDAN                     = 154,               // Äµµ¤
        VLR_DAYUN                     = 155,               // ´óÔËÆû³µ
        VLR_DONGWO                    = 156,               // ¶«ÎÖÆû³µ
        VLR_UNION                     = 157,               // ÁªºÏÆû³µ
        VLR_CHUNZHOU                  = 158,               // ´ºÖÞ¿Í³µ
        VLR_SANY                      = 159,               // ÈýÒ»ÖØ¹¤
        VLR_YAXING                    = 160,               // ÑÇÐÇ¿Í³µ
        VLR_HENGTONG                  = 161,               // ºãÍ¨¿Í³µ
        VLR_SHAOLIN                   = 162,               // ÉÙÁÖ¿Í³µ
        VLR_YOUNG                     = 163,               // ÇàÄê¿Í³µ
        VLR_STOM                      = 164,               // Ê®Í¨
        VLR_SANHUAN                   = 165,               // Èý»·
        VLR_XUGONG                    = 166,               // Ðì¹¤
        VLR_BEIFANG                   = 167,               // ±±·½Æû³µ
        VLR_JIANGHUAN                 = 168,               // ½­»·»õ³µ
        VLR_BJFARM                    = 169,               // ±±¾©Å©ÓÃ
        VLR_NEWDADI                   = 170,               // ÐÂ´óµØÆû³µ
        VLR_SUNWIN                    = 171,               // ÉêÎÖ¿Í³µ
        VLR_YINGTIAN                  = 172,               // Ó¢Ìï
        VLR_QINGQI                    = 173,               // ÇáÆï
        VLR_CHUFENG                   = 174,               // ³þ·çÆû³µ
        VLR_SCANIA                    = 175,               // Ë¹¿°ÄáÑÇ
        VLR_JIULONG                   = 176,               // ¾ÅÁú¿Í³µ
        VLR_YOUYI                     = 177,               // ÓÑÒê¿Í³µ
        VLR_SHANGRAO                  = 178,               // ÉÏÈÄ¿Í³µ
        VLR_JIJIANG                   = 179,               // ¼ª½­
        VLR_YANGZI                    = 180,               // Ñï×Ó¿Í³µ
        VLR_XIWO                      = 181,               // Î÷ÎÖ¿Í³µ
        VLR_CHANGJIANG                = 182,               // ³¤½­¿Í³µ
        VLR_WUYI                      = 183,               // ÎäÒÄ
        VLR_CHENGDU                   = 184,               // ³É¶¼¿Í³µ
        VLR_TIANMA                    = 185,               // ÌìÂí
        VLR_BAOLONG                   = 186,               // ±¦Áú
        VLR_NEWYATU                   = 187,               // ÐÂÑÅÍ¾
        VLR_BARUI                     = 188,               // ÆðÑÇ°ÔÈñ
        VLR_GUANZHI                   = 189,               // ¹ÛÖÂ
        VLR_XIYATE                    = 190,               // Î÷ÑÅÌØ
        VLR_BINLI                     = 191,               // ±öÀû
        VLR_DADI                      = 192,               // ´óµÏ
        VLR_FUQI                      = 193,               // ¸»Ææ
        VLR_HANGTIAN                  = 194,               // º½ÌìÆû³µ
        VLR_HENGTIAN                  = 195,               // ºãÌìÆû³µ
        VLR_JMCCAR                    = 196,               // ½­ÁåÇáÆû
        VLR_KAERSEN                   = 197,               // ¿¨¶ûÉ­Æû³µ
        VLR_KAWEI                     = 198,               // ¿¨ÍþÆû³µ
        VLR_LANBOJINI                 = 199,               // À¼²©»ùÄá
        VLR_MASHALADI                 = 200,               // ÂêÉ¯À­µÙ
        VLR_SHUCHI                    = 201,               // Êæ³Û¿Í³µ
        VLR_SHILI                     = 202,               // ÊµÁ¦¿Í³µ
        VLR_HUABEI                    = 203,               // ÖÐ¿Í»ª±±
        VLR_YIZHENG                   = 204,               // ÉÏÆûÒÇÕ÷
        VLR_CHUNLAN                   = 205,               // ´ºÀ¼Æû³µ
        VLR_DAFA                      = 206,               // ´ó·¢Æû³µ
        VLR_SHENYE                    = 207,               // ÉñÒ°Æû³µ
        VLR_FALALI                    = 208,               // ·¨À­ÀûÆû³µ
        VLR_FUXING                    = 209,               // ¸£ÐÇÆû³µ
        VLR_ANYUAN                    = 210,               // °²Ô´¿Í³µ
        VLR_JINGHUA                   = 211,               // ¾©»ª¿Í³µ
        VLR_TAIHU                     = 212,               // Ì«ºþ¿Í³µ
        VLR_WUZHOULONG                = 213,               // ÎåÖÞÁú
        VLR_CHANGLONG                 = 214,               // ³£Â¡¿Í³µ
        VLR_YUEXI                     = 215,               // ÔÃÎ÷¿Í³µ
        VLR_SHENMA                    = 216,               // ÉñÂí¿Í³µ
        VLR_LUSHAN                    = 217,               // Â®É½ÅÆ
        VLR_WANFENG                   = 218,               // Íò·áÅÆ
        VLR_GZYUNBAO                  = 219,               // ¹ãÖÝÔÆ±ª
        VLR_ZHONGDA                   = 220,               // ÖÐ´óÆû³µ
        VLR_THREEWHEEL                = 221,               // ÈýÂÖ³µ
        VLR_TWOWHEEL                  = 222,               // ¶þÂÖ³µ
        VLR_JBC                       = 223,              // ½ð±­JBC
        VLR_YZJIANG                   = 224,               // Ñï×Ó½­¿Í³µ
        VLR_CNJ                       = 225,               // ÄÏ¿¥CNJ
        VLR_FORLAND                   = 226,               // ¸£ÌïÊ±´úÎÄ×Ö
        VLR_FARMCAR                   = 227,               // Å©ÓÃ³µ
        VLR_DONGFANGHONG              = 228,               // ¶«·½ºì
        VLR_STEYR                     = 229,               // Ë¹Ì«¶ûÆû³µ
        VLR_HONGQI                    = 230,               // ºìÆì
        VLR_USER1       = 231,   //ÓÃ»§1
        VLR_USER2       = 232,   //ÓÃ»§2
        VLR_USER3       = 233,   //ÓÃ»§3
        VLR_USER4       = 234,   //ÓÃ»§4
        VLR_USER5       = 235,   //ÓÃ»§5
        VLR_USER6       = 236,   //ÓÃ»§6
        VLR_USER7       = 237,   //ÓÃ»§7
        VLR_USER8       = 238    //ÓÃ»§8
}VLR_VEHICLE_CLASS;

/********************³µÁ¾Æ·ÅÆ×ÓÀàÐÍBegin*************************/
//´óÖÚ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_VOLKSWAGEN_CLASS
{
    VSB_VOLKSWAGEN_OTHER          = 0,   // ÆäËû£¨±£Áô£©
        VSB_VOLKSWAGEN_LAVIDA         = 1,   // ÀÊÒÝ
        VSB_VOLKSWAGEN_CROSSLAVIDA    = 2,   // ÀÊ¾³
        VSB_VOLKSWAGEN_TIGUAN         = 3,   // Í¾¹Û
        VSB_VOLKSWAGEN_TOURAN         = 4,   // Í¾°²
        VSB_VOLKSWAGEN_SANTANA        = 5,   // É£ËþÄÉ
        VSB_VOLKSWAGEN_SANTANA2000    = 6,   // É£ËþÄÉ2000
        VSB_VOLKSWAGEN_SANTANA3000    = 7,   // É£ËþÄÉ3000
        VSB_VOLKSWAGEN_VISTA          = 8,   // É£ËþÄÉ-Ö¾¿¡
        VSB_VOLKSWAGEN_PASSAT         = 9,   // ÅÁÈøÌØ
        VSB_VOLKSWAGEN_PASSATLINGYU   = 10,  // ÅÁÈøÌØ-ÁìÔ¦
        VSB_VOLKSWAGEN_POLO           = 11,  // ²¨ÂÞ
        VSB_VOLKSWAGEN_POLOCROSS      = 12,  // ²¨ÂÞ-ÔË¶¯°æ
        VSB_VOLKSWAGEN_POLOGTI        = 13,  // ²¨ÂÞ-GTI
        VSB_VOLKSWAGEN_SAGITAR        = 14,  // ËÙÌÚ
        VSB_VOLKSWAGEN_MAGOTAN        = 15,  // ÂõÌÚ
        VSB_VOLKSWAGEN_JETTA          = 16,  // ½Ý´ï
        VSB_VOLKSWAGEN_BORA           = 17,  // ±¦À´
        VSB_VOLKSWAGEN_NEWGOLF        = 18,  // ÐÂ¸ß¶û·ò
        VSB_VOLKSWAGEN_GOLFGTI        = 19,  // ¸ß¶û·ò-GTI
        VSB_VOLKSWAGEN_GOL            = 20,  // ¸ß¶û
        VSB_VOLKSWAGEN_CADDY          = 21,  // ¿ªµÏ
        VSB_VOLKSWAGEN_PHAETON        = 22,  // »ÔÌÚ
        VSB_VOLKSWAGEN_TOUREG         = 23,  // Í¾Èñ
        VSB_VOLKSWAGEN_SCIROCCO       = 24,  // ÉÐ¿á
        VSB_VOLKSWAGEN_BEETLE         = 25,  // ¼×¿Ç³æ
        VSB_VOLKSWAGEN_SHARAN         = 26,  // ÏÄÀÊ
        VSB_VOLKSWAGEN_MULTIVAN       = 27,  // ÂõÌØÍþ
        VSB_VOLKSWAGEN_CARBONCOPY     = 28,  // Ò»Æû´óÖÚ-CC
        VSB_VOLKSWAGEN_VISTACHANGDA   = 29,  // É£ËþÄÉÖ¾¿¡-³©´ï
        VSB_VOLKSWAGEN_BORASPORTLINE  = 30,   // ±¦À´-SPORTLINE
        VSR_VOLKSWAGEN_CC_1             =31,   //´óÖÚ-CC-2012,2011,2010
        VSR_VOLKSWAGEN_Cross_POLO_1     = 32,   //´óÖÚ-Cross-POLO-2010,2007
        VSR_VOLKSWAGEN_Cross_POLO_2     = 33,   //´óÖÚ-Cross-POLO-2014,2012
        VSR_VOLKSWAGEN_MULTIVAN_1       = 34,   //´óÖÚ-Multivan-2014,2012,2011
        VSR_VOLKSWAGEN_POLO_1           = 35,   //´óÖÚ-POLO-2006,2005,2004,2003,2002
        VSR_VOLKSWAGEN_POLO_2           = 36,   //´óÖÚ-POLO-2013,2012,2011
        VSR_VOLKSWAGEN_POLO_JINQU_1     = 37,   //´óÖÚ-POLO¾¢È¡-2009,2008,2007,2006
        VSR_VOLKSWAGEN_POLO_JINQU_2     = 38,   //´óÖÚ-POLO¾¢È¡-2011
        VSR_VOLKSWAGEN_Tiguan_1         = 39,   //´óÖÚ-Tiguan-2011,2009
        VSR_VOLKSWAGEN_Tiguan_2         = 40,   //´óÖÚ-Tiguan-2014,2013,2012
        VSR_VOLKSWAGEN_XIALANG_1        = 41,   //´óÖÚ-ÏÄÀÊ-2013,2012
        VSR_VOLKSWAGEN_BAOLAI_1         = 42,   //´óÖÚ-±¦À´-2005,2004
        VSR_VOLKSWAGEN_BAOLAI_2         = 43,   //´óÖÚ-±¦À´-2006
        VSR_VOLKSWAGEN_BAOLAI_3         = 44,   //´óÖÚ-±¦À´-2012,2011,2010,2009,2008
        VSR_VOLKSWAGEN_BAOLAI_4         = 45,   //´óÖÚ-±¦À´-2014,2013
        VSR_VOLKSWAGEN_SHANGKU_1        = 46,   //´óÖÚ-ÉÐ¿á-2014,2013
        VSR_VOLKSWAGEN_PASATE_1         = 47,   //´óÖÚ-ÅÁÈøÌØ-2003½ø¿Ú,2001ÁìÔ¦
        VSR_VOLKSWAGEN_PASATE_2         = 48,   //´óÖÚ-ÅÁÈøÌØ-2007,2006,2005ÁìÔ¦
        VSR_VOLKSWAGEN_PASATE_3         = 49,   //´óÖÚ-ÅÁÈøÌØ-2009,2008,2007,2005,2004,2003,2001,2000
        VSR_VOLKSWAGEN_PASATE_4         = 50,   //´óÖÚ-ÅÁÈøÌØ-2011,2009ÁìÔ¦
        VSR_VOLKSWAGEN_PASATE_5         = 51,   //´óÖÚ-ÅÁÈøÌØ-2014,2013,2012,2011
        VSR_VOLKSWAGEN_JIEDA_1          = 52,   //´óÖÚ-½Ý´ï-2005CIF»ï°é,2002
        VSR_VOLKSWAGEN_JIEDA_2          = 53,   //´óÖÚ-½Ý´ï-2009,2008,2006,2005,2004
        VSR_VOLKSWAGEN_JIEDA_3          = 54,   //´óÖÚ-½Ý´ï-2012,2010
        VSR_VOLKSWAGEN_JIEDA_4          = 55,   //´óÖÚ-½Ý´ï-2013
        VSR_VOLKSWAGEN_LANGYI_1         = 56,   //´óÖÚ-ÀÊÒÝ-2012,2011,2010,2009,2008
        VSR_VOLKSWAGEN_LANGYI_2         = 57,   //´óÖÚ-ÀÊÒÝ-2013
        VSR_VOLKSWAGEN_SANGTANA_1       = 58,   //´óÖÚ-É£ËþÄÉ-2007,2002,2000,1999,1995
        VSR_VOLKSWAGEN_SANGTANA_2       = 59,   //´óÖÚ-É£ËþÄÉ-2014,2013
        VSR_VOLKSWAGEN_SANGTANA_3       = 60,   //´óÖÚ-É£ËþÄÉ2000-2003,2001,2000,1999,1998,1996
        VSR_VOLKSWAGEN_SANGTANA_4       = 61,   //´óÖÚ-É£ËþÄÉ3000-2007,2006,2005,2004,2003
        VSR_VOLKSWAGEN_SANGTANAZHIJUN_1 = 62,   //´óÖÚ-É£ËþÄÉÖ¾¿¡(vista)-2011,2010,2009,2008
        VSR_VOLKSWAGEN_SANGTANAZHIJUN_2 = 63,   //´óÖÚ-É£ËþÄÉÖ¾¿¡(vista)-2006
        VSR_VOLKSWAGEN_JIAKECHONG_1     = 64,   //´óÖÚ-¼×¿Ç³æ-2010,2009,2008,2007,2006,2005
        VSR_VOLKSWAGEN_JIAKECHONG_2     = 65,   //´óÖÚ-¼×¿Ç³æ-2014,2013
        VSR_VOLKSWAGEN_HUITENG_2        = 66,   //´óÖÚ-»ÔÌÚ-2010,2009,2007,2006
        VSR_VOLKSWAGEN_MAITENG_1        = 67,   //´óÖÚ-ÂõÌÚ-2011,2010,2009,2008,2007
        VSR_VOLKSWAGEN_MAITENG_2        = 68,   //´óÖÚ-ÂõÌÚ-2013,2012
        VSR_VOLKSWAGEN_TUAN_3           = 69,   //´óÖÚ-Í¾°²-2006,2005,2004
        VSR_VOLKSWAGEN_TUAN_1           = 70,   //´óÖÚ-Í¾°²-2010,2009,2008
        VSR_VOLKSWAGEN_TUAN_2           = 71,   //´óÖÚ-Í¾°²-2013,2012,2011
        VSR_VOLKSWAGEN_TUGUAN_1         = 72,   //´óÖÚ-Í¾¹Û-2012,2011,2010
        VSR_VOLKSWAGEN_TURUI_1          = 73,   //´óÖÚ-Í¾Èñ-2006,2005,2003
        VSR_VOLKSWAGEN_TURUI_2          = 74,   //´óÖÚ-Í¾Èñ-2014,2013,2012,2011
        VSR_VOLKSWAGEN_SUTENG_1         = 75,   //´óÖÚ-ËÙÌÚ-2010,2009,2007,2006
        VSR_VOLKSWAGEN_SUTENG_2         = 76,   //´óÖÚ-ËÙÌÚ-2011
        VSR_VOLKSWAGEN_SUTENG_3         = 77,   //´óÖÚ-ËÙÌÚ-2014,2013,2012
        VSR_VOLKSWAGEN_GAOERFU_1        = 78,   //´óÖÚ-¸ß¶û·ò-2008,2007,2006,2005,2004,2003
        VSR_VOLKSWAGEN_GAOERFU_2        = 79,   //´óÖÚ-¸ß¶û·ò-2012,2011½ø¿Ú,2012,2011,2010
        VSR_VOLKSWAGEN_GAOERFU_3        = 80,   //´óÖÚ-¸ß¶û·òGTI-2013,2012,2011,2010
        VSR_VOLKSWAGEN_LANGYI_3         = 81,   //´óÖÚ-ÀÊÒÝ-2014
        VSR_VOLKSWAGEN_HUITENG_1        = 82   //´óÖÚ-»ÔÌÚ-2004
} VSB_VOLKSWAGEN_CLASS;

//±ð¿Ë×ÓÆ·ÅÆÀàÐÍ
typedef enum _VBR_BUICK_CLASS
{
    VBR_BUICK_OTHER        = 0,   // ÆäËû£¨±£Áô£©
        VBR_BUICK_ENCORE       = 1,   // °º¿ÆÀ­
        VBR_BUICK_GL8          = 2,   // GL8
        VBR_BUICK_LEGAL        = 3,   // ¾ýÍþ
        VBR_BUICK_LACROSS      = 4,   // ¾ýÔ½
        VBR_BUICK_EXCELLE      = 5,   // ¿­Ô½
        VBR_BUICK_EXCELLEGT    = 6,   // Ó¢ÀÊGT
        VBR_BUICK_WXCELLEXT    = 7,   // Ó¢ÀÊXT
        VBR_BUICK_ENCLAVE      = 8,   // °º¿ÆÀ×
        VBR_BUICK_ROYAUM       = 9,   // ÈÙÓù
        VBR_BUICK_SAIL         = 10,  // ±ð¿ËÈüÅ·
        VBR_BUICK_EXCELLEHRV   = 11,  // ¿­Ô½HRV
        VBR_BUICK_PARKAVENUE   = 12,  // ÁÖÒñ´óµÀ
        VBR_BUICK_CENTURY      = 13,   // ÐÂÊÀ¼Í
        VBR_BUICK_GL8_1          = 14,   // ±ð¿Ë-GL8-2004,2003
        VBR_BUICK_GL8_2          = 15,   // ±ð¿Ë-GL8-2007,2006,2005
        VBR_BUICK_GL8_3          = 16,   // ±ð¿Ë-GL8-2010_2008_2006_2005Â½×ð
        VBR_BUICK_GL8_4          = 17,   // ±ð¿Ë-GL8-2014,2013,2012,2011
        VBR_BUICK_GL8_5          = 18,   // ±ð¿Ë-GL8-2014_2013_2011ºÀ»ª°æ
        VBR_BUICK_ENCORE_1       = 19,   // ±ð¿Ë-°º¿ÆÀ­-2014,2013
        VBR_BUICK_ENCLAVE_1      = 20,   // ±ð¿Ë-°º¿ÆÀ×-2013,2010,2009
        VBR_BUICK_LEGAL_1        = 21,   // ±ð¿Ë-¾ýÍþ-2001,2000,1999
        VBR_BUICK_LEGAL_2        = 22,   // ±ð¿Ë-¾ýÍþ-2008,2006,2005,2004,2002
        VBR_BUICK_LEGAL_3        = 23,   // ±ð¿Ë-¾ýÍþ-2013,2012,2011,2010,2009
        VBR_BUICK_LEGAL_4        = 24,   // ±ð¿Ë-¾ýÍþ-2013_2012_2011ÔË¶¯°æ
        VBR_BUICK_LEGAL_5        = 25,   // ±ð¿Ë-¾ýÍþ-2014
        VBR_BUICK_LEGAL_6        = 26,   // ±ð¿Ë-¾ýÍþ-2014ÔË¶¯°æ
        VBR_BUICK_LACROSS_1      = 27,   // ±ð¿Ë-¾ýÔ½-2008,2007,2006
        VBR_BUICK_LACROSS_2      = 28,   // ±ð¿Ë-¾ýÔ½-2012,2011,2010,2009
        VBR_BUICK_LACROSS_3      = 29,   // ±ð¿Ë-¾ýÔ½-2013
        VBR_BUICK_EXCELLE_1      = 30,   // ±ð¿Ë-¿­Ô½-2006,2005,2004
        VBR_BUICK_EXCELLE_2      = 31,   // ±ð¿Ë-¿­Ô½-2008_2006_2005_2004HRV
        VBR_BUICK_EXCELLE_3      = 32,   // ±ð¿Ë-¿­Ô½-2011,2009,2008
        VBR_BUICK_EXCELLE_4      = 33,   // ±ð¿Ë-¿­Ô½-2013
        VBR_BUICK_PARKAVENUE_1   = 34,   // ±ð¿Ë-ÁÖÒñ´óµÀ-2011,2010,2009,2008,2007
        VBR_BUICK_SAIL_1         = 35,   // ±ð¿Ë-ÈüÅ·-2004,2003
        VBR_BUICK_EXCELLEGT_1    = 36,   // ±ð¿Ë-Ó¢ÀÊGT-2013,2012,2011,2010
        VBR_BUICK_WXCELLEXT_1    = 37,   // ±ð¿Ë-Ó¢ÀÊXT-2014,2013,2012,2010
        VBR_BUICK_CENTURY_1      = 38,   // ±ð¿Ë-ÐÂÊÀ¼Í-2000
        VBR_BUICK_RONGYU_1       = 39   // ±ð¿Ë-ÈÙÓù-2005,2004
}VBR_BUICK_CLASS;

//±¦Âí×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_BMW_CLASS
{
    VSB_BMW_OTHER       = 0,   // ÆäËû£¨±£Áô£©
        VSB_BMW_3SERIES     = 1,   // ±¦Âí3Ïµ
        VSB_BMW_5SERIES     = 2,   // ±¦Âí5Ïµ
        VSB_BMW_X1          = 3,   // ±¦ÂíX1
        VSB_BMW_1SERIES     = 4,   // ±¦Âí1Ïµ
        VSB_BMW_7SERIES     = 5,   // ±¦Âí7Ïµ
        VSB_BMW_X3          = 6,   // ±¦ÂíX3
        VSB_BMW_X5          = 7,   // ±¦ÂíX5
        VSB_BMW_X6          = 8,   // ±¦ÂíX6
        VSB_BMW_Z4          = 9,   // ±¦ÂíZ4
        VSB_BMW_MINI        = 10,  // ÃÔÄã
        VSB_BMW_6SERIES     = 11,   //±¦Âí6Ïµ
        VSB_BMW_YIXI_1      = 12,     // ±¦Âí-1Ïµ-2011,2010,2008,2007
        VSB_BMW_YIXI_2      = 13,     // ±¦Âí-1Ïµ-2013,2012
        VSB_BMW_SANXI_1     = 14,     // ±¦Âí-3Ïµ-2004
        VSB_BMW_SANXI_2     = 15,     // ±¦Âí-3Ïµ-2007,2005
        VSB_BMW_SANXI_3     = 16,     // ±¦Âí-3Ïµ-2012,2011,2010,2009
        VSB_BMW_SANXI_4     = 17,     // ±¦Âí-3Ïµ-2014,2013
        VSB_BMW_WUXI_1      = 18,     // ±¦Âí-5Ïµ-2010,2009,2008
        VSB_BMW_WUXI_2      = 19,     // ±¦Âí-5Ïµ-2013,2012,2011
        VSB_BMW_LIUXI_1     = 20,     // ±¦Âí-6Ïµ-Î´Öª
        VSB_BMW_QIXI_1      = 21,     // ±¦Âí-7Ïµ-2011,2010,2009
        VSB_BMW_QIXI_2      = 22,     // ±¦Âí-7Ïµ-2013
        VSB_BMW_X1_1        = 23,     // ±¦Âí-X1-2012,2010
        VSB_BMW_X1_2        = 24,     // ±¦Âí-X1-2014,2013
        VSB_BMW_X3_1        = 25,     // ±¦Âí-X3-2009,2008,2006
        VSB_BMW_X3_2        = 26,     // ±¦Âí-X3-2013,2012,2011
        VSB_BMW_X5_1        = 27,     // ±¦Âí-X5-2010,2009,2008
        VSB_BMW_X5_2        = 28,     // ±¦Âí-X5-2013,2012,2011
        VSB_BMW_X5_3        = 29,     // ±¦Âí-X5-2013ÔË¶¯ÐÍ
        VSB_BMW_X6_1        = 30,     // ±¦Âí-X6-2013,2012,2011,2009,2008
        VSB_BMW_Z4_1        = 31     // ±¦Âí-Z4-2004
}VSB_BMW_CLASS;

//±¾Ìï×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_HONDA_CLASS
{
    VSB_HONDA_OTHER       = 0,   // ÆäËû£¨±£Áô£©
        VSB_HONDA_CRV         = 1,   // ±¾ÌïCR-V(Ë¼Íþ)
        VSB_HONDA_JADE        = 2,   // ½ÜµÂ
        VSB_HONDA_CIVIC       = 3,   // Ë¼Óò
        VSB_HONDA_SPIRIOR     = 4,   // Ë¼²¬î£
        VSB_HONDA_CIIMO       = 5,   // Ë¼Ãú
        VSB_HONDA_ELYSION     = 6,   // °¬Á¦Éð
        VSB_HONDA_OBYSSEY     = 7,   // °ÂÈüµÂ
        VSB_HONDA_FIT         = 8,   // ·É¶È
        VSB_HONDA_NEWCITY     = 9,   // ·æ·¶
        VSB_HONDA_CROSSTOUR   = 10,  // ¸èÊ«Í¼
        VSB_HONDA_CRIDER      = 11,  // ÁèÅÉ
        VSB_HONDA_ACCORD      = 12,  // ÑÅ¸ó
        VSB_HONDA_CITY        = 13,  // Ë¼µÏ
        VSB_HONDA_ANTILOCK    = 14,  // °¢¿ÂµÂ
        VSB_HONDA_CRZ         = 15,   // ±¾ÌïCR-Z
        VSB_HONDA_CRV_1       = 16,   // ±¾Ìï-CR-V-2004
        VSB_HONDA_CRV_2       = 17,   // ±¾Ìï-CR-V-2005
        VSB_HONDA_CRV_3       = 18,   // ±¾Ìï-CR-V-2008,2007
        VSB_HONDA_CRV_4       = 19,   // ±¾Ìï-CR-V-2010
        VSB_HONDA_CRV_5       = 20,   // ±¾Ìï-CR-V-2013,2012
        VSB_HONDA_CRIDER_1    = 21,   // ±¾Ìï-ÁèÅÉ-2014,2013
        VSB_HONDA_OBYSSEY_1   = 22,   // ±¾Ìï-°ÂµÂÈü-2002
        VSB_HONDA_OBYSSEY_2   = 23,   // ±¾Ìï-°ÂµÂÈü-2006,2005,2004
        VSB_HONDA_OBYSSEY_3   = 24,   // ±¾Ìï-°ÂµÂÈü-2008,2007
        VSB_HONDA_OBYSSEY_4   = 25,   // ±¾Ìï-°ÂµÂÈü-2011ºÀ»ª°æ
        VSB_HONDA_CIVIC_1     = 26,   // ±¾Ìï-Ë¼Óò-2007
        VSB_HONDA_CIVIC_5     = 27,   // ±¾Ìï-Ë¼Óò-1996
        VSB_HONDA_CIVIC_2     = 28,   // ±¾Ìï-Ë¼Óò-2008,2006
        VSB_HONDA_CIVIC_3     = 29,   // ±¾Ìï-Ë¼Óò-2009
        VSB_HONDA_CIVIC_4     = 30,   // ±¾Ìï-Ë¼Óò-2013,2012,2011
        VSB_HONDA_CITY_1      = 31,   // ±¾Ìï-Ë¼µÏ-2008,2007,2006
        VSB_HONDA_SPIRIOR_1   = 32,   // ±¾Ìï-Ë¼²¬î£-2009
        VSB_HONDA_SIMING_1    = 33,   // ±¾Ìï-Ë¼Ãú-2012
        VSB_HONDA_JIEDE_1     = 34,   // ±¾Ìï-½ÜµÂ-2013
        VSB_HONDA_CROSSTOUR_1 = 35,   // ±¾Ìï-¸èÊ«Í¼-2013,2012,2010
        VSB_HONDA_AILISHEN_1  = 36,   // ±¾Ìï-°¬Á¦Éð-2012
        VSB_HONDA_NEWCITY_1   = 37,   // ±¾Ìï-·æ·¶-2009
        VSB_HONDA_NEWCITY_2   = 38,   // ±¾Ìï-·æ·¶-2011
        VSB_HONDA_NEWCITY_3   = 39,   // ±¾Ìï-·æ·¶-2014,2012
        VSB_HONDA_ACCORD_1    = 40,   // ±¾Ìï-ÑÅ¸ó-1996
        VSB_HONDA_ACCORD_2    = 41,   // ±¾Ìï-ÑÅ¸ó-1999
        VSB_HONDA_ACCORD_3    = 42,   // ±¾Ìï-ÑÅ¸ó-2001
        VSB_HONDA_ACCORD_4    = 43,   // ±¾Ìï-ÑÅ¸ó-2003
        VSB_HONDA_ACCORD_5    = 44,   // ±¾Ìï-ÑÅ¸ó-2008
        VSB_HONDA_ACCORD_6    = 45,   // ±¾Ìï-ÑÅ¸ó-2010
        VSB_HONDA_ACCORD_7    = 46,   // ±¾Ìï-ÑÅ¸ó-2011
        VSB_HONDA_ACCORD_8    = 47,   // ±¾Ìï-ÑÅ¸ó-2012
        VSB_HONDA_ACCORD_9    = 48,   // ±¾Ìï-ÑÅ¸ó-2013
        VSB_HONDA_ACCORD_10   = 49,   // ±¾Ìï-ÑÅ¸ó-2014
        VSB_HONDA_FIT_1       = 50,   // ±¾Ìï-·É¶È-2004
        VSB_HONDA_FIT_2       = 51,   // ±¾Ìï-·É¶È-2004ÈýÏá
        VSB_HONDA_FIT_3       = 52,   // ±¾Ìï-·É¶È-2005
        VSB_HONDA_FIT_4       = 53,   // ±¾Ìï-·É¶È-2007
        VSB_HONDA_FIT_5       = 54,   // ±¾Ìï-·É¶È-2008
        VSB_HONDA_FIT_6       = 55   // ±¾Ìï-·É¶È-2013,2011
}VSB_HONDA_CLASS;

//±êÖÂ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_PEUGEOT_CLASS
{
    VSB_PEUGEOT_OTHER      = 0,   // ÆäËû£¨±£Áô£©
        VSB_PEUGEOT_2008       = 1,   // ±êÖÂ2008
        VSB_PEUGEOT_207        = 2,   // ±êÖÂ207
        VSB_PEUGEOT_SENNA      = 3,   // ÈüÄÉ
        VSB_PEUGEOT_3008       = 4,   // ±êÖÂ3008
        VSB_PEUGEOT_301        = 5,   // ±êÖÂ301
        VSB_PEUGEOT_307        = 6,   // ±êÖÂ307
        VSB_PEUGEOT_308        = 7,   // ±êÖÂ308
        VSB_PEUGEOT_408        = 8,   // ±êÖÂ408
        VSB_PEUGEOT_508        = 9,   // ±êÖÂ508
        VSB_PEUGEOT_206        = 10,  // ±êÖÂ206
        VSB_PEUGEOT_407        = 11,   // ±êÖÂ407
        VSB_PEUGEOT_206_1      = 12, // ±êÖÂ-206-Î´Öª
        VSB_PEUGEOT_207_1      = 13, // ±êÖÂ-207Á½Ïá-2011,2010,2009
        VSB_PEUGEOT_207_2      = 14, // ±êÖÂ-207Á½Ïá-2013
        VSB_PEUGEOT_3008_1     = 15, // ±êÖÂ-3008-2014,2013
        VSB_PEUGEOT_301_1      = 16, // ±êÖÂ-301-Î´Öª
        VSB_PEUGEOT_307_1      = 17, // ±êÖÂ-307ÈýÏá-2007,2006,2005,2004
        VSB_PEUGEOT_307_2      = 18, // ±êÖÂ-307ÈýÏá-2010,2009,2008
        VSB_PEUGEOT_307_3      = 19, // ±êÖÂ-307Á½Ïá-2013_2012_2011CROSS
        VSB_PEUGEOT_308_1      = 20, // ±êÖÂ-308-2014,2013,2012
        VSB_PEUGEOT_407_1      = 21, // ±êÖÂ-407-Î´Öª
        VSB_PEUGEOT_408_1      = 22, // ±êÖÂ-408-2012,2011,2010
        VSB_PEUGEOT_408_2      = 23, // ±êÖÂ-408-2013
        VSB_PEUGEOT_508_1      = 24, // ±êÖÂ-508-2014,2013,2012,2011
        VSB_PEUGEOT_207_3      = 25, // ±êÖÂ-207ÈýÏá-2011,2010,2009
        VSB_PEUGEOT_307_4      = 26 // ±êÖÂ-307Á½Ïá-2013,2012,2010,2009,2008
        
}VSB_PEUGEOT_CLASS;

//·áÌï×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_TOYOTA_CLASS
{
    VSB_TOYOTA_OTHER            = 0,   // ÆäËû£¨±£Áô£©
        VSB_TOYOTA_HIGHLANDER       = 1,   // ººÀ¼´ï
        VSB_TOYOTA_CAMRY            = 2,   // ¿­ÃÀÈð
        VSB_TOYOTA_YARIS            = 3,   // ÑÅÁ¦Ê¿
        VSB_TOYOTA_YARISL           = 4,   // YARIS LÖÂìÅ
        VSB_TOYOTA_VERSO            = 5,   // ÒÝÖÂ
        VSB_TOYOTA_HUAGUAN          = 6,   // »¨¹Ú
        VSB_TOYOTA_CROWN            = 7,   // »Ê¹Ú
        VSB_TOYOTA_COROLLA          = 8,   // ¿¨ÂÞÀ­
        VSB_TOYOTA_COSTER           = 9,   // ¿ÂË¹´ï
        VSB_TOYOTA_PRADO            = 10,  // ÆÕÀ­¶à
        VSB_TOYOTA_PRIUS            = 11,  // ÆÕÈñË¹
        VSB_TOYOTA_RAV4             = 12,  // ·áÌïRAV4
        VSB_TOYOTA_REZI             = 13,  // ÈñÖ¾
        VSB_TOYOTA_VIOS             = 14,  // Íþ³Û
        VSB_TOYOTA_PREVIA           = 15,  // ÆÕÈðÎ¬ÑÇ
        VSB_TOYOTA_HIACE            = 16,  // º£Ê¨
        VSB_TOYOTA_86               = 17,  // ·áÌï86
        VSB_TOYOTA_SPEQUOIA         = 18,  // ºìÉ¼
        VSB_TOYOTA_LANDCRUISER      = 19,  // Â½µØÑ²Ñó½¢(À¼µÂ¿áÂ·Ôó)
        VSB_TOYOTA_SIENNA           = 20,  // ÈüÄÉ
        VSB_TOYOTA_CAMRYHYBRID      = 21,  // ¿­ÃÀÈð-HYBRID
        VSB_TOYOTA_GRACE            = 22,  // ¸óÈðË¹
        VSB_TOYOTA_ALPHARD          = 23,   // °£¶û·¨
        VSB_TOYOTA_RAV4_1           = 24,   // ·áÌï-RAV4-2012ÊÖ¶¯¾­µä°æ,2011,2010,2009
        VSB_TOYOTA_RAV4_2           = 25,   // ·áÌï-RAV4-2013
        VSB_TOYOTA_86_1             = 26,   // ·áÌï-·áÌï86-Î´Öª
        VSB_TOYOTA_JIAMEI_2         = 27,   // ·áÌï-¼ÑÃÀ-2001,2000,1999,1998
        VSB_TOYOTA_JIAMEI_3         = 28,   // ·áÌï-¼ÑÃÀ-2004,2003,2002
        VSB_TOYOTA_LANDEKLZ_1       = 29,   // ·áÌï-À¼µÂ¿áÂ·Ôó-2011ÖÐ¶«°æ,2010,2007
        VSB_TOYOTA_KAIMEIRUI_1      = 30,   // ·áÌï-¿­ÃÀÈð-2008,2007,2006
        VSB_TOYOTA_KAIMEIRUI_2      = 31,   // ·áÌï-¿­ÃÀÈð-2012×ðÈð
        VSB_TOYOTA_KAIMEIRUI_3      = 32,   // ·áÌï-¿­ÃÀÈð-2012¾­µä°æ,2011,2010,2009
        VSB_TOYOTA_KAIMEIRUI_4      = 33,   // ·áÌï-¿­ÃÀÈð-2013,2012
        VSB_TOYOTA_KAIMEIRUI_5      = 34,   // ·áÌï-¿­ÃÀÈð-2013¾­µä°æ
        VSB_TOYOTA_KAIMEIRUI_6      = 35,   // ·áÌï-¿­ÃÀÈð-2014,2012¿¥Èð
        VSB_TOYOTA_KALUOLA_1        = 36,   // ·áÌï-¿¨ÂÞÀ­-2010,2009,2008,2007,2006
        VSB_TOYOTA_KALUOLA_2        = 37,   // ·áÌï-¿¨ÂÞÀ­-2013,2012,2011
        VSB_TOYOTA_AIERFA_1         = 38,   // ·áÌï-°£¶û·¨-2011,2010
        VSB_TOYOTA_AIERFA_2         = 39,   // ·áÌï-°£¶û·¨-2013,2012
        VSB_TOYOTA_WEICHI_1         = 40,   // ·áÌï-Íþ³Û-2004,2003
        VSB_TOYOTA_WEICHI_2         = 41,   // ·áÌï-Íþ³Û-2007,2006,2005
        VSB_TOYOTA_WEICHI_3         = 42,   // ·áÌï-Íþ³Û-2009,2008
        VSB_TOYOTA_WEICHI_4         = 43,   // ·áÌï-Íþ³Û-2013,2012,2011,2010
        VSB_TOYOTA_WEICHI_5         = 44,   // ·áÌï-Íþ³Û-2014
        VSB_TOYOTA_PULADUO_1        = 45,   // ·áÌï-ÆÕÀ­¶à-2007,2006,2005,2004
        VSB_TOYOTA_PULADUO_2        = 46,   // ·áÌï-ÆÕÀ­¶à-2010
        VSB_TOYOTA_PULADUO_3        = 47,   // ·áÌï-ÆÕÀ­¶à-2014
        VSB_TOYOTA_PURUIWEIYA_1     = 48,   // ·áÌï-ÆÕÈðÎ¬ÑÇ-2004
        VSB_TOYOTA_PURUIWEIYA_4     = 49,   // ·áÌï-ÆÕÈðÎ¬ÑÇ-2005
        VSB_TOYOTA_PURUIWEIYA_2     = 50,   // ·áÌï-ÆÕÈðÎ¬ÑÇ-2006
        VSB_TOYOTA_PURUIWEIYA_3     = 51,   // ·áÌï-ÆÕÈðÎ¬ÑÇ-2012,2010,2008,2007
        VSB_TOYOTA_KESIDA_1         = 52,   // ·áÌï-¿ÂË¹´ï-2007
        VSB_TOYOTA_KESIDA_2         = 53,   // ·áÌï-¿ÂË¹´ï-2011
        VSB_TOYOTA_HANLANDA_1       = 54,   // ·áÌï-ººÀ¼´ï-2011,2009
        VSB_TOYOTA_HANLANDA_2       = 55,   // ·áÌï-ººÀ¼´ï-2012
        VSB_TOYOTA_HANLANDA_3       = 56,   // ·áÌï-ººÀ¼´ï-2013
        VSB_TOYOTA_HAISHI_1         = 57,   // ·áÌï-º£Ê¨-2001
        VSB_TOYOTA_HUANGGUAN_1      = 58,   // ·áÌï-»Ê¹Ú-1999
        VSB_TOYOTA_HUANGGUAN_2      = 59,   // ·áÌï-»Ê¹Ú-2009,2008,2007,2006,2005
        VSB_TOYOTA_HUANGGUAN_3      = 60,   // ·áÌï-»Ê¹Ú-2010
        VSB_TOYOTA_HUANGGUAN_4      = 61,   // ·áÌï-»Ê¹Ú-2012,2011
        VSB_TOYOTA_HONGSHAN_1       = 62,   // ·áÌï-ºìÉ¼-Î´Öª
        VSB_TOYOTA_HUAGUAN_1        = 63,   // ·áÌï-»¨¹Ú-2006,2005,2004
        VSB_TOYOTA_HUAGUAN_2        = 64,   // ·áÌï-»¨¹Ú-2009,2008,2007
        VSB_TOYOTA_HUAGUAN_3        = 65,   // ·áÌï-»¨¹Ú-2011,2010
        VSB_TOYOTA_YIZHI_1          = 66,   // ·áÌï-ÒÝÖÂ-2014,2012,2011
        VSB_TOYOTA_RUIZHI_1         = 67,   // ·áÌï-ÈñÖ¾-2006,2005
        VSB_TOYOTA_RUIZHI_2         = 68,   // ·áÌï-ÈñÖ¾-2009,2008,2007
        VSB_TOYOTA_RUIZHI_3         = 69,   // ·áÌï-ÈñÖ¾-2010·ç¶È°æ
        VSB_TOYOTA_RUIZHI_4         = 70,   // ·áÌï-ÈñÖ¾-2012,2010
        VSB_TOYOTA_LUDIXUNYANG_1    = 71,   // ·áÌï-Â½µØÑ²Ñó½¢-Î´Öª
        VSB_TOYOTA_YALISHI_1        = 72,   // ·áÌï-ÑÅÁ¦Ê¿-2009,2008,2007
        VSB_TOYOTA_YALISHI_2        = 73,   // ·áÌï-ÑÅÁ¦Ê¿-2012,2011,2010
        VSB_TOYOTA_RAV4_3           = 74,   // ·áÌï-RAV4-2013¾­µä,¾«Ó¢,×ð³ç,2012
        VSB_TOYOTA_YARiSL_1         = 75,   // ·áÌï-YARiS-L
        VSB_TOYOTA_JIAMEI_1         = 76,   // ·áÌï-¼ÑÃÀ-1996
        VSB_TOYOTA_PLATZ_1          = 77,   // ·áÌï-PLATZ-1999
        VSB_TOYOTA_LANDEKLZ_2       = 78   // ·áÌï-À¼µÂ¿áÂ·Ôó-2014,2012ÖÐ¶«°æ,2012
}VSB_TOYOTA_CLASS;

//¸£ÌØ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_FORD_CLASS
{
    VSB_FORD_OTHER       = 0,   // ÆäËû£¨±£Áô£©
        VSB_FORD_FOCUS       = 1,   // ¸£¿ËË¹
        VSB_FORD_FIESTA      = 2,   // ¼ÎÄê»ª
        VSB_FORD_SMAX        = 3,   // Âó¿ÂË¹
        VSB_FORD_MONDEO      = 4,   // ÃÉµÏÅ·
        VSB_FORD_ECOSPORT    = 5,   // Òí²©
        VSB_FORD_ESCAPE      = 6,   // Òí»¢
        VSB_FORD_ZHISHENG    = 7,   // ÖÂÊ¤
        VSB_FORD_ESCORT      = 8,   // ¸£î£Ë¹
        VSB_FORD_EXPLORER    = 9,   // ¸£ÌØÌ½ÏÕÕß
        VSB_FORD_EDGE        = 10,  // Èñ½ç
        VSB_FORD_TRANSIT     = 11,   // È«Ë³
        VSB_FORD_QUANSHUN_1      = 12,    // ¸£ÌØ-È«Ë³-Î´Öª
        VSB_FORD_JIANIANHUA_1    = 13,    // ¸£ÌØ-¼ÎÄê»ªÈýÏá-2006,2005,2004
        VSB_FORD_JIANIANHUA_2    = 14,    // ¸£ÌØ-¼ÎÄê»ªÈýÏá-2011,2010,2009
        VSB_FORD_JIANIANHUA_3    = 15,    // ¸£ÌØ-¼ÎÄê»ªÈýÏá-2013
        VSB_FORD_JIANIANHUA_4    = 16,    // ¸£ÌØ-¼ÎÄê»ªÁ½Ïá-2012
        VSB_FORD_TANXIANZHE_1    = 17,    // ¸£ÌØ-Ì½ÏÕÕß-2013,2011
        VSB_FORD_FOCUS_1         = 18,    // ¸£ÌØ-¸£¿ËË¹ÈýÏá-2005
        VSB_FORD_FOCUS_2         = 19,    // ¸£ÌØ-¸£¿ËË¹ÈýÏá-2005¾­µäÐÍ
        VSB_FORD_FOCUS_3         = 20,    // ¸£ÌØ-¸£¿ËË¹ÈýÏá-2008,2007,2006
        VSB_FORD_FOCUS_4         = 21,    // ¸£ÌØ-¸£¿ËË¹ÈýÏá-2013,2012¾­µä,2011,2009
        VSB_FORD_FOCUS_5         = 22,    // ¸£ÌØ-¸£¿ËË¹Á½Ïá-2012
        VSB_FORD_FOCUS_6         = 23,    // ¸£ÌØ-¸£¿ËË¹Á½Ïá-2012»ù±¾,Ê±ÉÐ,2011,2010,2009,2008
        VSB_FORD_YIBO_1          = 24,    // ¸£ÌØ-Òí²©-2013
        VSB_FORD_YIHU_1          = 25,    // ¸£ÌØ-Òí»¢-2013
        VSB_FORD_MENGDIOU_1      = 26,    // ¸£ÌØ-ÃÉµÏÅ·-2003
        VSB_FORD_MENGDIOU_2      = 27,    // ¸£ÌØ-ÃÉµÏÅ·-2005,2004
        VSB_FORD_MENGDIOU_3      = 28,    // ¸£ÌØ-ÃÉµÏÅ·-2006
        VSB_FORD_MENGDIOU_4      = 29,    // ¸£ÌØ-ÃÉµÏÅ·-2013
        VSB_FORD_MENGDIOU_5      = 30,    // ¸£ÌØ-ÃÉµÏÅ·-ÖÂÊ¤-2010,2008,2007
        VSB_FORD_MENGDIOU_6      = 31,    // ¸£ÌØ-ÃÉµÏÅ·-ÖÂÊ¤-2011
        VSB_FORD_RUIJIE_1        = 32,    // ¸£ÌØ-Èñ½ç-2012,2011
        VSB_FORD_MAIKESI_1       = 33    // ¸£ÌØ-Âó¿ÂË¹-2008,2007
}VSB_FORD_CLASS;

//ÈÕ²ú×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_NISSAN_CLASS
{
    VSB_NISSAN_OTHER              = 0,   // ÆäËû£¨±£Áô£©
        VSB_NISSAN_XTRAIL             = 1,   // Ææ¿¥
        VSB_NISSAN_MURANO             = 2,   // Â¥À¼
        VSB_NISSAN_LIVINA             = 3,   // æêÍþ
        VSB_NISSAN_MARCH              = 4,   // Âê³Û
        VSB_NISSAN_TIIDA              = 5,   // æë´ï
        VSB_NISSAN_TEANA              = 6,   // Ììô¥
        VSB_NISSAN_QASHQAI            = 7,   // åÐ¿Í
        VSB_NISSAN_SYLPHY             = 8,   // ÐùÒÝ
        VSB_NISSAN_SUNNY              = 9,   // Ñô¹â
        VSB_NISSAN_D22PICKUP          = 10,  // D22Æ¤¿¨
        VSB_NISSAN_D22VAN             = 11,  // D22ÏáÊ½³µ
        VSB_NISSAN_CABSTAR            = 12,  // ¿­ÆÕË¹´ï
        VSB_NISSAN_HV200              = 13,  // NV200
        VSB_NISSAN_PALADIN            = 14,  // ÅÁÀ­¶¡
        VSB_NISSAN_YIDA               = 15,  // ÒÃ´ï
        VSB_NISSAN_DUCK               = 16,  // ¹«¾ô
        VSB_NISSAN_CEFIRO             = 17,  // ·ç¶È
        VSB_NISSAN_FENGSHENBLUEBIRD   = 18,  // ·çÉñÀ¶Äñ
        VSB_NISSAN_FENGSHENSUNNY      = 19,  // ·çÉñÑô¹â
        VSB_NISSAN_SUCCE              = 20,  // Ë§¿Í
        VSB_NISSAN_FUGA               = 21,  // ·çÑÅ
        VSB_NISSAN_BLUEBIRD4          = 22,  // À¶Äñ4´ú
        VSB_NISSAN_VENUCIA            = 23,  // Æô³½
        VSB_NISSAN_QUEST              = 24,  // ¹óÊ¿
        VSB_NISSAN_GENISS             = 25,   // ¿¡ÒÝ
        VSB_NISSAN_NV200_1            = 26,  // ÈÕ²ú-NV200-2013,2012,2011,2010
        VSB_NISSAN_TIANLAI_1          = 27,  // ÈÕ²ú-Ììô¥-2005,2004
        VSB_NISSAN_TIANLAI_2          = 28,  // ÈÕ²ú-Ììô¥-2007,2006
        VSB_NISSAN_TIANLAI_3          = 29,  // ÈÕ²ú-Ììô¥-2010,2008
        VSB_NISSAN_TIANLAI_4          = 30,  // ÈÕ²ú-Ììô¥-2012,2011
        VSB_NISSAN_TIANLAI_5          = 31,  // ÈÕ²ú-Ììô¥-2012ÔÆ°²È«°æ,2011¹«¾ô
        VSB_NISSAN_TIANLAI_6          = 32,  // ÈÕ²ú-Ììô¥-2014,2013
        VSB_NISSAN_QIJUN_1            = 33,  // ÈÕ²ú-Ææ¿¥-2010,2008
        VSB_NISSAN_QIJUN_2            = 34,  // ÈÕ²ú-Ææ¿¥-2012,2011½ø¿Ú
        VSB_NISSAN_PALADING_1         = 35,  // ÈÕ²ú-ÅÁÀ­¶¡-2013,2011,2006,2004
        VSB_NISSAN_LOULAN_1           = 36,  // ÈÕ²ú-Â¥À¼-2013,2011
        VSB_NISSAN_LOULAN_2           = 37,  // ÈÕ²ú-Âê³Û-2010
        VSB_NISSAN_LANNIAO_1          = 38,  // ÈÕ²ú-À¶Äñ-2002
        VSB_NISSAN_LANNIAO_2          = 39,  // ÈÕ²ú-À¶Äñ-2003
        VSB_NISSAN_LANNIAO_3          = 40,  // ÈÕ²ú-À¶Äñ-2004
        VSB_NISSAN_GUISHI_1           = 41,  // ÈÕ²ú-¹óÊ¿-2005
        VSB_NISSAN_XUANYI_1           = 42,  // ÈÕ²ú-ÐùÒÝ-2006
        VSB_NISSAN_XUANYI_2           = 43,  // ÈÕ²ú-ÐùÒÝ-2012¾­µä,2009,2007
        VSB_NISSAN_XUANYI_3           = 44,  // ÈÕ²ú-ÐùÒÝ-2014,2012
        VSB_NISSAN_XIAOKE_1           = 45,  // ÈÕ²ú-åÐ¿Í-2009,2008
        VSB_NISSAN_XIAOKE_2           = 46,  // ÈÕ²ú-åÐ¿Í-2013,2012,2011
        VSB_NISSAN_SUNNY_3            = 47,  // ÈÕ²ú-Ñô¹â-2004
        VSB_NISSAN_SUNNY_1            = 48,  // ÈÕ²ú-Ñô¹â-2006,2005
        VSB_NISSAN_SUNNY_2            = 49,  // ÈÕ²ú-Ñô¹â-2012,2011
        VSB_NISSAN_YIDA_1             = 50,  // ÈÕ²ú-ÒÃ´ï-2008,2006,2005
        VSB_NISSAN_YIDA_2             = 51,  // ÈÕ²ú-ÒÃ´ï-Î´Öª
        VSB_NISSAN_FENGDU_1           = 52,  // ÈÕ²ú-·ç¶È-Î´Öª
        VSB_NISSAN_FENGYA_1           = 53,  // ÈÕ²ú-·çÑÅ-Î´Öª
        VSB_NISSAN_LIWEI_1            = 54,  // ÈÕ²ú-æêÍþ-2008,2007
        VSB_NISSAN_LIWEI_2            = 55,  // ÈÕ²ú-æêÍþ-2009
        VSB_NISSAN_LIWEI_3            = 56,  // ÈÕ²ú-æêÍþ-2010
        VSB_NISSAN_LIWEI_4            = 57,  // ÈÕ²ú-æêÍþ-2011,2010¾¢Èñ,2008ìÅÄÜÐÍ
        VSB_NISSAN_JUNYI_1            = 58,  // ÈÕ²ú-¿¥ÒÝ-2006
        VSB_NISSAN_QIDA_1             = 59,  // ÈÕ²ú-æë´ï-2006,2005
        VSB_NISSAN_QIDA_2             = 60,  // ÈÕ²ú-æë´ï-2009,2008
        VSB_NISSAN_QIDA_3             = 61,  // ÈÕ²ú-æë´ï-2013,2012,2011
        VSB_NISSAN_RUIQI_1            = 62   // ÈÕ²ú-ÈñæëÆ¤¿¨-2009ºÀ»ªÐÍ
}VSB_NISSAN_CLASS;

//°ÂµÏ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_AUDI_CLASS
{
    VSB_AUDI_OTHER        = 0,   // ÆäËû£¨±£Áô£©
        VSB_AUDI_A3           = 1,   // °ÂµÏA3
        VSB_AUDI_A4L          = 2,   // °ÂµÏA4L
        VSB_AUDI_A6L          = 3,   // °ÂµÏA6L
        VSB_AUDI_Q3           = 4,   // °ÂµÏQ3
        VSB_AUDI_Q5           = 5,   // °ÂµÏQ5
        VSB_AUDI_A1           = 6,   // °ÂµÏA1
        VSB_AUDI_A4           = 7,   // °ÂµÏA4
        VSB_AUDI_A5           = 8,   // °ÂµÏA5
        VSB_AUDI_A6           = 9,   // °ÂµÏA6
        VSB_AUDI_A7           = 10,  // °ÂµÏA7
        VSB_AUDI_A8L          = 11,  // °ÂµÏA8L
        VSB_AUDI_Q7           = 12,  // °ÂµÏQ7
        VSB_AUDI_S5           = 13,  // °ÂµÏS5
        VSB_AUDI_TT           = 14,  // °ÂµÏTT
        VSB_AUDI_100          = 15,  // °ÂµÏ100
        VSB_AUDI_200          = 16,  // °ÂµÏ200
        VSB_AUDI_S7           = 17,  // °ÂµÏS7
        VSB_AUDI_S8           = 18,  // °ÂµÏS8
        VSB_AUDI_100_1        = 19,   // °ÂµÏ-100-Î´Öª
        VSB_AUDI_200_1        = 20,   // °ÂµÏ-200-Î´Öª
        VSB_AUDI_A1_1         = 21,   // °ÂµÏ-A1-2014,2013,2012
        VSB_AUDI_A3_1         = 22,   // °ÂµÏ-A3-2013,2010ÊæÊÊ°æ
        VSB_AUDI_A3_2         = 23,   // °ÂµÏ-A3-2013¼¼ÊõÐÍ,2011,2010
        VSB_AUDI_A4_1         = 24,   // °ÂµÏ-A4-2005¹ú²ú,2000½ø¿Ú°æ
        VSB_AUDI_A4_2         = 25,   // °ÂµÏ-A4-2007,2006¹ú²ú,2004½ø¿Ú
        VSB_AUDI_A4L_1        = 26,   // °ÂµÏ-A4L-2013
        VSB_AUDI_A5_1         = 27,   // °ÂµÏ-A5-2011,2010
        VSB_AUDI_A6_1         = 28,   // °ÂµÏ-A6-1996,1995,1991
        VSB_AUDI_A6L_1        = 29,   // °ÂµÏ-A6L-2008,2007,2006,2005
        VSB_AUDI_A6L_2        = 30,   // °ÂµÏ-A6L-2011,2010,2009
        VSB_AUDI_A6L_3        = 31,   // °ÂµÏ-A6L-2014,2013,2012
        VSB_AUDI_A7_1         = 32,   // °ÂµÏ-A7-2014,2013½øÈ¡ÐÍ,2012,2011
        VSB_AUDI_A8L_1        = 33,   // °ÂµÏ-A8L-2006
        VSB_AUDI_A8L_2        = 34,   // °ÂµÏ-A8L-2009,2008
        VSB_AUDI_A8L_3        = 35,   // °ÂµÏ-A8L-2011
        VSB_AUDI_A8L_4        = 36,   // °ÂµÏ-A8L-2013,2012
        VSB_AUDI_Q3_1         = 37,   // °ÂµÏ-Q3-2014,2013,2012
        VSB_AUDI_Q5_1         = 38,   // °ÂµÏ-Q5-2012,2010ÔË¶¯ 
        VSB_AUDI_Q5_2         = 39,   // °ÂµÏ-Q5-2012ºÀ»ªÐÍ,2010Ô½Ò°°æ
        VSB_AUDI_Q5_3         = 40,   // °ÂµÏ-Q5-2012½øÈ¡ÐÍ,2011,2010,2009
        VSB_AUDI_Q5_4         = 41,   // °ÂµÏ-Q5-2013
        VSB_AUDI_Q7_1         = 42,   // °ÂµÏ-Q7-2007
        VSB_AUDI_Q7_2         = 43,   // °ÂµÏ-Q7-2014,2013
        VSB_AUDI_S7_1         = 44,   // °ÂµÏ-S7-2013
        VSB_AUDI_S8_1         = 45,   // °ÂµÏ-S8-2013
        VSB_AUDI_TT_2         = 46,   // °ÂµÏ-TT-2010,2008,2007
        VSB_AUDI_TT_3         = 47,   // °ÂµÏ-TT-2012,2011
        VSB_AUDI_TT_4         = 48,   // °ÂµÏ-TT-2013,2013,2011TTS
        VSB_AUDI_TT_1         = 49   // °ÂµÏ-TT-2008TTS
}VSB_AUDI_CLASS;

//Âí×Ô´ï×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_MAZDA_CLASS
{
    VSB_MAZDA_OTHER         = 0,   // ÆäËû£¨±£Áô£©
        VSB_MAZDA_CX5           = 1,   // Âí×Ô´ïCX5
        VSB_MAZDA_2             = 2,   // Âí×Ô´ï2
        VSB_MAZDA_3             = 3,   // Âí×Ô´ï3
        VSB_MAZDA_6             = 4,   // Âí×Ô´ï6
        VSB_MAZDA_8             = 5,   // Âí×Ô´ï8
        VSB_MAZDA_COREWING      = 6,   // î£Òí
        VSB_MAZDA_CX7           = 7,   // Âí×Ô´ïCX7
        VSB_MAZDA_X5            = 8,   // Âí×Ô´ïX5
        VSB_MAZDA_5             = 9,   // Âí×Ô´ï5
        VSB_MAZDA_PREMACY       = 10,  // ÀÏ¿îÆÕÁ¦Âí
        VSB_MAZDA_MPV           = 11,   // Âí×Ô´ïMPV
        VSB_MAZDA_CX5_1         = 12,   // Âí×Ô´ï-CX-5-2014,2013,2012½ø¿Ú
        VSB_MAZDA_CX7_1         = 13,   // Âí×Ô´ï-CX-7-2014,2013,2011,2010
        VSB_MAZDA_2_1           = 14,   // Âí×Ô´ï-Mazda2Á½Ïá-2011,2009,2008,2007A
        VSB_MAZDA_3_1           = 15,   // Âí×Ô´ï-Mazda3ÈýÏá-2004,2002
        VSB_MAZDA_3_2           = 16,   // Âí×Ô´ï-Mazda3ÈýÏá-2009,2007
        VSB_MAZDA_3_3           = 17,   // Âí×Ô´ï-Mazda3ÈýÏá-2012,2010
        VSB_MAZDA_3_4           = 18,   // Âí×Ô´ï-Mazda3ÐÇ³ÒÁ½Ïá-2013,2012
        VSB_MAZDA_5_1           = 19,   // Âí×Ô´ï-Mazda5-2010,2008,2007
        VSB_MAZDA_5_2           = 20,   // Âí×Ô´ï-Mazda5-2013,2012,2011
        VSB_MAZDA_6_2           = 21,   // Âí×Ô´ï-Mazda6-2006
        VSB_MAZDA_6_3           = 22,   // Âí×Ô´ï-Mazda6-2007
        VSB_MAZDA_8_1           = 23,   // Âí×Ô´ï-Mazda8-2013,2011,2010
        VSB_MAZDA_PREMACY_1     = 24,   // Âí×Ô´ï-ÆÕÁ¦Âí-2003
        VSB_MAZDA_PREMACY_2     = 25,   // Âí×Ô´ï-ÆÕÁ¦Âí-2006,2005,2004
        VSB_MAZDA_COREWING_1    = 26,   // Âí×Ô´ï-î£Òí-2012,2011,2010,2009
        VSB_MAZDA_COREWING_2    = 27,   // Âí×Ô´ï-î£Òí½ÎÅÜ-2011,2010
        VSB_MAZDA_COREWING_3    = 28,   // Âí×Ô´ï-î£Òí½ÎÅÜ-2012
        VSB_MAZDA_2_2           = 29,   // Âí×Ô´ï-Mazda2¾¢Ïè(ÈýÏá)-2011,2010,2008
        VSB_MAZDA_6_1           = 30,   // Âí×Ô´ï-Mazda6-2004
        VSB_MAZDA_6_4           = 31   // Âí×Ô´ï-Mazda6-2014,2013,2012,2011,2010
}VSB_MAZDA_CLASS;

//Ñ©·ðÀ¼×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_CHEVROLET_CLASS
{
    VSB_CHEVROLET_OTHER          = 0,   // ÆäËû£¨±£Áô£©
        VSB_CHEVROLET_NEWAVEO        = 1,   // °®Î¨Å·
        VSB_CHEVROLET_EPICA          = 2,   // ¾°³Ì
        VSB_CHEVROLET_CRUZE          = 3,   // ¿ÆÂ³×È
        VSB_CHEVROLET_CAPTIVA        = 4,   // ¿ÆÅÁÆæ
        VSB_CHEVROLET_MALIBU         = 5,   // ÂõÈñ±¦
        VSB_CHEVROLET_SAIL           = 6,   // ÈüÅ·
        VSB_CHEVROLET_CAMARO         = 7,   // ¿ÆÂõÂÞ
        VSB_CHEVROLET_LECHENG        = 8,   // ÀÖ³É
        VSB_CHEVROLET_LOVA           = 9,   // ÀÖ·ç
        VSB_CHEVROLET_OLDAVEO        = 10,  // ÀÖ³Ò-ÀÏ¿î°®Î¨Å·
        VSB_CHEVROLET_SPARK          = 11,  // ÀÖ³Û
        VSB_CHEVROLET_SAILSRV        = 12,   // ÈüÅ·SRV
        VSB_CHEVROLET_LOVA_1         = 13,   // Ñ©·ðÀ¼-ÀÖ·ç-2009,2008,2007,2006
        VSB_CHEVROLET_LOVA_2         = 14,   // Ñ©·ðÀ¼-ÀÖ·ç-2010
        VSB_CHEVROLET_SPARK_1        = 15,   // Ñ©·ðÀ¼-ÀÖ³Û-2010,2009,2006,2005,2004
        VSB_CHEVROLET_SPARK_2        = 16,   // Ñ©·ðÀ¼-ÀÖ³Û-2010ÔË¶¯¿î
        VSB_CHEVROLET_OLDAVEO_1      = 17,   // Ñ©·ðÀ¼-ÀÖ³Ò-2005
        VSB_CHEVROLET_OLDAVEO_2      = 18,   // Ñ©·ðÀ¼-ÀÖ³Ò-2010,2009,2008
        VSB_CHEVROLET_EPICA_1        = 19,   // Ñ©·ðÀ¼-¾°³Ì-2005
        VSB_CHEVROLET_EPICA_3        = 20,   // Ñ©·ðÀ¼-¾°³Ì-2012,2011,2010
        VSB_CHEVROLET_EPICA_4        = 21,   // Ñ©·ðÀ¼-¾°³Ì-2012,2011,2010ÖÂÕæ°æ
        VSB_CHEVROLET_EPICA_5        = 22,   // Ñ©·ðÀ¼-¾°³Ì-2013
        VSB_CHEVROLET_NEWAVEO_1      = 23,   // Ñ©·ðÀ¼-°®Î¨Å·ÈýÏá-2013,2012,2011
        VSB_CHEVROLET_CAPTIVA_1      = 24,   // Ñ©·ðÀ¼-¿ÆÅÁÆæ-2010,2008
        VSB_CHEVROLET_CAPTIVA_2      = 25,   // Ñ©·ðÀ¼-¿ÆÅÁÆæ-2014,2013,2012,2011
        VSB_CHEVROLET_KEMAILUO_1     = 26,   // Ñ©·ðÀ¼-¿ÆÂõÂÞ-2012,2011
        VSB_CHEVROLET_CRUZE_1        = 27,   // Ñ©·ðÀ¼-¿ÆÂ³×È-2014,2013,2012,2011,2010,2009
        VSB_CHEVROLET_SAIL_1         = 28,   // Ñ©·ðÀ¼-ÈüÅ·ÈýÏá-2005
        VSB_CHEVROLET_SAIL_2         = 29,   // Ñ©·ðÀ¼-ÈüÅ·ÈýÏá-2013,2011,2010
        VSB_CHEVROLET_MALIBU_1       = 30,   // Ñ©·ðÀ¼-ÂõÈñ±¦-2014,2013,2012
        VSB_CHEVROLET_EPICA_2        = 31   // Ñ©·ðÀ¼-¾°³Ì-2009,2008,2007
}VSB_CHEVROLET_CLASS;

//Ñ©ÌúÁú×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_CITROEN_CLASS
{
    VSB_CITROEN_OTHER                 = 0,   // ÆäËû£¨±£Áô£©
        VSB_CITROEN_C2                    = 1,   // Ñ©ÌúÁúC2
        VSB_CITROEN_C4L                   = 2,   // Ñ©ÌúÁúC4L
        VSB_CITROEN_C5                    = 3,   // Ñ©ÌúÁúC5
        VSB_CITROEN_ELYSEE                = 4,   // °®ÀöÉáÈýÏá
        VSB_CITROEN_CQUATRELIANGXIANG     = 5,   // ÊÀ¼ÎÁ½Ïá
        VSB_CITROEN_CQUATRESANXIANG       = 6,   // ÊÀ¼ÎÈýÏá
        VSB_CITROEN_SAEAPICASSO           = 7,   // ÈøÀ­-±Ï¼ÓË÷
        VSB_CITROEN_PICASSO               = 8,   // ±Ï¼ÓË÷
        VSB_CITROEN_CTRIOMPHE             = 9,   // ¿­Ðý
        VSB_CITROEN_XSARA                 = 10,  // ÈûÄÉ  
        VSB_CITROEN_SHENLONGFUKANG        = 11,  // ÉñÁú¸»¿µ
        VSB_CITROEN_CHANGANDS             = 12,   // ³¤°²DS
        VSB_CITROEN_C2_1                  = 13,   // Ñ©ÌúÁú-C2-2012,2010,2008,2007,2006
        VSB_CITROEN_C4L_1                 = 14,   // Ñ©ÌúÁú-C4L-2014,2013
        VSB_CITROEN_C4PICASSO_1           = 15,   // Ñ©ÌúÁú-C4±Ï¼ÓË÷-2009ÊæÊÊ°æ
        VSB_CITROEN_C5_1                  = 16,   // Ñ©ÌúÁú-C5-2012,2011,2010
        VSB_CITROEN_CQUATRESANXIANG_1     = 17,   // Ñ©ÌúÁú-ÊÀ¼ÎÈýÏá-2013,2012
        VSB_CITROEN_CQUATRELIANGXIANG_1   = 18,   // Ñ©ÌúÁú-ÊÀ¼ÎÁ½Ïá-2011,2010,2009,2008
        VSB_CITROEN_CTRIOMPHE_1           = 19,   // Ñ©ÌúÁú-¿­Ðý-2010,2009,2008,2006
        VSB_CITROEN_FUKANG_1              = 20,   // Ñ©ÌúÁú-¸»¿µ-2006,2005,2004,2003,2002
        VSB_CITROEN_ELYSEE_1              = 21,   // Ñ©ÌúÁú-°®ÀöÉáÈýÏá-2006,2005,2004,2003,2002
        VSB_CITROEN_ELYSEE_2              = 22,   // Ñ©ÌúÁú-°®ÀöÉáÈýÏá-2013,2012,2011,2010,2009,2008,2007
        VSB_CITROEN_SAEAPICASSO_1         = 23    // Ñ©ÌúÁú-ÈøÀ­-±Ï¼ÓË÷-2014 
}VSB_CITROEN_CLASS;

//ÏÖ´ú×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_HYUNDAI_CLASS
{
    VSB_HYUNDAI_OTHER            = 0,   // ÆäËû£¨±£Áô£©
        VSB_HYUNDAI_IX35             = 1,   // ÏÖ´úIX35
        VSB_HYUNDAI_LANGDONG         = 2,   // ÀÊ¶¯
        VSB_HYUNDAI_MOINCA           = 3,   // ÃûÔ¦
        VSB_HYUNDAI_SHENGDA          = 4,   // Ê¤´ï
        VSB_HYUNDAI_VERNA            = 5,   // ÈðÄÉ
        VSB_HYUNDAI_RUIYI            = 6,   // ÈðÞÈ
        VSB_HYUNDAI_SONATAEIGHT      = 7,   // Ë÷ÄÉËþ°Ë
        VSB_HYUNDAI_TUCSON           = 8,   // Í¾Ê¤
        VSB_HYUNDAI_YUEDONG          = 9,   // ÔÃ¶¯
        VSB_HYUNDAI_ELANTRA          = 10,  // ÒÁÀ¼ÌØ
        VSB_HYUNDAI_GRANDSANTAFE     = 11,  // ¸ñÈñ
        VSB_HYUNDAI_COUPE            = 12,  // ¿áÅÉ
        VSB_HYUNDAI_MATRIX           = 13,  // ÃÀ¼Ñ
        VSB_HYUNDAI_ACCENT           = 14,  // ÑÅÉðÌØ
        VSB_HYUNDAI_IX30             = 15,  // ÏÖ´úIX30
        VSB_HYUNDAI_SONATA           = 16,  // Ë÷ÄÉËþ
        VSB_HYUNDAI_REFINE           = 17,  // ÏÖ´úÈð·çÉÌÎñ³µ
        VSB_HYUNDAI_MISTRA           = 18,  // ÃûÍ¼
        VSB_HYUNDAI_SONATAYUFENG     = 19,  // Ë÷ÄÉËþ-ÓùÏè
        VSB_HYUNDAI_SANTAFE          = 20,  // ÏÖ´úÊ¥´ï·Æ
        VSB_HYUNDAI_HUIYI            = 21,   // ½ø¿Ú»ÔÒí
        VSB_HYUNDAI_I30_1            = 22,   // ÏÖ´ú-i30-2010,2009
        VSB_HYUNDAI_IX35_1           = 23,   // ÏÖ´ú-ix35-2012,2011,2010
        VSB_HYUNDAI_YILANTE_1        = 24,   // ÏÖ´ú-ÒÁÀ¼ÌØ-2006,2005,2004
        VSB_HYUNDAI_YILANTE_2        = 25,   // ÏÖ´ú-ÒÁÀ¼ÌØ-2007ÈýÏá
        VSB_HYUNDAI_YILANTE_3        = 26,   // ÏÖ´ú-ÒÁÀ¼ÌØ-2011
        VSB_HYUNDAI_SHENGDA_1        = 27,   // ÏÖ´ú-È«ÐÂÊ¤´ï-2013,2012
        VSB_HYUNDAI_MINGTU_1         = 28,   // ÏÖ´ú-ÃûÍ¼-2014,2013
        VSB_HYUNDAI_MINGYU_1         = 29,   // ÏÖ´ú-ÃûÔ¦-2013,2011,2009
        VSB_HYUNDAI_SHENGDAFEI_1     = 30,   // ÏÖ´ú-Ê¥´ï·Æ-Î´Öª
        VSB_HYUNDAI_YUXIANG_1        = 31,   // ÏÖ´ú-ÓùÏè-2005ÊæÊÊ°æ
        VSB_HYUNDAI_YUXIANG_2        = 32,   // ÏÖ´ú-ÓùÏè-2006,2005
        VSB_HYUNDAI_YUEDONG_1        = 33,   // ÏÖ´ú-ÔÃ¶¯-2010,2009,2008
        VSB_HYUNDAI_YUEDONG_2        = 34,   // ÏÖ´ú-ÔÃ¶¯-2012,2011
        VSB_HYUNDAI_SHENGDA_2        = 35,   // ÏÖ´ú-ÐÂÊ¤´ï-2009,2006
        VSB_HYUNDAI_SHENGDA_3        = 36,   // ÏÖ´ú-ÐÂÊ¤´ï-2012,2011,2010
        VSB_HYUNDAI_LANGDONG_1       = 37,   // ÏÖ´ú-ÀÊ¶¯-2013,2012
        VSB_HYUNDAI_GERUI_1          = 38,   // ÏÖ´ú-¸ñÈñ-Î´Öª
        VSB_HYUNDAI_RUIYI_1          = 39,   // ÏÖ´ú-ÈðÞÈ-2014
        VSB_HYUNDAI_RUINA_1          = 40,   // ÏÖ´ú-ÈðÄÉÈýÏá-2013,2010
        VSB_HYUNDAI_RUINA_2          = 41,   // ÏÖ´ú-ÈðÄÉÁ½Ïá-2014,2013,2011
        VSB_HYUNDAI_RUIFENG_1        = 42,   // ÏÖ´ú-Èð·ç-Î´Öª
        VSB_HYUNDAI_SUONATA_1        = 43,   // ÏÖ´ú-Ë÷ÄÉËþ-2008,2007,2006,2004,2003±ê×¼ÐÍ
        VSB_HYUNDAI_SUONATA_2        = 44,   // ÏÖ´ú-Ë÷ÄÉËþ-2010,2009,2008,2006,2004
        VSB_HYUNDAI_SOUNATA_3        = 45,   // ÏÖ´ú-Ë÷ÄÉËþ°Ë-2011,2010
        VSB_HYUNDAI_WEILAKESI_1      = 46,   // ÏÖ´ú-Î¬À­¿ËË¹-2012,2010,2008,2007
        VSB_HYUNDAI_MEIJIA_1         = 47,   // ÏÖ´ú-ÃÀ¼Ñ-Î´Öª
        VSB_HYUNDAI_JINKOUHUIYI_1    = 48,   // ÏÖ´ú-½ø¿Ú»ÔÒí-Î´Öª
        VSB_HYUNDAI_TUSHENG_1        = 49,   // ÏÖ´ú-Í¾Ê¤-2005
        VSB_HYUNDAI_TUSHENG_2        = 50,   // ÏÖ´ú-Í¾Ê¤-2011,2009,2008,2006
        VSB_HYUNDAI_TUSHENG_3        = 51,   // ÏÖ´ú-Í¾Ê¤-2013
        VSB_HYUNDAI_KUPAI_1          = 52,   // ÏÖ´ú-¿áÅÉ-Î´Öª
        VSB_HYUNDAI_YASHENTE_1       = 53,   // ÏÖ´ú-ÑÅÉðÌØ-2008,2006
        VSB_HYUNDAI_YASHENTE_2       = 54,   // ÏÖ´ú-ÑÅÉðÌØ-2011
        VSB_HYUNDAI_LINGXIANG_1      = 55,   // ÏÖ´ú-ÁìÏè-2009,2008
        VSB_HYUNDAI_FEISI_1          = 56    // ÏÖ´ú-·ÉË¼-2011
}VSB_HYUNDAI_CLASS;

//ÆæÈð×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_CHERY_CLASS
{
    VSB_CHERY_OTHER        = 0,   // ÆäËû£¨±£Áô£©
        VSB_CHERY_A1           = 1,   // ÆæÈðA1
        VSB_CHERY_A3           = 2,   // ÆæÈðA3
        VSB_CHERY_EASTAR       = 3,   // ¶«·½Ö®×Ó
        VSB_CHERY_FULWIN       = 4,   // ·çÔÆ
        VSB_CHERY_QQ           = 5,   // ÆæÈðQQ
        VSB_CHERY_E5           = 6,   // ÆæÈðE5
        VSB_CHERY_COWIN        = 7,   // ÆìÔÆ
        VSB_CHERY_TIGGO        = 8,   // Èð»¢
        VSB_CHERY_A5           = 9,   // ÆæÈðA5
        VSB_CHERY_S16          = 10,  // ÆæÈðS16
        VSB_CHERY_YOUYA        = 11,  // ÓÅÑÅ
        VSB_CHERY_V5           = 12,  // ÆæÈðV5
        VSB_CHERY_E3           = 13,   // ÆæÈðE3
        VSB_CHERY_A1_1                = 14,     // ÆæÈð-A1-2011,2008,2007
        VSB_CHERY_A3LIANGXIANG_1      = 15,     // ÆæÈð-A3Á½Ïá-2012,2010,2009
        VSB_CHERY_A5_1                = 16,     // ÆæÈð-A5-2009,2007,2006
        VSB_CHERY_QQ_1                = 17,     // ÆæÈð-QQ-2006,2005,2004
        VSB_CHERY_QQ_2                = 18,     // ÆæÈð-QQ-2010,2007,2006
        VSB_CHERY_QQ_3                = 19,     // ÆæÈð-QQ-2012,2011,2010,2009,2007
        VSB_CHERY_QQ_4                = 20,     // ÆæÈð-QQ-2012ÔË¶¯°æ
        VSB_CHERY_QQ_5                = 21,     // ÆæÈð-QQ-2013
        VSB_CHERY_DONGFANGZHIZI_1     = 22,     // ÆæÈð-¶«·½Ö®×Ó-2005,2004,2003
        VSB_CHERY_DONGFANGZHIZI_2     = 23,     // ÆæÈð-¶«·½Ö®×Ó-2007,2006
        VSB_CHERY_DONGFANGZHIZI_3     = 24,     // ÆæÈð-¶«·½Ö®×ÓCROSS-2009,2008,2007
        VSB_CHERY_YOUYA_1             = 25,     // ÆæÈð-ÓÅÑÅ-Î´Öª
        VSB_CHERY_E3_1                = 26,     // ÆæÈð-ÆæÈðE3-2013
        VSB_CHERY_E5_1                = 27,     // ÆæÈð-ÆæÈðE5-2014,2012,2011
        VSB_CHERY_QIYUN1_1            = 28,     // ÆæÈð-ÆìÔÆ1-2010
        VSB_CHERY_QIYUN1_2            = 29,     // ÆæÈð-ÆìÔÆ1-2012
        VSB_CHERY_QIYUN_1             = 30,     // ÆæÈð-ÆìÔÆ-2004
        VSB_CHERY_QIYUN_2             = 31,     // ÆæÈð-ÆìÔÆ-2009,2008,2007,2006
        VSB_CHERY_QIYUN2_1            = 32,     // ÆæÈð-ÆìÔÆ2-2012
        VSB_CHERY_QIYUN2_2            = 33,     // ÆæÈð-ÆìÔÆ2-2012ºÀ»ªÐÍ,2010
        VSB_CHERY_QIYUN3_1            = 34,     // ÆæÈð-ÆìÔÆ3-2010
        VSB_CHERY_RUIHU_1             = 35,     // ÆæÈð-Èð»¢-2007,2006,2005
        VSB_CHERY_RUIHU_2             = 36,     // ÆæÈð-Èð»¢-2009,2007
        VSB_CHERY_RUIHU_3             = 37,     // ÆæÈð-Èð»¢-2012,2011
        VSB_CHERY_RUIHU_4             = 38,     // ÆæÈð-Èð»¢-2013,2012×Ô¶¯DVVTºÀ»ªÐÍ
        VSB_CHERY_RUIHU_5             = 39,     // ÆæÈð-Èð»¢-2013¾«Ó¢°æºÀ»ªÐÍ,2012¾«Ó¢°æÊæÊÊÐÍ
        VSB_CHERY_FENGYUN2SANXIANG_1  = 40,     // ÆæÈð-·çÔÆ2ÈýÏá-2010
        VSB_CHERY_AIRUIZE7_1          = 41     // ÆæÈð-°¬ÈðÔó7-2014,2013
}VSB_CHERY_CLASS;

//ÆðÑÇ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_KIA_CLASS
{
    VSB_KIA_OTHER        = 0,   // ÆäËû£¨±£Áô£©
        VSB_KIA_K2           = 1,   // ÆðÑÇK2
        VSB_KIA_K3           = 2,   // ÆðÑÇK3
        VSB_KIA_K5           = 3,   // ÆðÑÇK5
        VSB_KIA_RIO          = 4,   // ÈñÅ·
        VSB_KIA_CERATO       = 5,   // ÈüÀ­Í¼
        VSB_KIA_SPORTAGER    = 6,   // Ê¨ÅÜ
        VSB_KIA_SOUL         = 7,   // Ðã¶û
        VSB_KIA_ZHIPAO       = 8,   // ÖÇÅÜ
        VSB_KIA_CARENS       = 9,   // ¼ÑÀÖ
        VSB_KIA_CARNIVAL     = 10,  // ¼Î»ª
        VSB_KIA_OPTIMA       = 11,  // Ô¶½¢
        VSB_KIA_OPIRUS       = 12,  // Å··ÆÀ³Ë¹
        VSB_KIA_MAXIMA       = 13,  // Ç§ÀïÂí
        VSB_KIA_FORTE        = 14,  // ¸£ÈðµÏ
        VSB_KIA_SORENTO      = 15,  // Ë÷À¼ÍÐ
        VSB_KIA_K2_1         = 16,   // ÆðÑÇ-K2-2013,2012,2011
        VSB_KIA_K3_1         = 17,   // ÆðÑÇ-K3-2012
        VSB_KIA_K5_1         = 18,   // ÆðÑÇ-K5-2012,2011
        VSB_KIA_RUIOU_1      = 19,   // ÆðÑÇ-RIOÈñÅ·-2009,2007
        VSB_KIA_QIANLIMA_1   = 20,   // ÆðÑÇ-Ç§ÀïÂí-2004
        VSB_KIA_QIANLIMA_2   = 21,   // ÆðÑÇ-Ç§ÀïÂí-2006,2005
        VSB_KIA_JIAHUA_1     = 22,   // ÆðÑÇ-¼Î»ª-Î´Öª
        VSB_KIA_XINJIALE_1   = 23,   // ÆðÑÇ-ÐÂ¼ÑÀÖ-2011
        VSB_KIA_ZHIPAO_1     = 24,   // ÆðÑÇ-ÖÇÅÜ-2014,2012,2011,2010
        VSB_KIA_SHIPAO_1     = 25,  // ÆðÑÇ-Ê¨ÅÜ-2008,2007,2005
        VSB_KIA_SHIPAO_2     = 26,  // ÆðÑÇ-Ê¨ÅÜ-2011,2009
        VSB_KIA_SHIPAO_3     = 27,  // ÆðÑÇ-Ê¨ÅÜ-2012
        VSB_KIA_SHIPAO_4     = 28,  // ÆðÑÇ-Ê¨ÅÜ-2013
        VSB_KIA_FURUIDI_1    = 29,  // ÆðÑÇ-¸£ÈðµÏ-2012,2011,2009
        VSB_KIA_FURUIDI_2    = 30,  // ÆðÑÇ-¸£ÈðµÏ-2014
        VSB_KIA_XIUER_1      = 31,  // ÆðÑÇ-Ðã¶û-2012,2010
        VSB_KIA_SUOLANTUO_1  = 32,  // ÆðÑÇ-Ë÷À¼ÍÐ-2006
        VSB_KIA_SUOLANTUO_2  = 33,  // ÆðÑÇ-Ë÷À¼ÍÐ-2012,2010,2009
        VSB_KIA_SAILATU_1    = 34,  // ÆðÑÇ-ÈüÀ­Í¼-2006,2005
        VSB_KIA_SAILATU_2    = 35,  // ÆðÑÇ-ÈüÀ­Í¼-2007
        VSB_KIA_SAILATU_3    = 36,  // ÆðÑÇ-ÈüÀ­Í¼-2012,2010GLS
        VSB_KIA_YUANJIAN_1   = 37   // ÆðÑÇ-Ô¶½¢-Î´Öª
}VSB_KIA_CLASS;

//±¼³Û×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_BENZ_CLASS
{
    VSB_BENZ_OTHER         = 0,   // ÆäËû£¨±£Áô£©
        VSB_BENZ_C             = 1,   // ±¼³ÛC¼¶
        VSB_BENZ_E             = 2,   // ±¼³ÛE¼¶
        VSB_BENZ_GLK           = 3,   // ±¼³ÛGLK¼¶
        VSB_BENZ_WEITING       = 4,   // Íþöª-PINYIN
        VSB_BENZ_SPRINTER      = 5,   // ÁèÌØ
        VSB_BENZ_VIANO         = 6,   // Î¨ÑÅÅµ
        VSB_BENZ_M             = 7,   // ±¼³ÛMÏµ
        VSB_BENZ_CLK           = 8,   // ±¼³ÛCLKÏµ
        VSB_BENZ_G             = 9,   // ±¼³ÛGÏµ
        VSB_BENZ_GL            = 10,  // ±¼³ÛGLÏµ
        VSB_BENZ_R             = 11,  // ±¼³ÛRÏµ
        VSB_BENZ_S             = 12,  // ±¼³ÛSÏµ
        VSB_BENZ_A             = 13,  // ±¼³ÛAÏµ
        VSB_BENZ_SMART         = 14,  // Ë¹ÂêÌØ(¾«Áé)
        VSB_BENZ_B             = 15,  // ±¼³ÛBÏµ
        VSB_BENZ_SLK           = 16,  // ±¼³ÛSLKÏµ
        VSB_BENZ_MB100         = 17,  // ±¼³ÛMB100
        VSB_BENZ_VITO          = 18,  // ÍþÌØ
        VSB_BENZ_CLS           = 19,  // ±¼³ÛCLSÏµ
        VSB_BENZ_SL            = 20,   // ±¼³ÛSLÏµ
        VSB_BENZ_AJI_1         = 21,   // ±¼³Û-A¼¶-2011,2009
        VSB_BENZ_AJI_2         = 22,   // ±¼³Û-A¼¶-2013
        VSB_BENZ_BJI_1         = 23,   // ±¼³Û-B¼¶-2010,2009
        VSB_BENZ_CJI_1         = 24,   // ±¼³Û-C¼¶-2010,2008,2007Ê±ÉÐÐÍ
        VSB_BENZ_CJI_2         = 25,   // ±¼³Û-C¼¶-2013,2011,CGI
        VSB_BENZ_CJI_3         = 26,   // ±¼³Û-C¼¶-2013,2011Ê±ÉÐÐÍ
        VSB_BENZ_EJI_1         = 27,   // ±¼³Û-E¼¶-2002
        VSB_BENZ_EJI_2         = 28,   // ±¼³Û-E¼¶-2007,2006
        VSB_BENZ_EJI_3         = 29,   // ±¼³Û-E¼¶-2013,2012,2011,2010,2009
        VSB_BENZ_EJI_4         = 30,   // ±¼³Û-E¼¶-2013,2012,2011,2010,2009Ê±ÉÐÐÍ
        VSB_BENZ_GLKJI_1       = 31,   // ±¼³Û-GLK¼¶-2012,2011
        VSB_BENZ_GLKJI_2       = 32,   // ±¼³Û-GLK¼¶-2012,2011ºÀ»ªÐÍ,2008
        VSB_BENZ_GLKJI_3       = 33,   // ±¼³Û-GLK¼¶-2014,2013
        VSB_BENZ_GLJI_1        = 34,   // ±¼³Û-GL¼¶-2011
        VSB_BENZ_GLJI_2        = 35,   // ±¼³Û-GL¼¶-2011×ð¹óÐÍ,2010
        VSB_BENZ_GLJI_3        = 36,   // ±¼³Û-GL¼¶-2012,2010±±ÃÀ°æ
        VSB_BENZ_GJI_1         = 37,   // ±¼³Û-G¼¶-2013,2010,2009
        VSB_BENZ_MB100_1       = 38,   // ±¼³Û-MB100-2000
        VSB_BENZ_MLJI_1        = 39,   // ±¼³Û-ML¼¶-2006,2005
        VSB_BENZ_MLJI_2        = 40,   // ±¼³Û-ML¼¶-2010,2008
        VSB_BENZ_MLJI_3        = 41,   // ±¼³Û-ML¼¶-2014,2012
        VSB_BENZ_RJI_1         = 42,   // ±¼³Û-R¼¶-2006
        VSB_BENZ_RJI_2         = 43,   // ±¼³Û-R¼¶-2007
        VSB_BENZ_RJI_3         = 44,   // ±¼³Û-R¼¶-2014,2011,2010,2009
        VSB_BENZ_SLKJI_2       = 45,   // ±¼³Û-SLK¼¶-2006,2004
        VSB_BENZ_SLKJI_3       = 46,   // ±¼³Û-SLK¼¶-2010,2009
        VSB_BENZ_SLKJI_1       = 47,   // ±¼³Û-SLK¼¶-2011
        VSB_BENZ_SJI_1         = 48,   // ±¼³Û-S¼¶-2004
        VSB_BENZ_SJI_2         = 49,   // ±¼³Û-S¼¶-2009_Hybrid,2008,2006
        VSB_BENZ_SJI_3         = 50,   // ±¼³Û-S¼¶-2009,2008ÉÌÎñÐÍ
        VSB_BENZ_SJI_4         = 51,   // ±¼³Û-S¼¶-2012,2011,2010
        VSB_BENZ_LINGTE_1      = 52,   // ±¼³Û-ÁèÌØ-2013,2012,2011
        VSB_BENZ_WEIYANUO_1    = 53,   // ±¼³Û-Î¨ÑÅÅµ-2010,2006,2004
        VSB_BENZ_WEIYANUO_2    = 54,   // ±¼³Û-Î¨ÑÅÅµ-2014,2013,2012,2011
        VSB_BENZ_WEITING_1     = 55,   // ±¼³Û-Íþöª-2013,2011,2010
        VSB_BENZ_KECHE_1       = 56    // ±¼³Û-¿Í³µ³µÐÍ1-A¿î
}VSB_BENZ_CLASS;

//Ë¹¿Â´ï×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SKODA_CLASS
{
    VSB_SKODA_OTHER            = 0,   // ÆäËû£¨±£Áô£©
        VSB_SKODA_HAORUI           = 1,   // ê»Èñ
        VSB_SKODA_FABIA            = 2,   // ¾§Èñ
        VSB_SKODA_OCTAVIA          = 3,   // Ã÷Èñ
        VSB_SKODA_SUPERB           = 4,   // ËÙÅÉ
        VSB_SKODA_SPACEBACK        = 5,   // ê¿¶¯
        VSB_SKODA_RAPID            = 6,   // ê¿Èñ
        VSB_SKODA_YETI             = 7,    // Ò°µÛ
        VSB_SKODA_HAORUI_1         = 8,      // Ë¹¿Â´ï-ê»Èñ-2013,2012,2010,2009
        VSB_SKODA_MINGRUI_1        = 9,      // Ë¹¿Â´ï-Ã÷Èñ-2009,2008,2007
        VSB_SKODA_MINGRUI_2        = 10,      // Ë¹¿Â´ï-Ã÷Èñ-2014,2013,2012,2011,2010
        VSB_SKODA_MINGRUI_3        = 11,      // Ë¹¿Â´ï-Ã÷ÈñRS-2010
        VSB_SKODA_XINRUI_1         = 12,      // Ë¹¿Â´ï-ê¿Èñ-2013ÀÖÑ¡ÐÍ
        VSB_SKODA_JINGRUI_1        = 13,      // Ë¹¿Â´ï-¾§Èñ-2011,2009,2008
        VSB_SKODA_JINGRUI_2        = 14,      // Ë¹¿Â´ï-¾§Èñ-2014,2013,2012
        VSB_SKODA_JINGRUI_3        = 15,      // Ë¹¿Â´ï-¾§Èñ-2014,2013,2012Sport°æ
        VSB_SKODA_SUPAI_1          = 16,      // Ë¹¿Â´ï-ËÙÅÉ-2013
        VSB_SKODA_YEDI_1           = 17      // Ë¹¿Â´ï-Ò°µÛ-2014,2013
}VSB_SKODA_CLASS;

//¶«·ç×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_DONGFENG_CLASS
{
    VSB_DONGFENG_OTHER                 = 0,   // ÆäËû£¨±£Áô£©
        VSB_DONGFENG_JOYEARX5              = 1,   // ¾°ÒÝX5
        VSB_DONGFENG_LINGZHI               = 2,   // ÁâÖÇ
        VSB_DONGFENG_JOYEARX3              = 3,   // ¾°ÒÝX3
        VSB_DONGFENG_JOYEAR                = 4,   // ¾°ÒÝ
        VSB_DONGFENG_FENGXINGCM7           = 5,   // ·çÐÐCM7
        VSB_DONGFENG_YUFENG                = 6,   // Óù·ç
        VSB_DONGFENG_FENGSHENA60           = 7,   // ·çÉñA60
        VSB_DONGFENG_FENGSHENS30           = 8,   // ·çÉñS30
        VSB_DONGFENG_FENGSHENH30CROSS      = 9,   // ·çÉñH30-CROSS
        VSB_DONGFENG_PICKUP                = 10,  // ¶«·çÆ¤¿¨
        VSB_DONGFENG_ZHONGXINGMIANBAOCHE   = 11,  // ¶«·çÖÐÐÍÃæ°ü³µ
        VSB_DONGFENG_XIAOXINGMIANBAOCHE    = 12,  // ¶«·çÐ¡ÐÍÃæ°ü³µ
        VSB_DONGFENG_ZHONGXINGVAN          = 13,  // ¶«·çÖØÐÍ»õ³µ
        VSB_DONGFENG_QINGXINGXIANGSHIVAN   = 14,  // ¶«·çÇáÐÍÏáÊ½»õ³µ
        VSB_DONGFENG_QINGZHONGXINGVAN      = 15,  // ¶«·çÇáÖÐÐÍÆÕÍ¨»õ³µ
        VSB_DONGFENG_FENGSHENMERCURY       = 16,  // ·çÉñË®ÐÇ
        VSB_DONGFENG_SUCCE                 = 17,  // Ë§¿Í
        VSB_DONGFENG_ODIN                  = 18,  // °Â¶¡
        VSB_DONGFENG_YUMSUN                = 19,  // ÓùÐù
        VSB_DONGFENG_RUIQI                 = 20,  // Èñæë
        VSB_DONGFENG_FENGGUANG             = 21,  // ·ç¹â
        VBR_DONGFENG_C35_1                 = 22,   // ¶«·ç-C35-2013
        VBR_DONGFENG_K07_1                 = 23,   // ¶«·ç-K07-2008
        VBR_DONGFENG_K07_2                 = 24,   // ¶«·ç-K07-2010,2006
        VBR_DONGFENG_V21_1                 = 25,   // ¶«·ç-V21-2011
        VBR_DONGFENG_JIALONG_1             = 26,   // ¶«·ç-¶«·ç¼ÎÁú-ÔØ»õ³µ
        VBR_DONGFENG_XKFG_1                = 27,   // ¶«·ç-¶«·çÐ¡¿µ·ç¹â-2013
        VBR_DONGFENG_CV03_1                = 28,   // ¶«·ç-¿¡·çCV03-2012
        VBR_DONGFENG_KAIPUTE_1             = 29,   // ¶«·ç-¿­ÆÕÌØ-C390
        VBR_DONGFENG_DUOLIKA_1             = 30,   // ¶«·ç-¶àÀû¿¨-S2800
        VBR_DONGFENG_DUOLIKA_2             = 31,   // ¶«·ç-¶àÀû¿¨-XLÖÐ¿¨
        VBR_DONGFENG_DUOLIKA_3             = 32,   // ¶«·ç-¶àÀû¿¨-ÖÐ¿¨
        VBR_DONGFENG_TIANJIN_1             = 33,   // ¶«·ç-Ìì½õ-4X2ÔØ»õ³µ
        VBR_DONGFENG_TIANJIN_2             = 34,   // ¶«·ç-Ìì½õ-A¿î
        VBR_DONGFENG_XBW_1                 = 35,   // ¶«·ç-Ð¡°ÔÍõ-Çá¿¨1
        VBR_DONGFENG_XBW_2                 = 36,   // ¶«·ç-Ð¡°ÔÍõ-Çá¿¨2
        VBR_DONGFENG_MENGKA_1              = 37,   // ¶«·ç-ÃÎ¿¨-Çá¿¨
        VBR_DONGFENG_FURUIKA_1             = 38,   // ¶«·ç-¸£Èð¿¨-Çá¿¨1
        VBR_DONGFENG_RUIQI_1               = 39,   // ¶«·ç-ÈñæëÆ¤¿¨-2013,2010,2009
        VBR_DONGFENG_A60_1                 = 40,   // ¶«·ç·çÉñ-A60-2014,2012
        VBR_DONGFENG_H30_1                 = 41,   // ¶«·ç·çÉñ-H30-Cross-2012,2011
        VBR_DONGFENG_H30_2                 = 42,   // ¶«·ç·çÉñ-H30-Cross-2014,2013
        VBR_DONGFENG_H30_3                 = 43,   // ¶«·ç·çÉñ-H30-2012
        VBR_DONGFENG_JINGYI_1              = 44,   // ¶«·ç·çÐÐ-¾°ÒÝ-2014_2012LV,2011ºÀ»ªÐÍ
        VBR_DONGFENG_JINGYI_2              = 45,   // ¶«·ç·çÐÐ-¾°ÒÝ-2014_2012XL,2011,2010,2009,2008,2007
        VBR_DONGFENG_JINGYI_3              = 46,   // ¶«·ç·çÐÐ-¾°ÒÝX5-2014,2013
        VBR_DONGFENG_LINGZHI_1             = 47,   // ¶«·ç·çÐÐ-ÁâÖÇ-2004
        VBR_DONGFENG_LINGZHI_2             = 48,   // ¶«·ç·çÐÐ-ÁâÖÇ-2011,2008,2007
        VBR_DONGFENG_LINGZHI_3             = 49,   // ¶«·ç·çÐÐ-ÁâÖÇ-2011Q3±ê×¼ÐÍ,2010Q7
        VBR_DONGFENG_LINGZHI_4             = 50,   // ¶«·ç·çÐÐ-ÁâÖÇ-2014_2013M3
        VBR_DONGFENG_LINGZHI_5             = 51   // ¶«·ç·çÐÐ-ÁâÖÇ-2014_2013V3,2011M3_ÉÌÓÃ°æ_ÊæÊÊÐÍ
}VSB_DONGFENG_CLASS;

//±ÈÑÇµÏ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_BYD_CLASS
{
    VSB_BYD_OTHER         = 0,   // ÆäËû£¨±£Áô£©
        VSB_BYD_F0            = 1,   // ±ÈÑÇµÏF0
        VSB_BYD_F3            = 2,   // ±ÈÑÇµÏF3
        VSB_BYD_F3R           = 3,   // ±ÈÑÇµÏF3R
        VSB_BYD_F6            = 4,   // ±ÈÑÇµÏF6
        VSB_BYD_G3            = 5,   // ±ÈÑÇµÏG3
        VSB_BYD_G3R           = 6,   // ±ÈÑÇµÏG3R
        VSB_BYD_G6            = 7,   // ±ÈÑÇµÏG6
        VSB_BYD_L3            = 8,   // ±ÈÑÇµÏL3
        VSB_BYD_M6            = 9,   // ±ÈÑÇµÏM6
        VSB_BYD_S6            = 10,  // ±ÈÑÇµÏS6
        VSB_BYD_SURUI         = 11,  // ËÙÈñ
        VSB_BYD_FOLEL         = 12,  // ÇØ´¨¸£À³¶û
        VSB_BYD_SIRUI         = 13,  // Ë¼Èñ
        VSB_BYD_MT5           = 14,  // ±ÈÑÇµÏMT5(¾«Áé)
        VSB_BYD_F0_1          = 15,        // ±ÈÑÇµÏ-F0-2013,2012,2011,2010,2009,2008
        VSB_BYD_F3R_1         = 16,        // ±ÈÑÇµÏ-F3R-2011,2009,2008,2007
        VSB_BYD_F6_1          = 17,        // ±ÈÑÇµÏ-F6-2011,2009,2008
        VSB_BYD_G3R_1         = 18,        // ±ÈÑÇµÏ-G3R-2011
        VSB_BYD_G6_1          = 19,        // ±ÈÑÇµÏ-G6-2013,2012,2011
        VSB_BYD_L3_1          = 20,        // ±ÈÑÇµÏ-L3-2013,2012,2011,2010
        VSB_BYD_M6_1          = 21,        // ±ÈÑÇµÏ-M6-2013,2011,2010
        VSB_BYD_S6_1          = 22,        // ±ÈÑÇµÏ-S6-2014,2013,2012,2011
        VSB_BYD_FULAIER_1     = 23,        // ±ÈÑÇµÏ-¸£À³¶û-2005ºÀ»ªÐÍ
        VSB_BYD_SURUI_1       = 24        // ±ÈÑÇµÏ-ËÙÈñ-2014,2013,2012
}VSB_BYD_CLASS;

//ÁåÄ¾×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SUZUKI_CLASS
{
    VSB_SUZUKI_OTHER           = 0,   // ÆäËû£¨±£Áô£©
        VSB_SUZUKI_ALTO            = 1,   // ³¤°²°ÂÍØ
        VSB_SUZUKI_SCROSS          = 2,   // ·æÔ¦
        VSB_SUZUKI_SWIFT           = 3,   // ÓêÑà
        VSB_SUZUKI_SX4             = 4,   // ÌìÓï
        VSB_SUZUKI_LINGYANG        = 5,   // ÁçÑò
        VSB_SUZUKI_BEIDOUXING      = 6,   // ±±¶·ÐÇ
        VSB_SUZUKI_LIANAA6         = 7,   // ÀûÑÇÄÉ-A6
        VSB_SUZUKI_LANDY           = 8,   // ÀËµÏ
        VSB_SUZUKI_SPLASH          = 9,   // ÅÉÏ²
        VSB_SUZUKI_GRANDVITARA     = 10,  // ³¬¼¶Î¬ÌØÀ­
        VSB_SUZUKI_JIMNY           = 11,  // ¼ªÄ·Äá
        VSB_SUZUKI_KAZASHI         = 12,  // ¿­ÔóÎ÷
        VSB_SUZUKI_LIANA           = 13,   // ÀûÑÇÄÉ
        VSB_SUZUKI_LIANA_1           = 14,     // ÁåÄ¾-ÀûÑÇÄÉÈýÏá-2012,2011,2010,2008,2007,2005
        VSB_SUZUKI_LIANA_2           = 15,     // ÁåÄ¾-ÀûÑÇÄÉÁ½Ïá-2013,2012,2011
        VSB_SUZUKI_BEIDOUXING_1      = 16,     // ÁåÄ¾-±±¶·ÐÇ-2012,2011,2010,2009,2008,2007,2005,2004±ê×¼ÐÍ
        VSB_SUZUKI_BEIDOUXING_2      = 17,     // ÁåÄ¾-±±¶·ÐÇ-2013,2012,2011,2010,2009,2008,2007,2005,2004,2003
        VSB_SUZUKI_BEIDOUXING_3      = 18,     // ÁåÄ¾-±±¶·ÐÇ-2013,2012,2011,2010,2009,2008,2007,2005,2004,2003ÊÊÓÃÐÍ
        VSB_SUZUKI_BEIDOUXING_4      = 19,     // ÁåÄ¾-±±¶·ÐÇ-2013X5
        VSB_SUZUKI_JIMUNI_1          = 20,     // ÁåÄ¾-¼ªÄ·Äá-2011,2010,2009,2007
        VSB_SUZUKI_JIMUNI_2          = 21,     // ÁåÄ¾-¼ªÄ·Äá-2012
        VSB_SUZUKI_SX4_1             = 22,     // ÁåÄ¾-ÌìÓïSX4ÈýÏá-2008,2006
        VSB_SUZUKI_SX4_2             = 23,     // ÁåÄ¾-ÌìÓïSX4ÈýÏá-2010,2009
        VSB_SUZUKI_SX4_3             = 24,     // ÁåÄ¾-ÌìÓïSX4Á½Ïá-2011A,2009,2008,2007
        VSB_SUZUKI_SX4_4             = 25,     // ÁåÄ¾-ÌìÓïSX4Á½Ïá-2011B
        VSB_SUZUKI_SX4_5             = 26,     // ÁåÄ¾-ÌìÓïSX4ÉÐÔÃ-2013,2012,2011
        VSB_SUZUKI_ALTO_1            = 27,     // ÁåÄ¾-°ÂÍØ-2006,2001,2000,1999,1993±ê×¼ÐÍ
        VSB_SUZUKI_ALTO_2            = 28,     // ÁåÄ¾-°ÂÍØ-2006,2004,2001,2000,1999,1993
        VSB_SUZUKI_ALTO_3            = 29,     // ÁåÄ¾-°ÂÍØ-2013
        VSB_SUZUKI_ALTO_4            = 30,     // ÁåÄ¾-°ÂÍØ-2014,2012,2011,2010,2009
        VSB_SUZUKI_SPLASH_1          = 31,     // ÁåÄ¾-ÅÉÏ²-2013,2012,2011
        VSB_SUZUKI_LANDY_1           = 32,     // ÁåÄ¾-ÀËµÏ-2011,2010,2007
        VSB_SUZUKI_LINGYANG_2        = 33,     // ÁåÄ¾-ÁçÑò-2006,2004,2003
        VSB_SUZUKI_LINGYANG_3        = 34,     // ÁåÄ¾-ÁçÑò-2009,2008,2007
        VSB_SUZUKI_LINGYANG_4        = 35,     // ÁåÄ¾-ÁçÑò-2011
        VSB_SUZUKI_LINGYANG_5        = 36,     // ÁåÄ¾-ÁçÑò-2012
        VSB_SUZUKI_GRANDVITARA_1     = 37,     // ÁåÄ¾-³¬¼¶Î¬ÌØÀ­-2011,2008,2007,2006
        VSB_SUZUKI_FENGYU_1          = 38,     // ÁåÄ¾-·æÔ¦-2014
        VSB_SUZUKI_SWIFT_1           = 39,     // ÁåÄ¾-ÓêÑà-2011_1.3L,2009,2008,2007,2005
        VSB_SUZUKI_SWIFT_2           = 40,     // ÁåÄ¾-ÓêÑà-2012,2011
        VSB_SUZUKI_KINGCHANG_1       = 41,     // ÁåÄ¾-²ýÁåÍõ-2004
        VSB_SUZUKI_LINGYANG_1        = 42     // ÁåÄ¾-ÁçÑò-2002
}VSB_SUZUKI_CLASS;

//ÎåÁâ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SGMW_CLASS
{
    VSB_SGMW_OTHER               = 0,   // ÆäËû£¨±£Áô£©
        VSB_SGMW_HONGGUANG           = 1,   // ÎåÁâºê¹â
        VSB_SGMW_HONGGUANGS          = 2,   // ÎåÁâºê¹âS
        VSB_SGMW_ZHIGUANG            = 3,   // ÎåÁâÖ®¹â
        VSB_SGMW_RONGGUANGS          = 4,   // ÎåÁâÈÙ¹âS
        VSB_SGMW_RONGGUANG           = 5,   // ÎåÁâÈÙ¹â
        VSB_SGMW_HONGTU              = 6,   // ÎåÁâºèÍ¾
        VSB_SGMW_XINGWANG            = 7,   // ÎåÁâÐËÍú
        VSB_SGMW_YANGGUANG           = 8,   // ÎåÁâÑï¹â
        VSB_SGMW_XIAOXUANFENG        = 9,   // ÎåÁâÐ¡Ðý·ç
        VSB_SGMW_WULINGZHIGUANG_1    = 10,       // ÎåÁâ-ÎåÁâÖ®¹â-2010,2009Á¢Òµ
        VSB_SGMW_WULINGZHIGUANG_2    = 11,       // ÎåÁâ-ÎåÁâÖ®¹â-2010¶Ì³µÉí,»ù±¾ÐÍ
        VSB_SGMW_WULINGZHIGUANG_3    = 12,       // ÎåÁâ-ÎåÁâÖ®¹â-2010³¤³µÉí,2008ÏáÊ½,2007
        VSB_SGMW_XINGWANG_1          = 13,       // ÎåÁâ-ÐËÍúÃæ°ü³µ-2003
        VSB_SGMW_XINGWANG_2          = 14,       // ÎåÁâ-ÐËÍúÃæ°ü³µ-2009±ê×¼
        VSB_SGMW_XINGWANG_3          = 15,       // ÎåÁâ-ÐËÍúÃæ°ü³µ-2010,2009,2007,2006,2005,2004
        VSB_SGMW_HONNGUANG_1         = 16,       // ÎåÁâ-ºê¹â-2013,2010
        VSB_SGMW_HONNGUANG_2         = 17,       // ÎåÁâ-ºê¹â-2014,2013S
        VSB_SGMW_XIAOXUANFENG_1      = 18,       // ÎåÁâ-Ð¡Ðý·ç-2006
        VSB_SGMW_YANGGUANG_1         = 19,       // ÎåÁâ-Ñï¹â-2006,2005,2004
        VSB_SGMW_YANGGUANG_2         = 20,       // ÎåÁâ-Ñï¹â-2008,2007
        VSB_SGMW_YANGGUANG_3         = 21,       // ÎåÁâ-Ñï¹â-2009,2006,2005ÊÖ¶¯±ê×¼ÐÍ
        VSB_SGMW_RONGGUANG_1         = 22,       // ÎåÁâ-ÈÙ¹âÃæ°ü³µ-2012,2011,2008»ù±¾
        VSB_SGMW_RONGGUANG_2         = 23,       // ÎåÁâ-ÈÙ¹âÃæ°ü³µ-2012,2011,2008±ê×¼
        VSB_SGMW_HONGTU_1            = 24        // ÎåÁâ-ºèÍ¾-2010,2009,2008,2007
}VSB_SGMW_CLASS;

//³¤°²×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_CHANA_CLASS
{
    VSB_CHANA_OTHER                = 0,   // ÆäËû£¨±£Áô£©
        VSB_CHANA_HONOR                = 1,   // Å·Åµ
        VSB_CHANA_XINGKA               = 2,   // ³¤°²ÐÇ¿¨
        VSB_CHANA_ZHIXING              = 3,   // ³¤°²Ö®ÐÇ
        VSB_CHANA_PICKUP               = 4,   // ³¤°²ÉñæëÐ¡¿¨(³¤°²Æ¤¿¨)
        VSB_CHANA_ZHIXING2             = 5,   // ³¤°²Ö®ÐÇ2´ú
        VSB_CHANA_TAURUS               = 6,   // ½ðÅ£ÐÇ
        VSB_CHANA_XINGGUANG            = 7,   // ³¤°²ÐÇ¹â
        VSB_CHANA_BENNI                = 8,   // ±¼±¼
        VSB_CHANA_ALSVIN               = 9,   // ÔÃÏè
        VSB_CHANA_CX20                 = 10,  // ³¤°²CX20
        VSB_CHANA_CX30                 = 11,  // ³¤°²CX30
        VSB_CHANA_EADO                 = 12,  // ÒÝ¶¯
        VSB_CHANA_ZHIXINGS460          = 13,  // ³¤°²Ö®ÐÇS460
        VSB_CHANA_CM8                  = 14,  // ³¤°²CM8
        VSB_CHANA_XINBAO               = 15,  // ÐÂ±ª
        VSB_CHANA_XUNLONG              = 16,  // Ñ«Áú
        VSB_CHANA_YUNTONG              = 17,  // ÔËÍ¨
        VSB_CHANA_LEIMENG              = 18,  // ÀØÃÉ
        VSB_CHANA_XINGYUN              = 19,  // ³¤°²ÐÇÔÏ
        VSB_CHANA_OULIWEI              = 20,  // Å·Á¦Íþ
        VSB_CHANA_EADOXT               = 21,   // ÖÂÉÐXT
        VSB_CHANA_XINGYUN_1            = 22,      // ³¤°²ÉÌÓÃ-ÐÇÔÏ-2004,2003,2000
        VSB_CHANA_OULIWEI_1            = 23,      // ³¤°²ÉÌÓÃ-Å·Á¦Íþ-2013
        VSB_CHANA_YUNTONG_1            = 24,      // ³¤°²ÉÌÓÃ-ÔËÍ¨-2004
        VSB_CHANA_TAURUS_1             = 25,      // ³¤°²ÉÌÓÃ-½ðÅ£ÐÇ-2013,2012,2011,2010
        VSB_CHANA_LEIMENG_1            = 26,      // ³¤°²ÉÌÓÃ-ÀØÃÉ-2005,2003
        VSB_CHANA_ZHIXING_1            = 27,      // ³¤°²ÉÌÓÃ-³¤°²Ö®ÐÇ-2010,2009
        VSB_CHANA_ZHIXING_2            = 28,      // ³¤°²ÉÌÓÃ-³¤°²Ö®ÐÇ-2013
        VSB_CHANA_ZHIXING_3            = 29,      // ³¤°²ÉÌÓÃ-³¤°²Ö®ÐÇ2-2009,2008
        VSB_CHANA_ZHIXING_4            = 30,      // ³¤°²ÉÌÓÃ-³¤°²Ö®ÐÇ2-2012
        VSB_CHANA_ZHIXING_5            = 31,      // ³¤°²ÉÌÓÃ-³¤°²Ö®ÐÇS460-2010,2009
        VSB_CHANA_ZHIXING_6            = 32,      // ³¤°²ÉÌÓÃ-³¤°²Ö®ÐÇSC6350-2003
        VSB_CHANA_PICKUP_1             = 33,      // ³¤°²ÉÌÓÃ-³¤°²Î¢»õÉñæë-2013,2012
        VSB_CHANA_XINGGUANG_1          = 34,      // ³¤°²ÉÌÓÃ-³¤°²ÐÇ¹â4500-2009,2007
        VSB_CHANA_XINGGUANG_2          = 35,      // ³¤°²ÉÌÓÃ-³¤°²ÐÇ¹â4500-2012
        VSB_CHANA_HONOR_1              = 36      // ³¤°²ÉÌÓÃ-³¤°²Å·Åµ-2014,2012
}VSB_CHANA_CLASS;

//³¤°²½Î³µ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_EADO_CLASS
{
    VSB_EADO_OTHER                = 0,       // ÆäËû£¨±£Áô£©
        VSB_EADO_CS_1                 = 1,       // ³¤°²½Î³µ-CS35-2014,2013,2012
        VSB_EADO_CX_1                 = 2,       // ³¤°²½Î³µ-CX20-2011
        VSB_EADO_CX_2                 = 3,       // ³¤°²½Î³µ-CX30Á½Ïá-2010
        VSB_EADO_BENBEN_1             = 4,       // ³¤°²½Î³µ-±¼±¼-2008,2007,2006
        VSB_EADO_BENBEN_2             = 5,       // ³¤°²½Î³µ-±¼±¼-2008¾­µäÐÍ,2007ÔË¶¯ÐÍ
        VSB_EADO_BENBEN_3             = 6,       // ³¤°²½Î³µ-±¼±¼-2010
        VSB_EADO_BENBEN_4             = 7,       // ³¤°²½Î³µ-±¼±¼MINI-2011,2010
        VSB_EADO_BENBEN_5             = 8,       // ³¤°²½Î³µ-±¼±¼MINI-2012
        VSB_EADO_YUEXIANG_1           = 9,       // ³¤°²½Î³µ-ÔÃÏè-2011,2010,2009
        VSB_EADO_YUEXIANG_2           = 10,       // ³¤°²½Î³µ-ÔÃÏè-2012
        VSB_EADO_YUEXIANG_3           = 11,       // ³¤°²½Î³µ-ÔÃÏèV3-2013,2012
        VSB_EADO_YUEXIANG_4           = 12,       // ³¤°²½Î³µ-ÔÃÏèV5-2012
        VSB_EADO_YIDONG_1             = 13        // ³¤°²½Î³µ-ÒÝ¶¯-2014,2013,2012
}VSB_EADO_CLASS;

//½ð±­×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_JINBEI_CLASS
{
    VSB_JINBEI_OTHER           = 0,   // ÆäËû£¨±£Áô£©
        VSB_JINBEI_GRACE           = 1,   // ½ð±­¸óÈðË¹
        VSB_JINBEI_HIACE           = 2,   // ½ð±­º£Ê¨
        VSB_JINBEI_HAIXING         = 3,   // º£ÐÇ
        VSB_JINBEI_BADAO           = 4,   // ½ð±­°ÔµÀ
        VSB_JINBEI_LINGQI          = 5,   // Áìæë
        VSB_JINBEI_JINQI           = 6,   // ½ðæë
        VSB_JINBEI_LINGCHI         = 7,   // Áì³Û
        VSB_JINBEI_QIYUN           = 8,   // æëÔË
        VSB_JINBEI_ZHISHANG_1      = 9,       // ½ð±­-ÖÇÉÐS30-2014,2013,2012
        VSB_JINBEI_HAIXING_1       = 10,       // ½ð±­-º£ÐÇ-2012
        VSB_JINBEI_HAIXING_2       = 11,       // ½ð±­-º£ÐÇ-2012A7ÌØ»ÝÐÍ,2011
        VSB_JINBEI_HIACE_1         = 12,       // ½ð±­-º£Ê¨-2008
        VSB_JINBEI_HIACE_2         = 13,       // ½ð±­-º£Ê¨-2013,2011,2010
        VSB_JINBEI_HIACE_3         = 14,       // ½ð±­-º£Ê¨-2013ºÀ»ªÐÍ,2011ÆûÓÍ,2008±ê×¼ÐÍ
        VSB_JINBEI_JINDIAN_1       = 15,       // ½ð±­-½ðµä-2009
        VSB_JINBEI_GRACE_1         = 16,       // ½ð±­-¸óÈðË¹MPV-2011,2008,2007
        VSB_JINBEI_GRACE_2         = 17,       // ½ð±­-¸óÈðË¹MPV-2011ÓùÁìºÀ»ªÐÍ,2010,2009,2007±ê×¼9×ù
        VSB_JINBEI_BADAO_1         = 18       // ½ð±­-°ÔµÀSUV-2011,2008 
        
}VSB_JINBEI_CLASS;

//¼ªÀû×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_GEELY_CLASS
{
    VSB_GEELY_OTHER              = 0,   // ÆäËû£¨±£Áô£©
        VSB_GEELY_EC7                = 1,   // ¼ªÀûµÛºÀEC7
        VSB_GEELY_EC8                = 2,   // ¼ªÀûµÛºÀEC8                                                          
        VSB_GEELY_SC3                = 3,   // ¼ªÀûSC3
        VSB_GEELY_SC5RV              = 4,   // ¼ªÀûSC5-RV
        VSB_GEELY_SC6                = 5,   // ¼ªÀûSC6
        VSB_GEELY_JINGYING           = 6,   // ½ðÓ¥
        VSB_GEELY_JINGGANG           = 7,   // ½ð¸Õ
        VSB_GEELY_SX7                = 8,   // ¼ªÀûSX7
        VSB_GEELY_HAOQING            = 9,   // ºÀÇé
        VSB_GEELY_MEIRI              = 10,  // ÃÀÈÕ
        VSB_GEELY_YINGLUNSC7         = 11,  // Ó¢Â×SC7
        VSB_GEELY_PANDA              = 12,  // ÐÜÃ¨
        VSB_GEELY_YUANJING           = 13,  // Ô¶¾°
        VSB_GEELY_ZIYOUJIAN          = 14   // ×ÔÓÉ½¢
}VSB_GEELY_CLASS;

//ÈýÁâ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_MITSUBISHI_CLASS
{
    VSB_MITSUBISHI_OTHER                 = 0,   // ÆäËû£¨±£Áô£©
        VSB_MITSUBISHI_GALANT                = 1,   // ¸êÀ¶
        VSB_MITSUBISHI_ZINGER                = 2,   // ¾ý¸ó
        VSB_MITSUBISHI_LANCER                = 3,   // À¶Éª
        VSB_MITSUBISHI_LANCEREX              = 4,   // ÒíÉñ
        VSB_MITSUBISHI_PAJERO                = 5,   // ÅÁ½ÜÂÞ
        VSB_MITSUBISHI_PAJEROSPORT           = 6,   // ÅÁ½ÜÂÞ-¾¢³©
        VSB_MITSUBISHI_JINGXUANASX           = 7,   // ¾¢ìÅASX
        VSB_MITSUBISHI_GRANDIS               = 8,   // ÈýÁâ¸ñÀ¶µÏ
        VSB_MITSUBISHI_OUTLANDER             = 9,   // Å·À¶µÂ
        VSB_MITSUBISHI_QINXINGYUEYE          = 10,  // ÈýÁâÇáÐÍÔ½Ò°
        VSB_MITSUBISHI_GTO                   = 11,  // ÈýÁâGTO
        VSB_MITSUBISHI_SOVERAN               = 12,  // ÈýÁâÁâÉð
        VSB_MITSUBISHI_LIONVEL               = 13,  // ÈýÁâÁâÔÃ
        VSB_MITSUBISHI_HAFEISIMBO            = 14,   // ¹þ·ÉÈüÂí
        VSB_MITSUBISHI_LANCEREX_1            = 15,   // ÈýÁâ-ÈýÁâÒíÉñ-2012,2011,2010
        VSB_MITSUBISHI_JINGXUAN_1            = 16,   // ÈýÁâ-¾¢ìÅ-2012,2011
        VSB_MITSUBISHI_ZINGER_1              = 17,   // ÈýÁâ-¾ý¸ó-2011,2009
        VSB_MITSUBISHI_PAJERO_1              = 18,   // ÈýÁâ-ÅÁ½ÜÂÞ-2004¹ú²ú
        VSB_MITSUBISHI_PAJERO_2              = 19,   // ÈýÁâ-ÅÁ½ÜÂÞ-2004½ø¿Ú
        VSB_MITSUBISHI_PAJERO_3              = 20,   // ÈýÁâ-ÅÁ½ÜÂÞ-2010½ø¿Ú
        VSB_MITSUBISHI_PAJEROSPORT_1         = 21,   // ÈýÁâ-ÅÁ½ÜÂÞ¾¢³©-2011
        VSB_MITSUBISHI_GALANT_1              = 22,   // ÈýÁâ-¸êÀ¶-2009
        VSB_MITSUBISHI_GALANDI_1             = 23,   // ÈýÁâ-¸ñÀ¶µÏ-2007
        VSB_MITSUBISHI_GALANDI_2             = 24,   // ÈýÁâ-¸ñÀ¶µÏ-2010
        VSB_MITSUBISHI_OUTLANDER_1           = 25,   // ÈýÁâ-Å·À¶µÂ-2012,2011,2010
        VSB_MITSUBISHI_OUTLANDER_2           = 26,   // ÈýÁâ-Å·À¶µÂ-2013
        VSB_MITSUBISHI_LINGYUE_1             = 27,   // ÈýÁâ-ÁâÔÃ-Î´Öª
        VSB_MITSUBISHI_LANCER_1              = 28   // ÈýÁâ-À¶Éª-2010
}VSB_MITSUBISHI_CLASS;

//À×¿ËÈøË¹×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_LEXUS_CLASS
{
    VSB_LEXUS_OTHER             = 0,   // ÆäËû£¨±£Áô£©
        VSB_LEXUS_ES                = 1,   // À×¿ËÈøË¹ES
        VSB_LEXUS_CT                = 2,   // À×¿ËÈøË¹CT                                                          
        VSB_LEXUS_RX                = 3,   // À×¿ËÈøË¹RX
        VSB_LEXUS_IS                = 4,   // À×¿ËÈøË¹IS
        VSB_LEXUS_LX                = 5,   // À×¿ËÈøË¹LX
        VSB_LEXUS_GS                = 6,   // À×¿ËÈøË¹GS
        VSB_LEXUS_GX                = 7,   // À×¿ËÈøË¹GX
        VSB_LEXUS_LS                = 8,    // À×¿ËÈøË¹LS
        VSB_LEXUS_CT_1              = 9,   // À×¿ËÈøË¹-CT-2013,2012,2011
        VSB_LEXUS_ES_1              = 10,   // À×¿ËÈøË¹-ES-1994
        VSB_LEXUS_ES_2              = 11,   // À×¿ËÈøË¹-ES-2010,2009,2006
        VSB_LEXUS_ES_3              = 12,   // À×¿ËÈøË¹-ES-2013,2012
        VSB_LEXUS_GS_1              = 13,   // À×¿ËÈøË¹-GS-2011,2010,2009,2008,2005
        VSB_LEXUS_GX_1              = 14,   // À×¿ËÈøË¹-GX-2012,2010
        VSB_LEXUS_IS_1              = 15,   // À×¿ËÈøË¹-IS-2011
        VSB_LEXUS_LS_1              = 16,   // À×¿ËÈøË¹-LS-1994
        VSB_LEXUS_LS_2              = 17,   // À×¿ËÈøË¹-LS-2005,2004
        VSB_LEXUS_LS_3              = 18,   // À×¿ËÈøË¹-LS-2009,2007,2006
        VSB_LEXUS_LX_1              = 19,   // À×¿ËÈøË¹-LX-2013,2012
        VSB_LEXUS_RX_1              = 20,   // À×¿ËÈøË¹-RX-2011,2010,2009
        VSB_LEXUS_RX_2              = 21,   // À×¿ËÈøË¹-RX-2013,2012
        VSB_LEXUS_RX_3              = 22   // À×¿ËÈøË¹-RX-2007
}VSB_LEXUS_CLASS;

//ÈÙÍþ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_ROEWE_CLASS
{
    VSB_ROEWE_OTHER              = 0,   // ÆäËû£¨±£Áô£©
        VSB_ROEWE_350                = 1,   // ÈÙÍþ350
        VSB_ROEWE_550                = 2,   // ÈÙÍþ550                                                          
        VSB_ROEWE_W5                 = 3,   // ÈÙÍþW5
        VSB_ROEWE_950                = 4,   // ÈÙÍþ950
        VSB_ROEWE_750                = 5,   // ÈÙÍþ750
        VSB_ROEWE_350_1              = 6,   // ÈÙÍþ-350-2011Ñ¸ÖÇ°æ,2010
        VSB_ROEWE_350_2              = 7,   // ÈÙÍþ-350-2014,2013,2012,2011
        VSB_ROEWE_550_1              = 8,   // ÈÙÍþ-550-2012,2010,2009,2008
        VSB_ROEWE_750_1              = 9,   // ÈÙÍþ-750-2009,2008,2007,2006
        VSB_ROEWE_750_2              = 10,  // ÈÙÍþ-750-2012,2011
        VSB_ROEWE_950_1              = 11   // ÈÙÍþ-950-2012
}VSB_ROEWE_CLASS;


//º£Âí×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_HAIMA_CLASS
{
    VSB_HAIMA_OTHER               = 0,   // ÆäËû£¨±£Áô£©
        VSB_HAIMA_PREMARIN            = 1,   // ÆÕÁ¦Âí
        VSB_HAIMA_S7                  = 2,   // º£ÂíS7
        VSB_HAIMA_PRINCE              = 3,   // º£ÂíÍõ×Ó
        VSB_HAIMA_CUPID               = 4,   // º£Âí2-Çð±ÈÌØ
        VSB_HAIMA_HATCHBACK           = 5,   // º£Âí3-»¶¶¯
        VSB_HAIMA_KNIGHT              = 6,   // ÆïÊ¿
        VSB_HAIMA_HAPPIN              = 7,   // º£¸£ÐÇ
        VSB_HAIMA_FAMILY              = 8,   // ¸£ÃÀÀ´
        VSB_HAIMA_M3                  = 9,    // º£ÂíM3
        VSB_HAIMA_CUPID_1             = 10,   // º£Âí-Çð±ÈÌØ-2012,2011,2010
        VSB_HAIMA_PREMARIN_1          = 11,   // º£Âí-ÆÕÁ¦Âí-2007
        VSB_HAIMA_PREMARIN_2          = 12,   // º£Âí-ÆÕÁ¦Âí-2012,2010
        VSB_HAIMA_HATCHBACK_1         = 13,   // º£Âí-»¶¶¯-2010,2009
        VSB_HAIMA_HAPPIN_1            = 14,   // º£Âí-º£¸£ÐÇ-2010,2009,2008,2007,2004
        VSB_HAIMA_HAPPIN_2            = 15,   // º£Âí-º£¸£ÐÇ-2012,2011
        VSB_HAIMA_M3_1                = 16,   // º£Âí-º£Âí3-2010,2008,2007
        VSB_HAIMA_FAMILY_1            = 17,   // º£Âí-¸£ÃÀÀ´-2007,2006
        VSB_HAIMA_FAMILY_2            = 18,   // º£Âí-¸£ÃÀÀ´-2010,2009,2008
        VSB_HAIMA_FAMILY_3            = 19,   // º£Âí-¸£ÃÀÀ´-2011
        VSB_HAIMA_FAMILY_4            = 20,   // º£Âí-¸£ÃÀÀ´-2014,2013,2012
        VSB_HAIMA_KNIGHT_1            = 21,   // º£Âí-ÆïÊ¿-2013_2012A,2011,2010
        VSB_HAIMA_KNIGHT_2            = 22,   // º£Âí-ÆïÊ¿-2013_2012B
        VSB_HAIMA_NEWHONGDA_1         = 23,   // º£ÂíÉÌÓÃ³µ-ÐÂºè´ï-2009
        VSB_HAIMA_NEWHONDGA_2         = 24,   // º£ÂíÉÌÓÃ³µ-ÐÂºè´ï-2012
        VSB_HAIMA_PRINCE_1            = 25,   // º£ÂíÉÌÓÃ³µ-º£ÂíÍõ×Ó-2010
        VSB_HAIMA_RONGDA_1            = 26   // º£ÂíÉÌÓÃ³µ-ÈÙ´ï-2012
        
}VSB_HAIMA_CLASS;

//³¤³Ç×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_GREATWALL_CLASS
{
    VSB_GREATWALL_OTHER               = 0,   // ÆäËû£¨±£Áô£©
        VSB_GREATWALL_SING                = 1,   // ÈüÓ°
        VSB_GREATWALL_SAIJUN              = 2,   // Èü¿¥
        VSB_GREATWALL_HAVAL               = 3,   // ¹þ¸¥
        VSB_GREATWALL_SAFE                = 4,   // Èü¸¥
        VSB_GREATWALL_SAIKU               = 5,   // Èü¿á
        VSB_GREATWALL_SAILING             = 6,   // ÈüÁå
        VSB_GREATWALL_KINGDEER            = 7,   // ½ðµÏ¶û
        VSB_GREATWALL_DEER                = 8,   // µÏ¶û
        VSB_GREATWALL_WINGLE              = 9,   // ·ç¿¥
        VSB_GREATWALL_COOLBEAR            = 10,  // ¿áÐÜ
        VSB_GREATWALL_LINGAO              = 11,  // Áè°Á
        VSB_GREATWALL_CROSS               = 12,  // ìÅÀö
        VSB_GREATWALL_GWPERI              = 13,  // ¾«Áé
        VSB_GREATWALL_COWRY               = 14,  // ÌÚÒí
        VSB_GREATWALL_M4                  = 15,   // ³¤³ÇM4
        VSB_GREATWALL_LINGAO_1            = 16,   // ³¤³Ç-Áè°Á-2010
        VSB_GREATWALL_HAVAL_1             = 17,   // ³¤³Ç-¹þ¸¥H3-2010,2009
        VSB_GREATWALL_HAVAL_2             = 18,   // ³¤³Ç-¹þ¸¥H3-2012,2010,2009ÈñÒâ°æ
        VSB_GREATWALL_HAVAL_3             = 19,   // ³¤³Ç-¹þ¸¥H5-2012,2011,2010
        VSB_GREATWALL_HAVAL_4             = 20,   // ³¤³Ç-¹þ¸¥H5-2012,2011,2010ÂÌ¾²ºÀ»ªÐÍ
        VSB_GREATWALL_HAVAL_5             = 21,   // ³¤³Ç-¹þ¸¥H5-2012ÊæÊÊÐÍ
        VSB_GREATWALL_HAVAL_6             = 22,   // ³¤³Ç-¹þ¸¥H5-2014,2013
        VSB_GREATWALL_HAVAL_8             = 23,   // ³¤³Ç-¹þ¸¥H6-2014,2013Éý¼¶°æ
        VSB_GREATWALL_HAVAL_9             = 24,   // ³¤³Ç-¹þ¸¥M2-2010
        VSB_GREATWALL_HAVAL_10            = 25,   // ³¤³Ç-¹þ¸¥M2-2013,2012
        VSB_GREATWALL_HAVAL_11            = 26,   // ³¤³Ç-¹þ¸¥M4-2012
        VSB_GREATWALL_HAVAL_12            = 27,   // ³¤³Ç-¹þ¸¥ÅÉ-2011
        VSB_GREATWALL_CROSS_1             = 28,   // ³¤³Ç-ìÅÀö-2009,2008
        VSB_GREATWALL_CROSS_2             = 29,   // ³¤³Ç-ìÅÀöCROSS-2011,2009
        VSB_GREATWALL_JINGLING_1          = 30,   // ³¤³Ç-¾«Áé-Î´Öª
        VSB_GREATWALL_SING_1              = 31,   // ³¤³Ç-ÈüÓ°-2003
        VSB_GREATWALL_SAIKU_1             = 32,   // ³¤³Ç-Èü¿á-2004
        VSB_GREATWALL_SAILING_1           = 33,   // ³¤³Ç-ÈüÁå-Î´Öª
        VSB_GREATWALL_DIER_1              = 34,   // ³¤³Ç-µÏ¶û-Î´Öª
        VSB_GREATWALL_COOLBEAR_1          = 35,   // ³¤³Ç-¿áÐÜ-2010,2009
        VSB_GREATWALL_KINGDEER_1          = 36,   // ³¤³Ç-½ðµÏ¶û-2008,2007,2004,2003
        VSB_GREATWALL_GREATWALL_1         = 37,   // ³¤³Ç-³¤³ÇC20R-2013,2011
        VSB_GREATWALL_GREATWALL_2         = 38,   // ³¤³Ç-³¤³ÇC30-2010
        VSB_GREATWALL_GREATWALL_3         = 39,   // ³¤³Ç-³¤³ÇC30-2012
        VSB_GREATWALL_GREATWALL_4         = 40,   // ³¤³Ç-³¤³ÇC30-2013
        VSB_GREATWALL_GREATWALL_5         = 41,   // ³¤³Ç-³¤³ÇC50-2013,2012
        VSB_GREATWALL_GREATWALL_6         = 42,   // ³¤³Ç-³¤³ÇV80-2013,2012,2010,2009,2008
        VSB_GREATWALL_WINGLE_1            = 43,   // ³¤³Ç-·ç¿¥3-2011,2010,2007,2006
        VSB_GREATWALL_WINGLE_2            = 44,   // ³¤³Ç-·ç¿¥5-2014,2012,2011,2009 
        VSB_GREATWALL_HAVAL_7             = 45   // ³¤³Ç-¹þ¸¥H6-2013,2012,2011
}VSB_GREATWALL_CLASS;

//µÀÆæ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_DS_CLASS
{
    VSB_DS_OTHER                      = 0,          // ÆäËû£¨±£Áô£©
        VSB_DS_KUBO_1                     = 1,          // µÀÆæ-¿á²«-2011,2010,2009,2008
        VSB_DS_KUWEI_1                    = 2,          // µÀÆæ-¿áÍþ-2011,2010,2009
        VSB_DS_KUWEI_2                    = 3           // µÀÆæ-¿áÍþ-2013
}VSB_DS_CLASS;

//Â·»¢×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_LANDROVER_CLASS
{
    VSB_LANDROVER_OTHER              = 0,   // ÆäËû£¨±£Áô£©
        VSB_LANDROVER_FAXIAN_1           = 1,   // Â·»¢-·¢ÏÖ-2005,2004
        VSB_LANDROVER_FAXIAN_2           = 2,   // Â·»¢-·¢ÏÖ-2013,2011,2010
        VSB_LANDROVER_LANSHENG_1         = 3,   // Â·»¢-À¿Ê¤-2012,2011,2010
        VSB_LANDROVER_LANSHENG_2         = 4,   // Â·»¢-À¿Ê¤¼«¹â-2014,2013,2012,2011
        VSB_LANDROVER_LANSHENG_3         = 5,   // Â·»¢-À¿Ê¤ÔË¶¯°æ-2013,2012,2011,2010
        VSB_LANDROVER_LANSHENG_4         = 6,   // Â·»¢-À¿Ê¤ÔË¶¯°æ-2013Ô¦ºìÏÞÁ¿°æ
        VSB_LANDROVER_SXZ_1              = 7   // Â·»¢-ÉñÐÐÕß2´ú-2014,2013,2011
}VSB_LANDROVER_CLASS;

//Ãû¾ô×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_MG_CLASS
{
    VSB_MG_OTHER             = 0,  // ÆäËû£¨±£Áô£©
        VSB_MG_3SW_1             = 1,  // MG-MG-3SW-2009,2008
        VSB_MG_MG3_1             = 2,  // MG-MG3-2013,2012,2011
        VSB_MG_MG5_1             = 3,  // MG-MG5-2014,2013,2012
        VSB_MG_MG6_1             = 4,  // MG-MG6ÈýÏá-2012,2011
        VSB_MG_MG7_1             = 5,  // MG-MG7-2010,2009,2008,2007
}VSB_MG_CLASS;

//Ò»Æû×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_FAW_CLASS
{
    VSB_FAW_OTHER                                       = 0,    // ÆäËû£¨±£Áô£©
        VSB_FAW_501_1                                        = 1,    //Ò»Æû-501-Çá¿¨
        VSB_FAW_N3_1                                        = 2,    //Ò»Æû-N3+Á½Ïá-2006
        VSB_FAW_N3_2                                        = 3,    //Ò»Æû-N3+Á½Ïá-2008
        VSB_FAW_JIABAO_1                                    = 4,    //Ò»Æû-¼Ñ±¦»õ³µ-2011T50,T57
        VSB_FAW_JIABAO_2                                    = 5,    //Ò»Æû-¼Ñ±¦Ãæ°ü³µ-2000
        VSB_FAW_JIABAO_3                                    = 6,    //Ò»Æû-¼Ñ±¦Ãæ°ü³µ-2006
        VSB_FAW_JIABAO_4                                    = 7,    //Ò»Æû-¼Ñ±¦Ãæ°ü³µ-2012,2011V50ÊæÊÊ°æ
        VSB_FAW_JIABAO_5                                    = 8,    //Ò»Æû-¼Ñ±¦Ãæ°ü³µ-2012,2011V70
        VSB_FAW_JIABAO_6                                    = 9,    //Ò»Æû-¼Ñ±¦Ãæ°ü³µ-2013,2012,2011V52ÊµÓÃÐÍ
        VSB_FAW_JIABAO_7                                    = 10,    //Ò»Æû-¼Ñ±¦Ãæ°ü³µ-2014,2013V80
        VSB_FAW_XIALI_1                                        = 11,    //Ò»Æû-ÏÄÀû-1999,1997
        VSB_FAW_XIALI_2                                        = 12,    //Ò»Æû-ÏÄÀû2000-2003,2002
        VSB_FAW_XIALI_3                                        = 13,    //Ò»Æû-ÏÄÀûA+-2011,2010,2006,2005
        VSB_FAW_XIALI_4                                        = 14,    //Ò»Æû-ÏÄÀûN3-2012
        VSB_FAW_XIALI_5                                        = 15,    //Ò»Æû-ÏÄÀûN5-2014,2013,2011,2010,2009
        VSB_FAW_XIALI_6                                        = 16,    //Ò»Æû-ÏÄÀûN7-2013
        VSB_FAW_AOWEI_1                                        = 17,    //Ò»Æû-°ÂÍþJ5P-2005,2004,2003
        VSB_FAW_AOWEI_2                                        = 18,    //Ò»Æû-°ÂÍþJ5P-4X2¸´ºÏÐÍÇ£Òý³µ,×ÔÐ¶³µ
        VSB_FAW_AOWEI_3                                        = 19,    //Ò»Æû-°ÂÍþJ5P-4X2Ç£Òý³µ,Ð¶»õ³µ
        VSB_FAW_AOWEI_4                                        = 20,    //Ò»Æû-°ÂÍþJ5P-6X6Ô½Ò°×ÔÐ¶³µ
        VSB_FAW_AOXING_1                                    = 21,    //Ò»Æû-°ÂÐÇ-2004
        VSB_FAW_WEILE_1                                        = 22,    //Ò»Æû-ÍþÀÖ-2004
        VSB_FAW_WEILE_2                                        = 23,    //Ò»Æû-ÍþÀÖ-2008,2007
        VSB_FAW_WEIZI_1                                        = 24,    //Ò»Æû-Íþ×Ë-2004
        VSB_FAW_WEIZHI_1                                    = 25,    //Ò»Æû-ÍþÖ¾V2-2012ÊÖ¶¯CROSS
        VSB_FAW_WEIZHI_2                                    = 26,    //Ò»Æû-ÍþÖ¾V2-2012×Ô¶¯CROSS,2010
        VSB_FAW_WEIZHI_3                                    = 27,    //Ò»Æû-ÍþÖ¾V5-2013,2012
        VSB_FAW_WEIZHI_4                                    = 28,    //Ò»Æû-ÍþÖ¾ÈýÏá-2009,2008,2007
        VSB_FAW_WEIZHI_5                                    = 29,    //Ò»Æû-ÍþÖ¾ÈýÏá-2011
        VSB_FAW_XIAOJIEFANG_1                                = 30,    //Ò»Æû-Ð¡½â·Å-90,109ÂíÁ¦Çá¿¨
        VSB_FAW_HANWEI_1                                    = 31,    //Ò»Æû-º·ÍþJ5M-4X4ÔØ»õ³µ
        VSB_FAW_HANWEI_2                                    = 32,    //Ò»Æû-º·ÍþJ5M-6X6Ç£Òý³µ,6X4×ÔÐ¶³µ
        VSB_FAW_HANWEI_3                                    = 33,    //Ò»Æû-º·ÍþJ5M-8X8×ÔÐ¶³µ
        VSB_FAW_XINDAWEI_1                                    = 34,    //Ò»Æû-ÐÂ´óÍþ-2010
        VSB_FAW_XINHANWEI_1                                    = 35,    //Ò»Æû-ÐÂº·Íþ-2011
        VSB_FAW_SENYA_1                                        = 36,    //Ò»Æû-É­ÑÅM80-2012,2011,2009
        VSB_FAW_TENGWEI_1                                    = 37,    //Ò»Æû-ÌÚÍþL5M-ÖØ¿¨
        VSB_FAW_JIEFANG_1                                    = 38,    //Ò»Æû-½â·ÅJ4R-A¿î
        VSB_FAW_JIEFANG_2                                    = 39,    //Ò»Æû-½â·ÅJ4R-×ÔÐ¶³µ,Ç£Òý³µ
        VSB_FAW_JIEFANG_3                                    = 40,    //Ò»Æû-½â·ÅJ6-2004
        VSB_FAW_JIEFANG_4                                    = 41,    //Ò»Æû-½â·ÅJ6-ÖØ¿¨
        VSB_FAW_JIEFANG_5                                    = 42,    //Ò»Æû-½â·ÅJ6L-ÖÐ¿¨
        VSB_FAW_JIEFANG_6                                    = 43,    //Ò»Æû-½â·ÅL5-A¿î
        VSB_FAW_SAILONG_1                                    = 44,    //Ò»Æû-ÈüÁú-ÖÐ¿¨
        VSB_FAW_JUNWEI_1                                    = 45,    //Ò»Æû-¿¥ÍþJ5K-ÖÐ¿¨
        VSB_FAW_B50_1                                        = 46,    //Ò»Æû-±¼ÌÚB50-2012,2011,2009
        VSB_FAW_B50_2                                        = 47    //Ò»Æû-±¼ÌÚB50-2013
}VSB_FAW_CLASS;


//ÉÏÆû×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SAICMOTOR_CLASS
{
    VSB_SAICMOTOR_OTHER               = 0,    // ÆäËû£¨±£Áô£©
        VSB_HONGYAN_JIESHI_1              = 1,    // ÉÏÆûÒÀÎ¬¿ÂºìÑÒ-½ÜÊ¨-2012
        VSB_DATONG_V80_1                  = 2     // ÉÏÆû´óÍ¨-V80-2014,2013,2012,2011
}VSB_SAICMOTOR_CLASS;

//¶«ÄÏÆû³µ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SOUEAST_CLASS
{
    VSB_SOUEAST_OTHER                 = 0,    // ÆäËû£¨±£Áô£©
        VSB_SOUEAST_V3_1                  = 1,    // ¶«ÄÏ-V3ÁâÔÃ-2011³¬ÖµÐÒ¸£°æ,2010,2009,2008
        VSB_SOUEAST_V3_2                  = 2,    // ¶«ÄÏ-V3ÁâÔÃ-2012
        VSB_SOUEAST_V3_3                  = 3,    // ¶«ÄÏ-V3ÁâÔÃ-2012Æì½¢°æ,2011,2010ÐÂ·ç²É°æ
        VSB_SOUEAST_V3_4                  = 4,    // ¶«ÄÏ-V3ÁâÔÃ-2012·ç²É°æ
        VSB_SOUEAST_V5_1                  = 5,    // ¶«ÄÏ-V5ÁâÖÂ-2014,2013,2012
        VSB_SOUEAST_XIWANG_1              = 6,    // ¶«ÄÏ-Ï£Íú-2011,2010
        VSB_SOUEAST_DELIKA_1              = 7,    // ¶«ÄÏ-µÃÀû¿¨-2003,2002
        VSB_SOUEAST_DELIKA_2              = 8,    // ¶«ÄÏ-µÃÀû¿¨-2005
        VSB_SOUEAST_DELIKA_3              = 9,    // ¶«ÄÏ-µÃÀû¿¨-2008
        VSB_SOUEAST_DELIKA_4              = 10,    // ¶«ÄÏ-µÃÀû¿¨-2009
        VSB_SOUEAST_LINGSHUAI_1           = 11,    // ¶«ÄÏ-ÁâË§-2005,2004GLXi
        VSB_SOUEAST_FULIKA_1              = 12,    // ¶«ÄÏ-¸»Àû¿¨-2005
        VSB_SOUEAST_FULIKA_2              = 13    // ¶«ÄÏ-¸»Àû¿¨-2007
}VSB_SOUEAST_CLASS;


//ÖÐÐËÆû³µ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_ZTE_CLASS
{
    VSB_ZTE_OTHER                     = 0,        // ÆäËû£¨±£Áô£©
        VSB_ZTE_WEIHU_1                   = 1,        // ÖÐÐË-Íþ»¢-2012,2010
        VSB_ZTE_WEIHU_2                   = 2,        // ÖÐÐË-Íþ»¢TUV-2010,2006
        VSB_ZTE_WUXIAN_1                  = 3,        // ÖÐÐË-ÎÞÏÞ-2008
        VSB_ZTE_WUXIAN_2                  = 4         // ÖÐÐË-ÎÞÏÞ-2012,2011,2010,2009
}VSB_ZTE_CLASS;


//ÖÐ»ªÆû³µ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_ZHONGHUA_CLASS
{
    VSB_ZHONGHUA_OTHER                = 0,    // ÆäËû£¨±£Áô£©
        VSB_ZHONGHUA_H230_1               = 1,   // ÖÐ»ª-H230-2012
        VSB_ZHONGHUA_H320_1               = 2,   // ÖÐ»ª-H320-2012
        VSB_ZHONGHUA_H330_1               = 3,   // ÖÐ»ª-H330-2013
        VSB_ZHONGHUA_H530_1               = 4,   // ÖÐ»ª-H530-2012,2011
        VSB_ZHONGHUA_V5_1                 = 5,   // ÖÐ»ª-V5-2012,2011
        VSB_ZHONGHUA_ZUNCHI_1             = 6,   // ÖÐ»ª-×ð³Û-2004
        VSB_ZHONGHUA_ZUNCHI_2             = 7,   // ÖÐ»ª-×ð³Û-2005,2003
        VSB_ZHONGHUA_KUBAO_1              = 8,   // ÖÐ»ª-¿á±¦-2007
        VSB_ZHONGHUA_JUNJIE_1             = 9,   // ÖÐ»ª-¿¥½Ý-2010,2009,2008,2007,2006
        VSB_ZHONGHUA_JUNJIE_2             = 10,   // ÖÐ»ª-¿¥½Ý-2012,2011
        VSB_ZHONGHUA_JUNJIECROSS_1        = 11,   // ÖÐ»ª-¿¥½Ýcross-2010,2009
        VSB_ZHONGHUA_JUNJIEFRV_1          = 12,   // ÖÐ»ª-¿¥½ÝFRV-2009,2008
        VSB_ZHONGHUA_JUNJIEFRV_2          = 13,   // ÖÐ»ª-¿¥½ÝFRV-2010
        VSB_ZHONGHUA_JUNJIEFSV_1          = 14,   // ÖÐ»ª-¿¥½ÝFSV-2009
        VSB_ZHONGHUA_JUNJIEFSV_2          = 15,   // ÖÐ»ª-¿¥½ÝFSV-2010
        VSB_ZHONGHUA_JUNJIEFSV_3          = 16   // ÖÐ»ª-¿¥½ÝFSV-2011
}VSB_ZHONGHUA_CLASS;


//ÖÐ¹úÖØÆû×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_CNHTC_CLASS
{
    VSB_CNHTC_OTHER                   = 0,    // ÆäËû£¨±£Áô£©
        VSB_CNHTC_HOKA_2                  = 1,      // ÖÐ¹úÖØÆû-HOKA-Ç£Òý³µ,×ÔÐ¶³µ
        VSB_CNHTC_HOWO_1                  = 2,      // ÖÐ¹úÖØÆû-HOWO-A7
        VSB_CNHTC_HOWO_2                  = 3,      // ÖÐ¹úÖØÆû-HOWO-T7H
        VSB_CNHTC_HOWO_3                  = 4,      // ÖÐ¹úÖØÆû-HOWO-Çá¿¨
        VSB_CNHTC_HOWO_4                  = 5,      // ÖÐ¹úÖØÆû-HOWOÖØ¿¨-Ç£Òý³µ
        VSB_CNHTC_HOWO_5                  = 6,      // ÖÐ¹úÖØÆû-HOWOÖØ¿¨-×ÔÐ¶³µA
        VSB_CNHTC_HOWO_6                  = 7,      // ÖÐ¹úÖØÆû-HOWOÖØ¿¨-×ÔÐ¶³µB
        VSB_CNHTC_HOWO_7                  = 8,      // ÖÐ¹úÖØÆû-HOWOÖØ¿¨-ÔØ»õ³µA
        VSB_CNHTC_HOWO_8                  = 9,      // ÖÐ¹úÖØÆû-HOWOÖØ¿¨-ÔØ»õ³µC
        VSB_CNHTC_SITAIERWANG_1           = 10,      // ÖÐ¹úÖØÆû-Ë¹Ì«¶ûÍõ-Ç£Òý³µA,ÔØ»õ³µ,½Á°è³µ
        VSB_CNHTC_HAOHAN_1                = 11,      // ÖÐ¹úÖØÆû-ºÀå«-A¿î
        VSB_CNHTC_HAOYUN_1                = 12,      // ÖÐ¹úÖØÆû-ºÀÔË-Ç£Òý³µB,ÔØ»õ³µ,×ÔÐ¶³µ
        VSB_CNHTC_JINWANGZI_1             = 13,      // ÖÐ¹úÖØÆû-½ðÍõ×ÓÖØ¿¨-Ç£Òý³µB
        VSB_CNHTC_HOKA_1                  = 14      // ÖÐ¹úÖØÆû-HOKA-H7
}VSB_CNHTC_CLASS;

//ÖÐÍ¨×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_ZHONGTONG_CLASS
{
    VSB_ZHONGTONG_OTHER               = 0,  // ÆäËû£¨±£Áô£©
        VSB_ZHONGTONG_KAICHI_1            = 1,  // ÖÐÍ¨¿Í³µ-¿­³ÛA-A¿î
        VSB_ZHONGTONG_LINGYU_1            = 2,  // ÖÐÍ¨¿Í³µ-ÁìÓù-A¿î
        VSB_ZHONGTONG_LINGXIU_1           = 3,  // ÖÐÍ¨¿Í³µ-ÁìÐã-A¿î
        VSB_ZHONGTONG_LINGHANG_1          = 4,  // ÖÐÍ¨¿Í³µ-Áìº½-A¿î
        VSB_ZHONGTONG_SHIJI_1             = 5,  // ÖÐÍ¨¿Í³µ-ÊÀ¼Í-A¿î
        VSB_ZHONGTONG_KAIXUAN_1           = 6,  // ÖÐÍ¨¿Í³µ-¿­Ðý-A¿î
        VSB_ZHONGTONG_LINGYUN_1           = 7,  // ÖÐÍ¨¿Í³µ-ÁìÔÏA-A¿î
        VSB_ZHONGTONG_YANGGUANG_1         = 8  // ÖÐÍ¨¿Í³µ-Ñô¹â-A¿î
}VSB_ZHONGTONG_CLASS;


//¾ÅÁú×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_JIULONG_CLASS
{
    VSB_JIULONG_OTHER                 = 0,    // ÆäËû£¨±£Áô£©
        VSB_JIULONG_JIULONGA5_1           = 1,    // ¾ÅÁú-¾ÅÁúA5-2011
}VSB_JIULONG_CLASS;

//ÖÚÌ©×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_ZOTYE_CLASS
{
    VSB_ZOTYE_OTHER                  = 0,       // ÆäËû£¨±£Áô£©
        VSB_ZOTYE_2008_2                  = 1,      // ÖÚÌ©-2008-2011,2010,2008
        VSB_ZOTYE_5008_1                  = 2,      // ÖÚÌ©-5008-2013,2011,2010,2008
        VSB_ZOTYE_Z300_1                  = 3,      // ÖÚÌ©-Z300-2013,2012
        VSB_ZOTYE_2008_1                  = 4      // ÖÚÌ©-2008-2007
}VSB_ZOTYE_CLASS;

//ÒÀÎ¬¿Â×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_NAVECO_CLASS
{
    VSB_NAVECO_OTHER                  = 0,       // ÆäËû£¨±£Áô£©
        VSB_NAVECO_Daily_1                = 1,     // ÒÀÎ¬¿Â-Daily-2006,2004,2003
        VSB_NAVECO_Power_1                = 2,     // ÒÀÎ¬¿Â-Power-Daily
        VSB_NAVECO_Turbo_1                = 3,     // ÒÀÎ¬¿Â-Turbo-Daily-2014,2012,2011
        VSB_NAVECO_Venice_1               = 4,     // ÒÀÎ¬¿Â-Venice-2011,2008
        VSB_NAVECO_BAODI_1                = 5,     // ÒÀÎ¬¿Â-±¦µÏ-2012,2009
        VSB_NAVECO_DEYIHUOCHE_1           = 6,     // ÒÀÎ¬¿Â-µÃÒâ»õ³µ-2011
        VSB_NAVECO_DULING_1               = 7     // ÒÀÎ¬¿Â-¶¼Áé-2010,2009,2007
}VSB_NAVECO_CLASS;

//±£Ê±½Ý×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_PORSCHE_CLASS
{
    VSB_PORSCHE_OTHER                 = 0,    // ÆäËû£¨±£Áô£©
        VBR_PORSCHE_PANAMERA_1            = 1,    // ±£Ê±½Ý-panamera-2013,2012,2010
        VBR_PORSCHE_CAYENNE_1             = 2,    // ±£Ê±½Ý-¿¨ÑçCayenne-2014,2013,2011,2010
}VSB_PORSCHE_CLASS;


//¿ËÀ³Ë¹ÀÕ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_CHRYSLER_CLASS
{
    VSB_CHRYSLER_OTHER                = 0,    // ÆäËû£¨±£Áô£©
        VSB_CHRYSLER_300C_1               = 1,   // ¿ËÀ³Ë¹ÀÕ-300C-2007,2006,2004
        VSB_CHRYSLER_PTMANBUZHE_1         = 2,   // ¿ËÀ³Ë¹ÀÕ-PTÂþ²½Õß-2007
}VSB_CHRYSLER_CLASS;

//¿­µÏÀ­¿Ë×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_CADILLAC_CLASS
{
    VSB_CADILLAC_OTHER                = 0,    // ÆäËû£¨±£Áô£©
        VSB_CADILLAC_ATS_1                = 1,   // ¿­µÏÀ­¿Ë-ATS-2014
        VSB_CADILLAC_CTS_1                = 2,   // ¿­µÏÀ­¿Ë-CTS-2012
        VSB_CADILLAC_CTS_3                = 3,   // ¿­µÏÀ­¿Ë-CTS-2012¾«Ó¢ÔË¶¯ÐÍ,2011,2010,2009,2008
        VSB_CADILLAC_SLS_1                = 4,   // ¿­µÏÀ­¿Ë-SLSÈüÍþ-2007,2006
        VSB_CADILLAC_SLS_2                = 5,   // ¿­µÏÀ­¿Ë-SLSÈüÍþ-2012,2011,2010
        VSB_CADILLAC_SRX_1                = 6,   // ¿­µÏÀ­¿Ë-SRX-2012,2011,2010,2009
        VSB_CADILLAC_CTS_2                = 7,   // ¿­µÏÀ­¿Ë-CTS-2012,2009CTS
        VSB_CADILLAC_KAILEIDE_1           = 8   // ¿­µÏÀ­¿Ë-¿­À×µÂ-2011,2010,2008,2007,2006
}VSB_CADILLAC_CLASS;


//¿­ÂíKAMA×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_KAMA_CLASS
{
    VSB_KAMA_OTHER                    = 0,       // ÆäËû£¨±£Áô£©
        VSB_KAMA_QINGKA_2                 = 1,       // ¿­ÂíKAMA-¿­Âí-Çá¿¨D
        VSB_KAMA_FULAIKA_1                = 2,       // ¿­ÂíKAMA-¸£À´¿¨-Çá¿¨A
        VSB_KAMA_JINYUNKA_1               = 3,       // ¿­ÂíKAMA-½ðÔË¿¨-Çá¿¨
        VSB_KAMA_JUNWEIKA_1               = 4,       // ¿­ÂíKAMA-¿¥Íþ¿¨³µ-2014,2011
        VSB_KAMA_QINGKA_1                 = 5       // ¿­ÂíKAMA-¿­Âí-Çá¿¨C
}VSB_KAMA_CLASS;

//Á¦·«×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_LIFAN_CLASS
{
    VSB_LIFAN_OTHER                   = 0,      // ÆäËû£¨±£Áô£©
        VSB_LIFAN_320_1                   = 1,      // Á¦·«-320-2012,2011,2009
        VSB_LIFAN_520_1                   = 2,      // Á¦·«-520-2007,2006
        VSB_LIFAN_520_2                   = 3,      // Á¦·«-520-2013,2011,2010,2008
        VSB_LIFAN_620_1                   = 4,      // Á¦·«-620-2012,2010,2009,2008
        VSB_LIFAN_X60_1                   = 5,      // Á¦·«-X60-2013,2012,2011
        VSB_LIFAN_FENGSHUN_1              = 6      // Á¦·«-·áË³-2011
}VSB_LIFAN_CLASS;


//±±¾©×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_BEIJING_CLASS
{
    VSB_BEIJING_OTHER                 = 0,      // ÆäËû£¨±£Áô£©
        VSB_BEIJING_E_1                   = 1,    // ±±¾©Æû³µ-EÏµÁÐÁ½Ïá-2014,2013,2012
}VSB_BEIJING_CLASS;

//±±±¼ÖØÆû×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_BEIBEN_CLASS
{
    VSB_BEIBEN_OTHER                  = 0,      // ÆäËû£¨±£Áô£©
        VSB_BEIBEN_NG80_1                 = 1,     // ±±±¼ÖØÆû-NG80-ÖØ¿¨A
        VSB_BEIBEN_NG80_2                 = 2,     // ±±±¼ÖØÆû-NG80-ÖØ¿¨B
        VSB_BEIBEN_NG80_3                 = 3,     // ±±±¼ÖØÆû-NG80-ÖØ¿¨C
        VSB_BEIBEN_V3_1                   = 4,     // ±±±¼ÖØÆû-±±±¼V3-V3H1
        VSB_BEIBEN_V3_2                   = 5     // ±±±¼ÖØÆû-±±±¼V3-ÖØ¿¨A
}VSB_BEIBEN_CLASS;

//±±·½¿Í³µ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_BEIFANG_CLASS
{
    VSB_BEIFANG_OTHER                 = 0,      // ÆäËû£¨±£Áô£©
        VSB_BEIFANG_A_1                   = 1       // ±±·½¿Í³µ-¿Í³µ³µÐÍ1-A¿î
}VSB_BEIFANG_CLASS;


//±±ÆûÖÆÔì×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_BAW_CLASS
{
    VSB_BAW_OTHER                     = 0,        // ÆäËû£¨±£Áô£©
        VSB_BAW_YUSHENG007_1              = 1,        // ±±ÆûÖÆÔì-ÓòÊ¤007-2013,2011
        VSB_BAW_QILING_1                  = 2,        // ±±ÆûÖÆÔì-ÆìÁå-A¿î
        VSB_BAW_LUBA_1                    = 3,        // ±±ÆûÖÆÔì-Â½°Ô-2004
        VSB_BAW_QISHI_1                   = 4         // ±±ÆûÖÆÔì-ÆïÊ¿-2009,2007
}VSB_BAW_CLASS;

//±±ÆûÍþÍú×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_BQWEIWANG_CLASS
{
    VSB_BQWEIWANG_OTHER               = 0,  // ÆäËû£¨±£Áô£©
        VSB_BQWEIWANG_205_1               = 1,  // ±±ÆûÍþÍú-205-2013
        VSB_BQWEIWANG_306_1               = 2   // ±±ÆûÍþÍú-306-2014,2013,2011
}VSB_BQWEIWANG_CLASS;


//»ªÆÕ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SMA_CLASS
{
    VSB_SMA_OTHER                     = 0,        // ÆäËû£¨±£Áô£©
        VSB_SMA_HAIYU_1                   = 1,        // »ªÆÕ-º£Óò-2007,2005,2004
        VSB_SMA_HAIYU_2                   = 2,        // »ªÆÕ-º£Óò-2007º£ÓòMB
        VSB_SMA_HAISHANG_1                = 3,        // »ªÆÕ-º£ÉÐ-2008,2005
        VSB_SMA_HAIJING_1                 = 5,        // »ªÆÕ-º£¾°-2010,2009
        VSB_SMA_HAIXUN_1                  = 4,        // »ªÆÕ-º£Ñ¸-2005,2004ì­·ç
        VSB_SMA_HAIXUN_2                  = 6,        // »ªÆÕ-º£Ñ¸-2007,2006
}VSB_SMA_CLASS;

//»ªÁâÐÇÂí×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_XINGMA_CLASS
{
    VSB_XINGMA_OTHER                  = 0,        // ÆäËû£¨±£Áô£©
        VSB_XINGMA_XINGKAIMA_1            = 1         // »ªÁâÐÇÂí-ÐÇ¿­Âí-Ç£Òý³µÐÍ1,ÔØ»õ³µÐÍ1
}VSB_XINGMA_CLASS;

//Ë«»·×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SHUANGHUAN_CLASS
{
    VSB_SHUANGHUAN_OTHER              = 0,        // ÆäËû£¨±£Áô£©
        VSB_SHUANGHUAN_SCEO_1             = 1,        // Ë«»·-SCEO-2011,2009,2006,2005
}VSB_SHUANGHUAN_CLASS;

//¼ªÆÕ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_JEEP_CLASS
{
    VSB_JEEP_OTHER                    = 0,       // ÆäËû£¨±£Áô£©
        VSB_JEEP_DAQIENUOJI_1             = 1,       // ¼ªÆÕ-´óÇÐÅµ»ù(½ø¿Ú)-2014,2013,2012,2011
        VSB_JEEP_DAQIENUOJI_2             = 2,       // ¼ªÆÕ-´óÇÐÅµ»ù(½ø¿Ú)-2014ÊæÏíµ¼º½°æ
        VSB_JEEP_ZHINANZHE_1              = 3,       // ¼ªÆÕ-Ö¸ÄÏÕß-2010,2007
        VSB_JEEP_ZHINANZHE_2              = 4,       // ¼ªÆÕ-Ö¸ÄÏÕß-2014,2013,2012,2011
        VSB_JEEP_MUMAREN_1                = 5,       // ¼ªÆÕ-ÄÁÂíÈË-2012Ê¹ÃüÕÙ»½ÏÞÁ¿°æ,2011
        VSB_JEEP_MUMAREN_2                = 6,       // ¼ªÆÕ-ÄÁÂíÈË-2014,2013,2012,2011,2010,2009,2008
        VSB_JEEP_ZIYOUKE                  = 7,       // ¼ªÆÕ-×ÔÓÉ¿Í-2014,2013,2012,2011
}VSB_JEEP_CLASS;

//Æô³½×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_VENUCIA_CLASS
{
    VSB_VENUCIA_OTHER                 = 0,       // ÆäËû£¨±£Áô£©
        VSB_VENUCIA_D50_1                 = 1        // Æô³½-D50-2014,2013,2012
}VSB_VENUCIA_CLASS;

//¹þ·É×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_HAFEI_CLASS
{
    VSB_HAFEI_OTHER                   = 0,      // ÆäËû£¨±£Áô£©
        VSB_HAFEI_XINMINYI_1              = 1,      // ¹þ·É-ÐÂÃñÒâ»õ³µ-2010
        VSB_HAFEI_XINMINYI_2              = 2,      // ¹þ·É-ÐÂÃñÒâÃæ°ü³µ-2012
        VSB_HAFEI_MINYI_1                 = 3,      // ¹þ·É-ÃñÒâ»õ³µ-2006
        VSB_HAFEI_MINYI_2                 = 4,      // ¹þ·É-ÃñÒâÃæ°ü³µ-2008
        VSB_HAFEI_SAIBAO_1                = 5,      // ¹þ·É-Èü±ª¢ó-2012
        VSB_HAFEI_SAIMA_1                 = 6,      // ¹þ·É-ÈüÂí-2002
        VSB_HAFEI_SAIMA_2                 = 7,      // ¹þ·É-ÈüÂí-2004,2003
        VSB_HAFEI_SAIMA_3                 = 8,      // ¹þ·É-ÈüÂí-2009
        VSB_HAFEI_LUBAO_1                 = 9,      // ¹þ·É-Â·±¦-2004
        VSB_HAFEI_LUBAO_2                 = 10,      // ¹þ·É-Â·±¦-2008,2007
        VSB_HAFEI_LUBAO_3                 = 11,      // ¹þ·É-Â·±¦-2012
        VSB_HAFEI_LUZUNXIAOBAWANG_1       = 12,      // ¹þ·É-Â·×ðÐ¡°ÔÍõ-2011,2010
        VSB_HAFEI_RUIYI_1                 = 13,      // ¹þ·É-ÈñÒâ-2009
        VSB_HAFEI_JUNYI_1                 = 14       // ¹þ·É-¿¥Òâ-2012,2010
}VSB_HAFEI_CLASS;

//ÌÆ¿¥Å·Áå×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_TKING_CLASS
{
    VSB_TKING_OTHER                   = 0,      // ÆäËû£¨±£Áô£©
        VSB_TKING_OUGUAN_1                = 1,      // ÌÆ¿¥Å·Áå-Å·¹Ú-2011
        VSB_TKING_OUGUAN_2                = 2,      // ÌÆ¿¥Å·Áå-Å·¹Ú-Çá¿¨B
        VSB_TKING_OUTENG_1                = 3,      // ÌÆ¿¥Å·Áå-Å·ÌÚ-Çá¿¨A
        VSB_TKING_FUXING_1                = 4,      // ÌÆ¿¥Å·Áå-¸£ÐÇ-2006
        VSB_TKING_QINGKAWANG_1            = 5,      // ÌÆ¿¥Å·Áå-Çá¿¨Íõ-Çá¿¨
        VSB_TKING_AFANDA_1                = 6,      // ÌÆ¿¥Å·Áå-°¢·²´ï-ÖÐÖØ¿¨
        VSB_TKING_JUNQI_1                 = 7       // ÌÆ¿¥Å·Áå-¿¥÷è-ÖÐÖØ¿¨A
}VSB_TKING_CLASS;

//´óÓî×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_DAEWOO_CLASS
{
    VSB_DAEWOO_OTHER                  = 0,    // ÆäËû£¨±£Áô£©
        VBR_DAEWOO_6960H3_1               = 1     // ´óÓî-6960H3-A¿î
}VSB_DAEWOO_CLASS;

//´óÔËÆû³µ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_DAYUN_CLASS
{
    VSB_DAYUN_OTHER                   = 0,     // ÆäËû£¨±£Áô£©
        VBR_DAYUN_ZHONGKA_1               = 1      // ´óÔËÆû³µ-ÖØ¿¨-A¿î
}VSB_DAYUN_CLASS;

//±¼ÌÚ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_BESTURN_CLASS
{
    VSB_BESTURN_OTHER                 = 0,   // ÆäËû£¨±£Áô£©
        VSB_BESTURN_B70_1                 = 1,    // ±¼ÌÚ-B70-2009,2007,2006
        VSB_BESTURN_B70_2                 = 2,    // ±¼ÌÚ-B70-2011
        VSB_BESTURN_B70_3                 = 3,    // ±¼ÌÚ-B70-2011¾«Ó¢ÐÍ,2010
        VSB_BESTURN_B70_4                 = 4,    // ±¼ÌÚ-B70-2012
        VSB_BESTURN_B90_1                 = 5,    // ±¼ÌÚ-B90-2012
        VSB_BESTURN_AOXING_1              = 6       // Ò»Æû-°ÂÐÇ-2004
}VSB_BESTURN_CLASS;

//Íþ÷ë×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_WEILIN_CLASS
{
    VSB_WEILIN_OTHER                 = 0,      // ÆäËû£¨±£Áô£©
        VSB_WEILIN_H3_1                   = 1,     // Íþ÷ë-H3-2011
        VSB_WEILIN_V5_1                   = 2,     // Íþ÷ë-V5-2012,2009
        VSB_WEILIN_X5_1                   = 3      // Íþ÷ë-X5-2012,2011,2010
}VSB_WEILIN_CLASS;

//ÓîÍ¨×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_YUTONG_CLASS
{
    VSB_YUTONG_OTHER                  = 0,     // ÆäËû£¨±£Áô£©
        VSB_YUTONG_8XI_1                  = 1,     // ÓîÍ¨-8Ïµ-2012,2005
        VSB_YUTONG_KECHE_1                = 2,     // ÓîÍ¨-¿Í³µ³µÐÍ10-2013,2010
        VSB_YUTONG_KECHE_3                = 3,     // ÓîÍ¨-¿Í³µ³µÐÍ2-A¿î
        VSB_YUTONG_KECHE_4                = 4,     // ÓîÍ¨-¿Í³µ³µÐÍ8-2004
        VSB_YUTONG_KECHE_5                = 5,     // ÓîÍ¨-¿Í³µ³µÐÍ9-2014
        VSB_YUTONG_KECHE_2                = 6      // ÓîÍ¨-¿Í³µ³µÐÍ12-A¿î
}VSB_YUTONG_CLASS;

//°²¿­×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_ANKAI_CLASS
{
    VSB_ANKAI_OTHER                   = 0,      // ÆäËû£¨±£Áô£©
        VSB_ANKAI_KECHE_1                 = 1,      // °²¿­-¿Í³µ³µÐÍ1-A¿î
        VSB_ANKAI_KECHE_2                 = 2       // °²¿­-¿Í³µ³µÐÍ3-A¿î
}VSB_ANKAI_CLASS;

//±¦¿¥×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_BAOJUN_CLASS
{
    VSB_BAOJUN_OTHER            = 0,   // ÆäËû£¨±£Áô£©
        VSB_BAOJUN_630_1                  = 1      // ±¦¿¥-±¦¿¥630-2014,2013,2012,2011
}VSB_BAOJUN_CLASS;

//±öÀû×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_BINLI_CLASS
{
    VSB_BINLI_OTHER                   = 0,     // ÆäËû£¨±£Áô£©
        VSB_BINLI_OULU_1                  = 1      // ±öÀû-Å·Â½-2009,2008
}VSB_BINLI_CLASS;

//¹ãÆû´«ì÷×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_TRUMPCHE_CLASS
{
    VSB_TRUMPCHE_OTHER                = 0,   // ÆäËû£¨±£Áô£©
        VSB_TRUMPCHE_GA5_1                = 1,   // ¹ãÆû´«ì÷-GA5-2012,2011
        VSB_TRUMPCHE_GA5_2                = 3,   // ¹ãÆû´«ì÷-GA5-2013,2012×Ô¶¯¾«Ó¢°æ
        VSB_TRUMPCHE_GS5_1                = 2    // ¹ãÆû´«ì÷-GS5-2014,2013,2012
}VSB_TRUMPCHE_CLASS;

//¹ãÆû¼ª°Â ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_GONOW_CLASS
{
    VSB_GONOW_OTHER                   = 0,   // ÆäËû£¨±£Áô£©
        VSB_GONOW_G3_1                    = 1,      // ¹ãÆû¼ª°Â-G3-2011
        VSB_GONOW_G5_1                    = 2,      // ¹ãÆû¼ª°Â-G5-2012,2011
        VSB_GONOW_SHUAIJIAN_1             = 4,      // ¹ãÆû¼ª°Â-Ë§½¢-2012,2009
        VSB_GONOW_XINGWANGM1_1            = 3,      // ¹ãÆû¼ª°Â-ÐÇÍúM1-2012
        VSB_GONOW_CAIYUN500_1             = 5      // ¹ãÆû¼ª°Â-²ÆÔË500-2010
}VSB_GONOW_CLASS;

//ÇìÁå×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_ISUZU_CLASS
{
    VSB_ISUZU_OTHER                   = 0,   // ÆäËû£¨±£Áô£©
        VSB_ISUZU_ZHONGXINGSHANGYONG_1    = 1,      // ÇìÁå-ÖÐÐÍÉÌÓÃ³µ-2011
        VSB_ISUZU_WUSHILINGPIKA_1         = 2,      // ÇìÁå-ÎåÊ®ÁåÆ¤¿¨-2009
        VSB_ISUZU_WUSHILINGPIKA_2         = 3,      // ÇìÁå-ÎåÊ®ÁåÆ¤¿¨-2014,2009
        VSB_ISUZU_JINGJIZHE_1             = 4      // ÇìÁå-¾º¼¼Õß-2004,2002
}VSB_ISUZU_CLASS;


//¿ªÈð×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_KARRY_CLASS
{
    VSB_KARRY_OTHER                   = 0,   // ÆäËû£¨±£Áô£©
        VSB_KARRY_YOU_2                   = 1,      // ¿ªÈð-ÓÅÓÅ-2013,2012
        VSB_KARRY_YOUJIN_1                = 2,      // ¿ªÈð-ÓÅ¾¢-2012,2011»ù±¾ÐÍ,2010
        VSB_KARRY_YOUSHENG_1              = 3,      // ¿ªÈð-ÓÅÊ¤-2010
        VSB_KARRY_YOUSHENG_2              = 4,      // ¿ªÈð-ÓÅÊ¤-2012,2011
        VSB_KARRY_YOUYA                   = 5,      // ¿ªÈð-ÓÅÑÅ-2012,2011,2007
        VSB_KARRY_YOU_1                   = 6      // ¿ªÈð-ÓÅÓÅ-2011,2010,2009
}VSB_KARRY_CLASS;

//½Ý±ª×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_GAGUAR_CLASS
{
    VSB_GAGUAR_OTHER                  = 0,   // ÆäËû£¨±£Áô£©
        VSB_GAGUAR_XF_1                   = 1,     // ½Ý±ª-XF-2014,2013
        VSB_GAGUAR_XJ_1                   = 2     // ½Ý±ª-XJ-2014,2013,2012,2011,2010
}VSB_GAGUAR_CLASS;

//Ë¹°ÍÂ³×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SUBARU_CLASS
{
    VSB_SUBARU_OTHER                  = 0,   // ÆäËû£¨±£Áô£©
        VSB_SUBARU_AOHU_1                 = 1,     // Ë¹°ÍÂ³-°Á»¢-2012,2011,2010
        VSB_SUBARU_LISHI_1                = 2,     // Ë¹°ÍÂ³-Á¦Ê¨½Î³µ-2008,2006
        VSB_SUBARU_LISHI_2                = 3,     // Ë¹°ÍÂ³-Á¦Ê¨½Î³µ-2011,2010
        VSB_SUBARU_XV_1                   = 4,     // Ë¹°ÍÂ³-Ë¹°ÍÂ³XV-2014,2012
        VSB_SUBARU_SENLINREN_1            = 5,     // Ë¹°ÍÂ³-É­ÁÖÈË-2007,2006
        VSB_SUBARU_SENLINREN_2            = 6     // Ë¹°ÍÂ³-É­ÁÖÈË-2012,2011,2010,2009,2008
}VSB_SUBARU_CLASS;

//Ê±´úÆû³µ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_ERA_CLASS
{
    VSB_ERA_OTHER                     = 0,   // ÆäËû£¨±£Áô£©
        VSB_ERA_XIAOKA_1                  = 1,        // Ê±´úÆû³µ-Ð¡¿¨Ö®ÐÇ-Ð¡¿¨Ö®ÐÇ1,2,Q2
        VSB_ERA_XIAOKA_3                  = 2,        // Ê±´úÆû³µ-Ð¡¿¨Ö®ÐÇ-Ð¡¿¨Ö®ÐÇ5
        VSB_ERA_XIAOKA_4                  = 3,        // Ê±´úÆû³µ-Ð¡¿¨Ö®ÐÇ-¸£Èñ
        VSB_ERA_KANGRUI_1                 = 4,        // Ê±´úÆû³µ-¿µÈð-¿µÈðH1
        VSB_ERA_KANGRUI_2                 = 5,        // Ê±´úÆû³µ-¿µÈð-¿µÈðH3
        VSB_ERA_KANGRUI_3                 = 6,        // Ê±´úÆû³µ-¿µÈð-¿µÈðK1,KQ1
        VSB_ERA_RUIWO_1                   = 7,        // Ê±´úÆû³µ-ÈðÎÖ-RC1
        VSB_ERA_RUIWO_2                   = 8,        // Ê±´úÆû³µ-ÈðÎÖ-RC2
        VSB_ERA_RUIWO_3                   = 9,        // Ê±´úÆû³µ-ÈðÎÖ-ÈðÎÖIIÇá¿¨A
        VSB_ERA_JINGANG                   = 10,        // Ê±´úÆû³µ-½ð¸Õ-½ð¸Õ568
        VSB_ERA_LINGHANG_1                = 11,        // Ê±´úÆû³µ-Áìº½-Áìº½2
        VSB_ERA_LINGHANG_2                = 12,        // Ê±´úÆû³µ-Áìº½-Áìº½3
        VSB_ERA_YULING_1                  = 13,        // Ê±´úÆû³µ-Ô¦Áâ-Ô¦ÁâV1
        VSB_ERA_YULING_2                  = 14,        // Ê±´úÆû³µ-Ô¦Áâ-Ô¦ÁâV5,VQ5
        VSB_ERA_YULING_3                  = 15,        // Ê±´úÆû³µ-Ô¦Áâ-Ô¦ÁâVQ1,VQ2
        VSB_ERA_YULING_4                  = 17,        // Ê±´úÆû³µ-Ô¦Áâ-ºèÔË
        VSB_ERA_XIAOKA_2                  = 17,        // Ê±´úÆû³µ-Ð¡¿¨Ö®ÐÇ-Ð¡¿¨Ö®ÐÇ3
}VSB_ERA_CLASS;

//²ýºÓ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_CHANGHE_CLASS
{
    VSB_CHANGHE_OTHER           = 0,  // ÆäËû£¨±£Áô£©
        VSB_CHANGHE_CH6321_1        = 1,  // ²ýºÓ-CH6321-2000
        VSB_CHANGHE_DANSHUANGPAI_1  = 2,  // ²ýºÓ-²ýºÓÐÂµ¥Ë«ÅÅ-1999
        VSB_CHANGHE_AIDIER_1        = 3,  // ²ýºÓ-°®µÏ¶û-2004
        VSB_CHANGHE_AIDIER_2        = 4,  // ²ýºÓ-°®µÏ¶û¢ò-2007,2006
        VSB_CHANGHE_FURUIDA_1       = 5   // ²ýºÓ-¸£Èð´ïÃæ°ü³µ-2014,2013,2011,2009
}VSB_CHANGHE_CLASS;

//Å·±¦×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_OPEL_CLASS
{
    VSB_OPEL_OTHER              = 0,    // ÆäËû£¨±£Áô£©
        VSB_OPEL_YATE_1             = 1     // Å·±¦-ÑÅÌØ-2010GTCÈ«¾°·çµ²°æ,2007,2006
}VSB_OPEL_CLASS;

//ÓÀÔ´×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_JONWAY_CLASS
{
    VSB_JONWAY_OTHER            = 0,   // ÆäËû£¨±£Áô£©
        VSB_JONWAY_A380_1           = 1    // ÓÀÔ´-A380-2010,2009,2008
}VSB_JONWAY_CLASS;

//½­ÄÏ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_JIANGNAN_CLASS
{
    VSB_JIANGNAN_OTHER          = 0,   // ÆäËû£¨±£Áô£©
        VSB_JIANGNAN_TT_1           = 1    // ½­ÄÏ-½­ÄÏTT-2011,2010,2004
}VSB_JIANGNAN_CLASS;

//¼ªÀûÈ«ÇòÓ¥×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_GLEAGLE_CLASS
{
    VSB_GLEAGLE_OTHER                      = 0,   // ÆäËû£¨±£Áô£©
        VSB_GLEAGLE_EAGLE_GC7_1                = 1,   // ¼ªÀûÈ«ÇòÓ¥-GC7-2013,2012
        VSB_GLEAGLE_EAGLE_GX2_1                = 2,   // ¼ªÀûÈ«ÇòÓ¥-GX2-2012,2011
        VSB_GLEAGLE_EAGLE_GX7_1                = 3,   // ¼ªÀûÈ«ÇòÓ¥-GX7-2013,2012
        VSB_GLEAGLE_EAGLE_PANDA_1              = 4,   // ¼ªÀûÈ«ÇòÓ¥-ÐÜÃ¨-2013,2011,2010,2009
        VSB_GLEAGLE_EAGLE_ZIYOUJIAN_1          = 5,   // ¼ªÀûÈ«ÇòÓ¥-×ÔÓÉ½¢-2009¾«ÖÂ±ê×¼ÐÍ,2007
        VSB_GLEAGLE_EAGLE_ZIYOUJIAN_2          = 6,   // ¼ªÀûÈ«ÇòÓ¥-×ÔÓÉ½¢-2010,2009,2008,2006,2005
        VSB_GLEAGLE_EAGLE_ZIYOUJIAN_3          = 7,   // ¼ªÀûÈ«ÇòÓ¥-×ÔÓÉ½¢-2012,2011
        VSB_GLEAGLE_EAGLE_YUANJING_1           = 8,   // ¼ªÀûÈ«ÇòÓ¥-Ô¶¾°-2011,2010,2009,2008,2006
        VSB_GLEAGLE_EAGLE_YUANJING_2           = 9,   // ¼ªÀûÈ«ÇòÓ¥-Ô¶¾°-2013,2012
}VSB_GLEAGLE_CLASS;

//¼ªÀûµÛºÀ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_EMGRAND_CLASS
{
    VSB_EMGRAND_OTHER                      = 0,   // ÆäËû£¨±£Áô£©
        VSB_EMGRAND_EC7_2                      = 1,   // ¼ªÀûµÛºÀ-EC7-2013
        VSB_EMGRAND_EC7_3                      = 2,   // ¼ªÀûµÛºÀ-EC7-RV
        VSB_EMGRAND_EC8_1                      = 3,   // ¼ªÀûµÛºÀ-EC8-2013,2011,2010
        VSB_EMGRAND_EC7_1                      = 4    // ¼ªÀûµÛºÀ-EC7-2012,2010,2009
}VSB_EMGRAND_CLASS;


//¼ªÀûÓ¢Â××ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_ENGLON_CLASS
{
    VSB_ENGLON_OTHER                       = 0,    // ÆäËû£¨±£Áô£©
        VSB_ENGLON_SC3_1                       = 1,    // ¼ªÀûÓ¢Â×-SC3-2012
        VSB_ENGLON_SC5_1                       = 2,    // ¼ªÀûÓ¢Â×-SC5-RV-2012
        VSB_ENGLON_SC6_1                       = 3,    // ¼ªÀûÓ¢Â×-SC6-2012
        VSB_ENGLON_SC7_1                       = 4,    // ¼ªÀûÓ¢Â×-SC7-2013,2012,2011,2010
        VSB_ENGLON_SX7_1                       = 5,    // ¼ªÀûÓ¢Â×-SX7-2014,2013
        VSB_ENGLON_JINGANG_1                   = 6,    // ¼ªÀûÓ¢Â×-½ð¸Õ-2010,2007,2006
        VSB_ENGLON_JINYING_1                   = 7     // ¼ªÀûÓ¢Â×-½ðÓ¥-2011,2010,2008
}VSB_ENGLON_CLASS;


//½­»´-×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_JAC_CLASS
{
    VSB_JAC_OTHER               = 0,      // ÆäËû£¨±£Áô£©
        VSB_JAC_TONGYUE_1           = 1,      // ½­»´-Í¬ÔÃ-2012,2010,2008
        VSB_JAC_HEYUE_1             = 2,      // ½­»´-ºÍÔÃ-2012,2011,2010
        VSB_JAC_HEYUEA30_2          = 3,      // ½­»´-ºÍÔÃA30-2013
        VSB_JAC_HEYUERS_3           = 4,      // ½­»´-ºÍÔÃRS-2012,2011
        VSB_JAC_HAOYUN_1            = 5,      // ½­»´-ºÃÔË-Çá¿¨1
        VSB_JAC_WEILING_2           = 6,      // ½­»´-ÍþÁå-ÅÅ°ëÇá¿¨
        VSB_JAC_WEILING_3           = 7,      // ½­»´-ÍþÁå-À¸°åÔØ»õ³µ
        VSB_JAC_WEILING_4           = 8,      // ½­»´-ÍþÁå-Çá¿¨
        VSB_JAC_KECHE_1             = 9,      // ½­»´-¿Í³µ-A¿î
        VSB_JAC_BINYUE_1            = 10,      // ½­»´-±öÔÃ-2010,2008
        VSB_JAC_SHUAILING_2         = 11,      // ½­»´-Ë§Áå-Çá¿¨
        VSB_JAC_KANGLING_1          = 12,      // ½­»´-¿µÁå-Çá¿¨1
        VSB_JAC_KANGLING_2          = 13,      // ½­»´-¿µÁå-Çá¿¨2
        VSB_JAC_YUEYUE_1            = 14,      // ½­»´-ÔÃÔÃ-2013,2012,2011,2010
        VSB_JAC_XINGRUI_1           = 15,      // ½­»´-ÐÇÈñ-2012,2011
        VSB_JAC_GEERFA_H_1          = 16,      // ½­»´-¸ñ¶û·¢H-À¸°åÔØ»õ³µ
        VSB_JAC_GEERFA_K_2          = 17,      // ½­»´-¸ñ¶û·¢K-ÖØ¿¨1
        VSB_JAC_GEERFA_K_3          = 18,      // ½­»´-¸ñ¶û·¢K-ÖØ¿¨2
        VSB_JAC_GEERFA_M_4          = 19,      // ½­»´-¸ñ¶û·¢M-À¸°åÔØ»õ³µ
        VSB_JAC_RUIFENG_1           = 20,      // ½­»´-Èð·ç-2011,2009,2007ÊÖ¶¯
        VSB_JAC_RUIFENG_2           = 21,      // ½­»´-Èð·ç-2013,2012,2011,2010,2007,2005
        VSB_JAC_RUIFENG_3           = 22,      // ½­»´-Èð·çM5-2012,2011
        VSB_JAC_RUIFENG_4           = 23,      // ½­»´-Èð·çS5-2013
        VSB_JAC_RUIYING_1           = 24,      // ½­»´-ÈðÓ¥-2009,2007
        VSB_JAC_RUIYING_2           = 25,      // ½­»´-ÈðÓ¥-2013,2012,2011
        VSB_JAC_JUNLING_2           = 26,      // ½­»´-¿¥Áå-Õ­Ìå°æ,ÖÐÌå°æ
        VSB_JAC_WEILING_1           = 27,      // ½­»´-ÍþÁå-ÏáÊ½Çá¿¨
        VSB_JAC_SHUAILING_1         = 28,      // ½­»´-Ë§Áå-ÎåÊ®Áå
        VSB_JAC_RUILING_1           = 29,      // ½­»´-ÈðÁå-2012
        VSB_JAC_JUNLING_1           = 30      // ½­»´-¿¥Áå-Æì½¢°æ
}VSB_JAC_CLASS;


//½­Áå×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_JMC_CLASS
{
    VSB_JMC_OTHER               = 0,      // ÆäËû£¨±£Áô£©
        VSB_JMC_KAIYUN_1            = 1,      // ½­Áå-¿­ÔË-102,109ÂíÁ¦Çá¿¨
        VSB_JMC_KAIYUN_2            = 2,      // ½­Áå-¿­ÔË-95ÂíÁ¦Çá¿¨
        VSB_JMC_YUHU_1              = 3,      // ½­Áå-Óò»¢-2012
        VSB_JMC_BAODIAN_1           = 4,      // ½­Áå-±¦µä-2007
        VSB_JMC_BAODIAN_2           = 5,      // ½­Áå-±¦µä-2009±ê×¼ÐÍ,2008
        VSB_JMC_BAODIAN_3           = 6,      // ½­Áå-±¦µä-2014,2012,2009ºÀ»ªÐÍ
        VSB_JMC_BAOWEI_1            = 7,      // ½­Áå-±¦Íþ-2005
        VSB_JMC_BAOWEI_2            = 8,      // ½­Áå-±¦Íþ-2009
        VSB_JMC_QUANSHUN_1          = 9,      // ½­Áå-¸£ÌØÐÂÊÀ´úÈ«Ë³-2010,2008
        VSB_JMC_QUANSHUN_2          = 10,      // ½­Áå-¾­µäÈ«Ë³-2006
        VSB_JMC_QUANSHUN_3          = 11,      // ½­Áå-¾­µäÈ«Ë³-2013,2011,2010
        VSB_JMC_SHUNDA_1            = 12,      // ½­Áå-Ë³´ï-2004,2003
        VSB_JMC_SHUNDA_2            = 13,      // ½­Áå-Ë³´ï-2011,2010,2008
        VSB_JMC_YUSHENG_1           = 14,      // ½­Áå-Ô¦Ê¤-2013
        VSB_JMC_YUSHENG_2           = 15       // ½­Áå-Ô¦Ê¤-2013ÊÖ¶¯ÌØ×°°æ,2012,2011
}VSB_JMC_CLASS;

// ÎÖ¶ûÎÖ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_VOLVO_CLASS
{
    VSB_VOLVO_OTHER             = 0,   // ÆäËû£¨±£Áô£©
        VSB_VOLVO_C30_1             = 1,    // ÎÖ¶ûÎÖ-C30-2013,2012,2011,2010
        VSB_VOLVO_S40_1             = 2,    // ÎÖ¶ûÎÖ-S40-2012,2011,2010,2009,2008,2007
        VSB_VOLVO_S60_1             = 3,    // ÎÖ¶ûÎÖ-S60-2003
        VSB_VOLVO_S60_2             = 4,    // ÎÖ¶ûÎÖ-S60-2013,2012,2011
        VSB_VOLVO_S80L_1            = 5,    // ÎÖ¶ûÎÖ-S80L-2012,2011,2010,2009
        VSB_VOLVO_XC60_1            = 6,    // ÎÖ¶ûÎÖ-XC60-2013,2012,2011,2010,2009
        VSB_VOLVO_XC90_1            = 7     // ÎÖ¶ûÎÖ-XC90-2013,2012,2011,2008
}VSB_VOLVO_CLASS;

// º£¸ñ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_HIGER_CLASS
{
    VSB_HIGER_OTHER             = 0,   // ÆäËû£¨±£Áô£©
        VSB_HIGER_H8_1              = 1,    // º£¸ñ-H8-A¿î
        VSB_HIGER_H92_1             = 2,    // º£¸ñ-H92-A¿î
        VSB_HIGER_V7_1              = 3,    // º£¸ñ-V7,V8-2006
        VSB_HIGER_KECHE_1           = 4,    // º£¸ñ-¿Í³µ³µÐÍ5-A¿î
        VSB_HIGER_LONGWEI_1         = 5,    // º£¸ñ-ÁúÍþ-2012,2011
        VSB_HIGER_H7V_1             = 6     // º£¸ñ-º£¸ñH7V-2010
}VSB_HIGER_CLASS;

// Èð÷è×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_RUILIN_CLASS
{
    VSB_RUILIN_OTHER            = 0,   // ÆäËû£¨±£Áô£©
        VSB_RUILIN_G3_1             = 1,   // Èð÷è-G3-2012,2010
        VSB_RUILIN_G5_1             = 2,   // Èð÷è-G5-2012,2011,2010
        VSB_RUILIN_M1_1             = 3,   // Èð÷è-M1-2013,2011,2010,2009
        VSB_RUILIN_X1_1             = 4,   // Èð÷è-X1-2012A,2011,2010
        VSB_RUILIN_X1_2             = 5    // Èð÷è-X1-2012B
}VSB_RUILIN_CLASS;

// ÉêÁú×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SHENLONG_CLASS
{
    VSB_SHENLON_OTHER                  = 0,         // ÆäËû£¨±£Áô£©
        VSB_SHENLONG_KECHE_1               = 1          //ÉêÁú¿Í³µ-¿Í³µ³µÐÍ4-A¿î
}VSB_SHENLONG_CLASS;

// ¸£Ìï×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_FOTON_CLASS
{
    VSB_FOTON_OTHER                    = 0,            // ÆäËû£¨±£Áô£©
        VSB_FOTON_AOLING_1                 = 1,            // ¸£Ìï-°ÂÁå-ÖÐ¿¨
        VSB_FOTON_AOLING_2                 = 2,            // ¸£Ìï-°ÂÁå-ÏáÊ½»õ³µ
        VSB_FOTON_AOLING_3                 = 3,            // ¸£Ìï-°ÂÁå-°ÂÁåTX,CTX
        VSB_FOTON_OUMAN_1                  = 4,            // ¸£Ìï-Å·Âü-GTL6ÏµB
        VSB_FOTON_OUMAN_2                  = 5,            // ¸£Ìï-Å·Âü-TX6Ïµ,9Ïµ
        VSB_FOTON_OUMAN_3                  = 6,            // ¸£Ìï-Å·Âü-Å·ÂüÖØ¿¨1
        VSB_FOTON_OUMAN_4                  = 7,            // ¸£Ìï-Å·Âü-ÐÛÊ¨6Ïµ,9Ïµ
        VSB_FOTON_OUHUI_1                  = 8,            // ¸£Ìï-Å·»Ô¿Í³µ-D¿î
        VSB_FOTON_OUMAKE_1                 = 9,            // ¸£Ìï-Å·Âí¿É-3Ïµ
        VSB_FOTON_OUMAKE_2                 = 10,            // ¸£Ìï-Å·Âí¿É-5Ïµ
        VSB_FOTON_SAPU_1                   = 11,            // ¸£Ìï-ÈøÆÕ-2011
        VSB_FOTON_SAPU_3                   = 12,            // ¸£Ìï-ÈøÆÕ-2011²ñÓÍ¹²¹ì
        VSB_FOTON_MENGPAIKE_1              = 13,            // ¸£Ìï-ÃÉÅÉ¿Ë-2013
        VSB_FOTON_MIDI_1                   = 14,            // ¸£Ìï-ÃÔµÏ-2011,2009
        VSB_FOTON_FENGJING_1               = 15,            // ¸£Ìï-·ç¾°ÏµÁÐ-2012,2011,2009
        VSB_FOTON_SAPU_2                  = 16            // ¸£Ìï-ÈøÆÕ-2011ËÄÇýÕ÷·þÕßZ7
}VSB_FOTON_CLASS;

//¸£µÏ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_FODAY_CLASS
{
    VSB_FODAY_OTHER                    = 0,            // ÆäËû£¨±£Áô£©
        VSB_FODAY_CHAOREN_1                = 1,            // ¸£µÏ-Ð¡³¬ÈËÆ¤¿¨-2009,2006
        VSB_FODAY_CHAOREN_2                = 2,            // ¸£µÏ-Ð¡³¬ÈËÆ¤¿¨-2011
        VSB_FODAY_TANSUOZHE_1              = 3,            // ¸£µÏ-Ì½Ë÷Õß6-2013,2011,2010
        VSB_FODAY_TANSUOZHE_2              = 4,            // ¸£µÏ-Ì½Ë÷Õß¢ò-2011,2010,2009
        VSB_FODAY_TANSUOZHE_3              = 5,            // ¸£µÏ-Ì½Ë÷Õß¢ó-2011,2004
        VSB_FODAY_XIONGSHI_1               = 6             // ¸£µÏ-ÐÛÊ¨F16Æ¤¿¨-2012
}VSB_FODAY_CLASS;

// ºìÆì×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_HONGQI_CLASS
{
    VSB_HONGQI_OTHER                   = 0,         // ÆäËû£¨±£Áô£©
        VSB_HONGQI_MINGSHI_1               = 1           // ºìÆì-Ã÷ÊË-2007,2003,2001,2000,1999
}VSB_HONGQI_CLASS;


// ÄÉÖÇ½Ý ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_LUXGEN_CLASS
{
    VSB_LUXGEN_OTHER                   = 0,         // ÆäËû£¨±£Áô£©
        VSB_LUXGEN_DASEVEN_1               = 1          // ÄÉÖÇ½Ý-´ó7-SUV
}VSB_LUXGEN_CLASS;

// ÏÄÀû×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_XIALI_CLASS
{
    VSB_XIALI_OTHER                    = 0,         // ÆäËû£¨±£Áô£©
        VSB_XIALI_QIBING_1                 = 1,         // ÃÀÑÇ(ÏÄÀû)-Ææ±ø-2010
}VSB_XIALI_CLASS;

// Êæ³Û¿Í³µ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SHUCHI_CLASS
{
    VSB_SHUCHI_OTHER                   = 0,         // ÆäËû£¨±£Áô£©
        VSB_SHUCHI_A_1                     = 1          // Êæ³Û¿Í³µ-¿Í³µ-A¿î
}VSB_SHUCHI_CLASS;

//Ó¢·ÆÄáµÏ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_INFINITI_CLASS
{
    VSB_INFINITI_OTHER                 = 0,         // ÆäËû£¨±£Áô£©
        VSB_INFINITI_EX_1                  = 1,         // Ó¢·ÆÄáµÏ-EX-2013,2011,2010,2009,2008
        VSB_INFINITI_FX_1                  = 2,         // Ó¢·ÆÄáµÏ-FX-2007
        VSB_INFINITI_FX_2                  = 3,         // Ó¢·ÆÄáµÏ-FX-2011,2010,2009
        VSB_INFINITI_FX_3                  = 4,         // Ó¢·ÆÄáµÏ-FX-2013,2012FX35
        VSB_INFINITI_G_1                   = 5,         // Ó¢·ÆÄáµÏ-G-2013,2010
        VSB_INFINITI_JX_1                  = 6          // Ó¢·ÆÄáµÏ-JX-2013,2011
}VSB_INFINITI_CLASS;


// Á«»¨×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_LOTUS_CLASS
{
    VSB_LOTUS_OTHER                    = 0,            // ÆäËû£¨±£Áô£©
        VSB_LOTUS_L3_1                     = 1,            // Á«»¨-L3ÈýÏá-2010ºÀ»ªÐÍ,2009
        VSB_LOTUS_L3_2                     = 2             // Á«»¨-L5ÈýÏá-2012,2011
}VSB_LOTUS_CLASS;

//·ÆÑÇÌØ×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_FIAT_CLASS
{
    VSB_FIAT_OTHER                     = 0,            // ÆäËû£¨±£Áô£©
        VSB_FIAT_FEIYUE_1                  = 1             // ·ÆÑÇÌØ-·ÆÔ¾-2014,2013,2012
}VSB_FIAT_CLASS;

//Ú©¸è×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_OGA_CLASS
{
    VSB_OGA_OTHER                      = 0,              // ÆäËû£¨±£Áô£©
        VSB_OGA_MDX_1                      = 1,              // Ú©¸è-MDX-2010
        VSB_OGA_MDX_2                      = 2               // Ú©¸è-MDX-2011
}VSB_OGA_CLASS;



// Ô¾½ø×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_YUEJIN_CLASS
{
    VSB_YUEJIN_OTHER                   = 0,           // ÆäËû£¨±£Áô£©
        VSB_YUEJIN_SHUAIHU_1               = 1,           // Ô¾½ø-Ë§»¢-H100,H300
        VSB_YUEJIN_CAISHEN_1               = 2,           // Ô¾½ø-²ÆÉñ-S100
        VSB_YUEJIN_CAISHEN_2               = 3,           // Ô¾½ø-²ÆÉñ-S300
        VSB_YUEJIN_CAISHEN_3               = 4            // Ô¾½ø-²ÆÉñ-S500
}VSB_YUEJIN_CLASS;

//Ò°Âí×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_YEMA_CLASS
{
    VSB_YEMA_OTHER                     = 0,        // ÆäËû£¨±£Áô£©
        VSB_YEMA_F99_1                     = 1            // Ò°Âí-F99-2012,2011,2010,2009 
}VSB_YEMA_CLASS;

//½ðÁú×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SZKINGLONG_CLASS
{
    VSB_SZKINGLONG_OTHER               = 0,        // ÆäËû£¨±£Áô£©
        VSB_SZKINGLONG_BUS11_1             = 1,       // ½ðÁú-¿Í³µ³µÐÍ11-A¿î
        VSB_SZKINGLONG_BUS12_1             = 2,       // ½ðÁú-¿Í³µ³µÐÍ12-A¿î
        VSB_SZKINGLONG_BUS13_1             = 3,       // ½ðÁú-¿Í³µ³µÐÍ13-A¿î
        VSB_SZKINGLONG_BUS14_1             = 4,       // ½ðÁú-¿Í³µ³µÐÍ14-A¿î
        VSB_SZKINGLONG_BUS16_1             = 5,       // ½ðÁú-¿Í³µ³µÐÍ16-A¿î
        VSB_SZKINGLONG_BUS18_1             = 6,       // ½ðÁú-¿Í³µ³µÐÍ18-A¿î
        VSB_SZKINGLONG_BUS1_1              = 7,       // ½ðÁú-¿Í³µ³µÐÍ1-A¿î
        VSB_SZKINGLONG_BUS20_1             = 8,       // ½ðÁú-¿Í³µ³µÐÍ20-A¿î
        VSB_SZKINGLONG_BUS2_1              = 9,       // ½ðÁú-¿Í³µ³µÐÍ2-A¿î
        VSB_SZKINGLONG_BUS5_1              = 10,       // ½ðÁú-¿Í³µ³µÐÍ5-A¿î
        VSB_SZKINGLONG_BUS6_1              = 11,       // ½ðÁú-¿Í³µ³µÐÍ6-A¿î
        VSB_SZKINGLONG_BUS9_1              = 12,       // ½ðÁú-¿Í³µ³µÐÍ9-A¿î
        VSB_SZKINGLONG_BUS10_1             = 13,       // ½ðÁú-¿Í³µ³µÐÍ10-A¿î
        VSB_SZKINGLONG_BUS15_1             = 14        // ½ðÁú-¿Í³µ³µÐÍ15-A¿î
}VSB_SZKINGLONG_CLASS;

//³¤·áÁÔ±ª×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_CHANGFENG_CLASS
{
    VSB_CHANGFENG_OTHER                = 0,        // ÆäËû£¨±£Áô£©
        VSB_CHANGFENG_CS7_1                = 1,        // ³¤·áÁÔ±ª-CS7-2009
        VSB_CHANGFENG_QIBING_1             = 2,        // ³¤·áÁÔ±ª-Ææ±ø-2010,2009
        VSB_CHANGFENG_LIEBAO_1             = 3,        // ³¤·áÁÔ±ª-ÁÔ±ªCS6-2010,2008
        VSB_CHANGFENG_FULING_1             = 4,        // ³¤·áÁÔ±ª-¸£ÁåÆ¤¿¨-A¿î
        VSB_CHANGFENG_FEIYANG_1            = 5,        // ³¤·áÁÔ±ª-·ÉÑïÆ¤¿¨-2010,2009,2005
        VSB_CHANGFENG_FEITENG_1            = 6,        // ³¤·áÁÔ±ª-·ÉÌÚ-2010,2009,2006
        VSB_CHANGFENG_BLACKJINGANG_1       = 7,        // ³¤·áÁÔ±ª-ºÚ½ð¸Õ-2013,2010,2009,2008,2006
}VSB_CHANGFENG_CLASS;

//Â½·ç×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_LUFENG_CLASS
{
    VSB_LUFENG_OTHER                   = 0,           // ÆäËû£¨±£Áô£©
        VSB_LUFENG_X6_1                    = 1,           // Â½·ç-X6-2005
        VSB_LUFENG_X6_2                    = 2,           // Â½·ç-X6-2006
        VSB_LUFENG_X6_3                    = 3,           // Â½·ç-X6-2011,2010,2008,2007
        VSB_LUFENG_LUFENGX5_1              = 4,           // Â½·ç-Â½·çX5-2013
        VSB_LUFENG_LUFENGX8_1              = 5,           // Â½·ç-Â½·çX8-2013,2012,2011,2009
        VSB_LUFENG_LUFENGX8_2              = 6,           // Â½·ç-Â½·çX8-2014,2012Ì½Ë÷°æ
        VSB_LUFENG_FENGHUA_1               = 7,           // Â½·ç-·ç»ª-2008,2007
        VSB_LUFENG_X6_4                    = 8,           // Â½·ç-X6-2011Á½Çý
        VSB_LUFENG_FENGSHANG_1             = 9            // Â½·ç-·çÉÐ-2011,2006 
}VSB_LUFENG_CLASS;

//ÉÂÆûÖØ¿¨×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_SHANQI_CLASS
{
    VSB_SHANQI_OTHER                   = 0,           // ÆäËû£¨±£Áô£©
        VSB_SHANQI_AOLONG_1                = 1,           // ÉÂÆûÖØ¿¨-°ÂÁú-ÖØ¿¨A
        VSB_SHANQI_AOLONG_2                = 2,           // ÉÂÆûÖØ¿¨-°ÂÁú-ÖØ¿¨B
        VSB_SHANQI_DELONG_1                = 3,           // ÉÂÆûÖØ¿¨-µÂÁúF2000-4X2Ç£Òý³µ
        VSB_SHANQI_DELONG_2                = 4,           // ÉÂÆûÖØ¿¨-µÂÁúF3000-B¿î
        VSB_SHANQI_DELONG_3                = 5,           // ÉÂÆûÖØ¿¨-µÂÁúM3000-ÖØ¿¨ 
}VSB_SHANQI_CLASS;


//Ò°Âí×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_RENAULT_CLASS
{
    VSB_RENAULT_OTHER                  = 0,          // ÆäËû£¨±£Áô£©
        VSB_RENAULT_MEIGANNA_1             = 1,          // À×Åµ-Ã·¸ÊÄÈ-2006
        VSB_RENAULT_KELEIAO_1              = 2,          // À×Åµ-¿ÆÀ×°Á-2010,2009
        VSB_RENAULT_KELEIAO_2              = 3,          // À×Åµ-¿ÆÀ×°Á-2013,2012
        VSB_RENAULT_SCENE_1                = 4,          // À×Åµ-·ç¾°-2007
        VSB_RENAULT_FENGLANG_1             = 5,          // À×Åµ-·çÀÊ-2011
        VSB_RENAULT_TAFEIKE_1              = 6           // À×Åµ-Ëþ·Æ¿Ë-2004    
}VSB_RENAULT_CLASS;

//»Æº£×ÓÆ·ÅÆÀàÐÍ
typedef enum _VSB_HUANGHAI_CLASS
{
    VSB_HUANGHAI_OTHER                 = 0,         // ÆäËû£¨±£Áô£©
        VSB_HUANGHAI_DACAISHEN_1           = 1,         // »Æº£-´ó²ñÉñ-2013,2012
        VSB_HUANGHAI_DACAISHEN_2           = 2,         // »Æº£-´ó²ñÉñ-2013,2012,2011,2010,2009²ñÓÍ°æ
        VSB_HUANGHAI_BUS4_1                = 3,         // »Æº£-¿Í³µ³µÐÍ4-2012,2011
        VSB_HUANGHAI_CHALLENGER_1          = 4,         // »Æº£-ÌôÕ½Õß-2011,2010,2009,2008
        VSB_HUANGHAI_AOLONGCUV_1           = 5,         // »Æº£-°¿ÁúCUV-2010,2009
        VSB_HUANGHAI_AOJUN_1               = 6,         // »Æº£-°Á¿¥-2009
        VSB_HUANGHAI_AOJUN_2               = 7,         // »Æº£-°Á¿¥-2010,2009
        VSB_HUANGHAI_QISHENGV3_1           = 8,         // »Æº£-ÆìÊ¤V3-2011
        VSB_HUANGHAI_LINGHANGZHE_1         = 9,         // »Æº£-Áìº½Õß-2007,2005
        VSB_HUANGHAI_FENGCHI_1             = 10         // »Æº£-·ç³Û-A¿î
}VSB_HUANGHAI_CLASS;

/********************³µÁ¾Æ·ÅÆ×ÓÀàÐÍEnd*************************/

//³µÁ¾ÐÅÏ¢
typedef struct tagNET_DVR_VEHICLE_INFO_
{
    DWORD dwIndex;          //³µÁ¾ÐòºÅ
    BYTE  byVehicleType;    //³µÁ¾ÀàÐÍ 0 ±íÊ¾ÆäËü³µÐÍ£¬1 ±íÊ¾Ð¡ÐÍ³µ£¬2 ±íÊ¾´óÐÍ³µ ,3±íÊ¾ÐÐÈË´¥·¢ ,4±íÊ¾¶þÂÖ³µ´¥·¢ 5±íÊ¾ÈýÂÖ³µ´¥·¢(3.5Ver)
    BYTE  byColorDepth;        //³µÉíÑÕÉ«ÉîÇ³
    BYTE  byColor;          //³µÉíÑÕÉ«,²Î¿¼VCR_CLR_CLASS
    /*À×´ïÒì³£×´Ì¬£º
    0~À×´ïÕý³££¬
    1~À×´ï¹ÊÕÏ
    2~À×´ïÒ»Ö±·¢ËÍÄ³Ò»¸öÏàÍ¬ËÙ¶ÈÖµ
    3~À×´ïËÍ³öÊý¾ÝÎª0
    4~À×´ïËÍ³öÊý¾Ý¹ý´ó»òÕß¹ýÐ¡
    */
    BYTE  byRadarState;
    WORD  wSpeed;           //µ¥Î»km/h
    WORD  wLength;          //Ç°Ò»Á¾³µµÄ³µÉí³¤¶È  
                            /*Î¥¹æÀàÐÍ£¬0-Õý³££¬1-µÍËÙ£¬2-³¬ËÙ£¬3-ÄæÐÐ£¬4-´³ºìµÆ,5-Ñ¹³µµÀÏß,6-²»°´µ¼Ïò£¬7-Â·¿ÚÖÍÁô£¬
                            8-»úÕ¼·Ç£¬9-Î¥·¨±äµÀ£¬10-²»°´³µµÀ 11-Î¥·´½ûÁî£¬12-Â·¿ÚÍ£³µ£¬13-ÂÌµÆÍ£³µ, 14-Î´ÀñÈÃÐÐÈË(Î¥·¨´úÂë1357), 
    15-Î¥ÕÂÍ£³µ£¬16-Î¥ÕÂµôÍ·,17-Õ¼ÓÃÓ¦¼±³µµÀ,18-½ûÓÒ,19-½û×ó,20-Ñ¹»ÆÏß,21-Î´Ïµ°²È«´ø,22-ÐÐÈË´³ºìµÆ,23-¼ÓÈû*/
    BYTE  byIllegalType;
    BYTE  byVehicleLogoRecog; //²Î¿¼Ã¶¾ÙÀàÐÍ VLR_VEHICLE_CLASS
    BYTE  byVehicleSubLogoRecog; //³µÁ¾Æ·ÅÆ×ÓÀàÐÍÊ¶±ð£»²Î¿¼VSB_VOLKSWAGEN_CLASSµÈ×ÓÀàÐÍÃ¶¾Ù¡£
    BYTE  byVehicleModel; //³µÁ¾×ÓÆ·ÅÆÄê¿î£¬0-Î´Öª£¬²Î¿¼"³µÁ¾×ÓÆ·ÅÆÄê¿î.xlsx"
    BYTE  byCustomInfo[16];  //×Ô¶¨ÒåÐÅÏ¢
    WORD  wVehicleLogoRecog;  //³µÁ¾Ö÷Æ·ÅÆ£¬²Î¿¼"³µÁ¾Ö÷Æ·ÅÆ.xlsx" (¸Ã×Ö¶Î¼æÈÝbyVehicleLogoRecog);
    BYTE  byRes3[14];    
}NET_DVR_VEHICLE_INFO, *LPNET_DVR_VEHICLE_INFO;

//³µÅÆ¼ì²â½á¹û
typedef struct tagNET_DVR_PLATE_RESULT
{
    DWORD   dwSize;            //½á¹¹³¤¶È
    BYTE    byResultType;    //0-ÊÓÆµÊ¶±ð½á¹û£¬1Í¼ÏñÊ¶±ð½á¹û 2 ´óÓÚ10MÊ±×ßÏÂÔØÂ·Ïß
    BYTE    byChanIndex;    //Í¨µÀºÅ
    WORD    wAlarmRecordID;    //±¨¾¯Â¼ÏñID(ÓÃÓÚ²éÑ¯Â¼Ïñ£¬½öµ±byResultTypeÎª2Ê±ÓÐÐ§)
    DWORD   dwRelativeTime;    //Ïà¶ÔÊ±¼äµã  
    BYTE    byAbsTime[32];    //¾ø¶ÔÊ±¼äµã,yyyymmddhhmmssxxx,e.g.20090810235959999£¨ºÁÃë£©
    DWORD   dwPicLen;        //Í¼Æ¬³¤¶È(½ü¾°Í¼)
    DWORD    dwPicPlateLen;  //³µÅÆÐ¡Í¼Æ¬³¤¶È
    DWORD   dwVideoLen;        //Â¼ÏñÄÚÈÝ³¤¶È
    BYTE    byTrafficLight;    //0-·ÇºìÂÌµÆ×¥ÅÄ£¬1-ÂÌµÆÊ±×¥ÅÄ£»2-ºìµÆÊ±×¥ÅÄ
    BYTE    byPicNum;       //Á¬ÅÄµÄÍ¼Æ¬ÐòºÅ
    BYTE    byDriveChan;    //´¥·¢³µµÀºÅ
    BYTE     byVehicleType; //³µÁ¾ÀàÐÍ£¬²Î¿¼VTR_RESULT
    DWORD   dwBinPicLen;    //³µÅÆ¶þÖµÍ¼³¤¶È
    DWORD   dwCarPicLen;    //³µÁ¾Ô­Í¼³¤¶È
    DWORD   dwFarCarPicLen; //Ô¶¾°Í¼³¤¶È
    BYTE    *pBuffer3;      //³µÅÆ¶þÖµÍ¼
    BYTE    *pBuffer4;      //³µÁ¾Ô­Í¼
    BYTE    *pBuffer5;      //Ô¶¾°Í¼
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE    byRelaLaneDirectionType;
    BYTE    byCarDirectionType; //³µÁ¾¾ßÌåÐÐÊ»µÄ·½Ïò£¬0±íÊ¾´ÓÉÏÍùÏÂ£¬1±íÊ¾´ÓÏÂÍùÉÏ£¨¸ù¾ÝÊµ¼Ê³µÁ¾µÄÐÐÊ»·½ÏòÀ´µÄÇø·Ö£©
    BYTE    byRes3[6];   
    NET_DVR_PLATE_INFO  struPlateInfo;    //³µÅÆÐÅÏ¢½á¹¹
    NET_DVR_VEHICLE_INFO struVehicleInfo; //³µÁ¾ÐÅÏ¢
    BYTE    *pBuffer1;                   // µ±ÉÏ´«µÄÊÇÍ¼Æ¬(½ü¾°Í¼)£¬Ö¸ÕëÖ¸ÏòÍ¼Æ¬ÐÅÏ¢£¬µ±ÉÏ´«µÄÊÇÊÓÆµ£¬Ö¸ÕëÖ¸ÏòÊÓÆµÐÅÏ¢£¬Èç¹û²»Ïë»ñµÃÍ¼Æ¬»òÊÓÆµÐÅÏ¢£¬´«NULL(DVS³µÁ¾½ü¾°Í¼)
    BYTE    *pBuffer2;                  // µ±ÉÏ´«µÄÊÇÍ¼Æ¬(³µÅÆÍ¼)Ê±£¬Ö¸Ïò³µÅÆÍ¼Æ¬µÄÖ¸Õë£¨DVS³µÅÆ²ÊÍ¼£©
}NET_DVR_PLATE_RESULT, *LPNET_DVR_PLATE_RESULT;
//ºóÃæ½ô¸úÍ¼Æ¬Êý¾ÝºÍÂ¼ÏñÊý¾Ý£¬Ö»´«Ò»ÖÖ£¬Í¼Æ¬Êý¾ÝÎª³¡¾°Í¼Æ¬+³µÅÆÐ¡Í¼Æ¬

//Í¼Ïñµþ¼ÓÐÅÏ¢ÅäÖÃ        
typedef struct tagNET_DVR_IMAGEOVERLAYCFG
{
    DWORD        dwSize;
    BYTE        byOverlayInfo;//µþ¼ÓÊ¹ÄÜ¿ª¹Ø£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayMonitorInfo;//ÊÇ·ñµþ¼Ó¼à²âµãÐÅÏ¢£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayTime;//ÊÇ·ñµþ¼ÓÊ±¼ä£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlaySpeed;//ÊÇ·ñµþ¼ÓËÙ¶È£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlaySpeeding;//ÊÇ·ñµþ¼Ó³¬ËÙ±ÈÀý£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayLimitFlag;//ÊÇ·ñµþ¼ÓÏÞËÙ±êÖ¾£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayPlate;//ÊÇ·ñµþ¼Ó³µÅÆºÅ£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayColor;//ÊÇ·ñµþ¼Ó³µÉíÑÕÉ«£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayLength;//ÊÇ·ñµþ¼Ó³µ³¤£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayType;//ÊÇ·ñµþ¼Ó³µÐÍ£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayColorDepth;//ÊÇ·ñµþ¼Ó³µÉíÑÕÉ«ÉîÇ³£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayDriveChan;//ÊÇ·ñµþ¼Ó³µµÀ£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayMilliSec; //µþ¼ÓºÁÃëÐÅÏ¢ 0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayIllegalInfo; //µþ¼ÓÎ¥ÕÂÐÅÏ¢ 0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byOverlayRedOnTime;  //µþ¼ÓºìµÆÒÑÁÁÊ±¼ä 0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE        byFarAddPlateJpeg;      //Ô¶¾°Í¼ÊÇ·ñµþ¼Ó³µÅÆ½ØÍ¼,0-²»µþ¼Ó,1-µþ¼Ó
    BYTE        byNearAddPlateJpeg;      //½ü¾°Í¼ÊÇ·ñµþ¼Ó³µÅÆ½ØÍ¼,0-²»µþ¼Ó,1-µþ¼Ó
    BYTE        byRes1[3];    //±£Áô
    BYTE        byMonitorInfo1[32];    //¼à²âµãÐÅÏ¢1
    BYTE        byMonitorInfo2[44]; //¼ì²âµãÐÅÏ¢2
    BYTE        byRes2[52];    //±£Áô
}NET_DVR_IMAGEOVERLAYCFG, *LPNET_DVR_IMAGEOVERLAYCFG;

//µ¥IO´¥·¢×¥ÅÄ¹¦ÄÜÅäÖÃ
typedef struct tagNET_DVR_SNAPCFG
{
    DWORD   dwSize;
    BYTE    byRelatedDriveWay;//´¥·¢IO¹ØÁªµÄ³µµÀºÅ
    BYTE     bySnapTimes; //ÏßÈ¦×¥ÅÄ´ÎÊý£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬Ä¿Ç°×î´ó5´Î  
    WORD    wSnapWaitTime;  //×¥ÅÄµÈ´ýÊ±¼ä£¬µ¥Î»ms£¬È¡Öµ·¶Î§[0,60000]
    WORD    wIntervalTime[MAX_INTERVAL_NUM];//Á¬ÅÄ¼ä¸ôÊ±¼ä£¬ms
    DWORD   dwSnapVehicleNum; //×¥ÅÄ³µÁ¾ÐòºÅ¡£
    NET_DVR_JPEGPARA  struJpegPara;//×¥ÅÄÍ¼Æ¬²ÎÊý
    BYTE    byRes2[16];//±£Áô×Ö½Ú
}NET_DVR_SNAPCFG, *LPNET_DVR_SNAPCFG;

typedef enum _ITC_MAINMODE_ABILITY_
{
    ITC_MODE_UNKNOW    = 0x0,   //ÎÞ
        ITC_POST_MODE  = 0x1,  //¿¨¿ÚÄ£Ê½
        ITC_EPOLICE_MODE      = 0x2,  //µç¾¯Ä£Ê½
        ITC_POSTEPOLICE_MODE  = 0x4  //¿¨Ê½µç¾¯Ä£Ê½
}ITC_MAINMODE_ABILITY;

typedef enum _ITC_RECOG_REGION_TYPE_
{
    ITC_REGION_RECT    = 0x0,   //¾ØÐÎ
        ITC_REGION_POLYGON  = 0x1,  //¶à±ßÐÎ
}ITC_RECOG_REGION_TYPE;

typedef struct tagNET_DVR_SNAP_ABILITY
{
    DWORD dwSize;
    BYTE  byIoInNum;//IOÊäÈë¿ÚÊý
    BYTE  byIoOutNum;//IOÊä³ö¿ÚÊý
    BYTE  bySingleSnapNum;//µ¥IO´¥·¢×éÊý
    BYTE  byLightModeArrayNum;//ºìÂÌµÆÄ£Ê½×éÊý
    BYTE  byMeasureModeArrayNum;//²âËÙÄ£Ê½×éÊý
    BYTE  byPlateEnable; //³µÅÆÊ¶±ðÄÜÁ¦
    BYTE  byLensMode;//¾µÍ·Ä£Ê½0-CCD,1-CMOS
    BYTE  byPreTriggerSupport; //ÊÇ·ñÖ§³ÖÔ­´¥·¢Ä£Ê½£¬0-Ö§³Ö£¬1-²»Ö§³Ö
    DWORD dwAbilityType; //Ö§³ÖµÄ´¥·¢Ä£Ê½ÄÜÁ¦£¬°´Î»±íÊ¾£¬¶¨Òå¼ûITC_MAINMODE_ABILITY
    BYTE  byIoSpeedGroup; //Ö§³ÖµÄIO²âËÙ×éÊý
    BYTE  byIoLightGroup; //Ö§³ÖµÄIOºìÂÌµÆ×éÊý
    BYTE  byRecogRegionType; //ÅÆÊ¶ÇøÓòÖ§³ÖµÄÀàÐÍ£¬Ïê¼û¶¨ÒåITC_RECOG_REGION_TYPE
    BYTE  bySupport; //Éè±¸ÄÜÁ¦£¬°´Î»±íÊ¾£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    // bySupport&0x1£¬±íÊ¾ÊÇ·ñÖ§³ÖÀ©Õ¹µÄ×Ö·ûµþ¼ÓÅäÖÃ
    // bySupport&0x2£¬±íÊ¾ÊÇ·ñÖ§³ÖÀ©Õ¹µÄÐ£Ê±ÅäÖÃ½á¹¹
    // bySupport&0x4, ±íÊ¾ÊÇ·ñÖ§³Ö¶àÍø¿¨(¶àÍø¸ôÀë)
    // bySupport&0x8, ±íÊ¾ÊÇ·ñÖ§³ÖÍø¿¨µÄbonding¹¦ÄÜ(ÍøÂçÈÝ´í)
    // bySupport&0x10, ±íÊ¾ÊÇ·ñÖ§³ÖÓïÒô¶Ô½²
    //2013-07-09 ÄÜÁ¦¼¯·µ»Ø
    WORD wSupportMultiRadar;// Éè±¸ÄÜÁ¦£¬°´Î»±íÊ¾£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    // wSupportMultiRadar&0x1£¬±íÊ¾ ¿¨¿ÚRS485À×´ï Ö§³Ö³µµÀ¹ØÁªÀ×´ï´¦Àí
    // wSupportMultiRadar&0x2£¬±íÊ¾ ¿¨¿ÚÐéÄâÏßÈ¦ Ö§³Ö³µµÀ¹ØÁªÀ×´ï´¦Àí
    // wSupportMultiRadar&0x4£¬±íÊ¾ »ìÐÐ¿¨¿Ú Ö§³Ö³µµÀ¹ØÁªÀ×´ï´¦Àí
    // wSupportMultiRadar&0x8£¬±íÊ¾ ÊÓÆµ¼ì²â Ö§³Ö³µµÀ¹ØÁªÀ×´ï´¦Àí
    BYTE  byICRPresetNum;
    // ±íÊ¾Ö§³ÖµÄICRÔ¤ÖÃµã£¨ÂË¹âÆ¬Æ«ÒÆµã£©Êý
    BYTE  byICRTimeSlot;//±íÊ¾Ö§³ÖµÄICRµÄÊ±¼ä¶ÎÊý£¨1¡«8£©
    BYTE  bySupportRS485Num;//±íÊ¾Ö§³ÖµÄRS485¿ÚµÄÊýÁ¿
    BYTE  byExpandRs485SupportSensor;// Éè±¸ÄÜÁ¦£¬°´Î»±íÊ¾£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    // byExpandRs485SupportSensor &0x1£¬±íÊ¾µç¾¯³µ¼ìÆ÷Ö§³Ö³µ¼ìÆ÷
    // byExpandRs485SupportSensor &0x2£¬±íÊ¾¿¨Ê½µç¾¯³µ¼ìÆ÷Ö§³Ö³µ¼ìÆ÷
    BYTE  byExpandRs485SupportSignalLampDet;// Éè±¸ÄÜÁ¦£¬°´Î»±íÊ¾£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    // byExpandRs485SupportSignalLampDet &0x1£¬±íÊ¾µç¾¯³µ¼ìÆ÷Ö§³ÖÍâ½ÓÐÅºÅµÆ¼ì²âÆ÷
    // byExpandRs485SupportSignalLampDet &0x2£¬±íÊ¾¿¨Ê½µç¾¯³µ¼ìÆ÷Ö§³ÖÍâ½ÓÐÅºÅµÆ¼ì²âÆ÷
    BYTE  byRelayNum;// ±íÊ¾Ö§³Ö¼ÌµçÆ÷µÄ¸öÊý 2013-11-04
    BYTE  bySupport1; //Éè±¸ÄÜÁ¦£¬°´Î»±íÊ¾£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    // bySupport1&0x1£¬±íÊ¾ÊÇ·ñÖ§³Ö×Ô¶¨ÒåÐ£Ê±ÐÅÏ¢ÅäÖÃ
    // bySupport1&0x2,  ±íÊ¾ÊÇ·ñÖ§³ÖÊÓÆµ´¥·¢ÓÅ»¯·½°¸
    // bySupport1&0x4,  ±íÊ¾ÊÇ·ñÖ§³ÖDDNSÅäÖÃ·½°¸
    // bySupport1&0x8,  ±íÊ¾ÊÇ·ñÖ§³Ö»ñÈ¡Éè±¸µ±Ç°´¥·¢Ä£Ê½½Ó¿ÚÃüÁî
    // bySupport1&0x10, ±íÊ¾ÊÇ·ñÖ§³Ö³öÈë¿ÚÅäÖÃ 2014-03-03
    // bySupport1&0x20,  ±íÊ¾ÊÇ·ñÖ§³ÖGPSÄ£¿é²ÎÊýÅäÖÃ
    // bySupport1&0x40,  ±íÊ¾ÊÇ·ñÖ§³ÖNTPÐ£Ê±¼ä¸ôÖ§³Ö·ÖÖÓÉèÖÃ
    // bySupport1&0x80,  ±íÊ¾ÊÇ·ñÖ§³Ötps±¨¾¯Êý¾ÝÉÏ´«
    BYTE  bySupport2; //Éè±¸ÄÜÁ¦£¬°´Î»±íÊ¾£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    // bySupport2&0x01,  ±íÊ¾ÊÇ·ñÖ§³ÖÂëÁ÷¸½¼ÓÐÅÏ¢ÅäÖÃ
    // bySupport2&0x02,  ±íÊ¾Í¨µÀÍ¼Ïñ²ÎÊý£¨INTER_PICCFG_V30£©ÖÐÊÇ·ñÖ§³ÖÊÓÆµµþ¼ÓÊ±¼äºÁÃëÆôÓÃ²ÎÊý£¨byOSDMilliSecondEnable£©
    BYTE  bySupportWhiteBalance; //°×Æ½ºâÄÜÁ¦£¬Ä¬ÈÏ¶¼ÊÇÖ§³ÖÊÖ¶¯°×Æ½ºâ¡¢×Ô¶¯°×Æ½ºâ¡¢×Ô¶¯°×Æ½ºâ2Õâ3ÖÖÄ£Ê½¡£
    // bySupportWhiteBalance &0x01,  ±íÊ¾ÊÇ·ñÖ§³ÖÈÕ¹âµÆÄ£Ê½
    // bySupportWhiteBalance &0x02,  ±íÊ¾ÊÇ·ñÖ§³Ö×ÔÈ»¹âÄ£Ê½
    // bySupportWhiteBalance &0x04,  ±íÊ¾ÊÇ·ñÖ§³ÖÅ¯¹âµÆÄ£Ê½
    // bySupportWhiteBalance &0x08,  ±íÊ¾ÊÇ·ñÖ§³Ö°×³ãµÆÄ£Ê½
    BYTE  byRes[9];
} NET_DVR_SNAP_ABILITY, *LPNET_DVR_SNAP_ABILITY;

typedef struct tagNET_ITC_ICRTIMECFG
{
    NET_DVR_SCHEDTIME  struTime;
    BYTE   byAssociateRresetNo;//Ô¤ÖÃµãºÅ1¡«8 , 0´ú±íÎÞ
    BYTE   bySubSwitchMode;//1~°×Ìì£¬2~ÍíÉÏ (µ±Ô¤ÖÃµãµÈÓÚ0 µÄÊ±ºòÉúÐ§)
    BYTE   byRes[10];
}NET_ITC_ICRTIMECFG, *LPNET_ITC_ICRTIMECFG;

typedef struct tagNET_ITC_ICR_TIMESWITCH_PARAM  //156
{
    NET_ITC_ICRTIMECFG  struAutoCtrlTime[MAX_TIMESEGMENT_V30];//×Ô¶¯ÇÐ»»Ê±¼ä¶Î (×Ô¶¯ÇÐ»»ÏÂ Ê±¿ÕÏÂÉúÐ§ ÏÖÔÚÖ§³Ö4×é£¬Ô¤Áô4×é)
    BYTE  byICRPreset[MAX_ICR_NUM]; //Êµ¼ÊÉúÐ§¸ù¾ÝÄÜÁ¦¼¯¶¯Ì¬ÏÔÊ¾ [0~100] Êý×éÏÂ±ê±íÊ¾Ô¤ÖÃµãºÅ1¡«8 £¨0¡«7 Ïà¶ÔÓ¦£©
    BYTE  byRes[20];
}NET_ITC_ICR_TIMESWITCH_PARAM, *LPNET_ITC_ICR_TIMESWITCH_PARAM;

typedef struct tagNET_ITC_ICR_MANUALSWITCH_PARAM
{    
    BYTE  byICRPreset[MAX_ICR_NUM]; //Êµ¼ÊÉúÐ§¸ù¾ÝÄÜÁ¦¼¯¶¯Ì¬ÏÔÊ¾ [0~100]
    BYTE  bySubSwitchMode;//1~°×Ìì£¬2~ÍíÉÏ
    BYTE  byRes[147];
}NET_ITC_ICR_MANUALSWITCH_PARAM, *LPNET_ITC_ICR_MANUALSWITCH_PARAM;

typedef struct tagNET_ITC_ICR_AOTOSWITCH_PARAM
{
    BYTE  byICRPreset[MAX_ICR_NUM]; //Êµ¼ÊÉúÐ§¸ù¾ÝÄÜÁ¦¼¯¶¯Ì¬ÏÔÊ¾ [0~100] Êý×éÏÂ±ê±íÊ¾Ô¤ÖÃµãºÅ1¡«8 £¨0¡«7 Ïà¶ÔÓ¦£©
    BYTE  byICRAutoSwitch; // ICR×Ô¶¯ÇÐ»»¼ÓãÐÖµÑ¡Ïî, È¡Öµ·¶Î§[0 100]
    BYTE  byRes[147];
}NET_ITC_ICR_AOTOSWITCH_PARAM, *LPNET_ITC_ICR_AOTOSWITCH_PARAM;

//Ëã·¨×Ô¶¯
typedef struct tagNET_ITC_ICR_ALGAOTOSWITCH_PARAM
{
    BYTE  byDetectThreshold;//¼ì²âãÐÖµ,·¶Î§[0,100],Ä¬ÈÏ 58
    BYTE  byAbBrightnessThreshold; //Òì³£ÁÁ¶ÈãÐÖµ£¬·¶Î§[0,100]£¬Ä¬ÈÏ12
    BYTE  byRes[154];
}NET_ITC_ICR_ALGAOTOSWITCH_PARAM, *LPNET_ITC_ICR_ALGAOTOSWITCH_PARAM;

typedef union tagNET_ITC_ICR_PARAM_UNION
{
    BYTE uLen[156];
    NET_ITC_ICR_AOTOSWITCH_PARAM struICRAutoSwitch;
    NET_ITC_ICR_MANUALSWITCH_PARAM struICRManualSwitch;
    NET_ITC_ICR_TIMESWITCH_PARAM struICRTimeSwitch;
    NET_ITC_ICR_ALGAOTOSWITCH_PARAM strICRAlgorithmAutoSwitch;
}NET_ITC_ICR_PARAM_UNION,*LPNET_ITC_ICR_PARAM_UNION;

typedef struct tagNET_ITC_ICRCFG
{
    DWORD dwSize;
    BYTE  bySwitchType;//1~×Ô¶¯ÇÐ»»£¬2~ÊÖ¶¯ÇÐ»» ,3~¶¨Ê±ÇÐ»»,4~Ëã·¨×Ô¶¯ 
    BYTE  byRes[3];
    NET_ITC_ICR_PARAM_UNION uICRParam;
}NET_ITC_ICRCFG, *LPNET_ITC_ICRCFG;

//2013-07-09 Òì³£´¦Àí
typedef struct
{    
    DWORD   dwHandleType; //Òì³£´¦Àí,Òì³£´¦Àí·½Ê½µÄ"»ò"½á¹û
    /*0x00: ÎÞÏìÓ¦*/
    /*0x01: ¼àÊÓÆ÷ÉÏ¾¯¸æ*/
    /*0x02: ÉùÒô¾¯¸æ*/
    /*0x04: ÉÏ´«ÖÐÐÄ*/
    /*0x08: ´¥·¢±¨¾¯Êä³ö£¨¼ÌµçÆ÷Êä³ö£©*/
    /*0x10: ´¥·¢JPRG×¥Í¼²¢ÉÏ´«Email*/
    /*0x20: ÎÞÏßÉù¹â±¨¾¯Æ÷Áª¶¯*/
    /*0x40: Áª¶¯µç×ÓµØÍ¼(Ä¿Ç°Ö»ÓÐPCNVRÖ§³Ö)*/
    /*0x200: ×¥Í¼²¢ÉÏ´«FTP*/  
    BYTE     byEnable; //0¡«²»ÆôÓÃ£¬1¡«ÆôÓÃ
    BYTE    byRes;
    WORD    wDuration;//³ÖÐøÊ±¼ä(µ¥Î»/s)
    BYTE    byAlarmOutTriggered[MAX_ITC_EXCEPTIONOUT];//´¥·¢Êä³öÍ¨µÀ
    BYTE    byRes1[8];
} NET_ITC_HANDLEEXCEPTION, *LPNET_ITC_HANDLEEXCEPTION;

typedef struct
{
    DWORD dwSize;
    NET_ITC_HANDLEEXCEPTION struSnapExceptionType[MAX_EXCEPTIONNUM_V30]; //Êý×éµÄÃ¿¸öÔªËØ¶¼±íÊ¾Ò»ÖÖÒì³££¬Êý×é0- Ó²ÅÌ³ö´í,1-ÍøÏß¶Ï,2-IP µØÖ·³åÍ», 3-³µ¼ìÆ÷Òì³£, 4-ÐÅºÅµÆ¼ì²âÆ÷Òì³£
}NET_ITC_EXCEPTION,*LPNET_ITC_EXCEPTION;

typedef struct tagNET_DVR_TRIGCOORDINATE
{
    WORD wTopLeftX; /*ÏßÈ¦×óÉÏ½Çºá×ø±ê£¨2¸ö×Ö½Ú£©*/
    WORD wTopLeftY; /*ÏßÈ¦×óÉÏ½Ç×Ý×ø±ê£¨2¸ö×Ö½Ú£©*/
    WORD wWdith; /*ÏßÈ¦¿í¶È£¨2¸ö×Ö½Ú£©*/
    WORD wHeight; /*ÏßÈ¦¸ß¶È£¨2¸ö×Ö½Ú£©*/
} NET_DVR_TRIGCOORDINATE, *LPNET_DVR_TRIGCOORDINATE;

typedef enum _PROVINCE_CITY_IDX_
{
    ANHUI_PROVINCE             = 0,              //°²»Õ
        AOMEN_PROVINCE             = 1,              //°ÄÃÅ
        BEIJING_PROVINCE           = 2,              //±±¾©
        CHONGQING_PROVINCE         = 3,              //ÖØÇì
        FUJIAN_PROVINCE            = 4,              //¸£½¨
        GANSU_PROVINCE             = 5,              //¸ÊËà
        GUANGDONG_PROVINCE         = 6,              //¹ã¶«
        GUANGXI_PROVINCE           = 7,              //¹ãÎ÷
        GUIZHOU_PROVINCE           = 8,              //¹óÖÝ
        HAINAN_PROVINCE            = 9,              //º£ÄÏ
        HEBEI_PROVINCE             = 10,             //ºÓ±±
        HENAN_PROVINCE             = 11,             //ºÓÄÏ
        HEILONGJIANG_PROVINCE      = 12,             //ºÚÁú½­
        HUBEI_PROVINCE             = 13,             //ºþ±±
        HUNAN_PROVINCE             = 14,             //ºþÄÏ
        JILIN_PROVINCE             = 15,             //¼ªÁÖ
        JIANGSU_PROVINCE           = 16,             //½­ËÕ
        JIANGXI_PROVINCE           = 17,             //½­Î÷
        LIAONING_PROVINCE          = 18,             //ÁÉÄþ
        NEIMENGGU_PROVINCE         = 19,             //ÄÚÃÉ¹Å
        NINGXIA_PROVINCE           = 20,             //ÄþÏÄ
        QINGHAI_PROVINCE           = 21,             //Çàº£
        SHANDONG_PROVINCE          = 22,             //É½¶«
        SHANXI_JIN_PROVINCE        = 23,             //É½Î÷
        SHANXI_SHAN_PROVINCE       = 24,             //ÉÂÎ÷
        SHANGHAI_PROVINCE          = 25,             //ÉÏº£
        SICHUAN_PROVINCE           = 26,             //ËÄ´¨
        TAIWAN_PROVINCE            = 27,             //Ì¨Íå
        TIANJIN_PROVINCE           = 28,             //Ìì½ò
        XIZANG_PROVINCE            = 29,             //Î÷²Ø
        XIANGGANG_PROVINCE         = 30,             //Ïã¸Û
        XINJIANG_PROVINCE          = 31,             //ÐÂ½®
        YUNNAN_PROVINCE            = 32,             //ÔÆÄÏ
        ZHEJIANG_PROVINCE          = 33              //Õã½­
}PROVINCE_CITY_IDX;

typedef struct tagNET_DVR_GEOGLOCATION
{
    int iRes[2]; /*±£Áô*/
    DWORD dwCity; /*³ÇÊÐ£¬Ïê¼ûPROVINCE_CITY_IDX */
}NET_DVR_GEOGLOCATION, *LPNET_DVR_GEOGLOCATION;

//³¡¾°Ä£Ê½
typedef enum _SCENE_MODE_
{
    UNKOWN_SCENE_MODE   = 0,            //Î´Öª³¡¾°Ä£Ê½
        HIGHWAY_SCENE_MODE  = 1,            //¸ßËÙ³¡¾°Ä£Ê½
        SUBURBAN_SCENE_MODE = 2,            //½¼Çø³¡¾°Ä£Ê½(±£Áô)
        URBAN_SCENE_MODE    = 3,            //ÊÐÇø³¡¾°Ä£Ê½
        TUNNEL_SCENE_MODE   = 4             //ËíµÀ³¡¾°Ä£Ê½(±£Áô)
}SCENE_MODE;

typedef struct tagNET_DVR_VTPARAM
{
    DWORD   dwSize;
    BYTE    byEnable;  /* ÊÇ·ñÊ¹ÄÜÐéÄâÏßÈ¦£¬0-²»Ê¹ÓÃ£¬1-Ê¹ÓÃ*/
    BYTE    byIsDisplay; /* ÊÇ·ñÏÔÊ¾ÐéÄâÏßÈ¦£¬0-²»ÏÔÊ¾£¬1-ÏÔÊ¾*/
    BYTE    byLoopPos; //Íí¼ä´¥·¢ÏßÈ¦µÄÆ«Ïò£º0-ÏòÉÏ£¬1-ÏòÏÂ
    BYTE    bySnapGain; /*×¥ÅÄÔöÒæ*/
    DWORD   dwSnapShutter; /*×¥ÅÄ¿ìÃÅËÙ¶È*/
    NET_DVR_TRIGCOORDINATE struTrigCoordinate; //±£Áô
    NET_DVR_TRIGCOORDINATE struRes[MAX_VL_NUM];
    BYTE    byTotalLaneNum;/*ÊÓÆµ´¥·¢µÄ³µµÀÊý1*/
    BYTE    byPolarLenType; /*Æ«Õñ¾µÀàÐÍ£¬0£º²»¼ÓÆ«Õñ¾µ£»1£º¼ÓÊ©ÄÍµÂÆ«Õñ¾µ¡£*/
    BYTE    byDayAuxLightMode; /*°×Ìì¸¨ÖúÕÕÃ÷Ä£Ê½£¬0£ºÎÞ¸¨ÖúÕÕÃ÷£»1£ºLEDµÆÕÕÃ÷£»2£ºÉÁ¹âµÆÕÕÃ÷*/
    BYTE    byLoopToCalRoadBright; /*ÓÃÒÔ¼ÆËãÂ·ÃæÁÁ¶ÈµÄ³µµÀ(ÐéÄâÏßÈ¦)*/
    BYTE    byRoadGrayLowTh; /*Â·ÃæÁÁ¶ÈµÍãÐÖµ³õÊ¼»¯Öµ1*/
    BYTE    byRoadGrayHighTh; /*Â·ÃæÁÁ¶È¸ßãÐÖµ³õÊ¼»¯Öµ140*/
    WORD    wLoopPosBias; /*Íí¼ä´¥·¢ÏßÈ¦Î»ÒÆ30*/
    DWORD   dwHfrShtterInitValue; /*Á¬ÐøÍ¼ÏñÆØ¹âÊ±¼äµÄ³õÊ¼Öµ2000*/
    DWORD   dwSnapShtterInitValue; /*×¥ÅÄÍ¼ÏñÆØ¹âÊ±¼äµÄ³õÊ¼Öµ500*/
    DWORD   dwHfrShtterMaxValue; /*Á¬ÐøÍ¼ÏñÆØ¹âÊ±¼äµÄ×î´óÖµ20000*/
    DWORD   dwSnapShtterMaxValue; /*×¥ÅÄÍ¼ÏñÆØ¹âÊ±¼äµÄ×î´óÖµ1500*/
    DWORD   dwHfrShtterNightValue; /*Íí¼äÁ¬ÐøÍ¼ÏñÆØ¹âÊ±¼äµÄÉèÖÃÖµ3000*/
    DWORD   dwSnapShtterNightMinValue; /*Íí¼ä×¥ÅÄÍ¼ÏñÆØ¹âÊ±¼äµÄ×îÐ¡Öµ3000*/
    DWORD   dwSnapShtterNightMaxValue; /*Íí¼ä×¥ÅÄÍ¼ÏñÆØ¹âÊ±¼äµÄ×î´óÖµ5000*/
    DWORD   dwInitAfe; /*ÔöÒæµÄ³õÊ¼Öµ200*/
    DWORD   dwMaxAfe; /*ÔöÒæµÄ×î´óÖµ400*/
    WORD    wResolutionX;/* Éè±¸µ±Ç°·Ö±æÂÊ¿í*/
    WORD    wResolutionY;/* Éè±¸µ±Ç°·Ö±æÂÊ¸ß*/
    DWORD   dwGainNightValue; /*Íí¼äÔöÒæ£¬Ä¬ÈÏÖµ70*/
    DWORD   dwSceneMode; /*³¡¾°Ä£Ê½£¬ Ïê¼ûSCENE_MODE */
    DWORD   dwRecordMode; /*Â¼Ïñ±êÖ¾£º0-²»Â¼Ïñ£¬1-Â¼Ïñ*/
    NET_DVR_GEOGLOCATION struGeogLocation; /*µØÖ·Î»ÖÃ*/
    BYTE    byTrigFlag[MAX_VL_NUM]; /*´¥·¢±êÖ¾£¬0-³µÍ·´¥·¢£»1-³µÎ²´¥·¢£»2-³µÍ·/³µÎ²¶¼´¥·¢*/
    BYTE    byTrigSensitive[MAX_VL_NUM];  /*´¥·¢ÁéÃô¶È£¬1-100*/
    BYTE    byRes2[62];
}NET_DVR_VTPARAM, *LPNET_DVR_VTPARAM;

typedef struct tagNET_DVR_SNAPENABLECFG
{
    DWORD dwSize;
    BYTE  byPlateEnable;//ÊÇ·ñÖ§³Ö³µÅÆÊ¶±ð£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    BYTE  byRes1[2];   //±£Áô
    BYTE  byFrameFlip;   //Í¼ÏñÊÇ·ñ·­×ª 0-²»·­×ª£¬1-·­×ª
    WORD  wFlipAngle;    //Í¼Ïñ·­×ª½Ç¶È 0,90,180,270
    WORD  wLightPhase;   //ÏàÎ»£¬È¡Öµ·¶Î§[0, 360]
    BYTE  byLightSyncPower;  //ÊÇ·ñÐÅºÅµÆµçÔ´Í¬²½£¬0-²»Í¬²½£»1-Í¬²½
    BYTE  byFrequency;        //ÐÅºÅÆµÂÊ
    BYTE  byUploadSDEnable;  //ÊÇ·ñ×Ô¶¯ÉÏ´«SDÍ¼Æ¬£¬0-·ñ£»1-ÊÇ
    BYTE  byPlateMode; //Ê¶±ðÄ£Ê½²ÎÊý:0-ÊÓÆµ´¥·¢,1-Íâ²¿´¥·¢
    BYTE  byUploadInfoFTP; //ÊÇ·ñÉÏ´«×¥ÅÄ¸½¼ÓÐÅÏ¢µ½FTP£¬0-·ñ£¬1-ÊÇ
    BYTE  byAutoFormatSD; //ÊÇ·ñ×Ô¶¯¸ñÊ½»¯SD¿¨£¬0-·ñ£¬1-ÊÇ
    WORD  wJpegPicSize; //JpegÍ¼Æ¬´óÐ¡[64-8196]
    BYTE  bySnapPicResolution;  //×¥ÅÄÍ¼Æ¬·Ö±æÂÊ(ÓëNET_DVR_COMPRESSION_INFO_V30ÖÐ·Ö±æÂÊ±£³ÖÒ»ÖÂ)
    BYTE  byRes[55]; //±£Áô
}NET_DVR_SNAPENABLECFG, *LPNET_DVR_SNAPENABLECFG;

/*ftpÉÏ´«²ÎÊý*/
typedef struct 
{
    DWORD    dwSize;
    DWORD    dwEnableFTP;            /*ÊÇ·ñÆô¶¯ftpÉÏ´«¹¦ÄÜ*/
    char    sFTPIP[16];                /*ftp ·þÎñÆ÷*/
    DWORD    dwFTPPort;                /*ftp¶Ë¿Ú*/
    BYTE    sUserName[NAME_LEN];    /*ÓÃ»§Ãû*/
    BYTE    sPassword[PASSWD_LEN];    /*ÃÜÂë*/
    DWORD    dwDirLevel;    /*0 = ²»Ê¹ÓÃÄ¿Â¼½á¹¹£¬Ö±½Ó±£´æÔÚ¸ùÄ¿Â¼,1 = Ê¹ÓÃ1¼¶Ä¿Â¼,2=Ê¹ÓÃ2¼¶Ä¿Â¼*/
    WORD     wTopDirMode;    /* Ò»¼¶Ä¿Â¼£¬0x1 = Ê¹ÓÃÉè±¸Ãû,0x2 = Ê¹ÓÃÉè±¸ºÅ,0x3 = Ê¹ÓÃÉè±¸ipµØÖ·£¬0x4=Ê¹ÓÃ¼à²âµã,0x5=Ê¹ÓÃÊ±¼ä(ÄêÔÂ),0x=6×Ô¶¨Òå,0x7=Î¥¹æÀàÐÍ,0x8=·½Ïò,0x9=µØµã*/
    WORD     wSubDirMode;    /* ¶þ¼¶Ä¿Â¼£¬0x1 = Ê¹ÓÃÍ¨µÀÃû,0x2 = Ê¹ÓÃÍ¨µÀºÅ£¬,0x3=Ê¹ÓÃÊ±¼ä(ÄêÔÂÈÕ),0x4=Ê¹ÓÃ³µµÀºÅ,0x=5×Ô¶¨Òå,0x6=Î¥¹æÀàÐÍ,0x7=·½Ïò,0x8=µØµã*/
    BYTE    byEnableAnony; //ÆôÓÃÄäÃû£¬0-·ñ£¬1-ÊÇ
    BYTE    byPicArchivingInterval;//Í¼Æ¬¹éµµ¼ä¸ô[1~30],0±íÊ¾¹Ø±Õ
    BYTE    byRes[22];
}NET_DVR_FTPCFG, *LPNET_DVR_FTPCFG;

/*¿ÉÓÃÀ´ÃüÃûÍ¼Æ¬µÄÏà¹ØÔªËØ */
#define PICNAME_ITEM_DEV_NAME         1        /*Éè±¸Ãû*/
#define PICNAME_ITEM_DEV_NO         2        /*Éè±¸ºÅ*/
#define PICNAME_ITEM_DEV_IP         3        /*Éè±¸IP*/
#define PICNAME_ITEM_CHAN_NAME         4        /*Í¨µÀÃû*/
#define PICNAME_ITEM_CHAN_NO         5        /*Í¨µÀºÅ*/
#define PICNAME_ITEM_TIME             6        /*Ê±¼ä*/
#define PICNAME_ITEM_CARDNO            7        /*¿¨ºÅ*/
#define PICNAME_ITEM_PLATE_NO       8   /*³µÅÆºÅÂë*/
#define PICNAME_ITEM_PLATE_COLOR    9   /*³µÅÆÑÕÉ«*/
#define PICNAME_ITEM_CAR_CHAN       10  /*³µµÀºÅ*/
#define PICNAME_ITEM_CAR_SPEED      11  /*³µÁ¾ËÙ¶È*/
#define PICNAME_ITEM_CARCHAN        12  /*¼à²âµã*/
#define PICNAME_ITEM_PIC_NUMBER     13  //Í¼Æ¬ÐòºÅ
#define PICNAME_ITEM_CAR_NUMBER     14  //³µÁ¾ÐòºÅ
#define PICNAME_MAXITEM             15

#define PICNAME_ITEM_SPEED_LIMIT_VALUES    15 //ÏÞËÙÖµ
#define PICNAME_ITEM_ILLEGAL_CODE          16 //¹ú±êÎ¥·¨´úÂë
#define PICNAME_ITEM_CROSS_NUMBER          17 //Â·¿Ú±àºÅ
#define PICNAME_ITEM_DIRECTION_NUMBER      18 //·½Ïò±àºÅ

//(3.7Ver)
#define PICNAME_ITEM_CAR_COLOR             19 //³µÉíÑÕÉ«
#define PICNAME_ITEM_PLATE_COORDINATE      20 //³µÅÆ×ø±ê
#define PICNAME_ITEM_CAR_TYPE              21 //³µÁ¾ÀàÐÍ
#define PICNAME_ITEM_VIOLATION_TYPE        22 //Î¥¹æÀàÐÍ
#define PICNAME_ITEM_CUSTOM                255//×Ô¶¨Òå



//Í¼Æ¬ÃüÃû
typedef struct 
{
    BYTE     byItemOrder[PICNAME_MAXITEM];    /*    èñÊý×é¶¨ÒåÎÄ¼þÃüÃûµÄ¹æÔò */
    BYTE     byDelimiter;        /*·Ö¸ô·û£¬Ò»°ãÎª'_'*/
}NET_DVR_PICTURE_NAME, *LPNET_DVR_PICTURE_NAME;

//ÃüÃû¹æÔò£º2013-09-27
#define PICNAME_ITEM_PARK_DEV_IP             1        /*Éè±¸IP*/
#define PICNAME_ITEM_PARK_PLATE_NO          2       /*³µÅÆºÅÂë*/
#define PICNAME_ITEM_PARK_TIME                 3        /*Ê±¼ä*/
#define PICNAME_ITEM_PARK_INDEX             4       /*³µÎ»±àºÅ*/
#define PICNAME_ITEM_PARK_STATUS            5       /*³µÎ»×´Ì¬*/
#define PICNAME_ITEM_BUILDING_NUMBER        6       /*¶°ºÅµ¥ÔªºÅ*/
#define PICNAME_ITEM_OUTDOOR_UNIT_ID        7       /*ÃÅ¿Ú»ú±àºÅ*/
#define PICNAME_ITEM_UNLOCK_TYPE            8       /*¿ªËø·½Ê½*/
#define PICNAME_ITEM_DEVICE_NAME            9       //Éè±¸Ãû³Æ
#define PICNAME_ITEM_PERIOD_NO              10      /*ÆÚºÅ*/
#define PICNAME_ITEM_DEV_INDEX              11      /*Éè±¸±àºÅ*/
#define PICNAME_PREFIX                      32      /*Í¼Æ¬Ãû×Ô¶¨ÒåÇ°×º³¤¶È*/
//Í¼Æ¬ÃüÃûÀ©Õ¹ 2013-09-27
typedef struct 
{
    BYTE     byItemOrder[PICNAME_MAXITEM];    /*    èñÊý×é¶¨ÒåÎÄ¼þÃüÃûµÄ¹æÔò */
    BYTE     byDelimiter;                    /*·Ö¸ô·û£¬Ò»°ãÎª'_'*/
    BYTE    byPicNamePrefix[PICNAME_PREFIX/*32*/];  //Í¼Æ¬Ãû×Ô¶¨ÒåÇ°×º
}NET_DVR_PICTURE_NAME_EX, *LPNET_DVR_PICTURE_NAME_EX;

/* ´®¿Ú×¥Í¼ÉèÖÃ*/
typedef struct 
{
    BYTE    byStrFlag;    /*´®¿ÚÊý¾Ý¿ªÊ¼·û*/
    BYTE     byEndFlag;    /*½áÊø·û*/
    WORD    wCardIdx;    /*¿¨ºÅÏà¶ÔÆðÊ¼Î»*/
    DWORD     dwCardLen;    /*¿¨ºÅ³¤¶È*/
    DWORD   dwTriggerPicChans;    /*Ëù´¥·¢µÄÍ¨µÀºÅ£¬°´Î»£¬´ÓµÚ1Î»¿ªÊ¼¼Æ£¬¼´0x2±íÊ¾µÚÒ»Í¨µÀ*/
}NET_DVR_SERIAL_CATCHPIC_PARA, *LPNET_DVR_SERIAL_CATCHPIC_PARA;

//DVR×¥Í¼²ÎÊýÅäÖÃ£¨»ùÏß£©
typedef struct 
{
    DWORD    dwSize;
    NET_DVR_JPEGPARA struJpegPara[MAX_CHANNUM_V30];    /*Ã¿¸öÍ¨µÀµÄÍ¼Ïñ²ÎÊý*/
    WORD    wBurstMode;                            /*×¥Í¼·½Ê½,°´Î»ÉèÖÃ.0x1=±¨¾¯ÊäÈë´¥·¢£¬0x2=ÒÆ¶¯Õì²â´¥·¢ 0x4=232´¥·¢£¬0x8=485´¥·¢£¬0x10=ÍøÂç´¥·¢*/
    WORD    wUploadInterval;                    /*Í¼Æ¬ÉÏ´«¼ä¸ô(Ãë)[0,65535]*/
    NET_DVR_PICTURE_NAME     struPicNameRule;    /* Í¼Æ¬ÃüÃû¹æÔò */
    BYTE    bySaveToHD;        /*ÊÇ·ñ±£´æµ½Ó²ÅÌ*/
    BYTE    byRes1;
    WORD    wCatchInterval;        /*×¥Í¼¼ä¸ô(ºÁÃë)[0,65535]*/
    BYTE    byRes2[12];
    NET_DVR_SERIAL_CATCHPIC_PARA struRs232Cfg;
    NET_DVR_SERIAL_CATCHPIC_PARA struRs485Cfg;
    DWORD dwTriggerPicTimes[MAX_CHANNUM_V30];    /* Ã¿¸öÍ¨µÀÒ»´Î´¥·¢ÅÄÕÕ´ÎÊý */
    DWORD dwAlarmInPicChanTriggered[MAX_ALARMIN_V30]; /*±¨¾¯´¥·¢×¥ÅÄÍ¨µÀ,°´Î»ÉèÖÃ£¬´ÓµÚ1Î»¿ªÊ¼*/
}NET_DVR_JPEGCFG_V30, *LPNET_DVR_JPEGCFG_V30;

//×¥ÅÄ´¥·¢ÇëÇó½á¹¹(±£Áô)
typedef struct tagNET_DVR_MANUALSNAP
{
    BYTE   byOSDEnable;//0-²»¹Ø±Õ(Ä¬ÈÏ)£¬1-¹Ø±Õ
    BYTE   byLaneNo;//³µµÀºÅ, ·¶Î§Îª1-6£¬Ä¬ÈÏÎª1(×¥ÅÄ»úÄÚ²¿²âÊÔÊ¹ÓÃ)
    BYTE   byRes[22]; //±£Áô
}NET_DVR_MANUALSNAP, *LPNET_DVR_MANUALSNAP;

typedef struct tagNET_DVR_SPRCFG    
{
    DWORD dwSize; 
    BYTE byDefaultCHN[MAX_CHJC_NUM]; /*Éè±¸ÔËÐÐÊ¡·ÝµÄºº×Ö¼òÐ´*/
    BYTE byPlateOSD;    /*0:²»·¢ËÍ³µÅÆ²ÊÉ«Í¼,1:·¢ËÍ³µÅÆ²ÊÉ«Í¼*/
    BYTE bySendJPEG1;   /*0-²»´«ËÍ½ü¾°JPEGÍ¼,1-´«ËÍ½ü¾°JPEGÍ¼*/
    BYTE bySendJPEG2;   /*0-²»´«ËÍÔ¶¾°JPEGÍ¼,1-´«ËÍÔ¶¾°JPEGÍ¼*/
    WORD wDesignedPlateWidth;   /*³µÅÆÉè¼Æ¿í¶È*/
    BYTE byTotalLaneNum;  /*Ê¶±ðµÄ³µµÀÊý*/
    BYTE byRes1;      /*±£Áô*/
    WORD wRecognizedLane;  /*Ê¶±ðµÄ³µµÀºÅ£¬°´Î»±íÊ¾£¬bit0±íÊ¾³µµÀ1ÊÇ·ñÊ¶±ð£¬0-²»Ê¶±ð£¬1-Ê¶±ð*/
    NET_VCA_RECT struLaneRect[MAX_LANERECT_NUM];  /*³µµÀÊ¶±ðÇøÓò*/
                                                  DWORD dwRecogMode;  /*Ê¶±ðµÄÀàÐÍ£¬
                                                                      bit0-±³ÏòÊ¶±ð£º0-ÕýÏò³µÅÆÊ¶±ð£¬1-±³ÏòÊ¶±ð(Î²ÅÆÊ¶±ð) £» 
                                                                      bit1-´ó³µÅÆÊ¶±ð»òÐ¡³µÅÆÊ¶±ð£º0-Ð¡³µÅÆÊ¶±ð£¬1-´ó³µÅÆÊ¶±ð £»
                                                                      bit2-³µÉíÑÕÉ«Ê¶±ð£º0-²»²ÉÓÃ³µÉíÑÕÉ«Ê¶±ð£¬ÔÚ±³ÏòÊ¶±ð»òÐ¡³µÅÆÊ¶±ðÊ±½ûÖ¹ÆôÓÃ£¬1-³µÉíÑÕÉ«Ê¶±ð£»
                                                                      bit3-Å©ÓÃ³µÊ¶±ð£º0-²»²ÉÓÃÅ©ÓÃ³µÊ¶±ð£¬1-Å©ÓÃ³µÊ¶±ð£» 
                                                                      bit4-Ä£ºýÊ¶±ð£º0-²»²ÉÓÃÄ£ºýÊ¶±ð£¬1-Ä£ºýÊ¶±ð£»
                                                                      bit5-Ö¡¶¨Î»»ò³¡¶¨Î»£º0-Ö¡¶¨Î»£¬1-³¡¶¨Î»£»
                                                                      bit6-Ö¡Ê¶±ð»ò³¡Ê¶±ð£º0-Ö¡Ê¶±ð£¬1-³¡Ê¶±ð£» 
                                                  bit7-ÍíÉÏ»ò°×Ìì£º0-°×Ìì£¬1-ÍíÉÏ */
                                                  BYTE  bySendPRRaw;           //ÊÇ·ñ·¢ËÍÔ­Í¼£º0-²»·¢ËÍ£¬1-·¢ËÍ 
                                                  BYTE  bySendBinImage;      //ÊÇ·ñ·¢ËÍ³µÅÆ¶þÖµÍ¼£º0-²»·¢ËÍ£¬1-·¢ËÍ 
                                                  BYTE  byDelayCapture;  //ÑÓÊ±×¥ÅÄ¿ØÖÆ,µ¥Î»£ºÖ¡
                                                  BYTE  byUseLED;    //Ê¹ÓÃLED¿ØÖÆ£¬0-·ñ£¬1-ÊÇ
                                                  BYTE  byRes2[68];    //±£Áô
}NET_DVR_SPRCFG, *LPNET_DVR_SPRCFG;

typedef struct tagNET_DVR_PLCCFG
{
    DWORD dwSize;
    BYTE byPlcEnable;    //ÊÇ·ñÆôÓÃ³µÅÆÁÁ¶È²¹³¥£¨Ä¬ÈÏÆôÓÃ£©£º0-¹Ø±Õ£¬1-ÆôÓÃ 
    BYTE byPlateExpectedBright;    //³µÅÆµÄÔ¤ÆÚÁÁ¶È£¨Ä¬ÈÏÖµ50£©, ·¶Î§[0, 100]
    BYTE byRes1[2];    //±£Áô 
    BYTE byTradeoffFlash;     //ÊÇ·ñ¿¼ÂÇÉÁ¹âµÆµÄÓ°Ïì: 0 - ·ñ;  1 - ÊÇ(Ä¬ÈÏ); 
    //Ê¹ÓÃÉÁ¹âµÆ²¹¹âÊ±, Èç¹û¿¼ÂÇ¼õÈõÉÁ¹âµÆµÄÁÁ¶ÈÔöÇ¿Ð§Ó¦, ÔòÐèÒªÉèÎª1;·ñÔòÎª0
    BYTE byCorrectFactor;     //¾ÀÕýÏµÊý, ·¶Î§[0, 100], Ä¬ÈÏÖµ50 (ÔÚtradeoff_flashÇÐ»»Ê±,»Ö¸´Ä¬ÈÏÖµ£©
    WORD wLoopStatsEn;  //ÊÇ·ñ¸ÃÏßÈ¦µÄÁÁ¶È£¬°´Î»±íÊ¾£¬0-²»Í³¼Æ£¬1-Í³¼Æ
    BYTE byPlcBrightOffset;// ³µÅÆÁÁ¶È²¹³¥ÁéÃô¶È(ÐéÄâÏßÈ¦Ä£Ê½ÆðÐ§)£¬È¡Öµ·¶Î§1~100
    BYTE byRes[19];
}NET_DVR_PLCCFG, *LPNET_DVR_PLCCFG;

typedef struct tagNET_DVR_DEVICESTATECFG
{
    DWORD dwSize;
    WORD wPreviewNum; //Ô¤ÀÀÁ¬½Ó¸öÊý
    WORD wFortifyLinkNum; //²¼·ÀÁ¬½Ó¸öÊý
    NET_DVR_IPADDR struPreviewIP[MAX_LINK];  //Ô¤ÀÀµÄÓÃ»§IPµØÖ·
    NET_DVR_IPADDR struFortifyIP[MAX_FORTIFY_NUM]; //²¼·ÀÁ¬½ÓµÄÓÃ»§IPµØÖ·
    DWORD dwVideoFrameRate;    //Ö¡ÂÊ£º0-È«²¿; 1-1/16; 2-1/8; 3-1/4; 4-1/2; 5-1; 6-2; 7-4; 8-6; 9-8; 10-10; 11-12; 12-16; 13-20; 14-15; 15-18; 16-22;
    BYTE byResolution;      //·Ö±æÂÊ0-DCIF 1-CIF, 2-QCIF, 3-4CIF, 4-2CIF 5£¨±£Áô£©,16-VGA£¨640*480£©, 17-UXGA£¨1600*1200£©, 18-SVGA £¨800*600£©,19-HD720p£¨1280*720£©,20-XVGA,  21-HD900p, 27-HD1080i, 28-2560*1920, 29-1600*304, 30-2048*1536, 31-2448*2048
    BYTE bySnapResolution;      //×¥ÅÄ·Ö±æÂÊ0-DCIF 1-CIF, 2-QCIF, 3-4CIF, 4-2CIF 5£¨±£Áô£©,16-VGA£¨640*480£©, 17-UXGA£¨1600*1200£©, 18-SVGA £¨800*600£©,19-HD720p£¨1280*720£©,20-XVGA,  21-HD900p, 27-HD1080i, 28-2560*1920, 29-1600*304, 30-2048*1536, 31-2448*2048
    BYTE byStreamType; //´«ÊäÀàÐÍ£º0-Ö÷ÂëÁ÷£»1-×ÓÂëÁ÷
    BYTE byTriggerType; //´¥·¢Ä£Ê½£º0-ÊÓÆµ´¥·¢£»1-ÆÕÍ¨´¥·¢
    DWORD dwSDVolume;  //SD¿¨ÈÝÁ¿
    DWORD dwSDFreeSpace; //SD¿¨Ê£Óà¿Õ¼ä
    BYTE byDetectorState[MAX_DRIVECHAN_NUM][MAX_COIL_NUM];  //³µ¼ìÆ÷×´Ì¬£º0-Î´Ê¹ÓÃ£»1-Õý³££»2-Òì³£
    BYTE byDetectorLinkState; //³µ¼ìÆ÷Á¬½Ó×´Ì¬£º0-Î´Á¬½Ó£»1-Á¬½Ó
    BYTE bySDStatus;    //SD¿¨×´Ì¬ 0£­»î¶¯£»1£­ÐÝÃß£»2£­Òì³££¬3-ÎÞsd¿¨
    BYTE byFortifyLevel[MAX_FORTIFY_NUM]; //²¼·ÀµÈ¼¶£¬0-ÎÞ£¬1-Ò»µÈ¼¶£¨¸ß£©£¬2-¶þµÈ¼¶£¨ÖÐ£©£¬3-ÈýµÈ¼¶£¨µÍ£©
    BYTE byRes2[116]; //±£Áô
}NET_DVR_DEVICESTATECFG, *LPNET_DVR_DEVICESTATECFG;

typedef struct tagNET_DVR_POSTEPOLICECFG
{
    DWORD dwSize;
    DWORD dwDistance;//ÏßÈ¦¾àÀë,µ¥Î»cm£¬È¡Öµ·¶Î§[0,20000]
    DWORD dwLightChan[MAX_SIGNALLIGHT_NUM];    //ÐÅºÅµÆÍ¨µÀºÅ
    BYTE  byCapSpeed;//±êÖ¾ÏÞËÙ£¬µ¥Î»km/h£¬È¡Öµ·¶Î§[0,255]
    BYTE  bySpeedLimit;//ÏÞËÙÖµ£¬µ¥Î»km/h£¬È¡Öµ·¶Î§[0,255]
    BYTE  byTrafficDirection;//³µÁ÷·½Ïò£¬0-ÓÉ¶«ÏòÎ÷£¬1-ÓÉÎ÷Ïò¶«£¬2-ÓÉÄÏÏò±±£¬3-ÓÉ±±ÏòÄÏ
    BYTE  byRes1; //±£Áô
    WORD  wLoopPreDist;        /*´¥·¢ÑÓ³Ù¾àÀë £¬µ¥Î»£º·ÖÃ×*/
    WORD  wTrigDelay;             /*´¥·¢Ó²ÑÓÊ±Ê±¼ä £¬µ¥Î»£ººÁÃë*/
    BYTE  byRes[124];//±£Áô×Ö½Ú
}NET_DVR_POSTEPOLICECFG, *LPNET_DVR_POSTEPOLICECFG;


//ÐÅºÅµÆÒì³£¼ì²â
typedef struct  tagNET_DVR_SIGNALLAMP_DETCFG
{
    DWORD   dwSize;        //½á¹¹³¤¶È
    //¾ø¶ÔÊ±¼äµã,yyyymmddhhmmssxxx,e.g.20090810235959999  ×îºóÈýÎ»ÎªºÁÃëÊý
    BYTE    byAbsTime[32];    
    NET_DVR_IPADDR    struAlarmCamIP;//±¨¾¯ÉãÏñ»úIP
    DWORD   dwPic1Len;     //Òì³£Í¼Æ¬1³¤¶È
    DWORD   dwPic2Len;     //Òì³£Í¼Æ¬2³¤¶È
    char    *pPic1Buffer;    //Êý¾ÝÖ¸Õë  µþ¼Ó³µµÀÏßÍ¼Æ¬
    char    *pPic2Buffer;    //Êý¾ÝÖ¸Õë  µþ¼ÓÐÅºÅµÆ×´Ì¬Í¼Æ¬
    BYTE    byRes[128];
}NET_DVR_SIGNALLAMP_DETCFG, *LPNET_DVR_SIGNALLAMP_DETCFG;

typedef struct tagNET_DVR_EXDEVDET_COND
{
    DWORD         dwSize; // ½á¹¹Ìå´óÐ¡
    DWORD         dwChannel;                //Í¨µÀºÅ    
    BYTE          byExternalDevType;// 0-ÎÞÐ§Öµ£¨±£Áô£©1-ÐÅºÅµÆ,2-ÉÁ¹âµÆ
    BYTE          byRes[63];             // ±£Áô×Ö½Ú
}NET_DVR_EXDEVDET_COND,*LPNET_DVR_EXDEVDET_COND;

typedef struct tagNET_DVR_EXDEVDET_CFG
{
    DWORD         dwSize; // ½á¹¹Ìå´óÐ¡
    BYTE          byExternalDevStatus;// 0-Õý³£1-Òì³£
    BYTE          byRes[63];// ±£Áô×Ö½Ú
} NET_DVR_EXDEVDET_CFG,*LPNET_DVR_EXDEVDET_CFG;

/***************************** end *********************************************/

#define IPC_PROTOCOL_NUM      50   //ipc Ð­Òé×î´ó¸öÊý

//Ð­ÒéÀàÐÍ
typedef struct tagNET_DVR_PROTO_TYPE
{ 
    DWORD dwType;               /*ipcÐ­ÒéÖµ*/    
    BYTE  byDescribe[DESC_LEN]; /*Ð­ÒéÃèÊö×Ö¶Î*/    
}NET_DVR_PROTO_TYPE, *LPNET_DVR_PROTO_TYPE;

//Ð­ÒéÁÐ±í
typedef struct tagNET_DVR_IPC_PROTO_LIST
{    
    DWORD   dwSize; 
    DWORD   dwProtoNum;           /*ÓÐÐ§µÄipcÐ­ÒéÊýÄ¿*/   
    NET_DVR_PROTO_TYPE struProto[IPC_PROTOCOL_NUM];   /*ÓÐÐ§µÄipcÐ­Òé*/    
    BYTE    byRes[8];
}NET_DVR_IPC_PROTO_LIST, *LPNET_DVR_IPC_PROTO_LIST;

//Ð­ÒéÁÐ±íV41
typedef struct tagNET_DVR_IPC_PROTO_LIST_V41
{
    DWORD   dwSize;  
    DWORD   dwProtoNum;  //ÓÐÐ§µÄipcÐ­ÒéÊýÄ¿
    BYTE    *pBuffer;    //Ð­ÒéÁÐ±í»º³åÇø, dwProtoNum ¸öNET_DVR_PROTO_TYPE½á¹¹  
    DWORD   dwBufferLen; //»º³åÇø³¤¶È
    BYTE    byRes[32];   
}NET_DVR_IPC_PROTO_LIST_V41, *LPNET_DVR_IPC_PROTO_LIST_V41;

typedef struct tagNET_DVR_PTZPOS_INFO
{
    DWORD    dwPanPos;    // P²ÎÊý£¨Ë®Æ½²ÎÊý£©
    DWORD    dwTiltPos;    // T²ÎÊý£¨´¹Ö±²ÎÊý£©
    DWORD    dwZoomPos;  // Z²ÎÊý£¨±ä±¶²ÎÊý£©
}NET_DVR_PTZPOS_INFO, *LPNET_DVR_PTZPOS_INFO;

//ÈËÌåÌØÕ÷Ê¶±ð½á¹û½á¹¹Ìå
typedef struct tagNET_VCA_HUMAN_FEATURE
{
    BYTE byAgeGroup;    //ÄêÁä¶Î,²Î¼û HUMAN_AGE_GROUP_ENUM
    BYTE bySex;         //ÐÔ±ð, 1 - ÄÐ , 2 - Å®
    BYTE byEyeGlass;    //ÊÇ·ñ´÷ÑÛ¾µ 1 - ²»´÷, 2 - ´÷
    BYTE byRes [13];    //±£Áô
}NET_VCA_HUMAN_FEATURE ,*LPNET_VCA_HUMAN_FEATURE;

//ÎïÌåÑÕÉ«ÊôÐÔ
typedef struct tagNET_DVR_OBJECT_FEATURE
{
    BYTE  byColorRatel;            //ÑÕÉ«ÔÚÒÆ¶¯ÎïÌåÖÐµÄÕ¼±ÈãÐÖµ
    BYTE  byRed;                        // RGBÑÕÉ«Èý·ÖÁ¿ÖÐµÄºìÉ«
    BYTE  byGreen;                    // RGBÑÕÉ«Èý·ÖÁ¿ÖÐµÄÂÌÉ«
    BYTE  byBlue;                   // RGBÑÕÉ«Èý·ÖÁ¿ÖÐµÄÀ¼É«
    BYTE  byRes[32];
}NET_DVR_OBJECT_FEATURE ,*LPNET_DVR_OBJECT_FEATURE;

//×éºÏËÑË÷Ìõ¼þ
typedef union tagNET_DVR_ADVANCE_COND_UNION
{  
    BYTE                  byLen[36];  //ÁªºÏÌå³¤¶È
    NET_VCA_HUMAN_FEATURE      struHumanFeature; //ÈËÌåÊôÐÔ
    NET_DVR_OBJECT_FEATURE     struObjectFeature; //ÎïÌåÊôÐÔ
}NET_DVR_ADVANCE_COND_UNION,*LPNET_DVR_ADVANCE_COND_UNION;


#define MAX_ALERTLINE_NUM    8 //×î´ó¾¯½äÏßÌõÊý    


typedef struct tagNET_DVR_TRAVERSE_PLANE_SEARCHCOND
{    
    NET_VCA_TRAVERSE_PLANE struVcaTraversePlane[MAX_ALERTLINE_NUM/*8*/];  //´©Ô½¾³½çÃæ²ÎÊý
    DWORD dwPreTime;   /*ÖÇÄÜ±¨¾¯ÌáÇ°Ê±¼ä µ¥Î»:Ãë*/
    DWORD dwDelayTime; /*ÖÇÄÜ±¨¾¯ÑÓ³ÙÊ±¼ä µ¥Î»:Ãë*/ 
    NET_DVR_PTZPOS_INFO struPTZPosInfo;  //PTZ×ø±êÐÅÏ¢
    BYTE  byAdvanceType;   //×éºÏ·½Ê½£¬0-²»Ê¹ÓÃ×éºÅ£¬1-ºÍÈËÁ³ÊôÐÔ×éºÏ£¬2-ÓëÎïÌåÑÕÉ«Õ¼±È×éºÏ
    BYTE  byRes1[3];  //±£Áô
    NET_DVR_ADVANCE_COND_UNION uAdvanceCond;  //×éºÏÊôÐÔ
    BYTE  byRes[5604]; //±£Áô
}NET_DVR_TRAVERSE_PLANE_SEARCHCOND, *LPNET_DVR_TRAVERSE_PLANE_SEARCHCOND; //Ô½½çÕì²â²éÑ¯Ìõ¼þ

#define MAX_INTRUSIONREGION_NUM    8 //×î´óÇøÓòÊýÊý
typedef struct tagNET_DVR_INTRUSION_SEARCHCOND  
{
    NET_VCA_INTRUSION struVcaIntrusion[MAX_INTRUSIONREGION_NUM/*8*/]; //ÈëÇÖÇøÓò
    DWORD dwPreTime;   /*ÖÇÄÜ±¨¾¯ÌáÇ°Ê±¼ä µ¥Î»:Ãë*/
    DWORD dwDelayTime; /*ÖÇÄÜ±¨¾¯ÑÓ³ÙÊ±¼ä µ¥Î»:Ãë*/ 
    NET_DVR_PTZPOS_INFO struPTZPosInfo;  //PTZ×ø±êÐÅÏ¢
    BYTE  byAdvanceType;//×éºÏ·½Ê½£¬0-²»Ê¹ÓÃ×éºÅ£¬1-ºÍÈËÁ³ÊôÐÔ×éºÏ£¬2-ÓëÎïÌåÑÕÉ«Õ¼±È×éºÏ
    BYTE  byRes1[3];  //±£Áô
    NET_DVR_ADVANCE_COND_UNION uAdvanceCond;  //×éºÏÊôÐÔ
    BYTE byRes[5348]; //±£Áô
} NET_DVR_INTRUSION_SEARCHCOND, *LPNET_DVR_INTRUSION_SEARCHCOND; //ÇøÓòÈëÇÖ


typedef struct tagNET_DVR_FACEDETECTION_SEARCHCOND
{
    NET_VCA_POLYGON  struFacePolygon; //Ê¶±ðÇøÓò
    DWORD           dwPreTime;   /*ÖÇÄÜÂ¼ÏñÌáÇ°Ê±¼ä µ¥Î»:Ãë*/
    DWORD           dwDelayTime; /*ÖÇÄÜÂ¼ÏñÑÓ³ÙÊ±¼ä µ¥Î»:Ãë*/
    BYTE byRes[5972]; //±£Áô
}NET_DVR_FACEDETECTION_SEARCHCOND, *LPNET_DVR_FACEDETECTION_SEARCHCOND; //ÈËÁ³¼ì²â


typedef union tagNET_DVR_AREA_SMARTSEARCH_COND_UNION
{  
    BYTE    byLen[6144];  //½á¹¹Ìå³¤¶È
    BYTE    byMotionScope[64][96]; //Õì²âÇøÓò 0-96Î»±íÊ¾64ÐÐ£¬¹²ÓÐ96*64¸öÐ¡ºê¿é£¬1-ÊÇÒÆ¶¯Õì²âÇøÓò£¬0-·ÇÒÆ¶¯Õì²âÇøÓò 
    NET_DVR_TRAVERSE_PLANE_SEARCHCOND struTraversPlaneCond; //Ô½½çÕì²â
    NET_DVR_INTRUSION_SEARCHCOND struIntrusionCond; //ÇøÓòÈëÇÖ
    NET_DVR_FACEDETECTION_SEARCHCOND struFaceSnapCond; //ÈËÁ³Õì²âÌõ¼þ
}NET_DVR_AREA_SMARTSEARCH_COND_UNION,
*LPNET_DVR_AREA_SMARTSEARCH_COND_UNION;


//ÖÇÄÜËÑË÷²ÎÊý
typedef struct tagNET_DVR_SMART_SEARCH_PARAM
{
    BYTE      byChan;                    //Í¨µÀºÅ
    BYTE      bySearchCondType; //ÖÇÄÜ²éÕÒÁªºÏÌåNET_DVR_AREA_SMARTSEARCH_COND_UNIONµÄË÷Òý     
    /*0-ÒÆ¶¯Õì²âÇøÓò £¬1-Ô½½çÕì²â£¬ 2-ÇøÓòÈëÇÖ, 3-ÈËÁ³Õì²â */
    WORD      wChan;                //Í¨µÀºÅ£¬ ¸Ã×Ö¶ÎÊÇ¶ÔbyChanµÄÀ©Õ¹£¬Ê¹ÓÃ¸Ã×Ö¶ÎºóbyChan¿ÉÒÔ²»ÔÙÊ¹ÓÃ
    NET_DVR_TIME struStartTime;        //Â¼Ïñ¿ªÊ¼µÄÊ±¼ä
    NET_DVR_TIME struEndTime;        //Â¼ÏñÍ£Ö¹µÄÊ±¼ä
    NET_DVR_AREA_SMARTSEARCH_COND_UNION uSmartSearchCond;  //ÖÇÄÜ²éÕÒÌõ¼þ
    BYTE  bySensitivity;               //ÒÆ¶¯Õì²âËÑË÷ÁéÃô¶È,1    >80%  2 40%~80%  3 1%~40%    
    BYTE byRes2[11];
}NET_DVR_SMART_SEARCH_PARAM, *LPNET_DVR_SMART_SEARCH_PARAM;

typedef struct tagNET_DVR_SMART_SEARCH_PARAM_V40
{  
    DWORD                   dwSize;                 //½á¹¹Ìå´óÐ¡
    NET_DVR_STREAM_INFO   struIDInfo;           //Í¨µÀÐÅÏ¢
    BYTE                   bySearchCondType;     //ÖÇÄÜ²éÕÒÁªºÏÌåË÷Òý 0-Õì²âÇøÓò, 1-Ô½½çÕì²â, 2-ÇøÓòÈëÇÖ,3-ÈËÁ³Õì²â, 4-³µÅÆ¼ì²â
    BYTE                  bySensitivity; //Õì²âÇøÓò¶¯Ì¬·ÖÎöÁéÃô¶È,1-100
    BYTE                  byRes1[2];
    NET_DVR_TIME_EX       struStartTime;  
    NET_DVR_TIME_EX       struEndTime;
    NET_DVR_AREA_SMARTSEARCH_COND_UNION uSmartSearchCond;  //ÖÇÄÜ²éÕÒÌõ¼þ
    BYTE                  byRes2[256];
}NET_DVR_SMART_SEARCH_PARAM_V40,*LPNET_DVR_SMART_SEARCH_PARAM_V40;



typedef struct tagNET_DVR_SMART_SEARCH_RET
{
    NET_DVR_TIME struStartTime;    //ÒÆ¶¯Õì²â±¨¾¯¿ªÊ¼µÄÊ±¼ä
    NET_DVR_TIME struEndTime;   //ÊÂ¼þÍ£Ö¹µÄÊ±¼ä
    BYTE byRes[64];
}NET_DVR_SMART_SEARCH_RET, *LPNET_DVR_SMART_SEARCH_RET;

// IPSAN ÎÄ¼þÄ¿Â¼²éÕÒ
typedef struct tagNET_DVR_IPSAN_SERACH_PARAM
{
    NET_DVR_IPADDR  struIP;     // IPSAN IPµØÖ·
    WORD            wPort;      // IPSAN  ¶Ë¿Ú
    BYTE            byRes[10];  // ±£Áô×Ö½Ú
}NET_DVR_IPSAN_SERACH_PARAM, *LPNET_DVR_IPSAN_SERACH_PARAM;

typedef struct tagNET_DVR_IPSAN_SERACH_RET
{
    BYTE byDirectory[128];  // ·µ»ØµÄÎÄ¼þÄ¿Â¼
    BYTE byRes[20];
}NET_DVR_IPSAN_SERACH_RET, *LPNET_DVR_IPSAN_SERACH_RET;

//DVRÉè±¸²ÎÊý
typedef struct
{
    DWORD dwSize;
    BYTE sDVRName[NAME_LEN];     //DVRÃû³Æ
    DWORD dwDVRID;                //DVR ID,ÓÃÓÚÒ£¿ØÆ÷ //V1.4(0-99), V1.5(0-255)
    DWORD dwRecycleRecord;        //ÊÇ·ñÑ­»·Â¼Ïñ,0:²»ÊÇ; 1:ÊÇ
    //ÒÔÏÂ²»¿É¸ü¸Ä
    BYTE sSerialNumber[SERIALNO_LEN];  //ÐòÁÐºÅ
    DWORD dwSoftwareVersion;            //Èí¼þ°æ±¾ºÅ,¸ß16Î»ÊÇÖ÷°æ±¾,µÍ16Î»ÊÇ´Î°æ±¾
    DWORD dwSoftwareBuildDate;            //Èí¼þÉú³ÉÈÕÆÚ,0xYYYYMMDD
    DWORD dwDSPSoftwareVersion;            //DSPÈí¼þ°æ±¾,¸ß16Î»ÊÇÖ÷°æ±¾,µÍ16Î»ÊÇ´Î°æ±¾
    DWORD dwDSPSoftwareBuildDate;        // DSPÈí¼þÉú³ÉÈÕÆÚ,0xYYYYMMDD
    DWORD dwPanelVersion;                // Ç°Ãæ°å°æ±¾,¸ß16Î»ÊÇÖ÷°æ±¾,µÍ16Î»ÊÇ´Î°æ±¾
    DWORD dwHardwareVersion;    // Ó²¼þ°æ±¾,¸ß16Î»ÊÇÖ÷°æ±¾,µÍ16Î»ÊÇ´Î°æ±¾
    BYTE byAlarmInPortNum;        //DVR±¨¾¯ÊäÈë¸öÊý
    BYTE byAlarmOutPortNum;        //DVR±¨¾¯Êä³ö¸öÊý
    BYTE byRS232Num;            //DVR 232´®¿Ú¸öÊý
    BYTE byRS485Num;            //DVR 485´®¿Ú¸öÊý 
    BYTE byNetworkPortNum;        //ÍøÂç¿Ú¸öÊý
    BYTE byDiskCtrlNum;            //DVR Ó²ÅÌ¿ØÖÆÆ÷¸öÊý
    BYTE byDiskNum;                //DVR Ó²ÅÌ¸öÊý
    BYTE byDVRType;                //DVRÀàÐÍ, 1:DVR 2:ATM DVR 3:DVS ......
    BYTE byChanNum;                //DVR Í¨µÀ¸öÊý
    BYTE byStartChan;            //ÆðÊ¼Í¨µÀºÅ,ÀýÈçDVS-1,DVR - 1
    BYTE byDecordChans;            //DVR ½âÂëÂ·Êý
    BYTE byVGANum;                //VGA¿ÚµÄ¸öÊý 
    BYTE byUSBNum;                //USB¿ÚµÄ¸öÊý
    BYTE byAuxoutNum;            //¸¨¿ÚµÄ¸öÊý
    BYTE byAudioNum;            //ÓïÒô¿ÚµÄ¸öÊý
    BYTE byIPChanNum;            //×î´óÊý×ÖÍ¨µÀÊý µÍ8Î»£¬¸ß8Î»¼ûbyHighIPChanNum 
    BYTE byZeroChanNum;            //ÁãÍ¨µÀ±àÂë¸öÊý
    BYTE bySupport;        //ÄÜÁ¦£¬Î»Óë½á¹ûÎª0±íÊ¾²»Ö§³Ö£¬1±íÊ¾Ö§³Ö£¬
    //bySupport & 0x1, ±íÊ¾ÊÇ·ñÖ§³ÖÖÇÄÜËÑË÷
    //bySupport & 0x2, ±íÊ¾ÊÇ·ñÖ§³Ö±¸·Ý
    //bySupport & 0x4, ±íÊ¾ÊÇ·ñÖ§³ÖÑ¹Ëõ²ÎÊýÄÜÁ¦»ñÈ¡
    //bySupport & 0x8, ±íÊ¾ÊÇ·ñÖ§³Ö¶àÍø¿¨
    //bySupport & 0x10, ±íÊ¾Ö§³ÖÔ¶³ÌSADP
    //bySupport & 0x20, ±íÊ¾Ö§³ÖRaid¿¨¹¦ÄÜ
    //bySupport & 0x40, ±íÊ¾Ö§³ÖIPSANËÑË÷
    //bySupport & 0x80, ±íÊ¾Ö§³Örtp over rtsp
    BYTE byEsataUseage;        //EsataµÄÄ¬ÈÏÓÃÍ¾£¬0-Ä¬ÈÏ±¸·Ý£¬1-Ä¬ÈÏÂ¼Ïñ
    BYTE byIPCPlug;            //0-¹Ø±Õ¼´²å¼´ÓÃ£¬1-´ò¿ª¼´²å¼´ÓÃ
    BYTE byStorageMode;        //0-ÅÌ×éÄ£Ê½,1-´ÅÅÌÅä¶î, 2³éÖ¡Ä£Ê½
    BYTE bySupport1;        //ÄÜÁ¦£¬Î»Óë½á¹ûÎª0±íÊ¾²»Ö§³Ö£¬1±íÊ¾Ö§³Ö
    //bySupport1 & 0x1, ±íÊ¾ÊÇ·ñÖ§³Ösnmp v30
    //bySupport1 & 0x2, Ö§³ÖÇø·Ö»Ø·ÅºÍÏÂÔØ
    //bySupport1 & 0x4, ÊÇ·ñÖ§³Ö²¼·ÀÓÅÏÈ¼¶    
    //bySupport1 & 0x8, ÖÇÄÜÉè±¸ÊÇ·ñÖ§³Ö²¼·ÀÊ±¼ä¶ÎÀ©Õ¹
    //bySupport1 & 0x10, ±íÊ¾ÊÇ·ñÖ§³Ö¶à´ÅÅÌÊý£¨³¬¹ý33¸ö£©
    //bySupport1 & 0x20, ±íÊ¾ÊÇ·ñÖ§³Örtsp over http    
    WORD wDevType;//Éè±¸ÐÍºÅ
    BYTE  byDevTypeName[DEV_TYPE_NAME_LEN];//Éè±¸ÐÍºÅÃû³Æ 
    BYTE bySupport2; //ÄÜÁ¦¼¯À©Õ¹£¬Î»Óë½á¹ûÎª0±íÊ¾²»Ö§³Ö£¬1±íÊ¾Ö§³Ö
    //bySupport2 & 0x1, ±íÊ¾ÊÇ·ñÖ§³ÖÀ©Õ¹µÄOSD×Ö·ûµþ¼Ó(ÖÕ¶ËºÍ×¥ÅÄ»úÀ©Õ¹Çø·Ö)
    BYTE byAnalogAlarmInPortNum; //Ä£Äâ±¨¾¯ÊäÈë¸öÊý
    BYTE byStartAlarmInNo;    //Ä£Äâ±¨¾¯ÊäÈëÆðÊ¼ºÅ
    BYTE byStartAlarmOutNo;  //Ä£Äâ±¨¾¯Êä³öÆðÊ¼ºÅ
    BYTE  byStartIPAlarmInNo;  //IP±¨¾¯ÊäÈëÆðÊ¼ºÅ
    BYTE  byStartIPAlarmOutNo; //IP±¨¾¯Êä³öÆðÊ¼ºÅ
    BYTE byHighIPChanNum;      //Êý×ÖÍ¨µÀ¸öÊý£¬¸ß8Î» 
    BYTE byEnableRemotePowerOn;//ÊÇ·ñÆôÓÃÔÚÉè±¸ÐÝÃßµÄ×´Ì¬ÏÂÔ¶³Ì¿ª»ú¹¦ÄÜ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    WORD wDevClass; //Éè±¸´óÀà±¸ÊÇÊôÓÚÄÄ¸ö²úÆ·Ïß£¬0 ±£Áô£¬1-50 DVR£¬51-100 DVS£¬101-150 NVR£¬151-200 IPC£¬65534 ÆäËû£¬¾ßÌå·ÖÀà·½·¨¼û¡¶Éè±¸ÀàÐÍ¶ÔÓ¦ÐòÁÐºÅºÍÀàÐÍÖµ.docx¡·
    BYTE byRes2[6];	//±£Áô
}NET_DVR_DEVICECFG_V40, *LPNET_DVR_DEVICECFG_V40;

#define MAX_ZEROCHAN_NUM    16
//ÁãÍ¨µÀÑ¹ËõÅäÖÃ²ÎÊý
typedef struct tagNET_DVR_ZEROCHANCFG
{
    DWORD dwSize;            //½á¹¹³¤¶È
    BYTE  byEnable;            //0-Í£Ö¹ÁãÍ¨µÀ±àÂë£¬1-±íÊ¾ÆôÓÃÁãÍ¨µÀ±àÂë
    BYTE  byRes1[3];            //±£Áô
    DWORD dwVideoBitrate;     //ÊÓÆµÂëÂÊ 0-±£Áô 1-16K(±£Áô) 2-32K 3-48k 4-64K 5-80K 6-96K 7-128K 8-160k 9-192K 10-224K 11-256K 12-320K
    // 13-384K 14-448K 15-512K 16-640K 17-768K 18-896K 19-1024K 20-1280K 21-1536K 22-1792K 23-2048K
    //×î¸ßÎ»(31Î»)ÖÃ³É1±íÊ¾ÊÇ×Ô¶¨ÒåÂëÁ÷, 0-30Î»±íÊ¾ÂëÁ÷Öµ(MIN-32K MAX-8192K)¡£
    DWORD dwVideoFrameRate;    //Ö¡ÂÊ 0-È«²¿; 1-1/16; 2-1/8; 3-1/4; 4-1/2; 5-1; 6-2; 7-4; 8-6; 9-8; 10-10; 11-12; 12-16; 13-20, //V2.0Ôö¼Ó14-15, 15-18, 16-22;
    BYTE  byRes2[32];        //±£Áô
}NET_DVR_ZEROCHANCFG, *LPNET_DVR_ZEROCHANCFG;

//ÁãÍ¨µÀËõ·Å²ÎÊý
typedef struct tagNET_DVR_ZERO_ZOOMCFG
{
    DWORD dwSize;                //½á¹¹³¤¶È
    NET_VCA_POINT  struPoint;    //»­ÃæÖÐµÄ×ø±êµã
    BYTE byState;                //ÏÖÔÚµÄ×´Ì¬£¬0-ËõÐ¡£¬1-·Å´ó  
    BYTE byPreviewNumber;       //Ô¤ÀÀÊýÄ¿,0-1»­Ãæ,1-4»­Ãæ,2-9»­Ãæ,3-16»­Ãæ ¸Ã²ÎÊýÖ»¶Á
    BYTE byPreviewSeq[MAX_WINDOW_V30];//»­ÃæÍ¨µÀÐÅÏ¢ ¸Ã²ÎÊýÖ»¶Á
    BYTE byRes[30];                //±£Áô 
}NET_DVR_ZERO_ZOOMCFG, *LPNET_DVR_ZERO_ZOOMCFG;

#define DESC_LEN_64 64
typedef struct tagNET_DVR_SNMPCFG
{
    DWORD   dwSize;            //½á¹¹³¤¶È
    BYTE    byEnable;            //0-½ûÓÃSNMP£¬1-±íÊ¾ÆôÓÃSNMP
    BYTE    byRes1[3];            //±£Áô
    WORD    wVersion;        //snmp °æ±¾  v1 = 1, v2 =2, v3 =3£¬Éè±¸Ä¿Ç°²»Ö§³Ö v3
    WORD    wServerPort; //snmpÏûÏ¢½ÓÊÕ¶Ë¿Ú£¬Ä¬ÈÏ 161
    BYTE    byReadCommunity[NAME_LEN]; //¶Á¹²Í¬Ìå£¬×î¶à31,Ä¬ÈÏ"public"
    BYTE    byWriteCommunity[NAME_LEN];//Ð´¹²Í¬Ìå,×î¶à31 ×Ö½Ú,Ä¬ÈÏ "private"
    BYTE     byTrapHostIP [DESC_LEN_64];    //×ÔÏÝÖ÷»úipµØÖ·ÃèÊö£¬Ö§³ÖIPV4 IPV6ºÍÓòÃûÃèÊö    
    WORD    wTrapHostPort;   // trapÖ÷»ú¶Ë¿Ú
    BYTE    byTrapName[NAME_LEN];    
    BYTE    byRes2[70];    //±£Áô
}NET_DVR_SNMPCFG, *LPNET_DVR_SNMPCFG;

typedef struct tagNET_DVR_SNMPv3_USER
{
    BYTE    byUserName[NAME_LEN];            // ÓÃ»§Ãû                
    BYTE    bySecLevel;                        // °²È«¼¶±ð 1-ÎÞÐ£Ñé 2-ÎÞÊÚÈ¨Ð£Ñé 3-ÊÚÈ¨Ð£Ñé
    BYTE    byAuthtype;                        // ÈÏÖ¤ÀàÐÍ 0-MD5ÈÏÖ¤ 1-SHAÈÏÖ¤ 2: none
    BYTE    byPrivtype;                        // 0: DES; 1: AES; 2: none;
    BYTE    byRes[5];
    BYTE    byAuthpass[PASSWD_LEN];            // ÈÏÖ¤ÃÜÂë
    BYTE    byPrivpass[PASSWD_LEN];            // ¼ÓÃÜÃÜÂë
}NET_DVR_SNMPv3_USER, *LPNET_DVR_SNMPv3_USER;

// snmpv30
typedef struct tagNET_DVR_SNMPCFG_V30
{
    DWORD                dwSize;            //½á¹¹³¤¶È
    BYTE                byEnableV1;        //0-½ûÓÃSNMP V1£¬1-±íÊ¾ÆôÓÃSNMP V1
    BYTE                byEnableV2;        //0-½ûÓÃSNMP V2£¬1-±íÊ¾ÆôÓÃSNMP V2
    BYTE                byEnableV3;        //0-½ûÓÃSNMP V3£¬1-±íÊ¾ÆôÓÃSNMP V3
    BYTE                byRes1[3];
    WORD                wServerPort;                    //snmpÏûÏ¢½ÓÊÕ¶Ë¿Ú£¬Ä¬ÈÏ 161
    BYTE                byReadCommunity[NAME_LEN];        //¶Á¹²Í¬Ìå£¬×î¶à31,Ä¬ÈÏ"public"
    BYTE                byWriteCommunity[NAME_LEN];        //Ð´¹²Í¬Ìå,×î¶à31 ×Ö½Ú,Ä¬ÈÏ "private"
    BYTE                 byTrapHostIP [DESC_LEN_64];        //×ÔÏÝÖ÷»úipµØÖ·ÃèÊö£¬Ö§³ÖIPV4 IPV6ºÍÓòÃûÃèÊö    
    WORD                wTrapHostPort;                    // trapÖ÷»ú¶Ë¿Ú
    BYTE                byRes2[2];       
    NET_DVR_SNMPv3_USER    struRWUser;    // ¶ÁÐ´ÓÃ»§
    NET_DVR_SNMPv3_USER    struROUser;    // Ö»¶ÁÓÃ»§
    BYTE                byTrapName[NAME_LEN];
}NET_DVR_SNMPCFG_V30, *LPNET_DVR_SNMPCFG_V30;

#define  PROCESSING          0     //ÕýÔÚ´¦Àí
#define  PROCESS_SUCCESS     100   //¹ý³ÌÍê³É
#define  PROCESS_EXCEPTION   400   //¹ý³ÌÒì³£
#define  PROCESS_FAILED      500   //¹ý³ÌÊ§°Ü
#define  PROCESS_QUICK_SETUP_PD_COUNT 501 //Ò»¼üÅäÖÃÖÁÉÙ3¿éÓ²ÅÌ

#define  SOFTWARE_VERSION_LEN 48
typedef struct tagNET_DVR_SADPINFO
{
    NET_DVR_IPADDR  struIP;     // Éè±¸IPµØÖ·
    WORD            wPort;      // Éè±¸¶Ë¿ÚºÅ
    WORD            wFactoryType;   // Éè±¸³§¼ÒÀàÐÍ
    char            chSoftwareVersion[SOFTWARE_VERSION_LEN];
    char            chSerialNo[16]; // ÐòÁÐºÅ
    WORD            wEncCnt;       // ±àÂëÍ¨µÀ¸öÊý
    BYTE            byMACAddr[MACADDR_LEN];        // MAC µØÖ·
    NET_DVR_IPADDR  struSubDVRIPMask;   // DVR IPµØÖ·ÑÚÂë
    NET_DVR_IPADDR  struGatewayIpAddr;  // Íø¹Ø
    NET_DVR_IPADDR    struDnsServer1IpAddr;            /* ÓòÃû·þÎñÆ÷1µÄIPµØÖ· */
    NET_DVR_IPADDR    struDnsServer2IpAddr;            /* ÓòÃû·þÎñÆ÷2µÄIPµØÖ· */
    BYTE            byDns;
    BYTE            byDhcp;
    BYTE            szGB28181DevID[DEV_ID_LEN];  //GB28181Ð­Òé½ÓÈëÊ±µÄÉè±¸ID£¬ÓÃÓÚIPCÒÔGB28181Ð­Òé½ÓÈë
    BYTE            byActivated;//0-ÎÞÐ§£¬1-ÒÑ¼¤»î£¬2-Î´¼¤»î
    BYTE            byRes[125];     // ±£Áô×Ö½Ú
}NET_DVR_SADPINFO, *LPNET_DVR_SADPINFO;

#define  MAX_SADP_NUM   256   // ËÑË÷µ½Éè±¸×î´óÊýÄ¿
typedef struct tagNET_DVR_SADPINFO_LIST
{
    DWORD            dwSize;   //  ½á¹¹´óÐ¡
    WORD             wSadpNum;   // ËÑË÷µ½Éè±¸ÊýÄ¿
    BYTE             byRes[6];   // ±£Áô×Ö½Ú
    NET_DVR_SADPINFO struSadpInfo[MAX_SADP_NUM]; // ËÑË÷
}NET_DVR_SADPINFO_LIST, *LPNET_DVR_SADPINFO_LIST;

typedef struct tagNET_DVR_SADP_VERIFY
{
    char chPassword[PASSWD_LEN];
    NET_DVR_IPADDR struOldIP;
    WORD        wOldPort;
    BYTE        byRes[62];
}NET_DVR_SADP_VERIFY, *LPNET_DVR_SADP_VERIFY;

/*******************************±¸·Ý½Ó¿Ú begin********************************/
//»ñÈ¡±¸·ÝÉè±¸ÐÅÏ¢½Ó¿Ú¶¨Òå
#define DESC_LEN_32          32   //ÃèÊö×Ö³¤¶È
#define MAX_NODE_NUM         256  //½Úµã¸öÊý

typedef struct tagNET_DVR_DESC_NODE
{ 
    int   iValue;           
    BYTE  byDescribe[DESC_LEN_32]; //ÃèÊö×Ö¶Î 
    DWORD dwFreeSpace;           //»ñÈ¡´ÅÅÌÁÐ±í×¨ÓÃ,µ¥Î»ÎªM
    BYTE  byRes[12];              //±£Áô  
}NET_DVR_DESC_NODE, *LPNET_DVR_DESC_NODE;

typedef struct tagNET_DVR_DISKABILITY_LIST
{ 
    DWORD     dwSize;            //½á¹¹³¤¶È
    DWORD     dwNodeNum;         //ÄÜÁ¦½áµã¸öÊý
    NET_DVR_DESC_NODE  struDescNode[MAX_NODE_NUM];  //ÃèÊö²ÎÊý  
}NET_DVR_DISKABILITY_LIST, *LPNET_DVR_DISKABILITY_LIST;

//±¸·Ý½ø¶ÈÁÐ±í
#define BACKUP_SUCCESS                100  //±¸·ÝÍê³É
#define BACKUP_CHANGE_DEVICE          101  //±¸·ÝÉè±¸ÒÑÂú£¬¸ü»»Éè±¸¼ÌÐø±¸·Ý

#define BACKUP_SEARCH_DEVICE          300  //ÕýÔÚËÑË÷±¸·ÝÉè±¸
#define BACKUP_SEARCH_FILE            301  //ÕýÔÚËÑË÷Â¼ÏñÎÄ¼þ
#define BACKUP_SEARCH_LOG_FILE        302  //ÕýÔÚËÑË÷ÈÕÖ¾ÎÄ¼þ

#define BACKUP_EXCEPTION              400  //±¸·ÝÒì³£
#define BACKUP_FAIL                      500  //±¸·ÝÊ§°Ü

#define BACKUP_TIME_SEG_NO_FILE       501  //Ê±¼ä¶ÎÄÚÎÞÂ¼ÏñÎÄ¼þ
#define BACKUP_NO_RESOURCE            502  //ÉêÇë²»µ½×ÊÔ´
#define BACKUP_DEVICE_LOW_SPACE       503  //±¸·ÝÉè±¸ÈÝÁ¿²»×ã
#define BACKUP_DISK_FINALIZED         504  //¿ÌÂ¼¹âÅÌ·âÅÌ
#define BACKUP_DISK_EXCEPTION         505  //¿ÌÂ¼¹âÅÌÒì³£
#define BACKUP_DEVICE_NOT_EXIST       506  //±¸·ÝÉè±¸²»´æÔÚ
#define BACKUP_OTHER_BACKUP_WORK      507  //ÓÐÆäËû±¸·Ý²Ù×÷ÔÚ½øÐÐ
#define BACKUP_USER_NO_RIGHT          508  //ÓÃ»§Ã»ÓÐ²Ù×÷È¨ÏÞ
#define BACKUP_OPERATE_FAIL           509  //²Ù×÷Ê§°Ü
#define BACKUP_NO_LOG_FILE            510  //Ó²ÅÌÖÐÎÞÈÕÖ¾

//±¸·Ý¹ý³Ì½Ó¿Ú¶¨Òå
typedef struct tagNET_DVR_BACKUP_NAME_PARAM
{
    DWORD dwFileNum;   //ÎÄ¼þ¸öÊý
    NET_DVR_FINDDATA_V30 struFileList[MAX_RECORD_FILE_NUM]; //ÎÄ¼þÁÐ±í
    BYTE byDiskDes[DESC_LEN_32];   //±¸·Ý´ÅÅÌÃèÊö
    BYTE byWithPlayer;      //ÊÇ·ñ±¸·Ý²¥·ÅÆ÷
    BYTE byContinue;    /*ÊÇ·ñ¼ÌÐø±¸·Ý 0²»¼ÌÐø 1¼ÌÐø*/
    BYTE byRes[34];         //±£Áô
}NET_DVR_BACKUP_NAME_PARAM, *LPNET_DVR_BACKUP_NAME_PARAM;

typedef struct tagNET_DVR_BACKUP_TIME_PARAM
{
    LONG            lChannel;        //°´Ê±¼ä±¸·ÝµÄÍ¨µÀ
    NET_DVR_TIME    struStartTime;   //±¸·ÝµÄÆðÊ¼Ê±¼ä
    NET_DVR_TIME    struStopTime;    //±¸·ÝµÄÖÕÖ¹Ê±¼ä
    BYTE            byDiskDes[DESC_LEN_32];     //±¸·Ý´ÅÅÌÃèÊö
    BYTE            byWithPlayer;               //ÊÇ·ñ±¸·Ý²¥·ÅÆ÷
    BYTE            byContinue;                 //ÊÇ·ñ¼ÌÐø±¸·Ý 0²»¼ÌÐø 1¼ÌÐø
    BYTE            byDrawFrame;                 //0 ²»³éÖ¡  1 ³éÖ¡
    BYTE            byUseBackCfgParam;          //Ê¹ÓÃ±¸·ÝÅäÖÃÖÐµÄ²ÎÊý£¬0-ÎÞÐ§£¬1-ÆôÓÃ(ÆôÓÃºó£¬Í¨µÀºÅÎÞÐ§)£¬2-²»ÆôÓÃ
    DWORD           dwStreamType;                //±¸·ÝÂëÁ÷ÀàÐÍ£¬°´Î»±íÊ¾
    //&0x1-±íÊ¾Ö÷ÂëÁ÷ 
    //&0x2-±íÊ¾×ÓÂëÁ÷
    //&0x4-±íÊ¾ÂëÁ÷Èý
    BYTE            byRes[28];                     // ±£Áô×Ö½Ú 
}NET_DVR_BACKUP_TIME_PARAM, *LPNET_DVR_BACKUP_TIME_PARAM;
/********************************* end *******************************************/

typedef enum _COMPRESSION_ABILITY_TYPE_
{
    COMPRESSION_STREAM_ABILITY = 0, //ÂëÁ÷Ñ¹ËõÀàÐÍ
        MAIN_RESOLUTION_ABILITY = 1,    //Ö÷ÂëÁ÷Ñ¹Ëõ·Ö±æÂÊ
        SUB_RESOLUTION_ABILITY  = 2,    //×ÓÂëÁ÷Ñ¹Ëõ·Ö±æÂÊ
        EVENT_RESOLUTION_ABILITY =  3,  //ÊÂ¼þÑ¹Ëõ²ÎÊý·Ö±æÂÊ
        FRAME_ABILITY = 4,                //Ö¡ÂÊÄÜÁ¦
        BITRATE_TYPE_ABILITY = 5,        //Î»ÂÊÀàÐÍÄÜÁ¦
        BITRATE_ABILITY = 6,            //Î»ÂÊÉÏÏÞ
        THIRD_RESOLUTION_ABILITY = 7,   //ÈýÂëÁ÷Ñ¹Ëõ·Ö±æÂÊ
        STREAM_TYPE_ABILITY = 8,        //ÂëÁ÷ÀàÐÍ
        PIC_QUALITY_ABILITY = 9,         //Í¼ÏñÖÊÁ¿
        INTERVAL_BPFRAME_ABILITY = 10,  //BPÖ¡¼ä¸ô
        VIDEO_ENC_ABILITY = 11,           //ÊÓÆµ±àÂëÄÜÁ¦
        AUDIO_ENC_ABILITY = 12,           //ÒôÆµ±àÂëÄÜÁ¦
        VIDEO_ENC_COMPLEXITY_ABILITY = 13, //ÊÓÆµ±àÂë¸´ÔÓ¶ÈÄÜÁ¦
        FORMAT_ABILITY = 14, //·â×°¸ñÊ½ÄÜÁ¦
}COMPRESSION_ABILITY_TYPE;

//ÄÜÁ¦ÁÐ±í
typedef struct tagNET_DVR_ABILITY_LIST
{ 
    DWORD     dwAbilityType;    //ÄÜÁ¦ÀàÐÍ COMPRESSION_ABILITY_TYPE
    BYTE      byRes[32];        //±£Áô×Ö½Ú
    DWORD     dwNodeNum;        //ÄÜÁ¦½áµã¸öÊý
    NET_DVR_DESC_NODE  struDescNode[MAX_NODE_NUM];  //ÃèÊö²ÎÊý  
}NET_DVR_ABILITY_LIST, *LPNET_DVR_ABILITY_LIST;

#define MAX_ABILITYTYPE_NUM  12   //×î´óÄÜÁ¦Ïî
// Ñ¹Ëõ²ÎÊýÄÜÁ¦ÁÐ±í
typedef struct tagNET_DVR_COMPRESSIONCFG_ABILITY
{ 
    DWORD     dwSize;            //½á¹¹³¤¶È
    DWORD     dwAbilityNum;        //ÄÜÁ¦ÀàÐÍ¸öÊý
    NET_DVR_ABILITY_LIST struAbilityNode[MAX_ABILITYTYPE_NUM]; //ÃèÊö²ÎÊý  
}NET_DVR_COMPRESSIONCFG_ABILITY, *LPNET_DVR_COMPRESSIONCFG_ABILITY;
/********************************9000RH begin****************************************/
#define SUPPORT_PD_NUM            16
#define SUPPORT_ARRAY_NUM        8
#define SUPPORT_VD_NUM            128
#define SUPPORT_PD_NUM_            16
#define SUPPORT_PD_NUM_PARTTWO    8

typedef enum tagRAID_MODE
{
    RAID0 = 1,
        RAID1,
        RAID10,
        RAID1E,
        RAID5,
        RAID6,
        RAID50,
        JBOD, 
        RAID60
}RAID_MODE;

typedef enum tagHD_SUPPORT_TYPE
{
    HD_TYPE_SATA    = 0x01,
        HD_TYPE_PATA    = 0x02,
        HD_TYPE_SAS     = 0x04,
        HD_TYPE_ATAPI   = 0x08,
        HD_TYPE_TAPE    = 0x10,
        HD_TYPE_SES     = 0x20
}HD_SUPPORT_TYPE;

// °´Î»±íÊ¾ Î»Îª0±íÊ¾²»Ö§³Ö  1±íÊ¾Ö§³Ö
typedef enum tagSUPPORT_RAID_TYPE
{
    RAID0_ABILITY   = 0x0001,
        RAID1_ABILITY   = 0x0002,
        RAID10_ABILITY  = 0x0004,
        RAID1E_ABILITY  = 0x0008,
        RAID5_ABILITY   = 0x0010,
        RAID6_ABILITY   = 0x0020,
        RAID50_ABILITY  = 0x0040,
        JBOD_ABILITY    = 0x0080,
        RAID60_ABILITY  = 0x0100
}SUPPORT_RAID_TYPE;

// ÎïÀí´ÅÅÌ 
typedef struct tagNET_DVR_PHY_DISK_INFO
{
    WORD    wPhySlot;         // Ó²ÅÌ²ÛÎ» 
    BYTE    byType;         // Ó²ÅÌÐÅÏ¢£»0 ÆÕÍ¨£¬1È«¾ÖÈÈ±¸£¬2-ÕóÁÐÈÈ±¸ 3-ÕóÁÐÅÌ
    BYTE    byStatus;       // Ó²ÅÌ×´Ì¬£»  0-Õý³£ 1-½µ¼¶ 2-ÒÑÉ¾³ý 3-´ÅÅÌ¶ªÊ§ 4-ÏÂÏß 5-´ÎÕý³£ 6-ÍâÀ´ 7-Òì³£ 8-SMART×´Ì¬Òì³£ 9-ÐÝÃß0xff-²»´æÔÚ
    BYTE    byMode[40];   // Ó²ÅÌÀàÐÍ ×Ö·û´®
    DWORD   dwHCapacity;    //  ´ÅÅÌ×ÜÁ¿¸ß32Î» µ¥Î»kb
    DWORD   dwLCapacity;    //  ´ÅÅÌ×ÜÁ¿µÍ32Î»
    BYTE    byArrrayName[MAX_NAMELEN];
    WORD    wArrayID;          // ËùÊôÕóÁÐID
    BYTE    byRes[102];         // ±£Áô×Ö½Ú  
}NET_DVR_PHY_DISK_INFO, *LPNET_DVR_PHY_DISK_INFO;

typedef struct tagNET_DVR_PHY_DISK_LIST
{
    DWORD   dwSize;
    DWORD   dwCount;
    NET_DVR_PHY_DISK_INFO struPhyDiskInfo[SUPPORT_PD_NUM];
}NET_DVR_PHY_DISK_LIST, *LPNET_DVR_PHY_DISK_LIST;

typedef enum tagBGA_TYPE
{
    BGA_REBUILD = 0x01,            // ÖØ½¨
        BGA_CONSISTENCY_FIX = 0x02,    // Ò»ÖÂÐÔ¼ì²é²¢ÐÞ¸´
        BGA_CONSISTENCY_CHECK = 0x04,  // Ò»ÖÂÐÔ¼ì²é
        BGA_INIT_QUICK = 0x08,         // ³õÊ¼»¯(¿ì)
        BGA_INIT_BACK = 0x10,          // ³õÊ¼»¯(ÍêÈ«)
        BGA_MIGRATION = 0x20,       // Ç¨ÒÆ
        BGA_INIT_FORE = 0x40,           // ³õÊ¼»¯
        BGA_COPYBACK = 0x80             // »ØÇ¨
}BGA_TYPE;

typedef enum tagBGA_STATE
{
    BGA_STATE_NONE = 0,     //  ÎÞºóÌ¨ÈÎÎñ
        BGA_STATE_RUNNING,       //  ºóÌ¨ÈÎÎñÕýÔÚÔËÐÐ
        BGA_STATE_ABORTED,       //  ºóÌ¨ÈÎÎñÈ¡Ïû
        BGA_STATE_PAUSED         //  ºóÌ¨ÈÎÎñÔÝÍ£     
}BGA_STATE;
typedef struct tagNET_DVR_BGA_INFO
{
    BYTE    byBga;  // ºóÌ¨ÈÎÎñ¼°ÀàÐÍ 
    BYTE    byBgaState;           /*º¯Êý·µ»ØÖµ--ºóÌ¨ÈÎÎñ×´Ì¬*/
    WORD    wBgaPercentage;     /*º¯Êý·µ»ØÖµ--ºóÌ¨ÈÎÎñÖ´ÐÐ°Ù·Ö±È*/
    BYTE    byRes[4];  // ±£Áô×Ö½Ú
}NET_DVR_BGA_INFO, *LPNET_DVR_BGA_INFO;

// ÕóÁÐÐÅÏ¢
typedef struct tagNET_DVR_ARRAY_INFO
{
    WORD    wArrayID; // ÕóÁÐID
    BYTE    byRaidMode; // raidÄ£Ê½  ²ÎÕÕRAID_MODE
    BYTE    byStatus;  // 0-ÔÚÏß 1-´ÅÅÌ¶ªÊ§ 2-ÏÂÏß 3-½µ¼¶ 4-Òì³£ 5-´ÎÕý³£ 6-ÍâÀ´ÅÌ  7-ÒÑÉ¾³ý 8-SMART×´Ì¬Òì³£ 0xff-²»´æÔÚ
    DWORD   dwHCapacity; // ÕóÁÐÈÝÁ¿¸ß32Î»
    DWORD   dwLCapacity; // ÕóÁÐÈÝÁ¿µÍ32Î»
    DWORD   dwHFreeSpace;   // ÕóÁÐÊ£Óà¿Õ¼ä¸ß32Î»
    DWORD   dwLFreeSpace;   // ÕóÁÐÊ£Óà¿Õ¼ä¸ß32Î»
    BYTE    byArrayName[MAX_NAMELEN]; // ÕóÁÐÃû³Æ
    BYTE    byPDCount;  // ÎïÀí´ÅÅÌÊýÄ¿
    BYTE    bySpareCount;   // ÈÈ±¸ÊýÄ¿
    BYTE    byRes1[2];
    WORD    wPDSlots[SUPPORT_PD_NUM];    // ÎïÀí´ÅÅÌË÷Òý
    WORD    wSparePDSlots[SUPPORT_PD_NUM];    // ÈÈ±¸´ÅÅÌË÷Òý
    NET_DVR_BGA_INFO    struBgaInfo;    // ºóÌ¨ÈÎÎñÔËÐÐ×´Ì¬
    WORD    wPDSlotsPartTwo[SUPPORT_PD_NUM_PARTTWO];  //ÎïÀí´ÅÅÌË÷ÒýÀ©Õ¹£¬0±íÊ¾ÎÞÐ§
    WORD    wSparePDSlotsPartTwo[SUPPORT_PD_NUM_PARTTWO];    // ÈÈ±¸´ÅÅÌË÷ÒýÀ©Õ¹£¬0±íÊ¾ÎÞÐ§
    BYTE    byRes2[48]; // ±£Áô×Ö½Ú
}NET_DVR_ARRAY_INFO, *LPNET_DVR_ARRAY_INFO;


typedef struct tagNET_DVR_ARRAY_LIST
{
    DWORD   dwSize;     // ½á¹¹Ìå´óÐ¡
    DWORD   dwCount;    // ÕóÁÐ¸öÊý
    NET_DVR_ARRAY_INFO struArrayInfo[SUPPORT_ARRAY_NUM];
}NET_DVR_ARRAY_LIST, *LPNET_DVR_ARRAY_LIST;

//ÐéÄâ´ÅÅÌÐÅÏ¢
typedef struct tagNET_DVR_VD_INFO
{
    WORD    wSlot;    //ÐéÄâ´ÅÅÌ²ÛÎ»  
    BYTE    byStatus; // ×´Ì¬0-Õý³£ 1-½µ¼¶ 2-ÒÑÉ¾³ý 3-´ÅÅÌ¶ªÊ§ 4-ÏÂÏß 5-´ÎÕý³£ 6-ÍâÀ´ 7-Òì³£ 8-SMART×´Ì¬Òì³£ 0xff-²»´æÔÚ 
    BYTE    byRaidMode; // Raid Ä£Ê½ ²ÎÕÕ RAID_MODE
    WORD    wArrayID;      // ËùÊôÕóÁÐID
    BYTE    byRepair;   // ÊÇ·ñÐèÒªÐÞ¸´ 0 ²»ÐèÒª 1ÐèÒª
    BYTE    byUsage;          //LUN¾íµÄÊ¹ÓÃ·½Ê½  0-IPSAN 1-FCSAN 2-DVRÍøÅÌ 3-NAS 4-Â¼Ïñ¾í
    BYTE    byArrayName[MAX_NAMELEN];
    BYTE    byName[MAX_NAMELEN];    // ÐéÄâ´ÅÅÌÃûÃû³Æ
    DWORD   dwHCapacity;    // ÐéÄâ´ÅÅÌÈÝÁ¿¸ß32Î»
    DWORD   dwLCapacity;    // ÐéÄâ´ÅÅÌÈÝÁ¿µÍ32Î»
    DWORD   dwHFreeSpace;   // ÐéÄâ´ÅÅÌÊ£Óà¿Õ¼ä¸ß32Î»
    DWORD   dwLFreeSpace;   // ÐéÄâ´ÅÅÌÊ£Óà¿Õ¼äµÍ32Î»
    NET_DVR_BGA_INFO    struBgaInfo;    // ºóÌ¨ÔËÐÐ×´Ì¬
    DWORD                dwBlockSize;    //×îÐ¡´æ´¢µ¥Ôª¿é´óÐ¡
    NET_DVR_IPADDR        struWarrantIP;    // ÊÚÈ¨µÄDVRÍøÅÌIP
    char                szArrayGroup[NAME_LEN];     //Ê¹ÓÃµÄÕóÁÐÃû³Æ×é£¬ÒÔ¶ººÅ¸ô¿ª£¬Îª¿ÕÔòÊ¹ÓÃÄ¬ÈÏÕóÁÐ
    BYTE                byRes[20];
}NET_DVR_VD_INFO, *LPNET_DVR_VD_INFO;

typedef struct tagNET_DVR_VD_LIST
{
    DWORD   dwSize;     // ½á¹¹Ìå´óÐ¡
    DWORD   dwCount;    // ÐéÄâ´ÅÅÌ¸öÊý
    NET_DVR_VD_INFO struVDInfo[SUPPORT_VD_NUM];  //ÐéÄâ´ÅÅÌÊý×é
}NET_DVR_VD_LIST, *LPNET_DVR_VD_LIST;

typedef struct tagNET_DVR_ADAPTER_VERSION
{
    WORD    wMajorVersion;
    WORD    wMinorVersion;
    WORD    wRevisionNumber;
    WORD    wBuildNumber;
}NET_DVR_ADAPTER_VERSION, *LPNET_DVR_ADAPTER_VERSION;

typedef struct tagNET_DVR_VD_SLOT
{
    WORD  wVDSlot;
    BYTE  byAlloc;  // ÊÇ·ñÒÑ¾­·ÖÅä
    BYTE  byRes[5];
    DWORD dwHVDSlotSize;    // ÐéÄâ´ÅÅÌ¿Õ¼ä´óÐ¡¸ß32Î»
    DWORD dwLVDSlotSize;    // ÐéÄâ´ÅÅÌ¿Õ¼ä´óÐ¡µÍ32Î»
}NET_DVR_VD_SLOT, *LPNET_DVR_VD_SLOT;

typedef struct tagNET_DVR_ARRAY_SPACE_ALLOC_INFO
{
    BYTE    byVDSlotCount;                        /*current number of slots in DG*/ 
    BYTE    byRes1[3];              // ±£Áô×Ö½Ú
    NET_DVR_VD_SLOT struVDSlots[SUPPORT_VD_NUM];
}NET_DVR_ARRAY_SPACE_ALLOC_INFO, *LPNET_DVR_ARRAY_SPACE_ALLOC_INFO;

typedef struct tagNET_DVR_RAID_ADAPTER_INFO
{
    DWORD dwSize;    // ½á¹¹Ìå´óÐ¡
    NET_DVR_ADAPTER_VERSION struVersion;    // ÊÊÅäÆ÷°æ±¾ºÅ
    BYTE    bySlotCount;    //ÊÊÅäÆ÷²ÛÎ»Êý
    BYTE    bySupportMigrate;  // Ç¨ÒÆ(1-Ö§³Ö  0-²»Ö§³Ö)
    BYTE    bySupportExpand;   // À©ÈÝ  (1-Ö§³Ö  0-²»Ö§³Ö)
    BYTE    bySupportRebuild;  // ÊÇ·ñÖ§³ÖÖØ½¨ÕóÁÐ (1¡¢Ö§³Ö 0-²»Ö§³Ö)
    WORD    wSlotSupportType; //  °´Î»±íÊ¾ HD_SUPPORT_TYPE
    WORD    wSupportRaidType;      // Ö§³ÖRaid ÀàÐÍ °´Î»±íÊ¾  
    BYTE    byAutoRebuild;      // 0 ²»×Ô¶¯ÖØ½¨ 1×Ô¶¯ÖØ½¨ ¿ÉÉè
    BYTE    byRes[27];      // ±£Áô×Ö½Ú
}NET_DVR_RAID_ADAPTER_INFO, *LPNET_DVR_RAID_ADAPTER_INFO;

typedef struct tagNET_DVR_OPERATE_ARRAY_PARAM
{
    //ÊÇ·ñÒ»¼ü´´½¨  Èç¹ûÎªÒ»¼ü´´½¨£¬Ôò´´½¨Ê±Ê±ºòµÄÖ®ÐèÒªarrayÃû³Æ£¬¶ø²»ÐèÒªÆäËû²ÎÊý
    // ÆäËû²ÎÊýÓÐÉè±¸×ÔÐÐ´´½¨
    BYTE    byRaidMode;     // ´´½¨/Ç¨ÒÆÊ±RaidµÄÀàÐÍ
    BYTE    byPDCount;  // ÎïÀí´ÅÅÌÊýÄ¿
    WORD    wArrayID;   // Ç¨ÒÆ»òÕßÖØ½¨Ê±ÐèÒªÖ¸³öÕóÁÐID      
    WORD    wPDSlots[SUPPORT_PD_NUM];// ÎïÀí´ÅÅÌ 
    BYTE    byName[MAX_NAMELEN];  // array Ãû³Æ
    BYTE    byInitMode;              //³õÊ¼»¯·½Ê½
    BYTE    byRes1;
    WORD    wPDSlotsPartTwo[SUPPORT_PD_NUM_PARTTWO];       //ÎïÀí´ÅÅÌÐÅÏ¢
    BYTE    byRes2[2];
}NET_DVR_OPERATE_ARRAY_PARAM, *LPNET_DVR_OPERATE_ARRAY_PARAM;


#define INIT_QUICK                                      0    /*¿ìËÙ³õÊ¼»¯*/
#define INIT_FULLFOREGROUND                             1    /*ÍêÈ«³õÊ¼»¯(Ç°Ì¨)*/
#define INIT_FULLBACKGROUND                             2    /*ÍêÈ«³õÊ¼»¯(ºóÌ¨)*/

typedef struct tagNET_DVR_OPERATE_VD_PARAM
{
    WORD    wArrayID;        // ÕóÁÐID
    BYTE    bySlot;            // ´´½¨ÐéÄâ´ÅÅÌÖ¸¶¨²ÛÎ»
    BYTE    byInitType;     // ´´½¨ÐéÄâ´ÅÅÌÊ±³õÊ¼»¯ÀàÐÍ 0 - ¿ìËÙ³õÊ¼»¯ 1 - Ç°Ì¨ÍêÈ«³õÊ¼»¯ 2 - ºóÌ¨ÍêÈ«³õÊ¼»¯
    DWORD    dwHCapacity;    // ÐéÄâ´ÅÅÌ´óÐ¡¸ß32Î»
    DWORD    dwLCapacity;    // ÐéÄâ´ÅÅÌ´óÐ¡µÍ32Î»
    BYTE    byName[MAX_NAMELEN]; // ÐéÄâ´ÅÅÌÃû³Æ
    BYTE    byRes2[16];          // ±£Áô×Ö½Ú 
}NET_DVR_OPERATE_VD_PARAM, *LPNET_DVR_OPERATE_VD_PARAM;


typedef struct tagNET_DVR_SPARE_DISK_PARAM
{
    WORD    wPDSlot;        // ÎïÀí´ÅÅÌ²ÛÎ»
    WORD    wArrayID;       // ËùÊôµÄÕóÁÐ
    BYTE    bySpareType;    // ÈÈ±¸ÀàÐÍ 1-È«¾ÖÈÈ±¸  2 Ö¸¶¨ÕóÁÐ  µ±ÎªÖ¸¶¨ÕóÁÐµÄÊ±ºòÐèÒªÖ¸³öËùÊôÕóÁÐµÄID
    BYTE    byRes[7];       // ±£Áô×Ö½Ú
}NET_DVR_SPARE_DISK_PARAM, *LPNET_DVR_SPARE_DISK_PARAM;

/********************************9000RH End****************************************/


#define MATRIX_MAXDECSUBSYSTEMCHAN    4//ÊÓÆµ×ÛºÏÆ½Ì¨½âÂë×ÓÏµÍ³Í¨µÀºÅ

//»ñÈ¡½âÂë×ÓÏµÍ³¹ØÁªÐÅÏ¢
typedef struct tagNET_DVR_DECSUBSYSTEMJIONSTATUS
{
    BYTE    byJoinStatus;//¹ØÁª×´Ì¬£¬0-Ã»ÓÐ¹ØÁª£¬1-ÒÑ¾­¹ØÁª
    BYTE    byJoinSubSystem;//Ëù¹ØÁª×ÓÏµÍ³²ÛÎ»ºÅ
    BYTE    byJoinDispNum;//Ëù¹ØÁªÏÔÊ¾Í¨µÀºÅ
    BYTE    byJoinSubWindowNum;//Ëù¹ØÁª×Ó´°¿ÚºÅ
    BYTE    byRes[4];
}NET_DVR_DECSUBSYSTEMJIONSTATUS,LPNET_DVR_DECSUBSYSTEMJIONSTATUS;

typedef struct tagNET_DVR_SINGLESUBSYSTEMJOININFO
{
    BYTE    bySubSystemType;//×ÓÏµÍ³ÀàÐÍ£¬0-ÎÞ£¬1-½âÂëÓÃ×ÓÏµÍ³£¬2-±àÂëÓÃ×ÓÏµÍ³£¬3-¼¶ÁªÊä³ö×ÓÏµÍ³£¬4-¼¶ÁªÊäÈë×ÓÏµÍ³,5-Âë·Ö×ÓÏµÍ³£¬6-±¨¾¯×ÓÏµÍ³
    BYTE    byConnectStatus;//¼¶ÁªÏµÍ³¹ØÁª×´Ì¬£¬1-Á¬½ÓÕý³££¬2-Á¬½Ó¶Ï¿ª
    BYTE    byMatrixNum;//¼¶ÁªÊÓÆµ×ÛºÏÆ½Ì¨ºÅ£¬×ÓÏµÍ³ÀàÐÍÊÇ3»ò4Ê±¿ÉÓÃ
    BYTE    bySubSystemNum;//¼¶Áª×ÓÏµÍ³²ÛÎ»ºÅ£¬0~79£¬×ÓÏµÍ³ÀàÐÍÊÇ3»ò4Ê±¿ÉÓÃ    
    NET_DVR_DECSUBSYSTEMJIONSTATUS struDecSub [MATRIX_MAXDECSUBSYSTEMCHAN];
    BYTE    byBindStatus;//°ó¶¨×´Ì¬£¬0-Ã»ÓÐ°ó¶¨£¬1-ÒÑ¾­°ó¶¨£¨´óÆÁÆ´½ÓÊ±ÓÃµ½£©
    BYTE    byRes[7];
}NET_DVR_SINGLESUBSYSTEMJOININFO,LPNET_DVR_SINGLESUBSYSTEMJOININFO;

typedef struct tagNET_DVR_ALLDECSUBSYSTEMJOININFO
{
    DWORD dwSize;
    NET_DVR_SINGLESUBSYSTEMJOININFO struSingleSubSystemJoinInfo[MAX_SUBSYSTEM_NUM];//80
    BYTE  byRes[8];
}NET_DVR_ALLDECSUBSYSTEMJOININFO, *LPNET_DVR_ALLDECSUBSYSTEMJOININFO;

//2010-04-13 Ôö¼ÓNAT¹¦ÄÜÏà¹ØÅäÖÃ
typedef struct tagNET_DVR_NATASSOCIATECFG
{
    DWORD                  dwSize;
    NET_DVR_NETCFG_V30  struNatIpAddress[2];//NAT IPµØÖ· 
    BYTE                byNATEnable;//ÊÇ·ñÆôÓÃNAT¹¦ÄÜ£¬0-²»ÆôÓÃ£¬·Ç0-ÆôÓÃ
    BYTE                  byRes[63];
}NET_DVR_NATASSOCIATECFG, *LPNET_DVR_NATASSOCIATECFG;

//2010-06-01 ÊÓÆµ×ÛºÏÆ½Ì¨±¨¾¯ÅäÖÃ
typedef struct tagNET_DVR_TEMPERATUREALARMCFG
{
    BYTE     byEnableTemperatureAlarm;//Ê¹ÄÜÎÂ¶È³¬ÏÞ±¨¾¯£¬0-±¨¾¯£¬1-²»±¨¾¯
    BYTE     byRes1[3];
    int      iTemperatureUpLimited;    //¾«È·µ½Ð¡ÊýµãºóÁ½Î»£¬Èç1234±íÊ¾ÎÂ¶È12.34¶È
    int      iTemperatureDownLimited;    
    NET_DVR_HANDLEEXCEPTION_V30 struTempHandleType;    /* ´¦Àí·½Ê½ */
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30]; /*²¼·ÀÊ±¼ä*/
    BYTE     byRes2[32];
}NET_DVR_TEMPERATUREALARMCFG, *LPNET_DVR_TEMPERATUREALARMCFG;

typedef struct tagNET_DVR_BOARDALARMCFG
{
    BYTE   byEnablePullAlarm;//ÈÈ²å°Î±¨¾¯Ê¹ÄÜ£¬1-±¨¾¯£¬0-²»±¨¾¯
    BYTE   byRes1[3];
    NET_DVR_HANDLEEXCEPTION_V30 struBoardHandleType;    /* ´¦Àí·½Ê½ */
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30]; /*²¼·ÀÊ±¼ä*/
    BYTE   byRes2[32];
}NET_DVR_BOARDALARMCFG, *LPNET_DVR_BOARDALARMCFG;


typedef struct tagNET_DVR_VIDEOPLATFORMALARMCFG
{
    DWORD                          dwSize;
    NET_DVR_TEMPERATUREALARMCFG  struTempAlarmCfg;    
    NET_DVR_BOARDALARMCFG          struBoardAlarmCfg;    
    NET_DVR_HANDLEEXCEPTION_V30  struHandleException[MAX_EXCEPTIONNUM];//0-·çÉÈÒì³££¬1-×ÓÏµÍ³Òì³££¬2-IPµØÖ·³åÍ»£¬3-ÍøÏß¶Ï£¬4-·Ç·¨·ÃÎÊ£¬5-¹âÏËÒì³££¬6-Ç°Ãæ°åÒì³£
    BYTE                         byRes[32];
}NET_DVR_VIDEOPLATFORMALARMCFG,*LPNET_DVR_VIDEOPLATFORMALARMCFG;
//2010-05-17
typedef struct  tagNET_DVR_CODESPLITTERASSOCIATE
{
    DWORD        dwSize;
    NET_DVR_IPADDR   struIP;  /*±àÂëÆ÷IPµØÖ·*/
    WORD        wPort;        //±àÂëÆ÷¶Ë¿ÚºÅ
    BYTE        byRes1[6];
    BYTE        sUserName[NAME_LEN];    /* ÓÃ»§Ãû£¨32£© */
    BYTE        sPassword[PASSWD_LEN];    /*ÃÜÂë £¨16£©*/
    BYTE        byChan;//±àÂëÆ÷Í¨µÀºÅ
    BYTE        byRes2[15];
} NET_DVR_CODESPLITTERASSOCIATE, *LPNET_DVR_CODESPLITTERASSOCIATE;

//2010-06-01 ÊÓÆµ×ÛºÏÆ½Ì¨±¨¾¯ÉÏ´«½á¹¹
typedef struct tagNET_DVR_MATRIXSUBSYSTEMINFO
{
    BYTE   byMatrixNum;//ÊÓÆµ×ÛºÏÆ½Ì¨ºÅ
    BYTE    bySubSystemNum;//×ÓÏµÍ³²ÛÎ»ºÅ
    BYTE   byRes [14];
} NET_DVR_MATRIXSUBSYSTEMINFO, *LPNET_DVR_MATRIXSUBSYSTEMINFO;

typedef struct tagNET_DVR_VIDEOPLATFORM_ALRAMINFO
{
    DWORD  dwSize;      //½á¹¹Ìå´óÐ¡
    BYTE   byAlarmType;    // 0-°Î³ö×Ó°å£¬1-²åÈë×Ó°å,2-ÎÂ¶È³¬ÉÏÏÞ±¨¾¯£¬3-ÎÂ¶È³¬ÏÂÏÞ±¨¾¯£¬4-·çÉÈ×´Ì¬Òì³££¬5-×ÓÏµÍ³Òì³£,6-·Ç·¨·ÃÎÊ£¬7-¹âÏËÒì³£±¨¾¯,8-Ç°Ãæ°åÒì³£±¨¾¯
    BYTE   byBoardNum;     //×Ó°åºÅ£¬´Ó1Æð£¬B10²»Ö§³Ö¸Ã×Ö¶Î£¬ÎÞÐ§£¬ÖÃÎª0xff
    BYTE   byRes1[2];
    BYTE   bySubSystemChan[8]; //×Ó°å²ÛÎ»ºÅ,Ò»¸ö×Ó°åÖÐÓÐ8¸ö×ÓÏµÍ³£¬Æä·Ö±ð¶ÔÓ¦µÄ²ÛÎ»ºÅ£¬×ÓÏµÍ³Òì³£Ê±£¬bySubSystemChan[0]±íÊ¾¶ÔÓ¦×ÓÏµÍ³ÐòºÅ        
    int    iTemperature;  //ÎÂ¶È³¬ÏÞ±¨¾¯Ê±ÓÐÓÃ£¬ÎÂ¶ÈÖµ
    BYTE   byMainboardSeq;//ÎÂ¶È³¬ÏÞ±¨¾¯Ê±ÓÐÓÃ£¬0-·ÇÖ÷°å£¬1-Ö÷°å
    BYTE   byRes2[3];
    BYTE   byFanSequence[32];//Òì³£·çÉÈ£¬byFanSequence[i] = 1±íÊ¾·çÉÈi+1Òì³££¬byFanSequence[i] = 0±íÊ¾·çÉÈi+1Õý³£    
    NET_DVR_MATRIXSUBSYSTEMINFO struInputNote;// ¹âÏËÒì³£±¨¾¯Ê±Ê¹ÓÃ£¬ÊäÈë½áµã
    NET_DVR_MATRIXSUBSYSTEMINFO struOutputNote;//¹âÏËÒì³£±¨¾¯Ê±Ê¹ÓÃ£¬Êä³ö½áµã
    BYTE   byRes3[68];    
}NET_DVR_VIDEOPLATFORM_ALRAMINFO,*LPNET_DVR_VIDEOPLATFORM_ALRAMINFO;

/***************************ÉóÑ¶DVR begin *****************************/
#define MAX_INQUEST_PIP_NUM        3     //µ¥Í¨µÀÏÔÊ¾µÄ»­ÖÐ»­ÊýÄ¿
#define MAX_INQUEST_CDRW_NUM    4     //×î´ó¿ÌÂ¼»úÊýÄ¿
#define MAX_INQUEST_PIP_NUM_EX    16        //ÉóÑ¶»ú»­ÖÐ»­×î´ó¸öÊý

typedef struct 
{
    DWORD      dwSize;
    DWORD      dwNum;                       //¿ÌÂ¼»úµÄÊýÁ¿
    DWORD      dwRwSelectPara[MAX_CHANNUM_V30];// ÊÇ·ñÑ¡ÖÐ¸Ã¹âÇý
    DWORD      dwModeSelect;                //0±íÊ¾Ñ­»·¿ÌÂ¼Ä£Ê½  1±íÊ¾²¢ÐÐ¿ÌÂ¼Ä£Ê½(Ä¬ÈÏÄ£Ê½)
    BYTE       byRes[24];                   //±£Áô
    DWORD       dwStartCDRW;                 //DVR ±¾µØÒÑ¾­¿ªÊ¼¿ÌÂ¼
    DWORD      dwHdExcp;                    //Ó²ÅÌÓÐÒì ³£
    DWORD       dwInterval;                  //Ê±¼ä¼ä¸ô£¬10·ÖÖÓ(0)¡¢20·ÖÖÓ(1)¡¢30·ÖÖÓ(2)
    char        sLable[64];                  //¹âÅÌÃû³Æ
}NET_DVR_INQUEST_CDRW_CFG, *LPNET_DVR_INQUEST_CDRW_CFG;

typedef struct
{
    char      sFileName[36];             //ÎÄ¼þÃû
    DWORD     dwFileLen;                 //ÎÄ¼þ³¤¶È
}NET_DVR_INQUEST_FILEINFO, *LPNET_DVR_INQUEST_FILEINFO;

typedef struct 
{
    DWORD     dwFileNum;                     // ÐèÒª¿ÌÂ¼»òÕßÉ¾³ýµÄÎÄ¼þÊý£¬×î¶àÒ»´Î20¸ö
    NET_DVR_INQUEST_FILEINFO struFileInfo[MAX_RECORD_FILE_NUM];
    //ÏÂÃæÁ½¸ö²ÎÊýÔÚ±íÊ¾¿ÌÂ¼µÄÎÄ¼þÊ±Ê¹ÓÃ
    DWORD     dwCDIndex;                    //¿ÌÂ¼»úµÄË÷Òý£º1:Ñ¡Ôñ1ºÅ¿ÌÂ¼»ú£»2:Ñ¡Ôñ2ºÅ¿ÌÂ¼»ú£» 3:3ºÅ¿ÌÂ¼»ú,4:4ºÅ¿ÌÂ¼»ú,5:ËùÓÐ¿ÌÂ¼»ú
    DWORD      bFinalizeDisc;                 // 0=¿ÌÂ¼ÍêÖ®ºó²»·âÅÌ£»1=¿ÌÂ¼ÍêÖ®ºó·âÅÌ
}NET_DVR_INQUEST_FILES, *LPNET_DVR_INQUEST_FILES;

typedef struct 
{    
    DWORD     dwEnable;            //¿ÌÂ¼»ú×´Ì¬ÊÇ·ñÓÐÐ§,0-ÎÞÐ§,1-ÓÐÐ§    
                                DWORD     dwStatus;            /* µ±dwType=0Ê±£¬
                                                            0-¹âÅÌÕý³££¬1-ÎÞ¹âÅÌ»ò¹âÅÌÒì³£,
                                                            µ±dwType=1»ò2Ê±£¬
                                                            0-¿ÌÂ¼Õý³££¬1-ÎÞ¹âÅÌ»ò¹âÅÌÒì³££¬
                                                            2-¹âÅÌÒÑ·âÅÌ(81²»Ö§³Ö)£¬3-¹âÅÌ¿Õ¼ä²»×ã£¬
                                                            4-Òì³£µ¼ÖÂÉóÑ¶ÖÕÖ¹(81²»Ö§³Ö)
                                                            µ±dwType=3Ê±£¬
                                                            0-¿ÌÂ¼Õý³££¬1-ÎÞ¹âÅÌ»ò¹âÅÌÒì³££¬
                                                            2-¹âÅÌÒÑ·âÅÌ(81²»Ö§³Ö)£¬3-¹âÅÌ¿Õ¼ä²»×ã
                                                            µ±dwType=4Ê±£¬
                                                            0-¿ÌÂ¼Õý³££¬1-ÎÞ¹âÅÌ»ò¹âÅÌÒì³££¬
                                                            2-¹âÅÌÒÑ·âÅÌ(81²»Ö§³Ö)£¬3-¹âÅÌ¿Õ¼ä²»×ã
                                                            µ±dwType=5Ê±,
                                                            0-¹âÅÌÕý³££¬ 1-ÎÞ¹âÅÌ»ò¹âÅÌÒì³£,
                                                            2-¹âÅÌÒÑ·âÅÌ(81²»Ö§³Ö)
                                                            µ±dwType=6»ò7Ê±,
                                                            0-¿ÌÂ¼Õý³£, 1-ÎÞ¹âÅÌ»ò¹âÅÌÒì³£,
                                2-¹âÅÌÒÑ·âÅÌ(81²»Ö§³Ö), 3-¹âÅÌ¿Õ¼ä²»×ã*/        
                                DWORD    dwVolumn;      //¹âÅÌÈÝÁ¿,µ¥Î»M
                                DWORD    dwFreeSpace;   //¹âÅÌÊ£ÓàÈÝÁ¿,µ¥Î»M    
                                DWORD    dwTimeLeft;     // ¹âÅÌÊ£ÓàÊ±¼ä£¬µ¥Î»Ãë
                                BYTE          byCDType;         // ¹âÅÌÀàÐÍ
                                BYTE       byRes[3];      //±£Áô×Ö½Ú
}NET_DVR_INQUEST_CDRW, *LPNET_DVR_INQUEST_CDRW;

typedef struct 
{    
/*ÔËÐÐ×´Ì¬£º0-ÉóÑ¶¿ªÊ¼£¬
1-ÉóÑ¶¹ý³ÌÖÐ¿ÌÂ¼£¬2-ÉóÑ¶Í£Ö¹£¬
3-¿ÌÂ¼ÉóÑ¶ÎÄ¼þ, 
4-±¸·Ý(ÊÂºó±¸·ÝºÍ±¾µØ±¸·Ý)
5-¿ÕÏÐ
6-³õÊ¼»¯Ó²ÅÌ
    7-»Ö¸´ÉóÑ¶*/
    DWORD    dwType;            
    NET_DVR_INQUEST_CDRW   strCDRWNum[MAX_INQUEST_CDRW_NUM];   //Êý×é0±íÊ¾¿ÌÂ¼»ú1    
    NET_DVR_TIME_EX            struInquestStartTime;        //ÉóÑ¶¿ªÊ¼µÄÊ±¼äµã
    BYTE                    byRes[16];             //±£Áô
}NET_DVR_INQUEST_CDRW_STATUS, *LPNET_DVR_INQUEST_CDRW_STATUS;

typedef struct
{
    BYTE     byPipChan;              //»­ÖÐ»­ÏÔÊ¾µÄÍ¨µÀ 0xFF¹Ø±Õ
    BYTE     byRes[3];              //±£Áô×Ö½Ú
    WORD     wTopLeftX;              //»­ÖÐ»­µÄx×ø±ê
    WORD     wTopLeftY;              //»­ÖÐ»­µÄY×ø±ê
}NET_DVR_INQUEST_PIP_PARAM, *LPNET_DVR_INQUEST_PIP_PARAM;

typedef struct 
{
    BYTE     byBaseChan;          //ÏÔÊ¾»­ÖÐ»­ËùÔÚµÄÍ¨µÀ
    BYTE     byBackChan;          //ÏÔÊ¾»­ÖÐ»­±³¾°Í¨µÀ
                                  BYTE     byPIPMode;           /*ÊÇ·ñ¿ªÆô, 
                                                                0 µ±Ç°´°¿ÚÎÞÐ¡»­Ãæ
                                                                1 µ±Ç°´°¿ÚÓÐ1¸öÐ¡»­Ãæ
                                                                2 µ±Ç°´°¿ÚÓÐ2¸öÐ¡»­Ãæ
                                                                3 µ±Ç°´°¿ÚÓÐ3¸öÐ¡»­Ãæ
                                  */
                                  BYTE     byRes;               //±£Áô×Ö½Ú
                                  NET_DVR_INQUEST_PIP_PARAM  strPipPara[MAX_INQUEST_PIP_NUM];  //»­ÃæÎ»ÖÃµÄ²ÎÊý    
}NET_DVR_INQUEST_PIP_STATUS, *LPNET_DVR_INQUEST_PIP_STATUS;

//V40À©Õ¹£¬½«»­ÖÐ»­¸öÊýÀ©Õ¹Îª32¸ö
typedef struct tagNET_DVR_INQUEST_PIP_PARAM_V40
{
    BYTE     byPipChan;      /*»­ÖÐ»­ÏÔÊ¾µÄÍ¨µÀ 0xFF¹Ø±Õ*/ 
    BYTE     byRes1[3];
    WORD     wTopLeftX;         /*»­ÖÐ»­µÄx×ø±ê*/
    WORD     wTopLeftY;         /*»­ÖÐ»­µÄY×ø±ê*/
    WORD     wHeight;            /*»­ÖÐ»­µÄ¸ß */
    WORD     wWidth;            /*»­ÖÐ»­µÄ¿í */
    BYTE     byRes2[32];
}NET_DVR_INQUEST_PIP_PARAM_V40, *LPNET_DVR_INQUEST_PIP_PARAM_V40;

typedef struct tagNET_DVR_INQUEST_PIP_STATUS_V40
{
    NET_DVR_STRUCTHEAD    struStructHead;
    BYTE             byBaseChan;     /*ÏÔÊ¾»­ÖÐ»­ËùÔÚµÄÍ¨µÀ*/
    BYTE             byBackChan;     /*ÏÔÊ¾»­ÖÐ»­±³¾°Í¨µÀ*/
                                    BYTE             byPIPMode;      /*ÊÇ·ñ¿ªÆô, 0 µ±Ç°´°¿ÚÎÞÐ¡»­Ãæ
                                                                    1 µ±Ç°´°¿ÚÓÐ1¸öÐ¡»­Ãæ
                                                                    2 µ±Ç°´°¿ÚÓÐ2¸öÐ¡»­Ãæ
                                                                    3 µ±Ç°´°¿ÚÓÐ3¸öÐ¡»­Ãæ
                                                                    4 µ±Ç°´°¿ÚÓÐ4¸öÐ¡»­Ãæ
                                                                    5 µ±Ç°´°¿ÚÓÐ5¸öÐ¡»­Ãæ
                                                                    6 µ±Ç°»­ÃæÓÐ6¸öÐ¡»­Ãæ
                                                                    7 µ±Ç°´°¿ÚÓÐ7¸öÐ¡»­Ãæ
                                                                    8 µ±Ç°´°¿ÚÓÐ8¸öÐ¡»­Ãæ
                                                                    9 µ±Ç°´°¿ÚÓÐ9¸öÐ¡»­Ãæ
                                    255  µ±Ç°´°¿Ú¹Ø±ÕÔ¤ÀÀ»­Ãæ*/
                                    BYTE                         byPipCount;          /*Ð¡»­ÃæµÄ¸öÊý*/
                                    BYTE                        byPicShowMode; /*»­ÃæÏÔÊ¾Ä£Ê½£¬0-»­ÖÐ»­£¬1-»­Ãæ¾ù·Ö2-»­ÃæÆ´½Ó*/
                                    BYTE                        byRes[31];        /*±£Áô*/
                                    NET_DVR_INQUEST_PIP_PARAM_V40     strPipPara[MAX_INQUEST_PIP_NUM_EX];  /*»­ÃæÎ»ÖÃµÄ²ÎÊý*/
}NET_DVR_INQUEST_PIP_STATUS_V40, *LPNET_DVR_INQUEST_PIP_STATUS_V40;

typedef struct 
{
    BYTE    sSecretKey[16];        /*ÂëÁ÷¼ÓÃÜÃÜÔ¿*/
    BYTE    byRes[64];             /*±£Áô×Ö½Ú*/
}NET_DVR_INQUEST_SECRET_INFO, *LPNET_DVR_INQUEST_SECRET_INFO;


/***************************ÉóÑ¶DVR end *****************************/


/********************************½Ó¿Ú²ÎÊý½á¹¹(end)*********************************/
#define        MAX_BIGSCREENNUM    100//×î¶à´óÆÁÆ´½ÓÊý

typedef struct tagNET_DVR_SINGLESCREENCFG
{
    BYTE    byScreenSeq;//ÆÁÄ»ÐòºÅ£¬0xff±íÊ¾²»ÓÃ´ËÆÁ,64-T½âÂëÆ÷µÚÒ»¸ö±íÊ¾Ö÷ÆÁ
    BYTE    bySubSystemNum;//½âÂë×ÓÏµÍ³²ÛÎ»ºÅ,½âÂëÆ÷´ËÖµÃ»ÓÐÓÃ
    BYTE    byDispNum;//½âÂë×ÓÏµÍ³ÉÏ¶ÔÓ¦ÏÔÊ¾Í¨µÀºÅ£¬64-T½âÂëÆ÷ÖÐ¸ÃÖµ±íÊ¾½âÂëÆ÷µÄÏÔÊ¾Í¨µÀºÅ
    BYTE    byRes[9];
}NET_DVR_SINGLESCREENCFG, *LPNET_DVR_SINGLESCREENCFG;

typedef struct tagNET_DVR_BIGSCREENCFG
{
    DWORD   dwSize;
    BYTE    byEnable;//´óÆÁÆ´½ÓÊ¹ÄÜ£¬0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE    byModeX;/*´óÆÁÆ´½ÓÄ£Ê½*/
    BYTE    byModeY;
    BYTE    byMainDecodeSystem;//×ÛºÏÆ½Ì¨µÄ½âÂë°åÖÐ¸ÃÖµ±íÊ¾Ö÷ÆÁ²ÛÎ»ºÅ£¬64-T½âÂëÆ÷ÖÐ¸ÃÖµ±íÊ¾½âÂëÍ¨µÀºÅ
    BYTE    byMainDecoderDispChan;//Ö÷ÆÁËùÓÃÏÔÊ¾Í¨µÀºÅ£¬1.1netra°æ±¾ÐÂÔö£¬netra½âÂëÆ÷ÓÐÁ½¸öÏÔÊ¾Í¨µÀ£¬¶¼ÄÜ¹»×÷ÎªÖ÷ÆÁ¡£64-TÖÐ¸ÃÖµÎÞÐ§
    BYTE    byVideoStandard;      //´óÆÁÃ¿¸ö×ÓÆÁÖÆÊ½ÏàÍ¬ 1:NTSC,2:PAL
    BYTE    byRes1[2];
    DWORD  dwResolution;         //´óÆÁÃ¿¸ö×ÓÆÁ·Ö±æÂÊÏàÍ¬
    //´óÆÁÆ´½Ó´ÓÆÁÄ»ÐÅÏ¢
    NET_DVR_SINGLESCREENCFG struFollowSingleScreen[MAX_BIGSCREENNUM]; 
    //ÆðÊ¼×ø±ê±ØÐëÎª»ù×¼×ø±êµÄÕûÊý±¶
    WORD    wBigScreenX; //´óÆÁÔÚµçÊÓÇ½ÖÐÆðÊ¼X×ø±ê
    WORD    wBigScreenY; //´óÆÁÔÚµçÊÓÇ½ÖÐÆðÊ¼Y×ø±ê
    BYTE    byRes2[12];
}NET_DVR_BIGSCREENCFG, *LPNET_DVR_BIGSCREENCFG;


#define    DECODEPIC_LEFTADJUST            1        /*Í¼Ïñ×óÒÆ*/
#define    DECODEPIC_RIGHTADJUST            2        /*Í¼ÏñÓÒÒÆ*/
#define    DECODEPIC_UPADJUST                3        /*Í¼ÏñÉÏÒÆ*/
#define    DECODEPIC_DOWNADJUST            4        /*Í¼ÏñÏÂÒÆ*/
#define    DECODEPIC_REDUCEADJUST            5        /*Í¼ÏñËõÐ¡*/  
#define    DECODEPIC_FULL_SCREEN_ADJUST    6        /*Í¼ÏñÈ«ÆÁ*/
#define    DECODEPIC_CANCEL_FULL_SCREEN_ADJUST    7        /*Í¼ÏñÈ¡ÏûÈ«ÆÁÏÔÊ¾*/   
#define DECODEPIC_AUTOADJUST           8        /*  Í¼Ïñ×Ô¶¯µ÷Õû */
#define DECODEPIC_HEIGHTADJUST         9       /* Í¼Ïñ¸ß¶Èµ÷Õû */
#define DECODEPIC_WIDTHADJUST             10       /* Í¼Ïñ¿í¶Èµ÷Õû */

#define     MAX_UNITEDMATRIX_NUM        8//¼¶ÁªÖÐ×î¶àÊÓÆµ×ÛºÏÆ½Ì¨ÊýÁ¿
#define     MAX_SUBDOMAIN_NUM            4//¼¶ÁªÖÐ×î¶à×ÓÓòÊýÁ¿
typedef struct tagNET_DVR_SUBSERVERINFO
{
    BYTE        bySequence;//ÐòºÅ£¬¶ÔÓÚ×ÓÓò£¬ÊÇ×ÓÓòºÅ£¬¶ÔÓÚÊÓÆµ×ÛºÏÆ½Ì¨£¬ÊÇÆ½Ì¨ºÅ£¬0±íÊ¾ÎÞ´ËÆ½Ì¨\×ÓÓò
    BYTE        byBelongSubDomain;//¶ÔÓÚÆ½Ì¨ÓÐÐ§£¬±íÊ¾ÊôÓÚÄÄ¸ö×ÓÓò
    BYTE        byRes1[6];
    DWORD       dwMaxIpcNums;//Á¬½ÓµÄ×î¶àIPCÊýÁ¿
    NET_DVR_IPADDR struSubMatrixIP;        /*IPµØÖ·*/
    WORD        wSubMatrixPort;        /*×ÓÏµÍ³¶Ë¿ÚºÅ*/
    BYTE        byRes2[6];
}NET_DVR_SUBSERVERINFO, *LPNET_DVR_SUBSERVERINFO;

typedef struct tagNET_DVR_UNITEDMATRIXINFO
{
    DWORD dwSize;
    NET_DVR_SUBSERVERINFO struDomainInfo;
    NET_DVR_SUBSERVERINFO struSubDomainInfo[MAX_SUBDOMAIN_NUM];//×ÓÓòÐÅÏ¢
    NET_DVR_SUBSERVERINFO struMatrixInfo[MAX_UNITEDMATRIX_NUM];//ÊÓÆµ×ÛºÏÆ½Ì¨ÐÅÏ¢
    BYTE  byRes[32];
}NET_DVR_UNITEDMATRIXINFO, *LPNET_DVR_UNITEDMATRIXINFO;        

typedef struct tagNET_DVR_REGCALLBACKPARAM
{
    char sDeviceID[NAME_LEN];//Éè±¸ID´®
    char sPassword[PASSWD_LEN];
    BYTE sSerialNumber[SERIALNO_LEN]; /* Éè±¸ÐòÁÐºÅ */
    DWORD dwDeviceType;//Éè±¸ÀàÐÍ
    BYTE nStatus;// ÉÏÏÂÏß×´Ì¬£¨0ÏÂÏß£¬1ÉÏÏß£©
    /* net type, 0: unknow; 1: 2G wireless networks; 2: 3G wireless networks; 3: line networks */
    BYTE byNetType;    
    BYTE byRes[14];
}NET_DVR_REGCALLBACKPARAM, *LPNET_DVR_REGCALLBACKPARAM;

typedef struct tagNET_DVR_LOGONREPONSEPARAM
{
    //ÐÄÌøÊ±¼ä¼ä¸ô£¬µ¥Î»£ºÃë, 5µÄ±¶Êý£¬180ÃëÒÔÄÚ¡£Ä¬ÈÏÊÇ15Ãë¡£
    WORD wHeartbeatTime;
    BYTE byOvertimes;// Éè±¸ÐÄÌø³¬Ê±´ÎÊý£¬Ä¬ÈÏÊÇ3´Î
    BYTE byRes[13];    
}NET_DVR_LOGONREPONSEPARAM, *LPNET_DVR_LOGONREPONSEPARAM;


typedef struct tagNET_DVR_PREVIEWPARAM
{
    BYTE byTransProtol;        //´«ÊäÐ­Òé£¬0-TCP, 1-UDP
    BYTE byTransMode;        ///* ´«ÊäÂëÁ÷Ä£Ê½ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷*/ 
    NET_DVR_IPADDR struCuIp; //CU¶ËIPµØÖ·
    WORD wPort;/*CU¶Ë¿Ú*/
    WORD wUdpPort;
    BYTE bySupportQos;//ÊÇ·ñÆôÓÃQOS,1-ÆôÓÃ£¬0-²»ÆôÓÃ
    //ÊÇ·ñÊÇNATÔ¤ÀÀÇëÇó£¬0-·ñ£¬1-ÊÇ(Ö»ÐèbyTransMode×Ö¶Î)
    BYTE  byNatRequest;
    BYTE  byPreviewType;// 0-ÆÕÍ¨Ô¤ÀÀ 1-ÑÓÊ±Ô¤ÀÀ
    BYTE  byRes[7];
}NET_DVR_PREVIEWPARAM, *LPNET_DVR_PREVIEWPARAM;
typedef struct tagNET_DVR_DEVICENATINFO
{
    NET_DVR_IPADDR struPuIp; //PU¶ËÍâÍøIPµØÖ·
    WORD    wOuterPort;/*PUÍâÍø¶Ë¿Ú*/
    WORD    wInterPort;//PU·¢ËÍÊÓÆµµÄ±¾µØ¶Ë¿Ú
    DWORD   nSessionID;//CMS·ÖÅäµÄsessionID
    BYTE    byRes[4];
}NET_DVR_DEVICENATINFO, *LPNET_DVR_DEVICENATINFO;


typedef struct tagNET_DVR_PREVIEWCALLBACKPARAM
{
    LONG lChannel;
    BYTE nLinkProtocol;
    BYTE nTransMode;
    BYTE byPreviewType; //0-ÆÕÍ¨Ô¤ÀÀ 1-ÑÓÊ±Ô¤ÀÀ
    BYTE byRes[5];
    DWORD nSessionID;//CMS·ÖÅäµÄsessionID
}NET_DVR_PREVIEWCALLBACKPARAM, *LPNET_DVR_PREVIEWCALLBACKPARAM;

//»Ø·Å
typedef struct tagNET_DVR_PLAYBACKREQUESTPARAM
{
    BYTE byPlayBackMode;        /* »Ø·ÅÏÂÔØÄ£Ê½ 1£­°´Ãû×Ö 2£­°´Ê±¼ä */
    BYTE byRes1[3];
    union
    {
        char sFileName [100];        /* »Ø·ÅµÄÎÄ¼þÃû */
        struct 
        {
            LONG    lChannel;                /*»Ø·ÅµÄÍ¨µÀºÅ*/
            NET_DVR_TIME struStartTime;            /* °´Ê±¼ä»Ø·ÅµÄ¿ªÊ¼Ê±¼ä */
            NET_DVR_TIME struStopTime;            /* °´Ê±¼ä»Ø·ÅµÄ½áÊøÊ±¼ä */
            BYTE    byRes[48];
        }struPlayBackbyTime;
    }playbackmode;
    NET_DVR_IPADDR struCuIp; //CU¶ËIPµØÖ·
    WORD    wPort;/*CU¶Ë¿Ú*/
    BYTE    byRes2[2];
    DWORD   dwSessionID;//CMS·ÖÅäµÄsessionID,Êä³ö²ÎÊý
    BYTE    byRes3[16];
}NET_DVR_PLAYBACKREQUESTPARAM, *LPNET_DVR_PLAYBACKREQUESTPARAM;    

//2010-10-06
typedef struct tagNET_DVR_PLAYBACKCALLBACKPARAM
{
    BYTE byPlayBackMode;        /* »Ø·ÅÏÂÔØÄ£Ê½ 1£­°´Ãû×Ö 2£­°´Ê±¼ä */
    BYTE byRes1[3];
    union
    {
        char sFileName [100];        /* »Ø·ÅµÄÎÄ¼þÃû */
        struct 
        {
            LONG        lChannel;                /*»Ø·ÅµÄÍ¨µÀºÅ*/
            NET_DVR_TIME struStartTime;            /* °´Ê±¼ä»Ø·ÅµÄ¿ªÊ¼Ê±¼ä */
            NET_DVR_TIME struStopTime;            /* °´Ê±¼ä»Ø·ÅµÄ½áÊøÊ±¼ä */
            BYTE       byRes[48];
        }struPlayBackbyTime;
    }playbackmode;
    DWORD nSessionID;//CMS·ÖÅäµÄsessionID
    BYTE byRes2[44];
}NET_DVR_PLAYBACKCALLBACKPARAM, *LPNET_DVR_PLAYBACKCALLBACKPARAM;  

typedef struct tagNET_DVR_VOICEREQUESETPARAM
{
    BYTE    nVoiceChannel;        //¶Ô½²Í¨µÀºÅ
    BYTE    byRes1[3];
    NET_DVR_IPADDR struCuIp; //CU¶ËIPµØÖ·
    WORD     wPort;/*CU¶Ë¿Ú*/
    BYTE    byRes2[10];
}NET_DVR_VOICEREQUESTPARAM, *LPNET_DVR_VOICEREQUESTPARAM;             

typedef struct tagNET_DVR_ALARMSETUPREQUESETPARAM
{
    NET_DVR_IPADDR struCuIp; //CU¶ËIPµØÖ·
    WORD     wPort;/*CU¶Ë¿Ú*/
    BYTE    byRes[2];
}NET_DVR_ALARMSETUPREQUESTPARAM, *LPNET_DVR_ALARMSETUPREQUESTPARAM;        

typedef struct tagNET_DVR_GPSALARMINFO
{
    BYTE byDeviceID[NAME_LEN];/*Éè±¸µÄID´®*/
    NET_DVR_TIME_EX struGpsTime;    /*GPSÉÏ´«µÄÊ±¼ä*/
    DWORD    dwLongitude;    /* ¾­¶È*/
    DWORD    dwLatitude;  /* Î³¶È*/
    int     iTimeZone; /*Ê±Çø£¬ÓÃ·ÖÖÓÊý±íÊ¾£¬+60´ú±í¶«1Çø£¬+480´ú±í¶«8Çø£¬-60´ú±íÎ÷Çø£¬-480´ú±íÎ÷8Çø£¬¸Ã×Ö¶ÎºÍGPSTime¹¹³ÉÒ»¸öÍêÕûµÄÊ±¼äÃèÊö*/ 
    DWORD dwDirection; /*³µÁ¾·½Ïò=Êµ¼Ê·½Ïò£¨ÒÔ¶ÈÎªµ¥Î»£¬Õý±±·½ÏòÎª£¬Ë³Ê±Õë·½Ïò¼ÆËã£©*100*/
    WORD  wSatellites; /*ÎÀÐÇÊýÁ¿*/
    WORD  wPrecision; /*¾«¶È*/
    DWORD dwHeight; /*¸ß¶È:ÀåÃ×£¬Ô¤Áô*/
    DWORD dwGPSSeq; /*GPSÐòºÅ£¬GPS²¹´«Ê±ÒªÓÃµ½*/
    WORD  wSpeed;//ËÙ¶È£¬µ¥Î»£¬km/h
    /* direction[0]:'E'or'W'(¶«¾­/Î÷¾­), direction[1]:'N'or'S'(±±Î³/ÄÏÎ³)*/
    char sDirection[2]; 
    BYTE byLocateMode;/*¶¨Î»Ä£Ê½(³õÖµ0)£¬1,×ÔÖ÷¶¨Î»,2,²î·Ö3,¹ÀËã,4,Êý¾ÝÎÞÐ§*/  
    BYTE byRes[3];
}NET_DVR_GPSALARMINFO, *LPNET_DVR_GPSALARMINFO;

//Í¼Æ¬ÐÅÏ¢ÉÏ´«
typedef struct tagNET_DVR_PICINFO
{
    DWORD   dwSize;                //½á¹¹³¤¶È
    BYTE    byChanIndex;            //Í¨µÀºÅ
    BYTE    byRes1[3];                //±£Áô
    BYTE     byDeviceID[NAME_LEN];/*Éè±¸µÄID´®*/
    BYTE    byAbsTime[32];        //¾ø¶ÔÊ±¼äµã, yyyymmddhhmmssxxx,
    DWORD   dwPicLen;                    //Í¼Æ¬³¤¶È
    BYTE    byRes2[32];
    BYTE    *pPicBuffer;
}NET_DVR_PICTUREINFO, *LPNET_DVR_PICTUREINFO;

//Æ½Ì¨²ÎÊý
typedef struct tagNET_DVR_CMSPARAM
{
    DWORD   dwSize;
    NET_DVR_IPADDR struCmsAddr;
    WORD   wCmsPort;
    BYTE   byRes1[2];
    BYTE   sDeviceID[NAME_LEN];
    BYTE   byPassword[PASSWD_LEN];
    NET_DVR_IPADDR struPicServerAddr;
    WORD   wPicServerPort;
    WORD   wCmsUdpPort;//CMSÓÃÓÚUDPÍâÍø²éÑ¯µÄ¶Ë¿Ú
    BYTE   byRes2[12];
}NET_DVR_CMSPARAM, *LPNET_DVR_CMSPARAM;

///²¦ºÅ¹¦ÄÜ
#define DIALPASSWD_LEN  32 //²¦ºÅÃÜÂë³¤¶È

typedef struct tagNET_DVR_QOSPARAM
{
    WORD wMaxBitUL;    /* the maximum number of kbits/s in up-link traffic */
    WORD wMaxBitDL;    /* the maximum number of kbits/s in down-link traffic */
    BYTE byTrafficClass;    /* 0: conversationnal; 1: streaming; 2: interactive;3: background; 4: subscribed value(default) */
    BYTE byRes[7];
}NET_DVR_QOSPARAM, *LPNET_DVR_QOSPARAM;


typedef struct tagNET_DVR_PPPDPARAM
{
    BYTE byDialNum[NAME_LEN];        /* dial number, eg. "#777" */
    BYTE byUserName[NAME_LEN];    /* user name, eg. "card" */
    BYTE byPassword[DIALPASSWD_LEN];    /* password, eg. "card" */
    BYTE byApn[NAME_LEN];        /* access point name, eg. "cmnet" */
    NET_DVR_IPADDR struLocalIp;/* local IP address */
    NET_DVR_IPADDR struRemoteIp;/* remote IP address */
    WORD wMtuSize;        /* max transfer unit of ppp interface */
    BYTE byVerifyProtocal;    /* IPCP verify protocal: 0: auto; 1: CHAP; 2: PAP */
    BYTE byRes[25];    
}NET_DVR_PPPDPARAM, *LPNET_DVR_PPPDPARAM;

#define MAX_PHONE_NUM                32//×î³¤ºÅÂë³¤¶È

typedef struct tagNET_DVR_DIALPARAM
{
    DWORD dwSize;
    BYTE bEnable3G;        /* 0: disable; 1: enable 3g */
    BYTE byDialMethod;        /* dial methold: 0: auto dial; 1: manual dial; */
    BYTE bySwitchMethod;    /* switch methold: 0: auto switch;1£º3GÓÅÏÈ£¬2: manual switch to 2G; 3: manual switch to 3G; */
    BYTE byEnaAlarmInDial;   /* Ê¹ÄÜ±¨¾¯ÊäÈë´¥·¢²¦ºÅ; 0: disable; 1: enable */
    BYTE byRes1[10];
    WORD wOffLineTime;        /* auto off line when no connection exist,µ¥Î»£º·ÖÖÓ£¬·¶Î§£º5~65535·ÖÖÓ */    
    NET_DVR_PPPDPARAM struPppdParam;
    NET_DVR_QOSPARAM struQosParam;
    BYTE byUimNumber[MAX_PHONE_NUM];
    BYTE byRes2[24];
}NET_DVR_DIALPARAM, *LPNET_DVR_DIALPARAM;

typedef struct tagNET_DVR_DIALREQUEST
{
    BYTE byConnNum;        /*Íø¿¨ÐòºÅ*/
    BYTE byNetType;        /* Ö¸¶¨»ñµÃÄ³¸öÍøÂçµÄÄ¬ÈÏ²¦ºÅ²ÎÊý£¬ÉèÖÃÊ±´Ë²ÎÊýÃ»ÓÃ¡£0£º×Ô¶¯£»1£ºCDMA£»2£ºEVDO£»3£ºWCDMA£»4£ºTD-SCDMA */
    BYTE byRes[6];
} NET_DVR_DIALREQUEST, *LPNET_DVR_DIALREQUEST;


/* UIM card information */
typedef enum
{
    UIM_UNKNOWN = 0,
        UIM_VALID = 1,
        UIM_NOVALID = 4,
        UIM_ROAM = 11,
        UIM_NOEXIST = 255
}UIM_INFO;

/* real 3g mode */
typedef enum
{
    /* evdo */
    RMODE_CDMA1X = 12,
        RMODE_EVDO = 14,
        RMODE_CDMAHYBRID = 18,
        /* wcdma */
        RMODE_GSM = 21,
        RMODE_GPRS = 22,
        RMODE_EDGE = 23,
        RMODE_WCDMA = 24,
        RMODE_HSDPA = 25,
        RMODE_HSUPA = 26,
        RMODE_HSPA = 27,
        /* tdscdma */
        RMODE_TGSM = 31,
        RMODE_TGPRS = 32,
        RMODE_TEDGE = 33,
        RMODE_TDSCDMA = 34,
        RMODE_TDHSDPA = 35,
        RMODE_TDHSUPA = 36,
        RMODE_TDHSPA = 37
}REAL_MODE;

typedef struct tagNET_DVR_DIALSTATUS
{
    BYTE byRealMode;        /* REAL_MODE ,real 3g mode networks */
    BYTE byUimCard;        /* UIM_INFO ,UIM card information */
    BYTE byRes1[6];
    DWORD dwSignal;            /* signal RSSI */
    DWORD dwDialStatus;        /* dial status */
    NET_DVR_IPADDR struLocalIp;    /* wireless networks IP address */
    NET_DVR_IPADDR struRemoteIp;    /* wireless networks gateway */
    NET_DVR_IPADDR struNetMask;    /* wireless networks netmask */
    NET_DVR_IPADDR struDns;        /* wireless networks DNS */     
    BYTE  byRes2[16];
}NET_DVR_DIALSTATUS, *LPNET_DVR_DIALSTATUS;

//¶ÌÐÅ¹¦ÄÜ
#define MAX_WHITELIST_NUM            8 //×î´ó°×Ãûµ¥Êý

#define HARDDISKFULL_EXCEPTION      0x0     /*Ó²ÅÌÂú*/
#define HARDDISKERROR_EXCEPTION     0x1     /*Ó²ÅÌ´í*/
#define ETHERNETBROKEN_EXCEPTION    0x2     /*ÍøÏß¶Ï*/
#define IPADDRCONFLICT_EXCEPTION    0x3     /*IPµØÖ·³åÍ»*/
#define ILLEGALACCESS_EXCEPTION     0x4     /*·Ç·¨·ÃÎÊ*/
#define VI_EXCEPTION                0x5     /*ÊÓÆµÐÅºÅÒì³£*/
#define VS_MISMATCH_EXCEPTION       0x6     /*ÊäÈë/Êä³öÊÓÆµÖÆÊ½²»Æ¥Åä */
#define VIDEOCABLELOSE_EXCEPTION    0x7     /*ÊÓÆµÎÞÐÅºÅ*/
#define AUDIOCABLELOSE_EXCEPTION    0x8     /*ÒôÆµÎÞÐÅºÅ*/
#define ALARMIN_EXCEPTION           0x9     /*±¨¾¯ÊäÈë*/
#define MASKALARM_EXCEPTION         0xa     /*ÕÚµ²±¨¾¯*/
#define MOTDET_EXCEPTION            0xb     /*ÒÆ¶¯Õì²â*/
#define RECORDING_EXCEPTION         0xc     /*Â¼ÏñÒì³£*/
#define WIRELESS_EXCEPTION          0xd     /*PIR±¨¾¯*/
#define PIR_EXCEPTION                0xe     /*ÎÞÏß±¨¾¯*/
#define CALLHELP_EXCEPTION          0xf     /*ºô¾È±¨¾¯*/

#define AUDIO_DETECTION_EXCEPTION              0x10    /*ÒôÆµÒì³£Õì²â±¨¾¯*/
#define SCENECHANGE_DETECTION_EXCEPTION        0x11    /*³¡¾°Õì²â±¨¾¯*/
#define DEFOCUS_DETECTION_EXCEPTION            0x12    /*Ðé½¹Õì²â±¨¾¯*/
#define FACE_DETECTION_ENTRANCE_EXCEPTION      0x13    /*ÈËÁ³Õì²â±¨¾¯*/
#define LINE_DETECTION_ENTRANCE_EXCEPTION      0x14    /*Ô½½çÕì²â±¨¾¯*/
#define FIELD_DETECTION_ENTRANCE_EXCEPTION     0x15    /*ÇøÓòÈëÇÖÕì²â±¨¾¯*/
#define REGION_EXITING_EXCEPTION               0x16    /*Àë¿ªÇøÓòÕì²â±¨¾¯*/
#define REGION_ENTRANCE_EXCEPTION              0x17    /*½øÈëÇøÓò±¨¾¯*/
#define LOITERING_EXCEPTION                    0x18    /*ÈËÔ±ÅÇ»²Õì²â±¨¾¯*/
#define GROUP_EXCEPTION                        0x19    /*ÈËÔ±¾Û¼¯Õì²â±¨¾¯*/
#define RAPIDMOVE_EXCEPTION                    0x1a    /*¿ìËÙÒÆ¶¯Õì²â±¨¾¯*/
#define PARKING_EXCEPTION                      0x1b    /*Í£³µÕì²â±¨¾¯*/
#define UNATTENDEDBAGGAGE_EXCEPTION            0x1c    /*ÎïÆ·ÒÅÁôÕì²â±¨¾¯*/
#define ATTENDEDBAGGAGE_EXCEPTION              0x1d    /*ÎïÆ·ÄÃÈ¡Õì²â±¨¾¯*/


#define PHONECFG_RECEIVE_SMS        0x0    /* Ö§³Ö½ÓÊÕ±¨¾¯¶ÌÐÅ */
#define PHONECFG_SMS_CONTROL        0x1    /* Ö§³Ö¶ÌÐÅ¿ØÖÆÉÏÏÂÏß */
#define PHONECFG_CALL_CONTROL       0x2    /* Ö§³Öºô½Ð¿ØÖÆÉÏÏß */
#define PHONECFG_SMS_REBOOT         0x3    /*Ö§³Ö¶ÌÐÅÖØÆô*/
#define PHONECFG_DOOR_CONTROL       0x4    /* Ö§³ÖÃÅ²Ù×÷¿ØÖÆ*/

typedef struct tagNET_DVR_PHONECFG
{
    BYTE byWhiteList[MAX_PHONE_NUM];
    BYTE byPhonePerssion[32]; /*°´×Ö½Ú±íÊ¾ÊÇ·ñÊ¹ÄÜ¸ÃºÅÂëµÄÄ³¹¦ÄÜ£¬¾ßÌåÎ»´ú±íµÄº¬Òå
    ¼ûPHONECFG_RECEIVE_SMSµÈ¶¨Òå */
    BYTE byAlarmHandler[32];   /*°´×Ö½Ú±íÊ¾ÊÇ·ñÊ¹ÄÜ¶ÔÄ³¸ö±¨¾¯ÀàÐÍµÄ¶ÌÐÅ·¢ËÍ*/
    BYTE byRes[128];
} NET_DVR_PHONECFG, *LPNET_DVR_PHONECFG;

typedef struct tagNET_DVR_SMSRELATIVEPARAM
{
    DWORD dwSize;
    BYTE bEnableSmsAlarm;    /* 0: disable; 1: enable 3g */
    BYTE byRes1[7];
    NET_DVR_PHONECFG struWhiteList[MAX_WHITELIST_NUM];
    BYTE byRes2[32];
}NET_DVR_SMSRELATIVEPARAM, *LPNET_DVR_SMSRELATIVEPARAM;


typedef struct tagNET_DVR_SMSLISTINFO
{
    DWORD  dwSize;
    DWORD dwTotalSmsNum;//¶ÌÐÅÌõÊý
    BYTE  byRes[8];
    BYTE  *pSmsParam;
    DWORD dwBufLen;//Ëù·ÖÅäÖ¸Õë³¤¶È£¬ÊäÈë²ÎÊý
}NET_DVR_SMSLISTINFO, *LPNET_DVR_SMSLISTINFO;

typedef struct tagNET_DVR_SMSPARAM
{
    DWORD dwIndex;            /* the index of sms */
    BYTE byStatus;            /* read yet or not */
    BYTE byRes[7];
    NET_DVR_TIME_EX struRecvTime;        /* sms receive time */
}NET_DVR_SMSPARAM, *LPNET_DVR_SMSPARAM;

#define    MAX_SMSCONTENT_LEN        140//¶ÌÐÅÄÚÈÝ³¤¶È
typedef struct tagNET_DVR_SMSCONTENT
{
    BYTE byPhoneNum[MAX_PHONE_NUM];
    BYTE byMsg[MAX_SMSCONTENT_LEN];
}NET_DVR_SMSCONTENT, *LPNET_DVR_SMSCONTENT;     

//pinÂëÅäÖÃ
typedef enum
{
    CPIN_READY = 1,
        CPIN_PIN = 2,
        CPIN_PUK = 3,
        CPIN_PIN2 = 4,
        CPIN_PUK2 = 5
}PIN_READY;

typedef struct tagNET_DVR_PINSTATUS
{
    DWORD dwSize;
    BYTE byStatus;        /* PIN status, defination see enum: PIN_READY */
    BYTE byPinTimes;    /* remain input PIN times */
    BYTE byPukTimes;    /* remain input PUK times */    
    BYTE bEnableLock;    /* now the PIN locking function is enabled or not: 0, not enabled lock; 1, lock enabled */
    BYTE byRes[4];
}NET_DVR_PINSTATUS, *LPNET_DVR_PINSTATUS;

typedef enum
{
    PIN_ENABLE = 1,
        PIN_DISABLE = 2,
        PIN_VERIFY = 3,
        PUK_VERIFY = 4,
        PIN_CHANGE = 5
}PIN_CMD;
#define MAX_PIN_LEN        12  //PINÂë×î´ó³¤¶È
typedef struct tagNET_DVR_PINCODEPARAM
{
    DWORD dwSize;
    BYTE byPinCmd;        /* PIN command, defination see enum: PIN_CMD */
    BYTE byRes1[3];
    BYTE byPinCode[MAX_PIN_LEN];        /* pin/puk code */
    BYTE byNewPinCode[MAX_PIN_LEN];    /* new pin code */
    BYTE byRes2[16];
}NET_DVR_PINCODEPARAM, *LPNET_DVR_PINCODEPARAM;


//Í¼Æ¬ÖÊÁ¿
typedef struct 
{
    /* 0=CIF, 1=QCIF, 2=D1 3=UXGA(1600x1200), 4=SVGA(800x600), 5=HD720p(1280x720),6=VGA*/
    WORD    wPicSize;
    WORD    wPicQuality; /* Í¼Æ¬ÖÊÁ¿ÏµÊý 0-×îºÃ 1-½ÏºÃ 2-Ò»°ã */
    //×¥Í¼Í¼Æ¬´¦Àí·½Ê½£¬1-ÉÏ´«ÖÐÐÄ£¬2-Éè±¸±¾µØ±£´æ£¬3-ÉÏ´«ÖÐÐÄÍ¬Ê±Éè±¸±¾µØ±£´æ
    BYTE    byPicTackleMode; 
    BYTE   byRes[11];
}NET_DVR_PUSHJPEGPARA, *LPNET_DVR_PUSHJPEGPARA;


#define    COM_PUSHALARM        0x1200    //Éè±¸»ù±¾±¨¾¯ÐÅÏ¢ÉÏ´«£¬ÍÆÄ£Ê½Éè±¸Ê¹ÓÃ
#define    COM_PUSHALARM_V30    0x1201    //Éè±¸»ù±¾±¨¾¯ÐÅÏ¢ÉÏ´«v30£¬ÍÆÄ£Ê½Éè±¸Ê¹ÓÃ
typedef struct tagNET_DVR_PUSHALARMINFO
{
    DWORD dwAlarmType;/*0-ÐÅºÅÁ¿±¨¾¯,1-Ó²ÅÌÂú,2-ÐÅºÅ¶ªÊ§,3£­ÒÆ¶¯Õì²â,4£­Ó²ÅÌÎ´¸ñÊ½»¯,5-¶ÁÐ´Ó²ÅÌ³ö´í,6-ÕÚµ²±¨¾¯,7-ÖÆÊ½²»Æ¥Åä, 8-·Ç·¨·ÃÎÊ*/
    DWORD dwAlarmInputNumber;/*±¨¾¯ÊäÈë¶Ë¿Ú*/
    DWORD dwAlarmOutputNumber[MAX_ALARMOUT];/*´¥·¢µÄÊä³ö¶Ë¿Ú£¬ÄÄÒ»Î»Îª1±íÊ¾¶ÔÓ¦ÄÄÒ»¸öÊä³ö*/
    DWORD dwAlarmRelateChannel[MAX_CHANNUM];/*´¥·¢µÄÂ¼ÏñÍ¨µÀ£¬ÄÄÒ»Î»Îª1±íÊ¾¶ÔÓ¦ÄÄÒ»Â·Â¼Ïñ, dwAlarmRelateChannel[0]¶ÔÓ¦µÚ1¸öÍ¨µÀ*/
    DWORD dwChannel[MAX_CHANNUM];/*dwAlarmTypeÎª2»ò3,6Ê±£¬±íÊ¾ÄÄ¸öÍ¨µÀ£¬dwChannel[0]¶ÔÓ¦µÚ1¸öÍ¨µÀ*/
    DWORD dwDiskNumber[MAX_DISKNUM];/*dwAlarmTypeÎª1,4,5Ê±,±íÊ¾ÄÄ¸öÓ²ÅÌ, dwDiskNumber[0]Î»¶ÔÓ¦µÚ1¸öÓ²ÅÌ*/
    BYTE byDeviceID[NAME_LEN];/*Éè±¸µÄID´®*/
    BYTE byRes[4];
}NET_DVR_PUSHALARMINFO, *LPNET_DVR_PUSHALARMINFO;

typedef struct 
{
    DWORD dwAlarmType;/*0-ÐÅºÅÁ¿±¨¾¯,1-Ó²ÅÌÂú,2-ÐÅºÅ¶ªÊ§,3£­ÒÆ¶¯Õì²â,4£­Ó²ÅÌÎ´¸ñÊ½»¯,5-¶ÁÐ´Ó²ÅÌ³ö´í,6-ÕÚµ²±¨¾¯,7-ÖÆÊ½²»Æ¥Åä, 8-·Ç·¨·ÃÎÊ, 9-ÊÓÆµÐÅºÅÒì³££¬10-Â¼ÏñÒì³£ 11- ÖÇÄÜ³¡¾°±ä»¯  12-ÕóÁÐÒì³£ */
    DWORD dwAlarmInputNumber;/*±¨¾¯ÊäÈë¶Ë¿Ú*/
    BYTE byAlarmOutputNumber[MAX_ALARMOUT_V30];/*´¥·¢µÄÊä³ö¶Ë¿Ú£¬Îª1±íÊ¾¶ÔÓ¦Êä³ö*/
    BYTE byAlarmRelateChannel[MAX_CHANNUM_V30];/*´¥·¢µÄÂ¼ÏñÍ¨µÀ£¬Îª1±íÊ¾¶ÔÓ¦Â¼Ïñ, dwAlarmRelateChannel[0]¶ÔÓ¦µÚ1¸öÍ¨µÀ*/
    BYTE byChannel[MAX_CHANNUM_V30];/*dwAlarmTypeÎª2»ò3,6£¬9£¬10Ê±£¬±íÊ¾ÄÄ¸öÍ¨µÀ£¬dwChannel[0]¶ÔÓ¦µÚ1¸öÍ¨µÀ*/
    BYTE byDiskNumber[MAX_DISKNUM_V30];/*dwAlarmTypeÎª1,4,5Ê±,±íÊ¾ÄÄ¸öÓ²ÅÌ, dwDiskNumber[0]¶ÔÓ¦µÚ1¸öÓ²ÅÌ*/
    BYTE byDeviceID[NAME_LEN];/*Éè±¸µÄID´®*/
    BYTE byRes[7];
}NET_DVR_PUSHALARMINFO_V30, *LPNET_DVR_PUSHALARMINFO_V30;

//2011-04-20
//Æô¶¯¿ØÖÆ
typedef struct tagNET_DVR_MB_AUTOWORKPARA
{
    /*µ±Ç°Æô¶¯¿ØÖÆ·½Ê½ 0:  Ô¤Áô,  1:  ÑÓÊ±¹Ø»ú,  2:  ×Ô¶¯¿ª¹Ø»ú*/
    BYTE    byCurPowerCtrlType;   
    BYTE    byRes[3];
    NET_DVR_SCHEDTIME    struWorkTime[MAX_DAYS][2];    
}NET_DVR_MB_AUTOWORKPARA, *LPNET_DVR_MB_AUTOWORKPARA;

typedef struct tagNET_DVR_MB_POWERCTRLPARA
{
    DWORD    dwSize;
    DWORD     dwHaltDelay; /* ¹Ø»úÑÓ³ÙÊ±¼ä,µ¥Î»min */
    NET_DVR_MB_AUTOWORKPARA  struAutoWorkPara;/*Æô¶¯¿ØÖÆÏà¹Ø²ÎÊýÉèÖÃ*/
    BYTE       byEnableUnderVoltProtect;   /*ÊÇ·ñ¿ªÆôÇ·Ñ¹±£»¤*/
    BYTE       byUnderVoltPercent;   /*Ç·Ñ¹±£»¤°Ù·Ö±È£¬ÓÐ85¡¢90¡¢95Èý¸öÓÐÐ§Öµ*/
    BYTE       byRes[34];
}NET_DVR_MB_POWERCTRLPARA, *LPNET_DVR_MB_POWERCTRLPARA;
/*×¢£º1£©¡¢¹Ø»úÑÓ³ÙÊ±¼ä, ¿ÉÑ¡Ê±¼äÎª 0£¬5·ÖÖÓ£¬10·ÖÖÓ £¬20·ÖÖÓ 25·ÖÖÓ 30·ÖÖÓ 35·ÖÖÓ 40·ÖÖÓ £¬45 ·ÖÖÓ 50·ÖÖÓ £¬60·ÖÖÓ £¬60*2·ÖÖÓ £¬60*3  60 *4   60*5  60*6 */

//×Ô¶¯±¸·Ý
typedef struct tagNET_DVR_MB_AUTOBACKUPPARA
{
    DWORD dwSize;
    BYTE  byEnableAutoBackup; /* ÊÇ·ñ¿ªÆô×Ô¶¯±¸·Ý 0 ¹Ø±Õ £¬1 ¿ªÆô */
    BYTE  byRes1[3];
    BYTE  byBackupChannel[MAX_CHANNUM_V30];     /*ÐèÒª±¸·ÝµÄÍ¨µÀ*/
    BYTE  byBackupDays[MAX_CHANNUM_V30];/*±¸·ÝÌìÊý*/
                                        /* ±¸·ÝÎÄ¼þÀàÐÍ 
                                        {0,ALL_RECORD_TYPE,È«²¿},
                                        {1,TIMING_REC,¶¨Ê±},
                                        {2,MOTION_DETECT_REC,ÒÆ¶¯Õì²â },
                                        {3,ALARM_REC,±¨¾¯ },
    {4,MANUAL_REC,ÊÖ¶¯Â¼Ïñ}*/
    BYTE  byBackupFileType[MAX_CHANNUM_V30];
    NET_DVR_SCHEDTIME struBackupTime[MAX_CHANNUM_V30][2];    /* ×Ô¶¯±¸·ÝÊ±¼ä¶Î*/                
    BYTE  byRes2[36];                        /* ±£Áô×Ö½Ú*/
}NET_DVR_MB_AUTOBACKUPPARA, *LPNET_DVR_MB_AUTOBACKUPPARA;


typedef struct tagNET_DVR_MB_GPSPARA
{
    DWORD dwSize;
    BYTE  byEnableGPS;    /*ÊÇ·ñÆôÓÃGPS */
    BYTE  byGpsInterface;/*gps½ÓÊÕ½Ó¿Ú0-rs232, 1-rs485, 2-frontpanel, 3-lcd */
    BYTE  bySpeedUnit;  /*ËÙ¶Èµ¥Î»£¬0£º¹«Àï/Ð¡Ê±£¬1 £ºÓ¢Àï/Ð¡Ê±*/
    BYTE  byEnableRetrieve; /* Ã¤Çø²¹·¢(1ÆôÓÃ£¬0²»ÆôÓÃ) */
    int      iAdjustTime;/*Ê±Çø*/
    BYTE  byEnableAdjustTime;/*ÊÇ·ñÆôÓÃGPSÐ£Ê±£¬ 1-ÆôÓÃ, 0-²»Æô¶¯*/
    BYTE  byRes1[5];
    WORD  wGpsUploadInterval;    /* GPSÉÏ´«¼ä¸ô, Ãë*/
    BYTE  byGpsOsdChannel[MAX_CHANNUM_V30];/*OSD ÏÔÊ¾£¬Ã¿×Ö½Ú´ú±íÒ»Â· */
    DWORD dwSpeedLimit;    /* ÏÞËÙ±¨¾¯*/
    NET_DVR_HANDLEEXCEPTION_V30  struGpsAlarm; 
    BYTE  byRes2[36];
}NET_DVR_MB_GPSPARA, *LPNET_DVR_MB_GPSPARA;
/*×¢£º1£©¡¢µ±µ¥Î»Îª¹«Àï/Ð¡Ê± Ê±·¶Î§Îª£¨0 ,965£©£»µ±²ÉÓÃÓ¢Àï/Ð¡Ê±×öµ¥Î»µÄÊ±ºò £¬×î´óËÙ¶È·¶Î§Îª£º0-600*/

#define         SENSOR_IN_NUMBER          8
typedef struct tagNET_DVR_MB_SENSORINPARA
{
    DWORD dwSize;
    BYTE  byTriggerType[SENSOR_IN_NUMBER];/*ÐÐ³µ×´Ì¬Ïà¹Ø´¥·¢µÄÁª¶¯£¬Ö»ÓÃºó4¸ö£¬·Ö±ð´ú±íÉ²³µ¡¢×ó×ª¡¢ÓÒ×ª¡¢µ¹³µ£¬0-¸ßµçÆ½£¬1-µÍµçÆ½*/
    BYTE  byTriggerChannel [SENSOR_IN_NUMBER];
    BYTE  byOsdDisplay [MAX_CHANNUM_V30];/*OSDÏÔÊ¾,Ã¿Î»´ú±íÒ»Â·*/
    BYTE  byRes[32];
}NET_DVR_MB_SENSORINPARA, *LPNET_DVR_MB_SENSORINPARA;


typedef struct tagNET_DVR_ACCELERATIONCFG
{
    DWORD    dwMaxXAcc;    /* XÖá¼ÓËÙ¶È±¨¾¯Öµ £¬¸ÃÈ¡ÖµÎªÊµ¼ÊÊýÖµ³ËÒÔ10,×îÐ¡Îª0*/
    DWORD    dwMaxYAcc;    /* YÖá¼ÓËÙ¶È±¨¾¯Öµ £¬¸ÃÈ¡ÖµÎªÊµ¼ÊÊýÖµ³ËÒÔ10.×îÐ¡Îª0*/
    DWORD    dwMaxZAcc;    /* ZÖá¼ÓËÙ¶È±¨¾¯Öµ£¬ ¸ÃÈ¡ÖµÎªÊµ¼ÊÊýÖµ³ËÒÔ10,×îÐ¡Îª0*/
    BYTE    byRes[4];
}NET_DVR_ACCELERATIONCFG,*LPNET_DVR_ACCERATIONCFG;

typedef struct tagNET_DVR_GSENSORPARA
{
    DWORD dwSize;
    NET_DVR_ACCELERATIONCFG struAccelerationCfg;
    BYTE  byModuleSelect;/*Ä£¿éÑ¡Ôñ£º0ÄÚÖÃ/1ÍâÖÃ*/
    BYTE  byRes1[3];
    NET_DVR_HANDLEEXCEPTION_V30 struHandleException;
    BYTE  byRes2[24];    /*±£ÁôÀ©Õ¹×Ö½Ú*/
}NET_DVR_GSENSORPARA, *LPNET_DVR_GSENSORPARA;

typedef struct tagNET_DVR_MB_DOWNLOADSVRPARA
{
    DWORD dwSize;
    NET_DVR_IPADDR    struDownloadSvrIp;        /* ×Ô¶¯ÏÂÔØ·þÎñÆ÷µØÖ· */
    BYTE  byRes[64];
}NET_DVR_MB_DOWNLOADSVRPARA,*LPNET_DVR_MB_DOWNLOADSVRPARA;

/* ³µÅÆÊ¶±ðµÄÏà¹Ø²ÎÊý*/
typedef struct tagNET_DVR_PLATERECOG_PARA
{
    DWORD dwSize;
    BYTE byPrMode; /* ³µÅÆÊ¶±ðµÄÄ£Ê½, ¾²Ì¬Í¼Ïñ0/¶¯Ì¬ÊÓÆµ1 */
    BYTE byPrScene; /* ³µÅÆÊ¶±ðµÄ³¡¾°, µÍËÙ³¡¾°0/¸ßËÙ³¡¾°1 */
    BYTE byPrDetRect; /* 0:È«ÆÁÄ»;1:ÖÐÐÄÇøÓò */
    BYTE byPrPicQuality; /* ³µÅÆÊ¶±ð·µ»ØµÄÍ¼Æ¬ÖÊÁ¿, 0:×îµÍ/3:×î¸ß */    
    BYTE byPrPicMode;/*³µÅÆÊ¶±ð·µ»ØµÄÍ¼Æ¬·Ö±æÂÊ: JPEG_MODE_D1, JPEG_MODE_CIF, JPEG_MODE_QCIF */
    BYTE byPlateOsdDisplay; /* ³µÅÆOSDÊÇ·ñÏÔÊ¾ 0:²»ÏÔÊ¾/1:ÏÔÊ¾ */
    BYTE byPrProvCharIndex;    /* ³µÅÆÊ¶±ðÊ¡·ÝÊ×ºº×Ö¶ÔÓ¦µÄË÷Òý */
    BYTE byPrProvCharIndex1;    /* ³µÅÆÊ¶±ð³£¼ûÊ×ºº×Ö1¶ÔÓ¦µÄË÷Òý */
    BYTE byPrProvCharIndex2;    /* ³µÅÆÊ¶±ð³£¼ûÊ×ºº×Ö2¶ÔÓ¦µÄË÷Òý */
    BYTE byRes[7];
}NET_DVR_PLATERECOG_PARA, *LPNET_DVR_PLATERECOG_PARA;


/* ¶¯Ì¬È¡Ö¤ÏµÍ³,ÏÞËÙÉèÖÃ²ÎÊýµÄ½á¹¹*/
typedef struct tagNET_DVR_SPEEDLMT_PARA
{
    BYTE    bStartMaxSpeedLimit;        /* ¿ªÆô¸ßËÙÏÞÖÆ */
    BYTE    bStartMinSpeedLimit;        /* ¿ªÆôµÍËÙÏÞÖÆ */
    BYTE    byRes[6];
    DWORD    dwMaxSpeedLimit;                /* ×î¸ßÏÞËÙ */
    DWORD    dwMinSpeedLimit;                /* ×îµÍÏÞËÙ */
}NET_DVR_SPEEDLMT_PARA, *LPNET_DVR_SPEEDLMT_PARA;

/* ¶¯Ì¬È¡Ö¤ÏµÍ³,³µÅÆ±È¶Ô²ÎÊýµÄ½á¹¹*/
typedef struct tagNET_DVR_PLATECHECK_PARA
{
    BYTE    bAlarmWhenChecked;            /* »ü²é³É¹¦ÊÇ·ñ±¨¾¯ */
    BYTE    bInformWhenChecked;            /* »ü²é³É¹¦ÊÇ·ñ¶Ô»°¿òÌáÊ¾ */
    BYTE    byRes[6];
    NET_DVR_IPADDR struBlackFtpServer;            /* ºÚÃûµ¥FTP·þÎñÆ÷µØÖ· */
}NET_DVR_PLATECHECK_PARA, *LPNET_DVR_PLATECHECK_PARA;

typedef struct tagNET_DVR_ENFORCESYS_PARA
{
    DWORD dwSize;
    NET_DVR_SPEEDLMT_PARA    struSpeedLmtPara;    /*ÏÞËÙÉèÖÃ*/
    NET_DVR_PLATECHECK_PARA struPlateCheckPara;    /*³µÅÆ±È¶Ô*/
    BYTE    bySelPeccType;    /*ÊÇ·ñÑ¡ÔñÎ¥ÕÂÀàÐÍ*/
    BYTE    byEnfOptHabit; /*È¡Ö¤²Ù×÷Ï°¹ß, 0:³¤°´È¡Ö¤;1:¶Ì°´Á½´ÎÈ¡Ö¤*/
                           /*Ô¤ÀÀÖ¡ÂÊµ÷½ÚÄ£Ê½·ÖÈýÖÖ£º
                           A ¹Ø±Õ adjPrevFpsMode=0
                           ÒÔ¹Ì¶¨¸ßÖ¡ÂÊ(25FPS)Ô¤ÀÀ
                           B ±ê×¼ adjPrevFpsMode=1
                           ÒÔ¹Ì¶¨µÍÖ¡ÂÊ(6FPS)Ô¤ÀÀ
                           C ×ÔÊÊÓ¦ adjPrevFpsMode=2
                           ¸ù¾ÝGPSËÙ¶ÈÐÅÏ¢¶¯Ì¬µ÷ÕûÔ¤ÀÀÖ¡ÂÊ£¬
    3ÃëÎÞÓÐÐ§GPSµÄÇé¿öÏÂ£¬ÒÔ¹Ì¶¨¸ßÖ¡ÂÊÔ¤ÀÀ*/
    BYTE    byAdjPrevFpsMode;        
    BYTE    byRes1;
    NET_DVR_IPADDR  struUploadServerIp; //ÉÏ´«·þÎñÆ÷µØÖ·
    WORD    wUploadServerPort;
    BYTE    byRes2[18];
}NET_DVR_ENFORCESYS_PARA, *LPNET_DVR_ENFORCESYS_PARA;

typedef struct tagNET_DVR_PUSHMODEPARAM
{
    //Ö±Á¬Ä£Ê½ÏÂUDPÔ¤ÀÀÄ£Ê½£¬1-Í¬¶Ë¿Ú¶àÂ·Á÷£¬2-Ò»¶Ë¿ÚÒ»Â·Á÷
    BYTE byUdpPreviewMode; 
    //ÓïÒô¶Ô½²¹¤×÷Ä£Ê½£¬0-ÓïÒô¶Ô½²£¬1-ÓïÒô×ª·¢£¨SDK²»½øÐÐÓïÒôµÄ²É¼¯ºÍ²¥·Å£©
    BYTE byVoiceWorkMode; 
    BYTE byRes[18];    
}NET_DVR_PUSHMODEPARAM, *LPNET_DVR_PUSHMODEPARAM;

#define MAX_ALARMHOST_ALARMIN_NUM            512//ÍøÂç±¨¾¯Ö÷»ú×î´ó±¨¾¯ÊäÈë¿ÚÊý
#define MAX_ALARMHOST_ALARMOUT_NUM            512//ÍøÂç±¨¾¯Ö÷»ú×î´ó±¨¾¯Êä³ö¿ÚÊý

#define ALARMHOST_MAX_AUDIOOUT_NUM            32//ÍøÂç±¨¾¯Ö÷»ú×î´óÓïÒôÊä³öÊý
#define ALARMHOST_MAX_ELECTROLOCK_NUM        32//ÍøÂç±¨¾¯Ö÷»ú×î´óµçËøÊý
#define ALARMHOST_MAX_MOBILEGATE_NUM        32//ÍøÂç±¨¾¯Ö÷»ú×î´óÒÆ¶¯ÃÅÊý
#define ALARMHOST_MAX_SIREN_NUM             8 // ×î´ó¾¯ºÅÊýÄ¿
#define MAX_ALARMHOST_SUBSYSTEM             32//±¨¾¯Ö÷»ú×î´ó×ÓÏµÍ³Êý

//´«¸ÐÆ÷ÀàÐÍ
typedef enum tagSENSOR_TYPE
{
    SENSOR_TYPE_NONE = 0,                   // ÎÞ
        SENSOR_TYPE_TEMPERATURE = 1,            // ÎÂ¶È
        SENSOR_TYPE_HUMIDITY ,                  // Êª¶È
        SENSOR_TYPE_WINDSPEED,                  // ·çËÙ
        SENSOR_TYPE_GAS,                        // ÆøÌå
        SENSOR_AC_VOLTAGE,                      // ½»Á÷µçÑ¹
        SENSOR_AC_CURRENT,                      // ½»Á÷µçÁ÷
        SENSOR_DC_VOLTAGE,                      // Ö±Á÷µçÑ¹
        SENSOR_DC_CURRENT,                      // Ö±Á÷µçÁ÷
        SENSOR_WATER_PRESSURE,                  // Ë®Ñ¹
        SENSOR_PRESSURE_TRANSMITTER,            // Ñ¹Á¦±äËÍÆ÷
        SENSOR_FLOW_TRANSMITTER,                // Á÷Á¿±äËÍÆ÷
        SENSOR_WATER_LEAKAGE,                   // Â©Ë®´«¸ÐÆ÷
        SENSOR_INTERGRATED_TEMPERATURE_DETECTOR,//Ò»Ìå»¯ÎÂ±ä
        SENSOR_ISOLATION_TEMPERATURE_DETECTOR,  //¸ôÀëÊ½ÎÂ±ä
        SENSOR_RESIDUAL_CHLORINE,               //ÔÚÏßÓàÂÈÒÇ
        SENSOR_TYPE_AC_TERMINAL = 16,           //AC¶Ë×Ó              
        SENSOR_TYPE_AC_SOCKET = 17,             //AC²å×ù
        SENSOR_TYPE_UNKNOW = 255                // Î´¶¨Òå
}SENSOR_TYPE;

typedef struct tagNET_DVR_SENSOR_INFO
{
    DWORD  dwSize;                 // ½á¹¹Ìå´óÐ¡
    BYTE    byName[NAME_LEN];    // ´«¸ÐÆ÷Ãû³Æ
    BYTE    byEnable;               // ÊÇ·ñÆôÓÃ 
    BYTE    byValid;                // ÊÇ·ñÓÐÐ§ ´«¸ÐÆ÷Õý³£²»Õý³£(¸Ã²ÎÊýÖ»ÄÜ»ñÈ¡²»ÄÜ¸öÅäÖÃ)
    BYTE    byType;                 // Ä£ÄâÁ¿ÀàÐÍ ²ÎÕÕSENSOR_TYPE
    BYTE    byAlarmMode;//±¨¾¯Ä£Ê½£¬ÎåÖÖ£¬15-HHHH¡¢14-HHHL¡¢12-HHLL¡¢8HLLL¡¢0-LLLL£¬¼´£º1111£¨ÉÏÉÏÉÏÉÏ£©£¬1110£¨ÉÏÉÏÉÏÏÂ£©£¬1100£¨ÉÏÉÏÏÂÏÂ£©£¬1000(ÉÏÏÂÏÂÏÂ)£¬0000(ÏÂÏÂÏÂÏÂ)
    float   fMeasureHigh;           // Á¿³ÌÉÏÏÞ
    float   fMeasureLow;            // Á¿³ÌÏÂÏÞ
    float    fAlarm1;           //±¨¾¯ÏÞ1,±¨¾¯ÏÞ1-4 ÒÀ´ÎÔö´ó
    float    fAlarm2;           //±¨¾¯ÏÞ2
    float    fAlarm3;           //±¨¾¯ÏÞ3
    float    fAlarm4;           //±¨¾¯ÏÞ4
    DWORD   dwOsdCfg;          //Ä£ÄâÁ¿×Ö·ûµþ¼Ó£¬°´Î»±íÊ¾0-15¶ÔÓ¦ÊÓÆµÍ¨µÀ1-16
    float    fSensitive;            // ÁéÃô¶È±íÊ¾µ±ÊµÊ±ÖµµÄ±ä»¯³¬¹ýÁéÃô¶ÈµÄ·¶Î§Ê±£¬Ôò±íÊ¾ÊµÊ±Öµ·¢ÉúÁË±ä»¯£¬·ñÔòÈÏÎªÃ»ÓÐ·¢Éú±ä»¯¡£Èç£ºÁéÃô¶ÈÎª0.1£¬Ôò±íÊ¾Ç°ºó¼ì²âµÄÁ½¸öÖµÖ®²î´óÓÚ0.1Ê±£¬ÔòÈÏÎªÊý¾Ý·¢Éú±ä»¯´óÓÚ0.1£¬ÐèÒªÉÏ´«¡£Èç¹ûÎª1£¬Ôò±íÊ¾±ä»¯³¬¹ý1Ê±ÉÏ±¨¡£
    BYTE    bySensorStandard;    //´«¸ÐÆ÷¹æ¸ñ£¬0- 0~20mA£¬1, 0~5V
    BYTE    byChan;            //Ä£ÄâÁ¿Í¨µÀºÅ
    BYTE    byRes3[114];            // ±£Áô×Ö½Ú
}NET_DVR_SENSOR_INFO, *LPNET_DVR_SENSOR_INFO;

typedef struct tagNET_DVR_SIREN_PARAM
{
    DWORD   dwSize;                    // ½á¹¹´óÐ¡
    BYTE    byName[NAME_LEN];        // Ãû³Æ
    WORD    wDelay;                    // Êä³öÑÓ³Ù µ¥Î»ÎªÃë, ·¶Î§ 0~5599s 0±íÊ¾Ò»Ö±ÓÐÊä³ö
    BYTE    byRes1[2];
    DWORD   dwOverallEventJointSirenOn;        //È«¾ÖÊÂ¼þÁª¶¯¾¯ºÅÊä³ö¿ªÆô£¬ÊÂ¼þÀàÐÍ°´Î»±íÊ¾£¬bit0-Ö÷»ú·À²ð, bit1-È«¾Ö¼üÅÌ½ô¼±±¨¾¯,bit2-½»Á÷µç¶Ïµç£¬bit3-µç³ØµçÑ¹µÍ,bit4-µç»°ÏßµôÏß,bit5-ÓÐÏßÍøÂçÒì³£,bit6-ÎÞÏßÍøÂçÒì³£,  bit7-¼üÅÌ485¶ÏÏß
    DWORD    dwSubsystemEventJointSirenOn[MAX_ALARMHOST_SUBSYSTEM/*32*/];//×ÓÏµÍ³ÊÂ¼þÁª¶¯¾¯ºÅÊä³ö¿ªÆô¡£Êý×éÏÂ±ê±íÊ¾×ÓÏµÍ³ºÅ£¬Ã¿Ò»¸öÔªËØ°´Î»±íÊ¾ÊÂ¼þÀàÐÍ£¬bit0-½ô¼±±¨¾¯
    BYTE    byRes2[448];  // ±£Áô×Ö½Ú¡¡¡¡
}NET_DVR_SIREN_PARAM, *LPNET_DVR_SIREN_PARAM;

typedef struct tagNET_DVR_AIR_CONDITION_PARAM
{
    DWORD    dwSize;        // ½á¹¹Ìå´óÐ¡
    BYTE    byEnable;    // 0--¹Ø»ú 1--¿ª»ú
    BYTE    byMode;        // ¿Õµ÷Ä£Ê½
    BYTE    byTemperature;    // ÎÂ¶È£¬¾ßÌåÖµ±íÊ¾ Í¨³£Îª16-30¶È
    BYTE    byRes[9];        // ±£Áô×Ö½Ú
}NET_DVR_AIR_CONDITION_PARAM, *LPNET_DVR_AIR_CONDITION_PARAM;

typedef enum tagDETECTOR_TYPE
{
    PANIC_BUTTON = 0,               // ½ô¼±¿ª¹Ø
        MAGNETIC_CONTACT,               // ÃÅ´Å¿ª¹Ø
        SMOKE_DETECTOR,                 // ÑÌ¸ÐÌ½²âÆ÷
        ACTIVE_INFRARED_DETECTOR,       // Ö÷¶¯ºìÍâÌ½²âÆ÷
        PASSIVE_INFRARED_DETECTOR,      // ±»¶¯ºìÍâÌ½²âÆ÷
        GLASS_BREAK_DETECTOR,           // ²£Á§ÆÆËéÌ½²âÆ÷
        VIBRATION_DETECTOR,             // Õð¶¯Ì½²âÆ÷
        DUAL_TECHNOLOGY_PIR_DETECTOR,   // Ë«¼øÒÆ¶¯Ì½²âÆ÷
        TRIPLE_TECHNOLOGY_PIR_DETECTOR, // Èý¼¼ÊõÌ½²âÆ÷
        HUMIDITY_DETECTOR,              // Êª¶ÈÌ½²âÆ÷
        TEMPERATURE_DETECTOR,           // ÎÂ¸ÐÌ½²âÆ÷
        COMBUSTIBLE_GAS_DETECTOR,        // ¿ÉÈ¼ÆøÌåÌ½²âÆ÷
        DYNAMIC_SWITCH,                    //Ëæ¶¯¿ª¹Ø
        CONTROL_SWITCH,                    //¿ØÖÆ¿ª¹Ø
        SMART_LOCK,                        //ÖÇÄÜËø
        OTHER_DETECTOR = 0xffff          // ÆäËûÌ½²âÆ÷   
}DETECTOR_TYPE;

typedef struct tagNET_DVR_ALARMIN_PARAM
{
    DWORD   dwSize;
    BYTE    byName[NAME_LEN];
    WORD    wDetectorType; // DETECTOR_TYPE
    BYTE    byType;     //·ÀÇøÀàÐÍ£¬0:¼´Ê±·ÀÇø,1-24Ð¡Ê±·ÀÇø,2-ÑÓÊ±·ÀÇø ,3-ÄÚ²¿·ÀÇø£¬4-Ô¿³×·ÀÇø 5-»ð¾¯·ÀÇø 6-ÖÜ½ç·ÀÇø 7-24Ð¡Ê±ÎÞÉù·ÀÇø  8-24Ð¡Ê±¸¨Öú·ÀÇø£¬9-24Ð¡Ê±Õð¶¯·ÀÇø 0xff-ÎÞ
    BYTE    byUploadAlarmRecoveryReport;    //ÊÇ·ñÉÏ´«·ÀÇø±¨¾¯»Ö¸´±¨¸æ£¬0-²»ÉÏ´«£¬1-ÉÏ´«        
    DWORD    dwParam;    // ·ÀÇø²ÎÊý  ÑÓÊ±·ÀÇøÑÓÊ±¶à³¤Ê±¼ä, ¶¯»·±¨¾¯Ö÷»úºÍ×ÔÖúÐÐ±¨¾¯Ö÷»úµÄÑÓÊ±Ê±¼äÍ¨¹ýÕâ¸ö²ÎÊýÀ´ÉèÖÃ , ¾ßÌåÓÃÄÄÖÖÉèÖÃ·½Ê½Í¨¹ýÄÜÁ¦¼¯ÖÐµÄbySupportAlarmInDelay×Ö¶ÎÀ´Çø±ð
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT];/*²¼·ÀÊ±¼äÊ±¼ä¶Î*/
    BYTE    byAssociateAlarmOut[MAX_ALARMHOST_ALARMOUT_NUM];  // ±¨¾¯ÊäÈë¹ØÁª±¨¾¯Êä³ö
    BYTE    byAssociateSirenOut[8];        //  ¾¯ºÅÊä³ö Êý×é0 ±íÊ¾¾¯ºÅ1 ÖµÎª1±íÊ¾Êä³ö 0 ±íÊ¾²»Êä³ö
    BYTE    bySensitivityParam;//·ÀÇøÁéÃô¶È²ÎÊý, 0-10ms¡¢1-250ms¡¢2-500ms¡¢3-750ms
    BYTE    byArrayBypass;//ÊÇ·ñ¼ÓÈëÅÔÂ·×é,0-²»Ö§³Ö×éÅÔÂ·,1-Ö§³Ö×éÅÔÂ·
    BYTE    byJointSubSystem; //·ÀÇøËùÊôµÄ×ÓÏµÍ³ºÅ£¬¸Ã²ÎÊýÖ»ÄÜ»ñÈ¡  
    BYTE    byModuleStatus;    //Ä£¿é×´Ì¬ 1-ÔÚÏß 2-ÀëÏß
    WORD    wModuleAddress;    //Ä£¿éµØÖ·£¬À©Õ¹Ä£¿é´Ó0~255£¬0xFFFF±íÊ¾ÎÞÐ§
    BYTE    byModuleChan;    //Ä£¿éÍ¨µÀºÅ£¬´Ó1¿ªÊ¼£¬×î´óÖµ¸ù¾ÝÄ£¿éÀàÐÍÀ´¾ö¶¨£¬0xFF±íÊ¾ÎÞÐ§
    BYTE    byModuleType;    //Ä£¿éÀàÐÍ£¬1-±¾µØ·ÀÇø£¬2-µ¥·ÀÇø£¬3-Ë«·ÀÇø£¬4-8·ÀÇø£¬5-8Â·Ä£ÄâÁ¿·ÀÇø, 6-µ¥·ÀÇø´¥·¢Æ÷
    WORD    wZoneIndex;        //·ÀÇøºÅ£¬¸Ã²ÎÊýÖ»ÄÜ»ñÈ¡      
    WORD    wInDelay;    //½øÈëÑÓÊ±£¬0-255Ãë
    WORD    wOutDelay;    //ÍË³öÑÓÊ±£¬0-255Ãë
    BYTE    byAlarmType;     //±¨¾¯Æ÷ÀàÐÍ 0-ÎÞÐ§£¬1-³£¿ª£¬2-³£±Õ
    BYTE    byZoneResistor;    //·ÀÇøµç×è£¬µ¥Î»Ç§Å·  0-ÎÞÐ§ 1--2.2 £¬2--3.3£¬3--4.7£¬4--5.6 £¬ 5--8.2 £¬0xff-×Ô¶¨Òå
    float    fZoneResistorManual;/*·ÀÇøÊÖ¶¯µç×è£¬1.0-10.0£¬¾«È·µ½Ð¡ÊýµãºóÒ»Î»£¬µ¥Î»Ç§Å·£¬byZoneResistorÎª0xffÊ±ÓÐÐ§*/
    BYTE    byRes2[32];      // ±£Áô×Ö½Ú
}NET_DVR_ALARMIN_PARAM, *LPNET_DVR_ALARMIN_PARAM;

#define MAX_MAX_ALARMIN_NUM			64	/* ÅúÁ¿»ñÈ¡×î´ó·ÀÇøÊý*/
typedef	struct tagNET_DVR_MULTI_ALARMIN_COND
{
    DWORD	dwSize;
    int		iZoneNo[MAX_MAX_ALARMIN_NUM];	//·ÀÇøºÅ,´Ó0¿ªÊ¼£¬Ð¡ÓÚ0±íÊ¾ÎÞÐ§
    BYTE	byRes[256];
}NET_DVR_MULTI_ALARMIN_COND, *LPNET_DVR_MULTI_ALARMIN_COND;

typedef struct tagNET_DVR_SINGLE_ALARMIN_PARAM
{
    DWORD   dwSize;
    WORD	wZoneNo;		//·ÀÇøºÅ£¬¸Ã²ÎÊýÖ»ÄÜ»ñÈ¡
    BYTE	byJointSubSystem; //·ÀÇøËùÊôµÄ×ÓÏµÍ³ºÅ£¬¸Ã²ÎÊýÖ»ÄÜ»ñÈ¡ 
    BYTE    byType;			//·ÀÇøÀàÐÍ£¬0:¼´Ê±·ÀÇø,1-24Ð¡Ê±·ÀÇø,2-ÑÓÊ±·ÀÇø ,3-ÄÚ²¿·ÀÇø£¬4-Ô¿³×·ÀÇø 5-»ð¾¯·ÀÇø 6-ÖÜ½ç·ÀÇø 7-24Ð¡Ê±ÎÞÉù·ÀÇø  8-24Ð¡Ê±¸¨Öú·ÀÇø£¬9-24Ð¡Ê±Õð¶¯·ÀÇø 0xff-ÎÞ
    BYTE    byName[NAME_LEN];
    WORD    wDetectorType;	// DETECTOR_TYPE
    WORD    wInDelay;		//½øÈëÑÓÊ±£¬0-255Ãë
    WORD    wOutDelay;		//ÍË³öÑÓÊ±£¬0-255Ãë
    BYTE    byAlarmType;    //±¨¾¯Æ÷ÀàÐÍ  0-ÎÞÐ§ 1-³£¿ª 1-³£±Õ
    BYTE    byRes3[129];	// ±£Áô×Ö½Ú
}NET_DVR_SINGLE_ALARMIN_PARAM, *LPNET_DVR_SINGLE_ALARMIN_PARAM;

typedef struct tagNET_DVR_ALARMIN_PARAM_LIST
{
    DWORD	dwSize;
    NET_DVR_SINGLE_ALARMIN_PARAM	struSingleAlarmInParam[MAX_MAX_ALARMIN_NUM];
    BYTE	byRes[128];
}NET_DVR_ALARMIN_PARAM_LIST, *LPNET_DVR_ALARMIN_PARAM_LIST;

typedef struct tagNET_DVR_ALARMOUT_PARAM
{
    DWORD   dwSize;             // ½á¹¹Ìå´óÐ¡
    BYTE    byName[NAME_LEN];   // Ãû³Æ
    WORD    wDelay;             // Êä³öÑÓ³Ù µ¥Î»s, ·¶Î§£º0~3599s 0 ±íÊ¾Ò»Ö±ÓÐÊä³ö
    WORD    wTriggerIndex;        //´¥·¢Æ÷ºÅ£¬¸Ã²ÎÊýÖ»ÄÜ»ñÈ¡
    BYTE    byAssociateAlarmIn[MAX_ALARMHOST_ALARMIN_NUM];   //±íÊ¾¾¯ºÅ¸úËæµÄ±¨¾¯ÊäÈëÍ¨µÀ £¨¶à¸ö±¨¾¯ÊäÈëÍ¬Ê±´¥·¢Ò»¸ö¾¯ºÅÊä³ö£©Êý×éÏÂ±ê0±íÊ¾±¨¾¯ÊäÈë1£¬ÒÀ´ÎÀàÍÆ 0-²»¸úËæ 1-¸úËæ
    BYTE    byModuleType;    //Íâ½Ó´¥·¢Æ÷ÀàÐÍ£¬1-±¾µØ´¥·¢Æ÷£¬ 2-4Â·´¥·¢Æ÷£¬3-8Â·´¥·¢Æ÷ 4-µ¥·ÀÇø´¥·¢Æ÷£¬5-32Â·´¥·¢Æ÷
    BYTE    byModuleStatus;    //Íâ½Ó´¥·¢Æ÷×´Ì¬ 1-ÔÚÏß 2-ÀëÏß
    WORD    wModuleAddress;    //Íâ½Ó´¥·¢Æ÷µØÖ·£¬À©Õ¹Ä£¿é´Ó0~255£¬0xFFFF±íÊ¾ÎÞÐ§
    BYTE    byModuleChan;    //Íâ½Ó´¥·¢Æ÷Í¨µÀºÅ£¬´Ó1¿ªÊ¼£¬×î´óÖµ¸ù¾ÝÄ£¿éÀàÐÍÀ´¾ö¶¨£¬0xFF±íÊ¾ÎÞÐ§
    BYTE    byWorkMode;        //¹¤×÷Ä£Ê½£¬1-Áª¶¯£¬2-Ëæ¶¯
    BYTE    byAlarmOutMode;    //Êä³öÄ£Ê½£¬1-·ÇÂö³åÄ£Ê½£¬2-Âö³åÄ£Ê½
    BYTE    byTimeOn;        //¿ªÊ±¼ä 1~60s
    BYTE    byTimeOff;        //¹ØÊ±¼ä 1~60s
    BYTE       byRes2[51];             //±£Áô×Ö½Ú
}NET_DVR_ALARMOUT_PARAM, *LPNET_DVR_ALARMOUT_PARAM;

typedef struct tagNET_DVR_ALARMIN_SETUP
{
    BYTE byAssiciateAlarmIn[MAX_ALARMHOST_ALARMIN_NUM];//±¨¾¯ÊäÈëÍ¨µÀ Êý×éÏÂ±ê0¶ÔÓ¦±¨¾¯ÊäÈë¿Ú1£¬ÒÀ´ÎÀàÍÆ
    BYTE byRes[100];//±£Áô×Ö½Ú
}NET_DVR_ALARMIN_SETUP, *LPNET_DVR_ALARMIN_SETUP;

typedef struct tagNET_DVR_ALARMHOST_MAIN_STATUS
{
    DWORD  dwSize; 
    BYTE   bySetupAlarmStatus[MAX_ALARMHOST_ALARMIN_NUM];//±¨¾¯ÊäÈë¿Ú²¼·À×´Ì¬£¬(×î´óÖ§³Ö512¸ö±¨¾¯ÊäÈë¿Ú²éÑ¯)£¬0-¶ÔÓ¦±¨¾¯ÊäÈë¿Ú´¦ÓÚ³··À×´Ì¬£¬1-¶ÔÓ¦±¨¾¯ÊäÈë¿Ú´¦ÓÚ²¼·À×´Ì¬
    BYTE   byAlarmInStatus[MAX_ALARMHOST_ALARMIN_NUM];//±¨¾¯ÊäÈë¿Ú±¨¾¯×´Ì¬£¬(×î´óÖ§³Ö512¸ö±¨¾¯ÊäÈë¿Ú²éÑ¯)£¬0-¶ÔÓ¦±¨¾¯ÊäÈë¿Úµ±Ç°ÎÞ±¨¾¯£¬1-¶ÔÓ¦±¨¾¯ÊäÈë¿Úµ±Ç°ÓÐ±¨¾¯
    BYTE   byAlarmOutStatus[MAX_ALARMHOST_ALARMOUT_NUM];//±¨¾¯Êä³ö¿Ú×´Ì¬£¬(×î´óÖ§³Ö512¸ö±¨¾¯Êä³ö¿Ú²éÑ¯)£¬0-¶ÔÓ¦±¨¾¯Êä³ö¿ÚÎÞ±¨¾¯£¬1-¶ÔÓ¦±¨¾¯Êä³ö¿ÚÓÐ±¨¾¯
    BYTE   byBypassStatus[MAX_ALARMHOST_ALARMIN_NUM];  // ÅÔÂ·×´Ì¬ Êý×éÏÂ±ê±íÊ¾0¶ÔÓ¦±¨¾¯ÊäÈë¿Ú1 0-±íÊ¾±¨¾¯ÊäÈë¿ÚÃ»ÓÐÅÔÂ· 1-±íÊ¾±¨¾¯ÊäÈë¿ÚÅÔÂ·
    BYTE   bySubSystemGuardStatus[MAX_ALARMHOST_SUBSYSTEM]; //×ÓÏµÍ³²¼·À×´Ì¬,0-¶ÔÓ¦×ÓÏµÍ³´¦ÓÚ³··À×´Ì¬£¬1-¶ÔÓ¦×ÓÏµÍ³´¦ÓÚ²¼·À×´Ì¬
    BYTE   byAlarmInFaultStatus[MAX_ALARMHOST_ALARMIN_NUM];//±¨¾¯ÊäÈë¿Ú¹ÊÕÏ×´Ì¬£¬0-¶ÔÓ¦±¨¾¯ÊäÈë¿Ú´¦ÓÚÕý³£×´Ì¬£¬1-¶ÔÓ¦±¨¾¯ÊäÈë¿Ú´¦ÓÚ¹ÊÕÏ×´Ì¬
    BYTE   byRes[56];      //  ±£Áô×Ö½Ú
}NET_DVR_ALARMHOST_MAIN_STATUS, *LPNET_DVR_ALARMHOST_MAIN_STATUS;

typedef struct tagNET_DVR_ALARMHOST_MAIN_STATUS_V40
{
    DWORD  dwSize; 
    BYTE   bySetupAlarmStatus[MAX_ALARMHOST_ALARMIN_NUM];//·ÀÇø²¼·À×´Ì¬£¬(×î´óÖ§³Ö512¸ö·ÀÇø²éÑ¯)£¬0-¶ÔÓ¦·ÀÇø´¦ÓÚ³··À×´Ì¬£¬1-¶ÔÓ¦·ÀÇø´¦ÓÚ²¼·À×´Ì¬
    BYTE   byAlarmInStatus[MAX_ALARMHOST_ALARMIN_NUM];//·ÀÇø±¨¾¯×´Ì¬£¬(×î´óÖ§³Ö512¸ö·ÀÇø²éÑ¯)£¬0-¶ÔÓ¦·ÀÇøµ±Ç°ÎÞ±¨¾¯£¬1-¶ÔÓ¦·ÀÇøµ±Ç°ÓÐ±¨¾¯
    BYTE   byAlarmOutStatus[MAX_ALARMHOST_ALARMOUT_NUM];//´¥·¢Æ÷×´Ì¬£¬(×î´óÖ§³Ö512¸ö´¥·¢Æ÷²éÑ¯)£¬0-¶ÔÓ¦´¥·¢Æ÷ÎÞ±¨¾¯£¬1-¶ÔÓ¦´¥·¢Æ÷ÓÐ±¨¾¯
    BYTE   byBypassStatus[MAX_ALARMHOST_ALARMIN_NUM];  // ÅÔÂ·×´Ì¬ Êý×éÏÂ±ê±íÊ¾0¶ÔÓ¦·ÀÇø1 0-±íÊ¾·ÀÇøÃ»ÓÐÅÔÂ· 1-±íÊ¾·ÀÇøÅÔÂ·
    BYTE   bySubSystemGuardStatus[MAX_ALARMHOST_SUBSYSTEM/*32*/]; //×ÓÏµÍ³²¼·À×´Ì¬,0-¶ÔÓ¦×ÓÏµÍ³´¦ÓÚ³··À×´Ì¬£¬1-¶ÔÓ¦×ÓÏµÍ³´¦ÓÚ²¼·À×´Ì¬
    BYTE   byAlarmInFaultStatus[MAX_ALARMHOST_ALARMIN_NUM];//·ÀÇø¹ÊÕÏ×´Ì¬£¬0-¶ÔÓ¦·ÀÇø´¦ÓÚÕý³£×´Ì¬£¬1-¶ÔÓ¦·ÀÇø´¦ÓÚ¹ÊÕÏ×´Ì¬
    BYTE   byAlarmInMemoryStatus[MAX_ALARMHOST_ALARMIN_NUM];//·ÀÇø±¨¾¯¼ÇÒä×´Ì¬£¬ 0-¶ÔÓ¦·ÀÇøµ±Ç°ÎÞ±¨¾¯£¬1-¶ÔÓ¦·ÀÇøµ±Ç°ÓÐ±¨¾¯£¬0xffffff
    BYTE   byAlarmInTamperStatus[MAX_ALARMHOST_ALARMIN_NUM]; // ·ÀÇø·À²ð×´Ì¬£¬0-¶ÔÓ¦·ÀÇøÎÞ±¨¾¯£¬1-¶ÔÓ¦·ÀÇøÓÐ±¨¾¯
    BYTE   byEnableSubSystem[MAX_ALARMHOST_SUBSYSTEM/*32*/]; //×ÓÏµÍ³ÆôÓÃ×´Ì¬£¬0-ÎÞÐ§£¬1-¶ÔÓ¦×ÓÏµÍ³Î´ÆôÓÃ£¬2-¶ÔÓ¦×ÓÏµÍ³ÆôÓÃ
    BYTE   bySubSystemGuardType[MAX_ALARMHOST_SUBSYSTEM];/* 0-ÎÞÐ§£¬1-Íâ³ö²¼·À£¬2-¼´Ê±²¼·À£¬3-ÁôÊØ²¼·À*/
    BYTE   byRes[448];      //  ±£Áô×Ö½Ú
}NET_DVR_ALARMHOST_MAIN_STATUS_V40, *LPNET_DVR_ALARMHOST_MAIN_STATUS_V40;

typedef struct tagNET_DVR_ALARMHOST_OTHER_STATUS
{
    DWORD  dwSize;
    BYTE   bySirenStatus[ALARMHOST_MAX_SIREN_NUM];    // ¾¯ºÅÊä³ö×´Ì¬ 0-¾¯ºÅ´¦ÓÚÎÞ±¨¾¯×´Ì¬£¬1-¾¯ºÅ´¦ÓÚÓÐ±¨¾¯×´Ì¬
    BYTE   byRes[92];             // ±£Áô×Ö½Ú
}NET_DVR_ALARMHOST_OTHER_STATUS, *LPNET_DVR_ALARMHOST_OTHER_STATUS;

//Ê¹ÄÜ×´Ì¬ÅäÖÃ
typedef struct tagNET_DVR_ALARMHOST_ENABLECFG
{
    DWORD dwSize;
    BYTE  byAudioOutEnable[ALARMHOST_MAX_AUDIOOUT_NUM];//ÓïÒôÊä³öÊ¹ÄÜ£¬0-½ûÄÜ£¬1-Ê¹ÄÜ
    BYTE  byElectroLockEnable[ALARMHOST_MAX_ELECTROLOCK_NUM];//µçËøÊ¹ÄÜ£¬0-½ûÄÜ£¬1-Ê¹ÄÜ
    BYTE  byMobileGateEnable[ALARMHOST_MAX_MOBILEGATE_NUM];//ÒÆ¶¯ÃÅÊ¹ÄÜ£¬0-½ûÄÜ£¬1-Ê¹ÄÜ
    BYTE  bySirenEnable[ALARMHOST_MAX_SIREN_NUM];//¾¯ºÅÊ¹ÄÜ£¬ 0-½ûÄÜ£¬1-Ê¹ÄÜ
    BYTE  bySerialPurpose;//´®¿ÚÓÃÍ¾£¬0-ÓÃÓÚ¼¶Áª±¨¾¯Ö÷»ú£¬1-ÓÃÓÚPTZ¿ØÖÆ
    BYTE  byRes[63];    
}NET_DVR_ALARMHOST_ENABLECFG, *LPNET_DVR_ALARMHOST_ENABLECFG;

typedef struct tagNET_DVR_ALARMHOST_ABILITY
{
    DWORD   dwSize;                      // ½á¹¹Ìå´óÐ¡
    WORD    wTotalAlarmInNum;         // ±¨¾¯ÊäÈë¿Ú×ÜÊý(·ÀÇø),°üÀ¨¼¶Áª
    WORD    wLocalAlarmInNum;         // ±¾µØ±¨¾¯ÊäÈë¿Ú
    WORD    wExpandAlarmInNum;        // ¿ÉÀ©Õ¹µÄ±¨¾¯ÊäÈë¿Ú
    WORD    wTotalAlarmOutNum;        // ±¨¾¯Êä³ö¿Ú×ÜÊý £¨Éè±¸Ö§³ÖµÄ×ÜÊý£©
    WORD    wLocalAlarmOutNum;        // ±¾µØ±¨¾¯Êä³ö¿Ú¸öÊý
    WORD    wExpandAlarmOutNum;       // ¿ÉÀ©Õ¹µÄ±¨¾¯Êä³ö¿Ú
    WORD    wTotalRs485Num;           // ±¨¾¯Êä³ö¿Ú×ÜÊý £¨Éè±¸Ö§³ÖµÄ×ÜÊý£©
    WORD    wLocalRs485Num;           // ±¾µØ485¿ÚÊý
    WORD    wExpandRs485Num;          // ¿ÉÀ©Õ¹µÄ485¿ÚÊý
    WORD    wFullDuplexRs485Num;    // È«Ë«¹¤µÄ485¿ÚÊý
    WORD    wTotalSensorNum;          // Ä£ÄâÁ¿×î´ó¸öÊý (Éè±¸Ö§³ÖµÄ×ÜÊý)
    WORD    wLocalSensorNum;        // ±¾µØÄ£ÄâÁ¿¸öÊý
    WORD    wExpandSensorNum;         // ¿ÉÀ©Õ¹µÄÄ£ÄâÁ¿¸öÊý
    WORD    wAudioOutNum;                //ÓïÒôÊä³ö¸öÊý
    WORD    wGatewayNum;            //ÃÅ½û¸öÊý
    WORD    wElectroLockNum;            //µçËø¸öÊý
    WORD    wSirenNum;                 // Ö÷»ú¾¯ºÅÊýÄ¿
    WORD    wSubSystemNum;            // ¿É»®·Ö×ÓÏµÍ³ÊýÄ¿
    WORD    wNetUserNum;            // ÍøÂçÓÃ»§Êý
    WORD    wKeyboardNum;           // ¼üÅÌÊý
    WORD    wOperatorUserNum;           // ²Ù×÷ÓÃ»§Êý
    BYTE    bySupportDetector;//ÊÇ·ñÖ§³Ö³£¿ª¡¢³£±ÕÌ½²âÆ÷£¬1-Ö§³Ö£¬0-²»Ö§³Ö
    BYTE    bySupportSensitivity;//ÊÇ·ñÖ§³Ö·ÀÇøÁéÃô¶È£¬1-Ö§³Ö£¬0-²»Ö§³Ö
    BYTE    bySupportArrayBypass;//ÊÇ·ñÖ§³Ö×éÅÔÂ·£¬1-Ö§³Ö£¬0-²»Ö§³Ö
    BYTE    bySupportAlarmInDelay;//ÊÇ·ñÖ§³Ö·ÀÇøÑÓ³Ù,1-Ö§³Ö£¬0-²»Ö§³Ö
    //Èç¹ûbySupportAlarmInDelayÎª1Ê±£¬±íÊ¾¿Í»§¶ËÓ¦¸ÃÊ¹ÓÃNET_DVR_ALARMIN_PARAM ÖÐµÄdwParamÀ´ÉèÖÃÑÓÊ±Ê±¼ä£¬¶¯»·±¨¾¯Ö÷»úºÍ×ÔÖúÐÐ±¨¾¯Ö÷»úÊ¹ÓÃÕâÖÖÅäÖÃÑÓÊ±·½Ê½;
    //Èç¹ûbySupportAlarmInDelayÎª0Ê±£¬±íÊ¾Í¨¹ýNET_DVR_ALARMSUBSYSTEMPARAM ÖÐµÄwEnterDelay ¡¢wExitDelay À´ÉèÖÃ
    BYTE    bySupportAlarmInType[16];//Ö§³ÖµÄ·ÀÇøÀàÐÍ,Êý×é0:¼´Ê±·ÀÇø,1-24Ð¡Ê±·ÀÇø,2-ÑÓÊ±·ÀÇø ,3-ÄÚ²¿·ÀÇø£¬4-Ô¿³×·ÀÇø 5-»ð¾¯·ÀÇø 6-ÖÜ½ç·ÀÇø 7-24Ð¡Ê±ÎÞÉù·ÀÇø 15-ÎÞ
    BYTE    byTelNum;        //Ö§³Öµç»°¸öÊý
    BYTE    byCenterGroupNum;    //ÖÐÐÄ×é¸öÊý
    BYTE    byGPRSNum;        //GPRSÖÐÐÄÊý£¬×î¶à4¸ö
    BYTE    byNetNum;        //ÍøÂçÖÐÐÄÊý£¬×î¶à4¸ö
    BYTE    byAudioNum;        //ÒôÆµ¸öÊý
    BYTE    by3GNum;        //3GÄ£¿é¸öÊý
    BYTE    byAnalogVideoChanNum;        //Ä£ÄâÊÓÆµÍ¨µÀ¸öÊý
    BYTE    byDigitalVideoChanNum;        //Êý×ÖÊÓÆµÍ¨µÀ¸öÊý
    BYTE    bySubSystemArmType;        //×ÓÏµÍ³²¼·ÀÀàÐÍ£¬0-±íÊ¾²»Ö§³Ö£¬1-±íÊ¾Ö§³Ö¡£bit0-ÆÕÍ¨²¼·À£¨×¢£ºÍøÂçÐ¡Ö÷»úÖ»Ö§³ÖÆÕÍ¨²¼·À£¬ÔÚÄÜÁ¦¼¯ÖÐ¼ÓÕâ¸ö×Ö¶ÎµÄÊ±ºòÍøÂçÐ¡Ö÷»úÒÑ¾­·¢²¼£¬ËùÒÔÍøÂçÐ¡Ö÷»úÖÐ¸Ã×Ö¶ÎÎª0£¬ËùÒÔÓÃ0±íÊ¾Ö§³Ö£¬1±íÊ¾²»Ö§³Ö¡£¶ÔÍâ½Ó¿ÚÖÐSDKÄÚ²¿»á×ö¼æÈÝ£©£¬bit1-¼´Ê±²¼·À£¬bit2-ÁôÊØ²¼·À¡£    
    BYTE    byPublicSubSystemNum;    //¹«¹²×ÓÏµÍ³¸öÊý
    DWORD    dwSupport1;    //°´Î»±íÊ¾£¬½á¹û·Ç0±íÊ¾Ö§³Ö£¬0±íÊ¾²»Ö§³Ö
    // bit0:     ÊÇ·ñÖ§³Ö×ÓÏµÍ³ÄÚÅäÖÃ¾¯ºÅÊä³öÊ±¼ä£¬Èç¹ûÖ§³ÖÔò¾¯ºÅÊä³öÊ±¼äÔÚÃ¿¸ö×ÓÏµÍ³ÄÚÅäÖÃ£¬Èç¹û²»Ö§³Ö£¬¾¯ºÅÊ±¼äÔÚ¾¯ºÅ²ÎÊýÅäÖÃÀïÃæÉèÖÃ
    // bit1:    ÊÇ·ñÖ§³ÖÊÂ¼þ´¥·¢±¨¾¯Êä³ö¿ªÆô
    // bit2:    ÊÇ·ñÖ§³ÖÊÂ¼þ´¥·¢±¨¾¯Êä³ö¹Ø±Õ
    // bit3:    ÊÇ·ñÖ§³Ö×ÓÏµÍ³Ê¹ÄÜ
    // bit4;    ÊÇ·ñÖ§³Ö·ÀÇø²¼·À
    // bit5;    ÊÇ·ñÖ§³Ö×ÓÏµÍ³×Ô¶¯²¼³··À
    // bit6:    ÊÇ·ñÖ§³Ö¾ßÌå¹ÊÕÏ¹ØÁªÉùÒôÊä³ö
    // bit7:    ÊÇ·ñÖ§³Ö¹ÊÕÏ×´Ì¬²éÑ¯
    // bit8:    ÊÇ·ñÖ§³Ö×ÓÏµÍ³À©Õ¹ÅäÖÃ
    // bit9:    ÊÇ·ñÖ§³ÖÔ¿³×·ÀÇø²Ù×÷×ÓÏµÍ³
    // bit10:   ÊÇ·ñÖ§³Ö"¼üÅÌÌáÊ¾³É¹¦·¢ËÍ±¨¸æ"ÅäÖÃ
    // bit11:   ÊÇ·ñÖ§³Öµ¼Èëµ¼³ö²ÎÊýÅäÖÃ
    // bit12:   ÊÇ·ñÖ§³ÖLEDÆÁÄ»²ÎÊýÅäÖÃ
    // bit13: ÊÇ·ñÖ§³Ö¹ÊÕÏ¹ØÁª±¾µØ¹ÊÕÏµÆÊä³ö
    DWORD    dwSubSystemEvent;        //×ÓÏµÍ³ÊÂ¼þ£¬°´Î»±íÊ¾£¬0±íÊ¾²»Ö§³Ö£¬·Ç0±íÊ¾Ö§³Ö,bit0-½øÈëÑÓÊ±£¬bit1-ÍË³öÑÓÊ±£¬bit2-²¼·À£¬bit3-³··À£¬bit4-±¨¾¯£¬bit5-Ïû³ý±¨¾¯¼ÇÒä
    DWORD    dwOverallEvent;            //È«¾ÖÊÂ¼þ£¬°´Î»±íÊ¾£¬0±íÊ¾²»Ö§³Ö£¬·Ç0±íÊ¾Ö§³Ö£¬bit0-½»Á÷µçµôµç£¬bit1-µç³ØµçÑ¹µÍ£¬bit2-µç»°ÏßµôÏß£¬bit3-ÓÐÏßÍøÂçÒì³££¬bit4-ÎÞÏßÍøÂçÒì³£
    DWORD    dwFaultType;            //Éè±¸Ö§³ÖµÄ¹ÊÕÏÀàÐÍ£¬bit0-½»Á÷µç¶Ïµç£¬bit1-Ðîµç³ØÇ·Ñ¹£¬bit2-Ö÷»ú·À²ð¿ª£¬bit3-µç»°ÏßµôÏß£¬bit4-Ö÷¼üÅÌµôÏß£¬bit5-ÍøÂç¹ÊÕÏ£¬bit6-ÎÞÏßÒì³££¬bit7-À©Õ¹×ÜÏßÒì³££¬bit8-Ó²ÅÌÒì³£    
    BYTE    byPublicSubsystemAssociateSubsystemNum;    //¹«¹²×ÓÏµÍ³¿É¹ØÁªµÄ×ÓÏµÍ³¸öÊý
    BYTE    byOverallKeyboard;    //È«¾Ö¼üÅÌ¸öÊý
    WORD    wSafetyCabinSupport; //·À»¤²Õ¿ØÖÆÆ÷ÄÜÁ¦£¬°´Î»±íÊ¾£¬½á¹û·Ç0±íÊ¾Ö§³Ö£¬0±íÊ¾²»Ö§³Ö    
    //bit0: ÊÇ·ñÖ§³Ö·À»¤²Õ¿ØÖÆÆ÷¹¤×÷Ä£Ê½ÅäÖÃ
    //bit1: ÊÇ·ñÖ§³ÖÈËÐÅºÅ´«¸ÐÆ÷ÀàÐÍÅäÖÃ
    //bit2: ÊÇ·ñÖ§³ÖÄ»Á±´«¸ÐÆ÷²ÎÊýÅäÖÃ£¨Ì½²âÑÓ³ÙÊ±¼ä¡¢ÈË×´Ì¬±ä»¯ÏìÓ¦Ê±¼ä£©
    //bit3: ÊÇ·ñÖ§³ÖºìÍâ¶ÔÉä´«¸ÐÆ÷²ÎÊýÅäÖÃ£¨ÂË²¨£©
    //bit4: ÊÇ·ñÖ§³Ö·À»¤²ÕÊ¹ÓÃ³¬Ê±Ê±¼äÅäÖÃ
    BYTE    by485SlotNum;        //485ÐéÄâ²ÛÎ»ºÅ
    BYTE    bySubSystemAttributeAbility;  // ÖµºãÎª1£¬½ûÖ¹1ºÅ×ÓÏµÍ³¹Ø±ÕÊ¹ÄÜ
    WORD    wKeyboardAddrNum;      // ¼üÅÌµØÖ·Êý
    BYTE    byRes[118];            //  ±£Áô×Ö½Ú
}NET_DVR_ALARMHOST_ABILITY, *LPNET_DVR_ALARMHOST_ABILITY;

#define MAX_485CHAN                256    //485Í¨µÀºÅ
#define MAX_485SLOT                256    //485²ÛÎ»ºÅ
typedef struct tagNET_DVR_485_SLOT_LIST_INFO
{
    DWORD        dwSize;
    BYTE        byAll;    //0-²»ÊÇÈ«²¿»ñÈ¡£¬1-È«²¿»ñÈ¡
    BYTE        byres[3];
    BYTE        byIndex[MAX_485SLOT];            //485²ÛÎ»ºÅ
    BYTE           byRes[64];      //±£Áô
}NET_DVR_485_SLOT_LIST_INFO,* LPNET_DVR_485_SLOT_LIST_INFO;

typedef struct tagNET_DVR_485LIST_INFO
{
    DWORD        dwSize;
    BYTE        byAll;    //0-²»ÊÇÈ«²¿»ñÈ¡£¬1-È«²¿»ñÈ¡
    BYTE        byres[3];
    BYTE        byIndex[MAX_485CHAN];            //485Í¨µÀºÅ ÏÂ±ê±íÊ¾Í¨µÀºÅ£¬Öµ0-±íÊ¾²»Ê¹ÓÃ£¬1±íÊ¾Ê¹ÓÃ
    BYTE       byRes[64];      //±£Áô
}NET_DVR_485LIST_INFO,*LPNET_DVR_485LIST_INFO;

typedef struct tagNET_DVR_ALARM_RS485CFG
{
    DWORD   dwSize;                 // ½á¹¹Ìå´óÐ¡
    BYTE    sDeviceName[NAME_LEN];  // Ç°¶ËÉè±¸Ãû³Æ 
    WORD    wDeviceType;            // Ç°¶ËÉè±¸ÀàÐÍ,Í¨¹ýNET_DVR_GetDeviceTypeList»ñÈ¡
    WORD    wDeviceProtocol;        // Ç°¶ËÉè±¸Ð­Òé Í¨¹ý»ñÈ¡Ð­ÒéÁÐ±í»ñÈ¡    
    DWORD   dwBaudRate;             //²¨ÌØÂÊ(bps)£¬0-50£¬1-75£¬2-110£¬3-150£¬4-300£¬5-600£¬6-1200£¬7-2400£¬8-4800£¬9-9600£¬10-19200£¬11-38400£¬12-57600£¬13-76800£¬14-115.2k 
    BYTE    byDataBit;              // Êý¾ÝÓÐ¼¸Î»£º0-5Î»£¬1-6Î»£¬2-7Î»£¬3-8Î» 
    BYTE    byStopBit;              // Í£Ö¹Î»£º0-1Î»£¬1-2Î» 
    BYTE    byParity;               //ÊÇ·ñÐ£Ñé£º0-ÎÞÐ£Ñé£¬1-ÆæÐ£Ñé£¬2-Å¼Ð£Ñé 
    BYTE    byFlowcontrol;           // ÊÇ·ñÁ÷¿Ø£º0-ÎÞ£¬1-ÈíÁ÷¿Ø,2-Ó²Á÷¿Ø 
    BYTE    byDuplex;                // 0 - °ëË«¹¤1- È«Ë«¹¤  Ö»ÓÐÍ¨µÀ1¿ÉÒÔÊÇÈ«Ë«¹¤ÆäËû¶¼Ö»ÄÜÊÇ°ëË«¹¤
    BYTE    byWorkMode;                // ¹¤×÷Ä£Ê½ 0-¿ØÖÆÌ¨ 1-Í¸Ã÷Í¨µÀ,2-ÌÝ¿Ø£¬3-¶Á¿¨Æ÷,0xfe-×Ô¶¨Òå£¬0xff-½ûÓÃ
    BYTE    byChannel;                //485Í¨µÀºÅ
    BYTE    bySerialType;            //´®¿ÚÀàÐÍ: 0--485, 1--232
    BYTE    byMode;                 //Ä£Ê½ 0-Á¬½Ó¶Á¿¨Æ÷ 1-Á¬½Ó¿Í»§¶Ë 2-Á¬½ÓÀ©Õ¹Ä£¿é
    BYTE    byRes[35];              // ±£Áô×Ö½Ú
}NET_DVR_ALARM_RS485CFG, *LPNET_DVR_ALARM_RS485CFG;

#define MAX_DEVICE_PROTO_NUM       256
#define MAX_DEVICE_TYPE_NUM            256

// 485Ç°¶ËÉè±¸Ö§³ÖÐ­ÒéÁÐ±í
typedef struct tagNET_DVR_DEVICE_PROTO_LIST
{
    DWORD   dwSize;             // ½á¹¹Ìå´óÐ¡
    DWORD   dwProtoNum;         // Ð­Òé¸öÊý
    NET_DVR_PROTO_TYPE struProtoType[MAX_DEVICE_PROTO_NUM];  // Ð­ÒéÀàÐÍ
    BYTE    byRes[12];          // ±£Áô×Ö½Ú
}NET_DVR_DEVICE_PROTO_LIST, *LPNET_DVR_DEVICE_PROTO_LIST;

typedef struct tagNET_DVR_DEVICE_TYPE
{
    DWORD    dwType;
    BYTE    byDescribe[DESC_LEN];
}NET_DVR_DEVICE_TYPE, *LPNET_DVR_DEVICE_TYPE;

typedef struct tagNET_DVR_DEVICE_TYPE_LIST
{
    DWORD    dwSize;                // ½á¹¹Ìå´óÐ¡
    DWORD    dwTypeNum;            // ÀàÐÍ¸öÊý
    NET_DVR_DEVICE_TYPE struDeviceType[MAX_DEVICE_TYPE_NUM];
    BYTE    byRes[12];
}NET_DVR_DEVICE_TYPE_LIST, *LPNET_DVR_DEVICE_TYPE_LIST;

#define    MAX_ALARMHOST_VIDEO_CHAN    64
typedef struct tagNET_DVR_ALARM_DEVICE_USER
{
    DWORD  dwSize;                 // ½á¹¹Ìå´óÐ¡
    BYTE   sUserName[NAME_LEN];    // ÓÃ»§Ãû
    BYTE   sPassword[PASSWD_LEN];    // ÃÜÂë
    NET_DVR_IPADDR    struUserIP;                    /* ÓÃ»§IPµØÖ·(Îª0Ê±±íÊ¾ÔÊÐíÈÎºÎµØÖ·) */
    BYTE   byMACAddr[MACADDR_LEN];            /* ÎïÀíµØÖ· */
    BYTE   byUserType; // 0-ÆÕÍ¨ÓÃ»§ 1-¹ÜÀíÔ±ÓÃ»§
    BYTE   byAlarmOnRight;         // ²¼·ÀÈ¨ÏÞ
    BYTE   byAlarmOffRight;        // ³··ÀÈ¨ÏÞ
    BYTE   byBypassRight;          // ÅÔÂ·È¨ÏÞ
    BYTE   byOtherRight[MAX_RIGHT];  // ÆäËûÈ¨ÏÞ
    // 0 -- ÈÕÖ¾È¨ÏÞ
    // 1 -- ÖØÆô¹Ø»ú
    // 2 -- ²ÎÊýÉèÖÃÈ¨ÏÞ
    // 3 --    ²ÎÊý»ñÈ¡È¨ÏÞ
    // 4 -- »Ö¸´Ä¬ÈÏ²ÎÊýÈ¨ÏÞ
    // 5 -- ¾¯ºÅÊä³öÈ¨ÏÞ
    // 6 -- PTZ ¿ØÖÆÈ¨ÏÞ
    // 7 -- Ô¶³ÌÉý¼¶È¨ÏÞ
    // 8 -- Ô¶³ÌÔ¤ÀÀ
    // 9 -- Ô¶³ÌÊÖ¶¯Â¼Ïñ
    // 10 -- Ô¶³Ì»Ø·Å
    BYTE    byNetPreviewRight[MAX_ALARMHOST_VIDEO_CHAN/8];    // Ô¶³Ì¿ÉÒÔÔ¤ÀÀµÄÍ¨µÀ£¬°´Î»±íÊ¾¸÷Í¨µÀ£¨bit0-channel 1£©£¬1-ÓÐÈ¨ÏÞ£¬0-ÎÞÈ¨ÏÞ
    BYTE    byNetRecordRight[MAX_ALARMHOST_VIDEO_CHAN/8];    // Ô¶³Ì¿ÉÒÔÂ¼ÏñµÄÍ¨µÀ£¬°´Î»±íÊ¾¸÷Í¨µÀ£¨bit0-channel 1£©£¬1-ÓÐÈ¨ÏÞ£¬0-ÎÞÈ¨ÏÞ
    BYTE    byNetPlaybackRight[MAX_ALARMHOST_VIDEO_CHAN/8]; // Ô¶³Ì¿ÉÒÔ»Ø·ÅµÄÍ¨µÀ£¬°´Î»±íÊ¾¸÷Í¨µÀ£¨bit0-channel 1£©£¬1-ÓÐÈ¨ÏÞ£¬0-ÎÞÈ¨ÏÞ
    BYTE    byNetPTZRight[MAX_ALARMHOST_VIDEO_CHAN/8];        // Ô¶³Ì¿ÉÒÔPTZµÄÍ¨µÀ£¬°´Î»±íÊ¾¸÷Í¨µÀ£¨bit0-channel 1£©£¬1-ÓÐÈ¨ÏÞ£¬0-ÎÞÈ¨ÏÞ
    //BYTE    byPriority;                                        // ÓÅÏÈ¼¶£¬0xff-ÎÞ£¬0--µÍ£¬1--ÖÐ£¬2--¸ß
    //ÎÞ£¨±íÊ¾²»Ö§³ÖÓÅÏÈ¼¶µÄÉèÖÃ£©
    //µÍ£¨Ä¬ÈÏÈ¨ÏÞ£º°üÀ¨Ô¶³Ì»Ø·Å£¬Ô¶³Ì²é¿´ÈÕÖ¾ºÍ×´Ì¬£¬Ô¶³Ì¹Ø»ú/ÖØÆô£©
    //ÖÐ£¨°üÀ¨Ô¶³Ì¿ØÖÆÔÆÌ¨£¬Ô¶³ÌÊÖ¶¯Â¼Ïñ£¬Ô¶³Ì»Ø·Å£¬ÓïÒô¶Ô½²ºÍÔ¶³ÌÔ¤ÀÀ£¬±¾µØ±¸·Ý£¬±¾µØ/Ô¶³Ì¹Ø»ú/ÖØÆô£©
    //¸ß£¨¹ÜÀíÔ±£©
    BYTE    byRes2[168];              // ±£Áô×Ö½Ú
}NET_DVR_ALARM_DEVICE_USER, *LPNET_DVR_ALARM_DEVICE_USER;

typedef struct tagNET_DVR_KEYBOARD_USER
{
    DWORD     dwSize;     // ½á¹¹Ìå´óÐ¡
    DWORD    dwID;        // ¼üÅÌÓÃ»§ID
    BYTE    byDefanceArea[MAX_ALARMHOST_ALARMIN_NUM]; //·ÀÇøÈ¨ÏÞ  °´Êý×éÏÂ±ê±íÊ¾ ×î´óÖ§³Ö512¸ö·ÀÇø 0 - ÎÞÈ¨ÏÞ 1- ÓÐÈ¨ÏÞ
    BYTE    byRes[560];        // ±£Áô×Ö½Ú
}NET_DVR_KEYBOARD_USER, *LPNET_DVR_KEYBOARD_USER;

typedef struct tagNET_DVR_OPERATE_USER
{
    DWORD     dwSize;        // ½á¹¹Ìå´óÐ¡
    BYTE    sUserName[NAME_LEN];    // ÓÃ»§Ãû
    BYTE    sPassword[PASSWD_LEN];  // ÃÜÂë
                                    BYTE   bySubSystemPermission;/*0-°²×°Ô±È¨ÏÞ ²Ù×÷Ô±È¨ÏÞ£¨ËùÓÐ×ÓÏµÍ³£©ÈçÏÂ£º 1-µ¥²¼·À£¬ÎÞ²¼·À±¨¸æ£¬²»ÄÜÅÔÂ· 2-µ¥³··À£¬ÎÞ³··À±¨¸æ£¬²»ÄÜÅÔÂ· 3-²¼³··À£¬ÎÞ²¼³··À±¨¸æ£¬²»ÄÜÅÔÂ· 
                                                                 4-µ¥²¼·À£¬ÓÐ²¼//·À±¨¸æ£¬²»ÄÜÅÔÂ· 5-µ¥³··À£¬ÓÐ³··À±¨¸æ£¬²»ÄÜÅÔÂ· 6-²¼³··À£¬ÓÐ²¼³··À±¨¸æ£¬²»ÄÜÅÔÂ·  7-µ¥²¼·À£¬ÎÞ²¼³··À±¨¸æ£¬ÔÊÐíÅÔÂ· 
                                                                 8-µ¥³··À£¬ÎÞ²¼³··À±¨¸æ£¬ÔÊÐíÅÔÂ· 9-²¼³··À£¬ÎÞ²¼³··À±¨¸æ£¬ÔÊÐíÅÔÂ· 10-µ¥²¼·À£¬ÓÐ²¼·À±¨¸æ£¬ÔÊÐíÅÔÂ· 11-µ¥³··À£¬ÓÐ³··À±¨¸æ£¬ÔÊÐíÅÔÂ· 1
                                    2-²¼³··À£¬ÓÐ²¼³··À±¨¸æ£¬ÔÊÐíÅÔÂ·*/
                                    BYTE    byRes[63];             //  ±£Áô×Ö½Ú
}NET_DVR_OPERATE_USER, *LPNET_DVR_OPERATE_USER;

typedef struct tagNET_DVR_GATEWAY_CFG
{
    DWORD    dwSize;        // ½á¹¹Ìå´óÐ¡
    BYTE    byName[NAME_LEN];    //  ÃÅ½ûÃû³Æ    
    BYTE    byEnable;    // ÊÇ·ñÆôÓÃ
    BYTE    byLocalEnable;  //  ±¾µØÊÇ·ñÆôÓÃ
    WORD    wDelayTime;    // ¿ªÆôÑÓÊ±Ê±¼ä    µ¥Î»ÎªÃë0-65535 0ÎªÒ»Ö±¿ªÆô
    BYTE    byLockWorkMode;//µçËø¹¤×÷Ä£Ê½£¬0-Í¨µçÆô¶¯£¬1-¶ÏµçÆô¶¯
    BYTE    byRes[31];    // ±£Áô×Ö½Ú
}NET_DVR_GATEWAY_CFG, *LPNET_DVR_GATEWAY_CFG;

typedef struct tagNET_DVR_SENSOR_ALARM
{
    DWORD   dwSize;                // ½á¹¹Ìå´óÐ¡
    DWORD   dwAbsTime;            // ¾ø¶ÔÊ±±êÐÅÏ¢  OSDÏÔÊ¾ÐÅÏ¢
    BYTE    byName[NAME_LEN];     // sensor Ãû³Æ
    BYTE    bySensorChannel;    // Ä£ÄâÁ¿Í¨µÀ
    BYTE    byType;             // Ä£ÄâÁ¿ÀàÐÍ
    BYTE    byAlarmType;        // 1-ÉÏ4¡¢2-ÉÏ3¡¢3-ÉÏ2¡¢4-ÉÏ1¡¢5-ÏÂ1¡¢6-ÏÂ2¡¢7-ÏÂ3¡¢8-ÏÂ4 ºÍµ±Ç°Ä£Ê½ÓÐ¹Ø
    // ÀýÈçµ±Îª1000Ê±,ÓÐÉÏ1ÏÂ1£¬2£¬3±¨¾¯ËÄÖÖ±¨¾¯
    BYTE    byAlarmMode;        //±¨¾¯Ä£Ê½£¬ÎåÖÖ£¬-HHHH¡¢-HHHL¡¢-HHLL¡¢HLLL¡¢-LLLL£¬ ×÷ÎªÆ½Ì¨±¨¾¯³Ì¶ÈÅÐ¶Ï¹¦ÄÜ,¼´£º1111£¨ÉÏÉÏÉÏÉÏ£©£¬1110£¨ÉÏÉÏÉÏÏÂ£©£¬1100£¨ÉÏÉÏÏÂÏÂ£©£¬1000(ÉÏÏÂÏÂÏÂ)£¬0000(ÏÂÏÂÏÂÏÂ) 
    float    fValue;                // µ«Ç°Ä£ÄâÁ¿µÄÖµ
    BYTE    byRes2[32];            // ±£Áô×Ö½Ú
}NET_DVR_SENSOR_ALARM, *LPNET_DVR_SENSOR_ALARM;

typedef struct 
{
    /*Ô¤Áô£¬Ä¿Ç°±¨¾¯Ö÷»úµÄ±¨¾¯Ã»ÓÐÀàÐÍ(²¼·ÀÍøÂçÐò£¬¼àÌýÖ÷»úÐò)*/
    DWORD  dwAlarmType;             
    /*Êý×é0¶ÔÓ¦µÚ1¸öÊäÈë¶Ë¿Ú*/
    BYTE   byAlarmInputNumber[MAX_ALARMHOST_ALARMIN_NUM];
    BYTE    byRes[160];
}NET_DVR_ALARMHOST_ALARMINFO,*LPNET_DVR_ALARMHOST_ALARMINFO;
// ¿ª¹ØÁ¿±¨¾¯ÉÏ´«
typedef struct tagNET_DVR_SWITCH_ALARM
{
    DWORD dwSize;
    BYTE   byName[NAME_LEN];     // switch Ãû³Æ
    WORD  wSwitchChannel;     // ¿ª¹ØÁ¿Í¨µÀ, 0-255
    BYTE    byAlarmType;        // ±¨¾¯ÀàÐÍ 0--Õý³££¬1--¶ÌÂ·£¬2--¶ÏÂ·,3-Òì³£ 
    BYTE     byRes[41];            // ±£Áô×Ö½Ú
}NET_DVR_SWITCH_ALARM, *LPNET_DVR_SWITCH_ALARM;

typedef union tagNET_DVR_ALARMHOST_EXCEPTION_PARAM
{
    DWORD   dwUnionSize[20];        // ÁªºÏÌå´óÐ¡    
}NET_DVR_ALARMHOST_EXCEPTION_PARAM, *LPNET_DVR_ALARMHOST_EXCEPTION_PARAM;

typedef struct tagNET_DVR_ALARMHOST_EXCEPTION_ALARM
{
    DWORD   dwSize;             // ½á¹¹Ìå´óÐ¡
    // Òì³£²ÎÊý  1-Éè±¸·À²ð±¨¾¯ 2-Éè±¸·À²ðºóºó»Ö¸´Õý³£ 3-Ö÷µçÔ´µôµç±¨¾¯ 4-Ö÷µçÔ´µôµçºó»Ö¸´Õý³£ 5-ÄÚ²¿Í¨ÐÅ¹ÊÕÏ±¨¾¯ 
    // 6-ÄÚ²¿Í¨ÐÅ¹ÊÕÏºó»Ö¸´Õý³£  7-µç»°Ïß¶ÏÏß 8-µç»°Ïß¶ÏÏß»Ö¸´ 9-×Ô¼ìÊ§°Ü±¨¾¯  10-×Ô¼ìÊ§°Üºó»Ö¸´Õý³£    
    // 11Ðîµç³ØÇ·Ñ¹  12Ðîµç³ØµçÑ¹»Ö¸´Õý³££¬13-Ðîµç³Ø¹ÊÕÏ£»14-MBUSÄ£¿éµôÏß£»15-MBUSÄ£¿éµôÏß»Ö¸´£»16-¼üÅÌµôÏß£»
    //17-¼üÅÌµôÏß»Ö¸´£»18-Éè±¸±»ÒÆ¶¯£»19-Éè±¸±»ÒÆ¶¯¸´Î»  20-485ÍâÉèÏßÂ·¶Ï±¨¾¯  21-485ÍâÉèÏßÂ·¶Ïºó»Ö¸´Õý³£
    //25-×Ó°å1²åÉÏ,26-×Ó°å1°Î³ö, 27-×Ó°å2²åÉÏ,28-×Ó°å2°Î³ö
    DWORD   dwExceptionType;    
    BYTE   byRes[36];          // ±£Áô
}NET_DVR_ALARMHOST_EXCEPTION_ALARM, *LPNET_DVR_ALARMHOST_EXCEPTION_ALARM;

//×ÔÖúÐÐ²¦ºÅ²ÎÊýÅäÖÃ¼°ÆôÓÃ·½Ê½ÅäÖÃ
#define MAX_CENTERNUM            4        //G1,G2 G3 G4»òÕßN1£¬N2£¬N3£¬N4»òÕßT1£¬T2£¬T3£¬T4
typedef struct tagNET_DVR_PHONECENTERDIALCFG
{
    BYTE sCenterName[NAME_LEN];
    BYTE byPhoneNum[MAX_PHONE_NUM/*32*/];  //ÖÐÐÄºÅÂë  
    BYTE byRepeatCall;          //ÖØ¸´²¦ºÅ´ÎÊý£¬1~15´Î
    BYTE byPstnProtocol;        //Í¨ÐÅÐ­Òé£¬0-CID£»
    BYTE byDialDelay;           //²¦ºÅÑÓÊ±£¬×î´ó150s, 0-150
    BYTE byPstnTransMode;       //´«Êä·½Ê½£¬0-DTMF 5/S£¬1-DTMF 10/S£»
    BYTE byRes1[6];
    BYTE byReceiverId[6];         //½ÓÊÕ»úÊ¶±ðÕËºÅ£»
    BYTE byRes2[32];
}NET_DVR_PHONECENTERDIALCFG, *LPNET_DVR_PHONECENTERDIALCFG;

typedef struct tagNET_DVR_ALARMHOSTDIALCFG
{
    DWORD dwSize;
    NET_DVR_PHONECENTERDIALCFG struPhoneCenterParam[MAX_CENTERNUM];//Ö÷ÖÐÐÄ²ÎÊý
    WORD wReportPeriod;      //²âÊÔ±¨¸æÉÏ´«ÖÜÆÚ£¬Ð¡Ê±£¬£¨×î´óÖµÖ§³Ö7Ìì£¬¼´168Ð¡Ê±), ·¶Î§£»1-168
    WORD wFirstReportTime;     //´ÓÉè±¸Æô¶¯µ½µÚÒ»Ìõ²âÊÔ±¨¸æÉÏ´«£¬1~3600·ÖÖÓ
    BYTE  byReportValid;    //0-²»ÆôÓÃ²âÊÔ±¨¸æÉÏ´« 1-ÆôÓÃ²âÊÔ±¨¸æÉÏ´«
    BYTE  byRes[19];
}NET_DVR_ALARMHOSTDIALCFG, *LPNET_DVR_ALARMHOSTDIALCFG;

typedef struct tagNET_DVR_ALARMHOSTDIALSETUPMODE
{
    DWORD dwSize;
    BYTE byEnableMode;//ÆôÓÃ·½Ê½£¬0£º²»ÆôÓÃ£¬1£ºÒ»Ö±ÆôÓÃ£¬2:ÍøÏß¶ÏÆôÓÃ£¬Õý³£Ê±¹Ø±Õ£»
    BYTE byCallType; //ÉÏ´«ÖÐÐÄ·½Ê½£¬1-µ¥ÖÐÐÄ£¬2-Ë«ÖÐÐÄ£¬3£¬Ò»±¨Ò»±¸
    BYTE byRes1[14];
}NET_DVR_ALARMHOSTDIALSETUPMODE, *LPNET_DVR_ALARMHOSTDIALSETUPMODE;

#define  MAX_PU_CHAN_NUM    512

typedef struct tagNET_DVR_PU_CHAN_INFO
{
    NET_DVR_IPADDR  struIpAddr;     // ipµØÖ·
    WORD            wPort;          // ¶Ë¿Ú
    WORD            wChannel;       // Í¨µÀ     
    BYTE            byRes[24];      // 
}NET_DVR_PU_CHAN_INFO, *LPNET_DVR_PU_CHAN_INFO;

typedef struct tagNET_DVR_PU_CHAN_LIST
{
    DWORD   dwSize;     // ½á¹¹Ìå
    DWORD   dwNum;      // Ç°¶ËÍ¨µÀ¸öÊý
    NET_DVR_PU_CHAN_INFO struPuChanInfo[MAX_PU_CHAN_NUM];
}NET_DVR_PU_CHAN_LIST, *LPNET_DVR_PU_CHAN_LIST;

#define  MAX_ALARM_CAM_NUM    32        // ±¨¾¯´¥·¢CAM×î´ó¸öÊý

typedef struct tagNET_DVR_PTZ_CTRL
{
    BYTE    byEnable;   // ÊÇ·ñÆôÓÃPTZ¿ØÖÆ
    BYTE    byType;     // PTZ ¿ØÖÆµÄÀàÐÍ 1- Ô¤ÖÃµã 2 -Ñ²º½  3-¹ì¼£
    BYTE    byPtzNo;    //  ptz ¿ØÖÆµÄÔ¤ÖÃµã Ñ²º½ ¹ì¼£ºÅ
    BYTE    byRes[5];    // ±£Áô×Ö½Ú
}NET_DVR_PTZ_CTRL, *LPNET_DVR_PTZ_CTRL;

typedef struct tagNET_DVR_ALARM_CAM_INFO
{
    DWORD            dwCamID;      // ´¥·¢µÄCAMÍ¨µÀ²Ù×÷
    DWORD           dwRecordTime;   // ´¥·¢Â¼ÏñÊ±¼ä µ¥Î»Îªs  -1±íÊ¾Ò»Ö±Â¼Ïñ 0 ±íÊ¾²»Â¼Ïñ
    DWORD           dwMonID;      // ´¥·¢Camµ½MonºÅÏÔÊ¾
    DWORD           dwResidentTime; // ÂÖÑ²Í£ÁôÊ±¼äµ¥Î»Îªs  -1±íÊ¾Ò»Ö±Í£Áô 0 ±íÊ¾²»Í£Áô
    NET_DVR_PTZ_CTRL struPtzCtrl;    // PTZ¿ØÖÆÐÅÏ¢
    BYTE            byAlarmOffMode;        // ±¨¾¯ÇÐ»»ÉÏÇ½È¡ÏûÄ£Ê½   0-Á¢¼´È¡Ïû£¬1-×Ô¶¯È¡Ïû£¬2-ÊÖ¶¯È¡Ïû Á¢¼´È¡Ïû£¬±¨¾¯È¡ÏûÊ±Á¢¼´È¡Ïû½âÂëÉÏÇ½   ×Ô¶¯È¡Ïû£¬±¨¾¯È¡ÏûÊ±µÈ´ýÒ»¶¨Ê±¼äºóÈ¡Ïû½âÂëÉÏÇ½£¬ÎÒÃÇÔ¼¶¨ÊÇ20Ãë  ÊÖ¶¯È¡Ïû£¬ÓÃ»§Í¨¹ýÊÖ¶¯µÄ·½Ê½È¡Ïû
    BYTE            byDevType;        // µ±Éè±¸ÎªÖÇÄÜÉè±¸Ê±£¬ÉúÐ§±íÊ¾ÖÇÄÜ±¨¾¯Éè±¸È¡Á÷Ô´ 1-½âÂë¿¨     2-±àÂë¿¨
    BYTE            byDecChan;        // µ±Îª½âÂëÍ¨µÀÎª½âÂëÍ¨µÀºÅ
    BYTE            byRes[17];      // ±£Áô×Ö½Ú
}NET_DVR_ALARM_CAM_INFO, *LPNET_DVR_ALARM_CAM_INFO;

typedef struct tagNET_DVR_ALARM_CAM_CFG
{
    DWORD        dwSize;            // ½á¹¹Ìå´óÐ¡
    BYTE        byEnable;       // ÊÇ·ñÆôÓÃ±¨¾¯´¥·¢CAMÁª¶¯ Éè±¸Ä¬ÈÏ²»ÆôÓÃ
    BYTE        byRes[7];       // ±£Áô×Ö½Ú
    DWORD        dwNum;            // ´¥·¢CAMÁª¶¯µÄ¸öÊý ¼´È¡Êý×éµÄÇ°¼¸¸öÓÐÐ§´¦Àí  
    NET_DVR_ALARM_CAM_INFO struAlarmCam[MAX_ALARM_CAM_NUM];
}NET_DVR_ALARM_CAM_CFG, *LPNET_DVR_ALARM_CAM_CFG;

#define MAX_GATEWAY_NUM         8  // ×î´óÃÅ½û¸öÊý
typedef struct tagNET_DVR_ALARMHOST_AUDIO_ASSOCIATE_ALARM
{
    DWORD         dwSize;
    BYTE        byEnterDoor[8];    // ÏÂ±ê±íÊ¾ÃÅ½ûºÅ£¬ÔªËØÊýÖµ±íÊ¾¹ØÁªÐÅÏ¢£¬0±íÊ¾²»¹ØÁª£¬ 1-8±íÊ¾¹ØÁªµÄÒôÆµºÅ
    BYTE        byExitDoor[8];     // ÏÂ±ê±íÊ¾ÃÅ½ûºÅ£¬ÔªËØÊýÖµ±íÊ¾¹ØÁªÐÅÏ¢£¬0±íÊ¾²»¹ØÁª£¬ 1-8±íÊ¾¹ØÁªµÄÒôÆµºÅ
    BYTE         byAlarmIn[MAX_ALARMHOST_ALARMIN_NUM/*512*/];  //¹ØÁª±¨¾¯ÊäÈë£¬ÏÂ±ê±íÊ¾±¨¾¯ÊäÈëºÅ£¬ÔªËØÊýÖµ±íÊ¾¹ØÁªÐÅÏ¢£¬0±íÊ¾²»¹ØÁª£¬ 1-8±íÊ¾¹ØÁªµÄÒôÆµºÅ
    BYTE         byRes[128];
}NET_DVR_ALARMHOST_AUDIO_ASSOCIATE_ALARM, *LPNET_DVR_ALARMHOST_AUDIO_ASSOCIATE_ALARM;

//Êý¾ÝÉÏ´«ÏÂÔØ£¨ÓïÒôÉÏ´«ÏÂÔØµÄÀ©Õ¹£©
typedef struct tagNET_DVR_UPLOAD_PARAM
{
    DWORD         dwSize;
    BYTE        byUploadType;    /*ÉÏ´«·½Ê½£¬1-¸ù¾ÝÎÄ¼þÃû¾ø¶ÔµØÖ·¶ÁÈ¡Êý¾ÝÎÄ¼þÉÏ´«£¬ 2-´Ó»º³åÇø¶ÁÈ¡Êý¾ÝÉÏ´«*/
    BYTE        byDataType;        //Êý¾ÝÀàÐÍ£º1-ÒôÆµÊý¾Ý
    BYTE        byDataNum;        //Êý¾Ý±àºÅ£¬Èç£ºÉÏ´«ÓïÒô£¬Ôò¸Ã²ÎÊý±íÊ¾ÓïÒôºÅ£¬Ôö¼ÓÒ»ÌõÓïÒôºÅ£¨³¬Ê±ÌáÊ¾Òô£©
    BYTE        byAudioType;        //ÓïÒô¸ñÊ½£¬0-wave
    char        sFileName[260];        //Êý¾ÝÎÄ¼þµÄÈ«Â·¾¶
    char        *lpBuffer;            //Êý¾Ý»º³åÇø
    DWORD        dwBufferSize;        //»º³åÇø´óÐ¡
    BYTE        byRes2[128];
}NET_DVR_UPLOAD_PARAM, *LPNET_DVR_UPLOAD_PARAM;

typedef void (CALLBACK *DATADOWNLOAD)(LONG nDownloadHandle, DWORD dwDataType, void* pBuffer, DWORD dwBufSize, void *pUser);
typedef struct tagNET_DVR_ALARMHOST_PARAM
{
    DWORD         dwSize;
    BYTE        byDownType;        /*ÏÂÔØµÄÊý¾Ý±£´æ·½Ê½£¬1-¸ù¾ÝÎÄ¼þÃû¾ø¶ÔµØÖ·±£´æÊý¾Ý£¬ 2-Í¨¹ý»Øµ÷º¯Êý»ñÈ¡Êý¾Ý*/
    BYTE        byDataType;        //Êý¾ÝÀàÐÍ£º1-ÒôÆµÊý¾Ý
    BYTE        byDataNum;        //Êý¾Ý±àºÅ£¬Èç£ºÏÂÔØÓïÒô£¬Ôò¸Ã²ÎÊý±íÊ¾ÓïÒôºÅ£¬Ôö¼ÓÒ»ÌõÓïÒôºÅ£¨³¬Ê±ÌáÊ¾Òô£©
    BYTE        byRes1;
    char        sFileName[260];        //Êý¾ÝÎÄ¼þµÄÈ«Â·¾¶
    DATADOWNLOAD lpDataCallBack; //ÏÂÔØÊ±µÄ»Øµ÷º¯Êý¾ä±ú
    void*        pUserData;    //ÓÃ»§Êý¾Ý£¬½«ÔÚ»Øµ÷º¯ÊýÖÐ´«»Ø
    BYTE        byRes2[128];
}NET_DVR_DOWNLOAD_PARAM, *LPNET_DVR_DOWNLOAD_PARAM;


typedef struct tagNET_DVR_ALARMHOST_DOWNLOAD_PARAM
{
    DWORD         dwSize;
    BYTE        byDownType;        /*ÏÂÔØµÄÊý¾Ý±£´æ·½Ê½£¬1-¸ù¾ÝÎÄ¼þÃû¾ø¶ÔµØÖ·±£´æÊý¾Ý£¬ 2-Í¨¹ý»Øµ÷º¯Êý»ñÈ¡Êý¾Ý*/
    BYTE        byDataType;        //Êý¾ÝÀàÐÍ£º1-ÒôÆµÊý¾Ý
    BYTE        byDataNum;        //Êý¾Ý±àºÅ£¬Èç£ºÏÂÔØÓïÒô£¬Ôò¸Ã²ÎÊý±íÊ¾ÓïÒôºÅ£¬Ôö¼ÓÒ»ÌõÓïÒôºÅ£¨³¬Ê±ÌáÊ¾Òô£©
    BYTE        byRes1;
    char        sFileName[260];        //Êý¾ÝÎÄ¼þµÄÈ«Â·¾¶
    DATADOWNLOAD lpDataCallBack; //ÏÂÔØÊ±µÄ»Øµ÷º¯Êý¾ä±ú
    void*        pUserData;    //ÓÃ»§Êý¾Ý£¬½«ÔÚ»Øµ÷º¯ÊýÖÐ´«»Ø
    BYTE        byRes2[128];
}NET_DVR_ALARMHOST_DOWNLOAD_PARAM, *LPNET_DVR_ALARMHOST_DOWNLOAD_PARAM;

//LEDÆÁÄ»²ÎÊý
typedef  struct tagNET_DVR_LED_SCREEN_CFG
{
    DWORD         dwSize;
    BYTE        sLEDName[NAME_LEN/*32*/];    // LEDÆÁÄ»Ãû³Æ
    BYTE        byTransMode;                 // ÏÖÖ»Ö§³Ö´®¿ÚÍ¨Ñ¶ 1-´®¿ÚÍ¨ÐÅ
    BYTE        byProtocolType;                // Ð­ÒéÀàÐÍ£¬¶ÔÓ¦LEDÆÁµÄ³§¼Ò
    BYTE        byLEDColor;                 // 1-µ¥É«£¬ 2-Ë«É«£¬ 3-256¼¶»Ò¶ÈË«»ùÉ«£¬ 4- È«²ÊÉ«£¨Ä¿Ç°Ö»ÓÃµ¥É«£©
    BYTE        byDataPolarity;                // Êý¾Ý¼«ÐÔ .0-¸º¼«£¬1-Õý¼«
    BYTE        byOEPolarity;                // 0-µÍÓÐÐ§ 1-¸ßÓÐÐ§
    BYTE        byScanMode;                 // 1-1/16,  2-1/8,  3-1/4,  4-1/2,  5-¾²Ì¬
    BYTE        byRes1[2];
    //ÆÁÄ»¿í¶ÈºÍ¸ß¶È×îÐ¡ÊÇ16*16µã£¬¼ä¸ôÊÇ8¸öµã    
    WORD        wLEDWidth;                     // 16~2048
    WORD         wLEDHeight;                    // 16~2048
    BYTE        byRes2[64];
}NET_DVR_LED_SCREEN_CFG, *LPNET_DVR_LED_SCREEN_CFG;

//LEDÆÁÏÔÄÚÈÝ
#define  MAX_CONTENT_LEN  512
typedef  struct tagNET_DVR_LED_CONTENT_CFG
{
    DWORD         dwSize;
    BYTE        sLEDContent[MAX_CONTENT_LEN];    // LEDÆÁÄ»ÏÔÊ¾ÄÚÈÝ
    BYTE        byContentAct;                    // 1-¾²Ì¬£¬2-¿ìËÙ´ò³ö£¬3-Ïò×óÒÆ¶¯£¬4-ÏòÓÒÒÆ¶¯£¬ 5-ÏòÉÏÒÆ¶¯£¬ 6-ÏòÏÂÒÆ¶¯
    BYTE        byContentSpeed;                    // 1-24£¨1×î¿ì£¬24×îÂý£©    
    BYTE        byContentStayTime;                 // 0-127.5s(¾«¶È0.5s£¬ SDK´«ËÍÊ±ºò*2£¬¼´´«ËÍÊýÖµ0-255£¬Éè±¸¶ËÔÚÊ¹ÓÃµÄÊ±ºòÐè³ýÒÔ2)
    BYTE        byRes[33];
}NET_DVR_LED_CONTENT_CFG, *LPNET_DVR_LED_CONTENT_CFG;

//LED¶¨Ê±¿ª¹Ø»ú
#define     LED_TIMER_NUM             3            // LED¿ª»ú¡¢¹Ø»úÊ±¼ä×éÊý
#define        TIME_SEGMENT_A_DAY        48            // Ê±¼ä¶Î¸öÊý£¬Ò»Ìì24Ð¡Ê±£¬°ëÐ¡Ê±Ò»¸ö¶Î

typedef struct tagNET_DVR_SWITCH_TIME
{
    BYTE    byValid;                // ¸Ã×é¶¨Ê±Ê±¼äÊÇ·ñÓÐÐ§£¬Ê±¼äÊÇ³É¶ÔÉèÖÃµÄ
    BYTE    byRes[3];
    NET_DVR_TIME_EX struTimeOn;     // ¿ª»úÊ±¼ä
    NET_DVR_TIME_EX struTimeOff;     // ¹Ø»úÊ±¼ä
}NET_DVR_SWITCH_TIME, *LPNET_DVR_SWITCH_TIME;


typedef struct tagNET_DVR_LED_SWITCH_TIME
{
    DWORD        dwSize;
    NET_DVR_SWITCH_TIME struTimer[LED_TIMER_NUM /*3*/];         //¶¨Ê±¿ª¹Ø»úÊ±¼ä£¬½á¹¹ÌåÖÐÖ»ÓÐÐ¡Ê±ºÍ·ÖÖÓÁ½¸ö²ÎÊýÓÐÐ§£¬Ã¿×é¿ª»úÊ±¼äÒªÔçÓÚ¸Ã×éµÄ¹Ø»úÊ±¼ä£¬µ«±ÈÇ°Ò»×éµÄ¹Ø»úÊ±¼äÒªÍí£¬ÀýÈç£ºstruTimer[0]µÄ¹Ø»úÊ±¼äÊÇ10£º00ÄÇÃ´£¬struTimer[0]µÄ¿ª»úÊ±¼äÐëÉèÖÃÎª10:00Ö®Ç°£¬ struTimer[1]µÄ¿ª»úÊ±¼äÐëÉèÖÃÎª10£º:00ÒÔºó¡£
    BYTE        byRes[64];
}NET_DVR_LED_SWITCH_TIME, *LPNET_DVR_LED_SWITCH_TIME;

//·ÖÊ±ÁÁ¶Èµ÷½Ú
typedef struct tagNET_DVR_LED_BRIGHTNESS_STEP
{
    DWORD         dwSize;
    BYTE        byValid;        //·ÖÊ±ÁÁ¶Èµ÷½ÚÊÇ·ñÓÐÐ§
    BYTE        byRes1[3];
    BYTE         byBrightnessStep[TIME_SEGMENT_A_DAY /*48*/];     //½«È«Ìì24¸öÐ¡Ê±·ÖÎª48¸öÊ±¶Î£¬Ã¿30·ÖÖÓÒ»¸öÊ±¶Î£¬ÓÃ48¸ö×Ö½Ú±íÊ¾Ã¿¸öÊ±¶ÎµÄÁÁ¶È¼¶±ð£¬ÁÁ¶È¹²16¼¶£¬ÓÃ0~15±íÊ¾¡£
    BYTE        byRes2[48];
}NET_DVR_LED_BRIGHTNESS_STEP, *LPNET_DVR_LED_BRIGHTNESS_STEP;

typedef struct tagNET_DVR_LED_STATUS
{
    DWORD    dwSize;
    BYTE    bySwitchState;        //1-¿ª»ú×´Ì¬ 2-¹Ø»ú×´Ì¬
    BYTE    byBrightness;        //ÁÁ¶ÈÖµ£¬·¶Î§0-15
    BYTE    byRes[62];
}NET_DVR_LED_STATUS, *LPNET_DVR_LED_STATUS;

//2010-12-28 ¸ßÇå½âÂë¿¨ÄÜÁ¦¼¯ begin
//ÐÂµÄ½âÂë¿¨·þÎñÆ÷ÄÜÁ¦¼¯
#define        MAX_DECODE_CARD_NUM            6   //×î¶à¸ßÇå½âÂë¿¨Êý
/********************¸ßÇå½âÂë¿¨Êä³öÄ£Ê½ºê¶¨Òå********************/
typedef enum _HD_DISPLAY_FORMAT
{
    HD_DISPLAY_FORMAT_INVALID = 0x00000000,
        HD_DISPLAY_FORMAT_CVBS = 0x00000001,
        HD_DISPLAY_FORMAT_DVI = 0x00000002,
        HD_DISPLAY_FORMAT_VGA = 0x00000004, 
        HD_DISPLAY_FORMAT_HDMI = 0x00000008, 
        HD_DISPLAY_FORMAT_YPbPr = 0x00000010
}HD_DISPLAY_FORMAT,*LPHD_DISPLAY_FORMAT;

/********************¸ßÇå½âÂë¿¨Êä³öÄ£Ê½ºê¶¨Òå********************/
typedef struct tagNET_DVR_DECCARD_ABILITY      /*¸ßÇå½âÂë¿¨ÄÜÁ¦¼¯*/
{
    BYTE byCardType;      //½âÂë¿¨ÀàÐÍ(0:MD,1:MD+,2:HD)
    BYTE byDecNums;      //½âÂëÍ¨µÀÊý
    BYTE byDispNums;      //ÏÔÊ¾Í¨µÀÊý
    BYTE byDecStartIdx;     //Ê×¸ö½âÂëÍ¨µÀÔÚËùÓÐ½âÂëÍ¨µÀÖÐµÄË÷Òý
    BYTE byDispStartIdx;     //Ê×¸öÏÔÊ¾Í¨µÀÔÚËùÓÐÏÔÊ¾Í¨µÀÖÐµÄË÷Òý
    BYTE byDispResolution[80]; //Êä³öÄ£Ê½Ö§³ÖµÄ·Ö±æÂÊ
    BYTE byDispFormat[8];     //Ö§³ÖµÄÊä³öÄ£Ê½(°´HD_DISPLAY_FORMAT)
    BYTE byWindowMode[4][8]; //Ö§³ÖµÄ´°¿ÚÄ£Ê½(±ÈÈç1,2,4,9,16))
    BYTE byRes[35];
} NET_DVR_DECCARD_ABILITY,*LPNET_DVR_DECCARD_ABILITY;

typedef struct tagNET_DVR_DECODESVR_ABILITY
{
    DWORD dwSize;      /* ½á¹¹Ìå´óÐ¡ */
    BYTE byCardNums;      /* ½âÂë¿¨Êý */
    BYTE byStartChan;     /* ÆðÊ¼Í¨µÀºÅ */
    BYTE byRes1[2];
    NET_DVR_DECCARD_ABILITY struDecCardAbility[MAX_DECODE_CARD_NUM];
    BYTE byRes2[64];
}NET_DVR_DECODESVR_ABILITY, *LPNET_DVR_DECODESVR_ABILITY;

typedef struct tagNET_MATRIX_DEV_CHAN_INFO
{
    NET_DVR_IPADDR     struIP;            //DVR IPµØÖ·
    WORD     wDVRPort;                 //¶Ë¿ÚºÅ
    BYTE     byChannel;                //Í¨µÀºÅ
    BYTE    byTransProtocol;        //´«ÊäÐ­ÒéÀàÐÍ0-TCP£¬1-UDP
    BYTE    byTransMode;            //´«ÊäÂëÁ÷Ä£Ê½ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷
    BYTE    byFactoryType;            /*Ç°¶ËÉè±¸³§¼ÒÀàÐÍ,Í¨¹ý½Ó¿Ú»ñÈ¡*/
    BYTE    byUsedSlotNum;            //ÊÇ·ñÊ¹ÓÃ²ÛÎ»ºÅ£¬0-²»Ê¹ÓÃ£¬1-Ê¹ÓÃ
    BYTE    bySlotNum;//²ÛÎ»ºÅ
    BYTE    byRes[68];
    BYTE    sUserName[NAME_LEN];    //¼à¿ØÖ÷»úµÇÂ½ÕÊºÅ
    BYTE    sPassword[PASSWD_LEN];    //¼à¿ØÖ÷»úÃÜÂë
}NET_MATRIX_DEV_CHAN_INFO,*LPNET_MATRIX_DEV_CHAN_INFO;

typedef struct tagNET_MATRIX_PU_STREAM_CFG
{
    DWORD                            dwSize;
    NET_DVR_STREAM_MEDIA_SERVER_CFG    struStreamMediaSvrCfg;
    NET_MATRIX_DEV_CHAN_INFO        struDevChanInfo;
} NET_MATRIX_PU_STREAM_CFG,LPNET_MATRIX_PU_STREAM_CFG;

/*cameraÅäÖÃµ¥Ôª½á¹¹*/
typedef struct tagNET_DVR_MATRIX_CAMERACFG
{
    DWORD                    dwGlobalIndex;//È«¾Ö±àºÅ
    DWORD                    dwInterIndex;//¾Ö²¿±àºÅ
    BYTE                    sCamName[NAME_LEN];
    NET_MATRIX_PU_STREAM_CFG struPuStreamCfg;
} NET_DVR_MATRIX_CAMERACFG,*LPNET_DVR_MATRIX_CAMERACFG;

typedef struct tagNET_DVR_MATRIX_CAMERALIST
{
    DWORD            dwSize;
    BYTE            byRes[12];
    DWORD            dwCamNum;//CAMÊýÁ¿
    BYTE              *pBuffer;
    DWORD             dwBufLen;//Ëù·ÖÅäÖ¸Õë³¤¶È£¬ÊäÈë²ÎÊý
} NET_DVR_MATRIX_CAMERALIST,*LPNET_DVR_MATRIX_CAMERALIST;

typedef struct tagNET_DVR_DISP_CHAN_INFO
{
    NET_DVR_IPADDR    struIP;                /* ½âÂëÆ÷ IPµØÖ· */
    WORD     wDVRPort;                 /* ¶Ë¿ÚºÅ */
    BYTE     byDispChannel;            /* ÏÔÊ¾Í¨µÀºÅ */
    BYTE    byUsedSlotNum;            //ÊÇ·ñÊ¹ÓÃ²ÛÎ»ºÅ£¬0-Ê¹ÓÃ£¬1-²»Ê¹ÓÃ
    BYTE    bySlotNum;//²ÛÎ»ºÅ
    BYTE    byRes[7];
    BYTE    sUserName[NAME_LEN];    /*µÇÂ½ÕÊºÅ */
    BYTE    sPassword[PASSWD_LEN];    /*ÃÜÂë */
}NET_DVR_DISP_CHAN_INFO,*LPNET_DVR_DISP_CHAN_INFO;

/*monitorÅäÖÃµ¥Ôª½á¹¹*/
typedef struct tagNET_DVR_MATRIX_MONITORCFG
{
    DWORD                        dwGlobalIndex;//È«¾Ö±àºÅ
    DWORD                        dwInterIndex;
    BYTE                        sMonName[NAME_LEN];
    NET_DVR_DISP_CHAN_INFO        struDispChanCfg;
} NET_DVR_MATRIX_MONITORCFG,*LPNET_DVR_MATRIX_MONITORCFG;
typedef struct tagNET_DVR_MATRIX_MONITORLIST
{
    DWORD        dwSize;
    BYTE        byRes[12];
    DWORD        dwMonNum;//MONÊýÁ¿
    BYTE          *pBuffer;
    DWORD         dwBufLen;//Ëù·ÖÅäÖ¸Õë³¤¶È£¬ÊäÈë²ÎÊý
} NET_DVR_MATRIX_MONITORLIST,*LPNET_DVR_MATRIX_MONITORLIST;

#define     MAX_SUBMATRIX_NUM        8//¼¶ÁªÖÐ×Ó×î¶à´ÓÏµÍ³ÊýÁ¿
typedef struct tagNET_DVR_SUBMATRIXINFO
{
    BYTE        byMainMatrix;//ÊÇ·ñÊÇÖ÷ÏµÍ³£¬1-ÊÇ£¬0-·ñ
    BYTE        bySubMatrixSequence;//¼¶Áª×ÓÊÓÆµ×ÛºÏÆ½Ì¨ÏµÍ³ÐòºÅ
    BYTE        byLoginType;//×¢²áÀàÐÍ£¬1-Ö±Á¬£¬2-DNS£¬3-»¨Éú¿Ç
    BYTE        byRes1[9];
    NET_DVR_IPADDR  struSubMatrixIP;        /*IPµØÖ·£¨¿ÉÐÞ¸Ä£©*/
    WORD        wSubMatrixPort;        /*×ÓÏµÍ³¶Ë¿ÚºÅ£¨¿ÉÐÞ¸Ä£©*/
    BYTE        byRes2[6];
    NET_DVR_IPADDR  struSubMatrixIPMask;    /*IPµØÖ·ÑÚÂë*/
    NET_DVR_IPADDR    struGatewayIpAddr;         /* Íø¹ØµØÖ· */    
    BYTE        sUserName[NAME_LEN];    /* ÓÃ»§Ãû £¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©*/
    BYTE        sPassword[PASSWD_LEN];    /*ÃÜÂë £¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©*/
    char        sDomainName[MAX_DOMAIN_NAME];//ÓòÃû(¿ÉÐÞ¸Ä)
    char         sDnsAddress[MAX_DOMAIN_NAME];/*DNSÓòÃû»òIPµØÖ·*/
    BYTE        sSerialNumber[SERIALNO_LEN];//ÐòÁÐºÅ£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©
    BYTE        byRes3[16];
}NET_DVR_SUBMATRIXINFO, *LPNET_DVR_SUBMATRIXINFO;

typedef struct tagNET_DVR_ALLUNITEDMATRIXINFO
{
    DWORD dwSize;
    NET_DVR_SUBMATRIXINFO struSubMatrixInfo[MAX_SUBMATRIX_NUM];
    BYTE  byRes2[32];
}NET_DVR_ALLUNITEDMATRIXINFO, *LPNET_DVR_ALLUNITEDMATRIXINFO;

#define    MAX_GATEWAYTRUNKNUM        1024 //¼¶ÁªÊÓÆµ×ÛºÏÆ½Ì¨ÖÐ×î´óÂ·ÓÉ¸ÉÏßÊý

typedef struct tagNET_DVR_MATRIXGATEWAYNOTE
{
    WORD    wTrunkInToOutAbility;//¸ÉÏß´ø¿í£¬°´D1µÄ±ê×¼ºâÁ¿£¬Èç4±íÊ¾Ö§³Ö4¸öD1
    WORD    wTrunkOutToInAbility;//¸ÉÏß´ø¿í£¬°´D1µÄ±ê×¼ºâÁ¿£¬Èç4±íÊ¾Ö§³Ö4¸öD1£¬Ë«Ïò¹âÏËÊ±ÓÃµ½´ËÖµ
    BYTE    byRes[4];
    NET_DVR_MATRIXSUBSYSTEMINFO struInputNote;
    NET_DVR_MATRIXSUBSYSTEMINFO struOutputNote;
}NET_DVR_MATRIXGATEWAYNOTE, *LPNET_DVR_MATRIXGATEWAYNOTE;

typedef struct tagNET_DVR_MATRIXGATEWAYINFO
{
    DWORD dwSize;
    NET_DVR_MATRIXGATEWAYNOTE struGatewayNote[MAX_GATEWAYTRUNKNUM];
    BYTE  byRes [32];
}NET_DVR_MATRIXGATEWAYINFO, *LPNET_DVR_MATRIXGATEWAYINFO;

typedef struct tagNET_DVR_MATRIXCODESYSTEMINFO
{
    BYTE   byMatrixNum;//ÊÓÆµ×ÛºÏÆ½Ì¨ºÅ
    BYTE    bySubSystemNum;//×ÓÏµÍ³²ÛÎ»ºÅ
    BYTE    byChan;//±àÂëÍ¨µÀ
    BYTE   byRes [13];
}NET_DVR_MATRIXCODESYSTEMINFO,*LPNET_DVR_MATRIXCODESYSTEMINFO;
typedef struct tagNET_DVR_MATRIXDECODESYSTEMINFO
{
    BYTE    byMatrixNum;//ÊÓÆµ×ÛºÏÆ½Ì¨ºÅ
    BYTE    bySubSystemNum;//×ÓÏµÍ³²ÛÎ»ºÅ
    BYTE    byDispChan;//ÏÔÊ¾Í¨µÀ
    BYTE    bySubDispChan;//ÏÔÊ¾Í¨µÀ×ÓÍ¨µÀºÅ
    BYTE    byRes [12];
}NET_DVR_MATRIXDECODESYSTEMINFO,*LPNET_DVR_MATRIXDECODESYSTEMINFO;

typedef struct tagNET_DVR_MATRIXSWITCH
{
    NET_DVR_MATRIXCODESYSTEMINFO struInputNote;
    NET_DVR_MATRIXDECODESYSTEMINFO struOutputNote;
    BYTE    byRes[32];
}NET_DVR_MATRIXSWITCH, *LPNET_DVR_MATRIXSWITCH;

typedef enum {
    ENC_CARD = 0,
        DEC_CARD,
        SD_DEC_CARD,
        FPGA_CARD,
        CS_CARD,
        ALERTOR_CARD,
        NAT_0,
        NAT_1,
        VCA_CARD,
        VGA_DEC_CARD,
        VGA_ENC_CARD,
        ERR_CARD,
} DEV_TYPE;

typedef struct tagNET_DVR_MATRIXSWITCHCTRL
{
    DWORD dwCamId;//ÉãÏñ»úÈ«¾Ö±àºÅ
    DWORD dwMonId;//¼àÊÓÆ÷È«¾Ö±àºÅ
    BYTE  bySubWindowNum;//¼àÊÓÆ÷¶ÔÓ¦×Ó´°¿ÚºÅ
    BYTE   bySwitchType;/*ÇÐ»»ÀàÐÍ£¬0:Õý³£ÇÐ»»£¬1:±¨¾¯´¥·¢ÇÐ»»£¬2:±¨¾¯È¡Ïû£¬0xff:±íÊ¾´ËMONÉÏËùÓÐ±¨¾¯È«²¿È¡Ïû*/
    WORD   wAlarmType;//±¨¾¯Éè±¸ÀàÐÍ£¬1:±¨¾¯Ö÷»ú£¬2£ºÖÇÄÜÉè±¸
    DWORD  dwResidentTime;/* ÏÔÊ¾×¤ÁôÊ±¼ä£¬0xFFFFFFFF Ê± Îª³£×¤Çé¿ö£¬±£³ÖÏÔÊ¾*/
    BYTE   byVcaDevType;//µ±±¨¾¯Éè±¸ÀàÐÍÊÇ"ÖÇÄÜÉè±¸"Ê±£¬°´DEV_TYPEÀàÐÍ
    BYTE   byRes[19];
}NET_DVR_MATRIXSWITCHCTRL, *LPNET_DVR_MATRIXSWITCHCTRL;

typedef struct tagNET_DVR_MATRIXDATABASE
{
    //ÅäÖÃÎÄ¼þÀàÐÍ£¬1-ÓòÊý¾Ý¿âÅäÖÃÎÄ¼þ£¬2-×ÓÓòÊý¾Ý¿âÅäÖÃÎÄ¼þ£¬3-Æ½Ì¨Êý¾Ý¿âÅäÖÃÎÄ¼þ£¬4-³¡¾°ÅäÖÃÎÄ¼þ£¬0xff×îºóÒ»´ÎÊ§°ÜµÄÊý¾Ý¿âÓï¾ä
    DWORD dwDevType; 
    DWORD dwParam; //²ÎÊý£¬´ú±íÓòºÅ¡¢×ÓÓòºÅ¡¢Æ½Ì¨ºÅ£¬³¡¾°ÅäÖÃÎÄ¼þÊ±´ËÖµÎÞÓÃ
    BYTE  byFileType;//ÎÄ¼þÀàÐÍ£¬1-sqlÓï¾ä£¬2-dbÓï¾ä£¬3-³¡¾°ÅäÖÃÎÄ¼þ
    BYTE  byRes [3];
} NET_DVR_MATRIXDATABASE, *LPNET_DVR_MATRIXDATABASE;

typedef struct tagNET_DVR_SUBSYSTEMINFO_V40
{
/*×ÓÏµÍ³ÀàÐÍ£¬1-½âÂëÓÃ×ÓÏµÍ³£¬2-±àÂëÓÃ×ÓÏµÍ³£¬3-¼¶ÁªÊä³ö×ÓÏµÍ³£¬4-¼¶ÁªÊäÈë×ÓÏµÍ³£¬5-Âë·ÖÆ÷×ÓÏµÍ³£¬6-±¨¾¯Ö÷»ú×ÓÏµÍ³£¬7-ÖÇÄÜ×ÓÏµÍ³£¬8-V6½âÂë×ÓÏµÍ³£¬
    9-V6×ÓÏµÍ³£¬10-×ªÂë×ÓÏµÍ³£¬11-X86·þÎñÆ÷×ÓÏµÍ³£¬12-³¬¸ßÇåÊäÈë×ÓÏµÍ³£¬13-X86ÖÐÐÄ·þÎñ°å£¬14- X86ÒµÎñ·þÎñ°å£¬15-¶àÏà»úÆ´½Ó×ÓÏµÍ³£¬ 16-ÍøÂç¹âÏË½»»»×ÓÏµÍ³£¬17-X86Æ´½Ó×ÓÏµÍ³£¬18-ÆÕÍ¨Æ´½Ó×ÓÏµÍ³£¬0-NULL£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©*/
    BYTE        bySubSystemType;
    //×ÓÏµÍ³Í¨µÀÊý£¬¶ÔÓÚÂë·Ö×ÓÏµÍ³£¬´ú±í485´®¿ÚÊýÁ¿£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©
    BYTE        byChan;
    BYTE        byLoginType;//×¢²áÀàÐÍ£¬1-Ö±Á¬£¬2-DNS£¬3-»¨Éú¿Ç
    BYTE        bySlotNum ;//²ÛÎ»ºÅ£¬´Ë²ÎÊýÖ»ÄÜ»ñÈ¡
    BYTE        byRes1[4];
    NET_DVR_IPADDR   struSubSystemIP;        /*IPµØÖ·£¨¿ÉÐÞ¸Ä£©*/
    NET_DVR_IPADDR   struSubSystemIPMask;//×ÓÍøÑÚÂë
    NET_DVR_IPADDR     struGatewayIpAddr;    /* Íø¹ØµØÖ· */
    WORD        wSubSystemPort;        //×ÓÏµÍ³¶Ë¿ÚºÅ£¨¿ÉÐÞ¸Ä£©
    BYTE        byRes2[6];
    BYTE        sUserName[NAME_LEN];    /* ÓÃ»§Ãû £¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©*/
    BYTE        sPassword[PASSWD_LEN];    /*ÃÜÂë(¿ÉÐÞ¸Ä)*/
    char        sDomainName[MAX_DOMAIN_NAME];//ÓòÃû(¿ÉÐÞ¸Ä)
    char         sDnsAddress[MAX_DOMAIN_NAME];/*DNSÓòÃû»òIPµØÖ·*/
    BYTE        sSerialNumber[SERIALNO_LEN];//ÐòÁÐºÅ£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©
    BYTE        byBelongBoard;//ËùÊô×Ó°åºÅ£¬´Ó1¿ªÊ¼£¬0xff±íÊ¾ÎÞÐ§
    BYTE        byInterfaceType;//½Ó¿ÚÀàÐÍ£¬1-BNC£¬2-VGA£¬3-HDMI£¬4-DVI£¬5-SDI, 6-FIBER, 7-RGB, 8-YPrPb, 9-VGA/HDMI/DVI×ÔÊÊÓ¦£¬10-3GSDI, 11-VGA/DVI×ÔÊÊÓ¦£¬12-HDTVI£¬0xff-ÎÞÐ§
    BYTE        byInterfaceNums;//½Ó¿Ú¸öÊý£¬0xff±íÊ¾ÎÞÐ§
    BYTE        byInterfaceStartNum;//½Ó¿ÚÆðÊ¼ºÅ£¬0xff±íÊ¾ÎÞÐ§
    BYTE        byDeviceName[20];//×ÓÏµÍ³Ãû³Æ
    BYTE        byAudioChanNums; //ÒôÆµÍ¨µÀ¸öÊý
    BYTE        byAudioChanStartNum; //ÒôÆµÍ¨µÀÆðÊ¼ºÅ
    BYTE        byAudioChanType;//ÒôÆµÍ¨µÀÀàÐÍ£¬0-ÎÞÐ§£¬1-ÒôÆµÊäÈë£¬2-ÒôÆµÊä³ö
    BYTE        byRes3[33];
}NET_DVR_SUBSYSTEMINFO_V40, *LPNET_DVR_SUBSYSTEMINFO_V40;

#define  MAX_SUBSYSTEM_NUM_V40  120
typedef struct tagNET_DVR_ALLSUBSYSTEMINFO_V40
{
    DWORD dwSize;
    NET_DVR_SUBSYSTEMINFO_V40 struSubSystemInfo[MAX_SUBSYSTEM_NUM_V40];
    BYTE byRes[8];
}NET_DVR_ALLSUBSYSTEMINFO_V40, *LPNET_DVR_ALLSUBSYSTEMINFO_V40;

typedef struct tagNET_DVR_SINGLESUBSYSTEMJOININFO_V40
{
    /*×ÓÏµÍ³ÀàÐÍ£¬1-½âÂëÓÃ×ÓÏµÍ³£¬2-±àÂëÓÃ×ÓÏµÍ³£¬3-¼¶ÁªÊä³ö×ÓÏµÍ³£¬4-¼¶ÁªÊäÈë×ÓÏµÍ³£¬5-Âë·ÖÆ÷×ÓÏµÍ³£¬6-±¨¾¯Ö÷»ú×ÓÏµÍ³£¬7-ÖÇÄÜ×ÓÏµÍ³£¬8-V6½âÂë×ÓÏµÍ³£¬9-V6×ÓÏµÍ³£¬0-NULL£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©*/
    BYTE   bySubSystemType; 
    BYTE   byConnectStatus;//¼¶ÁªÏµÍ³¹ØÁª×´Ì¬£¬1-Á¬½ÓÕý³££¬2-Á¬½Ó¶Ï¿ª
    BYTE   byMatrixNum;//¼¶ÁªÊÓÆµ×ÛºÏÆ½Ì¨ºÅ£¬×ÓÏµÍ³ÀàÐÍÊÇ3»ò4Ê±¿ÉÓÃ
    BYTE   bySubSystemNum;//¼¶Áª×ÓÏµÍ³²ÛÎ»ºÅ£¬0~79£¬×ÓÏµÍ³ÀàÐÍÊÇ3»ò4Ê±¿ÉÓÃ
    NET_DVR_DECSUBSYSTEMJIONSTATUS struDecSub [MATRIX_MAXDECSUBSYSTEMCHAN];
    BYTE   byBindStatus;//°ó¶¨×´Ì¬£¬0-Ã»ÓÐ°ó¶¨£¬1-ÒÑ¾­°ó¶¨£¨´óÆÁÆ´½ÓÊ±ÓÃµ½£©
    BYTE   bySlotNum ;//²ÛÎ»ºÅ£¬´Ë²ÎÊýÖ»ÄÜ»ñÈ¡
    //×ÓÏµÍ³ÀàÐÍÎª1µÄÊ±¿ÉÓÃ£¬0-Î´¹ØÁª£¬1-D1£¬2-720£¬3-1080
    BYTE   byDecodeAbility; 
    BYTE   byUsedTrunk;
    BYTE   byRes[64];
}NET_DVR_SINGLESUBSYSTEMJOININFO_V40,LPNET_DVR_SINGLESUBSYSTEMJOININFO_V40;

typedef struct tagNET_DVR_ALLDECSUBSYSTEMJOININFO_V40
{
    DWORD dwSize;
    NET_DVR_SINGLESUBSYSTEMJOININFO_V40 struSingleSubSystemJoinInfo[MAX_SUBSYSTEM_NUM_V40];
    BYTE  byRes[48];
}NET_DVR_ALLDECSUBSYSTEMJOININFO_V40, *LPNET_DVR_ALLDECSUBSYSTEMJOININFO_V40;

#define  MAX_OPTICALFIBER_NUM  16
typedef struct tagNET_DVR_SUBSYSTEM_ABILITY
{
/*×ÓÏµÍ³ÀàÐÍ£¬1-½âÂëÓÃ×ÓÏµÍ³£¬2-±àÂëÓÃ×ÓÏµÍ³£¬3-¼¶ÁªÊä³ö×ÓÏµÍ³£¬4-¼¶ÁªÊäÈë×ÓÏµÍ³£¬5-Âë·ÖÆ÷×ÓÏµÍ³£¬6-±¨¾¯Ö÷»ú×ÓÏµÍ³£¬7-ÖÇÄÜ×ÓÏµÍ³£¬8-V6½âÂë×ÓÏµÍ³£¬9-V6×ÓÏµÍ³£¬
    10-×ªÂë×ÓÏµÍ³£¬11-X86·þÎñÆ÷×ÓÏµÍ³£¬°å£¬ 14- X86ÒµÎñ·þÎñ°å£¬15-¶àÏà»úÆ´½Ó×ÓÏµÍ³£¬ 16-ÍøÂç¹âÏË½»»»×ÓÏµÍ³£¬17-X86Æ´½Ó×ÓÏµÍ³£¬18-ÆÕÍ¨Æ´½Ó×ÓÏµÍ³£¬0-NULL£¨´Ë²ÎÊý0-NULL£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©*/
    BYTE  bySubSystemType;
    BYTE  byChanNum;//×ÓÏµÍ³Í¨µÀÊý
    BYTE  byStartChan;//×ÓÏµÍ³ÆðÊ¼Í¨µÀÊý
    BYTE  bySlotNum ;//²ÛÎ»ºÅ 
    BYTE  byRes1[4];
    union
    {
        BYTE byRes[200];        
        struct
        {
            BYTE byDecode;        //ÊÇ·ñÊÇ´ø½âÂë¹¦ÄÜµÄÖÇÄÜ°å,1-ÊÇ£¬0-·ñ
            BYTE byNeedPreAllocDec; //ÊÇ·ñÐèÒªÔ¤·ÖÅä½âÂë×ÊÔ´£¬1-ÊÇ£¬0-·ñ
            BYTE byVACType;  //ÖÇÄÜ×ÓÏµÍ³ÀàÐÍ£¬0-ÆÕÍ¨ÐÍ£¬1-ÔöÇ¿ÐÍ
            BYTE byRes[197];
        }struVACSystemAbility;
        struct
        {
            BYTE  byVGANums;//VGAÏÔÊ¾Í¨µÀ¸öÊý£¨´Ó1¿ªÊ¼£©
            BYTE  byBNCNums;//BNCÏÔÊ¾Í¨µÀ¸öÊý£¨´Ó9¿ªÊ¼£©
            BYTE  byHDMINums;//HDMIÏÔÊ¾Í¨µÀ¸öÊý£¨´Ó25¿ªÊ¼£©
            BYTE  byDVINums;//DVIÏÔÊ¾Í¨µÀ¸öÊý£¨´Ó29¿ªÊ¼£©
            BYTE  byLayerNums ;//´óÆÁÆ´½ÓÖÐ£¬×öÖ÷ÆÁÊ±ËùÖ§³ÖÍ¼²ãÊý
            BYTE  bySpartan;//³©ÏÔ¹¦ÄÜ£¬0-²»Ö§³Ö£¬1-Ö§³Ö
            BYTE  byDecType; //½âÂë×ÓÏµÍ³ÀàÐÍ£¬0-ÆÕÍ¨ÐÍ,1-ÔöÇ¿ÐÍ(ÆÕÍ¨ÐÍ·ÖÆÁÊ±Ç°4´°¿ÚÐèÊ¹ÓÃ×ÔÉí×ÊÔ´£¬ÔöÇ¿ÐÍÎÞ´ËÏÞÖÆ£¬ÔöÇ¿ÐÍ×î¶à¿É±»ÆäËû×ÓÏµÍ³½è16Â·D1½âÂë×ÊÔ´
            //ÔöÇ¿ÐÍ±»´óÆÁ¹ØÁªÎª×ÓÆÁºó×ÊÔ´¿É±»½èÓÃ£¬ÆÕÍ¨ÐÍÔò²»ÄÜ±»½èÓÃ)
            //2-ÖÇÄÜ¹ØÁª½âÂë×ÓÏµÍ³£¬3-×ªÂë¹ØÁª½âÂë×ÓÏµÍ³£¨ÖÇÄÜºÍ×ªÂë¹ØÁª×ÓÏµÍ³²»ÄÜÓÃÓÚ½âÂëÉÏÇ½£©
            BYTE  byOutputSwitch;//ÊÇ·ñÖ§³ÖHDMI/DVI»¥ÏàÇÐ»»£¬0-²»Ö§³Ö£¬1-Ö§³Ö
            BYTE  bySDINums;//SDIÏÔÊ¾Í¨µÀ¸öÊý£¨´Ó33¿ªÊ¼£©
            BYTE  byRes1[38];               
            BYTE  byDecoderType ; //½âÂë°åÊÇ·ñÖ§³Ö¶à³§¼ÒÂëÁ÷½âÂë£¬0-²»Ö§³Ö£¬1-Ö§³Ö
            BYTE  byRes2[152];
        }struDecoderSystemAbility;
        struct
        {
            BYTE  byCoderType;//±àÂëÆ÷ÀàÐÍ£¬0-±êÇå£¬1-¸ßÇå, 2-Ä£Äâ¸ßÇå
            BYTE  byOptical;//¹â¶Ë»ú½ÓÈë£¬0-·ñ£¬1-ÊÇ
            BYTE  byOpticalSubChan; //Ã¿¸ö¹â¿ÚÐÅµÀÊý            
            BYTE  bySupportAVSeparate;//ÊÇ·ñÖ§³ÖÒôÊÓÆµ·ÖÀë£¬0-²»Ö§³Ö£¬1-Ö§³Ö
            BYTE  byRes[196];
        }struCoderSystemAbility;
        struct
        {
            WORD    wTrunkAbility;//¸ÉÏß´ø¿í£¬°´D1µÄ±ê×¼ºâÁ¿£¬Èç4±íÊ¾Ö§³Ö4¸öD1
            BYTE    byOpticalFiberNum;//¹âÏËÌõÊý
            BYTE    byRes[197];
        }struInputSystemAbility;
        struct
        {
            WORD    wTrunkAbility;//¸ÉÏß´ø¿í£¬°´D1µÄ±ê×¼ºâÁ¿£¬Èç4±íÊ¾Ö§³Ö4¸öD1
            BYTE    byOpticalFiberNum;//¹âÏËÌõÊý
            BYTE    byRes[197];
        }struOutputSystemAbility;
        struct
        {
            BYTE    by485Num;//Âë·Ö×ÓÏµÍ³ÖÐ485ÊýÁ¿
            BYTE    bySlotNum;//Ã¿¸ö485²ÛÎ»Êý
            BYTE    byRes[198];
        }struCodeSpitterSystemAbility;
        struct
        {
            WORD    wAlarmInNums;
            WORD    wAlarmOutNums;
            /* ±êÊ¶±¨¾¯ºÐÊÇ·ñÁ¬½Ó£¬ 1±íÊ¾ÒÑÁ¬½Ó£¬ Îª0 ±íÊ¾Î´Á¬½Ó */
            BYTE  byAlarmBoxEnable[4][8];
            BYTE  bySupportContact; /* ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿±¨¾¯Áª¶¯£¬0-²»Ö§³Ö,1-Ö§³Ö */
            BYTE  byRes[163];
        }struAlarmHostSystemAbility;
        struct
        {
            BYTE  byOpticalFiberNum;//¹âÏËÌõÊý
            BYTE  byRes1[3];
            //¹âÏË´ø¿í£¬°´D1µÄ±ê×¼ºâÁ¿£¬Èç4±íÊ¾Ö§³Ö4¸öD1
            WORD    wTrunkAbility[MAX_OPTICALFIBER_NUM/*16*/];
            BYTE  byRes2[164];
        }struInOutputSystemAbility;
        struct
        {
            BYTE  bySupportRingProtocol;   //ÊÇ·ñÖ§³Ö»·ÍøÐ­Òé
            BYTE  bySupportRingNums; //Ö§³Ö»·ÍøÊýÁ¿
            BYTE  bySupportPortNums;  //Ö§³ÖµÄ¶Ë¿ÚÊýÁ¿
            BYTE  byRes[1]; 
            DWORD dwPortSupportRingProto; //Ã¿¸ö¶Ë¿ÚÊÇ·ñÖ§³Ö»·ÍøÐ­Òé£¬°´Î»Ëã£¬1¡«32Î»·Ö±ð±íÊ¾1¡«32¶Ë¿Ú£¬0-²»Ö§³Ö£¬1-±íÊ¾Ö§³Ö 
            BYTE  byRes2[192];
        } struFiberSwitchSystemAbility;    
    }struAbility;
}NET_DVR_SUBSYSTEM_ABILITY, *LPNET_DVR_SUBSYSTEM_ABILITY;

typedef struct tagNET_DVR_VIDEOPLATFORM_ABILITY_V40
{
    DWORD   dwSize;
    BYTE    byCodeSubSystemNums;//±àÂë×ÓÏµÍ³ÊýÁ¿
    BYTE    byDecodeSubSystemNums;//½âÂë×ÓÏµÍ³ÊýÁ¿
    BYTE    bySupportNat;//ÊÇ·ñÖ§³ÖNAT£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    BYTE    byInputSubSystemNums;//¼¶ÁªÊäÈë×ÓÏµÍ³ÊýÁ¿
    BYTE    byOutputSubSystemNums;//¼¶ÁªÊä³ö×ÓÏµÍ³ÊýÁ¿
    BYTE    byCodeSpitterSubSystemNums;//Âë·Ö×ÓÏµÍ³ÊýÁ¿
    BYTE    byAlarmHostSubSystemNums;//±¨¾¯×ÓÏµÍ³ÊýÁ¿
    BYTE    bySupportBigScreenNum;//ËùÖ§³Ö×î¶à×é³É´óÆÁµÄ¸öÊý
    BYTE    byVCASubSystemNums;//ÖÇÄÜ×ÓÏµÍ³ÊýÁ¿
    BYTE    byV6SubSystemNums;//V6×ÓÏµÍ³ÊýÁ¿
    BYTE    byV6DecoderSubSystemNums;//V6½âÂë×ÓÏµÍ³ÊýÁ¿
    BYTE    bySupportBigScreenX;/*´óÆÁÆ´½ÓµÄÄ£Ê½£ºm¡Án*/
    BYTE    bySupportBigScreenY;
    BYTE    bySupportSceneNums;//Ö§³Ö³¡¾°Ä£Ê½µÄ¸öÊý
    BYTE    byVcaSupportChanMode;//ÖÇÄÜÖ§³ÖµÄÍ¨µÀÊ¹ÓÃÄ£Ê½£¬0-Ê¹ÓÃ½âÂëÍ¨µÀ£¬1-Ê¹ÓÃÏÔÊ¾Í¨µÀ¼°×ÓÍ¨µÀºÅ
    BYTE    bySupportScreenNums;//ËùÖ§³ÖµÄ´óÆÁµÄÆÁÄ»×î´ó¸öÊý
    BYTE    bySupportLayerNums;//ËùÖ§³ÖµÄÍ¼²ãÊý£¬0xff-ÎÞÐ§
    BYTE    byNotSupportPreview;//ÊÇ·ñÖ§³ÖÔ¤ÀÀ,1-²»Ö§³Ö£¬0-Ö§³Ö
    BYTE    byNotSupportStorage;//ÊÇ·ñÖ§³Ö´æ´¢,1-²»Ö§³Ö£¬0-Ö§³Ö
    BYTE    byUploadLogoMode;//ÉÏ´«logoÄ£Ê½£¬0-ÉÏ´«¸ø½âÂëÍ¨µÀ£¬1-ÉÏ´«¸øÏÔÊ¾Í¨µÀ
    NET_DVR_SUBSYSTEM_ABILITY struSubSystemAbility[MAX_SUBSYSTEM_NUM_V40];
    BYTE    by485Nums;//485´®¿Ú¸öÊý
    BYTE    by232Nums;//232´®¿Ú¸öÊý
    BYTE    bySerieStartChan;//ÆðÊ¼Í¨µÀ
    BYTE    byScreenMode;//´óÆÁÄ£Ê½£¬0-Ö÷ÆÁÓÉ¿Í»§¶Ë·ÖÅä£¬1-Ö÷ÆÁÓÉÉè±¸¶Ë·ÖÅä
    BYTE    byDevVersion;//Éè±¸°æ±¾£¬0-B10/B11/B12£¬1-B20
    BYTE    bySupportBaseMapNums;//ËùÖ§³ÖµÄµ×Í¼Êý£¬µ×Í¼ºÅ´Ó1¿ªÊ¼
    WORD    wBaseLengthX;//Ã¿¸öÆÁ´óÐ¡µÄ»ù×¼Öµ£¬B20Ê¹ÓÃ
    WORD    wBaseLengthY;
    BYTE    bySupportPictureTrans;  //ÊÇ·ñÖ§³ÖÍ¼Æ¬»ØÏÔ£¬0-²»Ö§³Ö£¬1-Ö§³Ö    
    BYTE    bySupportPreAllocDec;   //ÊÇ·ñÖ§³ÖÖÇÄÜ½âÂë×ÊÔ´Ô¤·ÖÅä£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    BYTE    bySupportDecAutoManage; //ÊÇ·ñÖ§³Ö½âÂë×ÊÔ´¹ÜÀí
    BYTE    byTranDevSubSystemNums; //×ªÂë×ÓÏµÍ³ÊýÁ¿
    BYTE    byFiberSwitchNums;  //ÍøÂç¹âÏË×ÓÏµÍ³ÊýÁ¿
    BYTE    byRes2[625];
}NET_DVR_VIDEOPLATFORM_ABILITY_V40, *LPNET_DVR_VIDEOPLATFORM_ABILITY_V40;

typedef struct tagNET_DVR_VIDEOPLATFORM_ABILITY
{
    DWORD dwSize;
    BYTE  byCodeSubSystemNums;//±àÂë×ÓÏµÍ³ÊýÁ¿
    BYTE  byDecodeSubSystemNums;//½âÂë×ÓÏµÍ³ÊýÁ¿
    BYTE  bySupportNat;//ÊÇ·ñÖ§³ÖNAT£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    BYTE  byInputSubSystemNums;//¼¶ÁªÊäÈë×ÓÏµÍ³ÊýÁ¿
    BYTE  byOutputSubSystemNums;//¼¶ÁªÊä³ö×ÓÏµÍ³ÊýÁ¿
    BYTE  byCodeSpitterSubSystemNums;//Âë·Ö×ÓÏµÍ³ÊýÁ¿
    BYTE  byAlarmHostSubSystemNums;//±¨¾¯×ÓÏµÍ³ÊýÁ¿
    BYTE  bySupportBigScreenNum;//ËùÖ§³Ö×î¶à´óÆÁÆ´½ÓÊýÁ¿
    BYTE  byVCASubSystemNums;//ÖÇÄÜ×ÓÏµÍ³ÊýÁ¿
    BYTE  byRes1[11];   
    NET_DVR_SUBSYSTEM_ABILITY struSubSystemAbility[MAX_SUBSYSTEM_NUM];
    BYTE  by485Nums;//485´®¿Ú¸öÊý
    BYTE  by232Nums;//485´®¿Ú¸öÊý
    BYTE  bySerieStartChan;//ÆðÊ¼Í¨µÀ
    BYTE  byRes2[637];    
}NET_DVR_VIDEOPLATFORM_ABILITY, *LPNET_DVR_VIDEOPLATFORM_ABILITY;
//»ñÈ¡ÄÜÁ¦¼¯½Ó¿Ú

//Ä£Ê½A 
typedef struct tagNET_DVR_HOLIDATE_MODEA
{
    BYTE    byStartMonth;    // ¿ªÊ¼ÔÂ ´Ó1¿ªÊ¼
    BYTE    byStartDay;        // ¿ªÊ¼ÈÕ ´Ó1¿ªÊ¼
    BYTE    byEndMonth;        // ½áÊøÔÂ 
    BYTE    byEndDay;        // ½áÊøÈÕ
    BYTE    byRes[4];        // ±£Áô×Ö½Ú
}NET_DVR_HOLIDATE_MODEA, *LPNET_DVR_HOLIDATE_MODEA;

typedef struct tagNET_DVR_HOLIDATE_MODEB
{
    BYTE    byStartMonth;    // ´Ó1¿ªÊ¼
    BYTE    byStartWeekNum;    // µÚ¼¸¸öÐÇÆÚ ´Ó1¿ªÊ¼ 
    BYTE    byStartWeekday;    // ÐÇÆÚ¼¸
    BYTE    byEndMonth;        // ´Ó1¿ªÊ¼
    BYTE    byEndWeekNum;    // µÚ¼¸¸öÐÇÆÚ ´Ó1¿ªÊ¼ 
    BYTE    byEndWeekday;    // ÐÇÆÚ¼¸    
    BYTE    byRes[2];        // ±£Áô×Ö½Ú 
}NET_DVR_HOLIDATE_MODEB, *LPNET_DVR_HOLIDATE_MODEB;

typedef struct tagNET_DVR_HOLIDATE_MODEC
{
    WORD    wStartYear;        // Äê
    BYTE    byStartMon;        // ÔÂ
    BYTE    byStartDay;        // ÈÕ
    WORD    wEndYear;        // Äê
    BYTE    byEndMon;        // ÔÂ
    BYTE    byEndDay;        // ÈÕ
}NET_DVR_HOLIDATE_MODEC, *LPNET_DVR_HOLIDATE_MODEC;

typedef union tagNET_DVR_HOLIDATE_UNION
{    
    // ÁªºÏÌå´óÐ¡ 12×Ö½Ú
    DWORD                    dwSize[3];
    NET_DVR_HOLIDATE_MODEA    struModeA;    // Ä£Ê½A
    NET_DVR_HOLIDATE_MODEB    struModeB;    // Ä£Ê½B
    NET_DVR_HOLIDATE_MODEC    struModeC;    // Ä£Ê½C
}NET_DVR_HOLIDATE_UNION, *LPNET_DVR_HOLIDATE_UNION;

typedef enum tagHOLI_DATE_MODE
{
    HOLIDATE_MODEA = 0,
        HOLIDATE_MODEB,
        HOLIDATE_MODEC
}HOLI_DATE_MODE;

typedef struct tagNET_DVR_HOLIDAY_PARAM
{
    BYTE    byEnable;            // ÊÇ·ñÆôÓÃ
    BYTE    byDateMode;            // ÈÕÆÚÄ£Ê½ 0-Ä£Ê½A 1-Ä£Ê½B 2-Ä£Ê½C
    BYTE    byRes1[2];            // ±£Áô×Ö½Ú
    NET_DVR_HOLIDATE_UNION uHolidate;    // ¼ÙÈÕÈÕÆÚ
    BYTE    byName[NAME_LEN];    // ¼ÙÈÕÃû³Æ
    BYTE    byRes2[20];            // ±£Áô×Ö½Ú
}NET_DVR_HOLIDAY_PARAM, *LPNET_DVR_HOLIDAY_PARAM;

#define  MAX_HOLIDAY_NUM    32

typedef struct tagNET_DVR_HOLIDAY_PARAM_CFG
{
    DWORD    dwSize;            // ½á¹¹Ìå´óÐ¡
    NET_DVR_HOLIDAY_PARAM struHolidayParam[MAX_HOLIDAY_NUM];    // ¼ÙÈÕ²ÎÊý
    DWORD    byRes[40];        // ±£Áô²ÎÊý
}NET_DVR_HOLIDAY_PARAM_CFG, *LPNET_DVR_HOLIDAY_PARAM_CFG;

// ¼ÙÈÕ±¨¾¯´¦Àí·½Ê½
typedef struct tagNET_DVR_HOLIDAY_HANDLE
{
    DWORD    dwSize;                // ½á¹¹Ìå´óÐ¡
    NET_DVR_SCHEDTIME              struAlarmTime[MAX_TIMESEGMENT_V30];    // ²¼·ÀÊ±¼ä¶Î
    BYTE    byRes2[240];        // ±£Áô×Ö½Ú
}NET_DVR_HOLIDAY_HANDLE, *LPNET_DVR_HOLIDAY_HANDLE;

typedef struct tagNET_DVR_HOLIDAY_HANDLE_COND
{
    DWORD    dwSize;                // ½á¹¹Ìå´óÐ¡
    DWORD    dwChannel;            //Í¨µÀºÅ
    DWORD    dwSMDHandleType;    //¼òÒ×ÖÇÄÜ¼ÙÈÕ²¼·ÀÀàÐÍ 0-ÒôÆµÒì³£Õì²â£¬1-Ðé½¹Õì²â£¬2-³¡¾°±ä¸üÕì²â
    BYTE     byRes2[32];        // ±£Áô×Ö½Ú
}NET_DVR_HOLIDAY_HANDLE_COND, *LPNET_DVR_HOLIDAY_HANDLE_COND;

typedef struct tagNET_DVR_HOLIDAY_RECORD
{
    DWORD           dwSize;
    NET_DVR_RECORDDAY     struRecDay;     // Â¼Ïñ²ÎÊý
    NET_DVR_RECORDSCHED   struRecordSched[MAX_TIMESEGMENT_V30]; // Â¼ÏñÊ±¼ä¶Î
    BYTE      byRes[20];      //  ±£Áô×Ö½Ú
}NET_DVR_HOLIDAY_RECORD, *LPNET_DVR_HOLIDAY_RECORD;

#define  MAX_LINK_V30  128

typedef struct tagNET_DVR_ONE_LINK
{
    NET_DVR_IPADDR  struIP;     // ¿Í»§¶ËIP
    LONG            lChannel;   // Í¨µÀºÅ
    BYTE            byRes[32];  // ±£Áô×Ö½Ú
}NET_DVR_ONE_LINK, *LPNET_DVR_ONE_LINK;

typedef struct tagNET_DVR_LINK_STATUS
{
    DWORD   dwSize;      // ½á¹¹Ìå´óÐ¡
    WORD    wLinkNum;    // Á¬½ÓµÄÊýÄ¿
    BYTE    byRes1[2];  // ±£Áô×Ö½Ú
    NET_DVR_ONE_LINK struOneLink[MAX_LINK_V30];   // Á¬½ÓµÄ¿Í»§¶ËÐÅÏ¢
    BYTE    byRes[32];  // ±£Áô×Ö½Ú
}NET_DVR_LINK_STATUS, *LPNET_DVR_LINK_STATUS;

#define MAX_BOND_NUM  2

typedef struct tagNET_DVR_ONE_BONDING
{
    BYTE    byMode;                // ¹¤×÷Ä£Ê½0 - ÍøÂçÈÝ´í 1 - ¸ºÔØ¾ùºâ
    BYTE    byUseDhcp;            // ÊÇ·ñÊ¹ÄÜdhcp
    BYTE    byMasterCard;        //  Ö¸¶¨ÄÄÕÅÍø¿¨ÎªÖ÷Íø¿¨        
    BYTE    byStatus;           // BONDINGµÄ×´Ì¬  0 - Òì³£ 1-Õý³£ Ö»ÄÜ»ñÈ¡²»ÄÜÉèÖÃ
    BYTE	byBond[MAX_NETWORK_CARD];// byBond[0]== 1 ±íÊ¾Ê¹ÓÃeh0  0±íÊ¾²»Ê¹ÓÃeh0
    NET_DVR_ETHERNET_V30	struEtherNet;		// Íø¿¨²ÎÊý
    NET_DVR_IPADDR	struGatewayIpAddr;  // Íø¹ØµØÖ·
    BYTE  byEnableDNS; //DNSÊ¹ÄÜ, 0-¹Ø±Õ£¬1-´ò¿ª 
    BYTE	byRes[19];      // ±£Áô×Ö½Ú
}NET_DVR_ONE_BONDING, *LPNET_DVR_ONE_BONDING;

typedef struct tagNET_DVR_NETWORK_BONDING
{
    DWORD   dwSize;         // ½á¹¹Ìå´óÐ¡
    BYTE    byEnable;       // ÊÇ·ñÆôÓÃbonding¹¦ÄÜ
    BYTE    byNum;          // BondingÍø¿¨µÄ¸öÊý
    BYTE    byRes1[2];         //  ±£Áô×Ö½Ú
    NET_DVR_ONE_BONDING struOneBond[MAX_BOND_NUM];
    BYTE    byRes2[40];        // ±£Áô×Ö½Ú
}NET_DVR_NETWORK_BONDING, *LPNET_DVR_NETWORK_BONDING;


// ´ÅÅÌÅä¶î
typedef struct tagNET_DVR_DISK_QUOTA 
{
    BYTE    byQuotaType;     // ´ÅÅÌÅä¶îÀàÐÍ,1 - °´ÈÝÁ¿ 2-°´±ÈÀý£¬3-°´Ê±¼ä
    BYTE    byRes1[5];       // ±£Áô×Ö½Ú
    WORD    wStoragePeriod;  //Â¼Ïñ´æ´¢ÖÜÆÚ£¬µ¥Î»Ìì£¬Åä¶îÀàÐÍÎª°´Ê±¼äÊ±ÓÐÐ§
    DWORD   dwHCapacity;     // ·ÖÅäµÄ´ÅÅÌÈÝÁ¿¸ß32Î» µ¥Î»MB
    DWORD   dwLCapacity;     // ·ÖÅäµÄ´ÅÅÌÈÝÁ¿µÍ32Î» µ¥Î»MB
    DWORD   dwHUsedSpace;    // ÒÑÊ¹ÓÃµÄ´ÅÅÌ´óÐ¡¸ß32Î» µ¥Î»MB
    DWORD   dwLUsedSpace;    // ÒÑÊ¹ÓÃµÄ´ÅÅÌ´óÐ¡µÍ32Î» µ¥Î»MB
    BYTE    byQuotaRatio;    //    ·ÖÅäµÄ´ÅÅÌ±ÈÀý,µ¥Î»:%
    BYTE    byRes2[21];      // ±£Áô×Ö½Ú
}NET_DVR_DISK_QUOTA, *LPNET_DVR_DISK_QUOTA;

typedef struct tagNET_DVR_DISK_QUOTA_CFG
{
    DWORD   dwSize;         // ½á¹¹Ìå´óÐ¡
    NET_DVR_DISK_QUOTA    struPicQuota;       //  Í¼Æ¬Åä¶î
    NET_DVR_DISK_QUOTA    struRecordQuota;    //  Â¼ÏñÅä¶î
    NET_DVR_DISK_QUOTA    struAddInfoQuota;   //  ¸½¼ÓÐÅÏ¢Åä¶î (ÓÃÓÚÔÆ´æ´¢·þÎñÆ÷£¬Ä¿Ç°Ö§³ÖµÄ¸½¼ÓÐÅÏ¢ÓÐ£ºÈÈ¶ÈÍ¼¡¢¿ÍÁ÷Á¿)
    BYTE    byRes[12];      //±£Áô×Ö½Ú
}NET_DVR_DISK_QUOTA_CFG, *LPNET_DVR_DISK_QUOTA_CFG;


typedef struct tagNET_DVR_TIMING_CAPTURE
{
    NET_DVR_JPEGPARA  struJpegPara;   // ¶¨Ê±×¥Í¼Í¼Æ¬ÖÊÁ¿
    DWORD      dwPicInterval;  // ¶¨Ê±×¥Í¼Ê±¼ä¼ä¸ô,µ¥Î»s   1-1s 2-2s 3-3s 4-4s 5-5s 
    //    6-10m 7-30m 8-1h 9-12h 10-24h
    BYTE       byRes[12];      // ±£Áô×Ö½Ú
}NET_DVR_TIMING_CAPTURE, *LPNET_DVR_TIMING_CAPTURE;

typedef struct tagNET_DVR_REL_CAPTURE_CHAN
{
    BYTE    byChan[16];    // °´Î»±íÊ¾
    BYTE    byRes[20];          // ±£Áô×Ö½Ú
}NET_DVR_REL_CAPTURE_CHAN, *LPNET_DVR_REL_CAPTURE_CHAN;

#define MAX_PIC_EVENT_NUM      32
#define MAX_ALARMIN_CAPTURE   16

typedef struct  tagNET_DVR_REL_CAPTURE_CHAN_V40
{
    DWORD   dwMaxRelCaptureChanNum;  //×î´ó¿É´¥·¢µÄ¹ØÁªÍ¨µÀÊý-Ö»¶ÁÊôÐÔ
    DWORD   dwChanNo[MAX_CHANNUM_V40]; //´¥·¢µÄ¹ØÁª×¥Í¼Í¨µÀºÅ£¬°´Öµ±íÊ¾£¬²ÉÓÃ½ô´ÕÐÍÅÅÁÐ,0xffffffff±íÊ¾ºóÐøÎÞÐ§
    BYTE     byRes[32];
}NET_DVR_REL_CAPTURE_CHAN_V40, *LPNET_DVR_REL_CAPTURE_CHAN_V40;

typedef struct tagNET_DVR_EVENT_CAPTURE_V40
{
    NET_DVR_JPEGPARA  struJpegPara;   // ÊÂ¼þ×¥Í¼Í¼Æ¬ÖÊÁ¿
    DWORD   dwPicInterval;   // ÊÂ¼þ×¥Í¼Ê±¼ä¼ä¸ô  µ¥Î»ÎªÃë 
    NET_DVR_REL_CAPTURE_CHAN_V40 struRelCaptureChan[MAX_PIC_EVENT_NUM];   // Êý×éÏÂ±ê 0 ÒÆ¶¯Õì²â´¥·¢×¥Í¼ 1 ÊÓÆµÕÚµ²´¥·¢×¥Í¼ 2 ÊÓÆµ¶ªÊ§´¥·¢×¥Í¼,Êý×é3±íÊ¾PIR±¨¾¯×¥Í¼£¬Êý×é4±íÊ¾ÎÞÏß±¨¾¯×¥Í¼£¬Êý×é5±íÊ¾ºô¾È±¨¾¯×¥Í¼,Êý×é6±íÊ¾ÖÇÄÜ×¥Í¼
    NET_DVR_REL_CAPTURE_CHAN_V40 struAlarmInCapture[MAX_ALARMIN_CAPTURE];    // ±¨¾¯ÊäÈë´¥·¢×¥Í¼£¬ÏÂ±ê0 ´ú±í±¨¾¯ÊäÈë1 ÒÀ´ÎÀàÍÆ
    DWORD   dwMaxGroupNum;  //Éè±¸Ö§³ÖµÄ×î´ó±¨¾¯ÊäÈë×éÊý£¬Ã¿×é16¸ö±¨¾¯ÊäÈë
    BYTE      byCapTimes; //×¥Í¼ÕÅÊý
    BYTE      byRes[59];
}NET_DVR_EVENT_CAPTURE_V40, *LPNET_DVR_EVENT_CAPTURE_V40;


typedef struct tagNET_DVR_EVENT_CAPTURE
{
    NET_DVR_JPEGPARA  struJpegPara;   // ÊÂ¼þ×¥Í¼Í¼Æ¬ÖÊÁ¿
    DWORD       dwPicInterval;  // ÊÂ¼þ×¥Í¼Ê±¼ä¼ä¸ô  µ¥Î»ÎªÃë  1-1s 2-2s 3-3s 4-4s 5-5s 
    //    6-10m 7-30m 8-1h 9-12h 10-24h
    /*
    Êý×éÏÂ±ê 0 ÒÆ¶¯Õì²â´¥·¢×¥Í¼ 1 ÊÓÆµÕÚµ²´¥·¢×¥Í¼£¬2 ÊÓÆµ¶ªÊ§´¥·¢×¥Í¼,Êý×é3±íÊ¾PIR±¨¾¯×¥Í¼£¬
    Êý×é4±íÊ¾ÎÞÏß±¨¾¯×¥Í¼£¬Êý×é5±íÊ¾ºô¾È±¨¾¯×¥Í¼,Êý×é6±íÊ¾ÖÇÄÜ×¥Í¼,Êý×é7 ±íÊ¾ÈËÁ³Õì²â×¥Í¼£¬
    Êý×é8 ±íÊ¾-Ô½½çÕì²âÕì²â×¥Í¼£¬Êý×é9 ±íÊ¾ÇøÓòÈëÇÖÕì²â×¥Í¼,Êý×é10±íÊ¾³¡¾°±ä¸üÕì²â×¥Í¼, 
    Êý×é11-½øÈëÇøÓòÕì²â,Êý×é12-Àë¿ªÇøÓòÕì²â,Êý×é13-ÅÇ»²Õì²â,Êý×é14-ÈËÔ±¾Û¼¯Õì²â,Êý×é15-¿ìËÙÔË¶¯Õì²â,
    Êý×é16-Í£³µÕì²â,Êý×é17-ÎïÆ·ÒÅÁôÕì²â,Êý×é18-ÎïÆ·ÄÃÈ¡Õì²â¡£
    */
    NET_DVR_REL_CAPTURE_CHAN struRelCaptureChan[MAX_PIC_EVENT_NUM]; 
    NET_DVR_REL_CAPTURE_CHAN struAlarmInCapture[MAX_ALARMIN_CAPTURE];    // ±¨¾¯ÊäÈë´¥·¢×¥Í¼£¬ÏÂ±ê0 ´ú±í±¨¾¯ÊäÈë1 ÒÀ´ÎÀàÍÆ
    BYTE       byCapTimes; //×¥Í¼ÕÅÊý
    BYTE       byRes[59];
}NET_DVR_EVENT_CAPTURE, *LPNET_DVR_EVENT_CAPTURE;

typedef struct tagNET_DVR_JPEG_CAPTURE_CFG_V40
{
    DWORD                             dwSize;               //½á¹¹Ìå³¤¶È
    NET_DVR_TIMING_CAPTURE        struTimingCapture;    
    NET_DVR_EVENT_CAPTURE_V40    struEventCapture;
    BYTE       byStreamType;//×¥Í¼ÂëÁ÷ÀàÐÍ 0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷
    BYTE       byRes3[19];     // ±£Áô×Ö½Ú
}NET_DVR_JPEG_CAPTURE_CFG_V40, *LPNET_DVR_JPEG_CAPTURE_CFG_V40;

typedef struct tagNET_DVR_JPEG_CAPTURE_CFG
{
    DWORD      dwSize;         // ½á¹¹Ìå´óÐ¡
    NET_DVR_TIMING_CAPTURE struTimingCapture;    
    NET_DVR_EVENT_CAPTURE struEventCapture;
    BYTE       byStreamType;//×¥Í¼ÂëÁ÷ÀàÐÍ 0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷
    BYTE       byRes3[19];     // ±£Áô×Ö½Ú
}NET_DVR_JPEG_CAPTURE_CFG, *LPNET_DVR_JPEG_CAPTURE_CFG;  

typedef struct tagNET_DVR_CAPTURE_DAY
{
    BYTE    byAllDayCapture;    // ÊÇ·ñÈ«Ìì×¥Í¼
    BYTE    byCaptureType;        // ×¥Í¼ÀàÐÍ£º0-¶¨Ê±×¥Í¼£¬1-ÒÆ¶¯Õì²â×¥Í¼£¬2-±¨¾¯×¥Í¼£¬3-ÒÆ¶¯Õì²â»ò±¨¾¯×¥Í¼£¬4-ÒÆ¶¯Õì²âºÍ±¨¾¯×¥Í¼£¬6-ÖÇÄÜ±¨¾¯×¥Í¼
    BYTE    byRes[2];
}NET_DVR_CAPTURE_DAY, *LPNET_DVR_CAPTURE_DAY;

typedef struct tagNET_DVR_CAPTURE_SCHED
{
    NET_DVR_SCHEDTIME struCaptureTime;        // ×¥Í¼Ê±¼ä¶Î
    BYTE        byCaptureType;       // ×¥Í¼ÀàÐÍ£º0-¶¨Ê±×¥Í¼£¬1-ÒÆ¶¯Õì²â×¥Í¼£¬2-±¨¾¯×¥Í¼£¬3-ÒÆ¶¯Õì²â»ò±¨¾¯×¥Í¼£¬4-ÒÆ¶¯Õì²âºÍ±¨¾¯×¥Í¼£¬6-ÖÇÄÜ±¨¾¯×¥Í¼
    BYTE        byRes[3];           // ±£Áô×Ö½Ú
}NET_DVR_CAPTURE_SCHED, *LPNET_DVR_CAPTURE_SCHED;

// Í¨µÀ×¥Í¼¼Æ»®
typedef struct tagNET_DVR_SCHED_CAPTURECFG
{
    DWORD  dwSize;     // ½á¹¹Ìå
    BYTE    byEnable;    // ÊÇ·ñ×¥Í¼
    BYTE    byRes1[3];    // ±£Áô×Ö½Ú
    NET_DVR_CAPTURE_DAY    struCaptureDay[MAX_DAYS];    // È«Ìì×¥Í¼¼Æ»®
    NET_DVR_CAPTURE_SCHED    struCaptureSched[MAX_DAYS][MAX_TIMESEGMENT_V30];    // Ê±¼ä¶Î×¥Í¼²¼·À¼Æ»®
    NET_DVR_CAPTURE_DAY    struCaptureHoliday;            // ¼ÙÈÕ×¥Í¼¼Æ»®
    NET_DVR_CAPTURE_SCHED    struHolidaySched[MAX_TIMESEGMENT_V30];    // Ê±¼ä¶Î¼ÙÈÕ×¥Í¼²¼·À¼Æ»®
    DWORD    dwRecorderDuration;    // ×¥Í¼±£´æ×î³¤Ê±¼ä 0xffffffff±íÊ¾¸ÃÖµÎÞÐ§ 
    BYTE    byRes[40];            // ±£Áô×Ö½Ú
}NET_DVR_SCHED_CAPTURECFG, *LPNET_DVR_SCHED_CAPTURECFG;


typedef struct tagNET_DVR_FLOW_TEST_PARAM
{
    DWORD  dwSize;              //½á¹¹´óÐ¡
    LONG   lCardIndex;         //Íø¿¨Ë÷Òý
    DWORD  dwInterval;         //Éè±¸ÉÏ´«Á÷Á¿Ê±¼ä¼ä¸ô, µ¥Î»:100ms
    BYTE   byRes[8];           //±£Áô×Ö½Ú
}NET_DVR_FLOW_TEST_PARAM, *LPNET_DVR_FLOW_TEST_PARAM;

typedef struct tagNET_DVR_FLOW_INFO
{
    DWORD  dwSize;             //½á¹¹´óÐ¡
    DWORD  dwSendFlowSize;     //·¢ËÍÁ÷Á¿´óÐ¡,µ¥Î»kbps
    DWORD  dwRecvFlowSize;     //½ÓÊÕÁ÷Á¿´óÐ¡,µ¥Î»kbps
    BYTE   byRes[20];          //±£Áô 
}NET_DVR_FLOW_INFO, *LPNET_DVR_FLOW_INFO;

//  Â¼Ïñ±êÇ©
#define LABEL_NAME_LEN 40
typedef struct tagNET_DVR_RECORD_LABEL
{
    DWORD  dwSize;                    // ½á¹¹Ìå´óÐ¡
    NET_DVR_TIME  struTimeLabel;            // ±êÇ©µÄÊ±¼ä 
    BYTE    byQuickAdd;                // ÊÇ·ñ¿ìËÙÌí¼Ó ¿ìËÙÌí¼ÓÊ±±êÇ©Ãû³ÆÎÞÐ§
    BYTE    byRes1[3];                // ±£Áô×Ö½Ú
    BYTE    sLabelName[LABEL_NAME_LEN];    // ±êÇ©µÄÃû³Æ ³¤¶ÈÎª40×Ö½Ú  
    BYTE    byRes2[40];                // ±£Áô×Ö½Ú
}NET_DVR_RECORD_LABEL, *LPNET_DVR_RECORD_LABEL;

#define  LABEL_IDENTIFY_LEN     64
typedef struct tagNET_DVR_LABEL_IDENTIFY
{
    BYTE    sLabelIdentify[LABEL_IDENTIFY_LEN];    // 64×Ö½Ú±êÊ¶
    BYTE    byRes[8];               // ±£Áô×Ö½Ú
}NET_DVR_LABEL_IDENTIFY, *LPNET_DVR_LABEL_IDENTIFY;

#define MAX_DEL_LABEL_IDENTIFY  20// É¾³ýµÄ×î´ó±êÇ©±êÊ¶¸öÊý

typedef struct tagNET_DVR_DEL_LABEL_PARAM
{
    DWORD   dwSize;       // ½á¹¹Ìå´óÐ¡
    BYTE    byMode;   // °´Î»±íÊ¾,0x01±íÊ¾°´±êÊ¶É¾³ý
    BYTE    byRes1;
    WORD    wLabelNum;      // ±êÇ©ÊýÄ¿      
    NET_DVR_LABEL_IDENTIFY struIndentify[MAX_DEL_LABEL_IDENTIFY]; // ±êÇ©±êÊ¶
    BYTE    byRes2[160];   //±£Áô×Ö½Ú    
}NET_DVR_DEL_LABEL_PARAM, *LPNET_DVR_DEL_LABEL_PARAM;

typedef struct tagNET_DVR_MOD_LABEL_PARAM
{
    NET_DVR_LABEL_IDENTIFY struIndentify; //ÒªÐÞ¸ÄµÄ±êÇ©±êÊ¶
    BYTE byRes1[24];
    BYTE sLabelName[LABEL_NAME_LEN];    //ÐÞ¸ÄºóµÄ±êÇ©Ãû³Æ
    BYTE byRes2[40];                
}NET_DVR_MOD_LABEL_PARAM, *LPNET_DVR_MOD_LABEL_PARAM;

// ±êÇ©ËÑË÷½á¹¹Ìå
typedef struct tagNET_DVR_FIND_LABEL
{
    DWORD       dwSize;          // ½á¹¹Ìå´óÐ¡
    LONG        lChannel;        // ²éÕÒµÄÍ¨µÀ
    NET_DVR_TIME    struStartTime;    // ¿ªÊ¼Ê±¼ä
    NET_DVR_TIME    struStopTime;    // ½áÊøÊ±¼ä
    BYTE        sLabelName[LABEL_NAME_LEN];    //  Â¼Ïñ±êÇ©Ãû³Æ Èç¹û±êÇ©Ãû³ÆÎª¿Õ£¬ÔòËÑË÷ÆðÖ¹Ê±¼äËùÓÐ±êÇ©
    BYTE        byDrawFrame;        //0:²»³éÖ¡£¬1£º³éÖ¡
    BYTE        byRes[39];        // ±£Áô×Ö½Ú
}NET_DVR_FIND_LABEL, *LPNET_DVR_FIND_LABEL;

// ±êÇ©ÐÅÏ¢½á¹¹Ìå
typedef struct tagNET_DVR_FINDLABEL_DATA
{
    BYTE    sLabelName[LABEL_NAME_LEN];    // ±êÇ©Ãû³Æ
    NET_DVR_TIME struTimeLabel;        // ±êÇ©Ê±¼ä
    NET_DVR_LABEL_IDENTIFY struLabelIdentify; // ±êÇ©±êÊ¶
    BYTE    byRes1[32];            // ±£Áô×Ö½Ú
}NET_DVR_FINDLABEL_DATA, *LPNET_DVR_FINDLABEL_DATA;

#define CARDNUM_LEN_V30 40
//¹ú¼ÒÃ¶¾Ù
typedef enum _COUNTRY_INDEX_
{
    COUNTRY_NONSUPPORT = 0,   //0-Ëã·¨¿â²»Ö§³ÖÅÆÊ¶¹ú¼Ò
        COUNTRY_CZE = 1, //Czech Republic ½Ý¿Ë¹²ºÍ¹ú
        COUNTRY_FRA = 2, //France ·¨¹ú
        COUNTRY_DEU = 3, //Germany µÂ¹ú
        COUNTRY_ESP = 4, //Spain  Î÷°àÑÀ
        COUNTRY_ITA = 5, //Italy  Òâ´óÀû
        COUNTRY_NLD = 6, //Netherlands ºÉÀ¼
        COUNTRY_POL = 7, //Poland  ²¨À¼
        COUNTRY_SVK = 8, //Slovakia  Ë¹Âå·¥¿Ë
        COUNTRY_BLR = 9, // Belorussia  °×¶íÂÞË¹
        COUNTRY_MDA = 10, //Moldova  Ä¦¶û¶àÍß
        COUNTRY_RUS = 11, //Russia  ¶íÂÞË¹
        COUNTRY_UKR = 12, //Ukraine  ÎÚ¿ËÀ¼
        COUNTRY_BEL = 13, //Belgium  ±ÈÀûÊ±
        COUNTRY_BGR = 14, //Bulgaria  ±£¼ÓÀûÑÇ
        COUNTRY_DNK = 15, //Denmark  µ¤Âó
        COUNTRY_FIN = 16, //Finland  ·ÒÀ¼
        COUNTRY_GBR = 17, //Great Britain  Ó¢¹ú
        COUNTRY_GRC = 18, //Greece  Ï£À°
        COUNTRY_HRV = 19, //Croatia  ¿ËÂÞµØÑÇ
        COUNTRY_HUN = 20, //Hungary  ÐÙÑÀÀû
        COUNTRY_ISR = 21, //Israel  ÒÔÉ«ÁÐ
        COUNTRY_LUX = 22, //Luxembourg  Â¬É­±¤
        COUNTRY_MKD = 23, //Macedonia  ÂíÆä¶Ù¹²ºÍ¹ú
        COUNTRY_NOR = 24, //Norway  Å²Íþ
        COUNTRY_PRT = 25, //Portugal  ÆÏÌÑÑÀ
        COUNTRY_ROU = 26, //Romania  ¶àÂíÄáÑÇ
        COUNTRY_SRB = 27, //Serbia  Èû¶ûÎ¬ÑÇ
        COUNTRY_AZE = 28, //Azerbaijan °¢Èû°î½®¹²ºÍ¹ú
        COUNTRY_GEO = 29, //Georgia  ¼´¸ñÂ³¼ªÑÇ
        COUNTRY_KAZ = 30, //Kazakhstan ¹þÈø¿ËË¹Ì¹
        COUNTRY_LTU = 31, //Lithuania  Á¢ÌÕÍð¹²ºÍ¹ú
        COUNTRY_TKM = 32, //Turkmenistan ÍÁ¿âÂüË¹Ì¹
        COUNTRY_UZB = 33, //Uzbekistan   ÎÚ×È±ð¿ËË¹Ì¹
        COUNTRY_LVA = 34, //Latvia       À­ÍÑÎ¬ÑÇ
        COUNTRY_EST = 35, //Estonia °®É³ÄáÑÇ
        COUNTRY_ALB = 36, //Albania °¢¶û°ÍÄáÑÇ
        COUNTRY_AUT = 37, //Austria °ÂµØÀû
        COUNTRY_BIH = 38, //Bosnia and Herzegovina ²¨Ë¹ÄáÑÇºÍºÚÈû¸çÎ¬ÄÇ
        COUNTRY_IRL = 39, //Ireland °®¶ûÀ¼
        COUNTRY_ISL = 40, //Iceland ±ùµº
        COUNTRY_VAT = 41, //Vatican èóµÙ¸Ô
        COUNTRY_MLT = 42, //Malta Âí¶úËû
        COUNTRY_SWE = 43, //Sweden Èðµä
        COUNTRY_CHE = 44, //Switzerland ÈðÊ¿
        COUNTRY_CYP = 45, //Cyprus ÈûÆÖÂ·Ë¹
        COUNTRY_TUR = 46, //Turkey ÍÁ¶úÆä
        COUNTRY_SVN = 47, //Slovenia Ë¹ÂåÎÄÄáÑÇ
        COUNTRY_UNRECOGNIZED = 0xfe, //Unrecognized ÎÞ·¨Ê¶±ð
        COUNTRY_ALL = 0xff, //ALL  È«²¿
}COUNTRY_INDEX;

typedef struct tagNET_DVR_FIND_PICTURE_PARAM
{
    DWORD  dwSize;         // ½á¹¹Ìå´óÐ¡ 
    LONG   lChannel;       // Í¨µÀºÅ
    /* ²éÕÒµÄÍ¼Æ¬ÀàÐÍ:0¶¨Ê±×¥Í¼1 ÒÆ¶¯Õì²â×¥Í¼ 2 ±¨¾¯×¥Í¼£¬
    3 ±¨¾¯ | ÒÆ¶¯Õì²â×¥Í¼ 4 ±¨¾¯ & ÒÆ¶¯Õì²â×¥Í¼ 6 ÊÖ¶¯×¥Í¼ ,
    9-ÖÇÄÜÍ¼Æ¬,10- PIR±¨¾¯£¬11- ÎÞÏß±¨¾¯£¬12- ºô¾È±¨¾¯, 
    0xa Ô¤ÀÀÊ±½ØÍ¼£¬0xd ÈËÁ³Õì²â, 0xe Ô½½çÕì²â£¬0xf ÈëÇÖÇøÓòÕì²â£¬
    0x10 ³¡¾°±ä¸üÕì²â, 0x11-Éè±¸±¾µØ»Ø·ÅÊ±½ØÍ¼, 0x12-ÖÇÄÜÕì²â,
    0x13-½øÈëÇøÓòÕì²â,0x14-Àë¿ªÇøÓòÕì²â,0x15-ÅÇ»²Õì²â,
    0x16-ÈËÔ±¾Û¼¯Õì²â,0x17-¿ìËÙÔË¶¯Õì²â,0x18-Í£³µÕì²â,
    0x19-ÎïÆ·ÒÅÁôÕì²â,0x1a-ÎïÆ·ÄÃÈ¡Õì²â, 0x1b-³µÅÆÕì²â,
    0x1c-»ìÐÐ¼ì²â,0x1d-È¡Ö¤ÊÂ¼þ,0x1e-»ðµã¼ì²â,0x1f-·ÀÆÆ»µ¼ì²â,
    0x20-´¬Ö»¼ì²â£¬0x21-²âÎÂÔ¤¾¯£¬0x22-²âÎÂ±¨¾¯, 0x23²â²î±¨¾¯, 0x24Î¥Í£¼ì²â,0xff- È«²¿ÀàÐÍ*/ 
    BYTE   byFileType;        
    BYTE   byNeedCard;     // ÊÇ·ñÐèÒª¿¨ºÅ
                           /*
                           0-±£Áô£¬1-°Ä£¬2-¾©£¬3-Óå£¬4-Ãö£¬5-¸Ê£¬6-ÔÁ£¬7-¹ð£¬
                           8-¹ó£¬9-Çí£¬10-¼½£¬11-Ô¥£¬12-ºÚ£¬13-¶õ£¬14-Ïæ£¬
                           15-¼ª£¬16-ËÕ£¬17-¸Ó£¬18-ÁÉ£¬19-ÃÉ£¬20-Äþ£¬21-Çà£¬
                           22-Â³£¬23-½ú£¬24-ÉÂ£¬25-»¦£¬26-´¨£¬27-Ì¨£¬28-½ò£¬
                           29-²Ø£¬30-¸Û£¬31-ÐÂ£¬32-ÔÆ£¬33-Õã£¬34-Íî£¬0xff-È«²¿
    */
    BYTE   byProvince;     //Ê¡·ÝË÷ÒýÖµ
    BYTE   byRes;  //²éÕÒ½á¹ûÖÐÊÇ·ñÒªÇó·µ»ØÈËÁ³×ø±êÐÅÏ¢£¬0-²»·µ»Ø£¬1-·µ»Ø
    BYTE   sCardNum[CARDNUM_LEN_V30];     // ¿¨ºÅ
    NET_DVR_TIME  struStartTime;//²éÕÒÍ¼Æ¬µÄ¿ªÊ¼Ê±¼ä
    NET_DVR_TIME  struStopTime;// ²éÕÒÍ¼Æ¬µÄ½áÊøÊ±¼ä
    //ITC3.7 ÐÂÔö
    DWORD    dwTrafficType; //Í¼Æ¬¼ìË÷ÉúÐ§Ïî ²Î¿¼ VCA_OPERATE _TYPE 
    DWORD    dwVehicleType; //³µÁ¾ÀàÐÍ ²Î¿¼ VCA_VEHICLE_TYPE
    //Î¥¹æ¼ì²âÀàÐÍ²Î¿¼ VCA_ILLEGAL_TYPE µ±Ç°²»Ö§³Ö¸´Ñ¡
    DWORD    dwIllegalType;
    BYTE     byLaneNo;  //³µµÀºÅ(1~99)
    BYTE     bySubHvtType ;//0-±£Áô,1-»ú¶¯³µ(»ú¶¯³µ×ÓÀàÐÍÖÐÖ§³Ö³µÅÆ¼ìË÷£¬Ê¡·Ý¼ìË÷),2-·Ç»ú¶¯³µ,3-ÐÐÈË
    BYTE     byRes2[2];
    char     sLicense[MAX_LICENSE_LEN/*16*/];    //³µÅÆºÅÂë
    BYTE     byRegion;     // ÇøÓòË÷ÒýÖµ 0-±£Áô£¬1-Å·ÖÞ(Europe Region)£¬2-¶íÓïÇøÓò(Russian Region)£¬3-Å·ÖÞ&¶íÂÞË¹(EU&CIS) ,0xff-ËùÓÐ
    BYTE     byCountry;     // ¹ú¼ÒË÷ÒýÖµ£¬²ÎÕÕ£ºCOUNTRY_INDEX 
    BYTE     byRes3[6];     // ±£Áô×Ö½Ú
}NET_DVR_FIND_PICTURE_PARAM, *LPNET_DVR_FIND_PICTURE_PARAM;

#define PICTURE_NAME_LEN 64

typedef struct
{
    char    sFileName[PICTURE_NAME_LEN];//Í¼Æ¬Ãû
    NET_DVR_TIME struTime;//Í¼Æ¬µÄÊ±¼ä
    DWORD dwFileSize;//Í¼Æ¬µÄ´óÐ¡
    char    sCardNum[CARDNUM_LEN_V30];    //¿¨ºÅ
    BYTE   byPlateColor ;//²Î¿¼½á¹¹ VCA_PLATE_COLOR
    BYTE   byVehicleLogo;//²Î¿¼½á¹¹ VLR_VEHICLE_CLASS
    BYTE   byEventSearchStatus; //Á¬ÐøÍ¼Æ¬±íÊ¾Í¬Ò»²éÕÒ½á¹ûµÄÊ±ºò£¬0-±íÊ¾ºóÃæÃ»ÓÐÍ¼Æ¬ÐÅÏ¢£¬1-±íÊ¾ºóÃæ»¹ÓÐÍ¼Æ¬ÐÅÏ¢¡£×Ü¹²Í¼Æ¬ÐÅÏ¢°üÀ¨×îºóÒ»ÕÅ×´Ì¬Îª0µÄÍ¼Æ¬¡£
    BYTE   byRecogResult ;//Ê¶±ð½á¹û²Î¿¼½á¹¹VTR_RESULT
    char   sLicense[MAX_LICENSE_LEN/*16*/];    //³µÅÆºÅÂë
    BYTE   byRes[12];
}NET_DVR_FIND_PICTURE,*LPNET_DVR_FIND_PICTURE;

#define MAX_RECORD_PICTURE_NUM  50      //  ×î´ó±¸·ÝÍ¼Æ¬ÕÅÊý  

typedef struct tagNET_DVR_BACKUP_PICTURE_PARAM
{
    DWORD  dwSize;         // ½á¹¹Ìå´óÐ¡   
    DWORD  dwPicNum;
    NET_DVR_FIND_PICTURE struPicture[MAX_RECORD_PICTURE_NUM];
    BYTE   byDiskDes[DESC_LEN_32];
    BYTE   byWithPlayer;
    BYTE   byContinue;    /*ÊÇ·ñ¼ÌÐø±¸·Ý 0²»¼ÌÐø 1¼ÌÐø*/
    BYTE   byRes[34];
}NET_DVR_BACKUP_PICTURE_PARAM, *LPNET_DVR_BACKUP_PICTURE_PARAM;

typedef struct 
{    
    DWORD dwSize;           //½á¹¹Ìå´óÐ¡
    DWORD dwChannel;        //Í¨µÀºÅ
    BYTE  byCompressType;   //´ý»ñÈ¡µÄÑ¹Ëõ²ÎÊýÀàÐÍ1,Ö÷ÂëÁ÷2,×ÓÂëÁ÷3,ÊÂ¼þ
    BYTE  byRes[15];        //±£Áô
    NET_DVR_COMPRESSIONCFG_V30  struCurrentCfg; //µ±Ç°Ñ¹Ëõ²ÎÊýÅäÖÃ
}NET_DVR_COMPRESSION_LIMIT, *LPNET_DVR_COMPRESSION_LIMIT;

#define   STEP_READY       0    //×¼±¸Éý¼¶
#define   STEP_RECV_DATA   1    //½ÓÊÕÉý¼¶°üÊý¾Ý
#define   STEP_UPGRADE     2    //Éý¼¶ÏµÍ³
#define   STEP_BACKUP      3    //±¸·ÝÏµÍ³
#define   STEP_SEARCH      255  //ËÑË÷Éý¼¶ÎÄ¼þ

typedef struct tagNET_DVR_VIDEO_EFFECT
{
    DWORD dwBrightValue;      //ÁÁ¶È[0,255]
    DWORD dwContrastValue;    //¶Ô±È¶È[0,255]
    DWORD dwSaturationValue;  //±¥ºÍ¶È[0,255]
    DWORD dwHueValue;         //É«µ÷[0,255]
    DWORD dwSharpness;          //Èñ¶È[0,255]
    DWORD dwDenoising;          //È¥Ôë[0,255]
    BYTE  byRes[12];
}NET_DVR_VIDEO_EFFECT, *LPNET_DVR_VIDEO_EFFECT;

typedef struct tagNET_DVR_VIDEO_INPUT_EFFECT
{    
    DWORD                    dwSize;                //½á¹¹Ìå´óÐ¡
    WORD                    wEffectMode;        //Ä£Ê½ 0-±ê×¼ 1-ÊÒÄÚ 2-Èõ¹â 3-ÊÒÍâ  255-×Ô¶¨Òå
    BYTE                    byRes1[146];        //±£Áô
    NET_DVR_VIDEO_EFFECT    struVideoEffect;    //ÊÓÆµÐ§¹û²ÎÊý
    BYTE                    byRes2[60];            //±£Áô
}NET_DVR_VIDEO_INPUT_EFFECT, *LPNET_DVR_VIDEO_INPUT_EFFECT;


typedef struct tagNET_DVR_VIDEOPARA_V40
{
    DWORD    dwChannel;            // Í¨µÀºÅ
    DWORD    dwVideoParamType;      // ÊÓÆµ²ÎÊýÀàÐÍ 0-ÁÁ¶È 1-¶Ô±È¶È 2-±¥ºÍ¶È 3-É«¶È 4-Èñ¶È 5-È¥Ôë
    DWORD    dwVideoParamValue;  //¶ÔÓ¦µÄÊÓÆµ²ÎÊýÖµ£¬·¶Î§ÒÀ¾ÝÄÜÁ¦¼¯
    BYTE     byRes[12];
}NET_DVR_VIDEOPARA_V40, *LPNET_DVR_VIDEOPARA_V40;

typedef struct tagNET_DVR_DEFAULT_VIDEO_COND
{
    DWORD    dwSize;            // ½á¹¹Ìå´óÐ¡
    DWORD    dwChannel;        // Í¨µÀºÅ
    DWORD    dwVideoMode;    // Ä£Ê½
    BYTE    byRes[32];      // ±£Áô
}NET_DVR_DEFAULT_VIDEO_COND, *LPNET_DVR_DEFAULT_VIDEO_COND;

typedef struct tagNET_DVR_ENCODE_JOINT_PARAM
{
    DWORD    dwSize;            // ½á¹¹Ìå´óÐ¡
    BYTE    byJointed;        //  0 Ã»ÓÐ¹ØÁª 1 ÒÑ¾­¹ØÁª
    BYTE    byDevType;        // ±»¹ØÁªµÄÉè±¸ÀàÐÍ  1 ´ú±íÖÇÄÜÉè±¸
    BYTE    byRes1[2];        // ±£Áô×Ö½Ú
    NET_DVR_IPADDR    struIP;            // ¹ØÁªµÄ±»È¡Á÷Éè±¸IPµØÖ·
    WORD    wPort;            // ¹ØÁªµÄ±»È¡Á÷Éè±¸¶Ë¿ÚºÅ
    WORD    wChannel;        // ¹ØÁªµÄ±»È¡Á÷Éè±¸Í¨µÀºÅ
    BYTE    byRes2[20];            // ±£Áô×Ö½Ú
}NET_DVR_ENCODE_JOINT_PARAM, *LPNET_DVR_ENCODE_JOINT_PARAM;    

typedef struct tagNET_DVR_VCA_CHAN_WORKSTATUS
{
    BYTE    byJointed;                // 0-Ã»ÓÐ¹ØÁª  1-ÒÑ¾­¹ØÁª
    BYTE    byRes1[3];
    NET_DVR_IPADDR    struIP;                    // ¹ØÁªµÄÈ¡Á÷Éè±¸IPµØÖ·
    WORD    wPort;                    // ¹ØÁªµÄÈ¡Á÷Éè±¸¶Ë¿ÚºÅ
    WORD    wChannel;                // ¹ØÁªµÄÈ¡Á÷Éè±¸Í¨µÀºÅ
    BYTE    byVcaChanStatus;        // 0 - Î´ÆôÓÃ 1 - ÆôÓÃ
    BYTE    byRes2[19];                // ±£Áô×Ö½Ú
}NET_DVR_VCA_CHAN_WORKSTATUS, *LPNET_DVR_VCA_CHAN_WORKSTATUS;

typedef struct tagNET_DVR_VCA_DEV_WORKSTATUS
{
    DWORD    dwSize;            // ½á¹¹Ìå´óÐ¡
    BYTE    byDeviceStatus;    // Éè±¸µÄ×´Ì¬0 - Õý³£¹¤×÷ 1- ²»Õý³£¹¤×÷
    BYTE    byCpuLoad;        // CPUÊ¹ÓÃÂÊ0-100 ·Ö±ð´ú±íÊ¹ÓÃ°Ù·ÖÂÊ
    NET_DVR_VCA_CHAN_WORKSTATUS struVcaChanStatus[MAX_VCA_CHAN];
    DWORD    dwRes[40];        // ±£Áô×Ö½Ú
}NET_DVR_VCA_DEV_WORKSTATUS, *LPNET_DVR_VCA_DEV_WORKSTATUS;

typedef struct tagNET_DVR_VGA_DISP_CHAN_CFG_V40
{        
    DWORD    dwSize; 
    BYTE   byAudio;            /*ÒôÆµÊÇ·ñ¿ªÆô*/
    BYTE   byAudioWindowIdx;      /*ÒôÆµ¿ªÆô×Ó´°¿Ú*/
    BYTE     byVgaResolution;      /*·Ö±æÂÊ£¬´ÓÄÜÁ¦¼¯»ñÈ¡*/
    BYTE    byVedioFormat;         /*1:NTSC,2:PAL£¬0-NULL*/
    DWORD    dwWindowMode;        /*»­ÃæÄ£Ê½£¬ÄÜÁ¦¼¯»ñÈ¡*/       
    BYTE      byJoinDecChan[MAX_WINDOWS];/*¸÷¸ö×Ó´°¿Ú¹ØÁªµÄ½âÂëÍ¨µÀ*/
    BYTE    byEnlargeStatus;          /*ÊÇ·ñ´¦ÓÚ·Å´ó×´Ì¬£¬0£º²»·Å´ó£¬1£º·Å´ó*/
    BYTE    byEnlargeSubWindowIndex;//·Å´óµÄ×Ó´°¿ÚºÅ
    BYTE    byScale; /*ÏÔÊ¾Ä£Ê½£¬0---ÕæÊµÏÔÊ¾£¬1---Ëõ·ÅÏÔÊ¾( Õë¶ÔBNC )*/
    /*Çø·Ö¹²ÓÃÌå£¬0-ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿½âÂëÆ÷ÏÔÊ¾Í¨µÀÅäÖÃ£¬1-ÆäËû½âÂëÆ÷ÏÔÊ¾Í¨µÀÅäÖÃ*/
    BYTE    byUnionType;
    union
    {
        BYTE byRes[160];
        struct
        {
            /*¸÷¸ö×Ó´°¿Ú¶ÔÓ¦½âÂëÍ¨µÀËù¶ÔÓ¦µÄ½âÂë×ÓÏµÍ³µÄ²ÛÎ»ºÅ(¶ÔÓÚÊÓÆµ×ÛºÏÆ½Ì¨ÖÐ½âÂë×ÓÏµÍ³ÓÐÐ§)*/
            BYTE    byJoinDecoderId[MAX_WINDOWS];
            //ÏÔÊ¾´°¿ÚËù½âÊÓÆµ·Ö±æÂÊ£¬1-D1,2-720P,3-1080P£¬Éè±¸¶ËÐèÒª¸ù¾Ý´Ë//·Ö±æÂÊ½øÐÐ½âÂëÍ¨µÀµÄ·ÖÅä£¬Èç1·ÖÆÁÅäÖÃ³É1080P£¬ÔòÉè±¸»á°Ñ4¸ö½âÂëÍ¨
            //µÀ¶¼·ÖÅä¸ø´Ë½âÂëÍ¨µÀ
            BYTE    byDecResolution;
            BYTE    byRes[143];
        }struVideoPlatform;
        struct
        {
            BYTE    byRes[160];
        }struNotVideoPlatform;
    }struDiff;
    BYTE    byRes[120];
}NET_DVR_VGA_DISP_CHAN_CFG_V40,*LPNET_DVR_VGA_DISP_CHAN_CFG_V40;

typedef struct tagNET_DVR_V6SUBSYSTEMPARAM
{
    BYTE        bySerialTrans;//ÊÇ·ñÍ¸´«£¬0-·ñ£¬1-ÊÇ
    BYTE        byRes[35];
}NET_DVR_V6SUBSYSTEMPARAM, *LPNET_DVR_V6SUBSYSTEMPARAM;




typedef struct tagNET_DVR_CORRECT_DEADPIXEL_PARAM
{
    DWORD dwSize;
    DWORD dwCommand; //ÃüÁî£º0-½øÈë»µµãÄ£Ê½£¬1-Ìí¼Ó»µµã£¬2-±£´æ»µµã£¬3-ÍË³ö»µµã
    DWORD dwDeadPixelX; //»µµãX×ø±ê
    DWORD dwDeadPixelY; //»µµãY×ø±ê
    BYTE byRes[12]; //±£Áô
}NET_DVR_CORRECT_DEADPIXEL_PARAM, *LPNET_DVR_CORRECT_DEADPIXEL_PARAM;

#define MAX_REDAREA_NUM   6   //×î´óºìÂÌµÆÇøÓò¸öÊý

typedef struct tagNET_DVR_CORRECT_PARAMS
{
    BYTE byYellowIntervalTime;//»ÆµÆµÄ¼ä¸ôÊ±¼ä£¬µ¥Î»ÊÇÃë£¨s£©
    BYTE byDigTrafficLight;//ÊÇ·ñÊÇ½»Í¨Êý×Ö»ÆµÆ£¬0-²»ÊÇ£¬1-ÊÇ
    BYTE byRes[2];
}NET_DVR_CORRECT_PARAMS,*LPNET_DVR_CORRECT_PARAMS;

typedef struct tagNET_DVR_REDAREACFG
{
    DWORD dwSize;
    DWORD dwCorrectEnable; //ÊÇ·ñ¿ªÆôÐ£Õý¹¦ÄÜ£¬0-¹Ø±Õ£¬1-¿ªÆô
    DWORD dwCorrectLevel; //Ð£Õý¼¶±ð£¬1(Ð£Õý¶È×îµÍ)-10(Ð£Õý¶È×î¸ß),Ä¬ÈÏÎª5
    DWORD dwAreaNum; //Ð£ÕýÇøÓò¸öÊý
    NET_VCA_RECT struLaneRect[MAX_REDAREA_NUM]; //Ð£ÕýÇøÓò
    NET_DVR_CORRECT_PARAMS struCorrectParam[MAX_REDAREA_NUM/*6*/]; //Ð£ÕýÇøÓòÊôÐÔºÍÐ£ÕýÇøÓò¶ÔÓ¦
    BYTE   byRes2[8]; //±£Áô
}NET_DVR_REDAREACFG, *LPNET_DVR_REDAREACFG;

typedef struct tagNET_DVR_HISTORICDATACFG
{
    DWORD dwSize;
    DWORD dwTotalNum;  //ÀúÊ·Êý¾Ý¸öÊý
    BYTE byRes[16];
}NET_DVR_HISTORICDATACFG, *LPNET_DVR_HISTORICDATACFG;


#define INQUEST_MESSAGE_LEN     44    //ÉóÑ¶ÖØµã±ê¼ÇÐÅÏ¢³¤¶È
#define INQUEST_MAX_ROOM_NUM    2     //×î´óÉóÑ¶ÊÒ¸öÊý
#define MAX_RESUME_SEGMENT      2     //Ö§³ÖÍ¬Ê±»Ö¸´µÄÆ¬¶ÎÊýÄ¿

typedef struct tagNET_DVR_INQUEST_ROOM
{
    BYTE        byRoomIndex;     //ÉóÑ¶ÊÒ±àºÅ
    BYTE        byFileType;        //0-ÉóÑ¶ÎÄ¼þ£¬1-¿ªÍ¥ÉÏ´«ÎÄ¼þ
    BYTE        byRes[22];       //±£Áô
}NET_DVR_INQUEST_ROOM, *LPNET_DVR_INQUEST_ROOM;

typedef struct tagNET_DVR_INQUEST_MESSAGE
{
    char         sMessage[INQUEST_MESSAGE_LEN]; //ÖØµã±ê¼ÇÐÅÏ¢
    BYTE    byRes[46];                     //±£Áô
}NET_DVR_INQUEST_MESSAGE, *LPNET_DVR_INQUEST_MESSAGE;

typedef struct tagNET_DVR_INQUEST_SENSOR_DEVICE
{
    WORD    wDeviceType;    //Êý¾Ý²É¼¯Éè±¸ÐÍºÅ:0-ÎÞ 1-Ã×ÀÖ 2-ÀØ²Ê 3-ÓÅÁ¦ 4-¼ÑÃË 5-ÓÀ¿Ø¡¢6-ÛâÉÏ¡¢7-Î¬ÄÉË¹´ï
    WORD    wDeviceAddr;    //Êý¾Ý²É¼¯Éè±¸µØÖ·    
    BYTE     byRes[28];        //±£Áô
}NET_DVR_INQUEST_SENSOR_DEVICE, *LPNET_DVR_INQUEST_SENSOR_DEVICE;

typedef struct tagNET_DVR_INQUEST_SENSOR_INFO
{
    NET_DVR_INQUEST_SENSOR_DEVICE struSensorDevice[INQUEST_MAX_ROOM_NUM];
    DWORD   dwSupportPro;      //Ö§³ÖÐ­ÒéÀàÐÍ,°´Î»±íÊ¾, ÐÂ°æ±¾×ßÄÜÁ¦¼¯£¬²»ÔÙÀ©Õ¹´Ë×Ö¶Î
    //0x1:Ã×ÀÖ 0x2:ÀØ²Ê 0x4:ÓÅÁ¦
    BYTE    byRes[120];        //±£Áô
}NET_DVR_INQUEST_SENSOR_INFO, *LPNET_DVR_INQUEST_SENSOR_INFO;

typedef struct tagNET_DVR_INQUEST_ROOM_INFO
{
    char        szCDName[NAME_LEN];    //¹âÅÌÃû³Æ£¬µ¥ÊÒË«¿Ì¹âÅÌÃû³ÆÊÇÒ»ÑùµÄ
    union
    {
        BYTE     byBitRate;    // byCalcTypeÎª0Ê±ÓÐÐ§£¬(0-32¡¢1-48¡¢2-64¡¢3-80¡¢4-96¡¢5-128¡¢
                                //6-160¡¢7-192¡¢8-224¡¢9-256¡¢10-320¡¢11-384¡¢12-448¡¢
                                //13-512¡¢14-640¡¢15-768¡¢16-896Ç°16¸öÖµ±£Áô)17-1024¡¢18-1280¡¢19-1536¡¢
                                //20-1792¡¢21-2048¡¢22-3072¡¢23-4096¡¢24-8192
        BYTE    byInquestTime;  // byCalcTypeÎª1Ê±ÓÐÐ§£¬0-1Ð¡Ê±, 1-2Ð¡Ê±,2-3Ð¡Ê±,3-4Ð¡Ê±, 4-6Ð¡Ê±,5-8Ð¡Ê±,6-10Ð¡Ê±,7-12Ð¡Ê±
        //8-16Ð¡Ê±, 9-20Ð¡Ê±,10-22Ð¡Ê±,11-24Ð¡Ê±
    }uCalcMode;
    BYTE        byCalcType;            //¿ÌÂ¼¼ÆËãÀàÐÍ0-°´ÂëÂÊ 1-°´Ê±¼ä
    BYTE        byAutoDelRecord;    // ÊÇ·ñ×Ô¶¯É¾³ýÂ¼Ïñ£¬0-²»É¾³ý£¬¼´½áÊøÊ±±£´æÂ¼Ïñ 1-É¾³ý
    BYTE        byAlarmThreshold;        // ÉùÒô±¨¾¯·§Öµ
    BYTE        byInquestChannelResolution;     //ÉóÑ¶Í¨µÀ·Ö±æÂÊ£¬0:720P,1:1080P,2:CIF,3:4CIF,4:WD1,5-VGA
    BYTE        byRes[11];
}NET_DVR_INQUEST_ROOM_INFO, *LPNET_DVR_INQUEST_ROOM_INFO;

typedef struct tagNET_DVR_INQUEST_SYSTEM_INFO
{
    DWORD    dwRecordMode;         //¿ÌÂ¼Ä£Ê½:1 µ¥ÊÒË«¿ÌÄ£Ê½ 2 µ¥ÊÒÂÖ¿ÌÄ£Ê½ 3 Ë«ÊÒË«¿ÌÄ£Ê½£¨ÐÞ¸ÄÐèÒªÖØÆôÉè±¸£©
    DWORD    dwWorkMode;           //¹¤×÷Ä£Ê½:0 ±ê×¼Ä£Ê½ 1 Í¨ÓÃÄ£Ê½(±£Áô£¬Ä¿Ç°Ö»ÓÐ±ê×¼Ä£Ê½)
    DWORD    dwResolutionMode;     //Éè±¸·Ö±æÂÊ£¬0:±êÇå 1:D1 2:720P 3:1080P£¨¸ßÇåÉóÑ¶»ú²»ÓÃ´Ë×Ö¶Î£©
    NET_DVR_INQUEST_SENSOR_INFO struSensorInfo;  //ÎÂÊª¶È´«¸ÐÆ÷ÅäÖÃ    
    NET_DVR_INQUEST_ROOM_INFO     struInquestRoomInfo[INQUEST_MAX_ROOM_NUM];
    BYTE    byEnableHashCheck;        //ÊÇ·ñÆôÓÃ¶Ô¹âÅÌÊý¾ÝHASHÖµÐ£Ñé 0-ÎÞÒâÒå£¬1-²»ÆôÓÃ£¬2-ÆôÓÃ
    BYTE    byEnableInitCD;        //ÊÇ·ñÆôÓÃ³õÊ¼»¯¹âÅÌ 0-ÎÞÒâÒå£¬1-²»ÆôÓÃ£¬2-ÆôÓÃ
    BYTE    byRes[22];    
}NET_DVR_INQUEST_SYSTEM_INFO, *LPNET_DVR_INQUEST_SYSTEM_INFO;

typedef struct tagNET_DVR_INQUEST_RESUME_SEGMENT
{
    NET_DVR_TIME  struStartTime; //ÊÂ¼þÆðÊ¼Ê±¼ä
    NET_DVR_TIME  struStopTime;  //ÊÂ¼þÖÕÖ¹Ê±¼ä
    BYTE    byRoomIndex;         //ÉóÑ¶ÊÒ±àºÅ,´Ó1¿ªÊ¼
    BYTE    byDriveIndex;        //¿ÌÂ¼»ú±àºÅ,´Ó1¿ªÊ¼
    WORD    wSegmetSize;         //±¾Æ¬¶ÏµÄ´óÐ¡, µ¥Î»M 
    DWORD   dwSegmentNo;         //±¾Æ¬¶ÏÔÚ±¾´ÎÉóÑ¶ÖÐµÄÐòºÅ,´Ó1¿ªÊ¼ 
    BYTE    byRes[24];           //±£Áô
}NET_DVR_INQUEST_RESUME_SEGMENT, *LPNET_DVR_INQUEST_RESUME_SEGMENT;

typedef struct tagNET_DVR_INQUEST_RESUME_EVENT
{
    DWORD   dwResumeNum;       //Ðè»Ö¸´µÄÊÂ¼þ¸öÊý
    NET_DVR_INQUEST_RESUME_SEGMENT struResumeSegment[MAX_RESUME_SEGMENT];
    BYTE    byResumeMode;        //»Ö¸´Ä£Ê½£¬0-µ¥¹âÅÌ»Ö¸´£¬1-Ë«¹âÅÌ»Ö¸´
    BYTE    byRes[199];        //±£Áô
}NET_DVR_INQUEST_RESUME_EVENT, *LPNET_DVR_INQUEST_RESUME_EVENT;

typedef struct tagNET_DVR_INQUEST_DEVICE_VERSION
{
BYTE  byMainVersion;         /*»ùÏßÖ÷°æ±¾.
                             0 : Î´Öª
                             1 : 8000ÉóÑ¶DVR
                             ´Î°æ±¾: 1 : 8000HD-S
                             2 : 8100ÉóÑ¶DVR 
                             ´Î°æ±¾: 1 : ÉóÑ¶81SNL
                             2 : ÉóÑ¶81SH
                             3 : ÉóÑ¶81SFH
                             3 : 8608¸ßÇåÉóÑ¶»úNVR 
                             ´Î°æ±¾: 1 : DS-8608SN-SP
                             2 : DS-8608SN-ST
*/
BYTE  bySubVersion;          //»ùÏß´Î°æ±¾
BYTE  byUpgradeVersion;      //Éý¼¶°æ±¾,Î´Éý¼¶Îª0
BYTE  byCustomizeVersion;     //¶¨ÖÆ°æ±¾,·Ç¶¨ÖÆÎª0
BYTE  byRes[60];             //±£Áô
}NET_DVR_INQUEST_DEVICE_VERSION, *LPNET_DVR_INQUEST_DEVICE_VERSION;

typedef struct tagNET_DVR_DISK_RAID_INFO 
{
    DWORD dwSize;   //½á¹¹Ìå´óÐ¡
    BYTE byEnable;  //´ÅÅÌRaidÊÇ·ñ½ûÓÃ
    BYTE bySleepStatus;    //0-ÎÞÐ§£¬ 1-ÐÝÃß£¬2-²»ÐÝÃß
    BYTE byRes[34];  //±£Áô×Ö½Ú
}NET_DVR_DISK_RAID_INFO, *LPNET_DVR_DISK_RAID_INFO;


typedef struct tagNET_DVR_SYNCHRONOUS_IPC
{
    DWORD dwSize;    //½á¹¹Ìå´óÐ¡
    BYTE  byEnable;  //ÊÇ·ñÆôÓÃ£ºÎªÇ°¶ËIPCÍ¬²½Éè±¸²ÎÊý
    BYTE  byRes[7];  //±£Áô
}NET_DVR_SYNCHRONOUS_IPC, *LPNET_DVR_SYNCHRONOUS_IPC;

typedef struct tagNET_DVR_IPC_PASSWD
{
    DWORD dwSize;    //½á¹¹Ìå´óÐ¡
    char sOldPasswd[PASSWD_LEN];  //IPCµÄ¾ÉÃÜÂë£¬´«¸øDVRÈÃDVRÑéÖ¤
    char sNewPasswd[PASSWD_LEN];  //IPCµÄÐÂÃÜÂë
    BYTE byRes[32];
}NET_DVR_IPC_PASSWD, *LPNET_DVR_IPC_PASSWD;

//Í¨¹ý»ñÈ¡DVRµÄÍøÂç×´Ì¬£ºµ¥Î»bps
typedef struct tagNET_DEVICE_NET_USING_INFO 
{
    DWORD dwSize;    //½á¹¹Ìå´óÐ¡
    DWORD dwPreview;   //Ô¤ÀÀ
    DWORD dwPlayback;  //»Ø·Å
    DWORD dwIPCModule; //IPC½ÓÈë
    DWORD dwNetDiskRW; //ÍøÅÌ¶ÁÐ´
    BYTE res[32];
}NET_DVR_DEVICE_NET_USING_INFO, *LPNET_DVR_DEVICE_NET_USING_INFO;

//Í¨¹ýDVRÉèÖÃÇ°¶ËIPCµÄIPµØÖ·
typedef struct tagNET_DVR_IPC_NETCFG
{
    DWORD dwSize;      //½á¹¹Ìå´óÐ¡
    NET_DVR_IPADDR struIP;       //IPCµÄIPµØÖ·
    WORD wPort;       //IPCµÄ¶Ë¿Ú
    char res[126];  
}NET_DVR_IPC_NETCFG, *LPNET_DVR_IPC_NETCFG;

//°´Ê±¼äËø¶¨
typedef struct tagNET_DVR_TIME_LOCK
{
    DWORD dwSize;      //½á¹¹Ìå´óÐ¡
    NET_DVR_TIME strBeginTime;
    NET_DVR_TIME strEndTime;
    DWORD   dwChannel;        //Í¨µÀºÅ, 0xff±íÊ¾ËùÓÐÍ¨µÀ
    DWORD   dwRecordType;     //Â¼ÏñÀàÐÍ:  0xffffffff£­È«²¿£¬0£­¶¨Ê±Â¼Ïñ£¬1-ÒÆ¶¯Õì²â£¬2£­±¨¾¯´¥·¢£¬3-±¨¾¯´¥·¢»òÒÆ¶¯Õì²â£¬4-±¨¾¯´¥·¢ºÍÒÆ¶¯Õì²â£¬5-ÃüÁî´¥·¢£¬6-ÊÖ¶¯Â¼Ïñ£¬7-ÖÇÄÜÂ¼Ïñ(Í¬ÎÄ¼þ²éÕÒ)
    DWORD   dwLockDuration;   //Ëø¶¨³ÖÐøÊ±¼ä,µ¥Î»Ãë,0xffffffff±íÊ¾ÓÀ¾ÃËø¶¨
    NET_DVR_TIME_EX strUnlockTimePoint;    //¼ÓËøÊ±ÓÐÐ§£¬µ±dwLockDuration²»ÎªÓÀ¾ÃËø¶¨Ê±£¬Ëø¶¨³ÖÐøµÄÊ±¼äµ½´ËÊ±¼äµã¾Í×Ô¶¯½âËø
    BYTE    byRes[4];
}NET_DVR_TIME_LOCK, *LPNET_DVR_TIME_LOCK;

typedef struct tagNET_DVR_LOCK_RETURN
{
    DWORD dwSize;      //½á¹¹Ìå´óÐ¡
    NET_DVR_TIME strBeginTime; 
    NET_DVR_TIME strEndTime;
    BYTE    byRes[20];
}NET_DVR_LOCK_RETURN, *LPNET_DVR_LOCK_RETURN;

//67DVS
//Ö¤ÊéÏÂÔØÀàÐÍ
typedef enum 
{
    UPGRADE_CERT_FILE = 0, 
    UPLOAD_CERT_FILE = 1,
    TRIAL_CERT_FILE = 2,
    CONFIGURATION_FILE = 3,
    UPLOAD_RECORD_FILE = 4 , //ÉÏ´«Â¼ÏñÎÄ¼þ
    SCENE_CONFIGURATION_FILE = 5, //³¡¾°ÅäÖÃÎÄ¼þÉÏ´«
    UPLOAD_PICTURE_FILE = 6,  //ÉÏ´«Í¼Æ¬ÎÄ¼þ
    UPLOAD_VIOLATION_FILE = 7,  //ÉÏ´«Î¥·¨×ÖµäÎÄ¼þ
    UPLOAD_TG_FILE = 8,  //ÉÏ´«TG£¨Timing Generator£©ÎÄ¼þ£¨ÓÃÓÚT1²âÊÔ£©
    UPLOAD_DATA_TO_DB = 9,        //ÉÏ´«ÎÄ¼þµ½ÊÓÍ¼¿â
    UPLOAD_BACKGROUND_PIC = 10, //ÉÏ´«±³¾°Í¼Æ¬
    UPLOAD_CALIBRATION_FILE = 11, //ÉÏ´«±ê¶¨ÎÄ¼þ
    UPLOAD_TME_FILE = 12, //ÉÏ´«³öÈë¿Ú¹ÜÀíÎÄ¼þ
    
    //UPLOAD_TME_FILE = 12, //ÉÏ´«³öÈë¿Ú¹ÜÀíÎÄ¼þ
    UPLOAD_VEHICLE_BLACKWHITELST_FILE = 13,
    UPLOAD_PICTURE_TO_CLOUD = 15,    //ÉÏ´«Í¼Æ¬µ½ÔÆ´æ´¢
    UPLOAD_VIDEO_FILE = 16,  //ÉÏ´«ÊÓÆµÎÄ¼þ
    UPLOAD_SCREEN_FILE = 17,    //ÉÏ´«ÆÁÄ»·þÎñÆ÷ÎÄ¼þ
    UPLOAD_PUBLISH_MATERIAL = 18,    //ÉÏ´«ÐÅÏ¢·¢²¼¾²Ì¬ËØ²ÄÎÄ¼þ
    UPLOAD_PUBLISH_UPGRADE_FILE = 19,    //ÉÏ´«ÐÅÏ¢·¢Éý¼¶ÎÄ¼þ
    UPLOAD_RING_FILE = 20,   //ÉÏ´«ÁåÒôÎÄ¼þ
    UPLOAD_ENCRYPT_CERT = 21,    //ÉÏ´«¼ÓÃÜÖ¤Êé
    UPLOAD_THERMOMETRIC_FILE = 22, //ÉÏ´«²âÎÂ±ê¶¨ÎÄ¼þ
    UPLOAD_SUBBRAND_FILE = 23, //ÉÏ´«³µÁ¾×ÓÆ·ÅÆÎÄ¼þ
    UPLOAD_LED_CHECK_FILE = 24,    //ÉÏ´«LEDÐ£ÕýÎÄ¼þ
    BATCH_UPLOAD_PICTURE_FILE = 25,  //ÅúÁ¿ÉÏ´«Í¼Æ¬ÎÄ¼þ
    UPLOAD_EDID_CFG_FILE = 26, //ÉÏ´«EDIDÅäÖÃÎÄ¼þ
    UPLOAD_PANORAMIC_STITCH = 27//ÉÏ´«È«¾°×Ô¶¯Æ´½ÓÅäÖÃÎÄ¼þ
}NET_SDK_UPLOAD_TYPE;  

typedef enum 
{
    NET_SDK_DOWNLOAD_CERT = 0,        //ÏÂÔØÖ¤Êé
    NET_SDK_DOWNLOAD_IPC_CFG_FILE = 1,//ÏÂÔØIPCÅäÖÃÎÄ¼þ
    NET_SDK_DOWNLOAD_BASELINE_SCENE_PIC = 2, //ÏÂÔØ»ù×¼³¡¾°Í¼Æ¬
    NET_SDK_DOWNLOAD_VQD_ALARM_PIC = 3,       //ÏÂÔØVQD±¨¾¯Í¼Æ¬
    NET_SDK_DOWNLOAD_CONFIGURATION_FILE=4,   //ÏÂÔØÅäÖÃÎÄ¼þ
    NET_SDK_DOWNLOAD_SCENE_CONFIGURATION_FILE = 5, //ÏÂÔØ³¡¾°ÅäÖÃÎÄ¼þ
    NET_SDK_DOWNLOAD_FILE_FORM_DB = 6,                //´ÓÊÓÍ¼¿âÖÐÏÂÔØ
   // NET_SDK_DOWNLOAD_TME_FILE = 7  //ÏÂÔØ³öÈë¿Ú¹ÜÀíÎÄ¼þ

    NET_SDK_DOWNLOAD_TME_FILE = 7,  //ÏÂÔØ³öÈë¿Ú¹ÜÀíÎÄ¼þ
    NET_SDK_DOWNLOAD_VEHICLE_BLACKWHITELST_FILE = 8, //ÏÂÔØºÚ°×Ãûµ¥ÅäÖÃÎÄ¼þ
    NET_SDK_DOWNLOAD_FILE_FORM_CLOUD = 10,    //´ÓÔÆ´æ´¢ÏÂÔØÍ¼Æ¬
    NET_SDK_DOWNLOAD_PICTURE = 11, //ÏÂÔØÍ¼Æ¬
    NET_SDK_DOWNLOAD_VIDEO = 12, //ÏÂÔØÊÓÆµ
    NET_DVR_DOWNLOAD_SCREEN_FILE = 13, //ÏÂÔØÆÁÄ»·þÎñÆ÷ÎÄ¼þ
    NET_SDK_DOWNLOAD_PUBLISH_MATERIAL = 14,    //ÏÂÔØÐÅÏ¢·¢²¼¾²Ì¬ËØ²ÄÎÄ¼þ
    NET_SDK_DOWNLOAD_THERMOMETRIC_FILE = 15,//ÏÂÔØ²âÎÂ±ê¶¨ÎÄ¼þ
    NET_SDK_DOWNLOAD_LED_CHECK_FILE = 16,//ÏÂÔØLEDÐ£ÕýÎÄ¼þ
}NET_SDK_DOWNLOAD_TYPE;

//ÏÂÔØ×´Ì¬
typedef enum 
{
    NET_SDK_DOWNLOAD_STATUS_SUCCESS = 1,    //ÏÂÔØ³É¹¦
        NET_SDK_DOWNLOAD_STATUS_PROCESSING,        //ÕýÔÚÏÂÔØ
        NET_SDK_DOWNLOAD_STATUS_FAILED,            //ÏÂÔØÊ§°Ü
        NET_SDK_DOWNLOAD_STATUS_UNKOWN_ERROR    //Î´Öª´íÎó 
}NET_SDK_DOWNLOAD_STATUS;

//ÏÂÔØ¿ØÖÆÃüÁîÀàÐÍ
typedef enum tagNET_SDK_DOWNLOAD_CONTROL_TYPE_ENUM
{
    ENUM_DOWNLOAD_CONTROL_ERR = -1,
    ENUM_DOWNLOAD_CONTROL_QOS = 1        //Á÷¿Ø
}NET_SDK_DOWNLOAD_CONTROL_TYPE_ENUM;

typedef struct tagNET_DVR_BONJOUR_CFG
{
    DWORD    dwSize;                // ½á¹¹Ìå´óÐ¡
    BYTE    byEnableBonjour;        // BonjourÊ¹ÄÜ 0 £º¿ªÆô 1£º¹Ø±Õ
    BYTE     byRes1[3];                
    BYTE     byFriendlyName[MAX_DOMAIN_NAME];     // ·þÎñÃû
    BYTE     byRes2[128];
}NET_DVR_BONJOUR_CFG, *LPNET_DVR_BONJOUR_CFG;

typedef struct tagNET_DVR_SOCKS_CFG
{
    DWORD            dwSize;                // ½á¹¹Ìå´óÐ¡
    BYTE            byEnableSocks;          // Ê¹ÄÜ 0£º¹Ø±Õ 1£º¿ªÆô
    BYTE             byVersion;              // SOCKS°æ±¾ 4£ºSOCKS4   5£ºSOCKS5
    WORD            wProxyPort;                // ´úÀí¶Ë¿Ú£¬Ä¬ÈÏ1080
    BYTE            byProxyaddr[MAX_DOMAIN_NAME];      // ´úÀíIPµØÖ·£¬¿ÉÒÔÊÇÓòÃû
    BYTE             byUserName[MAX_DOMAIN_NAME];     // ÓÃ»§Ãû SOCKS²ÅÓÃ
    BYTE             byPassword[NAME_LEN];            // ÃÜÂëSOCKS5²ÅÓÃ
    BYTE             byLocalAddr[MAX_LOCAL_ADDR_LEN];  //²»Ê¹ÓÃsocks´úÀíµÄÍø¶Î£¬¸ñÊ½Îª"ip/netmask;ip/netmask;¡­"
    BYTE             byRes[128];
}NET_DVR_SOCKS_CFG, *LPNET_DVR_SOCKS_CFG;



typedef struct tagNET_DVR_QOS_CFG
{
    DWORD        dwSize;
    BYTE        byManageDscp;   // ¹ÜÀíÊý¾ÝµÄDSCPÖµ [0-63]
    BYTE        byAlarmDscp;    // ±¨¾¯Êý¾ÝµÄDSCPÖµ [0-63]
    BYTE        byVideoDscp;    // ÊÓÆµÊý¾ÝµÄDSCPÖµ [0-63]£¬byFlagÎª0Ê±£¬±íÊ¾ÒôÊÓÆµ
    BYTE        byAudioDscp;    // ÒôÆµÊý¾ÝµÄDSCPÖµ [0-63]£¬byFlagÎª1Ê±ÓÐÐ§
    BYTE        byFlag;            // 0£ºÒôÊÓÆµºÏÒ»£¬1£ºÒôÊÓÆµ·Ö¿ª
    BYTE        byEnable;
    BYTE         byRes[126];
}NET_DVR_QOS_CFG, *LPNET_DVR_QOS_CFG;

typedef struct tagNET_DVR_HTTPS_CFG
{
    DWORD        dwSize;
    WORD        wHttpsPort;        // HTTPS¶Ë¿Ú
    BYTE        byEnable;        // Ê¹ÄÜ 0£º¹Ø±Õ 1£º¿ªÆô
    BYTE        byRes[125];
}NET_DVR_HTTPS_CFG, *LPNET_DVR_HTTPS_CFG;

//Ö¤ÊéÏà¹Ø
typedef struct tagNET_DVR_CERT_NAME
{
    BYTE    byCountry[MAX_COUNTRY_NAME_LEN];              //¹ú¼Ò´úºÅ CNµÈ
    BYTE     byState[MAX_DOMAIN_NAME];                //ÖÞ»òÊ¡
    BYTE     byLocality[MAX_DOMAIN_NAME];            //µØÇø
    BYTE     byOrganization[MAX_DOMAIN_NAME];        //×éÖ¯
    BYTE     byUnit[MAX_DOMAIN_NAME];                //µ¥Î»
    BYTE     byCommonName[MAX_DOMAIN_NAME];
    BYTE     byEmail[MAX_DOMAIN_NAME];  
    BYTE     byRes[128];
}NET_DVR_CERT_NAME, *LPNET_DVR_CERT_NAME ;

typedef struct tagNET_DVR_CERT_PARAM
{
    DWORD dwSize;
    WORD wCertFunc; //Ö¤ÊéÖÖÀà£¬0-802.1x,1-HTTPS
    WORD wCertType; //Ö¤ÊéÀàÐÍ£¬0-CA£¬1-Certificate,2-Ë½Ô¿ÎÄ¼þ
    BYTE byFileType; //Ö¤ÊéÎÄ¼þÀàÐÍ£¬0-PEM,1-PFX
    BYTE byRes[35]; 
}NET_DVR_CERT_PARAM, *LPNET_DVR_CERT_PARAM;

#define UPLOAD_CERTIFICATE  1 //ÉÏ´«Ö¤Êé


typedef struct tagNET_DVR_CERT_INFO
{
    DWORD                 dwSize;
    NET_DVR_CERT_PARAM     struCertParam;    //Ö¤Êé²ÎÊý
    DWORD                dwValidDays;   //ÓÐÐ§ÌìÊý£¬ÀàÐÍÎª×ÔÇ©ÃûÊ±ÓÐÐ§
    BYTE                 byPasswd[NAME_LEN];   //Ë½Ô¿ÃÜÂë
    NET_DVR_CERT_NAME     struCertName;    // Ö¤ÊéÃû³Æ
    NET_DVR_CERT_NAME     struIssuerName;    // Ö¤Êé·¢ÐÐÕßÃû³Æ£¨×ÔÇ©ÃûÖ¤ÊéÐÅÏ¢»ñÈ¡Ê±ÓÐÐ§£©
    NET_DVR_TIME_EX         struBeginTime;   //Ö¤Êé´´½¨Ê±¼ä£¨×ÔÇ©ÃûÖ¤ÊéÐÅÏ¢»ñÈ¡Ê±ÓÐÐ§£©
    NET_DVR_TIME_EX         struEndTime;   //Ö¤Êé½ØÖ¹Ê±¼ä£¨×ÔÇ©ÃûÖ¤ÊéÐÅÏ¢»ñÈ¡Ê±ÓÐÐ§£©
    BYTE                 serialNumber[NAME_LEN];   //Ö¤Êé±êÊ¶Âë£¨×ÔÇ©ÃûÖ¤ÊéÐÅÏ¢»ñÈ¡Ê±ÓÐÐ§£©
    BYTE                 byVersion; 
    BYTE                 byKeyAlgorithm;            //¼ÓÃÜÀàÐÍ 0-RSA  1-DSA
    BYTE                  byKeyLen;                //¼ÓÃÜ³¤¶È 0-512  1-1024¡¢ 2-2048
    BYTE                 bySignatureAlgorithm; //Ç©ÃûËã·¨ÀàÐÍ£¨×ÔÇ©ÃûÖ¤ÊéÐÅÏ¢»ñÈ¡Ê±ÓÐÐ§£©
    BYTE                 byRes[128];
}NET_DVR_CERT_INFO, *LPNET_DVR_CERT_INFO;


//channel record status
//***Í¨µÀÂ¼Ïñ×´Ì¬*****//
typedef struct tagNET_DVR_CHANS_RECORD_STATUS
{
    BYTE    byValid;       //ÊÇ·ñÓÐÐ§
                           /*(Ö»¶Á)Â¼ÏñÀàÐÍ:0: ²»ÔÚÂ¼Ïñ£»1£ºÔÚÂ¼Ïñ 2-¿ÕÏÐ 
                           3-ÎÞÁ¬½Ó 4-ÎÞÊäÈëÊÓÆµ 5-Î´¼ÓÔØ 6-´æµµÖÐ 7-»Ø´«ÖÐ 
    8-ÓÃ»§Ãû»òÃÜÂë´í 9-Î´ÑéÖ¤,10-´æµµÖÐºÍÂ¼ÏñÖÐ 11-Â¼Ïñ»Ø´«ÖÐºÍÂ¼ÏñÖÐ*/
    BYTE    byRecord;     
    WORD    wChannelNO;   //Í¨µÀºÅ
    DWORD   dwRelatedHD;  //¹ØÁª´ÅÅÌ
    BYTE    byOffLineRecord;  //¶ÏÍøÂ¼Ïñ¹¦ÄÜ 0-¹Ø±Õ 1-¿ªÆô
    BYTE    byRes[7];      //±£Áô×Ö½Ú
}NET_DVR_CHANS_RECORD_STATUS, *LPNET_DVR_CHANS_RECORD_STATUS;


typedef struct tagNET_DVR_IP_ALARM_GROUP_NUM
{
    DWORD dwSize; 
    DWORD dwIPAlarmInGroup;      //IPÍ¨µÀ±¨¾¯ÊäÈë×éÊý
    DWORD dwIPAlarmInNum;       //IPÍ¨µÀ±¨¾¯ÊäÈë¸öÊý
    DWORD dwIPAlarmOutGroup;     //IPÍ¨µÀ±¨¾¯Êä³ö×éÊý
    DWORD dwIPAlarmOutNum;      //IPÍ¨µÀ±¨¾¯Êä³ö¸öÊý
    BYTE byRes[64];  
}NET_DVR_IP_ALARM_GROUP_NUM, *LPNET_DVR_IP_ALARM_GROUP_NUM;
//****NVR end***//

typedef struct tagNET_DVR_CHAN_GROUP_RECORD_STATUS
{
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    NET_DVR_CHANS_RECORD_STATUS struChanStatus[MAX_CHANNUM_V30]; //Ò»×é64¸ö
}NET_DVR_CHAN_GROUP_RECORD_STATUS, *LPNET_DVR_CHAN_GROUP_RECORD_STATUS;


typedef struct tagNET_DVR_RECTCFG
{
    WORD wXCoordinate; /*¾ØÐÎ×óÉÏ½ÇÆðÊ¼µãX×ø±ê*/
    WORD wYCoordinate; /*¾ØÐÎ×óÉÏ½ÇY×ø±ê*/
    WORD wWidth;       /*¾ØÐÎ¿í¶È*/
    WORD wHeight;      /*¾ØÐÎ¸ß¶È*/
}NET_DVR_RECTCFG, *LPNET_DVR_RECTCFG;
/*´°¿ÚÐÅÏ¢*/
typedef struct tagNET_DVR_WINCFG
{
    DWORD dwSize;
    BYTE  byVaild;
    BYTE  byInputIdx;          /*ÊäÈëÔ´Ë÷Òý*/
    BYTE  byLayerIdx;          /*Í¼²ã£¬0Îª×îµ×²ã*/
    BYTE  byTransparency; //Í¸Ã÷¶È£¬0¡«100 
    NET_DVR_RECTCFG  struWin;//Ä¿µÄ´°¿Ú(Ïà¶ÔÏÔÊ¾Ç½)
    WORD wScreenHeight;//´óÆÁ¸ß
    WORD wScreenWidth;//´óÆÁ¿í
    BYTE  byRes[20];
}NET_DVR_WINCFG, *LPNET_DVR_WINCFG;

#define  MAX_LAYERNUMS    32

typedef struct tagNET_DVR_ALLWINCFG
{
    DWORD dwSize;
    NET_DVR_WINCFG struWinCfg[MAX_LAYERNUMS];
    BYTE  byRes2[24];
}NET_DVR_ALLWINCFG, *LPNET_DVR_ALLWINCFG;

typedef struct tagNET_DVR_SCREENZOOM
{
    DWORD dwSize;
    DWORD dwScreenNum;//´óÆÁºÅ
    NET_DVR_POINT_FRAME struPointFrame;
    BYTE  byLayer;//Í¼²ãºÅ
    BYTE  byRes[11];
}NET_DVR_SCREENZOOM, *LPNET_DVR_SCREENZOOM;

//2011-04-18
/*ÉãÏñ»úÐÅÏ¢,×î¶à9999¸ö£¬´Ó1¿ªÊ¼ */
typedef struct tagNET_MATRIX_CAMERAINFO
{  
    DWORD dwGlobalCamId;      /* camµÄÈ«¾Ö±àºÅ*/
    BYTE  sCamName[NAME_LEN]; /*camµÄÃû³Æ*/
    DWORD dwMatrixId;          /*cam¶ÔÓ¦¾ØÕóµÄ±àºÅ*/
    DWORD dwLocCamId;         /*cam¶ÔÓ¦¾ØÕóµÄÄÚ²¿±àºÅ*/ 
    BYTE  byValid;    /*ÊÇ·ñÓÐÐ§£¬0-·ñ£¬1-ÊÇ*/
    BYTE  byPtzCtrl; /* ÊÇ·ñ¿É¿Ø£¬0-·ñ£¬1-ÊÇ*/
    BYTE  byUseType; //*Ê¹ÓÃÀàÐÍ£¬0-²»×÷Îª¸ÉÏßÊ¹ÓÃ£¬1-BNC£¬2-SP3,3-V6¹âÏË£¬4-ÆäËû¹âÏË*/ 
    BYTE  byUsedByTrunk;//µ±Ç°Ê¹ÓÃ×´Ì¬£¬0-Ã»ÓÐ±»Ê¹ÓÃ£¬1-±»¸ÉÏßÊ¹ÓÃ 
    BYTE  byTrunkReq; /*ÉãÏñ»ú·Ö±æÂÊ,ÒÔD1Îªµ¥Î»£º1 - 1¸öD1£¬2- 2¸öD1£¬×÷Îª¸ÉÏßÊ¹ÓÃÊ±£¬Ö¸µÄÊÇ¸ÉÏßµÄ´ø¿í*/
    BYTE  byRes1[3];
    NET_DVR_TIME struInstallTime;//°²×°Ê±¼ä
    BYTE  sPurpose[NAME_LEN];/*ÓÃÍ¾ÃèÊö*/
    BYTE  byRes2[20];  
}NET_MATRIX_CAMERAINFO, *LPNET_MATRIX_CAMERAINFO;

/*¼àÊÓÆ÷ÐÅÏ¢£¬×î¶à2048¸ö*/
typedef struct tagNET_MATRIX_MONITORINFO 
{
    DWORD    dwGloalMonId; /*mon µÄÍ³Ò»±àºÅ*/
    BYTE    sMonName[NAME_LEN];
    DWORD    dwMatrixId;  /*monËùÔÚ¾ØÕóµÄ±àºÅ*/
    DWORD    dwLocalMonId; /*monµÄÄÚ²¿±àºÅ*/
    BYTE    byValid;    /*ÊÇ·ñÓÐÐ§£¬0-·ñ£¬1-ÊÇ*/
    BYTE    byTrunkType; /*Ê¹ÓÃÀàÐÍ£¬0-²»×÷Îª¸ÉÏßÊ¹ÓÃ£¬1-BNC£¬2-SP3,3-V6¹âÏË£¬4-ÆäËû¹âÏË*/ 
    BYTE    byUsedByTrunk;//µ±Ç°Ê¹ÓÃ×´Ì¬£¬0-Ã»ÓÐ±»Ê¹ÓÃ£¬1-±»¸ÉÏßÊ¹ÓÃ 
    BYTE    byTrunkReq; /*·Ö±æÂÊ, ÒÔD1Îªµ¥Î»£º1- 1¸öD1£¬2- 2¸öD1£¬×÷Îª¸ÉÏßÊ¹ÓÃÊ±£¬Ö¸µÄÊÇ¸ÉÏßµÄ´ø¿í*/
    NET_DVR_TIME struInstallTime;//°²×°Ê±¼ä
    BYTE    sPurpose[NAME_LEN];/*ÓÃÍ¾ÃèÊö*/
    BYTE    byRes[20];  
}NET_MATRIX_MONITORINFO, *LPNET_MATRIX_MONITORINFO;

typedef struct tagNET_MATRIX_DIGITALMATRIX
{
    NET_DVR_IPADDR  struAddress; /*Éè±¸ÎªÊý×ÖÉè±¸Ê±µÄIPÐÅÏ¢*/
    WORD    wPort;
    BYTE    byNicNum; /*0 - eth0, 1 - eth1, ¿¼ÂÇË«Íø¿ÚÈçºÎÍ¨ÐÅ¼ÓÈë°ó¶¨µÄÍø¿Ú*/
    BYTE    byRes[69];   
}NET_MATRIX_DIGITALMATRIX, *LPNET_MATRIX_DIGITALMATRIX;
typedef struct tagNET_MATRIX_ANALOGMATRIX
{
    BYTE    bySerPortNum;   /*Á¬½ÓµÄ´®¿ÚºÅ  0xff-»·Í¨½ÓÈë*/
    BYTE    byMatrixSerPortType;/* ¾ØÕó½ÓÈëÍø¹ØµÄ´®¿ÚÓëÄ£Äâ¾ØÕóµÄ¼üÅÌ¿Ú(¼üÅÌÐ­Òé)Á¬½Ó»¹ÊÇÓë¾ØÕóÍ¨ÐÅ¿Ú£¨¾ØÕóÐ­Òé£©Á¬½Ó £¬0 --- ¾ØÕóÐ­ÒéÍ¨Ñ¶¿Ú 1 --- ¼üÅÌÍ¨Ñ¶¿Ú*/
    BYTE    byRes1[2];
    NET_DVR_SINGLE_RS232 struRS232;    //232´®¿Ú²ÎÊý  »·Í¨½ÓÈëÊ±´Ë²ÎÊýÎÞÐ§
    BYTE    byRes2[200];      
}NET_MATRIX_ANALOGMATRIX, *LPNET_MATRIX_ANALOGMATRIX;

typedef union tagNET_MATRIX_UNION
{
    NET_MATRIX_DIGITALMATRIX struDigitalMatrix;
    NET_MATRIX_ANALOGMATRIX struAnalogMatrix;
}NET_MATRIX_UNION, *LPNET_MATRIX_UNION;
/*¾ØÕóÅäÖÃÐÅÏ¢£¬×î¶à20¸ö*/
typedef struct tagNET_MATRIX_MATRIXINFO 
{
    DWORD   dwSize;
    DWORD    dwMatrixId;  /*¾ØÕó±àºÅ*/
    BYTE    sDevName[NAME_LEN];
    BYTE    byCtrlType; /*Ö¸Í¨Ñ¶·½Ê½ÊÇ´®¿ÚÍ¨ÐÅ, »¹ÊÇÍøÂçÍ¨ÐÅ*/
    BYTE    byProtocolType;/*ÉèÖÃÍ¨ÐÅ¿ØÖÆÐ­Òé*/
    BYTE    byRes1[6];   /*Ô¤Áô*/
    NET_MATRIX_UNION struMatrixUnion;
    DWORD    dwMaxPortsIn; /*¾ØÕóÊäÈëÊý*/
    DWORD    dwMaxPortsOut;/*¾ØÕóÊä³öÊý*/
    BYTE    sUserName[NAME_LEN];   /*µÇÂ¼ÓÃ»§Ãû*/
    BYTE    sPassword[PASSWD_LEN];  /*µÇÂ¼ÃÜÂë*/        
    NET_DVR_TIME struInstallTime;//°²×°Ê±¼ä
    BYTE    sPurpose[NAME_LEN];/*ÓÃÍ¾ÃèÊö*/
    BYTE    byRes2[20];   /*Ô¤Áô*/
}NET_MATRIX_MATRIXINFO, *LPNET_MATRIX_MATRIXINFO;


typedef struct tagNET_DVR_MATRIXLIST
{
    DWORD    dwSize;
    BYTE    byRes[12];
    DWORD    dwMatrixNum;//Éè±¸·µ»ØµÄ¾ØÕóÊýÁ¿
    BYTE    *pBuffer;//¾ØÕóÐÅÏ¢»º³åÇø
    DWORD   dwBufLen;//Ëù·ÖÅäÖ¸Õë³¤¶È£¬ÊäÈë²ÎÊý
}NET_DVR_MATRIXLIST,*LPNET_DVR_MATRIXLIST;

/*´®¿ÚÅäÖÃÐÅÏ¢*/
typedef struct tagNET_MATRIX_UARTPARAM
{    
    DWORD dwSize;
    BYTE  byPortName[NAME_LEN];
    WORD  wUserId; /*ÓÃ»§±àºÅ£¬µ±Á¬½ÓÉè±¸Îª¼üÅÌÊ±£¬°ó¶¨Ò»¸öÓÃ»§£¬ÓÃÓÚÈ¨ÏÞ¹ÜÀí*/
    BYTE  byPortType;    /*´®¿ÚÀàÐÍ£¬ÈýÖÖ0-RS232/1-RS485/2-RS422*/
    BYTE  byFuncType; /*´®¿ÚÁ¬½ÓµÄÉè±¸µÄÀàÐÍ0-¿ÕÏÐ£¬1-¼üÅÌ£¬2-ÓÃ×÷Í¸Ã÷Í¨µÀ(485´®¿Ú²»¿ÉÅäÖÃ³ÉÍ¸Ã÷Í¨µÀ),3-Ä£Äâ¾ØÕó*/     
    BYTE  byProtocolType;  /*´®¿ÚÖ§³ÖµÄÐ­ÒéÀàÐÍ, µ±Á¬½Ó¼üÅÌÉè±¸Ê±ÐèÒª¸ÃÐÅÏ¢,»ñÈ¡¼üÅÌÖ§³ÖÐ­ÒéµÄ±àºÅ¼°ÃèÊö·û*/
    BYTE  byBaudRate;
    BYTE  byDataBits;
    BYTE  byStopBits;   /*Í£Ö¹Î»*/
    BYTE  byParity;      /*Ð£Ñé*/
    BYTE  byFlowCtrl;   /*Á÷¿Ø£¬Èí¼þÁ÷¿Ø£¬ÎÞÁ÷¿Ø*/
    BYTE  byRes[22];     /*Ô¤Áô*/
}NET_MATRIX_UARTPARAM, *LPNET_MATRIX_UARTPARAM;

//×î¶à256¸öÓÃ»§£¬1¡«256
typedef struct tagNET_MATRIX_USERPARAM 
{
    DWORD dwSize;
    BYTE    sUserName[NAME_LEN];
    BYTE    sPassword[PASSWD_LEN/*16*/];
    BYTE    byRole;/*ÓÃ»§½ÇÉ«:0-¹ÜÀíÔ±,1-²Ù×÷Ô±£»Ö»ÓÐÒ»¸öÏµÍ³¹ÜÀíÔ±£¬255¸ö²Ù×÷Ô±*/
    BYTE    byLevel;  /*Í³Ò»¼¶±ð£¬ÓÃÓÚ²Ù×÷¼¶±ð¹ÜÀí,1- 255*/
    BYTE    byRes[18];
}NET_MATRIX_USERPARAM, *LPNET_MATRIX_USERPARAM;

//×î¶à255¸ö×ÊÔ´×é
typedef struct tagNET_MATRIX_RESOURSEGROUPPARAM
{
    DWORD dwSize;
    BYTE  byGroupName[NAME_LEN];
    BYTE  byGroupType;/*0-ÉãÏñ»úCAM×é£¬1-¼àÊÓÆ÷MON×é*/
    BYTE  byRes1;
    WORD  wMemNum;
    DWORD dwGlobalId[512];
    BYTE  byRes2[20];
}NET_MATRIX_RESOURCEGROUPPARAM,*LPNET_MATRIX_RESOURSEGROUPPARAM;

//×î¶à255¸öÓÃ»§×é
typedef struct tagNET_MATRIX_USERGROUPPARAM
{
    DWORD dwSize;
    BYTE  sGroupName[NAME_LEN];
    WORD  wUserMember[255];  /*°üº¬µÄÓÃ»§³ÉÔ±*/
    WORD  wResorceGroupMember[255]; /*°üº¬µÄ×ÊÔ´×é³ÉÔ±*/
    BYTE  byPermission[32];//È¨ÏÞ£¬Êý×é0-ptzÈ¨ÏÞ¡¢ÇÐ»»È¨ÏÞ¡¢²éÑ¯È¨ÏÞ
    BYTE  byRes[20];
} NET_MATRIX_USERGROUPPARAM, *LPNET_MATRIX_USERGROUPPARAM;

typedef struct tagNET_MATRIX_TRUNKPARAM
{
    DWORD    dwSize;
    DWORD    dwTrunkId;
    BYTE    sTrunkName[NAME_LEN];
    DWORD    dwSrcMonId;
    DWORD    dwDstCamId;
    BYTE    byTrunkType;  /*Ê¹ÓÃÀàÐÍ  1-BNC£¬2-SP3¹âÏË¸ßÇå£¬3-SP3¹âÏËD1£¬ 4-V6¹âÏË£¬5-ÆäËû¹âÏË*/
    BYTE    byAbility;     /*±íÊ¾¹âÏËµÄ´ø¿í£¬¿ÉÒÔ´«Êä¼¸Â·*/
    BYTE    bySubChan;   /*Õë¶Ô¹âÏË¸ÉÏß¶øÑÔ£¬±íÊ¾×ÓÍ¨µÀºÅ*/
    BYTE    byLevel;        /* ¸ÉÏß¼¶±ð 1-255*/
    WORD    wReserveUserID;    //Ô¤ÁôµÄÓÃ»§ID£º 1~256 £¬0±íÊ¾ÊÍ·ÅÔ¤Áô
    BYTE   byRes[18]; 
} NET_MATRIX_TRUNKPARAM, *LPNET_MATRIX_TRUNKPARAM;

typedef struct tagNET_DVR_MATRIX_TRUNKLIST
{
    DWORD    dwSize;
    BYTE    byRes[12];
    DWORD    dwTrunkNum;//Éè±¸·µ»ØµÄ¸ÉÏßÊýÁ¿
    BYTE    *pBuffer;//¸ÉÏßÐÅÏ¢»º³åÇø
    DWORD   dwBufLen;//Ëù·ÖÅäÖ¸Õë³¤¶È£¬ÊäÈë²ÎÊý
}NET_DVR_MATRIX_TRUNKLIST,*LPNET_DVR_MATRIX_TRUNKLIST;

#define MATRIX_PROTOCOL_NUM    20    //Ö§³ÖµÄ×î´ó¾ØÕóÐ­ÒéÊý
#define KEYBOARD_PROTOCOL_NUM  20    //Ö§³ÖµÄ×î´ó¼üÅÌÐ­ÒéÊý
typedef struct tagNET_DVR_PROTO_TYPE_EX
{ 
    WORD wType;               /*ipcÐ­ÒéÖµ*/  
    WORD wCommunitionType;        /*0£ºÄ£Äâ 1£ºÊý×Ö 2£º¼æÈÝÄ£Äâ¡¢Êý×Ö*/
    BYTE  byDescribe[DESC_LEN]; /*Ð­ÒéÃèÊö×Ö¶Î*/    
}NET_DVR_PROTO_TYPE_EX, LPNET_DVR_PROTO_TYPE_EX;

typedef struct tagNET_DVR_MATRIXMANAGE_ABIILITY
{
    DWORD    dwSize;
    DWORD    dwMaxCameraNum;//×î´óCameraÊýÁ¿
    DWORD    dwMaxMonitorNum;//×î´ó¼àÊÓÆ÷ÊýÁ¿
    WORD    wMaxMatrixNum;//×î´ó¾ØÕóÊýÁ¿
    WORD    wMaxSerialNum;//´®¿ÚÊýÁ¿
    WORD    wMaxUser;//×î´óÓÃ»§Êý
    WORD    wMaxResourceArrayNum;//×î´ó×ÊÔ´×éÊý
    WORD    wMaxUserArrayNum;//×î´óÓÃ»§×éÊý
    WORD    wMaxTrunkNum;//×î´ó¸ÉÏßÊý
    BYTE    nStartUserNum;//ÆðÊ¼ÓÃ»§ºÅ
    BYTE    nStartUserGroupNum;//ÆðÊ¼ÓÃ»§×éºÅ
    BYTE    nStartResourceGroupNum;//ÆðÊ¼×ÊÔ´×éºÅ
    BYTE    nStartSerialNum;//ÆðÊ¼´®¿ÚºÅ
    DWORD   dwMatrixProtoNum;     /*ÓÐÐ§µÄ¾ØÕóÐ­ÒéÊýÄ¿£¬´Ó0¿ªÊ¼*/
    NET_DVR_PROTO_TYPE_EX struMatrixProto[MATRIX_PROTOCOL_NUM];/*×î´óÐ­ÒéÁÐ±í³¤¶È*/    
    DWORD   dwKeyBoardProtoNum;     /*ÓÐÐ§µÄ¼üÅÌÐ­ÒéÊýÄ¿£¬´Ó0¿ªÊ¼*/
    NET_DVR_PROTO_TYPE_EX struKeyBoardProto[KEYBOARD_PROTOCOL_NUM];/*×î´óÐ­ÒéÁÐ±í³¤¶È*/   
    BYTE    byRes[32];
} NET_DVR_MATRIXMANAGE_ABILITY, *LPNET_DVR_MATRIXMANAGE_ABILITY;

//ÈËÁ³×¥ÅÄ¹æÔò(µ¥Ìõ)
typedef struct tagNET_VCA_SINGLE_FACESNAPCFG
{
    BYTE byActive;                //ÊÇ·ñ¼¤»î¹æÔò£º0-·ñ£¬1-ÊÇ
    /********* IPC5.1.7 ÐÂÔö²ÎÊý Begin 2014-03-21***********/
    //ÈËÁ³×Ô¶¯ROI¿ª¹ØÊ¹ÄÜ
    BYTE byAutoROIEnable;//0-¹Ø±Õ,1-¿ªÆô
    BYTE byRes[2]; //±£Áô
    /********* IPC5.1.7 ÐÂÔö²ÎÊý End 2014-03-21***********/
    NET_VCA_SIZE_FILTER struSizeFilter;   //³ß´ç¹ýÂËÆ÷
    NET_VCA_POLYGON     struVcaPolygon;        //ÈËÁ³Ê¶±ðÇøÓò
}NET_VCA_SINGLE_FACESNAPCFG, *LPNET_VCA_SINGLE_FACESNAPCFG;

//ÈËÁ³×¥ÅÄ¹æÔò²ÎÊý
typedef struct tagNET_VCA_FACESNAPCFG
{
    DWORD dwSize;
    BYTE bySnapTime;                    //µ¥¸öÄ¿±êÈËÁ³µÄ×¥ÅÄ´ÎÊý0-10
    BYTE bySnapInterval;                 //×¥ÅÄ¼ä¸ô£¬µ¥Î»£ºÖ¡
    BYTE bySnapThreshold;               //×¥ÅÄãÐÖµ£¬0-100
    BYTE byGenerateRate;         //Ä¿±êÉú³ÉËÙ¶È,·¶Î§[1, 5]    
    BYTE bySensitive;            //Ä¿±ê¼ì²âÁéÃô¶È£¬·¶Î§[1, 5]
    BYTE byReferenceBright; //2012-3-27²Î¿¼ÁÁ¶È[0,100]
    BYTE byMatchType;         //2012-5-3±È¶Ô±¨¾¯Ä£Ê½£¬0-Ä¿±êÏûÊ§ºó±¨¾¯£¬1-ÊµÊ±±¨¾¯
    BYTE byMatchThreshold;  //2012-5-3ÊµÊ±±È¶ÔãÐÖµ£¬0~100
    NET_DVR_JPEGPARA  struPictureParam; //Í¼Æ¬¹æ¸ñ½á¹¹
    NET_VCA_SINGLE_FACESNAPCFG struRule[MAX_RULE_NUM]; //ÈËÁ³×¥ÅÄ¹æÔò
    //ÈËÁ³ÆØ¹â×î¶Ì³ÖÐøÊ±¼ä£¨Á½¸ö×Ö½Ú£©
    WORD wFaceExposureMinDuration;//·¶Î§(1~3600Ãë£¬Ä¬ÈÏ60)ÉúÐ§ÓÚ×Ô¶¯Ä£Ê½ÏÂ
    //ÈËÁ³ÆØ¹âÄ£Ê½
    BYTE byFaceExposureMode;//1-¹Ø±Õ£¬2-¿ªÆô£¬0-×Ô¶¯£¨¸ù¾ÝÈËÁ³ÅÐ¶Ï£©
    BYTE byBackgroundPic;//±³¾°Í¼ÉÏ´«Ê¹ÄÜ 0-Ä¬ÈÏÖµ£¨¿ªÆô£©£¬1-½ûÖ¹
    DWORD dwValidFaceTime;    //ÓÐÐ§ÈËÁ³×î¶Ì³ÖÐøÊ±¼ä£¬µ¥Î»£ºÃë
    DWORD dwUploadInterval; //ÈËÁ³×¥ÅÄÍ³¼ÆÊý¾ÝÉÏ´«¼ä¸ôÊ±¼ä£¬µ¥Î»£ºÃë£¬Ä¬ÈÏ900Ãë
    BYTE byRes2[88];
}NET_VCA_FACESNAPCFG, *LPNET_VCA_FACESNAPCFG;

//ÄêÁä¶Î
typedef enum tagHUMAN_AGE_GROUP_ENUM
{    
    ENUM_AGE_GROUP_INFANT      = 1,   //Ó¤Ó×¶ù
        ENUM_AGE_GROUP_CHILD       = 2,   //¶ùÍ¯
        ENUM_AGE_GROUP_YOUNGSTER   = 3,   //ÉÙÄê
        ENUM_AGE_GROUP_ADOLESCENT  = 4,   //ÇàÉÙÄê
        ENUM_AGE_GROUP_YOUTH       = 5,   //ÇàÄê
        ENUM_AGE_GROUP_PRIME       = 6,   //×³Äê
        ENUM_AGE_GROUP_MIDLIFE     = 7,   //ÖÐÄê
        ENUM_AGE_GROUP_MIDAGE      = 8,   //ÖÐÀÏÄê
        ENUM_AGE_GROUP_OLD         = 9    //ÀÏÄê
}HUMAN_AGE_GROUP_ENUM;

//ÈËÁ³×¥ÅÄ½á¹û
typedef struct tagNET_VCA_FACESNAP_RESULT
{
    DWORD   dwSize;             // ½á¹¹´óÐ¡
    DWORD     dwRelativeTime;     // Ïà¶ÔÊ±±ê
    DWORD    dwAbsTime;            // ¾ø¶ÔÊ±±ê
    DWORD   dwFacePicID;       //ÈËÁ³Í¼ID
    DWORD   dwFaceScore;        //ÈËÁ³ÆÀ·Ö,0-100
    NET_VCA_TARGET_INFO  struTargetInfo;//±¨¾¯Ä¿±êÐÅÏ¢
    NET_VCA_RECT         struRect;      //ÈËÁ³×ÓÍ¼ÇøÓò
    NET_VCA_DEV_INFO       struDevInfo;    //Ç°¶ËÉè±¸ÐÅÏ¢
    DWORD   dwFacePicLen;        //ÈËÁ³×ÓÍ¼µÄ³¤¶È£¬Îª0±íÊ¾Ã»ÓÐÍ¼Æ¬£¬´óÓÚ0±íÊ¾ÓÐÍ¼Æ¬
    DWORD   dwBackgroundPicLen; //±³¾°Í¼µÄ³¤¶È£¬Îª0±íÊ¾Ã»ÓÐÍ¼Æ¬£¬´óÓÚ0±íÊ¾ÓÐÍ¼Æ¬(±£Áô)
    BYTE    bySmart;            //IDSÉè±¸·µ»Ø0(Ä¬ÈÏÖµ)£¬Smart Functiom Return 1
    BYTE    byAlarmEndMark;//±¨¾¯½áÊø±ê¼Ç0-±£Áô£¬1-½áÊø±ê¼Ç£¨¸Ã×Ö¶Î½áºÏÈËÁ³ID×Ö¶ÎÊ¹ÓÃ£¬±íÊ¾¸ÃID¶ÔÓ¦µÄÏÂ±¨¾¯½áÊø£¬Ö÷ÒªÌá¹©¸øNVRÊ¹ÓÃ£¬ÓÃÓÚÅÐ¶Ï±¨¾¯½áÊø£¬ÌáÈ¡Ê¶±ðÍ¼Æ¬Êý¾ÝÖÐ£¬ÇåÎú¶È×î¸ßµÄÍ¼Æ¬£©
    BYTE    byRepeatTimes;   //ÖØ¸´±¨¾¯´ÎÊý£¬0-ÎÞÒâÒå
    BYTE    byRes;
    NET_VCA_HUMAN_FEATURE   struFeature;  //ÈËÌåÊôÐÔ
    float   fStayDuration;  //Í£Áô»­ÃæÖÐÊ±¼ä(µ¥Î»: Ãë)
    char    sStorageIP[16];        //´æ´¢·þÎñIPµØÖ·
    WORD    wStoragePort;            //´æ´¢·þÎñ¶Ë¿ÚºÅ
    BYTE    byRes1[18];              // ±£Áô×Ö½Ú
    BYTE*   pBuffer1;  //ÈËÁ³×ÓÍ¼µÄÍ¼Æ¬Êý¾Ý
    BYTE*   pBuffer2;  //±³¾°Í¼µÄÍ¼Æ¬Êý¾Ý£¨±£Áô£¬Í¨¹ý²éÕÒ±³¾°Í¼½Ó¿Ú¿ÉÒÔ»ñÈ¡±³¾°Í¼£©
}NET_VCA_FACESNAP_RESULT, *LPNET_VCA_FACESNAP_RESULT;

typedef struct tagNET_VCA_SUB_PROCIMG_V50
{
    DWORD dwImageLen;  //Í¼Æ¬Êý¾Ý³¤¶È
    DWORD dwFaceScore;        //ÈËÁ³ÆÀ·Ö,0-100
    NET_VCA_RECT struVcaRect; //ÈËÁ³×ÓÍ¼ÇøÓò
    NET_VCA_POINT struLeftEyePoint;  //×óÑÛÎ»ÖÃ
    NET_VCA_POINT struRightEyePoint; //ÓÒÑÛÎ»ÖÃ
    BYTE       byDistance;           //Á½ÑÛ¼ä¾à
    BYTE       bySex;
    BYTE       byAgeGroup; 
    BYTE       byEyeGlass; 
    NET_VCA_RECT struPosRect;  //ÈËÁ³Î»ÖÃÇøÓò
    BYTE       byRes[20];  //±£Áô
    BYTE       *pImage;  //Í¼Æ¬Êý¾Ý
}NET_VCA_SUB_PROCIMG_V50, *LPNET_VCA_SUB_PROCIMG_V50;

typedef struct tagNET_DVR_FACE_DETECTION
{
    DWORD     dwSize; //½á¹¹´óÐ¡
    DWORD        dwRelativeTime; //Ïà¶ÔÊ±±ê
    DWORD       dwAbsTime; //¾ø¶ÔÊ±±ê
    DWORD      dwBackgroundPicLen; //±³¾°Í¼µÄ³¤¶È£¬Îª0±íÊ¾Ã»ÓÐÍ¼Æ¬£¬´óÓÚ0±íÊ¾ÓÐÍ¼Æ¬
    NET_VCA_DEV_INFO  struDevInfo;   //Ç°¶ËÉè±¸ÐÅÏ¢
    NET_VCA_RECT   struFacePic[MAX_FACE_PIC_NUM/*30*/];//ÈËÁ³×ÓÍ¼ÇøÓò
    BYTE   byFacePicNum;//×ÓÍ¼ÊýÁ¿
    BYTE   byRes[255];
    BYTE*  pBackgroundPicpBuffer; //±³¾°Í¼µÄÍ¼Æ¬Êý¾Ý
}NET_DVR_FACE_DETECTION,*LPNET_DVR_FACE_DETECTION;

typedef struct tagNET_VCA_FD_PROCIMG_RESULT_V50
{
    DWORD dwSize;   //½á¹¹´óÐ¡
    DWORD dwImageId; //´óÍ¼ID
    BYTE byRes[20]; //±£Áô
    DWORD dwSubImageNum;  //ÈËÁ³×ÓÍ¼ÕÅÊý
    NET_VCA_SUB_PROCIMG_V50  struProcImg[MAX_TARGET_NUM];  //µ¥ÕÅ×ÓÍ¼ÐÅÏ¢
}NET_VCA_FD_PROCIMG_RESULT_V50, *LPNET_VCA_FD_PROCIMG_RESULT_V50;

//Ðé½¹Õì²â½á¹û
typedef struct  tagNET_DVR_DEFOCUS_ALARM
{
    DWORD   dwSize;     /*½á¹¹³¤¶È*/
    NET_VCA_DEV_INFO       struDevInfo;/*Éè±¸ÐÅÏ¢*/
    BYTE    byRes[64];        // ±£Áô×Ö½Ú
}NET_DVR_DEFOCUS_ALARM, *LPNET_DVR_DEFOCUS_ALARM;

typedef struct  tagNET_DVR_AUDIOEXCEPTION_ALARM
{
    DWORD      dwSize;     /*½á¹¹³¤¶È*/
    BYTE  byAlarmType;//±¨¾¯ÀàÐÍ£¬1-ÒôÆµÊäÈëÒì³££¬2-ÒôÆµÊäÈëÍ»±ä£¨ÉùÇ¿¶¸Éý£©£¬3-ÉùÇ¿¶¸½µ£¬4-ÒôÆµ¶ªÊ§
    BYTE  byRes1;
    WORD wAudioDecibel;//ÉùÒôÇ¿¶È£¨ÒôÆµÊäÈëÍ»±äÊ±ÓÃµ½£©
    NET_VCA_DEV_INFO       struDevInfo;/*Éè±¸ÐÅÏ¢*/
    BYTE    byRes[64];        // ±£Áô×Ö½Ú
}NET_DVR_AUDIOEXCEPTION_ALARM, *LPNET_DVR_AUDIOEXCEPTION_ALARM;

typedef struct  tagNET_BUTTON_DOWN_EXCEPTION_ALARM
{
    DWORD      dwSize;     /*½á¹¹³¤¶È*/
    NET_VCA_DEV_INFO       struDevInfo;/*Éè±¸ÐÅÏ¢*/
    BYTE    byRes[64];        // ±£Áô×Ö½Ú
}NET_BUTTON_DOWN_EXCEPTION_ALARM, *LPNET_BUTTON_DOWN_EXCEPTION_ALARM;

typedef struct tagNET_VCA_FD_IMAGE_CFG
{
    DWORD   dwWidth;                  //»Ò¶ÈÍ¼ÏñÊý¾Ý¿í¶È
    DWORD   dwHeight;                 //»Ò¶ÈÍ¼Ïñ¸ß¶È
    DWORD   dwImageLen;  //»Ò¶ÈÍ¼ÏñÊý¾Ý³¤¶È
    BYTE     byRes[20];  //±£Áô
    BYTE     *pImage;    //»Ò¶ÈÍ¼ÏñÊý¾Ý
}NET_VCA_FD_IMAGE_CFG, *LPNET_VCA_FD_IMAGE_CFG;

typedef struct tagNET_VCA_FD_PROCIMG_CFG
{
    DWORD    dwSize;           //½á¹¹´óÐ¡
    BYTE     byEnable;         //ÊÇ·ñ¼¤»î¹æÔò;
    BYTE     bySensitivity;      //¼ì²âÁéÃô¶È£¬[0,5]
    BYTE     byRes1[22];       //±£Áô×Ö½Ú 
    NET_VCA_SIZE_FILTER  struSizeFilter;  //³ß´ç¹ýÂËÆ÷
    NET_VCA_POLYGON   struPolygon;    //¶à±ßÐÎ
    NET_VCA_FD_IMAGE_CFG struFDImage;  //Í¼Æ¬ÐÅÏ¢
    BYTE     byRes2[20];    //±£Áô
}NET_VCA_FD_PROCIMG_CFG, *LPNET_VCA_FD_PROCIMG_CFG;

typedef struct tagNET_VCA_SUB_PROCIMG
{
    DWORD dwImageLen;  //Í¼Æ¬Êý¾Ý³¤¶È
    DWORD dwFaceScore;        //ÈËÁ³ÆÀ·Ö,0-100
    NET_VCA_RECT struVcaRect; //ÈËÁ³×ÓÍ¼ÇøÓò
    BYTE  byRes[20];  //±£Áô
    BYTE  *pImage;  //Í¼Æ¬Êý¾Ý
}NET_VCA_SUB_PROCIMG, *LPNET_VCA_SUB_PROCIMG;

typedef struct tagNET_VCA_FD_PROCIMG_RESULT
{
    DWORD dwSize;   //½á¹¹´óÐ¡
    DWORD dwImageId; //´óÍ¼ID
    BYTE byRes[20]; //±£Áô
    DWORD dwSubImageNum;  //ÈËÁ³×ÓÍ¼ÕÅÊý
    NET_VCA_SUB_PROCIMG  struProcImg[MAX_TARGET_NUM];  //µ¥ÕÅ×ÓÍ¼ÐÅÏ¢
}NET_VCA_FD_PROCIMG_RESULT, *LPNET_VCA_FD_PROCIMG_RESULT;

typedef struct tagNET_VCA_PICMODEL_RESULT
{
    DWORD dwImageLen;  //Í¼Æ¬Êý¾Ý³¤¶È
    DWORD dwModelLen;  //Ä£ÐÍÊý¾Ý³¤¶È
    BYTE  byRes[20]; //±£Áô
    BYTE  *pImage;  //ÈËÁ³Í¼Æ¬Êý¾ÝÖ¸Õë
    BYTE  *pModel;  //Ä£ÐÍÊý¾ÝÖ¸Õë
}NET_VCA_PICMODEL_RESULT, *LPNET_VCA_PICMODEL_RESULT;

typedef struct tagNET_VCA_REGISTER_PIC
{
    DWORD dwImageID; //´óÍ¼ID
    DWORD dwFaceScore;        //ÈËÁ³ÆÀ·Ö,0-100
    NET_VCA_RECT struVcaRect;  //ÈËÁ³×ÓÍ¼ÇøÓò
    BYTE  byRes[20];  //±£Áô
}NET_VCA_REGISTER_PIC, *LPNET_VCA_REGISTER_PIC;

#define MAX_HUMAN_PICTURE_NUM  10   //×î´óÕÕÆ¬Êý
#define MAX_HUMAN_BIRTHDATE_LEN 10   //×î´ó³öÉúÄêÔÂ³¤¶È

typedef struct tagNET_DVR_AREAINFOCFG
{ 
    WORD wNationalityID; //¹ú¼®
    WORD wProvinceID; //Ê¡
    WORD wCityID; //ÊÐ
    WORD wCountyID; //ÏØ
    BYTE byRes[4]; //±£Áô
}NET_DVR_AREAINFOCFG, *LPNET_DVR_AREAINFOCFG;

typedef struct tagNET_VCA_HUMAN_ATTRIBUTE
{
    BYTE   bySex; //ÐÔ±ð£º0-ÄÐ£¬1-Å®
    BYTE   byCertificateType; //Ö¤¼þÀàÐÍ£º0-Éí·ÝÖ¤£¬1-¾¯¹ÙÖ¤
    BYTE   byBirthDate[MAX_HUMAN_BIRTHDATE_LEN]; //³öÉúÄêÔÂ£¬Èç£º201106
    BYTE   byName[NAME_LEN]; //ÐÕÃû
    NET_DVR_AREAINFOCFG struNativePlace; //¼®¹á²ÎÊý
    BYTE   byCertificateNumber[NAME_LEN];  //Ö¤¼þºÅ
    BYTE   byRes2[20];
}NET_VCA_HUMAN_ATTRIBUTE, *LPNET_VCA_HUMAN_ATTRIBUTE;

typedef struct tagNET_VCA_HUMANATTRIBUTE_COND
{
    BYTE   bySex; //ÐÔ±ð£º0-²»ÆôÓÃ£¬1-ÄÐ£¬2-Å®
    BYTE   byCertificateType; //Ö¤¼þÀàÐÍ£º0-²»ÆôÓÃ£¬1-Éí·ÝÖ¤£¬2-¾¯¹ÙÖ¤
    BYTE   byStartBirthDate[MAX_HUMAN_BIRTHDATE_LEN]; //ÆðÊ¼³öÉúÄêÔÂ£¬Èç£º201106
    BYTE   byEndBirthDate[MAX_HUMAN_BIRTHDATE_LEN]; //½ØÖ¹³öÉúÄêÔÂ£¬Èç201106
    BYTE   byName[NAME_LEN]; //ÐÕÃû
    NET_DVR_AREAINFOCFG struNativePlace; //¼®¹á²ÎÊý
    BYTE   byCertificateNumber[NAME_LEN];  //Ö¤¼þºÅ
    BYTE   byRes[20];
}NET_VCA_HUMANATTRIBUTE_COND, *LPNET_VCA_HUMANATTRIBUTE_COND;


typedef struct tagNET_VCA_BLACKLIST_INFO
{
    DWORD  dwSize;   //½á¹¹´óÐ¡
    DWORD  dwRegisterID;  //Ãûµ¥×¢²áIDºÅ£¨Ö»¶Á£©
    DWORD  dwGroupNo; //·Ö×éºÅ
    BYTE   byType; //ºÚ°×Ãûµ¥±êÖ¾£º0-È«²¿£¬1-°×Ãûµ¥£¬2-ºÚÃûµ¥
    BYTE   byLevel; //ºÚÃûµ¥µÈ¼¶£¬0-È«²¿£¬1-µÍ£¬2-ÖÐ£¬3-¸ß
    BYTE   byRes1[2];  //±£Áô
    NET_VCA_HUMAN_ATTRIBUTE struAttribute;  //ÈËÔ±ÐÅÏ¢
    BYTE   byRemark[NAME_LEN]; //±¸×¢ÐÅÏ¢
    BYTE   byRes2[20];
}NET_VCA_BLACKLIST_INFO, *LPNET_VCA_BLACKLIST_INFO;

typedef struct tagNET_VCA_BLACKLIST_PARA
{
    DWORD dwSize;   //½á¹¹´óÐ¡
    NET_VCA_BLACKLIST_INFO struBlackListInfo;  //ºÚÃûµ¥»ù±¾²ÎÊý
    DWORD dwRegisterPicNum;  //ºÚÃûµ¥Í¼¸öÊý
    NET_VCA_PICMODEL_RESULT struRegisterPic[MAX_HUMAN_PICTURE_NUM];  //ºÚÃûµ¥Í¼Æ¬ÐÅÏ¢
    BYTE  byRes[40]; //±£Áô
}NET_VCA_BLACKLIST_PARA, *LPNET_VCA_BLACKLIST_PARA;

typedef struct tagNET_VCA_BLACKLIST_COND
{
    LONG  lChannel; //Í¨µÀºÅ
    DWORD dwGroupNo; //·Ö×éºÅ
    BYTE  byType; //ºÚ°×Ãûµ¥±êÖ¾£º0-È«²¿£¬1-°×Ãûµ¥£¬2-ºÚÃûµ¥
    BYTE  byLevel; //ºÚÃûµ¥µÈ¼¶£¬0-È«²¿£¬1-µÍ£¬2-ÖÐ£¬3-¸ß
    BYTE  byRes1[2];  //±£Áô
    NET_VCA_HUMAN_ATTRIBUTE struAttribute; //ÈËÔ±ÐÅÏ¢
    BYTE  byRes[20];
}NET_VCA_BLACKLIST_COND, *LPNET_VCA_BLACKLIST_COND;

typedef struct tagNET_VCA_BLACKLIST_PIC
{
    DWORD dwSize;   //½á¹¹´óÐ¡
    DWORD dwFacePicNum;  //ÈËÁ³Í¼¸öÊý
    BYTE  byRes[20]; //±£Áô
    NET_VCA_PICMODEL_RESULT  struBlackListPic[MAX_HUMAN_PICTURE_NUM];  //µ¥ÕÅÕÕÆ¬ÐÅÏ¢
}NET_VCA_BLACKLIST_PIC, *LPNET_VCA_BLACKLIST_PIC;

typedef struct tagNET_VCA_FIND_PICTURECOND
{
    LONG lChannel;//Í¨µÀºÅ
    NET_DVR_TIME struStartTime;//¿ªÊ¼Ê±¼ä
    NET_DVR_TIME struStopTime;//½áÊøÊ±¼ä
    BYTE byRes[12]; //±£Áô
}NET_VCA_FIND_PICTURECOND, *LPNET_VCA_FIND_PICTURECOND;

#define MAX_FACE_PIC_LEN   6144   //×î´óÈËÁ³Í¼Æ¬Êý¾Ý³¤¶È
typedef struct tagNET_VCA_SUB_SNAPPIC_DATA
{
    DWORD dwFacePicID; //ÈËÁ³Í¼ID
    DWORD dwFacePicLen;  //ÈËÁ³Í¼Êý¾Ý³¤¶È
    NET_DVR_TIME struSnapTime;  //×¥ÅÄÊ±¼ä
    DWORD dwSimilarity; //ÏàËÆ¶È
    BYTE  byRes[16];  //±£Áô
    char  sPicBuf[MAX_FACE_PIC_LEN];  //Í¼Æ¬Êý¾Ý
}NET_VCA_SUB_SNAPPIC_DATA, *LPNET_VCA_SUB_SNAPPIC_DATA;

typedef struct tagNET_VCA_ADVANCE_FIND
{
    DWORD dwFacePicID; //ÈËÁ³Í¼Æ¬ID
    BYTE  byRes[36];
}NET_VCA_ADVANCE_FIND, *LPNET_VCA_ADVANCE_FIND;

typedef struct tagNET_VCA_NORMAL_FIND
{
    DWORD dwImageID; //´óÍ¼ID
    DWORD dwFaceScore;  //ÈËÁ³ÆÀ·Ö
    NET_VCA_RECT struVcaRect; //ÈËÁ³×ÓÍ¼ÇøÓò
    BYTE byRes[20];
}NET_VCA_NORMAL_FIND, *LPNET_VCA_NORMAL_FIND;

typedef union tagNET_VCA_FIND_SNAPPIC_UNION
{
    NET_VCA_NORMAL_FIND  struNormalFind; //ÆÕÍ¨¼ìË÷
    NET_VCA_ADVANCE_FIND struAdvanceFind; //¸ß¼¶¼ìË÷
}NET_VCA_FIND_SNAPPIC_UNION, *LPNET_VCA_FIND_SNAPPIC_UNION;

typedef enum _VCA_FIND_SNAPPIC_TYPE_
{
    VCA_NORMAL_FIND  = 0x00000000,   //ÆÕÍ¨¼ìË÷
        VCA_ADVANCE_FIND  = 0x00000001  //¸ß¼¶¼ìË÷
}VCA_FIND_SNAPPIC_TYPE;

typedef struct tagNET_VCA_FIND_PICTURECOND_ADVANCE
{
    LONG lChannel;//Í¨µÀºÅ
    NET_DVR_TIME struStartTime;//¿ªÊ¼Ê±¼ä
    NET_DVR_TIME struStopTime;//½áÊøÊ±¼ä
    BYTE byThreshold;  //ãÐÖµ£¬0-100
    BYTE byRes[23]; //±£Áô
    VCA_FIND_SNAPPIC_TYPE dwFindType;//¼ìË÷ÀàÐÍ£¬Ïê¼ûVCA_FIND_SNAPPIC_TYPE
    NET_VCA_FIND_SNAPPIC_UNION uFindParam; //¼ìË÷²ÎÊý
}NET_VCA_FIND_PICTURECOND_ADVANCE, *LPNET_VCA_FIND_PICTURECOND_ADVANCE;

typedef struct tagNET_VCA_FACESNAP_INFO_ALARM
{
    DWORD dwRelativeTime;     // Ïà¶ÔÊ±±ê
    DWORD dwAbsTime;            // ¾ø¶ÔÊ±±ê
    DWORD dwSnapFacePicID;       //×¥ÅÄÈËÁ³Í¼ID
    DWORD dwSnapFacePicLen;        //×¥ÅÄÈËÁ³×ÓÍ¼µÄ³¤¶È£¬Îª0±íÊ¾Ã»ÓÐÍ¼Æ¬£¬´óÓÚ0±íÊ¾ÓÐÍ¼Æ¬
    NET_VCA_DEV_INFO struDevInfo;        //Ç°¶ËÉè±¸ÐÅÏ¢
       BYTE  byRes[20];              // ±£Áô×Ö½Ú
    BYTE  *pBuffer1;  //×¥ÅÄÈËÁ³×ÓÍ¼µÄÍ¼Æ¬Êý¾Ý
}NET_VCA_FACESNAP_INFO_ALARM, *LPNET_VCA_FACESNAP_INFO_ALARM;

typedef struct tagNET_VCA_BLACKLIST_INFO_ALARM
{
    NET_VCA_BLACKLIST_INFO struBlackListInfo; //ºÚÃûµ¥»ù±¾ÐÅÏ¢
    DWORD dwBlackListPicLen;       //ºÚÃûµ¥ÈËÁ³×ÓÍ¼µÄ³¤¶È£¬Îª0±íÊ¾Ã»ÓÐÍ¼Æ¬£¬´óÓÚ0±íÊ¾ÓÐÍ¼Æ¬
       BYTE  byRes[20];              // ±£Áô×Ö½Ú
    BYTE  *pBuffer1;  //ºÚÃûµ¥ÈËÁ³×ÓÍ¼µÄÍ¼Æ¬Êý¾Ý
}NET_VCA_BLACKLIST_INFO_ALARM, *LPNET_VCA_BLACKLIST_INFO_ALARM;

typedef struct tagNET_VCA_FACESNAP_MATCH_ALARM
{
    DWORD dwSize;             // ½á¹¹´óÐ¡
    float fSimilarity; //ÏàËÆ¶È£¬[0.001,1]
    NET_VCA_FACESNAP_INFO_ALARM  struSnapInfo; //×¥ÅÄÐÅÏ¢
    NET_VCA_BLACKLIST_INFO_ALARM struBlackListInfo; //ºÚÃûµ¥ÐÅÏ¢
    char         sStorageIP[16];        //´æ´¢·þÎñIPµØÖ·
    WORD            wStoragePort;            //´æ´¢·þÎñ¶Ë¿ÚºÅ
    BYTE             byRes[42];              // ±£Áô×Ö½Ú
}NET_VCA_FACESNAP_MATCH_ALARM, *LPNET_VCA_FACESNAP_MATCH_ALARM;


typedef struct tagNET_VCA_BLACKLIST_INFO_ALARM_LOG
{
    NET_VCA_BLACKLIST_INFO struBlackListInfo; //ºÚÃûµ¥»ù±¾ÐÅÏ¢
    DWORD dwBlackListPicID;       //ºÚÃûµ¥ÈËÁ³×ÓÍ¼ID£¬ÓÃÓÚ²éÕÒÍ¼Æ¬
       BYTE  byRes[20];              // ±£Áô×Ö½Ú
}NET_VCA_BLACKLIST_INFO_ALARM_LOG, *LPNET_VCA_BLACKLIST_INFO_ALARM_LOG;

typedef struct tagNET_VCA_FACESNAP_INFO_ALARM_LOG
{
    DWORD dwRelativeTime;     // Ïà¶ÔÊ±±ê
    DWORD dwAbsTime;            // ¾ø¶ÔÊ±±ê
    DWORD dwSnapFacePicID;       //×¥ÅÄÈËÁ³Í¼ID
    NET_VCA_DEV_INFO       struDevInfo;        //Ç°¶ËÉè±¸ÐÅÏ¢
       BYTE  byRes[20];              // ±£Áô×Ö½Ú
}NET_VCA_FACESNAP_INFO_ALARM_LOG, *LPNET_VCA_FACESNAP_INFO_ALARM_LOG;

typedef struct tagNET_VCA_FACESNAP_MATCH_ALARM_LOG
{
    DWORD dwSize;             // ½á¹¹´óÐ¡
    float fSimilarity; //ÏàËÆ¶È£¬[0.001,1]
    NET_VCA_FACESNAP_INFO_ALARM_LOG  struSnapInfoLog; //×¥ÅÄÐÅÏ¢
    NET_VCA_BLACKLIST_INFO_ALARM_LOG struBlackListInfoLog; //ºÚÃûµ¥ÐÅÏ¢
    BYTE  byRes[60];              // ±£Áô×Ö½Ú
}NET_VCA_FACESNAP_MATCH_ALARM_LOG, *LPNET_VCA_FACESNAP_MATCH_ALARM_LOG;

typedef struct tagNET_VCA_FACEMATCH_PICCOND
{
    DWORD dwSize;             // ½á¹¹´óÐ¡
       DWORD dwSnapFaceID; //×¥ÅÄÈËÁ³×ÓÍ¼ID
    DWORD dwBlackListID; //Æ¥ÅäµÄºÚÃûµ¥ID
    DWORD dwBlackListFaceID; //±È¶ÔµÄºÚÃûµ¥ÈËÁ³×ÓÍ¼ID
    BYTE  byRes[20];              // ±£Áô×Ö½Ú
}NET_VCA_FACEMATCH_PICCOND, *LPNET_VCA_FACEMATCH_PICCOND;

typedef struct tagNET_VCA_FACEMATCH_PICTURE
{
    DWORD dwSize;             // ½á¹¹´óÐ¡
       DWORD dwSnapFaceLen; //×¥ÅÄÈËÁ³×ÓÍ¼³¤¶È
    DWORD dwBlackListFaceLen; //±È¶ÔµÄºÚÃûµ¥ÈËÁ³×ÓÍ¼³¤¶È
    BYTE  byRes[20];              //±£Áô×Ö½Ú
    BYTE *pSnapFace;  //×¥ÅÄÈËÁ³×ÓÍ¼µÄÍ¼Æ¬Êý¾Ý
    BYTE *pBlackListFace;  //±È¶ÔµÄºÚÃûµ¥ÈËÁ³×ÓÍ¼Êý¾Ý
}NET_VCA_FACEMATCH_PICTURE, *LPNET_VCA_FACEMATCH_PICTURE;

typedef struct tagNET_VCA_BLACKLIST_FASTREGISTER_PARA
{
    DWORD dwSize;   //½á¹¹´óÐ¡
    NET_VCA_BLACKLIST_INFO struBlackListInfo;  //ºÚÃûµ¥»ù±¾²ÎÊý
    DWORD dwImageLen;  //Í¼ÏñÊý¾Ý³¤¶È
    BYTE  byRes[124];  //±£Áô
    BYTE  *pImage;    //Í¼ÏñÊý¾Ý
}NET_VCA_BLACKLIST_FASTREGISTER_PARA, *LPNET_VCA_BLACKLIST_FASTREGISTER_PARA;

//µ¥¸ö·ÖÇøÅäÖÃ
typedef struct tagNET_VCA_SINGLE_PATH
{
    BYTE  byActive;  // ÊÇ·ñ¿ÉÓÃ,0-·ñ,1-ÊÇ 
    BYTE  byType;   //0-´æ´¢×¥ÅÄ£¬1-´æ´¢ºÚÃûµ¥±È¶Ô±¨¾¯£¬2-´æ´¢×¥ÅÄºÍºÚÃûµ¥±È¶Ô±¨¾¯£¬0xff-ÎÞÐ§
    BYTE  bySaveAlarmPic; //ÊÇ·ñÓÃÓÚ±£´æ¶ÏÍøµÄ±¨¾¯Í¼Æ¬£¬0-·ñ£¬1-ÊÇ
    BYTE  byRes1[5]; //±£Áô
    DWORD dwDiskDriver;   //ÅÌ·ûºÅ£¬´Ó0¿ªÊ¼
    DWORD dwLeftSpace;   //Ô¤ÁôÈÝÁ¿£¨µ¥Î»ÎªG£©
    BYTE  byRes2[8]; //±£Áô
}NET_VCA_SINGLE_PATH, *LPNET_VCA_SINGLE_PATH;

//´æ´¢Â·¾¶ÉèÖÃ
typedef struct tagNET_VCA_SAVE_PATH_CFG
{ 
    DWORD dwSize;   //½á¹¹´óÐ¡
    NET_VCA_SINGLE_PATH  struPathInfo[MAX_DISKNUM_V30]; //µ¥¸ö·ÖÇø
    BYTE  byRes[40]; //±£Áô
}NET_VCA_SAVE_PATH_CFG, *LPNET_VCA_SAVE_PATH_CFG;

typedef struct tagNET_DVR_DEV_ACCESS_CFG
{
    DWORD   dwSize;
    NET_DVR_IPADDR     struIP;        //½ÓÈëÉè±¸µÄIPµØÖ·
    WORD     wDevicePort;                 //¶Ë¿ÚºÅ
    BYTE    byEnable;                 //ÊÇ·ñÆôÓÃ£¬0-·ñ£¬1-ÊÇ
    BYTE     byRes1;                //±£Áô
    BYTE    sUserName[NAME_LEN];    //½ÓÈëÉè±¸µÄµÇÂ¼ÕÊºÅ
    BYTE    sPassword[PASSWD_LEN];    //½ÓÈëÉè±¸µÄµÇÂ¼ÃÜÂë
    BYTE    byRes2[60];
}NET_DVR_DEV_ACCESS_CFG,*LPNET_DVR_DEV_ACCESS_CFG;

/********************************ÖÇÄÜÈËÁ³Ê¶±ð end****************************/
//·Ö±æÂÊ
#define MAKE_RESOLUTION(_interlace_, _width_, _height_, _fps_) \
    (((_interlace_)<<28) \
    |((((_width_)>>3)&0x1ff)<<19)| \
    ((((_height_)>>1)&0x7ff)<<8)| \
((_fps_)&0xff))
#define GET_RES_INTERLACE(_res_) \
(((_res_)>>28)&0x1)
#define GET_RES_WIDTH(_res_) \
((((_res_)>>19)&0x1ff)<<3)
#define GET_RES_HEIGHT(_res_) \
((((_res_)>>8)&0x7ff)<<1)
#define GET_RES_FPS(_res_) \
((_res_)&0xff)

#define NOT_AVALIABLE    MAKE_RESOLUTION (0,0,0,0)
#define SVGA_60HZ         MAKE_RESOLUTION(0, 800, 600, 60)
#define SVGA_75HZ         MAKE_RESOLUTION(0, 800, 600, 75)
#define XGA_60HZ         MAKE_RESOLUTION(0, 1024, 768, 60) 
#define XGA_75HZ         MAKE_RESOLUTION(0, 1024, 768, 75)
#define SXGA_60HZ          MAKE_RESOLUTION(0, 1280, 1024, 60)
#define SXGA2_60HZ      MAKE_RESOLUTION(0, 1280, 960, 60)
#define _720P_24HZ      MAKE_RESOLUTION(0, 1280, 720, 24)
#define _720P_25HZ      MAKE_RESOLUTION(0, 1280, 720, 25)
#define _720P_30HZ      MAKE_RESOLUTION(0, 1280, 720, 30)  
#define _720P_60HZ      MAKE_RESOLUTION(0, 1280, 720, 60)
#define _720P_50HZ      MAKE_RESOLUTION(0, 1280, 720, 50) 
#define _1080I_60HZ     MAKE_RESOLUTION(1, 1920, 1080, 60)
#define _1080I_50HZ      MAKE_RESOLUTION(1, 1920, 1080, 50)
#define _1080P_60HZ     MAKE_RESOLUTION(0, 1920, 1080, 60)
#define _1080P_50HZ     MAKE_RESOLUTION(0, 1920, 1080, 50)
#define _1080P_30HZ     MAKE_RESOLUTION(0, 1920, 1080, 30)
#define _1080P_25HZ     MAKE_RESOLUTION(0, 1920, 1080, 25)
#define _1080P_24HZ     MAKE_RESOLUTION(0, 1920, 1080, 24)
#define UXGA_60HZ          MAKE_RESOLUTION(0, 1600, 1200, 60)
#define UXGA_30HZ          MAKE_RESOLUTION(0, 1600, 1200, 30)
#define WSXGA_60HZ         MAKE_RESOLUTION(0, 1680, 1050, 60)
#define WUXGA_60HZ      MAKE_RESOLUTION(0, 1920, 1200, 60)
#define WUXGA_30HZ         MAKE_RESOLUTION(0, 1920, 1200, 30)
#define WXGA_60HZ          MAKE_RESOLUTION(0, 1360, 768, 60)
#define SXGA_PLUS_60HZ    MAKE_RESOLUTION(0, 1400, 1050, 60)
#define VGA_MODE_3840x2160_30HZ MAKE_RESOLUTION(0, 3840, 2160, 30)
#define VGA_MODE_3840x2160_60HZ MAKE_RESOLUTION(0, 3840, 2160, 60)



//ÏÔÊ¾Í¨µÀ»­Ãæ·Ö¸îÄ£Ê½
#define  MAX_WINDOWS_NUM 12        //»­Ãæ·Ö¸îÄ£Ê½µÄÊýÁ¿
#define  MAX_SUPPORT_RES 32
#define  MAX_DISPNUM_V41 32
#define  MAX_SDI_RES     16     //SDIÏÔÊ¾Í¨µÀ×î´óÖ§³Ö·Ö±æÂÊÊý

typedef struct tagNET_DVR_DISPWINDOWMODE
{
    BYTE byDispChanType;//ÏÔÊ¾Í¨µÀÀàÐÍ£º0-BNC, 1-VGA, 2-HDMI, 3-DVI 4-SDI
    BYTE byDispChanSeq;//ÏÔÊ¾Í¨µÀÐòºÅ,´Ó1¿ªÊ¼£¬Èç¹ûÀàÐÍÊÇVGA£¬Ôò±íÊ¾µÚ¼¸¸öVGA
    BYTE byRes[2];
    BYTE byDispMode[MAX_WINDOWS_NUM/*12*/];
}NET_DVR_DISPWINDOWMODE, *LPNET_DVR_DISPWINDOWMODE;

typedef struct tagNET_DVR_DISPINFO
{
    BYTE  byChanNums;//Í¨µÀ¸öÊý
    BYTE  byStartChan;//ÆðÊ¼Í¨µÀ
    BYTE  byRes[2];
    DWORD    dwSupportResolution[MAX_SUPPORT_RES/*32*/];//Ö§³Ö·Ö±æÂÊ
}NET_DVR_DISPINFO, *LPNET_DVR_DISPINFO;

//´óÆÁÆ´½ÓÐÅÏ¢
typedef struct tagNET_DVR_SCREENINFO
{
    BYTE  bySupportBigScreenNums;//×î¶à´óÆÁÆ´½ÓÊýÁ¿
    BYTE  byStartBigScreenNum;//´óÆÁÆ´½ÓÆðÊ¼ºÅ
    BYTE  byMaxScreenX;//´óÆÁÆ´½ÓÄ£Ê½
    BYTE  byMaxScreenY;
    BYTE  byRes[8];
}NET_DVR_SCREENINFO, *LPNET_DVR_SCREENINFO;

typedef struct tagNET_DVR_SDI_INFO
{
    BYTE  byChanNums;//Í¨µÀ¸öÊý
    BYTE  byStartChan;//ÆðÊ¼Í¨µÀ
    BYTE  byRes[2];
    DWORD dwSupportResolution[MAX_SDI_RES/*16*/];//Ö§³Ö·Ö±æÂÊ
}NET_DVR_SDI_INFO,*LPNET_DVR_SDI_INFO;

typedef struct tagNET_DVR_MATRIX_ABILITY_V41
{
    DWORD dwSize;
    BYTE  byDspNums;//DSP¸öÊý  
    BYTE  byDecChanNums;//½âÂëÍ¨µÀÊý
    BYTE  byStartChan;//ÆðÊ¼½âÂëÍ¨µÀ
    BYTE  byRes1[5];
    NET_DVR_DISPINFO struVgaInfo;//VGAÏÔÊ¾Í¨µÀÐÅÏ¢
    NET_DVR_DISPINFO struBncInfo;//BNCÏÔÊ¾Í¨µÀÐÅÏ¢
    NET_DVR_DISPINFO struHdmiInfo;//HDMIÏÔÊ¾Í¨µÀÐÅÏ¢
    NET_DVR_DISPINFO struDviInfo;//DVIÏÔÊ¾Í¨µÀÐÅÏ¢
    NET_DVR_DISPWINDOWMODE struDispMode[MAX_DISPNUM_V41/*32*/];
    NET_DVR_SCREENINFO struBigScreenInfo;
    BYTE  bySupportAutoReboot; //ÊÇ·ñÖ§³Ö×Ô¶¯ÖØÆô£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    BYTE  byRes2[3];
    NET_DVR_SDI_INFO struSDIInfo;//SDIÏÔÊ¾Í¨µÀÐÅÏ¢
    BYTE  byRes3[48];
} NET_DVR_MATRIX_ABILITY_V41, *LPNET_DVR_MATRIX_ABILITY_V41;

//ÏÔÊ¾Í¨µÀÅäÖÃ
#define  MAX_WINDOWS                16
#define  MAX_WINDOWS_V41            36

#define  STARTDISPCHAN_VGA        1
#define  STARTDISPCHAN_BNC        9
#define  STARTDISPCHAN_HDMI        25
#define  STARTDISPCHAN_DVI        29

typedef union tagNET_DVR_VIDEO_PLATFORM
{
    BYTE byRes[160];
    struct
    {
        /*¸÷¸ö×Ó´°¿Ú¶ÔÓ¦½âÂëÍ¨µÀËù¶ÔÓ¦µÄ½âÂë×ÓÏµÍ³µÄ²ÛÎ»ºÅ(¶ÔÓÚÊÓÆµ×ÛºÏÆ½Ì¨ÖÐ½âÂë×ÓÏµÍ³ÓÐÐ§)*/
        //Èç¹û×ÛºÏÆ½Ì¨Ö§³Ö×Ô¶¯·ÖÅä½âÂë×ÊÔ´£¬´Ë²ÎÊý²»ÐèÒªÌî³ä
        BYTE    byJoinDecoderId[MAX_WINDOWS_V41];
        //ÏÔÊ¾´°¿ÚËù½âÊÓÆµ·Ö±æÂÊ£¬1-D1,2-720P,3-1080P£¬Éè±¸¶ËÐèÒª¸ù¾Ý´Ë·Ö±æÂÊ½øÐÐ½âÂëÍ¨µÀµÄ·ÖÅä£¬Èç1·ÖÆÁÅäÖÃ³É1080P£¬ÔòÉè±¸»á°Ñ4¸ö½âÂëÍ¨µÀ¶¼·ÖÅä¸ø´Ë½âÂëÍ¨µÀ
        BYTE    byDecResolution[MAX_WINDOWS_V41];
        NET_DVR_RECTCFG struPosition; //ÏÔÊ¾Í¨µÀÔÚµçÊÓÇ½ÖÐÎ»ÖÃ
        BYTE    byRes[80];
    }struVideoPlatform;
    struct
    {
        BYTE    byRes[160];
    }struNotVideoPlatform;
}NET_DVR_VIDEO_PLATFORM, LPNET_DVR_VIDEO_PLATFORM;


typedef struct tagNET_DVR_MATRIX_VOUTCFG
{        
    DWORD    dwSize; 
    BYTE    byAudio;            /*ÒôÆµÊÇ·ñ¿ªÆô*/
    BYTE    byAudioWindowIdx;      /*ÒôÆµ¿ªÆô×Ó´°¿Ú*/
    BYTE    byDispChanType;      /*ÏÔÊ¾Í¨µÀÀàÐÍ£º0-BNC£¬1-VGA£¬2-HDMI£¬3-DVI£¬4-YPbPr(½âÂë¿¨·þÎñÆ÷DECODER_SERVER×¨ÓÃ)*/   
    BYTE    byVedioFormat;         /*1:NTSC,2:PAL£¬0-NULL*/
    DWORD    dwResolution;//·Ö±æÂÊ
    DWORD    dwWindowMode;        /*»­ÃæÄ£Ê½£¬ÄÜÁ¦¼¯»ñÈ¡*/       
    BYTE    byJoinDecChan[MAX_WINDOWS_V41];/*¸÷¸ö×Ó´°¿Ú¹ØÁªµÄ½âÂëÍ¨µÀ,Éè±¸Ö§³Ö½âÂë×ÊÔ´×Ô¶¯·ÖÅäÊ±´Ë²ÎÊý²»ÓÃÌî³ä*/
    BYTE    byEnlargeStatus;          /*ÊÇ·ñ´¦ÓÚ·Å´ó×´Ì¬£¬0£º²»·Å´ó£¬1£º·Å´ó*/
    BYTE    byEnlargeSubWindowIndex;//·Å´óµÄ×Ó´°¿ÚºÅ
    BYTE    byScale; /*ÏÔÊ¾Ä£Ê½£¬0---ÕæÊµÏÔÊ¾£¬1---Ëõ·ÅÏÔÊ¾( Õë¶ÔBNC )*/
    BYTE    byUnionType;/*Çø·Ö¹²ÓÃÌå,0-ÊÓÆµ×ÛºÏÆ½Ì¨ÄÚ²¿½âÂëÆ÷ÏÔÊ¾Í¨µÀÅäÖÃ£¬1-ÆäËû½âÂëÆ÷ÏÔÊ¾Í¨µÀÅäÖÃ*/
    NET_DVR_VIDEO_PLATFORM        struDiff;
    DWORD   dwDispChanNum; //ÏÔÊ¾Êä³öºÅ£¬´Ë²ÎÊýÔÚÈ«²¿»ñÈ¡Ê±ÓÐÐ§
    WORD     wLEDWidth;     //LED·Ö±æÂÊ¿í£¬0ÎªÎÞÐ§   
    WORD     wLEDHeight;    //LED·Ö±æÂÊ¸ß£¬0ÎªÎÞÐ§
    BYTE      byEnableVideoEffect;  //ÏÔÊ¾Ð§¹ûÊ¹ÄÜ£¬ 0-²»Ê¹ÄÜ£¬ !0-Ê¹ÄÜ
    BYTE      byRes[3];  //±£Áô×Ö¶Î
    NET_DVR_VIDEOEFFECT struVideoEffect;   //ÏÔÊ¾Ð§¹û
    BYTE    byRes2[60];
}NET_DVR_MATRIX_VOUTCFG,*LPNET_DVR_MATRIX_VOUTCFG;

/*½âÂëÆ÷Éè±¸×´Ì¬*/
typedef struct tagNET_DVR_DISP_CHAN_STATUS_V41
{
    BYTE  byDispStatus;      /*ÏÔÊ¾×´Ì¬£º0£ºÎ´ÏÔÊ¾£¬1£ºÆô¶¯ÏÔÊ¾*/
    BYTE  byBVGA;              /*0-BNC£¬1-VGA£¬ 2-HDMI£¬3-DVI£¬4-SDI 0xff-ÎÞÐ§*/
    BYTE  byVideoFormat;     /*ÊÓÆµÖÆÊ½£¬1:NTSC,2:PAL,0-NON*/
    BYTE  byWindowMode;       /*»­ÃæÄ£Ê½*/
    BYTE  byJoinDecChan[MAX_WINDOWS_V41];   /*¸÷¸ö×Ó»­Ãæ¹ØÁªµÄ½âÂëÍ¨µÀ*/
    BYTE  byFpsDisp[MAX_WINDOWS_V41];        /*Ã¿¸ö×Ó»­ÃæµÄÏÔÊ¾Ö¡ÂÊ*/
    BYTE  byScreenMode;        /*ÆÁÄ»Ä£Ê½0-ÆÕÍ¨ 1-´óÆÁ*/
    BYTE  byRes1[3];
    DWORD  dwDispChan; /*»ñÈ¡È«²¿ÏÔÊ¾Í¨µÀ×´Ì¬Ê±ÓÐÐ§£¬ÉèÖÃÊ±¿ÉÌî0*/
    BYTE  byRes
}NET_DVR_DISP_CHAN_STATUS_V41, *LPNET_DVR_DISP_CHAN_STATUS_V41;

/*½âÂëÆ÷Éè±¸×´Ì¬*/
typedef struct tagNET_DVR_DECODER_WORK_STATUS_V41
{
    DWORD dwSize;
    NET_DVR_MATRIX_CHAN_STATUS struDecChanStatus[32];     /*½âÂëÍ¨µÀ×´Ì¬*/
    /*ÏÔÊ¾Í¨µÀ×´Ì¬*/
    NET_DVR_DISP_CHAN_STATUS_V41   struDispChanStatus[MAX_DISPNUM_V41/*32*/];     
    BYTE byAlarmInStatus[32];         /*±¨¾¯ÊäÈë×´Ì¬*/
    BYTE byAlarmOutStatus[32];       /*±¨¾¯Êä³ö×´Ì¬*/
    BYTE byAudioInChanStatus;          /*ÓïÒô¶Ô½²×´Ì¬*/
    BYTE byRes[127];
}NET_DVR_DECODER_WORK_STATUS_V41,*LPNET_DVR_DECODER_WORK_STATUS_V41;
/*******************************ÎÄ¼þ»Ø·Å-Ô¶³Ì»Ø·ÅÉèÖÃ*******************************/
typedef struct tagNET_DVR_MATRIX_DEC_REMOTE_PLAY_V41
{
    DWORD    dwSize;
    NET_DVR_IPADDR    struIP;        /* DVR IPµØÖ· */    
    WORD    wDVRPort;            /* ¶Ë¿ÚºÅ */    
    BYTE    byChannel;            /* Í¨µÀºÅ */
    BYTE     byReserve;
    BYTE    sUserName[NAME_LEN];        /* ÓÃ»§Ãû */
    BYTE    sPassword[PASSWD_LEN];        /* ÃÜÂë */
    DWORD    dwPlayMode;       /* 0£­°´ÎÄ¼þ 1£­°´Ê±¼ä*/            
    NET_DVR_TIME StartTime;
    NET_DVR_TIME StopTime;
    char    sFileName[128];
    BYTE    byRes[64];        /*±£Áô*/
}NET_DVR_MATRIX_DEC_REMOTE_PLAY_V41, *LPNET_DVR_MATRIX_DEC_REMOTE_PLAY_V41;


#define  MAX_BIGSCREENNUM_SCENE 100
#define  MAX_LAYERNUMS    32

//ÏÔÊ¾Í¨µÀÅäÖÃ½á¹¹
typedef struct tagNET_DVR_RECTCFG_SCENE
{
    WORD wXCoordinate; /*¾ØÐÎ×óÉÏ½ÇÆðÊ¼µãX×ø±ê*/
    WORD wYCoordinate; /*¾ØÐÎ×óÉÏ½ÇY×ø±ê*/
    WORD wWidth;       /*¾ØÐÎ¿í¶È*/
    WORD wHeight;      /*¾ØÐÎ¸ß¶È*/
}NET_DVR_RECTCFG_SCENE, *LPNET_DVR_RECTCFGSCENE;

typedef struct tagNET_DVR_SCENEDISPCFG
{       
    BYTE    byEnable;//ÊÇ·ñÆôÓÃ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE    bySoltNum;//²ÛÎ»ºÅ
    BYTE    byRes1[2]; 
    BYTE    byDispChanNum; 
    BYTE    byAudio;                /*ÒôÆµÊÇ·ñ¿ªÆô,0-·ñ£¬1-ÊÇ*/
    BYTE    byAudioWindowIdx;      /*ÒôÆµ¿ªÆô×Ó´°¿Ú*/
    BYTE    byVedioFormat;          /*1:NTSC,2:PAL£¬0-NULL*/
    BYTE    byWindowMode;            /*»­ÃæÄ£Ê½£¬´ÓÄÜÁ¦¼¯»ñÈ¡*/   
    BYTE    byEnlargeStatus;         /*ÊÇ·ñ´¦ÓÚ·Å´ó×´Ì¬£¬0£º²»·Å´ó£¬1£º·Å´ó*/
    BYTE    byEnlargeSubWindowIndex;//·Å´óµÄ×Ó´°¿ÚºÅ    
    BYTE    byScale; /*ÏÔÊ¾Ä£Ê½£¬0-ÕæÊµÏÔÊ¾£¬1-Ëõ·ÅÏÔÊ¾( Õë¶ÔBNC )*/
    DWORD   dwResolution;//·Ö±æÂÊ
    BYTE    byJoinDecChan[MAX_WINDOWS_V41];/*¸÷¸ö×Ó´°¿Ú¹ØÁªµÄ½âÂëÍ¨µÀ*/
    BYTE    byJoinDecoderId[MAX_WINDOWS_V41];/*²ÛÎ»ºÅ*/
    //ÏÔÊ¾´°¿ÚËù½âÊÓÆµ·Ö±æÂÊ£¬1-D1,2-720P,3-1080P£¬Éè±¸¶ËÐèÒª¸ù¾Ý´Ë//·Ö±æÂÊ½øÐÐ½âÂëÍ¨µÀµÄ·ÖÅä£¬Èç1·ÖÆÁÅäÖÃ³É1080P£¬ÔòÉè±¸»á°Ñ4¸ö½âÂëÍ¨µÀ¶¼·ÖÅä¸ø´Ë½âÂëÍ¨µÀ
    BYTE    byDecResolution[MAX_WINDOWS_V41];
    BYTE    byRow;//´óÆÁËùÔÚµÄÐÐµÄÐòºÅ
    BYTE    byColumn;//´óÆÁËùÔÚµÄÁÐµÄÐòºÅ
    BYTE    byRes2[5];
    NET_DVR_RECTCFG struDisp; //µçÊÓÇ½ÏÔÊ¾Î»ÖÃ
} NET_DVR_SCENEDISPCFG,*LPNET_DVR_SCENEDISPCFG;

typedef struct tagDEV_CHAN_INFO_SCENE
{
    NET_DVR_IPADDR struIP;                /* DVR IPµØÖ· */
    WORD     wDVRPort;                 /* ¶Ë¿ÚºÅ */
    BYTE     byChannel;        /* Í¨µÀºÅ£¬¶ÔÓÚ9000µÈÉè±¸µÄIPC½ÓÈë£¬Í¨µÀºÅ´Ó33¿ªÊ¼ */
    BYTE    byTransProtocol;        /* ´«ÊäÐ­ÒéÀàÐÍ0-TCP£¬1-UDP £¬2-MCAST£¬3-RTP*/
    BYTE    byTransMode;            /* ´«ÊäÂëÁ÷Ä£Ê½ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷*/
    BYTE    byFactoryType;                /*Ç°¶ËÉè±¸³§¼ÒÀàÐÍ*/
    BYTE    byDeviceType;            //Éè±¸ÀàÐÍ£¬1-IPC£¬2- ENCODER
    BYTE    byRes[5];
    BYTE    sUserName[NAME_LEN];    /* ¼à¿ØÖ÷»úµÇÂ½ÕÊºÅ */
    BYTE    sPassword[PASSWD_LEN];    /* ¼à¿ØÖ÷»úÃÜÂë */
} NET_DVR_DEV_CHAN_INFO_SCENE,*LPNET_DVR_DEV_CHAN_INFO_SCENE;

/*Á÷Ã½Ìå·þÎñÆ÷»ù±¾ÅäÖÃ*/
typedef struct tagSTREAM_MEDIA_SERVER_CFG_SCENE
{
    BYTE    byValid;            /*ÊÇ·ñÆôÓÃÁ÷Ã½Ìå·þÎñÆ÷È¡Á÷,0±íÊ¾ÎÞÐ§*/
    BYTE    byRes1[3];
    NET_DVR_IPADDR struDevIP;    /*Á÷Ã½Ìå·þÎñÆ÷µØÖ·*/
    WORD    wDevPort;            /*Á÷Ã½Ìå·þÎñÆ÷¶Ë¿Ú*/
    BYTE    byTransmitType;        /*´«ÊäÐ­ÒéÀàÐÍ0-TCP£¬1-UDP */
    BYTE    byRes2[5];
}NET_DVR_STREAM_MEDIA_SERVER_CFG_SCENE,*LPNET_DVR_STREAM_MEDIA_SERVER_CFG_SCENE;

typedef struct tagPU_STREAM_CFG_SCENE
{
    NET_DVR_STREAM_MEDIA_SERVER_CFG_SCENE    streamMediaServerCfg;
    NET_DVR_DEV_CHAN_INFO_SCENE                struDevChanInfo;
}NET_DVR_PU_STREAM_CFG_SCENE,*LPNET_DVR_PU_STREAM_CFG_SCENE;

typedef struct  tagNET_DVR_CYC_SUR_CHAN_ELE_SCENE
{
    BYTE                            byEnable;    /* ÊÇ·ñÆôÓÃ 0£­·ñ 1£­ÆôÓÃ*/
    BYTE                            byRes[3];
    NET_DVR_STREAM_MEDIA_SERVER_CFG_SCENE    struStreamMediaSvrCfg;    
    NET_DVR_DEV_CHAN_INFO_SCENE            struDecChanInfo;    /*ÂÖÑ²½âÂëÍ¨µÀÐÅÏ¢*/
}NET_DVR_CYC_SUR_CHAN_ELE_SCENE,*LPNET_DVR_CYC_SUR_CHAN_ELE_SCENE;

//ÂÖÑ²½âÂë½á¹¹
typedef struct  tagNET_DVR_MATRIX_LOOP_DECINFO_SCENE
{
    WORD    wPoolTime;        /*ÂÖÑ¯¼ä¸ô*/
    BYTE    byRes1[2];
    NET_DVR_CYC_SUR_CHAN_ELE_SCENE    struChanArray[MAX_CYCLE_CHAN/*16*/];
    BYTE    byRes2[4];
} NET_DVR_MATRIX_LOOP_DECINFO_SCENE,*LPNET_DVR_MATRIX_LOOP_DECINFO_SCENE;

//µ¥¸ö½âÂëÍ¨µÀÅäÖÃ½á¹¹Ìå
typedef struct tagNET_DVR_DECODECHANCFG_SCENE/*struct size : 2064*/
{
    BYTE    byDecodeEnable;//½âÂëÆðÍ£±êÖ¾£¬0-Í£Ö¹£¬1-ÆôÓÃ¶¯Ì¬½âÂë£¬2-ÆôÓÃÂÖÑ²½âÂë
    BYTE    bySlotNum;//²ÛÎ»ºÅ
    BYTE    byDecChan;
    BYTE    byJointAllDecodeChan;        //ÊÇ·ñ¹ØÁªÍòÄÜ½âÂëÍ¨µÀ 0-²»¹ØÁª£¬1-¹ØÁª
    BYTE    byJointSlotNum;            //¹ØÁªµÄ²ÛÎ»ºÅ£¨ÍòÄÜ½âÂë°åµÄ²ÛÎ»ºÅ£©
    BYTE    byJointChanNum;        //¹ØÁªµÄÍ¨µÀºÅ£¨ÍòÄÜ½âÂë°åÍ¨µÀºÅ£©
    BYTE    byRes[2];
    union
    {
        NET_DVR_PU_STREAM_CFG_SCENE struSceneDynamicDecCfg; 
        NET_DVR_MATRIX_LOOP_DECINFO_SCENE struSceneCycDecCfg;
    } struDecCfg;
}NET_DVR_DECODECHANCFG_SCENE,*LPNET_DVR_DECODECHANCFG_SCENE;

typedef struct tagNET_DVR_BIGSCREENCFG_SCENE
{
    BYTE byAllValid; /*ÂþÓÎÊ¹ÄÜ±êÖ¾ */
    BYTE byAssociateBaseMap;//¹ØÁªµÄµ×Í¼ÐòºÅ£¬0´ú±í²»¹ØÁª
    BYTE byEnableSpartan;//´óÆÁ³©ÏÔÊ¹ÄÜ£¬1-¿ª£¬0-¹Ø
    BYTE byRes;
    NET_DVR_WINCFG struWinCfg[MAX_LAYERNUMS];
    NET_DVR_BIGSCREENCFG struBigScreen;
}NET_DVR_BIGSCREENCFG_SCENE, *LPNET_DVR_BIGSCREENCFG_SCENE;

typedef struct tagNET_DVR_MATRIX_SCENECFG
{
    DWORD dwSize;
    BYTE  sSceneName[NAME_LEN];
    BYTE  byBigScreenNums;//´óÆÁµÄ¸öÊý£¬×î´óÖµÍ¨¹ýÄÜÁ¦¼¯»ñÈ¡
    BYTE  byRes1[3];
    WORD  wDecChanNums;//³¡¾°ÖÐ½âÂëÍ¨µÀµÄ¸öÊý
    WORD  wDispChanNums;//³¡¾°ÖÐÏÔÊ¾Í¨µÀµÄ¸öÊý
    BYTE  byRes2[12];
    BYTE  *pBigScreenBuffer;//´óÆÁÅäÖÃ»º³åÇø, byBigScreenNums¡Ásizeof(NET_DVR_BIGSCREENCFG_SCENE)
    BYTE  *pDecChanBuffer;//½âÂëÍ¨µÀÅäÖÃ»º³åÇø, wDecChanNums¡Ásizeof(NET_DVR_DECODECHANCFG_SCENE)
    BYTE  *pDispChanBuffer;//ÏÔÊ¾Í¨µÀÅäÖÃ»º³åÇø, wDispChanNums¡Ásizeof(NET_DVR_SCENEDISPCFG)
}NET_DVR_MATRIX_SCENECFG, *LPNET_DVR_MATRIX_SCENECFG;



typedef struct tagNET_DVR_BIGSCREENASSOCIATECFG
{
    DWORD dwSize;
    BYTE  byEnableBaseMap;//Ê¹ÄÜµ×Í¼ÏÔÊ¾
    BYTE  byAssociateBaseMap;//¹ØÁªµÄµ×Í¼ÐòºÅ£¬0´ú±í²»¹ØÁª
    BYTE  byEnableSpartan;//´óÆÁ³©ÏÔÊ¹ÄÜ£¬1-¿ª£¬0-¹Ø
    BYTE  byRes[21];
} NET_DVR_BIGSCREENASSOCIATECFG, *LPNET_DVR_BIGSCREENASSOCIATECFG;
/*******************************´°¿ÚÉèÖÃ*******************************/
#define MAX_WIN_COUNT  224 //Ö§³ÖµÄ×î´ó¿ª´°Êý

typedef struct tagNET_DVR_SCREEN_WINCFG
{
    DWORD    dwSize;
    BYTE    byVaild;
    BYTE    byInputType;        //¼ûCAM_MDOE
    WORD    wInputIdx;            /*ÊäÈëÔ´Ë÷Òý*/
    DWORD    dwLayerIdx;            /*Í¼²ã£¬0Îª×îµ×²ã*/
    NET_DVR_RECTCFG  struWin;    //Ä¿µÄ´°¿Ú(Ïà¶ÔÏÔÊ¾Ç½)
    BYTE    byWndIndex;            //´°¿ÚºÅ
    BYTE    byCBD;                //0-ÎÞ£¬1-´ø±³¾°£¬2-²»´ø±³¾°
    BYTE    bySubWnd;            //0²»ÊÇ£¬1ÊÇ
    BYTE    byRes1;
    DWORD   dwDeviceIndex;//Éè±¸ÐòºÅ
    BYTE    byRes2[16];
}NET_DVR_SCREEN_WINCFG, *LPNET_DVR_SCREEN_WINCFG;

typedef struct tagNET_DVR_WINLIST
{
    DWORD    dwSize;
    WORD    wScreenSeq;    //Éè±¸ÐòºÅ
    BYTE    byRes[10];
    DWORD    dwWinNum;    //Éè±¸·µ»ØµÄ´°¿ÚÊýÁ¿
    BYTE    *pBuffer;    //´°¿ÚÐÅÏ¢»º³åÇø£¬×î´óÎª224*sizeof(NET_DVR_WINCFG)
    DWORD   dwBufLen;    //Ëù·ÖÅäÖ¸Õë³¤¶È
}NET_DVR_WINLIST,*LPNET_DVR_WINLIST;

#define MAX_LAYOUT_COUNT 16        //×î´ó²¼¾ÖÊý
typedef struct tagNET_DVR_LAYOUTCFG
{
    DWORD dwSize;
    BYTE  byValid;                                //²¼¾ÖÊÇ·ñÓÐÐ§
    BYTE  byRes1[3];
    BYTE  byLayoutName[NAME_LEN/*32*/];            //²¼¾ÖÃû³Æ            
    NET_DVR_SCREEN_WINCFG struWinCfg[MAX_WIN_COUNT/*224*/];    //²¼¾ÖÄÚ´°¿Ú²ÎÊý
    BYTE  byRes2[16];
}NET_DVR_LAYOUTCFG, *LPNET_DVR_LAYOUTCFG;

typedef struct tagNET_DVR_LAYOUT_LIST
{
    DWORD dwSize;
    NET_DVR_LAYOUTCFG struLayoutInfo[MAX_LAYOUT_COUNT/*16*/];   //ËùÓÐ²¼¾Ö
    BYTE byRes[4];
}NET_DVR_LAYOUT_LIST, *LPNET_DVR_LAYOUT_LIST;

#define MAX_CAM_COUNT  224

typedef enum tagNET_DVR_CAM_MODE
{
    NET_DVR_UNKNOW  = 0,//ÎÞÐ§
        NET_DVR_CAM_BNC,
        NET_DVR_CAM_VGA,
        NET_DVR_CAM_DVI,
        NET_DVR_CAM_HDMI,
        NET_DVR_CAM_IP,
        NET_DVR_CAM_RGB,
        NET_DVR_CAM_DECODER,
        NET_DVR_CAM_MATRIX,
        NET_DVR_CAM_YPBPR,
        NET_DVR_CAM_USB,
        NET_DVR_CAM_SDI,
        NET_DVR_CAM_HDI,
        NET_DVR_CAM_DP,
        NET_DVR_CAM_HDTVI,
        NET_DVR_CAM_JOINT,   //Æ´½ÓÐÅºÅÔ´
        NET_DVR_CAM_HDBASET,
        NET_DVR_CAM_DVIT,
        NET_DVR_CAM_FUSION, //¶àIPCÆ´½Ó
        NET_DVR_CAM_VSCREEN //ÐéÄâÆÁ
}NET_DVR_CAM_MODE;

typedef struct tagNET_DVR_INPUTSTREAMCFG
{
    DWORD    dwSize ;
    BYTE    byValid;
    BYTE    byCamMode;                        //ÐÅºÅÊäÈëÔ´ÀàÐÍ£¬¼ûNET_DVR_CAM_MODE
    WORD    wInputNo;                        //ÐÅºÅÔ´ÐòºÅ0-224
    BYTE    sCamName[NAME_LEN] ;            //ÐÅºÅÊäÈëÔ´Ãû³Æ
    NET_DVR_VIDEOEFFECT struVideoEffect;    //ÊÓÆµ²ÎÊý
    NET_DVR_PU_STREAM_CFG    struPuStream;    //ipÊäÈëÊ±Ê¹ÓÃ
    WORD    wBoardNum ;                        //ÐÅºÅÔ´ËùÔÚµÄ°å¿¨ºÅ
    WORD    wInputIdxOnBoard;                //ÐÅºÅÔ´ÔÚ°å¿¨ÉÏµÄÎ»ÖÃ
    DWORD   dwResolution;//·Ö±æÂÊ
    BYTE    byVideoFormat;//ÊÓÆµÖÆÊ½£¬¼ûVIDEO_STANDARD
    BYTE    byStatus;    //ÐÅºÅÔ´×´Ì¬£¬0-×Ö¶ÎÎÞÐ§ 1-ÓÐÐÅºÅ 2-ÎÞÐÅºÅ 3-Òì³£ 
    BYTE    sGroupName[NAME_LEN/*32*/];    //ÍøÂçÐÅºÅÔ´·Ö×é ×éÃû
    BYTE    byJointMatrix;            //  ¹ØÁª¾ØÕó £¬0-²»¹ØÁª  1-¹ØÁª
    BYTE    byRes;  
}NET_DVR_INPUTSTREAMCFG, *LPNET_DVR_INPUTSTREAMCFG;

typedef struct tagNET_DVR_INPUTSTREAM_LIST
{
    DWORD dwSize;
    NET_DVR_INPUTSTREAMCFG struInputStreamInfo[MAX_CAM_COUNT]; //ËùÓÐÐÅºÅÔ´
    BYTE byRes[4];
}NET_DVR_INPUTSTREAM_LIST, *LPNET_DVR_INPUTSTREAM_LIST;

/*******************************Êä³ö²ÎÊýÅäÖÃ*******************************/
/*Êä³öÍ¨µÀ¹ÜÀí*/
typedef struct tagNET_DVR_OUTPUTPARAM
{
    DWORD  dwSize;
    BYTE   byMonMode;        /*Êä³öÁ¬½ÓÄ£Ê½,1-BNC,2-VGA,3-DVI,4-HDMI*/
    BYTE   byRes1[3];
    DWORD  dwResolution;    /*·Ö±æÂÊ£¬¸ù¾ÝÄÜÁ¦¼¯»ñÈ¡ËùÖ§³ÖµÄ½øÐÐÉèÖÃ*/
    NET_DVR_VIDEOEFFECT  struVideoEffect;    /*Êä³öÍ¨µÀÊÓÆµ²ÎÊýÅäÖÃ*/
    BYTE    byRes2[32];
}NET_DVR_OUTPUTPARAM, *LPNET_DVR_OUTPUTPARAM;

typedef struct tagNET_DVR_OUTPUTCFG
{
    DWORD    dwSize;
    BYTE    byScreenLayX;                        //´óÆÁ²¼¾Ö-ºá×ø±ê
    BYTE    byScreenLayY;                        //´óÆÁ²¼¾Ö-×Ý×ø±ê
    WORD    wOutputChanNum;                    //Êä³öÍ¨µÀ¸öÊý£¬0±íÊ¾Éè±¸Ö§³ÖµÄ×î´óÊä³öÍ¨µÀ¸öÊý£¬×î´ó¸öÊý´ÓÄÜÁ¦¼¯»ñÈ¡£¬ÆäËûÖµ±íÊ¾Êµ¼ÊÊä³öÍ¨µÀ¸öÊý
    BYTE    byRes1[4];
    NET_DVR_OUTPUTPARAM  struOutputParam;    /*Êä³öÍ¨µÀÊÓÆµ²ÎÊýÅäÖÃ*/
    BYTE    sWallName[16];                    //µçÊÓÇ½Ãû³Æ
    BYTE    byRes2[8];
}NET_DVR_OUTPUTCFG, *LPNET_DVR_OUTPUTCFG;

/*******************************ÄÜÁ¦¼¯*******************************/
#define SCREEN_PROTOCOL_NUM      20    //Ö§³ÖµÄ×î´ó´óÆÁ¿ØÖÆÆ÷Ð­ÒéÊý
//¶àÆÁ·þÎñÆ÷ÄÜÁ¦¼¯
typedef struct tagNET_DVR_SCREENSERVER_ABILITY
{
    DWORD dwSize;               /*½á¹¹³¤¶È*/
    BYTE byIsSupportScreenNum; /*ËùÖ§³Ö´óÆÁ¿ØÖÆÆ÷µÄÊýÄ¿*/
    BYTE bySerialNums;            //´®¿Ú¸öÊý
    BYTE byMaxInputNums;
    BYTE byMaxLayoutNums;
    BYTE byMaxWinNums;
    BYTE byRes1[19];
    BYTE byMaxScreenLayX;//´óÆÁ²¼¾Ö-×î´óºá×ø±ê´óÆÁÊý
    BYTE byMaxScreenLayY;//´óÆÁ²¼¾Ö-×î´ó×Ý×ø±ê´óÆÁÊý
    WORD wMatrixProtoNum; /*ÓÐÐ§µÄ´óÆÁÐ­ÒéÊýÄ¿*/
    NET_DVR_PROTO_TYPE struScreenProto[SCREEN_PROTOCOL_NUM];/*×î´óÐ­ÒéÁÐ±í*/
    BYTE byRes2[24];
}NET_DVR_SCREENSERVER_ABILITY, *LPNET_DVR_SCREENSERVER_ABILITY;

//¶àÆÁ¿ØÖÆÆ÷ÄÜÁ¦¼¯
typedef struct tagNET_DVR_SCREENCONTROL_ABILITY
{
    DWORD dwSize;           /*½á¹¹³¤¶È*/
    BYTE byLayoutNum;         /* ²¼¾Ö¸öÊý*/
    BYTE byWinNum;             /*ÆÁÄ»´°¿Ú¸öÊý*/
    BYTE byOsdNum;          /*OSD¸öÊý*/
    BYTE byLogoNum;         /*Logo¸öÊý*/
    BYTE byInputStreamNum;  //ÊäÈëÔ´¸öÊý ---Éè±¸Ö§³Ö×î´óÊäÈëÍ¨µÀ¸öÊý£¨°üÀ¨±¾µØÊäÈëÔ´ºÍÍøÂçÊäÈëÔ´£©
    BYTE byOutputChanNum;    //Êä³öÍ¨µÀ¸öÊý---Éè±¸Ö§³Ö×î´óÊä³öÍ¨µÀ¸öÊý
    BYTE byCamGroupNum;        /*·Ö×é¸öÊý*/
    BYTE byPlanNum;            /*Ô¤°¸¸öÊý*/
    BYTE byRes1[5];
    BYTE byIsSupportPlayBack;  /*ÊÇ·ñÖ§³Ö»Ø·Å*/    
    BYTE byMatrixInputNum;  //Ö§³ÖÊäÈë¾ØÕó×î´ó¸öÊý
    BYTE byMatrixOutputNum; //Ö§³ÖÊä³ö¾ØÕó×î´ó¸öÊý
    NET_DVR_DISPINFO struVgaInfo;//VGAÊä³öÐÅÏ¢
    NET_DVR_DISPINFO struBncInfo;//BNCÊä³öÐÅÏ¢
    NET_DVR_DISPINFO struHdmiInfo;//HDMIÊä³öÐÅÏ¢
    NET_DVR_DISPINFO struDviInfo;//DVIÊä³öÐÅÏ¢
    BYTE byMaxUserNums;//Ö§³ÖÓÃ»§Êý
    BYTE byPicSpan;        //µ×Í¼¿ç¶È£¬Ò»ÕÅµ×Í¼×î¶à¿É¸²¸ÇµÄÆÁÄ»Êý
    WORD wDVCSDevNum;    //·Ö²¼Ê½´óÆÁ¿ØÖÆÆ÷×î´óÉè±¸Êý
    WORD wNetSignalNum;    //×î´óÍøÂçÊäÈëÔ´¸öÊý
    WORD wBaseCoordinateX;//»ù×¼×ø±ê
    WORD wBaseCoordinateY; 
    BYTE byExternalMatrixNum;    //×î´óÍâ½Ó¾ØÕó¸öÊý
    BYTE byRes2[49];
}NET_DVR_SCREENCONTROL_ABILITY, *LPNET_DVR_SCREENCONTROL_ABILITY;

/*******************************ÊäÈëÐÅºÅ×´Ì¬*******************************/
typedef struct tagNET_DVR_ANALOGINPUTSTATUS
{
    DWORD    dwLostFrame;        /*ÊÓÆµÊäÈë¶ªÖ¡Êý*/
    BYTE    byHaveSignal;        /*ÊÇ·ñÓÐÊÓÆµÐÅºÅÊäÈë*/
    BYTE    byVideoFormat;        /*ÊÓÆµÖÆÊ½£¬1£ºNTSC,2£ºPAL,0£ºÎÞ*/
    BYTE    byRes[46];
} NET_DVR_ANALOGINPUTSTATUS, *LPNET_DVR_ANALOGINPUTSTATUS;

typedef union tagNET_DVR_INPUTSTATUS_UNION
{
    NET_DVR_MATRIX_CHAN_STATUS struIpInputStatus;
    NET_DVR_ANALOGINPUTSTATUS struAnalogInputStatus;
} NET_DVR_INPUTSTATUS_UNION, *LPNET_DVR_INPUTSTATUS_UNION;

typedef struct tagNET_DVR_INPUTSTATUS
{
    WORD    wInputNo;        /*ÐÅºÅÔ´ÐòºÅ*/
    BYTE    byInputType;    //¼ûNET_DVR_CAM_MODE
    BYTE    byRes1[9];
    NET_DVR_INPUTSTATUS_UNION struStatusUnion;
    BYTE    byRes2[16];
} NET_DVR_INPUTSTATUS, *LPNET_DVR_INPUTSTATUS;

typedef struct tagNET_DVR_SCREENINPUTSTATUS
{
    DWORD    dwSize;
    BYTE    byRes[12];
    DWORD    dwNums;        //Éè±¸·µ»ØµÄÊäÈëÔ´×´Ì¬µÄÊýÁ¿
    BYTE    *pBuffer;    //»º³åÇø
    DWORD   dwBufLen;    //Ëù·ÖÅäÖ¸Õë³¤¶È£¬ÊäÈë²ÎÊý
}NET_DVR_SCREENINPUTSTATUS,*LPNET_DVR_SCREENINPUTSTATUS;

typedef struct tagNET_DVR_SCREENALARMCFG
{
    DWORD    dwSize;
    BYTE    byAlarmType;    //±¨¾¯ÀàÐÍ£¬1-×Ó°å°Î³ö£¬2-×Ó°å²åÈë£¬3-×ÓÏµÍ³×´Ì¬Òì³££¬4-×ÓÏµÍ³»Ö¸´»Ö¸´ 5-ÊäÈëÔ´Òì³£   6-ÎÂ¶È±¨¾¯ 7-FPGA°æ±¾²»Æ¥Åä 8-Ô¤°¸¿ªÊ¼ 9-Ô¤°¸½áÊø 10-½âÂë°å¶ÏÍø 11-½âÂë°åIPµØÖ·³åÍ»£¬12-·çÉÈÒì³£
    BYTE    byBoardType;    // 1-ÊäÈë°å 2-Êä³ö°å £¬3-Ö÷°å£¬4-±³°å£¬±¨¾¯ÀàÐÍÎª1£¬2£¬3£¬6µÄÊ±ºòÊ¹ÓÃ 
    BYTE    bySubException;    //ÊäÈëÒì³£Ê±¾ßÌå×ÓÒì³£ 1- ·Ö±æÂÊÕý³£¸Ä±ä 2-ÊäÈë¶Ë¿ÚÀàÐÍ¸Ä±ä3-·Ö±æÂÊ´íÎó4-·Ö±æÂÊ¸Ä±äµ¼ÖÂ½âÂë×ÊÔ´²»×ã£¬¹Ø±Õ¸ÃÊäÈëÔ´¶ÔÓ¦´°¿Ú¡£5-·Ö±æÂÊ¸Ä±ä£¬µ¼ÖÂÒÑ¿ª´°µÄËõ·Å±ÈÀý²»ÔÚ1/8µ½8±¶·¶Î§¡£6-·Ö±æÂÊ»Ö¸´Õý³£,7-·Ö±æÂÊ¸Ä±äµ¼ÖÂÊä³ö°åÊý¾ÝÁ¿³¬ÏÞ,Éè±¸¹Ø±Õ´°¿Ú 
    BYTE    byRes1;
    WORD    wStartInputNum; // Òì³£ÊäÈëÔ´£¨Òì³£Æðµã£© 
    WORD    wEndInputNum;    // Òì³£ÊäÈëÔ´£¨Òì³£ÖÕµã£© 
    BYTE    byRes2[16];       
}NET_DVR_SCREENALARMCFG, *LPNET_DVR_SCREENALARMCFG;

typedef struct tagNET_DVR_MATRIX_CFG
{
    BYTE  byValid;                //ÅÐ¶ÏÊÇ·ñÊÇÄ£Äâ¾ØÕó£¨ÊÇ·ñÓÐÐ§£©
    BYTE  byCommandProtocol;    //Ä£Äâ¾ØÕóµÄÖ¸Áî£¨4ÖÖ£©
    BYTE  byScreenType;            //±£Áô    
    BYTE  byRes1;
    BYTE  byScreenToMatrix[32];    //Ä£Äâ¾ØÕóµÄÊä³öÓëÆÁÄ»µÄ¶ÔÓ¦¹ØÏµ
    BYTE  byRes2[4];
}NET_DVR_MATRIX_CFG, *LPNET_DVR_MATRIX_CFG;

typedef struct tagNET_DVR_DIGITALSCREEN
{
    NET_DVR_IPADDR  struAddress;/*Éè±¸ÎªÊý×ÖÉè±¸Ê±µÄIPÐÅÏ¢*/
    WORD            wPort;        //Í¨µÀºÅ
    BYTE            byRes[26];  //±£Áô
}NET_DVR_DIGITALSCREEN, *LPNET_DVR_DIGITALSCREEN;
typedef struct tagNET_DVR_ANALOGSCREEN
{
    BYTE    byDevSerPortNum;   /*Á¬½ÓÉè±¸µÄ´®¿ÚºÅ*/
    BYTE    byScreenSerPort;  /*Á¬½Ó´óÆÁµÄ´®¿ÚºÅ*/
    BYTE    byRes[130];   
    NET_DVR_MATRIX_CFG struMatrixCfg;
}NET_DVR_ANALOGSCREEN, *LPNET_DVR_ANALOGSCREEN;

typedef union tagNET_DVR_SCREEN_UNION
{
    NET_DVR_DIGITALSCREEN struDigitalScreen;
    NET_DVR_ANALOGSCREEN struAnalogScreen;
}NET_DVR_SCREEN_UNION, *LPNET_DVR_SCREEN_UNION;
typedef struct tagNET_DVR_SCREEN_SCREENINFO
{
    DWORD dwSize;
    BYTE byValid;                //ÊÇ·ñÓÐÐ§
    BYTE nLinkMode;                //Á¬½Ó·½Ê½£¬0-´®¿Ú£¬1-Íø¿Ú
    BYTE byDeviceType;            //Éè±¸ÐÍºÅ£¬ÄÜÁ¦¼¯»ñÈ¡
    BYTE byScreenLayX;            //´óÆÁ²¼¾Ö-ºá×ø±ê
    BYTE byScreenLayY;            //´óÆÁ²¼¾Ö-×Ý×ø±ê
    BYTE byRes1[3];
    BYTE sUserName[NAME_LEN];    /*µÇÂ¼ÓÃ»§Ãû*/
    BYTE sPassword[PASSWD_LEN]; /*µÇÂ¼ÃÜÂë*/   
    BYTE sDevName[NAME_LEN];    /*Éè±¸Ãû³Æ*/
    NET_DVR_SCREEN_UNION struScreenUnion;
    BYTE byInputNum;            // ÊäÈëÔ´¸öÊý
    BYTE byOutputNum;            // Êä³öÔ´¸öÊý
    BYTE byCBDNum;                //CBD¸öÊý
    BYTE byRes2[29];
} NET_DVR_SCREEN_SCREENINFO, *LPNET_DVR_SCREEN_SCREENINFO;

/*******************************µ×Í¼ÉÏ´«*******************************/
typedef struct tagNET_DVR_BASEMAP_CFG
{    
    BYTE byScreenIndex;         //ÆÁÄ»µÄÐòºÅ
    BYTE byMapNum;                /*±»·Ö¸î³ÉÁË¶àÉÙ¿é */
    BYTE res[2];
    WORD wSourWidth;            /* Ô­Í¼Æ¬µÄ¿í¶È */
    WORD wSourHeight;            /* Ô­Í¼Æ¬µÄ¸ß¶È */
}NET_DVR_BASEMAP_CFG, LPNET_DVR_BASEMAP_CFG;


typedef struct tagNET_DVR_PICCFG
{
    DWORD    dwSize;        //´óÐ¡
    BYTE    byUseType;    //1-µ×Í¼£¬2-GIFÍ¼Æ¬£¬3-CADÍ¼Æ¬ 4-Êä³ö¿ÚÍ¼Æ¬
    BYTE    bySequence;//ÐòºÅ    
    BYTE    byRes[2];
    NET_DVR_BASEMAP_CFG    struBasemapCfg;
    BYTE    sPicName[NAME_LEN];//Í¼Æ¬Ãû³Æ
    DWORD   dwVideoWall;       //Ç½ºÅ 1×Ö½ÚÇ½ºÅ+3×Ö½Ú±£Áô
    BYTE    byRes2[28];
}NET_DVR_PICTURECFG, *LPNET_DVR_PICTURECFG;

/*******************************OSD*******************************/
#define MAX_OSDCHAR_NUM 256
typedef struct tagNET_DVR_OSDCFG
{
    DWORD   dwSize;
    BYTE    byValid;    /*ÊÇ·ñÓÐÐ§ 0ÎÞÐ§ 1ÓÐÐ§*/
    BYTE    byDispMode;  //ÏÔÊ¾Ä£Ê½£¬1-Í¸Ã÷£¬2-°ëÍ¸Ã÷£¬3-¸²¸ÇÈýÖÖÄ£Ê½
    BYTE    byFontColorY; /*×ÖÌåÑÕÉ«Y,0-255*/
    BYTE    byFontColorU; /*×ÖÌåÑÕÉ«U,0-255*/
    BYTE    byFontColorV; /*×ÖÌåÑÕÉ«V,0-255*/
    BYTE    byBackColorY; /*±³¾°ÑÕÉ«Y,0-255*/
    BYTE    byBackColorU; /*±³¾°ÑÕÉ«U,0-255*/
    BYTE    byBackColorV; /*±³¾°ÑÕÉ«V,0-255*/
    WORD    wXCoordinate;   /*OSDÔÚÆÁÄ»×óÉÏ½ÇÎ»ÖÃx*/
    WORD    wYCoordinate;   /*OSDÔÚÆÁÄ»×óÉÏ½ÇÎ»ÖÃy*/
    WORD    wWidth;       /*OSD¿í¶È*/
    WORD    wHeight;      /*OSD¸ß¶È*/
    DWORD   dwCharCnt;     /*×Ö·ûµÄ¸öÊý*/
    WORD    wOSDChar[MAX_OSDCHAR_NUM];       /*OSD×Ö·ûÄÚÈÝ*/
    BYTE    byRes[32];
}NET_DVR_OSDCFG, *LPNET_DVR_OSDCFG;


/*******************************»ñÈ¡´®¿ÚÐÅÏ¢*******************************/
typedef struct tagNET_DVR_SERIAL_CONTROL
{ 
    DWORD    dwSize ;
    BYTE    bySerialNum;        // ´®¿Ú¸öÊý
    BYTE    byRes1[3];
    BYTE    bySerial[32];
    BYTE    byRes2[32];
}NET_DVR_SERIAL_CONTROL, *LPNET_DVR_SERIAL_CONTROL;

/*******************************ÆÁÄ»¿ØÖÆ*******************************/
//ÆÁÄ»ÊäÈëÔ´¿ØÖÆ
typedef enum tagINPUT_INTERFACE_TYPE
{
    INTERFACE_VGA = 0,
        INTERFACE_SVIDEO, // 2046NL²»Ö§³Ö£¬2046NHÖ§³Ö
        INTERFACE_YPBPR,
        INTERFACE_DVI ,
        INTERFACE_BNC , 
        INTERFACE_DVI_LOOP,//(»·Í¨) 2046NH²»Ö§³Ö£¬2046NLÖ§³Ö
        INTERFACE_BNC_LOOP, //(»·Í¨) 2046NH²»Ö§³Ö£¬2046NL.Ö§³Ö
        INTERFACE_HDMI,
        INTERFACE_IP,
        INTERFACE_USB,
        INTERFACE_SDI,
        INTERFACE_DP,
        INTERFACE_HDBASET
}INPUT_INTERFACE_TYPE;
typedef struct tagNET_DVR_INPUT_INTERFACE_CTRL
{
    BYTE    byInputSourceType;    //¼ûINPUT_INTERFACE_TYPE
    BYTE    byRes[15];
}NET_DVR_INPUT_INTERFACE_CTRL, *LPNET_DVR_INPUT_INTERFACE_CTRL;
//ÏÔÊ¾µ¥ÔªÑÕÉ«¿ØÖÆ
typedef struct tagNET_DVR_DISPLAY_COLOR_CTRL
{
    BYTE    byColorType;        //1-ÁÁ¶È 2-¶Ô±È¶È 3-±¥ºÍ¶È 4-ÇåÎú¶È
    char    byScale;            //-1 ¡¢0¡¢+1Èý¸öÖµ
    BYTE    byRes[14];
}NET_DVR_DISPLAY_COLOR_CTRL, *LPNET_DVR_DISPLAY_COLOR_CTRL;
//ÏÔÊ¾µ¥ÔªÎ»ÖÃ¿ØÖÆ
typedef struct tagNET_DVR_DISPLAY_POSITION_CTRL
{
    BYTE    byPositionType;    //1-Ë®Æ½Î»ÖÃ 2-´¹Ö±Î»ÖÃ£¬
    char    byScale;            //-1 ¡¢0¡¢+1Èý¸öÖµ
    BYTE    byRes[14];
}NET_DVR_DISPLAY_POSITION_CTRL, *LPNET_DVR_DISPLAY_POSITION_CTRL;


/*******************************ÆÁÄ»¿ØÖÆV41*******************************/
typedef struct tagNET_DVR_RECTCFG_EX 
{
    DWORD dwXCoordinate; /*¾ØÐÎ×óÉÏ½ÇÆðÊ¼µãX×ø±ê*/
    DWORD dwYCoordinate; /*¾ØÐÎ×óÉÏ½ÇY×ø±ê*/
    DWORD dwWidth;       /*¾ØÐÎ¿í¶È*/
    DWORD dwHeight;      /*¾ØÐÎ¸ß¶È*/
    BYTE  byRes[4];
}NET_DVR_RECTCFG_EX, *LPNET_DVR_RECTCFG_EX;

/*******************************Ô¤°¸¹ÜÀí*******************************/
#define        MAX_PLAN_ACTION_NUM     32     //Ô¤°¸¶¯×÷¸öÊý
#define        DAYS_A_WEEK                7    //Ò»ÖÜ7Ìì
#define        MAX_PLAN_COUNT            16    //Ô¤°¸¸öÊý


typedef enum
{
    NET_DVR_SWITCH_LAYOUT = 1,         // ²¼¾ÖÇÐ»» Ä¬ÈÏ
        NET_DVR_SCREEN_POWER_OFF,          // ¹Ø±Õ´óÆÁÄ»ÏÔÊ¾
        NET_DVR_SCREEN_POWER_ON,           // ´ò¿ª´óÆÁÄ»ÏÔÊ¾
        NET_DVR_SWITCH_BASEMAP            //µ×Í¼ÇÐ»»
}NET_DVR_PLAN_OPERATE_TYPE;

/*Ô¤°¸ÏîÐÅÏ¢*/
typedef struct  tagNET_DVR_PLAN_INFO
{
    BYTE  	byValid;      	// ¸ÃÏîÊÇ·ñÓÐÐ§
    BYTE  	byType;       	// ¼û¶¨ÒåNET_DVR_PLAN_OPERATE_TYPE
    WORD  	wLayoutNo;  	// ²¼¾ÖºÅ
    BYTE	byScreenStyle;    //ÆÁÄ»ÐÍºÅ£¬¿ª¹Ø»úËùÓÃ£¬1ÊÇµÍÁÁ£¬2ÊÇ¸ßÁÁ
    BYTE  byBaseMapType;  //µ×Í¼ÀàÐÍ£¬1-Í¼Æ¬µ×Í¼£¬2-³¬¸ßÇåÊäÈëµ×Í¼£¬µ×Í¼ÇÐ»»Ê±ÓÐÐ§
    BYTE  byRes1[2];
    DWORD  	dwDelayTime;  	// Ò»¸öÏîµÄÔËÐÐÊ±¼ä, µ¥Î»Ãë
    DWORD   dwSerialNo;		//´®¿ÚºÅ£¬ÆÁÄ»¿ØÖÆÊ±Ê¹ÓÃ
    DWORD  dwBaseMapWndNo; //µ×Í¼´°¿ÚºÅ£¬µ×Í¼ÇÐ»»Ê±ÓÐÐ§
    DWORD  dwBaseMapNo;   //µ×Í¼ºÅ£¬µ×Í¼ÇÐ»»Ê±ÓÐÐ§£»µ×Í¼ÀàÐÍÎª1Ê±£¬´Ë²ÎÊýÎªÍ¼Æ¬ÐòºÅ£¬µ×Í¼ÀàÐÍÎª2Ê±´Ë²ÎÊýÎª³¬¸ßÇåÊäÈë×ÓÏµÍ³ÊäÈëºÅ£¨1×Ö½ÚÉè±¸ºÅ+1×Ö½Ú×Ó°åºÅ+2×Ö½ÚÏÔÊ¾ÊäÈëÐòºÅ£©
    BYTE	byRes2[20];
} NET_DVR_PLAN_INFO, *LPNET_DVR_PLAN_INFO;

typedef struct tagNET_DVR_CYCLE_TIME
{
    BYTE    byValid; 
    BYTE    byRes[3];
    NET_DVR_TIME_EX struTime;
}NET_DVR_CYCLE_TIME, *LPNET_DVR_CYCLE_TIME;
/*Ô¤°¸¹ÜÀí*/
typedef struct tagNET_DVR_PLAN_CFG
{
    DWORD     dwSize;
    BYTE      byValid;          // ¸ÃÔ¤°¸ÊÇ·ñÓÐÐ§
    BYTE      byWorkMode;      // Ô¤°¸¹¤×÷Ä£Ê½ 1±íÊ¾ÊÖ¶¯£¬2×Ô¶¯£¬3Ô¤°¸Ñ­»·
    BYTE    byWallNo;        //µçÊÓÇ½ºÅ£¬´Ó1¿ªÊ¼
    BYTE    byPlanNo;    //Ô¤°¸ºÅ£¬»ñÈ¡Ô¤°¸ÁÐ±íÊ±ÓÐÐ§£¬0-ÎÞÐ§»ò²»Ö§³Ö
    BYTE      byPlanName[NAME_LEN/*32*/]; //Ô¤°¸Ãû³Æ
    NET_DVR_TIME_EX struTime; // ¹¤×÷Ä£Ê½Îª×Ô¶¯Ê±Ê¹ÓÃ
    NET_DVR_CYCLE_TIME struTimeCycle[DAYS_A_WEEK/*7*/]; /*Ñ­»·Ê±¼ä£¬ÖÜÆÚÎªÒ»¸öÐÇÆÚ£¬Äê¡¢ÔÂ¡¢ÈÕÈý¸ö²ÎÊý²»Ê¹ÓÃ¡£Èç£ºstruTimeCycle[0]ÖÐµÄbyValidµÄÖµÊÇ1£¬±íÊ¾ÐÇÆÚÌìÖ´ÐÐ¸ÃÔ¤°¸¡£ÐÇÆÚÈ¡ÖµÇø¼äÎª[0,6]£¬ÆäÖÐ0´ú±íÐÇÆÚÌì£¬1´ú±íÐÇÆÚÒ»£¬ÒÔ´ËÀàÍÆ*/
    DWORD     dwWorkCount;      // Ô¤°¸ÄÚÈÝÖ´ÐÐ´ÎÊý£¬0ÎªÒ»Ö±Ñ­»·²¥·Å£¬ÆäËûÖµ±íÊ¾´ÎÊý
    NET_DVR_PLAN_INFO strPlanEntry[MAX_PLAN_ACTION_NUM/*32*/];  // Ô¤°¸Ö´ÐÐµÄÄÚÈÝ
    BYTE    byRes2[64];
}NET_DVR_PLAN_CFG, *LPNET_DVR_PLAN_CFG;


/*******************************»ñÈ¡Éè±¸×´Ì¬*******************************/
/*Ô¤°¸ÁÐ±í*/
typedef struct tagNET_DVR_PLAN_LIST
{
    DWORD        dwSize;
    DWORD        dwPlanNums;            //Éè±¸ÊäÈëÐÅºÅÔ´ÊýÁ¿
    BYTE          *pBuffer;            //Ö¸ÏòdwInputSignalNums¸öNET_DVR_PLAN_CFG½á¹¹´óÐ¡µÄ»º³åÇø
    BYTE        byWallNo;            //Ç½ºÅ£¬´Ó1¿ªÊ¼
    BYTE        byRes1[2];
    DWORD         dwBufLen;            //Ëù·ÖÅä»º³åÇø³¤¶È£¬ÊäÈë²ÎÊý£¨´óÓÚµÈÓÚdwInputSignalNums¸öNET_DVR_PLAN_CFG½á¹¹´óÐ¡£©
    BYTE        byRes2[64];
} NET_DVR_PLAN_LIST,*LPNET_DVR_PLAN_LIST;


/*******************************Ô¤°¸¿ØÖÆ*******************************/
//¸Ã½á¹¹Ìå¿É×÷ÎªÍ¨ÓÃ¿ØÖÆ½á¹¹Ìå
typedef struct tagNET_DVR_CONTROL_PARAM
{
    DWORD    dwSize;
    BYTE    sDeviceID[NAME_LEN]; //±»¿ØÉè±¸µÄÉè±¸ID
    WORD    wChan;                 //±»¿ØÍ¨µÀ
    BYTE    byIndex;             //¿ØÖÆË÷Òý£¬¸ù¾ÝÃüÁîÈ·¶¨¾ßÌå±íÊ¾Ê²Ã´Ë÷Òý
    BYTE    byRes1;
    DWORD    dwControlParam;
    BYTE    byMandatoryAlarm;    //1-Ê¹ÄÜ  0-²»Ê¹ÄÜ
    BYTE    byRes2[31];
}NET_DVR_CONTROL_PARAM, *LPNET_DVR_CONTROL_PARAM;

/*******************************»ñÈ¡Éè±¸×´Ì¬*******************************/
typedef struct tagNET_DVR_DEVICE_RUN_STATUS
{
    DWORD     dwSize;
    DWORD    dwMemoryTotal;        //ÄÚ´æ×ÜÁ¿    µ¥Î»Kbyte
    DWORD    dwMemoryUsage;        //ÄÚ´æÊ¹ÓÃÁ¿ µ¥Î»Kbyte
    BYTE    byCPUUsage;            //CPUÊ¹ÓÃÂÊ 0-100
    BYTE    byMainFrameTemp;   //»úÏäÎÂ¶È£¬µ¥Î»£ºÉãÊÏ¶È
    BYTE    byBackPanelTemp;    //±³°åÎÂ¶È£¬µ¥Î»£ºÉãÊÏ¶È
    BYTE    byRes1[1];
    BYTE    byLeftDecResource[32];   //¸÷½âÂë°åÊ£Óà½âÂë×ÊÔ´£¬ÒÔ½âD1·Ö±æÂÊ×ÊÔ´Îªµ¥Î»£¬byLeftDecResource[i],±íÊ¾²ÛÎ»ºÅi½âÂë°åÊ£Óà×ÊÔ´,0xff±íÊ¾ÎÞÐ§£¨·Ç½âÂë°å»òÃ»²å°å×Ó£©
    float    fNetworkFlow;    //ÍøÂçÁ÷Á¿,µ¥Î»£ºKB/s£¬±£ÁôÐ¡ÊýµãºóÁ½Î»
    BYTE    byRes[88];
}NET_DVR_DEVICE_RUN_STATUS, *LPNET_DVR_DEVICE_RUN_STATUS;

// 91ÏµÁÐHD-SDI¸ßÇåDVR Ïà»úÐÅÏ¢
typedef struct tagNET_DVR_ACCESS_CAMERA_INFO
{
    DWORD dwSize;
       char  sCameraInfo[32];        // Ç°¶ËÏà»úÐÅÏ¢
    BYTE  byInterfaceType;        // Ç°¶Ë½ÓÈë½Ó¿ÚÀàÐÍ£¬1:VGA, 2:HDMI, 3:YPbPr 4:SDI 5:FC
    BYTE  byRes1[3];
    DWORD dwChannel;
       BYTE  byRes[24];
}NET_DVR_ACCESS_CAMERA_INFO, *LPNET_DVR_ACCESS_CAMERA_INFO;

typedef struct tagNET_DVR_AUDIO_INPUT_PARAM
{
    BYTE  byAudioInputType;  //ÒôÆµÊäÈëÀàÐÍ£¬0-mic in£¬1-line in
    BYTE  byVolume; //volume,[0-100]
    BYTE  byEnableNoiseFilter; //ÊÇ·ñ¿ªÆôÉùÒô¹ýÂË-¹Ø£¬-¿ª
    BYTE  byres[5];
}NET_DVR_AUDIO_INPUT_PARAM, *LPNET_DVR_AUDIO_INPUT_PARAM;

typedef struct tagNET_DVR_CAMERA_DEHAZE_CFG
{
    DWORD dwSize;
    BYTE byDehazeMode; //0-²»ÆôÓÃ£¬1-×Ô¶¯Ä£Ê½£¬2-¿ª
    BYTE byLevel; //µÈ¼¶£¬0-100
    BYTE byRes[6]; 
}NET_DVR_CAMERA_DEHAZE_CFG, *LPNET_DVR_CAMERA_DEHAZE_CFG;

typedef struct tagNET_DVR_INPUT_SIGNAL_LIST
{
    DWORD        dwSize;
    DWORD        dwInputSignalNums;    //Éè±¸ÊäÈëÐÅºÅÔ´ÊýÁ¿
    BYTE          *pBuffer;            //Ö¸ÏòdwInputSignalNums¸öNET_DVR_INPUTSTREAMCFG½á¹¹´óÐ¡µÄ»º³åÇø
    BYTE        byRes1[3];
    DWORD         dwBufLen;            //Ëù·ÖÅä»º³åÇø³¤¶È£¬ÊäÈë²ÎÊý£¨´óÓÚµÈÓÚdwInputSignalNums¸öNET_DVR_INPUTSTREAMCFG½á¹¹´óÐ¡£©
    BYTE        byRes2[64];
} NET_DVR_INPUT_SIGNAL_LIST,*LPNET_DVR_INPUT_SIGNAL_LIST;

// °²È«°ÎÅÌ×´Ì¬
#define PULL_DISK_SUCCESS        1   // °²È«°ÎÅÌ³É¹¦
#define PULL_DISK_FAIL            2   // °²È«°ÎÅÌÊ§°Ü
#define PULL_DISK_PROCESSING    3   // ÕýÔÚÍ£Ö¹ÕóÁÐ
#define PULL_DISK_NO_ARRAY         4    // ÕóÁÐ²»´æÔÚ 
#define PULL_DISK_NOT_SUPPORT    5     // ²»Ö§³Ö°²È«°ÎÅÌ

// É¨ÃèÕóÁÐ×´Ì¬
#define SCAN_RAID_SUC            1     // É¨ÃèÕóÁÐ³É¹¦
#define SCAN_RAID_FAIL            2     // É¨ÃèÕóÁÐÊ§°Ü
#define SCAN_RAID_PROCESSING    3    // ÕýÔÚÉ¨ÃèÕóÁÐ
#define SCAN_RAID_NOT_SUPPORT    4     // ²»Ö§³ÖÕóÁÐÉ¨Ãè

// ÉèÖÃÇ°¶ËÏà»úÀàÐÍ×´Ì¬
#define SET_CAMERA_TYPE_SUCCESS            1   // ³É¹¦
#define SET_CAMERA_TYPE_FAIL            2   // Ê§°Ü
#define SET_CAMERA_TYPE_PROCESSING        3   // ÕýÔÚ´¦Àí

//9000 2.2
typedef struct tagNET_DVR_RECORD_TIME_SPAN_INQUIRY
{
    DWORD    dwSize;    //½á¹¹Ìå´óÐ¡
    BYTE    byType;    //0 Õý³£ÒôÊÓÆµÂ¼Ïñ, 1Í¼Æ¬Í¨µÀÂ¼Ïñ, 2ANRÍ¨µÀÂ¼Ïñ, 3³éÖ¡Í¨µÀÂ¼Ïñ
    BYTE     byRes[63]; //±£Áô
}NET_DVR_RECORD_TIME_SPAN_INQUIRY, *LPNET_DVR_RECORD_TIME_SPAN_INQUIRY;

typedef struct tagNET_DVR_RECORD_TIME_SPAN
{
    DWORD          dwSize;        //½á¹¹Ìå´óÐ¡
    NET_DVR_TIME  strBeginTime;  //¿ªÊ¼Ê±¼ä
    NET_DVR_TIME  strEndTime;    //½áÊøÊ±¼ä
    BYTE          byType;        //0 Õý³£ÒôÊÓÆµÂ¼Ïñ, 1Í¼Æ¬Í¨µÀÂ¼Ïñ, 2ANRÍ¨µÀÂ¼Ïñ, 3³éÖ¡Í¨µÀÂ¼Ïñ
    BYTE           byRes[35];     //±£Áô
}NET_DVR_RECORD_TIME_SPAN, *LPNET_DVR_RECORD_TIME_SPAN;

typedef struct tagNET_DVR_DRAWFRAME_DISK_QUOTA_CFG
{
    DWORD    dwSize;                    //½á¹¹Ìå´óÐ¡
    BYTE     byPicQuota;                //Í¼Æ¬°Ù·Ö±È     [0%,  30%]
    BYTE     byRecordQuota;                //ÆÕÍ¨Â¼Ïñ°Ù·Ö±È [20%, 40%]
    BYTE     byDrawFrameRecordQuota;    //³éÖ¡Â¼Ïñ°Ù·Ö±È [30%, 80%]
    BYTE     byRes[61];                    //±£Áô×Ö½Ú
}NET_DVR_DRAWFRAME_DISK_QUOTA_CFG, *LPNET_DVR_DRAWFRAME_DISK_QUOTA_CFG;

typedef struct tagNET_DVR_NAT_PORT
{
    WORD wEnable;         //¸Ã¶Ë¿ÚÊÇ·ñÊ¹ÄÜÓ³Éä
    WORD wExtPort;        //Ó³ÉäµÄÍâ²¿¶Ë¿ÚºÅ
    BYTE byRes[12];       //±£Áô
}NET_DVR_NAT_PORT, *LPNET_DVR_NAT_PORT;

typedef struct  tagNET_DVR_NAT_CFG
{
    DWORD dwSize;          //½á¹¹Ìå´óÐ¡
    WORD wEnableUpnp;     //UPNP¹¦ÄÜÊÇ·ñÆôÓÃ
    WORD wEnableNat;        //UPNP¶Ë¿ÚÓ³Éä£¨NAT£©¹¦ÄÜÊÇ·ñÆôÓÃ(±£Áô£¬ÓëwEnableUpnp±£³ÖÒ»ÖÂ)
    NET_DVR_IPADDR  struIpAddr;      //NATÂ·ÓÉÆ÷LAN IPµØÖ·
    NET_DVR_NAT_PORT    struHttpPort;   //web server http¶Ë¿ÚÓ³ÉäÅäÖÃ
    NET_DVR_NAT_PORT    struCmdPort; //ÃüÁî¶Ë¿ÚÓ³ÉäÅäÖÃ(8000)
    NET_DVR_NAT_PORT    struRtspPort;  //rtsp¶Ë¿ÚÓ³ÉäÅäÖÃ
    BYTE byFriendName[64]; //·þÎñÃû
    BYTE byNatType; //UPNP¶Ë¿ÚÓ³ÉäÀàÐÍ£¬0-ÊÖ¶¯£¬1-×Ô¶¯
    BYTE            byRes1[3];    //±£Áô
    NET_DVR_NAT_PORT    struHttpsPort;     //https¶Ë¿ÚÓ³ÉäÅäÖÃ
    BYTE            byres[76];    //±£Áô
}NET_DVR_NAT_CFG, *LPNET_DVR_NAT_CFG;

typedef struct
{
    DWORD  dwEnabled;               //¸Ã¶Ë¿ÚÊÇ·ñ±»Ê¹ÄÜÓ³Éä
    WORD   wInternalPort;           //Ó³ÉäÇ°µÄ¶Ë¿Ú
    WORD   wExternalPort;           //Ó³ÉäºóµÄ¶Ë¿Ú
                                    DWORD  dwStatus;                 /*¶Ë¿ÚÓ³Éä×´Ì¬
                                                                     0 Î´ÉúÐ§
                                                                     1 Î´ÉúÐ§£ºÓ³ÉäÔ´¶Ë¿ÚÓëÄ¿µÄ¶Ë¿ÚÐèÒ»ÖÂ
                                                                     2 Î´ÉúÐ§:  Ó³Éä¶Ë¿ÚºÅÒÑ±»Ê¹ÓÃ
                                                                     3 ÉúÐ§
                                    */
                                    NET_DVR_IPADDR    struNatExternalIp;       //Ó³ÉäºóµÄÍâ²¿µØÖ·
                                    NET_DVR_IPADDR    struNatInternalIp;       //NATÂ·ÓÉÆ÷LAN IPµØÖ·
                                    BYTE   byRes[16];               //±£Áô
}NET_DVR_UPNP_PORT_STATE, *LPNET_DVR_UPNP_PORT_STATE;


typedef struct
{
    NET_DVR_UPNP_PORT_STATE strUpnpPort[UPNP_PORT_NUM];     //¶Ë¿ÚÓ³Éä×´Ì¬,Êý×é0 web server¶Ë¿Ú Êý×é1 ¹ÜÀí¶Ë¿Ú Êý×é2 rtsp¶Ë¿Ú
    BYTE   byRes[200];              //±£Áô
}NET_DVR_UPNP_NAT_STATE, *LPNET_DVR_UPNP_NAT_STATE;

typedef struct tagNET_DVR_PLAYCOND
{
    DWORD             dwChannel;
    NET_DVR_TIME     struStartTime;
    NET_DVR_TIME     struStopTime;
    BYTE             byDrawFrame;  //0:²»³éÖ¡£¬1£º³éÖ¡
    BYTE             byStreamType ; //ÂëÁ÷ÀàÐÍ£¬0-Ö÷ÂëÁ÷ 1-×ÓÂëÁ÷ 2-ÂëÁ÷Èý
    BYTE             byStreamID[STREAM_ID_LEN];
    BYTE             byRes[30];    //±£Áô
}NET_DVR_PLAYCOND, *LPNET_DVR_PLAYCOND;

typedef struct tagNET_DVR_ATMFINDINFO
{
    BYTE    byTransactionType;       //½»Ò×ÀàÐÍ 0-È«²¿£¬1-²éÑ¯£¬ 2-È¡¿î£¬ 3-´æ¿î£¬ 4-ÐÞ¸ÄÃÜÂë£¬5-×ªÕË£¬ 6-ÎÞ¿¨²éÑ¯ 7-ÎÞ¿¨´æ¿î£¬ 8-ÍÌ³® 9-ÍÌ¿¨ 10-×Ô¶¨Òå
    BYTE    byRes[3] ;    //±£Áô
    DWORD  dwTransationAmount ;     //½»Ò×½ð¶î ;
} NET_DVR_ATMFINDINFO, *LPNET_DVR_ATMFINDINFO ;

typedef union  tagNET_DVR_SPECIAL_FINDINFO_UNION
{
    BYTE  byLenth[8] ;
    NET_DVR_ATMFINDINFO      struATMFindInfo;           //ATM²éÑ¯
}NET_DVR_SPECIAL_FINDINFO_UNION, *LPNET_DVR_SPECIAL_FINDINFO_UNION;


typedef struct tagNET_DVR_FILECOND_V40
{
    LONG           lChannel;
    DWORD          dwFileType;/*²»´ø¿¨ºÅÂ¼ÏóÎÄ¼þÀàÐÍ0xff-È«²¿£¬0-¶¨Ê±Â¼Ïñ£¬1-ÒÆ¶¯Õì²â£¬2-±¨¾¯´¥·¢£¬3-±¨¾¯´¥·¢»òÒÆ¶¯Õì²â£¬4-±¨¾¯´¥·¢ºÍÒÆ¶¯Õì²â£¬5-ÃüÁî´¥·¢£¬6-ÊÖ¶¯Â¼Ïñ£¬
    7-ÖÇÄÜÂ¼Ïñ£¬10-PIR±¨¾¯£¬11-ÎÞÏß±¨¾¯£¬12-ºô¾È±¨¾¯£¬13-È«²¿ÊÂ¼þ£¬14-ÖÇÄÜ½»Í¨ÊÂ¼þ£¬15-Ô½½çÕì²â£¬16-ÇøÓòÈëÇÖ£¬17-ÉùÒôÒì³££¬18-³¡¾°±ä¸üÕì²â£¬19-ÖÇÄÜÕì²â£¨Ô½½çÕì²â|ÇøÓòÈëÇÖ|ÈËÁ³Õì²â|ÉùÒôÒì³£|³¡¾°±ä¸üÕì²â£©£¬
    20-ÈËÁ³Õì²â£¬ 21-ÐÅºÅÁ¿£¬22-»Ø´«£¬23-»ØÇ¨Â¼Ïñ£¬24-ÕÚµ²£¬25-posÂ¼Ïñ£¬26-½øÈëÇøÓòÕì²â, 27-Àë¿ªÇøÓòÕì²â,28-ÅÇ»²Õì²â,29-ÈËÔ±¾Û¼¯Õì²â,30-¿ìËÙÔË¶¯Õì²â,31-Í£³µÕì²â,32-ÎïÆ·ÒÅÁôÕì²â,33-ÎïÆ·ÄÃÈ¡Õì²â, 
    34-»ðµãÕì²â£¬35-·ÀÆÆ»µ¼ì²â£¬36-´¬Ö»¼ì²â£¬37-²âÎÂÔ¤¾¯£¬38-²âÎÂ±¨¾¯,39-´ò¼Ü¶·Å¹±¨¾¯£¬40-ÆðÉí¼ì²â£¬41-î§Ë¯¼ì²â£¬42-²â²î±¨¾¯*/
    DWORD          dwIsLocked;
    DWORD          dwUseCardNo;//ÊÇ·ñ´øATMÐÅÏ¢½øÐÐ²éÑ¯£º0-²»´øATMÐÅÏ¢£¬1-°´½»Ò×¿¨ºÅ²éÑ¯£¬2-°´½»Ò×ÀàÐÍ²éÑ¯£¬3-°´½»Ò×½ð¶î²éÑ¯£¬4-°´¿¨ºÅ¡¢½»Ò×ÀàÐÍ¼°½»Ò×½ð¶îµÄ×éºÏ²éÑ¯ 5-°´¿Î³ÌÃû³Æ²éÕÒ£¬´ËÊ±¿¨ºÅ±íÊ¾¿Î³ÌÃû³Æ
    BYTE           sCardNumber[CARDNUM_LEN_OUT];
    NET_DVR_TIME   struStartTime;
    NET_DVR_TIME   struStopTime;
    BYTE           byDrawFrame; //0:²»³éÖ¡£¬1£º³éÖ¡
    BYTE        byFindType; //0:²éÑ¯ÆÕÍ¨¾í£¬1£º²éÑ¯´æµµ¾í
    BYTE        byQuickSearch; //0:ÆÕÍ¨²éÑ¯£¬1£º¿ìËÙ£¨ÈÕÀú£©²éÑ¯
    BYTE        bySpecialFindInfoType ;    //×¨ÓÐ²éÑ¯Ìõ¼þÀàÐÍ 0-ÎÞÐ§£¬ 1-´øATM²éÑ¯Ìõ¼þ  
    DWORD       dwVolumeNum;  //´æµµ¾íºÅ
    BYTE        byWorkingDeviceGUID[GUID_LEN];    //¹¤×÷»úGUID£¬Í¨¹ý»ñÈ¡N+1µÃµ½
    NET_DVR_SPECIAL_FINDINFO_UNION uSpecialFindInfo ;   //×¨ÓÐ²éÑ¯Ìõ¼þ
    BYTE        byStreamType;    //0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷£¬2-ÈýÂëÁ÷£¬0xff-È«²¿
    BYTE        byAudioFile;                //ÒôÆµÎÄ¼þ 0-·ÇÒôÆµÎÄ¼þ£¬1-ÒôÆµÎÄ¼þ
    BYTE        byRes2[30];    //±£Áô
}NET_DVR_FILECOND_V40, *LPNET_DVR_FILECOND_V40;

typedef struct 
{
    BYTE    sAESKey[16];        /*ÂëÁ÷¼ÓÃÜÃÜÔ¿*/
    BYTE    byRes[64];          /*±£Áô×Ö½Ú*/
}NET_DVR_AES_KEY_INFO, *LPNET_DVR_AES_KEY_INFO;

typedef struct
{
    NET_DVR_IPADDR struIP;     //IPµØÖ·
    BYTE  byRes[128]; //±£Áô
}NET_DVR_POE_CFG, *LPNET_DVR_POE_CFG;

#define MAX_PRO_PATH         256    //×î´óÐ­ÒéÂ·¾¶³¤¶È

typedef struct
{
    DWORD dwSize;              //½á¹¹Ìå´óÐ¡
    DWORD dwEnabled;           //ÊÇ·ñÆôÓÃ¸ÃÐ­Òé0 ²»ÆôÓÃ 1 ÆôÓÃ
    char  sProtocalName[DESC_LEN];   //×Ô¶¨ÒåÐ­ÒéÃû³Æ, 16Î»
    BYTE  byRes1[64];          //±£Áô,ÓÃÓÚÐ­ÒéÃû³ÆÀ©Õ¹
    DWORD dwEnableSubStream;   //×ÓÂëÁ÷ÊÇ·ñÆôÓÃ0 ²»ÆôÓÃ 1 ÆôÓÃ
    
    BYTE  byMainProType;        //Ö÷ÂëÁ÷Ð­ÒéÀàÐÍ 1 RTSP
    BYTE  byMainTransType;        //Ö÷ÂëÁ÷´«ÊäÀàÐÍ 0£ºAuto 1£ºudp 2£ºrtp over rtsp
    WORD  wMainPort;           //Ö÷ÂëÁ÷¶Ë¿Ú    
    char  sMainPath[MAX_PRO_PATH];  //Ö÷ÂëÁ÷Â·¾¶
    
    BYTE  bySubProType;         //×ÓÂëÁ÷Ð­ÒéÀàÐÍ 1 RTSP
    BYTE  bySubTransType;        //×ÓÂëÁ÷´«ÊäÀàÐÍ 0£ºAuto 1£ºudp 2£ºrtp over rtsp
    WORD  wSubPort;            //×ÓÂëÁ÷¶Ë¿Ú
    char  sSubPath[MAX_PRO_PATH];   //×ÓÂëÁ÷Â·¾¶ 
    
    BYTE  byRes2[200];          //±£Áô
}NET_DVR_CUSTOM_PROTOCAL, *LPNET_DVR_CUSTOM_PROTOCAL;


//B10ÄÜÖ§³ÖPSIAÉè±¸
//Ñ­»·ÉÏÇ½½á¹¹Ìå£¨ÊµÊ±£©
typedef struct  
{
    DWORD    dwEnable; /* ÊÇ·ñÆôÓÃ 0£­·ñ 1£­ÆôÓÃ*/
    BYTE    byType; //Éè±¸ÀàÐÍ 0: DEV_SDK  1:DEV_DAHUA  2:DEV_EHOME    3:DEV_OTHERES
    BYTE    byRes[3];  //±£Áô
    NET_DVR_STREAM_MEDIA_SERVER_CFG streamMediaServerCfg; 
    NET_DVR_DEV_CHAN_INFO  struDevChanInfo; /* ÂÖÑ­½âÂëÍ¨µÀÐÅÏ¢ */
    BYTE    sRtspUrl[128];//Á÷µØÖ·
}NET_DVR_MATRIX_CHAN_INFO_EX,*LPNET_DVR_MATRIX_CHAN_INFO_EX;

typedef struct
{
    DWORD    dwSize;
    DWORD    dwPoolTime;    /*ÂÖÑ¯¼ä¸ô*/
    NET_DVR_MATRIX_CHAN_INFO_EX        struchanConInfo[MAX_CYCLE_CHAN_V30];
    BYTE    byRes[16];
}NET_DVR_MATRIX_LOOP_DECINFO_EX,*LPNET_DVR_MATRIX_LOOP_DECINFO_EX;

//ÊµÊ±Ô¤ÀÀÉÏÇ½½á¹¹Ìå
typedef struct
{
    DWORD dwSize;
    BYTE byType; //Éè±¸ÀàÐÍ 0: DEV_SDK  1:DEV_DAHUA  2:DEV_EHOME 3:DEV_OTHERES
    BYTE byRes[3]; //±£Áô
    NET_DVR_STREAM_MEDIA_SERVER_CFG struStreamMediaSvrCfg;
    NET_DVR_DEV_CHAN_INFO struDevChanInfo;
    BYTE sRtspUrl[128];//Á÷µØÖ·
}NET_DVR_PU_STREAM_CFG_EX,*LPNET_DVR_PU_STREAM_CFG_EX;

typedef struct tagNET_DVR_MATRIX_TRUNKCFG
{
    DWORD     dwGlobalIndex;  //Ö÷¼ü
    DWORD     dwInterIndex;   //±¾µØÈ«¾Ö±àºÅ
    BYTE      sTrunkName[NAME_LEN];
    BYTE      byType;   //Éè±¸ÀàÐÍ1-bnc, 2-SP3, 3-V6
    BYTE      byDir;   //¸ÉÏß·½Ïò 1-ÊäÈë2-Êä³ö
    BYTE      byAbility;   //¸ÉÏßÄÜÁ¦£¬D1ºâÁ¿
    BYTE      bySubsys;   //×ÓÏµÍ³ID
    BYTE      byChan;     //Í¨µÀID
    BYTE      byRes[255];     //Ô¤Áô
} NET_DVR_MATRIX_TRUNKCFG,*LPNET_DVR_MATRIX_TRUNKCFG;

typedef struct tagNET_DVR_DECSUBSYSTEMJIONSTATUS_V41
{
    BYTE        byJoinStatus;//¹ØÁª×´Ì¬£¬0-Ã»ÓÐ¹ØÁª£¬1-ÒÑ¾­¹ØÁª£¬Í¨¹ýÆäËû×Ö¶ÎÅÐ¶Ï±»×Ô¼º¹ØÁª»ò±»ÆäËû×ÓÏµÍ³¹ØÁª£¬2-±»Õ¼ÓÃ£¬byDecodeAbility´óÓÚ1Ê±ÓÐÐ§£¬3-±»´óÆÁÖ÷ÆÁ¹ØÁª£¬4-±»´óÆÁ×ÓÆÁ¹ØÁª
    BYTE        byJoinSubSystem;// Ëù¹ØÁª»òÕ¼ÓÃµÄ×ÓÏµÍ³²ÛÎ»ºÅ
    BYTE        byJoinDispNum;// Ëù¹ØÁª»òÕ¼ÓÃµÄÏÔÊ¾Í¨µÀºÅ
    BYTE        byJoinSubWindowNum;// Ëù¹ØÁª»òÕ¼ÓÃµÄ×Ó´°¿ÚºÅ
    BYTE        byDecodeAbility;   //½âÂëÍ¨µÀµÄµ±Ç°½âÂëÄÜÁ¦£¬0-Î´¹ØÁª£¬1-D1£¬2-720£¬3-1080
    BYTE        byRes[15];
}NET_DVR_DECSUBSYSTEMJIONSTATUS_V41,LPNET_DVR_DECSUBSYSTEMJIONSTATUS_V41;

typedef struct tagNET_DVR_SINGLESUBSYSTEMJOININFO_V41
{
    /*×ÓÏµÍ³ÀàÐÍ£¬1-½âÂëÓÃ×ÓÏµÍ³£¬2-±àÂëÓÃ×ÓÏµÍ³£¬3-¼¶ÁªÊä³ö×ÓÏµÍ³£¬4-¼¶ÁªÊäÈë×ÓÏµÍ³£¬5-Âë·ÖÆ÷×ÓÏµÍ³£¬6-±¨¾¯Ö÷»ú×ÓÏµÍ³£¬7-ÖÇÄÜ×ÓÏµÍ³£¬8-V6½âÂë×ÓÏµÍ³£¬9-V6×ÓÏµÍ³£¬0-NULL£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©*/
    BYTE    bySubSystemType; 
    BYTE    byConnectStatus;//¼¶ÁªÏµÍ³¹ØÁª×´Ì¬£¬1-Á¬½ÓÕý³££¬2-Á¬½Ó¶Ï¿ª
    BYTE    byMatrixNum;//¼¶ÁªÊÓÆµ×ÛºÏÆ½Ì¨ºÅ£¬×ÓÏµÍ³ÀàÐÍÊÇ3»ò4Ê±¿ÉÓÃ
    BYTE    bySubSystemNum;//¼¶Áª×ÓÏµÍ³²ÛÎ»ºÅ£¬×ÓÏµÍ³ÀàÐÍÊÇ3»ò4Ê±¿ÉÓÃ
    NET_DVR_DECSUBSYSTEMJIONSTATUS_V41 struSubSystem[MAX_DECODECHANNUM];
    BYTE    byBindStatus;//°ó¶¨×´Ì¬£¬0-Ã»ÓÐ°ó¶¨£¬1-ÒÑ¾­°ó¶¨£¨´óÆÁÆ´½ÓÊ±ÓÃµ½£©
    BYTE    bySlotNum ;//²ÛÎ»ºÅ£¬´Ë²ÎÊýÖ»ÄÜ»ñÈ¡
    BYTE    byUsedTrunk;//ÊÇ·ñ±»¸ÉÏßÊ¹ÓÃ£¬0-Î´±»Ê¹ÓÃ£¬1-±»Ê¹ÓÃ
    BYTE    byRes[65];
}NET_DVR_SINGLESUBSYSTEMJOININFO_V41,LPNET_DVR_SINGLESUBSYSTEMJOININFO_V41;

typedef struct tagNET_DVR_ALLDECSUBSYSTEMJOININFO_V41
{
    DWORD dwSize;
    NET_DVR_SINGLESUBSYSTEMJOININFO_V41 struSingleSubSystemJoinInfo[MAX_SUBSYSTEM_NUM_V40];
    BYTE  byRes[48];
}NET_DVR_ALLDECSUBSYSTEMJOININFO_V41,*LPNET_DVR_ALLDECSUBSYSTEMJOININFO_V41;

//////////×ÓÏµÍ³ÅäÖÃ/////////////
#define MAX_ALARMHOSTKEYBOARD 64 //ÍøÂç±¨¾¯Ö÷»ú×î´ó¼üÅÌÊý
typedef struct tagNET_DVR_PUBLIC_SUB_SYSTEM
{
    //¹ØÁª×ÓÏµÍ³ºÅ£¬°´Î»±íÊ¾£¬bit0±íÊ¾¸Ã¹«¹²×ÓÏµÍ³¹ØÁª×ÓÏµÍ³1.
    DWORD    dwJointSubSystem;
    BYTE    byRes[16];
}NET_DVR_PUBLIC_SUB_SYSTEM, *LPNET_DVR_PUBLIC_SUB_SYSTEM;

typedef struct tagNET_DVR_NOAMAL_SUB_SYSTEM
{
    //±íÊ¾±»ÄÄÐ©¹«¹²×ÓÏµÍ³¹ØÁª£¬°´Î»±íÊ¾£¬bit0 ±íÊ¾£¬¸Ã×ÓÏµÍ³.±»¹ØÁªµ½¹«¹²×ÓÏµÍ³1
    DWORD    dwBeJoinedSubSystem;
    BYTE    byRes[16];    
}NET_DVR_NOAMAL_SUB_SYSTEM, *LPNET_DVR_NOAMAL_SUB_SYSTEM;

typedef union tagNET_DVR_JOINT_SUB_SYSTEM
{
    // byPublicAttributeEnableÎª0Ê±Ê¹ÓÃ¸Ã±äÁ¿
    NET_DVR_NOAMAL_SUB_SYSTEM     struNormalSubSystem;
    //byPublicAttributeEnableÎª1Ê±Ê¹ÓÃ¸Ã±äÁ¿
    NET_DVR_PUBLIC_SUB_SYSTEM        struPublicSubSystem;
    BYTE    byRes[20];    
}NET_DVR_JOINT_SUB_SYSTEM,*LPNET_DVR_JOINT_SUB_SYSTEM;

#define MAX_SUBSYSTEM_ID_LEN 16 //×ÓÏµÍ³ID×î´ó³¤¶È

//////////GPRS²ÎÊýÅäÖÃ/////////////
#define    ACCOUNTNUM_LEN             6
#define ACCOUNTNUM_LEN_32             32
#define ACCOUNTNUM_LEN_V40      9
#define    APN_NAME_LEN            32
#define    APN_USERNAME_LEN        24
#define    APN_USERPASSWORD_LEN    16

typedef struct tagNET_DVR_ALARMSUBSYSTEMPARAM
{
    DWORD        dwSize;
    WORD        wEnterDelay;                    //½øÈëÑÓÊ±,µ¥Î»:Ãë, ·¶Î§£º10-150 ¶¯»·±¨¾¯Ö÷»úºÍ×ÔÖúÐÐ±¨¾¯Ö÷»úµÄÑÓÊ±Ê±¼äÔÚ NET_DVR_ALARMIN_PARAM ÖÐµÄdwParamÀ´ÉèÖÃÑÓÊ±Ê±¼ä
    //¾ßÌåÓÃÄÄÖÖÉèÖÃ·½Ê½Í¨¹ýÄÜÁ¦¼¯ÖÐµÄbySupportAlarmInDelay×Ö¶ÎÀ´Çø±ð
    WORD        wExitDelay;//ÍË³öÑÓÊ±,µ¥Î»:Ãë£¬ ·¶Î§10-300
    BYTE        byHostageReport;                //Ð®³Ö±¨¸æ£¬0½ûÄÜ 1Ê¹ÄÜ
    BYTE        bySubsystemEnable;                //×ÓÏµÍ³Ê¹ÄÜ
    BYTE        byKeyToneOfArmOrDisarm;            // ³É¹¦·¢ËÍ²¼³··À±¨¸æÊÇ·ñ¼üÅÌÌáÊ¾£¬0-¼üÅÌ²»ÌáÊ¾ 1-¼üÅÌÊä³öÌáÊ¾Òô
    BYTE        byKeyToneOfManualTestReport;    //³É¹¦·¢ËÍ²âÊÔ±¨¸æÊÇ·ñ¼üÅÌÌáÊ¾£¬0-¼üÅÌ²»ÌáÊ¾ 1-¼üÅÌÊä³öÌáÊ¾Òô
    WORD        wDelayTime;                        //¾¯ºÅÊä³öÑÓÊ±£¬µ±ÄÜÁ¦¼¯ÖÐdwSupport1ÖÐµÄbit0Î»Îª1Ê±£¬Ê¹ÓÃ¸Ã²ÎÊýÉèÖÃ¾¯ºÅÊä³öÊ±¼ä¡£bit0Îª0Ê±£¬Ê¹ÓÃNET_DVR_SIREN_PARAMÖÐµÄwDelay²ÎÊýÉèÖÃ¾¯ºÅÊä³öÊ±¼ä
    BYTE        byEnableAlarmInDelay;//0--²»ÆôÓÃ(Ê¹ÓÃ×ÓÏµÍ³ÑÓÊ±),1--ÆôÓÃ(Ê¹ÓÃ·ÀÇøÑÓÊ±)£¬Ä¬ÈÏ²»ÆôÓÃ
    BYTE         byPublicAttributeEnable;        //ÊÇ·ñÎª¹«¹²×ÓÏµÍ³
    NET_DVR_JOINT_SUB_SYSTEM struJointSubSystem;        
    BYTE        byKeyZoneArm;                    //ÊÇ·ñÖ§³ÖÔ¿³×·ÀÇø¶Ô×ÓÏµÍ³½øÐÐ²¼·À²Ù×÷
    BYTE        byKeyZoneArmReport;                //ÊÇ·ñÖ§³ÖÔ¿³×·ÀÇø¶Ô×ÓÏµÍ³²¼·ÀÊ±·¢ËÍ²¼·À±¨¸æ
    BYTE        byKeyZoneDisarm;                //ÊÇ·ñÖ§³ÖÔ¿³×·ÀÇø¶Ô×ÓÏµÍ³½øÐÐ³··À²Ù×÷
    BYTE        byKeyZoneDisarmReport;            //ÊÇ·ñÖ§³ÖÔ¿³×·ÀÇø¶Ô×ÓÏµÍ³½øÐÐ³··À²Ù×÷Ê±·¢ËÍ³··À±¨¸æ
    BYTE        bySubSystemID[MAX_SUBSYSTEM_ID_LEN];    //×ÓÏµÍ³ID
    BYTE        byKeyZoneArmReportEnable;    //Ô¿³×·ÀÇøÉÏ´«²¼·À±¨¸æÊ¹ÄÜ 0-½ûÄÜ 1-Ê¹ÄÜ
    BYTE        byKeyZoneArmEnable;    //Ô¿³×·ÀÇøÊ¹ÄÜ£¬ 0 -½ûÄÜ 1-Ê¹ÄÜ
    BYTE        byOneKeySetupAlarmEnable;          //Ò»¼ü²¼·ÀÊ¹ÄÜ
    BYTE        bySingleZoneSetupAlarmEnable;       //µ¥·ÀÇø²¼³··ÀÊ¹ÄÜ
    BYTE        byCenterType;                    //0-ÎÞÐ§, 1-ÖÐÐÄÕËºÅ(³¤¶È6),2-À©Õ¹µÄÖÐÐÄÕËºÅ(³¤¶È9)
    BYTE        sCenterAccount[ACCOUNTNUM_LEN/*6*/];    //ÖÐÐÄÕÊºÅ
    BYTE        sCenterAccountV40[ACCOUNTNUM_LEN_32/*32*/];    //ÖÐÐÄÕËºÅV40,Ê¹ÓÃ´Ë×Ö¶ÎÊ±sCenterAccountÎÞÐ§
    BYTE        byRes2[565];                    // ±£Áô×Ö½Ú
}NET_DVR_ALARMSUBSYSTEMPARAM, *LPNET_DVR_ALARMSUBSYSTEMPARAM;

typedef struct tagNET_DVR_REMIND_TIME//8
{
    BYTE byEnable;//ÊÇ·ñÆôÓÃ±¾´ÎÌáÐÑ 0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byHour;//0~24
    BYTE byMinute;//0~60
    BYTE bySecond;//0~60
}NET_DVR_REMIND_TIME,*LPNET_DVR_REMIND_TIME;

//×ÓÏµÍ³²ÎÊýÅäÖÃÀ©Õ¹
#define    MAX_KEYBOARD_USER_NUM    256
typedef struct tagNET_DVR_SUBSYSTEM_PARAM_EX
{
    DWORD     dwSize;
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS/*7*/][MAX_TIMESEGMENT_V30/*8*/]; //²¼³··ÀÊ±¼ä
    BYTE    byAlarmInAdvance;            // ²¼³··ÀÌáÇ°ÌáÊ¾Ê±¼ä0~45·Ö
    BYTE    byRes1[3];
    BYTE     byJointAlarmIn[MAX_ALARMHOST_ALARMIN_NUM / 8];//°´Î»£¬±íÊ¾×ÓÏµÍ³¹ØÁªµÄ±¨¾¯ÊäÈëÍ¨µÀºÅ£¬0-²»¼ÓÈë£¬1-¼ÓÈë
    BYTE     byJointKeyboard[MAX_ALARMHOSTKEYBOARD/*64*/ / 8];//°´Î»£¬±íÊ¾Ö§³ÖµÄ¼üÅÌºÅ£¬0-²»¼ÓÈë£¬1-¼ÓÈë
    BYTE    byJointOpetaterUser[MAX_KEYBOARD_USER_NUM/8];//°´Î»±íÊ¾£¬bit0±íÊ¾¼üÅÌ²Ù×÷ÓÃ»§1 £¬0-²»¹ØÁª 1-¹ØÁª
    NET_DVR_REMIND_TIME    struAlarmRemindTime[MAX_DAYS/*7*/][MAX_TIMESEGMENT_V30/*8*/];//MAX_TIMESEGMENT_V30±íÊ¾Ã¿Ìì×î¶àÖ§³Ö8¸öÌáÐÑ
    BYTE             byRes2[288];            // ±£Áô×Ö½Ú
}NET_DVR_SUBSYSTEM_PARAM_EX, *LPNET_DVR_SUBSYSTEM_PARAM_EX;


typedef struct tagNET_DVR_ALARMHOST_PRINTER_CFG
{
    DWORD 	dwSize;
    BYTE 	byPrinterEnable;		//ÊÇ·ñÆôÓÃ´òÓ¡»ú
    BYTE	byPrintTime;			//ÊÇ·ñ´òÓ¡Ê±¼ä
    BYTE 	byFaultDetect;			//ÊÇ·ñ¼ì²â´òÓ¡»ú¹ÊÕÏ
    BYTE	byRes1;
    DWORD	dwAlarmInfo;			//±¨¾¯ÐÅÏ¢£¬°´Î»±íÊ¾¡£bit0-·ÀÇø±¨¾¯£¬bit1-·ÀÇø±¨¾¯»Ö¸´£¬bit2-½ô¼±±¨¾¯£¬bit-3Ð®³Ö±¨¾¯
    DWORD	dwDeviceInfo;			//Éè±¸ÐÅÏ¢£¬°´Î»±íÊ¾¡£bit0-½»Á÷µç¶Ïµç¡¢bit1-½»Á÷µç¶Ïµç»Ö¸´£¬bit2-Ðîµç³ØÇ·Ñ¹¡¢bit3-Ðîµç³ØÇ·Ñ¹»Ö¸´£¬bit4-µç»°Ïß¶ÏÏß¡¢bit5-µç»°Ïß¶ÏÏß»Ö¸´£¬bit6-²âÊÔ±¨¸æ¡¢bit7-·À²ð¡¢bit8-·À²ð»Ö¸´¡¢bit9-485Éè±¸µôÏß¡¢bit10-485Éè±¸µôÏß»Ö¸´¡¢bit11-ÎÞÏßÍøÂçÒì³£¡¢bit12-ÎÞÏßÍøÂç»Ö¸´Õý³£¡¢bit13-ÓÐÏßÍøÂçÒì³£¡¢bit14-ÓÐÏßÍøÂç»Ö¸´Õý³£¡¢bit15-À©Õ¹×ÜÏßÒì³£¡¢bit17-À©Õ¹×ÜÏß»Ö¸´Õý³£¡¢bit17-Ó²ÅÌ¹ÊÕÏ¡¢bit18-Ó²ÅÌ¹ÊÕÏ»Ö¸´¡¢bit19-¼üÅÌËø¶¨
    DWORD	dwOperateInfo;			//²Ù×÷ÐÅÏ¢£¬°´Î»±íÊ¾¡£bit0-²¼·À¡¢bit1-³··À¡¢bit2-Ïû¾¯¡¢bit3-ÅÔÂ·¡¢bit4-ÅÔÂ·»Ö¸´¡¢bit5-½øÈë±à³Ì¡¢bit6-ÍË³ö±à³Ì¡¢bit7-Ö÷»ú¸´Î»
    BYTE 	byRes2[256];			// ±£Áô×Ö½Ú
}NET_DVR_ALARMHOST_PRINTER_CFG, *LPNET_DVR_ALARMHOST_PRINTER_CFG;

typedef struct tagNET_DVR_ALARMHOST_NETPARAM
{ 
    DWORD dwSize;
    NET_DVR_IPADDR struIP;
    WORD    wPort;
    BYTE    byAddressType;    //0 - ÎÞÒâÒå, 1 - ipv4/ipv6µØÖ·£¬2 - ÓòÃû
    BYTE    byRes1[1];
    BYTE    byDomainName[MAX_DOMAIN_NAME/*64*/]; //ÓòÃû£¬GPRS²ÎÊýÅäÖÃ¡¢ÍøÂç²ÎÊýÅäÖÃÊ±¸Ã×Ö¶Î¾ùÓÐÐ§
    BYTE    byReportProtocol;        //1-private 2-NAL2300
    BYTE    byDevID[ACCOUNTNUM_LEN_32/*32*/]; //Ð­ÒéÎªNAL2300Ê±ÓÐÐ§
    BYTE    byRes2[7]; //GPRSµÄÓòÃû½âÎöÊÇÔÚ¹Ì¶¨µÄ·þÎñÆ÷ÉÏ½øÐÐµÄ£¬ËùÒÔ²»ÐèÒª¸ø½âÎö·þÎñÆ÷µÄÐÅÏ¢Ô¤ÁôÒ»Ð©×Ö¶Î
}NET_DVR_ALARMHOST_NETPARAM,  *LPNET_DVR_ALARMHOST_NETPARAM;

typedef struct tagNET_DVR_REGISTER_RS485CFG
{
    DWORD   dwSize;                 // ½á¹¹Ìå´óÐ¡
    WORD    wDeviceProtocol;        // Ç°¶ËÉè±¸Ð­Òé Í¨¹ý»ñÈ¡Ð­ÒéÁÐ±í»ñÈ¡    
    BYTE    byRes[2];
    DWORD   dwBaudRate;             //²¨ÌØÂÊ(bps)£¬0-50£¬1-75£¬2-110£¬3-150£¬4-300£¬5-600£¬6-1200£¬7-2400£¬8-4800£¬9-9600£¬10-19200£¬11-38400£¬12-57600£¬13-76800£¬14-115.2k 
    BYTE    byRes1[124];              // ±£Áô×Ö½Ú
}NET_DVR_REGISTER_RS485CFG, *LPNET_DVR_REGISTER_RS485CFG;

typedef struct tagNET_DVR_ALARMHOST_WIRELESS_NETWORK_CFG
{
    DWORD    dwSize;
    NET_DVR_ALARMHOST_NETPARAM struNetCenter[MAX_CENTERNUM]; //ÖÐÐÄ GPRSÍøÂçÏà¹Ø²ÎÊýµÄÅäÖÃ 
    BYTE     byAPNName[APN_NAME_LEN/*32*/];
    BYTE    byAPNUserName[APN_USERNAME_LEN/*24*/];
    BYTE    byAPNPassWord[APN_USERPASSWORD_LEN/*16*/];
    BYTE    byReconnTime;    //ÖØÁ¬Ê±¼ä£¬Á¬½ÓÊ§Ð§ºóÆôÓÃÖØÁ¬µÄÊ±¼ä£¬10ÃëÎªµ¥Î»,È¡Öµ·¶Î§1-30
    BYTE    byOverTime;        //³¬Ê±Ê±¼ä£¬³¬¹ýOverTimeÊ±¼äÃ»ÓÐÊÕµ½ÓÐÐ§Êý¾ÝÔòÖØÁ¬£¬·¶Î§1-254£¬µ¥Î»30Ãë
    BYTE    byDetectLinkTime;    //    //Ì½²âÁ´Â·ÊÇ·ñ»¹±£³Ö£¬·¶Î§1-30£¬µ¥Î»10s
    BYTE    byRes1;
    BYTE    bySIMNum[NAME_LEN/*32*/]; //SIM¿¨ºÅ£¨ÊÖ»úºÅ£©
    NET_DVR_IPADDR    struSIMIP;      //µÇÂ½ÍøÂçºóÍøÂç¸ø·ÖÅäµÄIPµØÖ·£¬Ö»ÄÜ»ñÈ¡
    BYTE    byRes2[64];
}NET_DVR_ALARMHOST_WIRELESS_NETWORK_CFG, *LPNET_DVR_ALARMHOST_WIRELESS_NETWORK_CFG;


//////////ÍøÂç²ÎÊýÅäÖÃ/////////////
typedef struct tagNET_DVR_ALARMHOST_NETCFG
{
    DWORD dwSize;
    NET_DVR_ALARMHOST_NETPARAM     struNetCenter[MAX_CENTERNUM];
    BYTE    byRes1[32];
}NET_DVR_ALARMHOST_NETCFG,  *LPNET_DVR_ALARMHOST_NETCFG;

//////////»ýÄ¾ÉÏ´«·½Ê½/////////////
#define    MAX_REPORTCHAN_NUM        4
#define    MAX_CENTERGROUP_NUM        16
typedef struct tagNET_DVR_ALARMHOST_REPORTCENTER_CFG
{
    DWORD    dwSize;
    BYTE    byValid;                //ÊÇ·ñÆôÓÃ
    BYTE    byRes[3]; //±£Áô1
    BYTE    byChanAlarmMode[MAX_REPORTCHAN_NUM/*4*/];    //ÖÐÐÄ×é±¨¾¯Í¨µÀ£¬ 1-T1¡¢2-T2¡¢ 3-N1¡¢ 4-N2¡¢5-G1¡¢ 6-G2
    BYTE    byDealFailCenter[MAX_CENTERGROUP_NUM/*16*/]; //ÏòÖ¸¶¨ÖÐÐÄ×é·¢ËÍÊ§°Ü±¨¸æ£¬ÓÃÊý×éÏÂ±ê±íÊ¾ÊÇÄÄ¸öÖÐÐÄ×é£¬0-²»Ñ¡Ôñ¡¢1-Ñ¡Ôñ
    BYTE    byDataType;    //1-±¨¾¯Êý¾Ý 2-·Ç±¨¾¯Êý¾Ý 3-ËùÓÐÊý¾Ý
    BYTE    byRes2[15];    //±£Áô2
}NET_DVR_ALARMHOST_REPORTCENTER_CFG, *LPNET_DVR_ALARMHOST_REPORTCENTER_CFG;

#define MAX_EVENT_NUM 32//ÍøÂç±¨¾¯Ö÷»ú×î´óÊÂ¼þÊý
typedef struct tagNET_DVR_ALARMHOST_REPORT_CENTER_CFG_V40
{
    DWORD        dwSize;            
    BYTE        byValid;            //ÊÇ·ñÆôÓÃ
    BYTE        byDataType;            //1-ËùÓÐ±¨¾¯Êý¾Ý 2-ËùÓÐ·Ç±¨¾¯Êý¾Ý 3-ËùÓÐÊý¾Ý£¬4-·ÀÇø±¨¾¯±¨¸æ£¬5-·Ç·ÀÇø±¨¾¯±¨¸æ
    BYTE        byRes[2];             //±£Áô1
    BYTE        byChanAlarmMode[MAX_REPORTCHAN_NUM/*4*/];    //ÖÐÐÄ×é±¨¾¯Í¨µÀ£¬ 1-T1¡¢2-T2¡¢ 3-N1¡¢ 4-N2¡¢5-G1¡¢ 6-G2(Èç¹ûÉè±¸Ö§³Ö3G£¬G1£¬G2±íÊ¾3GÄ£¿é£¬Èç¹û²»Ö§³Ö£¬±íÊ¾GPRSÄ£¿é£¬Ò»¿îÉè±¸ÖÐ3GÄ£¿éºÍGPRSÄ£¿éÖ»»á³öÏÖÒ»ÖÖ)
    BYTE        byDealFailCenter[MAX_CENTERGROUP_NUM/*16*/]; //ÏòÖ¸¶¨ÖÐÐÄ×é·¢ËÍÊ§°Ü±¨¸æ£¬ÓÃÊý×éÏÂ±ê±íÊ¾ÊÇÄÄ¸öÖÐÐÄ×é£¬0-²»Ñ¡Ôñ¡¢1-Ñ¡Ôñ
    BYTE         byZoneReport[MAX_ALARMHOST_ALARMIN_NUM];    //·ÀÇø±¨¸æÀàÐÍ£¬0-²»ÉÏ´«£¬1-ÉÏ´« 
    BYTE        byNonZoneReport[MAX_EVENT_NUM]; //·Ç·ÀÇø±¨¾¯±¨¸æ, Ã¿Ò»¸öÔªËØ±íÊ¾Ò»ÖÖÊÂ¼þÀàÐÍ£¬0-²»ÉÏ´«£¬1-ÉÏ´«£¬byNonZoneReport[0]-Èí·ÀÇø±¨¸æ byNonZoneReport[1]-ÏµÍ³×´Ì¬±¨¸æ byNonZoneReport[2]-È¡Ïû±¨¸æ byNonZoneReport[3]-²âÊÔ±¨¸æ byNonZoneReport[4]-²¼·À±¨¸æ byNonZoneReport[5]-³··À±¨¸æ byNonZoneReport[6]-Ð®³Ö±¨¸æ byNonZoneReport[7]-±¨¾¯»Ö¸´±¨¸æ byNonZoneReport[8]-ÅÔÂ·±¨¸æ byNonZoneReport[9]-ÅÔÂ·»Ö¸´±¨¸æ¡£
    BYTE        byRes2[256];            //±£Áô2
}NET_DVR_ALARMHOST_REPORT_CENTER_CFG_V40, *LPNET_DVR_ALARMHOST_REPORT_CENTER_CFG_V40;


//////////·À»¤²Õ×´Ì¬ÉÏ´«/////////////
typedef  struct tagNET_DVR_ALARMHOST_SAFETYCABINSTATE
{
    DWORD    dwSize;
    BYTE    byEnterButton;    //½øÃÅ°´Å¥×´Ì¬ 0-²»°´ÏÂ 1-°´Å¥°´ÏÂ
    BYTE    byExitButton;    //³öÃÅ°´Å¥×´Ì¬ 0-²»°´ÏÂ 1-°´Å¥°´ÏÂ
    BYTE    byDoorState;    //ÃÅ×´Ì¬    0-ÃÅ¹Ø±Õ 1-ÃÅ´ò¿ª
    BYTE    byLockState;    //Ëø×´Ì¬ 0-Ëø¹Ø    1-Ëø¿ª
    BYTE    byUrgencyButton;    //½ô¼±°´Å¥×´Ì¬    0-²»°´ÏÂ 1-°´Å¥°´ÏÂ
    BYTE    byManState;        //ÈË×´Ì¬     0-Ã»ÈË 1-ÓÐÈË
    BYTE    byAbnormal; //Òì³£×´Ì¬  0-Õý³£ 1-Òì³£(·À»¤²ÕÊ¹ÓÃ³¬Ê±ÉÏ´«Òì³£)
    BYTE    byLightState;   //µÆ¹â×´Ì¬ 0-¹Ø £¬1-¿ª
    BYTE    byFanState;     //·çÉÈ×´Ì¬ 0-¹Ø£¬1-¿ª
    BYTE    byRes[63];
}NET_DVR_ALARMHOST_SAFETYCABINSTATE,*LPNET_DVR_ALARMHOST_SAFETYCABINSTATE;

/////////¾¯ºÅÊä³ö¿Ú£¬¾¯ºÅ×´Ì¬ÉÏ´«/////////////
typedef  struct tagNET_DVR_ALARMHOST_ALARMOUTSTATUS
{
    DWORD    dwSize;
    BYTE    byName[32];        //±¨¾¯Êä³ö¿ÚÃû³Æ»ò¾¯ºÅÃû³Æ
    BYTE    byAlarmType;    //1-±¨¾¯Êä³ö¿Ú×´Ì¬£¬ 2-¾¯ºÅ×´Ì¬
    WORD    wChan;            //Èç¹ûÊÇ±¨¾¯Êä³ö¿Ú×´Ì¬£¬¸ÃÖµµÄ·¶Î§Îª0-511£»Èç¹ûÊÇ¾¯ºÅ×´Ì¬£¬·¶Î§1-8£¨·À»¤²ÕÖ»ÓÐ1¸ö¾¯ºÅÊä³ö£©
    BYTE    byAlarmStatus; //±¨¾¯×´Ì¬ 0-ÎÞ±¨¾¯ 1-ÓÐ±¨¾¯
    BYTE    byRes[32];
}NET_DVR_ALARMHOST_ALARMOUTSTATUS,*LPNET_DVR_ALARMHOST_ALARMOUTSTATUS;

//////////ÓïÒôÉÏ´«ÏÂÔØ/////////////
typedef struct tagNET_DVR_AUDIO_PARAM
{
    DWORD        dwSize;
    BYTE        byAudioFormat;      //ÒôÆµ¸ñÊ½£¬1-G711£¬2-G722 
    BYTE        byRes1;
    WORD        wChannels;          // number of channels (i.e. mono, stereo...)
    DWORD        dwSamplesPerSec;    //²ÉÑùÂÊ
    BYTE        byRes2[20];            //±£Áô
    DWORD        dwAudioSize;        //ÒôÆµ³¤¶È´óÐ¡£¬Ñ¹ËõºóµÄ´óÐ¡
}NET_DVR_AUDIO_PARAM,*LPNET_DVR_AUDIO_PARAM;

//Ô¤ÀÀV40½Ó¿Ú
typedef struct tagNET_DVR_PREVIEWINFO
{
    LONG lChannel;//Í¨µÀºÅ
    DWORD dwStreamType;    // ÂëÁ÷ÀàÐÍ£¬0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷£¬2-ÂëÁ÷3£¬3-ÂëÁ÷4 µÈÒÔ´ËÀàÍÆ
    DWORD dwLinkMode;// 0£ºTCP·½Ê½,1£ºUDP·½Ê½,2£º¶à²¥·½Ê½,3 - RTP·½Ê½£¬4-RTP/RTSP,5-RSTP/HTTP 
    HWND hPlayWnd;//²¥·Å´°¿ÚµÄ¾ä±ú,ÎªNULL±íÊ¾²»²¥·ÅÍ¼Ïó
    DWORD bBlocked;  //0-·Ç×èÈûÈ¡Á÷, 1-×èÈûÈ¡Á÷, Èç¹û×èÈûSDKÄÚ²¿connectÊ§°Ü½«»áÓÐ5sµÄ³¬Ê±²ÅÄÜ¹»·µ»Ø,²»ÊÊºÏÓÚÂÖÑ¯È¡Á÷²Ù×÷.
    DWORD bPassbackRecord; //0-²»ÆôÓÃÂ¼Ïñ»Ø´«,1ÆôÓÃÂ¼Ïñ»Ø´«
    BYTE byPreviewMode;//Ô¤ÀÀÄ£Ê½£¬0-Õý³£Ô¤ÀÀ£¬1-ÑÓ³ÙÔ¤ÀÀ
    BYTE byStreamID[STREAM_ID_LEN/*32*/];//Á÷ID£¬lChannelÎª0xffffffffÊ±ÆôÓÃ´Ë²ÎÊý
    BYTE byProtoType; //Ó¦ÓÃ²ãÈ¡Á÷Ð­Òé£¬0-Ë½ÓÐÐ­Òé£¬1-RTSPÐ­Òé
    BYTE byRes1;
    BYTE byVideoCodingType; //ÂëÁ÷Êý¾Ý±à½âÂëÀàÐÍ 0-Í¨ÓÃ±àÂëÀàÐÍ(YUV)£¨Ò»¸öÏñËØµã8BIT£© 1-ÂãÂëÁ÷ÀàÐÍ£¨Ò»¸öÏñËØµã14BIT£©£¨SDKÄÚ²¿Í·ÎÄ¼þÖÐ±£Áô£¬²»¿ª·Å¸øÓÃ»§£©
    DWORD dwDisplayBufNum; //²¥·Å¿â²¥·Å»º³åÇø×î´ó»º³åÖ¡Êý£¬·¶Î§1-50£¬ÖÃ0Ê±Ä¬ÈÏÎª1 
    BYTE byRes[216];
}NET_DVR_PREVIEWINFO, *LPNET_DVR_PREVIEWINFO;


//ÊÂ¼þ´¥·¢±¨¾¯Êä³ö

typedef struct tagNET_DVR_TRIGGER_EVENT
{
    DWORD    dwSize;
    DWORD    dwOverallEventTriggerAlarmoutOn;    //È«¾ÖÊÂ¼þ´¥·¢±¨¾¯Êä³ö¿ªÆô£¬°´Î»»ò£¬bit0-½»Á÷µçµôµç£¬bit1-µç³ØµçÑ¹µÍ£¬bit2-µç»°ÏßµôÏß£¬bit3-ÓÐÏßÍøÂçÒì³££¬bit4-ÎÞÏßÍøÂçÒì³£ ,bit5-Ó²ÅÌ¹ÊÕÏ
    DWORD    dwOverallEventTriggerAlarmoutOff;    //È«¾ÖÊÂ¼þ´¥·¢±¨¾¯Êä³ö¿ªÆô£¬°´Î»»ò£¬bit0-½»Á÷µçµôµç£¬bit1-µç³ØµçÑ¹µÍ£¬bit2-µç»°ÏßµôÏß£¬bit3-ÓÐÏßÍøÂçÒì³££¬bit4-ÎÞÏßÍøÂçÒì³£ ,bit5-Ó²ÅÌ¹ÊÕÏ
    DWORD    dwSubSystemEventTriggerAlarmoutOn[MAX_ALARMHOST_SUBSYSTEM/*32*/]; //×ÓÏµÍ³ÊÂ¼þ´¥·¢±¨¾¯Êä³ö¿ªÆô,dwSubSystemEvent[0]±íÊ¾×ÓÏµÍ³1£¬dwSubSystemEvent[2]±íÊ¾×ÓÏµÍ³2£¬¾ßÌåµÄ×ÓÏµÍ³¸öÊý´ÓÄÜÁ¦¼¯»ñÈ¡£¨wSubSystem£©£¬Ã¿¸ö×ÓÏµÍ³µÄÊÂ¼þ°´Î»±íÊ¾£¬bit0-½øÈëÑÓÊ±£¬bit1-ÍË³öÑÓÊ±£¬bit2-²¼·À£¬bit3-³··À£¬bit4-±¨¾¯£¬bit5-Ïû³ý±¨¾¯¼ÇÒä,bit6-±¨¾¯»Ö¸´,bit7-·ÀÇø·À²ð,bit8-·ÀÇø·À²ð»Ö¸´
    DWORD    dwSubSystemEventTriggerAlarmoutOff[MAX_ALARMHOST_SUBSYSTEM/*32*/]; //×ÓÏµÍ³ÊÂ¼þ´¥·¢±¨¾¯Êä³ö¹Ø±Õ,wSubSystemEvent[0]±íÊ¾×ÓÏµÍ³1£¬dwSubSystemEvent[2]±íÊ¾×ÓÏµÍ³2£¬¾ßÌåµÄ×ÓÏµÍ³¸öÊý´ÓÄÜÁ¦¼¯»ñÈ¡£¨wSubSystem£©£¬Ã¿¸ö×ÓÏµÍ³µÄÊÂ¼þ°´Î»±íÊ¾£¬bit0-½øÈëÑÓÊ±£¬bit1-ÍË³öÑÓÊ±£¬bit2-²¼·À£¬bit3-³··À£¬bit4-±¨¾¯£¬bit5-Ïû³ý±¨¾¯¼ÇÒä,bit6-±¨¾¯»Ö¸´,bit7-·ÀÇø·À²ð,bit8-·ÀÇø·À²ð»Ö¸´
    BYTE    byRes[128];
}NET_DVR_TRIGGER_EVENT, *LPNET_DVR_TRIGGER_EVENT;

//¹ÊÕÏ´¦ÀíÅäÖÃ
typedef struct  tagNET_DVR_ALARMHOST_FAULT_CFG
{
    DWORD     dwSize;
    DWORD    dwCheckFault;    //ÊÇ·ñ¼ì²â¹ÊÕÏ£¬bit0-½»Á÷µç¶Ïµç£¬bit1-Ðîµç³ØÇ·Ñ¹£¬bit2-Ö÷»ú·À²ð¿ª£¬bit3-µç»°ÏßµôÏß£¬bit4-485Éè±¸Òì³££¬bit5-ÍøÂç¹ÊÕÏ£¬bit6-ÎÞÏßÒì³££¬bit7-À©Õ¹×ÜÏßÒì³££¬bit8-Ó²ÅÌÒì³££¬, bit11-·ÀÇøÀ©Õ¹°åÒì³££¬¾ßÌåÖ§³ÖµÄ¹ÊÕÏÀàÐÍ´ÓÄÜÁ¦¼¯»ñÈ¡
    DWORD    dwOverallFaultJointLED;        //¹ÊÕÏ¹ØÁªÈ«¾Ö¼üÅÌÖ¸Ê¾µÆÊä³ö bit0-½»Á÷µç¶Ïµç£¬bit1-Ðîµç³ØÇ·Ñ¹£¬bit2-Ö÷»ú·À²ð¿ª£¬bit3-µç»°ÏßµôÏß£¬bit4-485Éè±¸Òì³££¬bit5-ÍøÂç¹ÊÕÏ£¬bit6-ÎÞÏßÒì³££¬bit7-À©Õ¹×ÜÏßÒì³££¬bit8-Ó²ÅÌÒì³££¬¾ßÌåÖ§³ÖµÄ¹ÊÕÏÀàÐÍ´ÓÄÜÁ¦¼¯»ñÈ¡
    DWORD    dwOverallFaultJointSound;    //¹ÊÕÏ¹ØÁªÈ«¾Ö¼üÅÌÉùÒôÊä³ö bit0-½»Á÷µç¶Ïµç£¬bit1-Ðîµç³ØÇ·Ñ¹£¬bit2-Ö÷»ú·À²ð¿ª£¬bit3-µç»°ÏßµôÏß£¬bit4-485Éè±¸Òì³££¬bit5-ÍøÂç¹ÊÕÏ£¬bit6-ÎÞÏßÒì³££¬bit7-À©Õ¹×ÜÏßÒì³££¬bit8-Ó²ÅÌÒì³££¬¾ßÌåÖ§³ÖµÄ¹ÊÕÏÀàÐÍ´ÓÄÜÁ¦¼¯»ñÈ¡
    DWORD    dwSubSystemFaultJointLED[MAX_ALARMHOST_SUBSYSTEM]; /*¹ÊÕÏ¹ØÁª×ÓÏµÍ³¼üÅÌÖ¸Ê¾µÆÊä³ö£¬dwSubSystemFaultJointLED[0]±íÊ¾×ÓÏµÍ³1µÄ¹ØÁªÐÅÏ¢¡£dwSubSystemFaultJointLED[0]µÄÃ¿Ò»Î»±íÊ¾Ò»ÖÐ¹ÊÕÏ£¬bit0-½»Á÷µç¶Ïµç£¬bit1-Ðîµç³ØÇ·Ñ¹£¬bit2-Ö÷»ú·À²ð¿ª£¬bit3-µç»°ÏßµôÏß£¬bit4-485Éè±¸Òì³££¬bit5-ÍøÂç¹ÊÕÏ£¬bit6-ÎÞÏßÒì³££¬bit7-À©Õ¹×ÜÏßÒì³££¬bit8-Ó²ÅÌÒì³£; dwSubSystemFaultJointLED[1]±íÊ¾×ÓÏµÍ³2£¬ÒÔ´ËÀàÍÆ*/
    DWORD    dwSubSystemFaultJointSound[MAX_ALARMHOST_SUBSYSTEM];/*¹ÊÕÏ¹ØÁª×ÓÏµÍ³¼üÅÌÉùÒôÊä³ö£¨ÉùÒôÔÚ¼üÅÌÉÏÊä³ö£©dwSubSystemFaultJointLED[0]±íÊ¾×ÓÏµÍ³1µÄ¹ØÁªÐÅÏ¢¡£dwSubSystemFaultJointSound [0]µÄÃ¿Ò»Î»±íÊ¾Ò»ÖÐ¹ÊÕÏ£¬bit0-½»Á÷µç¶Ïµç£¬bit1-Ðîµç³ØÇ·Ñ¹£¬bit2-Ö÷»ú·À²ð¿ª£¬bit3-µç»°ÏßµôÏß£¬bit4-485Éè±¸Òì³££¬bit5-ÍøÂç¹ÊÕÏ£¬bit6-ÎÞÏßÒì³££¬bit7-À©Õ¹×ÜÏßÒì³££¬bit8-Ó²ÅÌÒì³£; dwSubSystemFaultJointSound [1]±íÊ¾×ÓÏµÍ³2£¬ÒÔ´ËÀàÍÆ*/
    DWORD    dwFaultJointFaultLight;//¹ÊÕÏ¹ØÁª¹ÊÕÏµÆÊä³ö
    BYTE    byRes[60];
}NET_DVR_ALARMHOST_FAULT_CFG, *LPNET_DVR_ALARMHOST_FAULT_CFG;

typedef struct tagNET_DVR_LIST_INFO
{
    DWORD    dwSize;
    BYTE    byIndex;            //×ÓÏµÍ³ºÅ£¬0xff±íÊ¾ËùÓÐ×ÓÏµÍ³
    BYTE       byRes[63];      //±£Áô
}NET_DVR_LIST_INFO, *LPNET_DVR_LIST_INFO;

#define CID_CODE_LEN 4
typedef enum tagNET_DVR_ALARMHOST_REPORT_TYPE
{
    NET_DVR_DEFENCE_ALARM = 1,        //·ÀÇø±¨¾¯
        NET_DVR_VIDEO_ALARM,            //ÊÓÆµ±¨¾¯
        NET_DVR_VIRTUAL_DEFENCE_ALARM,    //Èí·ÀÇø±¨¾¯
        NET_DVR_HOSTAGE_ALARM,            //Ð®³Ö±¨¾¯
        NET_DVR_KNOCK_DOWN_ALARM,        //·À²ð±¨¾¯
        NET_DVR_OPERATE_ALARM,            //²Ù×÷±¨¸æ
        NET_DVR_OHTER_ABNORMAL_ALARM    //Òì³£±¨¸æ
}NET_DVR_ALARMHOST_REPORT_TYPE;


typedef enum tagNET_DVR_ALARMHOST_CID_MAIN_TYPE
{
    CID_ENTER = 1000,    /*´¥·¢±¨¸æµÄ»ùÊý*/
    CID_EXIT = 3000        /*»Ö¸´±¨¸æµÄ»ùÊý*/
}NET_DVR_ALARMHOST_CID_MAIN_TYPE;


typedef enum tagNET_DVR_ALARMHOST_CID_MINOR_TYPE
{
    CID_ALARM = 103,            /*±¨¾¯*/
    CID_FIRE_ALARM = 110,       /*»ð¾¯*/
    CID_ABDUCT_REPORT = 121,    /*Ð®³Ö±¨¸æ*/
    CID_SILENT_24 = 122,        /*24Ð¡Ê±ÎÞÉù*/
    CID_AUDIO_24 = 123,         /*24Ð¡Ê±ÓÐÉù*/
    CID_AUXILIARY_24 = 124,     /*24Ð¡Ê±¸¨Öú*/
    CID_SHOCK_24 = 125,         /*24Ð¡Ê±Õð¶¯*/
    CID_PERIMETER_ALARM = 131,  /*ÖÜ½ç*/
    CID_INNET_ALARM = 132,      /*ÄÚ²¿·ÀÇø*/
    CID_ENTER_EXIT = 134,       /*³öÈë*/
    CID_DEVICE_OPEN = 137,      /*Éè±¸·À²ð*/
    CID_ZONE_BUS_BREAK = 141,   // ×ÜÏß¿ªÂ·
    CID_ZONE_BUS_SHORT = 142,   // ×ÜÏß¶ÌÂ·
    
    CID_AC_LOSS = 301,          /*½»Á÷µôµç*/
    CID_LOW_BATT_VOL = 302,     /*Ðîµç³ØµçÑ¹µÍ*/
    CID_DEV_RESET = 305,        /*Ö÷»ú¸´Î»*/
    CID_MBUS_MODEL_FAULT = 333, // À©Õ¹Ä£¿é¹ÊÕÏ
    CID_PRINTER_FAIL = 336,     /*´òÓ¡»úµôÏß*/
    CID_LINE_LOSS = 354,          // µç»°ÏßÍ¨Ñ¶Ê§°Ü
    CID_BUS_LOSS = 382,         /*À©Õ¹×ÜÏßÄ£¿éµôÏß*/
    CID_DETECTOR_OPEN = 383,     /*·ÀÇø¸ÐÓ¦Æ÷±»²ð*/

    CID_GUARD = 401,            /*²¼·À³··À*/
    CID_GUARD_AUTO = 403,       /*×Ô¶¯²¼³··À*/
    CID_CANCEL_ARM = 406,       /*Ïû¾¯*/
    CID_GUARD_IMME = 408,       /*¼´Ê±²¼³··À*/
    CID_KEY_ZONE_GUARD = 409,   /*Ô¿³×·ÀÇø²¼³··À*/
    CID_GUARD_STAY = 441,       /*ÁôÊØ²¼³··À*/
    CID_FORCED_ARM = 442,       /*Ç¿ÖÆ²¼·À*/
    CID_AUTOCTRL_TRIG = 443,    /*¶¨Ê±¿ª/¹Ø´¥·¢Æ÷*/
    CID_ONETOUCH_AWAY_ARMING = 444, /*Ò»¼üÍâ³ö²¼·À*/
    CID_ONETOUCH_STAY_ARMING = 445, /*Ò»¼üÁôÊØ²¼·À*/
    CID_CARD_ARMING_OR_DISARMING = 446, /*Ë¢¿¨²¼³··À*/
    CID_AUTOGUARD_FAIL = 455,   /*×Ô¶¯²¼·ÀÊ§°Ü*/
    CID_AOPEN_TRIG_FAIL = 460,  /*¶¨Ê±¿ªÆô´¥·¢Æ÷Ê§°Ü*/
    CID_ACLOSE_TRIG_FAIL = 461, /*¶¨Ê±¹Ø±Õ´¥·¢Æ÷Ê§°Ü*/
    CID_AUTOUNGUARD_FAIL = 462, /*×Ô¶¯³··ÀÊ§°Ü*/

    CID_BYPASS = 570,           /*ÅÔÂ·ÊÂ¼þ*/
    CID_GROUP_BYPASS = 574,     /*×éÅÔÂ·*/

    CID_MANUAL_TEST_RPT = 601,  /*ÊÖ¶¯²âÊÔ±¨¸æ*/
    CID_AUTO_TEST_RPT = 602,    /*¶¨Ê±²âÊÔ±¨¸æ*/
    CID_ENTER_PROG = 627,       /*½øÈë±à³Ì*/
    CID_EXIT_PROG = 628,        /*ÍË³ö±à³Ì*/

    CID_SOFT_INSTAND = 810,     /*Èí·ÀÇø½ô¼±±¨¾¯*/
    CID_SOFT_FIRE = 811,        /*Èí·ÀÇø»ð¾¯*/
    CID_SOFT_MOBS = 812,        /*Èí·ÀÇø·Ë¾¯mobster*/
    
    CID_KEY_FAIL = 910,         /*¼üÅÌµôÏß*/
    CID_TRIGGER_FAIL = 911,     /*¼üÅÌ×ÜÏßÉÏ´¥·¢Æ÷µôÏß*/
    CID_GPK_FAIL = 912,         /*¼üÅÌ×ÜÏßÉÏGP/KµôÏß*/
    CID_MODULE_FAIL = 913,      /*¼üÅÌ×ÜÏßÉÏMN/KµôÏß*/
    CID_WRIE_LESS_NET = 920,    /*ÎÞÏßÍøÂç¹ÊÕÏ*/
    CID_SIM_FAULT = 921,        /*SIM¿¨¹ÊÕÏ*/
    CID_IPADDR_CONFLICT = 930,  /*IP³åÍ»*/
    CID_ETHERNET_BROKEN = 931,  /*ÍøÏß¶Ï*/
    CID_GROUP_OUT_RP = 932,       // ×é¼äÍ¨Ñ¶Ê§°Ü
    CID_GROUP_IN_RP = 933,        // Í¨µÀÍ¨Ñ¶Ê§°Ü
    CID_MOTION_DECTECT = 940,   /*ÒÆ¶¯Õì²â±¨¾¯¿ªÊ¼/½áÊø*/
    CID_MASK_ALARM = 941,       /*ÕÚµ²±¨¾¯¿ªÊ¼/½áÊø*/
    CID_VI_LOST = 942,          /*ÊÓÆµ¶ªÊ§¿ªÊ¼/½áÊø*/
    CID_VS_MISMATCH = 943,      /*ÊäÈë/Êä³öÊÓÆµÖÆÊ½²»Æ¥Åä*/
    CID_VI_EXCEPTION = 944,     /*ÊÓÆµÊäÈëÒì³£/»Ö¸´Õý³£*/
    CID_HD_FULL = 945,          /*Ó²ÅÌÂú/»Ö¸´Õý³£*/
    CID_HD_ERROR = 946,         /*Ó²ÅÌ´í/»Ö¸´Õý³£*/
    CID_PIC_SEND_FAILED = 947,  /*Í¼Æ¬ÉÏ´«Ê§°Ü*/
    CID_KEY_LOCKED = 948,      /*¼üÅÌËø¶¨*/
    CID_ZONE_BUS_SEARCH = 970,    // ×ÜÏßËÑË÷
    CID_ZONE_BUS_REGIST = 971,    // ×ÜÏß×¢²á
    CID_GUARD_DELAY_OP = 972,     // ×Ô¶¯²¼³··ÀÑÓÊ±²Ù×÷
    CID_GUARD_SINGLE = 973     /*µ¥·ÀÇø²¼³··À*/
}NET_DVR_ALARMHOST_CID_MINOR_TYPE;


typedef struct tagNET_DVR_CID_ALARM
{
    DWORD    dwSize;
    BYTE    sCIDCode[CID_CODE_LEN/*4*/];    //CIDÊÂ¼þºÅ
    BYTE    sCIDDescribe[NAME_LEN/*32*/];    //CIDÊÂ¼þÃû
    NET_DVR_TIME_EX struTriggerTime;            //´¥·¢±¨¾¯µÄÊ±¼äµã
    NET_DVR_TIME_EX struUploadTime;                //ÉÏ´«±¨¾¯µÄÊ±¼äµã
    BYTE    sCenterAccount[ACCOUNTNUM_LEN/*6*/];    //ÖÐÐÄÕÊºÅ
    BYTE    byReportType;                    //¼û¶¨ÒåNET_DVR_ALARMHOST_REPORT_TYPE
    BYTE    byUserType;                        //ÓÃ»§ÀàÐÍ£¬0-ÍøÂçÓÃ»§ 1-¼üÅÌÓÃ»§,2-ÊÖ»úÓÃ»§,3-ÏµÍ³ÓÃ»§
    BYTE    sUserName[NAME_LEN/*32*/];        //ÍøÂçÓÃ»§ÓÃ»§Ãû
    WORD    wKeyUserNo;                        //¼üÅÌÓÃ»§ºÅ    0xFFFF±íÊ¾ÎÞÐ§
    BYTE    byKeypadNo;                        //¼üÅÌºÅ        0xFF±íÊ¾ÎÞÐ§
    BYTE    bySubSysNo;                        //×ÓÏµÍ³ºÅ        0xFF±íÊ¾ÎÞÐ§
    WORD    wDefenceNo;                        //·ÀÇøºÅ        0xFFFF±íÊ¾ÎÞÐ§
    BYTE    byVideoChanNo;                    //ÊÓÆµÍ¨µÀºÅ    0xFF±íÊ¾ÎÞÐ§
    BYTE    byDiskNo;                        //Ó²ÅÌºÅ        0xFF±íÊ¾ÎÞÐ§
    WORD    wModuleAddr;                    //Ä£¿éµØÖ·        0xFFFF±íÊ¾ÎÞÐ§
    BYTE    byCenterType;                    //0-ÎÞÐ§, 1-ÖÐÐÄÕËºÅ(³¤¶È6),2-À©Õ¹µÄÖÐÐÄÕËºÅ(³¤¶È9)
    BYTE    byRes1;
    BYTE    sCenterAccountV40[ACCOUNTNUM_LEN_32/*32*/];    //ÖÐÐÄÕËºÅV40,Ê¹ÓÃ´Ë×Ö¶ÎÊ±sCenterAccountÎÞÐ§
    BYTE    byRes2[28];
}NET_DVR_CID_ALARM, *LPNET_DVR_CID_ALARM;

#define MODULE_INFO_LEN            32    //Ä£¿éÐÅÏ¢³¤¶È
#define VERSION_INFO_LEN        32    //°æ±¾ÐÅÏ¢³¤¶È

typedef struct tagNET_DVR_ALARMHOST_MODULE_CFG
{
    DWORD dwSize;
    BYTE    byModuleType;    //1-·ÀÇø£¬2-´¥·¢Æ÷ 3-·ÀÇø´¥·¢Æ÷      
    BYTE    byZoneType;        //·ÀÇøÀàÐÍ£¬1-±¾µØ·ÀÇø£¬2-µ¥·ÀÇø£¬3-Ë«·ÀÇø£¬4-8·ÀÇø£¬5-8Â·Ä£ÄâÁ¿·ÀÇø£¬6-µ¥·ÀÇø´¥·¢Æ÷£¬0xff±íÊ¾¸Ã²ÎÊýÎÞÐ§
    BYTE    byTriggerType;    //´¥·¢Æ÷ÀàÐÍ£¬1-±¾µØ´¥·¢Æ÷£¬ 2-4Â·´¥·¢Æ÷£¬3-8Â·´¥·¢Æ÷£¬4-µ¥·ÀÇø´¥·¢Æ÷£¬0xff±íÊ¾¸Ã²ÎÊýÎÞÐ§
    BYTE    byRes1[1];
    char    sModelInfo[MODULE_INFO_LEN];                //Ä£¿éÐÅÏ¢
    char    sDeviceVersionInfo[VERSION_INFO_LEN];                /* °æ±¾ÐÅÏ¢*/
    BYTE    byRes[188];
} NET_DVR_ALARMHOST_MODULE_CFG, *LPNET_DVR_ALARMHOST_MODULE_CFG;


#define MAX_DECODE_CARD_SUPPORTDISPNUMS 8//Ã¿¸ö½âÂë¿¨×î¶àÖ§³ÖµÄÏÔÊ¾Í¨µÀÊý
#define MAX_SUPPORT_RES 32
typedef struct tagNET_DVR_DECCARD_ABILITY_V41 /*¸ßÇå½âÂë¿¨ÄÜÁ¦¼¯*/
{
    BYTE byCardType;      //½âÂë¿¨ÀàÐÍ(0:MD,1:MD+,2:HD)
    BYTE byDecNums;      //½âÂëÍ¨µÀÊý 
    BYTE byDispNums;      //ÏÔÊ¾Í¨µÀÊý 
    BYTE byDecStartIdx;     //Ê×¸ö½âÂëÍ¨µÀÔÚËùÓÐ½âÂëÍ¨µÀÖÐµÄË÷Òý 
    BYTE byDispStartIdx;     //Ê×¸öÏÔÊ¾Í¨µÀÔÚËùÓÐÏÔÊ¾Í¨µÀÖÐµÄË÷Òý
    BYTE byRes1[3]; 
    DWORD dwVgaSupportResolution[MAX_SUPPORT_RES/*32*/];//Ö§³ÖµÄ·Ö±æÂÊ
    DWORD dwHdmiSupportResolution[MAX_SUPPORT_RES/*32*/];//Ö§³ÖµÄ·Ö±æÂÊ
    DWORD dwDviSupportResolution[MAX_SUPPORT_RES/*32*/];//Ö§³ÖµÄ·Ö±æÂÊ
    DWORD dwYpbprSupportResolution[MAX_SUPPORT_RES/*32*/];//Ö§³ÖµÄ·Ö±æÂÊ
    BYTE byDispFormat[MAX_DECODE_CARD_SUPPORTDISPNUMS];   //Ö§³ÖµÄÊä³öÄ£Ê½(°´HD_DISPLAY_FORMATÖÐµÄÃ¶¾Ù) 
    BYTE byWindowMode[MAX_DECODE_CARD_SUPPORTDISPNUMS][12]; //Ö§³ÖµÄ´°¿ÚÄ£Ê½(±ÈÈç1,2,4,9,16))
    BYTE byRes2[36];
} NET_DVR_DECCARD_ABILITY_V41,*LPNET_DVR_DECCARD_ABILITY_V41;

#define        MAX_DECODE_CARD_NUM            6   //×î¶à¸ßÇå½âÂë¿¨Êý
typedef struct tagNET_DVR_DECODESVR_ABILITY_V41
{
    DWORD dwSize;      /* ½á¹¹Ìå´óÐ¡ */
    BYTE byCardNums;      /* ½âÂë¿¨Êý */
    BYTE byStartChan;     /* ÆðÊ¼Í¨µÀºÅ */
    BYTE byRes1[2];
    NET_DVR_DECCARD_ABILITY_V41 struDecCardAbility[MAX_DECODE_CARD_NUM];
    BYTE byRes2[64];
}NET_DVR_DECODESVR_ABILITY_V41, *LPNET_DVR_DECODESVR_ABILITY_V41;

// Á÷Â¼Ïñ×´Ì¬
typedef struct tagNET_DVR_STREAM_RECORD_STATUS
{
    DWORD           dwSize;
    BYTE            byRecord;         //(Ö»¶Á)Â¼ÏñÀàÐÍ, 0£º²»ÔÚÂ¼Ïñ£¬1£ºÔÚÂ¼Ïñ 2-¿ÕÏÐ 
    //3-ÎÞÁ¬½Ó 4-ÎÞÊäÈëÊÓÆµ 5-Î´¼ÓÔØ 6-´æµµÖÐ
    //7-»Ø´«ÖÐ 8-ÓÃ»§Ãû»òÃÜÂë´í 9-Î´ÑéÖ¤
    //10-´æµµÖÐºÍÂ¼ÏñÖÐ 11-Â¼Ïñ»Ø´«ÖÐºÍÂ¼ÏñÖÐ
    BYTE            byOffLineRecord;  //¶ÏÍøÂ¼Ïñ¹¦ÄÜ 0-¹Ø±Õ 1-¿ªÆô
    BYTE            byRes1[2];        //±£Áô×Ö½Ú
    DWORD            dwRelatedHD;      //¹ØÁª´ÅÅÌ
    BYTE            byRes2[8];        //±£Áô×Ö½Ú
}NET_DVR_STREAM_RECORD_STATUS, *LPNET_DVR_STREAM_RECORD_STATUS;

#define  CHAN_NO_LEN   24

typedef struct tagNET_DVR_DIRECT_CONNECT_CHAN_INFO
{
    BYTE        byEnable;                    //ÊÇ·ñÆôÓÃ
    BYTE        byProType;                    //Ð­ÒéÀàÐÍ£¬0-Ë½ÓÐÐ­Òé(default), (ÐèÒª´ÓÉè±¸»ñÈ¡ÄÜÁ¦)
    BYTE          byZeroChan;                    //ÊÇ·ñÊÇÁãÍ¨µÀ,0-²»ÊÇ£¬1-ÊÇ
    BYTE        byPriority;                //ÓÅÏÈ¼¶
    BYTE        sUserName[NAME_LEN];        //ÓÃ»§Ãû
    BYTE        sPassword[PASSWD_LEN];        //ÃÜÂë
    BYTE        byDomain[MAX_DOMAIN_NAME];    //Éè±¸ÓòÃû
    NET_DVR_IPADDR  struIP;                        //IPµØÖ·
    WORD        wDVRPort;                     //¶Ë¿ÚºÅ
    BYTE        byStreamType;               //Ö÷ÂëÁ÷:0; ×ÓÂëÁ÷£º1
    BYTE        byOnline;                    //Ö»¶Á£¬0-²»ÔÚÏß 1-ÔÚÏß
    DWORD        dwChannel;                  //Í¨µÀºÅ
    BYTE        byTransProtocol;            //Ð­ÒéÀàÐÍ£¬0-TCP£¬1-UDP£¬2-¶à²¥
    BYTE        byLocalBackUp;                //±¾µØ±¸·Ý: 0-²»ÆôÓÃCVR±¾µØ±¸·Ý£¬1-ÆôÓÃCVR±¾µØ±¸·Ý--¼´»Ø·ÅÊ±µÄÁ÷Ò»·ÝÔÚÂ¼Ïñ¾í£¬Ò»·ÝÔÚ´æµµ¾í£¨±¾µØ±¸·Ý£©
    WORD        wDirectLastTime;            //µ¼²¥³ÖÐøÊ±¼ä
    BYTE        byChanNo[CHAN_NO_LEN];     //Í¨µÀ±àºÅ--ÓÃÓÚVAGÈ¡Á÷
}NET_DVR_DIRECT_CONNECT_CHAN_INFO, *LPNET_DVR_DIRECT_CONNECT_CHAN_INFO;

typedef struct tagNET_DVR_DIRECT_CONNECT_CHAN_INFO_V40
{
    BYTE    byEnable;                    //ÊÇ·ñÆôÓÃ
    BYTE    byProType;                    //Ð­ÒéÀàÐÍ£¬0-Ë½ÓÐÐ­Òé(default), 1-ËÉÏÂÐ­Òé£¬2-Ë÷Äá, 3-´ó»ª (ÐèÒª´ÓÉè±¸»ñÈ¡ÄÜÁ¦)
    BYTE    byZeroChan;                    //ÊÇ·ñÊÇÁãÍ¨µÀ,0-²»ÊÇ£¬1-ÊÇ
    BYTE    byRes1;                        //±£Áô×Ö¶Î£¬ÖÃ0
    BYTE    sUserName[NAME_LEN];        //ÓÃ»§Ãû
    BYTE    sPassword[PASSWD_LEN];        //ÃÜÂë
    BYTE    byAddress[MAX_DOMAIN_NAME];  //Ç°¶ËIP»òÕßÓòÃû,ÐèÒªÉè±¸ ½âÎö·½Ê½ÎªÓÐ×ÖÄ¸´æÔÚÇÒÓÐ'.'ÔòÈÏÎªÊÇÓòÃû,·ñÔòÎªIPµØÖ·
    WORD    wDVRPort;                     //¶Ë¿ÚºÅ
    BYTE    byStreamType;               //Ö÷ÂëÁ÷:0; ×ÓÂëÁ÷£º1
    BYTE    byOnline;                    //Ö»¶Á£¬0-²»ÔÚÏß 1-ÔÚÏß
    DWORD   dwChannel;                //Í¨µÀºÅ
    BYTE    byTransProtocol;            //´«ÊäÐ­ÒéÀàÐÍ£¬0-TCP£¬1-UDP 2-¶à²¥
    BYTE    byLocalBackUp;                     //±¾µØ±¸·Ý£¬0-²»ÆôÓÃCVR±¾µØ±¸·Ý£¬1-ÆôÓÃCVR±¾µØ±¸·Ý--¼´Â¼ÏñÊ±µÄÁ÷Ò»·ÝÔÚÂ¼Ïñ¾í£¬Ò»·ÝÔÚ´æµµ¾í£¨±¾µØ±¸·Ý£©
    BYTE    byRes2[2];                //±£Áô×Ö¶Î£¬ÖÃ0
    BYTE    byVAGChanNo[MAX_VAG_CHANNO_LEN];     //Ð­ÒéÀàÐÍÎªVAGÊ±£¬¶ÔÓ¦µÄVAGÍ¨µÀ±àºÅ
    BYTE    byRes[340];
}NET_DVR_DIRECT_CONNECT_CHAN_INFO_V40, *LPNET_DVR_DIRECT_CONNECT_CHAN_INFO_V40;


typedef struct tagNET_DVR_PU_STREAM_URL_CFG
{ 
    BYTE    byEnable;  
    BYTE    byRes[3]; 
    BYTE    byStreamMediaIP[64];//Á÷Ã½ÌåIP 
    WORD    wStreamMediaPort; //Á÷Ã½Ìå¶Ë¿Ú
    BYTE    byTransmitType; //Á÷Ã½Ìå´«ÊäÐ­Òé 0- TCP  1- UDP
    BYTE    byRes1[33];
    BYTE    byDevIP[64]; //Éè±¸IP 
    WORD    wDevPort; //Éè±¸¶Ë¿Ú
    BYTE    byChannel; //Í¨µÀºÅ
    BYTE    byTransMode; //´«ÊäÄ£Ê½ 0-Ö÷ÂëÁ÷ 1- ×ÓÂëÁ÷ 
    BYTE    byProType;    
    //³§¼ÒÀàÐÍ 0-Ë½ÓÐ 1-´ó»ª 2-ºº°î 3-ÀÉ³Û 4-À¶É«ÐÇ¼Ê NET_DVR_GetIPCProtoList½Ó¿Ú»ñÈ¡
    //VQDÁ÷Ã½ÌåÏÂÖ»Ö§³Ö 0£¬1·½Ê½£»Ö±Á¬Ö§³Ö 0£¬1£¬2£¬3£¬4
    BYTE    byTransProtocol; //´«ÊäÐ­ÒéÀàÐÍ0-TCP,  1-UDP,  2-¶à²¥·½Ê½,  3-RTP
    BYTE    byRes3[2];
    BYTE    sUserName[NAME_LEN];   //Éè±¸µÇÂ½ÓÃ»§Ãû
    BYTE    sPassWord[PASSWD_LEN]; // Éè±¸µÇÂ½ÃÜÂë
    BYTE    byRes2[28];  //Ô¤Áô  
}NET_DVR_PU_STREAM_URL_CFG, *LPNET_DVR_PU_STREAM_URL_CFG;

typedef struct tagNET_DVR_PU_STREAM_URL_CFG_V40
{ 
    BYTE    byEnable;  
    BYTE    byRes[3]; 
    BYTE    byStreamMediaIP[64];//Á÷Ã½ÌåIP 
    WORD   wStreamMediaPort; //Á÷Ã½Ìå¶Ë¿Ú
    BYTE    byTransmitType; //Á÷Ã½Ìå´«ÊäÐ­Òé 0- TCP  1- UDP
    BYTE    byRes1;
    BYTE    byDevIP[64]; //Éè±¸IP 
    WORD   wDevPort; //Éè±¸¶Ë¿Ú
    BYTE    byChannel; //Í¨µÀºÅ
    BYTE    byTransMode; //´«ÊäÄ£Ê½ 0-Ö÷ÂëÁ÷ 1- ×ÓÂëÁ÷ 
    BYTE    byProType;    
    //³§¼ÒÀàÐÍ 0-º£¿µ 1-´ó»ª 2-ºº°î 3-ÀÉ³Û 4-À¶É«ÐÇ¼Ê NET_DVR_GetIPCProtoList½Ó¿Ú»ñÈ¡
    //VQDÁ÷Ã½ÌåÏÂÖ»Ö§³Ö 0£¬1·½Ê½£»Ö±Á¬Ö§³Ö 0£¬1£¬2£¬3£¬4
    BYTE    byTransProtocol; //´«ÊäÐ­ÒéÀàÐÍ0-TCP,  1-UDP  2-¶à²¥·½Ê½
    BYTE    byRes3[2];
    BYTE    sUserName[NAME_LEN];   //Éè±¸µÇÂ½ÓÃ»§Ãû
    BYTE    sPassWord[PASSWD_LEN]; // Éè±¸µÇÂ½ÃÜÂë
    BYTE    byRes2[308];  //Ô¤Áô  
}NET_DVR_PU_STREAM_URL_CFG_V40, *LPNET_DVR_PU_STREAM_URL_CFG_V40;

typedef struct tagNET_DVR_STREAM_URL_V40
{
    BYTE    byEnable; 
    BYTE    byStreamType; //Ö÷×ÓÂëÁ÷
    BYTE    byLocalBackUp; //ÊÇ·ñ±¾µØ±¸·Ý
    BYTE     byRes;
    BYTE    strURL[URL_LEN_V40]; //Á÷Ã½ÌåURL£¬¿ÉÒÔ¼¶Áª
    DWORD   dwProtocalType;   //IPCÐ­ÒéÀàÐÍÖµ£¬¿ÉÒÔÍ¨¹ý»ñÈ¡IPCÐ­ÒéÁÐ±íµÃµ½
    BYTE    sUserName[NAME_LEN];   //Éè±¸µÇÂ½ÓÃ»§Ãû
    BYTE    sPassWord[PASSWD_LEN]; // Éè±¸µÇÂ½ÃÜÂë
    BYTE    byAddress[MAX_DOMAIN_NAME];  //Á÷À´Ô´IP»òÕßÓòÃû,ÐèÒª½âÎö ½âÎö·½Ê½ÎªÓÐ×ÖÄ¸´æÔÚÇÒÓÐ'.'ÔòÈÏÎªÊÇÓòÃû,·ñÔòÎªIPµØÖ·
    WORD    wIPPort;  //Á÷À´Ô´¶ÔÓ¦µÄ¶Ë¿ÚºÅ
    WORD    wChanNo; //Á÷À´Ô´Éè±¸IPÍ¨µÀºÅ
    BYTE    byVAGChanNo[MAX_VAG_CHANNO_LEN];     //Á÷À´Ô´Í¨µÀ±àºÅ,ÓÃÓÚVAG¹¦ÄÜ
    BYTE     byRes1[88];   
}NET_DVR_STREAM_URL_V40, *LPNET_DVR_STREAM_URL_V40;

typedef union tagNET_DVR_STREAM_TYPE_UNION
{
    NET_DVR_DIRECT_CONNECT_CHAN_INFO    struChanInfo;          //IPÍ¨µÀÐÅÏ¢  ÀàÐÍÖµÎª0
    NET_DVR_PU_STREAM_URL                struStreamUrl;        //Í¨¹ýÁ÷Ã½Ìåµ½urlÈ¡Á÷£¬ÀàÐÍÖµÎª4
    NET_DVR_PU_STREAM_URL_CFG           struStreamUrlCfg; //Í¨¹ýÁ÷Ã½Ìåµ½Ö¸¶¨¼à¿ØÉè±¸ÉÏÈ¡Á÷£¬ÀàÐÍÖµÎª6
}NET_DVR_STREAM_TYPE_UNION, *LPNET_DVR_STREAM_TYPE_UNION;

typedef union tagNET_DVR_STREAM_TYPE_V40_UNION
{
    NET_DVR_DIRECT_CONNECT_CHAN_INFO_V40    struChanInfo;     //IPÍ¨µÀÐÅÏ¢£¬ÀàÐÍÖµÎª0
    NET_DVR_PU_STREAM_URL struPuStreamUrl;        //Í¨¹ýÁ÷Ã½Ìåµ½urlÈ¡Á÷£¬ÀàÐÍÖµÎª4
    NET_DVR_PU_STREAM_URL_CFG_V40   struStreamUrlCfg; //Í¨¹ýÁ÷Ã½Ìåµ½×éºÏurlÈ¡Á÷£¬ÀàÐÍÖµÎª6
    NET_DVR_RTSP_PROTOCAL_CFG struRtspCfg;        //ÓÉ±ê×¼RTSP½ÓÈëÈ¡Á÷ ÀàÐÍÖµ7
    NET_DVR_STREAM_URL_V40  struStreamUrlV40;  //Í¨¹ýÁ÷Ã½Ìå£¨Ö§³Ö¼¶Áª·½Ê½£©ÏòÁ÷À´Ô´È¡Á÷£¬ÀàÐÍÖµÎª8
}NET_DVR_STREAM_TYPE_V40_UNION, *LPNET_DVR_STREAM_TYPE_V40_UNION;


typedef struct tagNET_DVR_STREAM_MODE_TYPE
{
    BYTE                    byGetStreamType;    //È¡Á÷·½Ê½£¬0-Ö±½Ó´ÓÉè±¸È¡Á÷£¬1-´ÓÁ÷Ã½ÌåÈ¡Á÷¡¢2-Í¨¹ýIPServer»ñµÃipµØÖ·ºóÈ¡Á÷, 3.Í¨¹ýIPServerÕÒµ½Éè±¸£¬ÔÙÍ¨¹ýÁ÷Ã½ÌåÈ¥Éè±¸µÄÁ÷ 4-Í¨¹ýÁ÷Ã½ÌåÓÉURLÈ¥È¡Á÷
    BYTE                    byRes[3];            // ±£Áô×Ö½Ú
    NET_DVR_STREAM_TYPE_UNION    uGetStream;            // ²»Í¬È¡Á÷·½Ê½½á¹¹Ìå
}NET_DVR_STREAM_MODE_TYPE, *LPNET_DVR_STREAM_MODE_TYPE;

// Á÷À´Ô´ÐÅÏ¢
typedef struct tagNET_DVR_STREAM_SRC_INFO
{
    DWORD                        dwSize;
    NET_DVR_STREAM_MODE_TYPE    struStreamSrcInfo;
}NET_DVR_STREAM_SRC_INFO,*LPNET_DVR_STREAM_SRC_INFO;

typedef struct tagNET_DVR_STREAM_SRC_INFO_V40
{
    DWORD                    dwSize;
    BYTE                    byGetStreamType;    //È¡Á÷·½Ê½£¬0-Ö±½Ó´ÓÉè±¸È¡Á÷£¬1-´ÓÁ÷Ã½ÌåÈ¡Á÷¡¢2-Í¨¹ýIPServer»ñµÃipµØÖ·ºóÈ¡Á÷, 3.Í¨¹ýIPServerÕÒµ½Éè±¸£¬ÔÙÍ¨¹ýÁ÷Ã½ÌåÈ¥Éè±¸µÄÁ÷ 4-Í¨¹ýÁ÷Ã½ÌåÓÉURLÈ¥È¡Á÷ 6-Í¨¹ýÁ÷Ã½Ìåµ½Ö¸¶¨¼à¿ØÉè±¸ÉÏÈ¡Á÷
    BYTE                    byRes1[3];            // ±£Áô×Ö½Ú
    NET_DVR_STREAM_TYPE_V40_UNION    uGetStream;            // ²»Í¬È¡Á÷·½Ê½½á¹¹Ìå
    BYTE                    byRes[512];            // ±£Áô×Ö½Ú
}NET_DVR_STREAM_SRC_INFO_V40,*LPNET_DVR_STREAM_SRC_INFO_V40;


// Á÷Â¼ÏñÐÅÏ¢
typedef struct 
{
    DWORD            dwSize;
    NET_DVR_RECORD_V30    struRecordInfo;
}NET_DVR_STREAM_RECORD_INFO, *LPNET_DVR_STREAM_RECORD_INFO;

// °´Á÷ID¶ÔÊ±¼ä¶Î¼ÓËø
typedef struct tagNET_DVR_STREAM_TIME_LOCK
{
    DWORD            dwSize;                // ½á¹¹Ìå´óÐ¡
    NET_DVR_TIME    strBeginTime;        // ¿ªÊ¼Ê±¼ä
    NET_DVR_TIME    strEndTime;            // ½áÊøÊ±¼ä
    NET_DVR_STREAM_INFO struStreamInfo;        // Á÷ÐÅÏ¢
    DWORD            dwRecordType;        // Â¼ÏñÀàÐÍ:  0xffffffff£­È«²¿£¬£­¶¨Ê±Â¼Ïñ£¬-ÒÆ¶¯Õì²â£¬£­±¨¾¯´¥·¢£¬-±¨¾¯´¥·¢»òÒÆ¶¯Õì²â£¬-±¨¾¯´¥·¢ºÍÒÆ¶¯Õì²â£¬-ÃüÁî´¥·¢£¬-ÊÖ¶¯Â¼Ïñ£¬-ÖÇÄÜÂ¼Ïñ(Í¬ÎÄ¼þ²éÕÒ)
    DWORD            dwLockDuration;        // Ëø¶¨³ÖÐøÊ±¼ä,µ¥Î»Ãë£¬0xffffffff±íÊ¾ÓÀ¾ÃËø¶¨
    NET_DVR_TIME_EX        strUnlockTimePoint;    // ¼ÓËøÊ±ÓÐÐ§£¬µ±dwLockDuration²»ÎªÓÀ¾ÃËø¶¨Ê±£¬Ëø¶¨³ÖÐøµÄÊ±¼äµ½´ËÊ±¼äµã¾Í×Ô¶¯½âËø
    BYTE                byRes[4];
}NET_DVR_STREAM_TIME_LOCK, *LPNET_DVR_STREAM_TIME_LOCK;

// °´ID+Ê±¼ä»Ø·Å½á¹¹Ìå
typedef struct tagNET_DVR_VOD_PARA
{
    DWORD                dwSize;
    NET_DVR_STREAM_INFO struIDInfo; 
    NET_DVR_TIME        struBeginTime;
    NET_DVR_TIME        struEndTime;
    HWND                hWnd;
    BYTE                byDrawFrame; //0:²»³éÖ¡£¬1£º³éÖ¡
    BYTE                byVolumeType;  //0-ÆÕÍ¨Â¼Ïñ¾í  1-´æµµ¾í
    BYTE                byVolumeNum;  //¾íºÅ£¬Ä¿Ç°Ö¸´æµµ¾íºÅ
    BYTE                byStreamType;   //ÂëÁ÷ÀàÐÍ 0-Ö÷ÂëÁ÷£¬ 1-×ÓÂëÁ÷£¬2-ÂëÁ÷Èý
    DWORD                   dwFileIndex;      //´æµµ¾íÉÏµÄÂ¼ÏñÎÄ¼þË÷Òý£¬ËÑË÷´æµµ¾íÂ¼ÏñÊ±·µ»ØµÄÖµ
    BYTE                byAudioFile;    //ÒôÆµÎÄ¼þ0-·ñ£¬1-ÊÇ
    BYTE                byRes2[23];
}NET_DVR_VOD_PARA, *LPNET_DVR_VOD_PARA;

// ÊÖ¶¯Â¼Ïñ
typedef struct tagNET_DVR_MANUAL_RECORD_PARA
{
    NET_DVR_STREAM_INFO struStreamInfo; 
    DWORD            lRecordType;
    BYTE            byRes[32];
}NET_DVR_MANUAL_RECORD_PARA, *LPNET_DVR_MANUAL_RECORD_PARA;


// CABACÂëÁ÷Ñ¹ËõÐÔÄÜÑ¡Ïî£¬¿ªÆô¿ÉÌá¸ß20%£¬Ö»ÓÐÄ£ÄâÍ¨µÀ¿ÉÒÔÓÃ
typedef struct tagNET_DVR_STREAM_CABAC
{
    DWORD        dwSize;                  //½á¹¹Ìå´óÐ¡
    BYTE         byCabacEnable;           //ÂëÁ÷Ñ¹ËõÐÔÄÜÑ¡ÏîÖµ0 ²»ÌáÉý 1 ÌáÉý
    BYTE          byRes1[31];                  //±£Áô
}NET_DVR_STREAM_CABAC, *LPNET_DVR_STREAM_CABAC;

#define  MAX_IOSPEED_GROUP_NUM      4 //IO²âËÙ×é¸öÊý
#define  MAX_IOOUT_NUM              4  //×î´óIOÊä³ö¿Ú¸öÊý
#define  MAX_IOIN_NUM               8  //×î´óIOÊäÈë¿Ú¸öÊý
#define  MAX_RELAY_NUM              12 //¼ÌµçÆ÷¿ØÖÆÉè±¸×î´óÊý 2013-11-04
#define  MAX_VEHICLE_TYPE_NUM        8  //³µÁ¾ÐÅÏ¢¹Ü¿Ø×î´óÊý2013-11-04
#define  MAX_IOIN_NUMEX             10 //×î´óIOÊäÈë¿Ú¸öÊý(À©Õ¹)
#define  MAX_ITC_LANE_NUM           6  //×î´ó³µµÀ¸öÊý
#define  MAX_LANEAREA_NUM           2  //µ¥³µµÀ×î´óÇøÓò¸öÊý
#define  ITC_MAX_POLYGON_POINT_NUM    20    //¼ì²âÇøÓò×î¶àÖ§³Ö20¸öµãµÄ¶à±ßÐÎ
#define  MAX_ITC_SERIALCHECK_NUM    8 //´®¿ÚÐ£ÑéÀàÐÍ¸öÊý
#define  MAX_LIGHT_NUM              6 //×î´ó½»Í¨µÆÊý
#define  MAX_VIDEO_INTERVAL_NUM     2  //×î´ó×¥ÅÄ¼ä¸ôÊý
#define  MAX_VIDEO_DETECT_LIGHT_NUM  12  //ÊÓÆµ¼ì²âµÄ×î´ó¼ì²âÇøÓò
#define  MAX_CALIB_RECOG_NUM        2  //±ê¶¨ÇøÓò¸öÊý
#define  MAX_RS485_NUM  12 //485¿Ú×î´óÖ§³ÖÊý
#define  MAX_MOBILE_POLYGON_NUM     3 //ÒÆ¶¯²¼¿ØÖ§³Ö×î´óÅÆÊ¶ÇøÓò¸öÊý
#define  MAX_MOBILE_DETECTLINE_NUM  3 //ÒÆ¶¯²¼¿ØÖ§³Ö×î´óÎ¥¹æ¼ì²âÏß¸öÊý
#define  MAX_IOOUT_K_NUM            8  //KÏµÁÐ×î´óIOÊä³ö¿Ú¸öÊý

//IOÊä³ö¿Ú²ÎÊý£¨3.1°æ±¾£¨º¬£©Ö®ºó£©
typedef struct tagNET_ITC_IOOUT_PARAM
{
    DWORD    dwSize;
    BYTE     byDefaultStatus;//IOÄ¬ÈÏ×´Ì¬£º0-µÍµçÆ½£¬1-¸ßµçÆ½ 
    BYTE     byIOOutStatus;//IOÆðÐ§Ê±×´Ì¬£º0-µÍµçÆ½£¬1-¸ßµçÆ½£¬2-Âö³å
    BYTE     byMode; //ÉÁ¹âµÆ¹¤×÷·½Ê½,°´Î»±íÊ¾£¬0-±íÊ¾¹¤×÷£¬1-±íÊ¾²»¹¤×÷£¬bit0-ÊÓÆµ£¬bit1-¿¨¿Ú£¬bit2-Î¥ÕÂ
    BYTE     byIOWorkMode;//IOÊä³ö¿Ú¹¤×÷Ä£Ê½£º0-ÉÁ¹âµÆ£¬1-Æ«Õñ¾µ,  2-³£ÁÁµÆ
    DWORD    dwTimeDelay;//IOÓÐÐ§³ÖÐøÊ±¼ä£¬µ¥Î»us
    WORD     wAheadTime;//Êä³öIOÌáÇ°Ê±¼ä£¬µ¥Î»us
    BYTE     byFreqMulti;        //±¶Æµ£¬ÊýÖµ·¶Î§[1,15]
    BYTE     byDutyRate;        //Õ¼¿Õ±È£¬[0,40%]
    BYTE     byDetectBrightness;/*×Ô¶¯¼ì²âÁÁ¶ÈÊ¹ÄÜÉÁ¹âµÆ0-²»¼ì²â£»1-¼ì²â*/
    BYTE     byBrightnessThreld;/*Ê¹ÄÜÉÁ¹âµÆÁÁ¶ÈãÐÖµ£¬·¶Î§[0,100],¸ßÓÚãÐÖµÉÁ*/
    BYTE     byFlashLightEnable;    //ÉèÖÃÉÁ¹âµÆÊ±¼äÊ¹ÄÜ:0-¹Ø;1-¿ª
    BYTE     byStartHour;        //¿ªÊ¼Ê±¼ä-Ð¡Ê±,È¡Öµ·¶Î§0-23
    BYTE     byStartMinute;        //¿ªÊ¼Ê±¼ä-·Ö,È¡Öµ·¶Î§0-59
    BYTE     byEndHour;        //½áÊøÊ±¼ä-Ð¡Ê±,È¡Öµ·¶Î§0-23
    BYTE     byEndMinute;        //½áÊøÊ±¼ä-·Ö,È¡Öµ·¶Î§0-59
    BYTE     byAutoPlateBrightness;// ³µÅÆÁÁ¶È×Ô¶¯Ê¹ÄÜÉÁ¹âµÆ 0-²»ÆôÓÃ 1-ÆôÓÃ
    BYTE     byRes[8];
}NET_ITC_IOOUT_PARAM, *LPNET_ITC_IOOUT_PARAM;

typedef enum _ITC_TRIGGERMODE_TYPE_
{
    ITC_POST_IOSPEED_TYPE              = 0x1,  //IO²âËÙ£¨¿¨¿Ú£©
        ITC_POST_SINGLEIO_TYPE             = 0x2,  //µ¥IO´¥·¢£¨¿¨¿Ú£©
        ITC_POST_RS485_TYPE                = 0x4,  //RS485³µ¼ìÆ÷´¥·¢£¨¿¨¿Ú£©
        ITC_POST_RS485_RADAR_TYPE          = 0x8,  //RS485À×´ï´¥·¢£¨¿¨¿Ú£©
        ITC_POST_VIRTUALCOIL_TYPE          = 0x10,   //ÐéÄâÏßÈ¦´¥·¢£¨¿¨¿Ú£©
        ITC_POST_HVT_TYPE_V50               = 0x20,    //»ìÐÐ¿¨¿ÚÊÓÆµ´¥·¢V50
        ITC_POST_MPR_TYPE                  = 0x40,   //¶àÖ¡Ê¶±ð(¿¨¿Ú)(Ver3.7)
        ITC_POST_PRS_TYPE                  = 0x80,   //ÊÓÆµ¼ì²â´¥·¢ÅäÖÃ
        ITC_EPOLICE_IO_TRAFFICLIGHTS_TYPE  = 0x100,  //IOºìÂÌµÆ£¨µç¾¯£©
        ITC_EPOLICE_RS485_TYPE             = 0x200,  //RS485³µ¼ìÆ÷µç¾¯´¥·¢£¨µç¾¯£©
        ITC_POST_HVT_TYPE                   = 0x400,    //»ìÐÐ¿¨¿ÚÊÓÆµ´¥·¢£¨¿¨¿Ú£©
        ITC_PE_RS485_TYPE                  = 0x10000,  //RS485³µ¼ìÆ÷¿¨Ê½µç¾¯´¥·¢£¨¿¨Ê½µç¾¯£©
        ITC_VIDEO_EPOLICE_TYPE             = 0x20000, //ÊÓÆµµç¾¯´¥·¢£¨¿¨Ê½µç¾¯£©
        ITC_VIA_VIRTUALCOIL_TYPE           = 0x40000,  //VIA´¥·¢ÅäÖÃ
        ITC_POST_IMT_TYPE                   = 0x80000,   //ÖÇ»Û¼à¿ØÅäÖÃ
        IPC_POST_HVT_TYPE                   = 0x100000,    //IPCÖ§³ÖµÄHVT
        ITC_POST_MOBILE_TYPE               = 0x200000, //ÒÆ¶¯½»Í¨´¥·¢Ä£Ê½
        ITC_REDLIGHT_PEDESTRIAN_TYPE       = 0x400000,    //ÐÐÈË´³ºìµÆ´¥·¢
        ITC_NOCOMITY_PEDESTRIAN_TYPE       = 0x800000    //²»ÀñÈÃÐÐÈË´¥·¢
}ITC_TRIGGERMODE_TYPE;

//ÄÜÁ¦¼¯½Ó¿ÚµÄÊä³ö²ÎÊý£¬¶ÔÓ¦pOutBuf²ÎÊý
typedef struct tagNET_ITC_TRIGGERMODE_ABILITY
{
    DWORD dwSize;
    DWORD dwTriggerType; //´¥·¢ÀàÐÍ£¬°´Î»±íÊ¾£¬¶¨ÒåITC_TRIGGERMODE_ABILITY¶¨Òå£¬¸ù¾ÝÊäÈëµÄÄÜÁ¦ÀàÐÍ²»Í¬£¬´Ë´¦·µ»ØµÄ´¥·¢ÀàÐÍÒ²²»Í¬
    BYTE byRes[16]; 
}NET_ITC_TRIGGERMODE_ABILITY, *LPNET_ITC_TRIGGERMODE_ABILITY;

typedef struct tagNET_ITC_INTERVAL_PARAM    
{
    BYTE byIntervalType;    //¼ä¸ôÀàÐÍ£¨Ä¬ÈÏ°´Ê±¼ä£©£¬0-Ê±¼äÆðÐ§,1-¾àÀëÆðÐ§
    BYTE byRes1[3];
    WORD wInterval[MAX_INTERVAL_NUM];//Á¬ÅÄ¼ä¸ôÊ±¼ä£¨µ¥Î»ms£©»òÁ¬ÅÄ¼ä¸ô¾àÀë£¨µ¥Î»·ÖÃ×£©£¬µ±byIntervalTypeÎª0Ê±£¬±íÊ¾¼ä¸ôÊ±¼ä£¬µ±byIntervalTypeÎª1Ê±£¬±íÊ¾¾àÀë
    BYTE byRes[8];
}NET_ITC_INTERVAL_PARAM, *LPNET_ITC_INTERVAL_PARAM;

//ÅÆÊ¶²ÎÊý
typedef struct tagNET_ITC_PLATE_RECOG_PARAM
{
    BYTE byDefaultCHN[MAX_CHJC_NUM]; /*Éè±¸ÔËÐÐÊ¡·ÝµÄºº×Ö¼òÐ´*/
    BYTE byEnable; //ÊÇ·ñÆôÓÃ¸ÃÇøÓòÅÆÊ¶£¬0-·ñ£¬1-ÊÇ
    DWORD dwRecogMode;  
    /*Ê¶±ðµÄÀàÐÍ£¬
       bit0-±³ÏòÊ¶±ð£º0-ÕýÏò³µÅÆÊ¶±ð£¬1-±³ÏòÊ¶±ð(Î²ÅÆÊ¶±ð) £» 
       bit1-´ó³µÅÆÊ¶±ð»òÐ¡³µÅÆÊ¶±ð£º0-Ð¡³µÅÆÊ¶±ð£¬1-´ó³µÅÆÊ¶±ð £»
       bit2-³µÉíÑÕÉ«Ê¶±ð£º0-²»²ÉÓÃ³µÉíÑÕÉ«Ê¶±ð£¬ÔÚ±³ÏòÊ¶±ð»òÐ¡³µÅÆÊ¶±ðÊ±½ûÖ¹ÆôÓÃ£¬1-³µÉíÑÕÉ«Ê¶±ð£»
       bit3-Å©ÓÃ³µÊ¶±ð£º0-²»²ÉÓÃÅ©ÓÃ³µÊ¶±ð£¬1-Å©ÓÃ³µÊ¶±ð£» 
       bit4-Ä£ºýÊ¶±ð£º0-²»²ÉÓÃÄ£ºýÊ¶±ð£¬1-Ä£ºýÊ¶±ð£»
       bit5-Ö¡¶¨Î»»ò³¡¶¨Î»£º0-Ö¡¶¨Î»£¬1-³¡¶¨Î»£»
       bit6-Ö¡Ê¶±ð»ò³¡Ê¶±ð£º0-Ö¡Ê¶±ð£¬1-³¡Ê¶±ð£» 
       bit7-ÍíÉÏ»ò°×Ìì£º0-°×Ìì£¬1-ÍíÉÏ 
       bit8-Ä¦ÍÐ³µÊ¶±ð£º0-²»²ÉÓÃÄ¦ÍÐ³µÊ¶±ð£¬1-Ä¦ÍÐ³µÊ¶±ð;
       bit9-³¡¾°Ä£Ê½£º0-µç¾¯/¶àÖ¡£¬1-¿¨¿Ú£»
       bit10-Î¢Ð¡³µÅÆ£º0-²»ÆôÓÃ£¬1-ÆôÓÃÎ¢Ð¡³µÅÆÊ¶±ð(ÏñËØ60¡«80)
       bit11-°²È«´ø¼ì²â£º0-²»ÆôÓÃ£¬1-ÆôÓÃ°²È«´ø¼ì²â
       bit12-Ãñº½³µÅÆÊ¶±ð: 0-²»ÆôÓÃ£¬1-¿ªÆôÃñº½³µÅÆÊ¶±ð
       bit13-³µÅÆ¹ý¶ÉÇãÐ±´¦Àí: 0-²»ÆôÓÃ£¬1-¿ªÆô¹ý¶ÉÇãÐ±´¦Àí£¨PRS£©
       bit14-³¬´ó³µÅÆÊ¶±ð: 0-²»ÆôÓÃ£¬1-¿ªÆô³¬´ó³µÅÆÊ¶±ð£¨PRS£©
       bit15-ÕÚÑô°å¼ì²â£º0-²»ÆôÓÃ£¬1-ÆôÓÃÕÚÑô°å¼ì²â
       bit16-»Æ±ê³µ¼ì²â£º0-²»ÆôÓÃ£¬1-ÆôÓÃ»Æ±ê³µ¼ì²â
       bit17-Î£ÏÕÆ·³µÁ¾¼ì²â£º0-²»ÆôÓÃ£¬1-ÆôÓÃÎ£ÏÕÆ·³µÁ¾¼ì²â
       bit18-Ê¹¹Ý³µÅÆÊ¶±ð£º0-²»ÆôÓÃ£¬1-ÆôÓÃÊ¹¹Ý³µÅÆÊ¶±ð 
       bit19-³µÁ¾×ÓÆ·ÅÆÊ¶±ð£º0-²»ÆôÓÃ£¬1-ÆôÓÃ³µÁ¾×ÓÆ·ÅÆÊ¶±ð
    */
    BYTE byVehicleLogoRecog;//³µ±êÊ¶±ð 0-²»ÆôÓÃ£¬1-ÆôÓÃ  
   /*
       0-±£Áô£¬1-°Ä£¬2-¾©£¬3-Óå£¬4-Ãö£¬5-¸Ê£¬6-ÔÁ£¬7-¹ð£¬8-¹ó£¬9-Çí£¬10-¼½£¬11-Ô¥£¬
       12-ºÚ£¬13-¶õ£¬14-Ïæ£¬15-¼ª£¬16-ËÕ£¬17-¸Ó£¬18-ÁÉ£¬19-ÃÉ£¬20-Äþ£¬21-Çà£¬22-Â³£¬
       23-½ú£¬24-ÉÂ£¬25-»¦£¬26-´¨£¬27-Ì¨£¬28-½ò£¬29-²Ø£¬30-¸Û£¬31-ÐÂ£¬32-ÔÆ£¬33-Õã£¬
       34-Íî£¬0xff-È«²¿
    */
    BYTE byProvince;//Ê¡·ÝË÷ÒýÖµ
    BYTE byRegion;// ÇøÓòË÷ÒýÖµ 0-±£Áô£¬1-Å·ÖÞ£¬2-¶íÓïÇøÓò, 3-Å·ÖÞ&¶íÂÞË¹(EU&CIS)
    BYTE byRes1;
    WORD wPlatePixelWidthMin;//³µÅÆÏñËØÊ¶±ð¿í¶È×îÐ¡Öµ£¨µ¥Î»ÊÇÏñËØ£©µ±Ç°ÍÆ¼ö·¶Î§[130,500]
    WORD wPlatePixelWidthMax;//³µÅÆÏñËØÊ¶±ð¿í¶È×î´óÖµ£¨µ¥Î»ÊÇÏñËØ£©µ±Ç°ÍÆ¼ö·¶Î§[130,500]
    BYTE byRes[24];
}NET_ITC_PLATE_RECOG_PARAM, *LPNET_ITC_PLATE_RECOG_PARAM;

//¶à±ßÐÍ½á¹¹Ìå
typedef struct tagNET_ITC_POLYGON
{
    DWORD dwPointNum; //ÓÐÐ§µã ´óÓÚµÈÓÚ3£¬ÈôÊÇ3µãÔÚÒ»ÌõÏßÉÏÈÏÎªÊÇÎÞÐ§ÇøÓò£¬Ïß½»²æÈÏÎªÊÇÎÞÐ§ÇøÓò 
    NET_VCA_POINT  struPos[ITC_MAX_POLYGON_POINT_NUM]; //¶à±ßÐÎ±ß½çµã,×î¶à20¸ö 
}NET_ITC_POLYGON, *LPNET_ITC_POLYGON;

typedef struct tagNET_ITC_PLATE_RECOG_REGION_PARAM    
{
    BYTE byMode; //ÇøÓòÀàÐÍ£¬0-¾ØÐÎ£¬1-¶à±ßÐÎ
    BYTE byRes1[3];
    union
    {
        NET_VCA_RECT struRect;  //¾ØÐÎÇøÓò
        NET_ITC_POLYGON struPolygon; //¶à±ßÐÎÇøÓò
    }uRegion;
    BYTE  byRes[16];    //±£Áô
}NET_ITC_PLATE_RECOG_REGION_PARAM, *LPNET_ITC_PLATE_RECOG_REGION_PARAM;

//µ¥×éIO²âËÙ²ÎÊý
typedef struct tagNET_ITC_SINGLE_IOSPEED_PARAM
{
    BYTE byEnable; //ÊÇ·ñÆôÓÃ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byTrigCoil1; //µÚÒ»ÏßÈ¦¹ØÁªIO£¬0-IO1,1-IO2,2-IO3,3-IO4,4-IO5,5-IO6
    BYTE byCoil1IOStatus;//µÚÒ»ÏßÈ¦IOÊäÈë¿Ú×´Ì¬£¬0-ÏÂ½µÑØ£¨Ä¬ÈÏ£©£¬1-ÉÏÉýÑØ£¬2-ÉÏÉýÑØºÍÏÂ½µÑØ£¬3-¸ßµçÆ½£¬4-µÍµçÆ½
    BYTE byTrigCoil2; //µÚ¶þÏßÈ¦¹ØÁªIO£¬0-IO1,1-IO2,2-IO3,3-IO4,4-IO5,5-IO6
    BYTE byCoil2IOStatus;//µÚ¶þÏßÈ¦IOÊäÈë¿Ú×´Ì¬£¬0-ÏÂ½µÑØ£¨Ä¬ÈÏ£©£¬1-ÉÏÉýÑØ£¬2-ÉÏÉýÑØºÍÏÂ½µÑØ£¬3-¸ßµçÆ½£¬4-µÍµçÆ½
    BYTE byRelatedDriveWay;//¹ØÁªµÄ³µµÀºÅ
    BYTE byTimeOut;//³¬Ê±Ê±¼ä£¨Ä¬ÈÏ10£©£¬µ¥Î»s
    BYTE byRelatedIOOutEx;//µÚ0Î»±íÊ¾IOÊä³ö¿Ú1£¬ÒÔ´ËÀàÍÆ£¬0-²»¹ØÁª£¬1-¹ØÁª Ö§³Ö¹ØÁªµ½8¸ö(¼æÈÝbyRelatedIOOut×Ö¶Î)
    DWORD dwDistance;//ÏßÈ¦¾àÀë£¨Ä¬ÈÏ1000£©,µ¥Î»£ºÀåÃ×
    BYTE byCapSpeed;//ÆðÅÄËÙ¶È£¨Ä¬ÈÏ30£©£¬µ¥Î»km/h
    BYTE bySpeedLimit;//ÏÞËÙÖµ£¨Ä¬ÈÏ60£©£¬µ¥Î»km/h
    BYTE bySpeedCapEn; //ÊÇ·ñÆôÓÃ³¬ËÙ×¥ÅÄ£¬0-·ñ£¬1-ÊÇ
    BYTE bySnapTimes1; //ÏßÈ¦1×¥ÅÄ´ÎÊý£¨Ä¬ÈÏ²»×¥ÅÄ£©£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬×î´ó5´Î 
    BYTE bySnapTimes2; //ÏßÈ¦2×¥ÅÄ´ÎÊý£¨Ä¬ÈÏ1£©£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬×î´ó5´Î
    BYTE byBigCarSpeedLimit; //´ó³µ³µËÙÏÞÖÆÖµ
    BYTE byBigCarSignSpeed;//±êÖ¾ÏÞËÙ(´ó³µ)£¬µ¥Î»km/h(3.7Ver)
    BYTE byIntervalType;    //¼ä¸ôÀàÐÍ£¨Ä¬ÈÏ°´Ê±¼ä£©£¬0-Ê±¼äÆðÐ§,1-¾àÀëÆðÐ§
    WORD wInterval1[MAX_INTERVAL_NUM];//ÏßÈ¦1Á¬ÅÄ¼ä¸ôÊ±¼ä£¨µ¥Î»ms£©»òÁ¬ÅÄ¼ä¸ô¾àÀë£¨µ¥Î»·ÖÃ×£©£¬µ±byIntervalTypeÎª0Ê±£¬±íÊ¾¼ä¸ôÊ±¼ä£¬µ±byIntervalTypeÎª1Ê±£¬±íÊ¾¾àÀë
    WORD wInterval2[MAX_INTERVAL_NUM];//ÏßÈ¦2Á¬ÅÄ¼ä¸ôÊ±¼ä£¨µ¥Î»ms£©»òÁ¬ÅÄ¼ä¸ô¾àÀë£¨µ¥Î»·ÖÃ×£©£¬µ±byIntervalTypeÎª0Ê±£¬±íÊ¾¼ä¸ôÊ±¼ä£¬µ±byIntervalTypeÎª1Ê±£¬±íÊ¾¾àÀë
    BYTE byRelatedIOOut[MAX_IOOUT_NUM]; //¹ØÁªµÄIOÊä³ö¿Ú(¿ÉÒÔÍ¬Ê±¹ØÁª¶à¸ö)£¬Êý×é0±íÊ¾IOÊä³ö¿Ú1£¬Êý×é1±íÊ¾IOÊä³ö¿Ú2£¬ÒÔ´ËÀàÍÆ£¬0-²»¹ØÁª£¬1-¹ØÁª
    BYTE byFlashMode;   //ÉÁ¹âµÆÉÁË¸Ä£Ê½£¬0-Í¬Ê±ÉÁ£¬1-ÂÖÁ÷ÉÁ
    BYTE byLaneType;   //³µµÀÀàÐÍ£¬0-Î´ÅäÖÃ¡¢1-¸ßËÙ¹«Â·¡¢2-³ÇÊÐ¿ìËÙÂ·¡¢0xff-ÆäËûµÀÂ·
    BYTE byCarSignSpeed;//±êÖ¾ÏÞËÙ£¬µ¥Î»km/h(3.7Ver)
    BYTE byUseageType; //³µµÀÓÃÍ¾ÀàÐÍ£¬Ïê¼ûITC_LANE_USEAGE_TYPE
    NET_ITC_PLATE_RECOG_REGION_PARAM struPlateRecog[MAX_LANEAREA_NUM]; //ÅÆÊ¶²ÎÊý(¿ÉÓÃÅÆÊ¶ÇøÓò1¸ö£¬±£ÁôÒ»¸ö)
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE byRelaLaneDirectionType;
    BYTE byLowSpeedLimit;                        //Ð¡³µÏÞµ×ËÙÖµ£¬µ¥Î»km/h
    BYTE byBigCarLowSpeedLimit;                //´ó³µÏÞµ×ËÙÖµ£¬µ¥Î»km/h
    BYTE byLowSpeedCapEn;                 //ÊÇ·ñÆôÓÃµÍËÙ×¥ÅÄ£¬0-·ñ£¬1-ÊÇ
    BYTE byEmergencyCapEn;                //ÊÇ·ñÆôÓÃÓ¦¼±³µµÀ×¥ÅÄ£¬0-·ñ£¬1-ÊÇ
    BYTE byRes[27];
}NET_ITC_SINGLE_IOSPEED_PARAM, *LPNET_ITC_SINGLE_IOSPEED_PARAM;

//¿¨¿ÚIO²âËÙ²ÎÊý
typedef struct tagNET_ITC_POST_IOSPEED_PARAM
{
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog; //ÅÆÊ¶²ÎÊý
    NET_ITC_SINGLE_IOSPEED_PARAM struSingleIOSpeed[MAX_IOSPEED_GROUP_NUM]; //µ¥¸öIO²âËÙ×é²ÎÊý
    BYTE  byRes[32];
}NET_ITC_POST_IOSPEED_PARAM, *LPNET_ITC_POST_IOSPEED_PARAM;

//µ¥IO²ÎÊý
typedef struct tagNET_ITC_SINGLEIO_PARAM
{
    BYTE byDefaultStatus;//IO´¥·¢Ä¬ÈÏ×´Ì¬£º0-µÍµçÆ½£¬1-¸ßµçÆ½
    BYTE byRelatedDriveWay;//¹ØÁªµÄ³µµÀºÅ
    BYTE bySnapTimes; //×¥ÅÄ´ÎÊý£¨Ä¬ÈÏ1£©£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬×î´ó5
    BYTE byRelatedIOOutEx;//µÚ0Î»±íÊ¾IOÊä³ö¿Ú1£¬ÒÔ´ËÀàÍÆ£¬0-²»¹ØÁª£¬1-¹ØÁª Ö§³Ö¹ØÁªµ½8¸ö(¼æÈÝbyRelatedIOOut×Ö¶Î)
    NET_ITC_INTERVAL_PARAM struInterval; //×¥ÅÄ¼ä¸ô²ÎÊý
    BYTE byRelatedIOOut[MAX_IOOUT_NUM]; //¹ØÁªµÄIOÊä³ö¿Ú£¬¿ÉÒÔÍ¬Ê±¹ØÁª¶à¸ö
    BYTE byFlashMode;   //ÉÁ¹âµÆÉÁË¸Ä£Ê½£¬0-Í¬Ê±ÉÁ£¬1-ÂÖÁ÷ÉÁ
    BYTE byEnable;//µ¥IOÊ¹ÄÜ±êÖ¾0-²»ÆôÓÃ£¬1-ÆôÓÃ (Remark:ÔÚÄÜÁ¦·µ»ØÖ§³Ö bySupport&0x20£¬±íÊ¾ÊÇ·ñÖ§³Öµ¥IO´¥·¢½çÃæIOÊ¹ÄÜÅäÖÃ Ê±ÉúÐ§)
    BYTE byUseageType; //³µµÀÓÃÍ¾ÀàÐÍ£¬Ïê¼ûITC_LANE_USEAGE_TYPE
    BYTE byEmergencyCapEn;  //ÊÇ·ñÆôÓÃÓ¦¼±³µµÀ×¥ÅÄ£¬0-·ñ£¬1-ÊÇ
    NET_ITC_PLATE_RECOG_REGION_PARAM struPlateRecog[MAX_LANEAREA_NUM]; //ÅÆÊ¶²ÎÊý
    BYTE byRes[24];
}NET_ITC_SINGLEIO_PARAM, *LPNET_ITC_SINGLEIO_PARAM;

//µ¥IO´¥·¢²ÎÊý
typedef struct tagNET_ITC_POST_SINGLEIO_PARAM
{
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog; //ÅÆÊ¶²ÎÊý
    NET_ITC_SINGLEIO_PARAM struSingleIO[MAX_IOIN_NUMEX]; //µ¥¸öIO´¥·¢²ÎÊý
}NET_ITC_POST_SINGLEIO_PARAM, *LPNET_ITC_POST_SINGLEIO_PARAM;

typedef struct tagNET_ITC_LANE_PARAM
{
    BYTE byEnable; //ÊÇ·ñÆôÓÃ¸Ã³µµÀ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byRelatedDriveWay;//¹ØÁªµÄ³µµÀºÅ
    WORD wDistance; //ÏßÈ¦¾àÀë£¬¼ÆËãËÙ¶È
    WORD wTrigDelayTime; //´¥·¢ÑÓ³ÙÊ±¼ä£¨Ä¬ÈÏ200£©£¬µ¥Î»£ººÁÃë
    BYTE byTrigDelayDistance; //´¥·¢ÑÓ³Ù¾àÀë£¨Ä¬ÈÏ0£©£¬µ¥Î»£º·ÖÃ×
    BYTE bySpeedCapEn; //ÊÇ·ñÆôÓÃ³¬ËÙ×¥ÅÄ£¬0-·ñ£¬1-ÊÇ
    BYTE bySignSpeed;//±êÖ¾ÏÞËÙ£¬µ¥Î»km/h
    BYTE bySpeedLimit;//ÏÞËÙÖµ£¬µ¥Î»km/h
    BYTE bySnapTimes; //×¥ÅÄ´ÎÊý£¨Ä¬ÈÏ1£©£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬×î´ó5
    BYTE byOverlayDriveWay; //OSDµþ¼ÓµÄ³µµÀºÅ
    NET_ITC_INTERVAL_PARAM struInterval; //×¥ÅÄ¼ä¸ô²ÎÊý
    BYTE byRelatedIOOut[MAX_IOOUT_NUM]; //¹ØÁªµÄIOÊä³ö¿Ú£¬¿ÉÒÔÍ¬Ê±¹ØÁª¶à¸ö
    BYTE byFlashMode;   //ÉÁ¹âµÆÉÁË¸Ä£Ê½£¬0-Í¬Ê±ÉÁ£¬1-ÂÖÁ÷ÉÁ
    BYTE byCartSignSpeed;//±êÖ¾ÏÞËÙ(´ó³µ)£¬µ¥Î»km/h
    BYTE byCartSpeedLimit;//ÏÞËÙÖµ£¨´ó³µ£©£¬µ¥Î»km/h
    BYTE byRelatedIOOutEx;//µÚ0Î»±íÊ¾IOÊä³ö¿Ú1£¬ÒÔ´ËÀàÍÆ£¬0-²»¹ØÁª£¬1-¹ØÁª Ö§³Ö¹ØÁªµ½8¸ö(¼æÈÝbyRelatedIOOut×Ö¶Î)
    NET_ITC_PLATE_RECOG_REGION_PARAM struPlateRecog[MAX_LANEAREA_NUM]; //³µµÀÅÆÊ¶²ÎÊý
    BYTE byLaneType;   //³µµÀÀàÐÍ£¬0-Î´ÅäÖÃ¡¢1-¸ßËÙ¹«Â·¡¢2-³ÇÊÐ¿ìËÙÂ·¡¢0xff-ÆäËûµÀÂ·
    BYTE byUseageType; //³µµÀÓÃÍ¾ÀàÐÍ£¬Ïê¼ûITC_LANE_USEAGE_TYPE
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE byRelaLaneDirectionType;
    BYTE byLowSpeedLimit;                    //Ð¡³µÏÞµ×ËÙÖµ£¬µ¥Î»km/h
    BYTE byBigCarLowSpeedLimit;                //´ó³µÏÞµ×ËÙÖµ£¬µ¥Î»km/h
    BYTE byLowSpeedCapEn;                   //ÊÇ·ñÆôÓÃµÍËÙ×¥ÅÄ£¬0-·ñ£¬1-ÊÇ
    BYTE byEmergencyCapEn;                 //ÊÇ·ñÆôÓÃÓ¦¼±³µµÀ×¥ÅÄ£¬0-·ñ£¬1-ÊÇ
    BYTE byRes[9];
}NET_ITC_LANE_PARAM, *LPNET_ITC_LANE_PARAM;

//¿¨¿ÚRS485³µ¼ìÆ÷´¥·¢²ÎÊý
typedef struct tagNET_ITC_POST_RS485_PARAM
{
    BYTE byRelatedLaneNum;//¹ØÁªµÄ³µµÀ¸öÊý
    BYTE byTriggerSpareMode; //´¥·¢±¸ÓÃÄ£Ê½£¬0-Ä¬ÈÏ£¬1-¿¨¿ÚÐéÄâÏßÈ¦Ä£Ê½,2-¿¨¿Ú»ìºÏ³µµÀÄ£Ê½
    BYTE byFaultToleranceTime;//ÈÝ´íÊ±¼ä(µ¥Î»:·ÖÖÓ)£¬ÓÃÓÚ¼ì²â³µ¼ìÆ÷ÊÇ·ñÕý³£µÄ×î´óÊ±¼ä
    BYTE byRes1; 
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog; //ÅÆÊ¶²ÎÊý
    NET_ITC_LANE_PARAM struLane[MAX_ITC_LANE_NUM]; //¹ØÁªµÄ³µµÀ²ÎÊý
    BYTE  byRes[32];
}NET_ITC_POST_RS485_PARAM, *LPNET_ITC_POST_RS485_PARAM;

typedef struct tagNET_ITC_RADAR_PARAM
{
    BYTE    byRadarType;    //À×´ïÀàÐÍ£¬0-ÎÞÀ×´ï,1-°²µÀÀ×À×´ï£¬2-°ÂÀûÎ¬ÑÇ£¬3-´¨ËÙÎ¢²¨4,À×´ï½ÓIOÀ©Õ¹ºÐ(´Ë²ÎÊýÔÚ¿¨¿ÚÐéÄâÏßÈ¦¡¢»ìÐÐ¿¨¿Ú½çÃæÖÐÊ¹ÓÃ£¬¿¨¿ÚRS485À×´ï²»Ê¹ÓÃ),0xff-ÆäËüÀàÐÍ
    BYTE    byLevelAngle;   //ÓëË®Æ½ÏßËù³É½Ç¶È,Ä¬ÈÏÎª25¡ã(0µ½90¶È)
    WORD    wRadarSensitivity; //À×´ïÁéÃô¶È 
    WORD    wRadarSpeedValidTime;//À×´ïËÙ¶ÈÓÐÐ§Ê±¼ä(0~2000] ,0±íÊ¾²»Ö§³Ö
    BYTE    byRes1[2];
    float      fLineCorrectParam;//ÏßÐÔ½ÃÕý²ÎÊý[0.0~2.0]
    int      iConstCorrectParam;//³£Á¿½ÃÕý²ÎÊý[-100~100]
    BYTE    byRes2[8];
}NET_ITC_RADAR_PARAM, *LPNET_ITC_RADAR_PARAM;

typedef struct tagNET_ITC_RS485_ACCESS_INFO_COND  //Ìõ¼þ½á¹¹
{
    DWORD dwSize;
    DWORD dwChannel;
    DWORD dwTriggerModeType;
    BYTE  byAssociateRS485No;//¹ØÁªµÄRS485ºÅ 1¡«5 (Î¨Ò»Öµ)
    //    BYTE  byModeType; //0¡«Ô¤Áô£¬1¡«À×´ï£¬2¡«³µ¼ìÆ÷£¬3¡«ÐÅºÅµÆ¼ì²âÆ÷
    BYTE  byRes[15];
}NET_ITC_RS485_ACCESS_INFO_COND,*LPNET_ITC_RS485_ACCESS_INFO_COND;

typedef struct tagNET_ITC_RADAR_INFO_PARAM
{
    NET_ITC_RADAR_PARAM  struRadarParam;//24
    BYTE  byAssociateLaneNo;//¹ØÁªµÄ³µµÀºÅ1¡«99 (Õâ¸öÖµ¿ÉÒÔÔÚ²»Í¬RS485¿ÚÖØ¸´)
    BYTE  byRes[103];
}NET_ITC_RADAR_INFO_PARAM, *LPNET_ITC_RADAR_INFO_PARAM;

typedef union tagNET_ITC_ACCESS_DEVINFO_PARAM_UNION
{
    BYTE uLen[128];
    NET_ITC_RADAR_INFO_PARAM struRadarInfoParam;//À×´ï²ÎÊýÅäÖÃ
}NET_ITC_ACCESS_DEVINFO_PARAM_UNION, *LPNET_ITC_ACCESS_DEVINFO_PARAM_UNION;

typedef struct tagNET_ITC_RS485_ACCESS_CFG //144  ÅäÖÃ½á¹¹
{
    DWORD dwSize;
    BYTE  byModeType;//0¡«Ô¤Áô£¬bit1¡«À×´ï£¬bit2¡«³µ¼ìÆ÷£¬bit3¡«ÐÅºÅµÆ¼ì²âÆ÷
    BYTE  byRes[3];
    NET_ITC_ACCESS_DEVINFO_PARAM_UNION uITCAccessDevinfoParam; //64
    BYTE  byRes1[12];
}NET_ITC_RS485_ACCESS_CFG,*LPNET_ITC_RS485_ACCESS_CFG;

//2013-07-09 À×´ï¹ØÁª³µµÀÀ©Õ¹
typedef struct tagNET_ITC_RS485_ACCESS_INFO
{
    DWORD dwSize;
    NET_ITC_RADAR_PARAM  struRadar[MAX_ITC_LANE_NUM];//¶à³µµÀÀ×´ïÐÅÏ¢
    //¸ù¾ÝÄÜÁ¦¼¯¿ª·¢ÏÔÊ¾£¬²»Ö§³ÖµÄÄ¬ÈÏÎª0£¬²»ÏÔÊ¾  £¨ÓÐ¼¸¸ö³µµÀÖ§³Ö¼¸¸ö£©
    BYTE  byRes[20];
}NET_ITC_RS485_ACCESS_INFO, *LPNET_ITC_RS485_ACCESS_INFO;


//¿¨¿ÚRS485À×´ï´¥·¢²ÎÊý
typedef struct tagNET_ITC_POST_RS485_RADAR_PARAM
{
    BYTE byRelatedLaneNum;//¹ØÁªµÄ³µµÀ¸öÊý
    BYTE byRes1[3];
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog; //ÅÆÊ¶²ÎÊý
    NET_ITC_LANE_PARAM struLane[MAX_ITC_LANE_NUM]; //¹ØÁªµÄ³µµÀ²ÎÊý
    NET_ITC_RADAR_PARAM struRadar;  //À×´ï²ÎÊý
    BYTE  byRes[32];
}NET_ITC_POST_RS485_RADAR_PARAM, *LPNET_ITC_POST_RS485_RADAR_PARAM;

typedef struct tagNET_ITC_VTLANE_PARAM
{
    BYTE byRelatedDriveWay;//¹ØÁªµÄ³µµÀºÅ
    BYTE bySpeedCapEn; //ÊÇ·ñÆôÓÃ³¬ËÙ×¥ÅÄ£¬0-·ñ£¬1-ÊÇ
    BYTE bySignSpeed;//±êÖ¾ÏÞËÙ£¬µ¥Î»km/h
    BYTE bySpeedLimit;//ÏÞËÙÖµ£¬µ¥Î»km/h
    BYTE bySnapTimes; //×¥ÅÄ´ÎÊý£¨Ä¬ÈÏ1£©£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬×î´ó5
    BYTE byBigCarSignSpeed;///*´ó³µ±êÖ¾ÏÞËÙ£¬µ¥Î»km/h*/
    BYTE byBigCarSpeedLimit;/*´ó³µÏÞËÙÖµ£¬µ¥Î»km/h*/
    BYTE byRelatedIOOutEx;//µÚ0Î»±íÊ¾IOÊä³ö¿Ú1£¬ÒÔ´ËÀàÍÆ£¬0-²»¹ØÁª£¬1-¹ØÁª Ö§³Ö¹ØÁªµ½8¸ö(¼æÈÝbyRelatedIOOut×Ö¶Î)
    NET_ITC_INTERVAL_PARAM struInterval; //×¥ÅÄ¼ä¸ô²ÎÊý
    BYTE byRelatedIOOut[MAX_IOOUT_NUM]; //¹ØÁªµÄIOÊä³ö¿Ú£¬¿ÉÒÔÍ¬Ê±¹ØÁª¶à¸ö
    BYTE byFlashMode;   //ÉÁ¹âµÆÉÁË¸Ä£Ê½£¬0-Í¬Ê±ÉÁ£¬1-ÂÖÁ÷ÉÁ
    BYTE byLowSpeedLimit;/*ÏÞµÍËÙ£¬µ¥Î»km/h*/
    BYTE byBigCarLowSpeedLimit; /*´ó³µÏÞµÍËÙ£¬µ¥Î»km/h*/
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE byRelaLaneDirectionType;
    NET_ITC_PLATE_RECOG_REGION_PARAM struPlateRecog[MAX_LANEAREA_NUM]; //³µµÀÅÆÊ¶²ÎÊý
    NET_VCA_LINE struLine; //³µµÀÏß
}NET_ITC_VTLANE_PARAM, *LPNET_ITC_VTLANE_PARAM;

typedef struct tagNET_ITC_VTCOIL_INFO
{
    NET_VCA_RECT struLaneRect;  /*ÐéÄâÏßÈ¦ÇøÓò*/
    BYTE byTrigFlag; //´¥·¢±êÖ¾£¬0-³µÍ·´¥·¢£»1-³µÎ²´¥·¢£»2-³µÍ·/³µÎ²¶¼´¥·¢
    BYTE byTrigSensitive;  //´¥·¢ÁéÃô¶È£¬1-100
    BYTE byRelatedIOOut[MAX_IOOUT_NUM]; //¹ØÁªµÄIOÊä³ö¿Ú(¿ÉÒÔÍ¬Ê±¹ØÁª¶à¸ö)£¬Êý×é0±íÊ¾IOÊä³ö¿Ú1£¬Êý×é1±íÊ¾IOÊä³ö¿Ú2£¬ÒÔ´ËÀàÍÆ£¬0-²»¹ØÁª£¬1-¹ØÁª
    BYTE byFlashMode;   //ÉÁ¹âµÆÉÁË¸Ä£Ê½£¬0-Í¬Ê±ÉÁ£¬1-ÂÖÁ÷ÉÁ
    BYTE byLaneType;   //³µµÀÀàÐÍ£¬0-Î´ÅäÖÃ¡¢1-¸ßËÙ¹«Â·¡¢2-³ÇÊÐ¿ìËÙÂ·¡¢0xff-ÆäËûµÀÂ·
    BYTE byEnableRadar; //ÊÇ·ñÆôÓÃÀ×´ï²âËÙ£¬0-·ñ£¬1-ÊÇ
    NET_ITC_VTLANE_PARAM struLane; //¹ØÁªµÄ³µµÀ²ÎÊý
    //³µµÀÓÃÍ¾ÀàÐÍ£¬Ïê¼ûITC_LANE_USEAGE_TYPE£¬Ê¹ÓÃ1ºÍ8Á½ÖÖÀàÐÍ(3.7Ver)
    BYTE byUseageType; 
    //³µÁ¾ÐÐÊ»·½Ïò£¬Ïê¼ûITC_LANE_CAR_DRIVE_DIRECT(3.7Ver)
    BYTE byCarDriveDirect;
    BYTE byRes[30];
}NET_ITC_VTCOIL_INFO, *LPNET_ITC_VTCOIL_INFO;

//¿¨¿ÚÐéÄâÏßÈ¦´¥·¢²ÎÊý
typedef struct tagNET_ITC_POST_VTCOIL_PARAM
{
    BYTE    byRelatedLaneNum;//¹ØÁªµÄ³µµÀ¸öÊý
    BYTE    byIsDisplay; //ÊÓÆµÖÐÊÇ·ñÏÔÊ¾ÐéÄâÏßÈ¦£¬0-²»ÏÔÊ¾£¬1-ÏÔÊ¾
    BYTE    byLoopPos; //Íí¼ä´¥·¢ÏßÈ¦µÄÆ«Ïò£¨Ä¬ÈÏ10£©
    BYTE    byPolarLenType; /*Æ«Õñ¾µÀàÐÍ£¬0£º²»¼ÓÆ«Õñ¾µ£»1£º¼ÓÊ©ÄÍµÂÆ«Õñ¾µ¡£*/
    BYTE    byDayAuxLightMode; /*°×Ìì¸¨ÖúÕÕÃ÷Ä£Ê½£¬0£ºÎÞ¸¨ÖúÕÕÃ÷£»1£ºLEDµÆÕÕÃ÷£»2£ºÉÁ¹âµÆÕÕÃ÷*/
    BYTE    byVideoLaneNO; //ÊÓÆµ²Î¿¼ÁÁ¶ÈµÄ²Î¿¼³µµÀºÅ
    BYTE    byVideoLowTh; /*ÊÓÆµ²Î¿¼ÁÁ¶ÈµÍãÐÖµ³õÊ¼»¯Öµ£¨Ä¬ÈÏ40£©*/
    BYTE    byVideoHighTh; /*ÊÓÆµ²Î¿¼ÁÁ¶È¸ßãÐÖµ³õÊ¼»¯Öµ£¨Ä¬ÈÏ55£©*/
    BYTE    byRecordMode; //Â¼Ïñ±êÖ¾£º0-²»Â¼Ïñ£¬1-Â¼Ïñ
    BYTE     bySnapMode;//×¥ÅÄÄ£Ê½£º0-ÆµÉÁÄ£Ê½£»1-±¬ÉÁÄ£Ê½
    /*²âËÙ·½Ê½£º0-²»²âËÙ£¬0x1-À×´ï²âËÙ£¬0x2-ÊÓÆµ²âËÙ*/
    BYTE    bySpeedDetector;
    BYTE    byRes2;
    WORD    wResolutionX;/* Éè±¸µ±Ç°·Ö±æÂÊ¿í*/
    WORD    wResolutionY;/* Éè±¸µ±Ç°·Ö±æÂÊ¸ß*/
    DWORD   dwDayInitExp; /*ÊÓÆµ°×ÌìÆØ¹âÊ±¼äµÄ³õÊ¼Öµ2000*/
    DWORD   dwDayMaxExp; /*ÊÓÆµ°×ÌìÆØ¹âÊ±¼äµÄ×î´óÖµ20000*/
    DWORD   dwNightExp; /*Íí¼äÊÓÆµÆØ¹âÊ±¼äµÄÉèÖÃÖµ3000*/
    DWORD   dwSnapExp; /*×¥ÅÄÆØ¹âÊ±¼ä*/
    BYTE    byDayInitGain; /*ÊÓÆµ°×ÌìÔöÒæµÄ³õÊ¼Öµ200*/
    BYTE    byDayMaxGain; /*ÊÓÆµ°×ÌìÔöÒæµÄ×î´óÖµ400*/
    BYTE    byNightGain; /*Íí¼äÊÓÆµÔöÒæ*/
    BYTE    bySnapGain; /*×¥ÅÄÔöÒæ*/
    DWORD   dwSceneMode; //³¡¾°Ä£Ê½£¬ Ïê¼ûSCENE_MODE
    NET_DVR_GEOGLOCATION struGeogLocation; //µØÖ·Î»ÖÃ(Ä¬ÈÏÕã½­)
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog; //ÅÆÊ¶²ÎÊý
    NET_ITC_VTCOIL_INFO struVtCoil[MAX_VL_NUM]; //ÐéÄâÏßÈ¦²ÎÊý
    NET_ITC_RADAR_PARAM struRadar;  //À×´ï²ÎÊý
    NET_VCA_LINE struLine; //ÓÒ³µµÀÏß
    //Î¥¹æ¼ì²âÀàÐÍ£¬°´Î»±íÊ¾£¬Ïê¼ûITC_VIOLATION_DETECT_TYPE£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ(3.7Ver)
    DWORD dwVioDetectType;    
    BYTE  byDebugMode; /*µ÷ÊÔÄ£Ê½£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ*/
    BYTE  byRes[11];
}NET_ITC_POST_VTCOIL_PARAM, *LPNET_ITC_POST_VTCOIL_PARAM;

//µ¥×éIOºìÂÌµÆ²ÎÊý
typedef struct tagNET_ITC_SINGLE_IOTL_PARAM
{
    BYTE byEnable; //ÊÇ·ñÆôÓÃ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byLightIO; //ºìÂÌµÆIO£¬0-IO1,1-IO2,2-IO3,3-IO4,4-IO5,5-IO6
    BYTE byTrafficLight; //ºìÂÌµÆÓÐÐ§×´Ì¬0-¸ßµçÆ½ºìµÆ£¬µÍµçÆ½ÂÌµÆ£»1-¸ßµçÆ½ÂÌµÆ£¬µÍµçÆ½ºìµÆ
    BYTE byTrigIO;//´¥·¢µÄIOºÅ£¬0-IO1,1-IO2,2-IO3,3-IO4,4-IO5,5-IO6
    BYTE byTrigIOStatus;//´¥·¢IO¿ÚµÄ×´Ì¬£¨Ä¬ÈÏ0£©£¬0-ÏÂ½µÑØ£¬1-ÉÏÉýÑØ£¬2-ÉÏÉýÑØºÍÏÂ½µÑØ£¬3-¸ßµçÆ½£¬4-µÍµçÆ½
    BYTE byRelatedDriveWay;//¹ØÁªµÄ³µµÀºÅ
    BYTE byRecordEnable;//´³ºìµÆÖÜÆÚÂ¼Ïñ±êÖ¾£¬0-²»Â¼Ïñ£¬1-Â¼Ïñ
    BYTE byRecordType;//´³ºìµÆÂ¼ÏñÀàÐÍ£¬0-Ô¤Â¼£¬1-ÑÓÊ±Â¼Ïñ
    BYTE byPreRecordTime;//´³ºìµÆÂ¼ÏñÆ¬¶ÎÔ¤Â¼Ê±¼ä£¨Ä¬ÈÏ0£©£¬µ¥Î»£ºÃë
    BYTE byRecordDelayTime;//´³ºìµÆÂ¼ÏñÆ¬¶ÎÑÓÊ±Ê±¼ä£¨Ä¬ÈÏ0£©£¬µ¥Î»£ºÃë
    BYTE byRecordTimeOut;//´³ºìµÆÖÜÆÚÂ¼Ïñ³¬Ê±Ê±¼ä£¨Ãë£©
    BYTE byRedSnapTimes; //ºìµÆ×¥ÅÄ´ÎÊý£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬×î´ó5´Î 
    BYTE byGreenSnapTimes; //ÂÌµÆ×¥ÅÄ´ÎÊý£¬0-²»×¥ÅÄ£¬·Ç0-Á¬ÅÄ´ÎÊý£¬×î´ó5´Î
    BYTE byRelatedIOOutEx;//µÚ0Î»±íÊ¾IOÊä³ö¿Ú1£¬ÒÔ´ËÀàÍÆ£¬0-²»¹ØÁª£¬1-¹ØÁª Ö§³Ö¹ØÁªµ½8¸ö(¼æÈÝbyRelatedIOOut×Ö¶Î)
    BYTE byRes1;
    BYTE byIntervalType;    //¼ä¸ôÀàÐÍ£¨Ä¬ÈÏ°´Ê±¼ä£©£¬0-Ê±¼äÆðÐ§,1-¾àÀëÆðÐ§
    WORD wRedInterval[MAX_INTERVAL_NUM];//ºìµÆÁ¬ÅÄ¼ä¸ôÊ±¼ä£¨µ¥Î»ms£©»òÁ¬ÅÄ¼ä¸ô¾àÀë£¨µ¥Î»·ÖÃ×£©£¬µ±byIntervalTypeÎª0Ê±£¬±íÊ¾¼ä¸ôÊ±¼ä£¬µ±byIntervalTypeÎª1Ê±£¬±íÊ¾¾àÀë
    WORD wGreenInterval[MAX_INTERVAL_NUM];//ÂÌµÆÁ¬ÅÄ¼ä¸ôÊ±¼ä£¨µ¥Î»ms£©»òÁ¬ÅÄ¼ä¸ô¾àÀë£¨µ¥Î»·ÖÃ×£©£¬µ±byIntervalTypeÎª0Ê±£¬±íÊ¾¼ä¸ôÊ±¼ä£¬µ±byIntervalTypeÎª1Ê±£¬±íÊ¾¾àÀë
    BYTE byRelatedIOOut[MAX_IOOUT_NUM]; //¹ØÁªµÄIOÊä³ö¿Ú£¬¿ÉÒÔÍ¬Ê±¹ØÁª¶à¸ö
    BYTE byFlashMode;   //ÉÁ¹âµÆÉÁË¸Ä£Ê½£¬0-Í¬Ê±ÉÁ£¬1-ÂÖÁ÷ÉÁ
    BYTE byRes2[3];
    NET_ITC_PLATE_RECOG_REGION_PARAM struPlateRecog[MAX_LANEAREA_NUM]; //ÅÆÊ¶ÇøÓò²ÎÊý
    BYTE  byRes[32];
}NET_ITC_SINGLE_IOTL_PARAM, *LPNET_ITC_SINGLE_IOTL_PARAM;

//µç¾¯IOºìÂÌµÆ²ÎÊý
typedef struct tagNET_ITC_EPOLICE_IOTL_PARAM
{
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog; //ÅÆÊ¶²ÎÊý
    NET_ITC_SINGLE_IOTL_PARAM struSingleIOTL[MAX_IOSPEED_GROUP_NUM]; //µ¥×éIOºìÂÌµÆ²ÎÊý
    BYTE  byRes[32];
}NET_ITC_EPOLICE_IOTL_PARAM, *LPNET_ITC_EPOLICE_IOTL_PARAM;

typedef enum _ITC_SERIAL_PROTOCOL_
{
    ITC_PROTOCOL_UNKNOW = 0, /*Î´Öª*/
        ITC_SINGLE_COIL_PROTOCOL_MODE1 = 1, /*µ¥ÏßÈ¦³µ¼ìÆ÷Ð­ÒéÄ£Ê½1£¨ÏÔÊ¾Îª£ºµ¥_½ø1_³ö1_ÑÓ1_1£©£¬µ½´ï¡¢Àë¿ª¡¢Àë¿ªÑÓÊ±×¥ÅÄ£¬Àë¿ªÅÆÊ¶£¬ÉÏ´«3ÕÅ³µÁ¾Í¼Æ¬ºÍ³µÅÆ½á¹û*/
        ITC_DOUBLE_COIL_PROTOCOL_MODE1 = 2, /*Ë«ÏßÈ¦³µ¼ìÆ÷Ð­ÒéÄ£Ê½1£¨ÏÔÊ¾Îª£ºË«_½ø1_³ö1_³ö2_1£©£¬µ½´ï1¡¢Àë¿ª1¡¢Àë¿ª2×¥ÅÄ£¬Àë¿ª1ÅÆÊ¶£¬ÉÏ´«3ÕÅ³µÁ¾Í¼Æ¬ºÍ³µÅÆ½á¹û£¨Ä¬ÈÏ£©*/
        ITC_DOUBLE_COIL_PROTOCOL_MODE2 = 3, /*Ë«ÏßÈ¦³µ¼ìÆ÷Ð­ÒéÄ£Ê½2£¨ÏÔÊ¾Îª£ºË«_³ö1_³ö2_ÑÓ2_1£©£¬Àë¿ª1¡¢Àë¿ª2¡¢Àë¿ª2ÑÓÊ±×¥ÅÄ£¬Àë¿ª1ÅÆÊ¶£¬ÉÏ´«3ÕÅ³µÁ¾Í¼Æ¬ºÍ³µÅÆ½á¹û*/
        ITC_DOUBLE_COIL_PROTOCOL_MODE3 = 4, /*Ë«ÏßÈ¦³µ¼ìÆ÷Ð­ÒéÄ£Ê½3£¨ÏÔÊ¾Îª£ºË«_½ø2_³ö1_ÑÓ2_1£©£¬½øÈë2¡¢Àë¿ª1¡¢Àë¿ª2ÑÓÊ±×¥ÅÄ£¬Àë¿ª1ÅÆÊ¶£¬ÉÏ´«3ÕÅ³µÁ¾Í¼Æ¬ºÍ³µÅÆ½á¹û*/
        ITC_DOUBLE_COIL_PROTOCOL_MODE4 = 5, /*Ë«ÏßÈ¦³µ¼ìÆ÷Ð­ÒéÄ£Ê½4£¨ÏÔÊ¾Îª£ºË«/Èý_½ø2_³ö2_ÑÓ2_1£©£¬µ½´ï2¡¢Àë¿ª2¡¢Àë¿ª2ÑÓÊ±×¥ÅÄ£¬Àë¿ª1ÅÆÊ¶£¬ÉÏ´«3ÕÅ³µÁ¾Í¼Æ¬ºÍ³µÅÆ½á¹û*/
        ITC_DOUBLE_COIL_PROTOCOL_MODE5 = 6, /*Ë«ÏßÈ¦³µ¼ìÆ÷Ð­ÒéÄ£Ê½5£¨ÏÔÊ¾Îª£ºË«/Èý_½ø2_³ö2_ÑÓ2_2£©£¬µ½´ï2¡¢Àë¿ª2¡¢Àë¿ª2ÑÓÊ±×¥ÅÄ£¬µ½´ï2¡¢Àë¿ª1¾ùÅÆÊ¶£¬ÉÏ´«3ÕÅ³µÁ¾Í¼Æ¬ºÍÖÃÐÅ¶È¸ßµÄ³µÅÆ½á¹û£¨Ä¬ÈÏ£©*/
        ITC_DOUBLE_COIL_PROTOCOL_MODE6 = 7, /*Ë«ÏßÈ¦³µ¼ìÆ÷Ð­ÒéÄ£Ê½6£¨ÏÔÊ¾Îª£ºË«/Èý_½ø1_³ö2_ÑÓ2_2£©£¬µ½´ï1¡¢Àë¿ª2¡¢Àë¿ª2ÑÓÊ±×¥ÅÄ£¬µ½´ï1¡¢Àë¿ª1¾ùÅÆÊ¶£¬ÉÏ´«3ÕÅ³µÁ¾Í¼Æ¬ºÍÖÃÐÅ¶È¸ßµÄ³µÅÆ½á¹û*/
        ITC_DOUBLE_COIL_PROTOCOL_MODE7 = 8, /*Ë«ÏßÈ¦³µ¼ìÆ÷Ð­ÒéÄ£Ê½7£¨ÏÔÊ¾Îª£ºË«_½ø1_³ö1_ÑÓ2_1£©£¬µ½´ï1¡¢Àë¿ª1¡¢Àë¿ª2ÑÓÊ±×¥ÅÄ£¬Àë¿ª1ÅÆÊ¶£¬ÉÏ´«³µÁ¾Í¼Æ¬£¨¿¨¿ÚÀë¿ª1£¬´³ºìµÆµ½´ï1¡¢Àë¿ª1¡¢Àë¿ª2ÑÓÊ±£©ºÍ³µÅÆ½á¹û*/
        ITC_DOUBLE_COIL_PROTOCOL_MODE8 = 9, /*Ë«ÏßÈ¦³µ¼ìÆ÷Ð­ÒéÄ£Ê½8£¨ÏÔÊ¾Îª£ºË«_½ø1_³ö1_ÑÓ2_2£©£¬µ½´ï1¡¢Àë¿ª1¡¢Àë¿ª2ÑÓÊ±×¥ÅÄ£¬µ½´ï1¡¢Àë¿ª1¾ùÅÆÊ¶£¬ÉÏ´«³µÁ¾Í¼Æ¬£¨¿¨¿ÚÀë¿ª1£¬´³ºìµÆµ½´ï1¡¢Àë¿ª1¡¢Àë¿ª2ÑÓÊ±£©ºÍÖÃÐÅ¶È¸ßµÄ³µÅÆ½á¹û£¨Ä¬ÈÏ£©*/
        ITC_SINGLE_COIL_PROTOCOL_MODE2 = 10, /*µ¥ÏßÈ¦³µ¼ìÆ÷Ð­ÒéÄ£Ê½2£¨ÏÔÊ¾Îª£ºµ¥_½ø1_³ö1_ÑÓ1_2£©£¬µ½´ï¡¢Àë¿ª¡¢Àë¿ªÑÓÊ±×¥ÅÄ£¬µ½´ï¡¢Àë¿ª¾ùÅÆÊ¶£¬ÉÏ´«³µÁ¾Í¼Æ¬£¨¿¨¿ÚÀë¿ª£¬´³ºìµÆµ½´ï¡¢Àë¿ª¡¢Àë¿ªÑÓÊ±£©ºÍÖÃÐÅ¶È¸ßµÄ³µÅÆ½á¹û£¨Ä¬ÈÏ£©*/
        ITC_OTHER_PROTOCOL = 0xff /*ÆäËü³µ¼ìÆ÷Ð­Òé(ÓÃÓÚÀÏdemo²ÎÊýÅäÖÃ£¬3.3Ö®ºó°æ±¾¹ØÁªµÄdemoºÍ¿Ø¼þ¾ù²»Ö§³Ö´ËÖµ)*/
}ITC_SERIAL_PROTOCOL;

//Õý³£¹ý³µÂß¼­×¥ÅÄÀàÐÍ
typedef enum _ITC_NORMAL_PASS_SERIAL_PROTOCOL_
{
    ITC_NORMAL_PASS_SERIAL_UNKNOW     =  0,   //Î´Öª
        ITC_NORMAL_PASS_PROTOCOL_MODE1  = 1,  //µ¥ÏßÈ¦£¬Àë¿ª×¥ÅÄ£¬ÅÆÊ¶ÉÏ´«£¨Ä¬ÈÏ£©
        ITC_NORMAL_PASS_PROTOCOL_MODE2 =2,  //µ¥ÏßÈ¦£¬µ½´ï¡¢Àë¿ª×¥ÅÄ£¬¾ùÅÆÊ¶£¬½öÉÏ´«Àë¿ª³µÁ¾Í¼Æ¬ºÍÖÃÐÅ¶È¸ßµÄ³µÅÆ½á¹û
        ITC_NORMAL_PASS_PROTOCOL_MODE3 =3,  //Ë«ÏßÈ¦£¬Àë¿ª1×¥ÅÄ£¬ÅÆÊ¶ÉÏ´«£¨Ä¬ÈÏ£©
        ITC_NORMAL_PASS_PROTOCOL_MODE4 =4, //Ë«ÏßÈ¦£¬µ½´ï1¡¢Àë¿ª1×¥ÅÄ£¬¾ùÅÆÊ¶£¬½öÉÏ´«Àë¿ª1³µÁ¾Í¼Æ¬ºÍÖÃÐÅ¶È¸ßµÄ³µÅÆ½á¹û
        ITC_NORMAL_PASS_PROTOCOL_MODE5 =5, //Ë«ÏßÈ¦£¬µ½´ï2¡¢Àë¿ª1×¥ÅÄ£¬¾ùÅÆÊ¶£¬½öÉÏ´«Àë¿ª1³µÁ¾Í¼Æ¬ºÍÖÃÐÅ¶È¸ßµÄ³µÅÆ½á¹û
}ITC_NORMAL_PASS_SERIAL_PROTOCOL;

//ÄæÐÐÎ¥¹æÂß¼­×¥ÅÄÀàÐÍ
typedef enum _ITC_INVERSE_SERIAL_PROTOCOL_
{
    ITC_INVERSE_SERIAL_UNKNOW     =  0,   //Î´Öª
        ITC_INVERSE_PROTOCOL_MODE1  = 1,  //²»×¥ÅÄ
        ITC_INVERSE_PROTOCOL_MODE2 =2,  //µ½´ï1Á¬×¥2ÕÅ¡¢Àë¿ª2×¥ÅÄ£¬µ½´ï1Á½ÕÅ¾ùÅÆÊ¶£¬ÉÏ´«3ÕÅ³µÁ¾Í¼Æ¬ºÍÖÃÐÅ¶È¸ßµÄ³µÅÆ½á¹û
        ITC_INVERSE_PROTOCOL_MODE3 =3,  //µ½´ï1¡¢Àë¿ª2×¥ÅÄ£¬µ½´ï1ÅÆÊ¶£¬ÉÏ´«2ÕÅ³µÁ¾Í¼Æ¬ºÍ³µÅÆ½á¹û
}ITC_INVERSE_SERIAL_PROTOCOL;

//³¬ËÙÎ¥¹æÂß¼­×¥ÅÄÀàÐÍ
typedef enum _ITC_SPEED_SERIAL_PROTOCOL_
{
    ITC_SPEED_SERIAL_UNKNOW     =  0,   //Î´Öª
        ITC_SPEED_PROTOCOL_MODE1  = 1,  //²»×¥ÅÄ
        ITC_SPEED_PROTOCOL_MODE2 =2,  //Ë«/ÈýÏßÈ¦£¬Àë¿ª1£¬Àë¿ª2£¬Àë¿ª2ÑÓÊ±×¥ÅÄ£¬Àë¿ª1ÅÆÊ¶£¬ÉÏ´«³µÁ¾Í¼Æ¬£¨¿¨¿ÚÀë¿ª1£¬³¬ËÙÀë¿ª1¡¢Àë¿ª2¡¢Àë¿ª2ÑÓÊ±£©ºÍ³µÅÆ½á¹û
        ITC_SPEED_PROTOCOL_MODE3 =3,  //Ë«/ÈýÏßÈ¦£¬Àë¿ª1£¬Àë¿ª2£¬Àë¿ª2ÑÓÊ±×¥ÅÄ£¬Àë¿ª1ÅÆÊ¶£¬ÉÏ´«³µÁ¾Í¼Æ¬£¨¿¨¿ÚÀë¿ª1£¬³¬ËÙÀë¿ª1¡¢Àë¿ª2£©ºÍ³µÅÆ½á¹û
}ITC_SPEED_SERIAL_PROTOCOL;

//³µ¼ìÆ÷²ÎÊý
typedef struct tagNET_ITC_SERIAL_INFO
{
    BYTE bySerialProtocol; //³µ¼ìÆ÷Ð­ÒéÀàÐÍ£¬Ïê¼ûITC_SERIAL_PROTOCOL
    BYTE byIntervalType;    //¼ä¸ôÀàÐÍ£¨Ä¬ÈÏ°´Ê±¼ä£©£¬0-Ê±¼äÆðÐ§,1-¾àÀëÆðÐ§
    WORD wInterval;//Á¬ÅÄ¼ä¸ôÊ±¼ä£¨µ¥Î»ms£©»òÁ¬ÅÄ¼ä¸ô¾àÀë£¨µ¥Î»·ÖÃ×£©£¬µ±byIntervalTypeÎª0Ê±£¬±íÊ¾¼ä¸ôÊ±¼ä£¬µ±byIntervalTypeÎª1Ê±£¬±íÊ¾¾àÀë
    BYTE byNormalPassProtocol; //Õý³£¹ý³µ×¥ÅÄÐ­ÒéÀàÐÍ£¬Ïê¼ûITC_NORMAL_PASS_SERIAL_PROTOCOL
    BYTE byInverseProtocol; //ÄæÐÐ×¥ÅÄÐ­ÒéÀàÐÍ£¬Ïê¼ûITC_INVERSE_SERIAL_PROTOCOL
    BYTE bySpeedProtocol; //³¬ËÙ×¥ÅÄÐ­ÒéÀàÐÍ£¬Ïê¼ûITC_SPEED_SERIAL_PROTOCOL
    BYTE byRes[9];
}NET_ITC_SERIAL_INFO, *LPNET_ITC_SERIAL_INFO;

typedef struct tagNET_ITC_EPOLICE_LANE_PARAM
{
    BYTE byEnable; //ÊÇ·ñÆôÓÃ¸Ã³µµÀ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byRelatedDriveWay;//¹ØÁªµÄ³µµÀºÅ
    WORD wDistance; //ÏßÈ¦¾àÀë£¬µ¥Î»ÀåÃ×
    BYTE byRecordEnable;//´³ºìµÆÖÜÆÚÂ¼Ïñ±êÖ¾£¬0-²»Â¼Ïñ£¬1-Â¼Ïñ
    BYTE byRecordType;//´³ºìµÆÂ¼ÏñÀàÐÍ£¬0-Ô¤Â¼£¬1-ÑÓÊ±Â¼Ïñ
    BYTE byPreRecordTime;//´³ºìµÆÂ¼ÏñÆ¬¶ÎÔ¤Â¼Ê±¼ä£¨Ä¬ÈÏ0£©£¬µ¥Î»£ºÃë
    BYTE byRecordDelayTime;//´³ºìµÆÂ¼ÏñÆ¬¶ÎÑÓÊ±Ê±¼ä£¨Ä¬ÈÏ0£©£¬µ¥Î»£ºÃë
    BYTE byRecordTimeOut;//´³ºìµÆÖÜÆÚÂ¼Ïñ³¬Ê±Ê±¼ä£¨Ãë£©
    BYTE bySignSpeed;//±êÖ¾ÏÞËÙ(¿¨Ê½µç¾¯Ä£Ê½ÓÐÐ§)£¬µ¥Î»km/h
    BYTE bySpeedLimit;//ÏÞËÙÖµ(¿¨Ê½µç¾¯Ä£Ê½ÓÐÐ§)£¬µ¥Î»km/h
    BYTE byOverlayDriveWay; //OSDµþ¼ÓµÄ³µµÀºÅ
    NET_ITC_SERIAL_INFO struSerialInfo; //³µ¼ìÆ÷²ÎÊý
    BYTE byRelatedIOOut[MAX_IOOUT_NUM]; //¹ØÁªµÄIOÊä³ö¿Ú£¬¿ÉÒÔÍ¬Ê±¹ØÁª¶à¸ö
    BYTE byFlashMode;   //ÉÁ¹âµÆÉÁË¸Ä£Ê½£¬0-Í¬Ê±ÉÁ£¬1-ÂÖÁ÷ÉÁ
    BYTE bySerialType; //³µ¼ìÆ÷ÀàÐÍ£¬0-Ë½ÓÐ³µ¼ìÆ÷£¬1-Ë½ÓÐOEM³µ¼ìÆ÷£¬2-ÆäËû³µ¼ìÆ÷
    BYTE byRelatedIOOutEx;//µÚ0Î»±íÊ¾IOÊä³ö¿Ú1£¬ÒÔ´ËÀàÍÆ£¬0-²»¹ØÁª£¬1-¹ØÁª Ö§³Ö¹ØÁªµ½8¸ö(¼æÈÝbyRelatedIOOut×Ö¶Î)
    BYTE bySnapPicPreRecord; //×¥ÅÄÍ¼Æ¬Ô¤Â¼Ê±¼äµã£»0-Ä¬ÈÏÖµ£¨µÚ¶þÕÅÍ¼Æ¬£©£¬1-µÚÒ»ÕÅÍ¼Æ¬£¬2-µÚ¶þÕÅÍ¼Æ¬£¬3-µÚÈýÕÅÍ¼Æ¬
    NET_ITC_PLATE_RECOG_REGION_PARAM struPlateRecog[MAX_LANEAREA_NUM]; //³µµÀÅÆÊ¶²ÎÊý
    BYTE byBigCarSignSpeed;    ///*´ó³µ±êÖ¾ÏÞËÙ£¬µ¥Î»km/h*/
    BYTE byBigCarSpeedLimit;/*´ó³µÏÞËÙÖµ£¬µ¥Î»km/h*/    
    BYTE byRedTrafficLightChan;//ºìµÆÍ¨µÀºÅ£º1¡«16£¨ºìÂÌµÆ¼ì²âÆ÷£©
    BYTE byYellowTrafficLightChan;//»ÆµÆÍ¨µÀºÅ£º1¡«16£¨ºìÂÌµÆ¼ì²âÆ÷£©
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE byRelaLaneDirectionType;
    BYTE byRes3[11];
}NET_ITC_EPOLICE_LANE_PARAM, *LPNET_ITC_EPOLICE_LANE_PARAM;

//µç¾¯/¿¨Ê½µç¾¯RS485³µ¼ìÆ÷´¥·¢²ÎÊý
typedef struct tagNET_ITC_EPOLICE_RS485_PARAM
{
    BYTE byRelatedLaneNum;//¹ØÁªµÄ³µµÀ¸öÊý
    BYTE byTrafficLightSignalSrc;//½»Í¨µÆÐÅºÅÀ´Ô´ 0¡«³µ¼ìÆ÷ 1¡«ºìÂÌµÆ¼ì²âÆ÷
    BYTE byRes1[2];
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog; //ÅÆÊ¶²ÎÊý
    NET_ITC_EPOLICE_LANE_PARAM struLane[MAX_ITC_LANE_NUM]; //¹ØÁªµÄ³µµÀ²ÎÊý
    BYTE  byRes[32];
}NET_ITC_EPOLICE_RS485_PARAM, *LPNET_ITC_EPOLICE_RS485_PARAM;

//³µµÀÊôÐÔ²ÎÊý½á¹¹
typedef struct tagNET_ITC_LANE_LOGIC_PARAM
{
    BYTE byUseageType;     //³µµÀÓÃÍ¾ÀàÐÍ£¬Ïê¼ûITC_LANE_USEAGE_TYPE
    BYTE byDirectionType;  //³µµÀ·½ÏòÀàÐÍ£¬Ïê¼ûITC_LANE_DIRECTION_TYPE
    BYTE byCarDriveDirect; //³µÁ¾ÐÐÊ»·½Ïò£¬Ïê¼ûITC_LANE_CAR_DRIVE_DIRECT 
    BYTE byRes[33];        //±£Áô
}NET_ITC_LANE_LOGIC_PARAM, *LPNET_ITC_LANE_LOGIC_PARAM;

//ÊÓÆµµç¾¯Ïß½á¹¹
typedef struct tagNET_ITC_LINE
{
    NET_VCA_LINE struLine; //Ïß²ÎÊý
    BYTE byLineType; //ÏßÀàÐÍ£¬Ïê¼ûITC_LINE_TYPE
    BYTE byRes[7];
}NET_ITC_LINE, *LPNET_ITC_LINE;

typedef struct tagNET_ITC_SNAPMODE_PARAM
{
    BYTE     byVehicleCapMode;//»ú¶¯³µ×¥ÅÄÄ£Ê½£¬0-ÆµÉÁÄ£Ê½£»1-±¬ÉÁÄ£Ê½
    BYTE     byNoVehicleCapMode;//·Ç»ú¶¯³µ×¥ÅÄÄ£Ê½£¬0-ÆµÉÁÄ£Ê½£»1-±¬ÉÁÄ£Ê½
    BYTE     byPasserCapMode;//ÐÐÈË×¥ÅÄÄ£Ê½£¬0-ÆµÉÁÄ£Ê½£»1-±¬ÉÁÄ£Ê½
    BYTE     byRes[29];
}NET_ITC_SNAPMODE_PARAM, *LPNET_ITC_SNAPMODE_PARAM;

//size = 128
typedef struct tagNET_ITC_HVT_EC_PARAM
{
    DWORD         dwCapShutter;            //×¥ÅÄ¿ìÃÅ0~65535
    WORD         wCapGain;            //×¥ÅÄÔöÒæ0¡«100
    BYTE          byRes[2];
    DWORD         dwDayTimeVideoShutter;    //°×ÌìÆØ¹âÊ±¼ä×î´óÖµ
    WORD         wDayTimeVideoGain;        //°×ÌìÔöÒæ×î´óÖµ
    WORD         wNightVideoGain;            //ÍíÉÏÔöÒæ×î´óÖµ
    DWORD         wNightVideoShutter;        //ÍíÉÏÆØ¹âÊ±¼ä×î´óÖµ
    BYTE          byRes1[108];
}NET_ITC_HVT_EC_PARAM, *LPNET_ITC_HVT_EC_PARAM;

typedef struct tagNET_ITC_LANE_HVT_PARAM
{
    BYTE byLaneNO; //¹ØÁªµÄ³µµÀºÅ 1~255£¨ÓÃÓÚµþ¼ÓºÍÉÏ´«£©
    BYTE bySignSpeed;    //±êÖ¾ÏÞËÙ£¬µ¥Î»km/h 0¡«255  70
    BYTE bySpeedLimit;    //ÏÞËÙÖµ£¬µ¥Î»km/h 0¡«255    80 Êµ¼ÊÆðÐ§
    BYTE byBigCarSignSpeed;///*´ó³µ±êÖ¾ÏÞËÙ£¬µ¥Î»km/h*/
    BYTE byBigCarSpeedLimit;/*´ó³µÏÞËÙÖµ£¬µ¥Î»km/h*/
    BYTE bySpeedCapEn; //ÊÇ·ñÆôÓÃ³¬ËÙ×¥ÅÄ£¬0-·ñ£¬1-ÊÇ
    BYTE byCaptureCount;//×¥ÅÄÕÅÊý1¡«5(Õý³£)
    BYTE byRelatedIOOut;    /*¹ØÁªµÄIOÊä³ö¿Ú(¿ÉÒÔÍ¬Ê±¹ØÁª¶à¸ö)£¬°´Î»±íÊ¾IOÊä³ö¿Ú£¬µÚ0Î»±íÊ¾IOÊä³ö¿Ú1£¬ÒÔ´ËÀàÍÆ£¬0-²»¹ØÁª£¬1-¹ØÁª*/
    BYTE byFlashMode;        /*ÉÁ¹âµÆÉÁË¸Ä£Ê½£¬0-Í¬Ê±ÉÁ£¬1-ÂÖÁ÷ÉÁ*/
    BYTE byEnableRadar; //ÊÇ·ñÆôÓÃÀ×´ï²âËÙ£¬0-·ñ£¬1-ÊÇ
    BYTE byRes2[2];
    DWORD dwCapTarget;    //×¥ÅÄÀàÐÍ bit0 ±íÊ¾»ú¶¯³µ bit1 ±íÊ¾·Ç»ú¶¯³µ bit2 ±íÊ¾ÐÐÈË 0¡«±íÊ¾²»Ñ¡Ôñ 1¡«±íÊ¾Ñ¡Ôñ
    NET_ITC_INTERVAL_PARAM struInterval; //×¥ÅÄ¼ä¸ô²ÎÊý
    BYTE byRes3[24];
    NET_ITC_LANE_LOGIC_PARAM struLane; //³µµÀÊôÐÔ£¬ÓÃbyUseageTypeºÍbyCarDriveDirect
    NET_ITC_LINE struLeftLaneLine;          //×ó³µµÀÏß£¬ÏßÀàÐÍÎªÐéÏß¡¢ÊµÏß¡¢µ¥»ÆÏßºÍË«»ÆÏß
    NET_ITC_LINE struRightLaneLine;          //ÓÒ³µµÀÏß£¬ÏßÀàÐÍÎªÐéÏß¡¢ÊµÏß¡¢µ¥»ÆÏßºÍË«»ÆÏß
    NET_ITC_POLYGON struPlateRecog;         //ÅÆÊ¶ÇøÓò²ÎÊý
    NET_ITC_POLYGON struTraceArea;          //ÊÓÆµ´¥·¢½¹µãÇøÓò
    NET_VCA_LINE  struForwardTrigLine;      //ÕýÏò´¥·¢Ïß£ºÒ»ÌõÏß¶Î£¬¹ØÐÄ¶ËµãÎ»ÖÃ£¬Ä¿Ç°Ö»Ö§³ÖË®Æ½ÅäÖÃ£¬½Ó¿Ú°´Ïß¶ÎµÄÁ½¸ö¶Ëµã±£´æ¡££¨Ò»°ãÅäÖÃÎªÕýÏò³µÁ¾µÄ×î¼Ñ´¥·¢Î»ÖÃ£©     
    NET_VCA_LINE  struBackwardTrigLine;     //±³Ïò´¥·¢Ïß£ºÒ»ÌõÏß¶Î£¬¹ØÐÄ¶ËµãÎ»ÖÃ£¬Ä¿Ç°Ö»Ö§³ÖË®Æ½ÅäÖÃ£¬½Ó¿Ú°´Ïß¶ÎµÄÁ½¸ö¶Ëµã±£´æ£¨Ò»°ãÅäÖÃÎª±³Ïò³µÁ¾µÄ×î¼Ñ´¥·¢Î»ÖÃ£©
    NET_VCA_LINE  struLeftTrigLine;          //×ó±ß´¥·¢Ïß£ºÒ»ÌõÏß¶Î£¬¹ØÐÄ¶ËµãÎ»ÖÃ£¬Ä¿Ç°Ö»Ö§³Ö´¹Ö±ÅäÖÃ£¬½Ó¿Ú°´Ïß¶ÎµÄÁ½¸ö¶Ëµã±£´æ£¨Ò»°ãÅäÖÃÎª´Ó×ó±ß½øÈë³µÁ¾µÄ×î¼Ñ´¥·¢Î»ÖÃ£©
    NET_VCA_LINE  struRightTrigLine;          //ÓÒ±ß´¥·¢Ïß£ºÒ»ÌõÏß¶Î£¬¹ØÐÄ¶ËµãÎ»ÖÃ£¬Ä¿Ç°Ö»Ö§³Ö´¹Ö±ÅäÖÃ£¬½Ó¿Ú°´Ïß¶ÎµÄÁ½¸ö¶Ëµã±£´æ£¨Ò»°ãÅäÖÃÎª´ÓÓÒ±ß½øÈë³µÁ¾µÄ×î¼Ñ´¥·¢Î»ÖÃ£©
    BYTE byRes4[60];
}NET_ITC_LANE_HVT_PARAM, *LPNET_ITC_LANE_HVT_PARAM;

typedef struct tagNET_ITC_POST_HVT_PARAM
{
    BYTE byLaneNum;//Ê¶±ðµÄ³µµÀ¸öÊý£¬1-6 
    BYTE bySceneMode;//0-Î´Öª1-³ÇÇøµÀÂ·£»2-Ð¡Çø³öÈë¿Ú
    BYTE byRoadExpBright;//Â·ÃæÆÚÍûÁÁ¶È£¨ÊÓÆµÆØ¹â²ÎÊýµ÷ÕûµÄÒÀ¾ÝÖ®Ò»¡£ÔÚÎÞ»ú¶¯³µÊ±£¬ÒÀ¾Ý´ËÁÁ¶ÈÆÚÍûÖµ£¬µ÷ÕûÊÓÆµÆØ¹â²ÎÊý£©
    BYTE byPlateExpBright;//³µÅÆÆÚÍûÁÁ¶È£¨ÊÓÆµÆØ¹â²ÎÊýµ÷ÕûµÄÒÀ¾ÝÖ®Ò»¡£ÔÚÓÐ»ú¶¯³µÍ¨¹ý²¢Ê¶±ðµ½³µÅÆÊ±£¬ÒÀ¾Ý´ËÁÁ¶ÈÆÚÍûÖµ£¬¶ÔÊÓÆµÆØ¹â²ÎÊýµ÷Õû£©
    NET_ITC_POLYGON struDetectArea;                    //ÊÓÆµ¼ì²âÇøÓò  
    NET_ITC_SNAPMODE_PARAM  struCapMode;//×¥ÅÄÄ£Ê½  
    NET_ITC_HVT_EC_PARAM struEcParam;    //ÆØ¹â¿ØÖÆ²ÎÊý  
    NET_ITC_LANE_HVT_PARAM struLaneParam[MAX_ITC_LANE_NUM]; //µ¥³µµÀÊôÐÔ
    NET_ITC_PLATE_RECOG_PARAM  struPlateRecog;    //ÅÆÊ¶²ÎÊý
    NET_DVR_GEOGLOCATION struGeogLocation;    //µØÖ·Î»ÖÃ£¨Ä¬ÈÏÕã½­£©
    BYTE byRes[324];
}NET_ITC_POST_HVT_PARAM, *LPNET_ITC_POST_HVT_PARAM;

/*************************MPR´¥·¢Ä£Ê½ begin 2013-12-07****************/
typedef struct tagNET_ITC_LANE_MPR_PARAM
{
    BYTE byLaneNO;
    union
    {
        BYTE  uLen[4];
        struct
        {
            BYTE  byIONo;//IOºÅ[1, byIoInNum+1] ×îÐ¡´Ó1¿ªÊ¼£¬×î´óÖµ¸ù¾Ý½Ó¿ÚÄÜÁ¦·µ»ØNET_DVR_SNAP_ABILITYµÄ×Ö¶ÎbyIoInNum
            BYTE  byTriggerType;//0-ÏÂ½µÑØ£¬1-ÉÏÉýÑØ
            BYTE  byRes1[2];
        }struIO;//IOÄ£Ê½ÏÂÉúÐ§
        struct
        {
            BYTE  byRelateChan;//¹ØÁª³µ¼ìÆ÷Í¨µÀºÅ[1,16]
            BYTE  byRes2[3];    
        }struRS485;
    }uTssParamInfo;
    BYTE byCarDriveDirect; //³µÁ¾ÐÐÊ»·½Ïò ITC_LANE_CAR_DRIVE_DIRECT
    BYTE byRes[58];
    NET_ITC_LINE struLaneLine;//³µµÀÏß
    NET_ITC_POLYGON struPlateRecog;//ÅÆÊ¶ÇøÓò
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE byRelaLaneDirectionType;
    BYTE byRes1[255];
}NET_ITC_LANE_MPR_PARAM,*LPNET_ITC_LANE_MPR_PARAM;

typedef struct tagNET_ITC_POST_MPR_PARAM
{
    BYTE byEnable;    
    BYTE byLaneNum;
    BYTE bySourceType;//0-MPR´¥·¢£¨ÊÓÆµ´¥·¢£©,1-¹ØÁªIO´¥·¢£¨µØ¸ÐÏßÈ¦£©,2-¹ØÁªRS485µÄ´¥·¢ÐÅºÅ
    BYTE byPicUploadType;//Í¼Æ¬ÉÏ´«ÀàÐÍ£¬0~È«²¿ÉÏ´«£¬1-ÕýÏòÉÏ´«£¬2-±³ÏòÉÏ´«
    BYTE byRoadType;//Ä£Ê½Ñ¡Ôñ 0-³öÈë¿Ú£¬1-³ÇÊÐµÀÂ·£¬2-×Ô¶¨Òå
    BYTE byRes2;
    WORD wCustomDelayTime;//×Ô¶¨Òå×¥ÅÄÑÓÊ±Ê±¼ä£¨ÔÚbyRoadTypeÎª "×Ô¶¨Òå"µÄÊ±ºòÉúÐ§£©£¬·¶Î§ÔÚ[0,15000]ms
    BYTE byRes[56];
    NET_ITC_LINE struLaneBoundaryLine;//³µµÀ±ß½çÏß£¨×î×ó±ß³µµÀµÄ×ó±ß½çÏß£©
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog;//ÅÆÊ¶²ÎÊý  40
    NET_ITC_LANE_MPR_PARAM struLaneParam[MAX_ITC_LANE_NUM/*6*/];    
    char szSceneName[NAME_LEN/*32*/]; //³¡¾°Ãû³Æ
    BYTE byRes1[408];
}NET_ITC_POST_MPR_PARAM,*LPNET_ITC_POST_MPR_PARAM;
/*************************MPR´¥·¢Ä£Ê½ end 2013-12-07****************/

typedef struct tagNET_DVR_VIA_LANE_PARAM
{
    BYTE byLaneNO;  //¹ØÁª³µµÀºÅ
    BYTE byRes[63]; //±£Áô 
    NET_ITC_LANE_LOGIC_PARAM  struLogicParam; //³µµÀÊôÐÔ²ÎÊý
    NET_ITC_LINE  struLaneLine;//³µµÀÏß  
    NET_ITC_POLYGON  struPlateRecog;//ÅÆÊ¶ÇøÓò  
    BYTE byRes1[300]; //±£Áô 
} NET_DVR_VIA_LANE_PARAM,*LPNET_DVR_VIA_LANE_PARAM;

typedef struct tagNET_DVR_VIA_VTCOIL_PARAM
{
    BYTE byEnable;    //Ê¹ÄÜ 0-²»¿ªÆô 1-¿ªÆô
    BYTE byLaneNum; //³µµÀÊý
    BYTE byRes[62]; //±£Áô     
    NET_ITC_LINE  struLaneBoundaryLine;//³µµÀ±ß½çÏß£¨×î×ó±ß³µµÀµÄ×ó±ß½çÏß£© 
    NET_DVR_VIA_LANE_PARAM  struLaneParam[MAX_ITC_LANE_NUM/*6*/];
    NET_ITC_PLATE_RECOG_PARAM  struPlateRecog;//ÅÆÊ¶²ÎÊý      
    BYTE byRes1[624];//±£Áô
}NET_DVR_VIA_VTCOIL_PARAM,*LPNET_DVR_VIA_VTCOIL_PARAM;

//ÅäÖÃÌõ¼þ½Ó¿Ú
typedef struct tagNET_DVR_TRIGGER_COND
{
    DWORD  dwSize;       //½á¹¹Ìå´óÐ¡
    DWORD  dwChannel;    //Í¨µÀºÅ
    DWORD  dwTriggerMode;//´¥·¢·½Ê½£¬²Î¿¼ ITC_TRIGGERMODE_TYPE
    BYTE   byDetSceneID;//¼ì²â³¡¾°ºÅ[1,4], IPCÄ¬ÈÏÊÇ0
    BYTE   byRes[63];    //±£ÁôÁô
}NET_DVR_TRIGGER_COND,*LPNET_DVR_TRIGGER_COND;

typedef struct tagNET_ITC_LANE_IMT_PARAM
{
    BYTE byLaneNO;//µþ¼Ó³µµÀºÅ
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE byRelaLaneDirectionType;
    BYTE byRes[146];
    NET_ITC_LINE struLaneLine;//³µµÀÏß
    BYTE byRes1[256];
}NET_ITC_LANE_IMT_PARAM,*LPNET_ITC_LANE_IMT_PARAM;

typedef struct tagNET_ITC_POST_IMT_PARAM
{
    BYTE byEnable;    
    BYTE byLaneNum;
    BYTE bySnapMode; //×¥ÅÄÀàÐÍ£»0~»ú¶¯³µ£¬1~»ú·ÇÈË
    BYTE byRes[61];
    NET_ITC_PLATE_RECOG_PARAM  struPlateRecog;//ÅÆÊ¶²ÎÊý 
    NET_ITC_LINE struLaneBoundaryLine;//³µµÀ±ß½çÏß£¨×îÓÒ±ß³µµÀµÄ±ß½çÏß£©
    NET_ITC_LANE_IMT_PARAM struLaneParam[MAX_ITC_LANE_NUM/*6*/];    
    BYTE byRes1[1584];
}NET_ITC_POST_IMT_PARAM,*LPNET_ITC_POST_IMT_PARAM;

typedef struct tagNET_ITC_LANE_PRS_PARAM
{
    BYTE byLaneNO;
    union
    {
        BYTE  uLen[4];
        struct
        {
            BYTE  byIONo;//IOºÅ[1,4]
            BYTE  byTriggerType;//0-ÏÂ½µÑØ£¬1-ÉÏÉýÑØ
            BYTE  byRes1[2];
        }struIO;//IOÄ£Ê½ÏÂÉúÐ§
        struct
        {
            BYTE  byRelateChan;//¹ØÁª³µ¼ìÆ÷Í¨µÀºÅ[1,16]
            BYTE  byRes2[3];    
        }struRS485;
    }uTssParamInfo;
    BYTE byRes[59];
    NET_ITC_LINE struLaneLine;//³µµÀÏß
    NET_ITC_POLYGON struPlateRecog;//ÅÆÊ¶ÇøÓò
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE byRelaLaneDirectionType;
    BYTE byRes1[255];
}NET_ITC_LANE_PRS_PARAM,*LPNET_ITC_LANE_PRS_PARAM;


typedef struct tagNET_ITC_POST_PRS_PARAM
{
    BYTE byEnable;    
    BYTE byLaneNum;
    BYTE bySourceType;//0-ÊÓÆµ¼ì²â,1-¹ØÁªIO´¥·¢£¨µØ¸ÐÏßÈ¦£©,2-¹ØÁªRS485µÄ´¥·¢ÐÅºÅ
    BYTE bySnapMode;//0-È«¾°Í¼£¬1-È«¾°Í¼+ÌØÐ´
    BYTE byCapMode;//bySourceTypeÎª0ÊÓÆµ¼ì²âÊ±Ê¹ÓÃ£¬0-ÆµÉÁÄ£Ê½£»1-±¬ÉÁÄ£Ê½
    BYTE byRes[59];
    NET_ITC_LINE struLaneBoundaryLine;//³µµÀ±ß½çÏß£¨×î×ó±ß³µµÀµÄ×ó±ß½çÏß£©
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog;//ÅÆÊ¶²ÎÊý  40
    NET_ITC_LANE_PRS_PARAM struLaneParam[MAX_ITC_LANE_NUM/*6*/];    
    BYTE byRes1[440];
}NET_ITC_POST_PRS_PARAM,*LPNET_ITC_POST_PRS_PARAM;

typedef struct tagNET_IPC_LANE_HVT_PARAM
{
    BYTE byLaneNO;
    BYTE byCarDriveDirect; //³µÁ¾ÐÐÊ»·½Ïò ITC_LANE_CAR_DRIVE_DIRECT
    BYTE byRes[62];
    NET_ITC_LINE struLaneLine;//³µµÀÏß
    NET_ITC_POLYGON struPlateRecog;//ÅÆÊ¶ÇøÓò
    BYTE byRes1[256];
} NET_IPC_LANE_HVT_PARAM,*LPNET_IPC_LANE_HVT_PARAM;

typedef struct tagNET_IPC_POST_HVT_PARAM
{
    BYTE  byEnable;    
    BYTE  byLaneNum;
    BYTE  byRes[62];
    NET_ITC_LINE struLaneBoundaryLine;//³µµÀ±ß½çÏß£¨×î×ó±ß³µµÀµÄ×ó±ß½çÏß£©
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog;//ÅÆÊ¶²ÎÊý  40
    NET_IPC_LANE_HVT_PARAM struLaneParam[MAX_ITC_LANE_NUM/*6*/];    
    char    szSceneName[NAME_LEN/*32*/]; //³¡¾°Ãû³Æ
    BYTE  byRes1[408];
} NET_IPC_POST_HVT_PARAM,*LPNET_IPC_POST_HVT_PARAM;

//×¥ÅÄ»ú4.0ÐÂÔö
typedef struct tagNET_ITC_LANE_HVT_PARAM_V50
{
    BYTE  byLaneNO;        //¹ØÁªµÄ³µµÀºÅ1¡«255(ÓÃÓÚµþ¼ÓºÍÉÏ´«)
    BYTE  byFlashMode;    //ÉÁ¹âµÆÉÁË¸Ä£Ê½£¬0-Í¬Ê±ÉÁ£¬1-ÂÖÁ÷ÉÁ
    BYTE  bySignSpeed;    //Ð¡³µ±êÖ¾ÏÞ¸ßËÙ£¬µ¥Î»km/h
    BYTE  bySpeedLimit;    //Ð¡³µÏÞ¸ßËÙÖµ£¬µ¥Î»km/h
    BYTE  bySignLowSpeed;    //Ð¡³µ±êÖ¾ÏÞµ×ËÙ£¬µ¥Î»km/h
    BYTE  byLowSpeedLimit;    //Ð¡³µÏÞµ×ËÙÖµ£¬µ¥Î»km/h
    BYTE  byBigCarSignSpeed;    //´ó³µ±êÖ¾ÏÞ¸ßËÙ£¬µ¥Î»km/h£¨ÐÂ½»¹æ£©
    BYTE  byBigCarSpeedLimit;    //´ó³µÏÞ¸ßËÙÖµ£¬µ¥Î»km/h£¨ÐÂ½»¹æ£©
    BYTE  byBigCarSignLowSpeed;    //´ó³µ±êÖ¾ÏÞµ×ËÙ£¬µ¥Î»km/h
    BYTE  byBigCarLowSpeedLimit;    //´ó³µÏÞµ×ËÙÖµ£¬µ¥Î»km/h
    BYTE  bySnapTimes;    //¿¨¿Ú×¥ÅÄÕÅÊý£¬1~3
    BYTE  byDriveLineSnapTime;// Ñ¹Ïß×¥ÅÄÕÅÊý 1~3
    BYTE  byHighSpeedSnapTime;// ³¬¸ßËÙ×¥ÅÄÕÅÊý1~3
    BYTE  byLowSpeedSnapTime;// ³¬µÍËÙ×¥ÅÄÕÅÊý1~3
    BYTE  byBanSnapTime;// Î¥·´½ûÁî×¥ÅÄÕÅÊý  1~3
    BYTE  byReverseSnapTime;//ÄæÐÐ×¥ÅÄÕÅÊý  1~3
    BYTE  byRelatedDriveWay;                //¹ØÁª³µµÀºÅ£¬ÓÃÓÚÆ¥Åä³µ¼ìÆ÷
    BYTE  byLaneType;   //³µµÀÀàÐÍ£¬0-Î´ÅäÖÃ¡¢1-¸ßËÙ¹«Â·¡¢2-³ÇÊÐ¿ìËÙÂ·¡¢0xff-ÆäËûµÀÂ·
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅbyRelatedDriveWay¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE  byRelaLaneDirectionType;
    BYTE  byRes1[29];
    //Ä¿Ç°½öÊ¹ÓÃµÚÒ»¸ö³µµÀµÄ£¬ÒÔºó¿ÉÄÜ»áÀ©Õ¹Îª¶à³µµÀ·Ö±ðÅäÖÃ
    //ÀàÐÍ, °´Î»±íÊ¾,0-²»ÆôÓÃ,1-ÆôÓÃ²Î¿¼ ITC_VIOLATION_DETECT_TYPE
    DWORD  dwVioDetectType;
    DWORD  dwRelatedIOOut;  //¹ØÁªµÄIOÊä³ö¿Ú(¿ÉÒÔÍ¬Ê±¹ØÁª¶à¸ö)£¬°´Î»±íÊ¾IOÊä³ö¿Ú£¬µÚ0Î»±íÊ¾IOÊä³ö¿Ú1£¬ÒÔ´ËÀàÍÆ£¬0-²»¹ØÁª£¬1-¹ØÁª
    NET_ITC_LINE struTrigLine; //´¥·¢Ïß£¬Ä¿Ç°½öÊ¹ÓÃµÚÒ»¸ö³µµÀµÄ£¬ÒÔºó¿ÉÄÜ»áÀ©Õ¹Îª¶à³µµÀ·Ö±ðÅäÖÃ
    NET_ITC_LINE struLineLeft;                //×ó³µµÀÏß
    NET_ITC_POLYGON struPlateRecog;       //ÅÆÊ¶ÇøÓò
    NET_ITC_LANE_LOGIC_PARAM struLane;   //³µµÀÊôÐÔ£¬ÓÃbyUseageTypeºÍbyCarDriveDirect
    NET_ITC_INTERVAL_PARAM struInterval;//×¥ÅÄ¼ä¸ô²ÎÊý£¨20byte£©
    BYTE byRes2[280];
}NET_ITC_LANE_HVT_PARAM_V50, *LPNET_ITC_LANE_HVT_PARAM_V50;


typedef struct tagNET_ITC_POST_HVT_PARAM_V50
{
    BYTE byLaneNum;    //Ê¶±ðµÄ³µµÀ¸öÊý£¬1-6
    BYTE byCapType;        //×¥ÅÄÀàÐÍ£¬0-»ú¡¢·Ç¡¢ÈË£¨Ä¬ÈÏ£©£¬1-»ú¶¯³µ
    BYTE byCapMode;    //×¥ÅÄ·½Ê½£¬0-ÊÓÆµ³éÖ¡£¬1-´ò¶Ï×¥ÅÄ£¬2-»ìºÏÄ£Ê½£¬ 
    BYTE bySecneMode;    //³¡¾°Ä£Ê½£¬0-³ÇÇøµÀÂ·£¨Ä¬ÈÏ£©£¬1-Ð¡Çø³öÈë¿Ú£¬2-¸ßËÙ¹«Â·    
    BYTE bySpeedMode;  //²âËÙÄ£Ê½£¬0-ÎÞ²âËÙ£¬1-À×´ï²âËÙ£¬2-ÊÓÆµ²âËÙ
    BYTE byLineRuleEffect; //´¥·¢¹æÔòÏßÓÐÐ§ÐÔ,Ã¿Ò»Î»´ú±íÒ»Ìõ´¥·¢Ïß,0-ÎÞÐ§;1-ÓÐÐ§¡£bit0-×ó´¥·¢Ïß;bit1-ÓÒ´¥·¢Ïß;bit2-ÊÓÆµ¼ì²âÇøÓò
    BYTE byRes1[78];
    NET_ITC_LINE struLeftTrigLine;    //×ó´¥·¢Ïß(Ò»Ìõ´¹Ö±Ïß)
    NET_ITC_LINE struRigtTrigLine;    //ÓÒ´¥·¢Ïß(Ò»Ìõ´¹Ö±Ïß)
    NET_ITC_LINE struLaneBoundaryLine;        //³µµÀ±ß½çÏß£¨×îÓÒ±ß³µµÀµÄÓÒ³µµÀÏß£©
    NET_ITC_POLYGON struDetectArea;    //ÊÓÆµ¼ì²âÇøÓò
    NET_DVR_GEOGLOCATION struGeogLocation; //µØÀíÎ»ÖÃ£¨Ä¬ÈÏÕã½­Ê¡£©¼ÆËãÊ±Çø
    NET_ITC_LANE_HVT_PARAM_V50 struLaneParam[MAX_ITC_LANE_NUM/*6*/]; //µ¥³µµÀÊôÐÔ
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog;    //ÅÆÊ¶²ÎÊý
    BYTE byRes2[260];
} NET_ITC_POST_HVT_PARAM_V50, *LPNET_ITC_POST_HVT_PARAM_V50;


//³µµÀ²ÎÊý
typedef struct tagNET_ITC_LANE_NOCOMITY_PEDESTRIAN_PARAM
{
    BYTE byRelatedDriveWay;//¹ØÁªµÄ³µµÀºÅ
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE byRelaLaneDirectionType;
    BYTE byPedestriansNum;//ÐÐÈËÊýÁ¿ãÐÖµ£º·¶Î§1-100£¬Ä¬ÈÏÖµ1
    BYTE byVehicleSpeed;//³µÁ¾ËÙ¶ÈãÐÖµ£º·¶Î§0-100£¬Ä¬ÈÏÖµ0
    DWORD dwVehicleInterval; //¸ú³µ¼ì²âãÐÖµ£º·¶Î§0-65536£¬Ä¬ÈÏÖµ0
    BYTE byPedesDetRule; //ÐÐÈË¼ì²â¹æÔò£»´ú±íÐÐÈË¼ì²âÇøÓòÖÐÐÐÈËÐÐÊ»·½Ïò£» 0~Ïò×ó£¬ 1~ÏòÓÒ¡£
    BYTE byRes[3];
    NET_ITC_LINE struLaneLine;//³µµÀÏß
    NET_ITC_LINE struStopLine;//Í£Ö¹Ïß
    NET_ITC_POLYGON struPlateRecog;       //ÅÆÊ¶ÇøÓò 
    BYTE byRes1[280];
} NET_ITC_LANE_NOCOMITY_PEDESTRIAN_PARAM,
*LPNET_ITC_LANE_NOCOMITY_PEDESTRIAN_PARAM;

//²»ÀñÈÃÐÐÈË²ÎÊý
typedef struct tagNET_ITC_NOCOMITY_PEDESTRIAN_PARAM
{
    BYTE byEnable;    //Ê¹ÄÜ
    BYTE byLaneNum;// ¹ØÁª³µµÀ×ÜÊý£º·¶Î§1-3£¬Ä¬ÈÏÖµ3
    BYTE byRes[74];
    NET_ITC_LINE struLaneBoundaryLine;//³µµÀÓÒ±ß½çÏß
    NET_ITC_LINE struTriggerLine;//²»ÀñÈÃÐÐÈË´¥·¢Ïß
    NET_ITC_POLYGON struPedesDetRecog;//ÐÐÈË¼ì²âÇøÓò
    NET_ITC_LANE_NOCOMITY_PEDESTRIAN_PARAM struLaneParam[MAX_ITC_LANE_NUM/*6*/];    //³µµÀ²ÎÊý
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog; //ÅÆÊ¶²ÎÊý
    BYTE byRes1[400];
}NET_ITC_NOCOMITY_PEDESTRIAN_PARAM,
*LPNET_ITC_NOCOMITY_PEDESTRIAN_PARAM;

//µ¥¸öIO½ÓÈëÐÅºÅµÆ²ÎÊý
typedef struct tagNET_ITC_SINGLE_IO_LIGHT_PARAM
{
    BYTE byLightType; //½»Í¨µÆµ¼ÏòÀàÐÍ,0-×ó×ªµÆ,1-Ö±ÐÐµÆ,2-ÓÒ×ªµÆ
    BYTE byRelatedIO; //¹ØÁªµÄIO¿ÚºÅ
    BYTE byRedLightState; //ºìµÆµçÆ½×´Ì¬£¬0-¸ßµçÆ½ºìµÆ£¬1-µÍµçÆ½ºìµÆ
    BYTE byRes[17];
}NET_ITC_SINGLE_IO_LIGHT_PARAM, *LPNET_ITC_SINGLE_IO_LIGHT_PARAM;

//IO½ÓÈëÐÅºÅµÆ²ÎÊý
typedef struct tagNET_ITC_IO_LIGHT_PARAM
{
    NET_ITC_SINGLE_IO_LIGHT_PARAM struIOLight[MAX_LIGHT_NUM]; //µ¥¸öIO½ÓÈëÐÅºÅµÆ²ÎÊý
    BYTE byRes[8];
}NET_ITC_IO_LIGHT_PARAM, *LPNET_ITC_IO_LIGHT_PARAM;

//µ¥¸ö485½ÓÈëÐÅºÅµÆ²ÎÊý
typedef struct tagNET_ITC_SINGLE_RS485_LIGHT_PARAM
{
    BYTE byLightType; //½»Í¨µÆµ¼ÏòÀàÐÍ£¬0-×ó×ªµÆ£¬1-Ö±ÐÐµÆ£¬2-ÓÒ×ªµÆ
    BYTE byRelatedLightChan; //¹ØÁªµÄºìÂÌµÆ¼ì²âÆ÷Í¨µÀºÅ
    BYTE byInputLight;    //½ÓÈëµÄÐÅºÅµÆÀàÐÍ£¬0-½ÓºìµÆ£¬1-½ÓÂÌµÆ
    BYTE byRelatedYLightChan; //¹ØÁªµÄ»ÆµÆ¼ì²âÆ÷Í¨µÀºÅ
    BYTE byRes[16];
}NET_ITC_SINGLE_RS485_LIGHT_PARAM, *LPNET_ITC_SINGLE_RS485_LIGHT_PARAM;

//485½ÓÈëÐÅºÅµÆ²ÎÊý
typedef struct tagNET_ITC_RS485_LIGHT_PARAM
{
    NET_ITC_SINGLE_RS485_LIGHT_PARAM struRS485Light[MAX_LIGHT_NUM]; //µ¥¸ö485½ÓÈëÐÅºÅµÆ²ÎÊý
    BYTE byRes[8];
}NET_ITC_RS485_LIGHT_PARAM, *LPNET_ITC_RS485_LIGHT_PARAM;

typedef struct tagNET_POS_PARAM
{
    WORD wLeft;
    WORD wTop;
    WORD wRight;
    WORD wBottom;
}NET_POS_PARAM, *LPNET_POS_PARAM;

//µ¥×éÊÓÆµ¼ì²â½»Í¨ÐÅºÅµÆ²ÎÊý½á¹¹
typedef struct tagNET_ITC_SINGLE_VIDEO_DETECT_LIGHT_PARAM
{
    BYTE byLightNum; //½»Í¨µÆ¸öÊý
    BYTE byStraightLight; //ÊÇ·ñÓÐÖ±ÐÐ±êÖ¾µÆ£¬0-·ñ £¬1-ÊÇ
    BYTE byLeftLight; //ÊÇ·ñÓÐ×ó×ª±êÖ¾µÆ£¬0-·ñ£¬1-ÊÇ
    BYTE byRightLight; //ÊÇ·ñÓÐÓÒ×ª±êÖ¾µÆ£¬0-·ñ£¬1-ÊÇ
    BYTE byRedLight;//ÊÇ·ñÓÐºìµÆ£¬0-·ñ£¬1-ÊÇ
    BYTE byGreenLight; //ÊÇ·ñÓÐÂÌµÆ£¬0-·ñ£¬1-ÊÇ
    BYTE byYellowLight; //ÊÇ·ñÓÐ»ÆµÆ£¬0-·ñ£¬1-ÊÇ
    BYTE byYellowLightTime;//È¡Öµ·¶Î§£¨0¡«10s£©£¨ITC3.7Ver£©
    NET_POS_PARAM struLightRect; //½»Í¨µÆÇøÓò
    BYTE byRes[24];
}NET_ITC_SINGLE_VIDEO_DETECT_LIGHT_PARAM, *LPNET_ITC_SINGLE_VIDEO_DETECT_LIGHT_PARAM;


//ÊÓÆµ¼ì²â½»Í¨ÐÅºÅµÆ²ÎÊý½á¹¹(×î´ó¿ÉÓÐ12¸öÇøÓò¼ì²â£¬488×Ö½Ú)
typedef struct tagNET_ITC_VIDEO_DETECT_LIGHT_PARAM
{
    NET_ITC_SINGLE_VIDEO_DETECT_LIGHT_PARAM struTrafficLight[MAX_VIDEO_DETECT_LIGHT_NUM]; //µ¥¸öÊÓÆµ¼ì²âÐÅºÅµÆ²ÎÊý
    BYTE byRes[8];
}NET_ITC_VIDEO_DETECT_LIGHT_PARAM, *LPNET_ITC_VIDEO_DETECT_LIGHT_PARAM;

//½»Í¨ÐÅºÅµÆ½ÓÈë²ÎÊý
typedef union tagNET_ITC_LIGHT_ACCESSPARAM_UNION
{
    DWORD uLen[122];
    NET_ITC_IO_LIGHT_PARAM struIOLight; //IO½ÓÈëÐÅºÅµÆ²ÎÊý
    NET_ITC_RS485_LIGHT_PARAM struRS485Light; //485½ÓÈëÐÅºÅµÆ²ÎÊý
    NET_ITC_VIDEO_DETECT_LIGHT_PARAM struVideoDelectLight; //ÊÓÆµ¼ì²âÐÅºÅµÆ²ÎÊý
}NET_ITC_LIGHT_ACCESSPARAM_UNION, *LPNET_ITC_LIGHT_ACCESSPARAM_UNION;

//½»Í¨ÐÅºÅµÆ²ÎÊý½á¹¹
typedef struct tagNET_ITC_TRAFFIC_LIGHT_PARAM
{
    BYTE bySource; //½»Í¨ÐÅºÅµÆ½ÓÈëÔ´£¬0-IO½ÓÈë£¬1-RS485½ÓÈë
    BYTE byRes1[3];
    NET_ITC_LIGHT_ACCESSPARAM_UNION struLightAccess;//ÐÅºÅµÆ½ÓÈë²ÎÊý
    BYTE byRes[32];
}NET_ITC_TRAFFIC_LIGHT_PARAM, *LPNET_ITC_TRAFFIC_LIGHT_PARAM;

//Î¥¹æ¼ì²âÏß²ÎÊý½á¹¹
typedef struct tagNET_ITC_VIOLATION_DETECT_LINE
{
    NET_ITC_LINE  struLaneLine; //³µµÀÏß²ÎÊý
    NET_ITC_LINE  struStopLine; //Í£Ö¹Ïß²ÎÊý
    NET_ITC_LINE  struRedLightLine; //´³ºìµÆ´¥·¢Ïß²ÎÊý
    NET_ITC_LINE  struCancelLine; //Ö±ÐÐ´¥·¢Î»ÖÃÈ¡ÏûÏß
    NET_ITC_LINE struWaitLine; //´ýÐÐÇøÍ£Ö¹Ïß²ÎÊý
    NET_ITC_LINE struRes[8];
}NET_ITC_VIOLATION_DETECT_LINE, *LPNET_ITC_VIOLATION_DETECT_LINE;

//ÐÐÈË´³ºìµÆ²ÎÊý
typedef struct tagNET_ITC_REDLIGHT_PEDESTRIAN_PARAM
{
    BYTE byEnable;    //Ê¹ÄÜ
    BYTE bySnapNumTimes; //×¥ÅÄÕÅÊý£º1-3£¬Ä¬ÈÏ3ÕÅ
    BYTE byPedesDir; //ÐÐÈË·½Ïò£º0~ÕýÏò£¬1~±³Ïò£¬2~Ë«Ïò
    BYTE byDelayTime; //ÑÓÊ±Ê±¼ä1-5s
    BYTE byStackTargetEnble;//µþ¼ÓÄ¿±ê¿ò£¨¼´×¥ÅÄµÚÒ»ÕÅÍ¼Æ¬ÉÏ¿ò×¡´³ºìµÆµÄÐÐÈË£©£¬0~²»µþ¼Ó£¬1~µþ¼Ó
    BYTE byCalibRecogCtrl;//±ê¶¨ÇøÓò¿ØÖÆ£»0~ÒÆ³ý±ê¶¨ÇøÓò£¬1~Ìí¼Ó±ê¶¨ÇøÓò
    BYTE byRes1[2];
    NET_ITC_TRAFFIC_LIGHT_PARAM struTrafficLight; //½»Í¨ÐÅºÅµÆ²ÎÊý
    NET_ITC_LINE struStopLine;//Í£Ö¹Ïß
    NET_ITC_POLYGON struCalibRecog[MAX_CALIB_RECOG_NUM/*2*/];//±ê¶¨ÇøÓò
    BYTE byRes[440];
}NET_ITC_REDLIGHT_PEDESTRIAN_PARAM,
*LPNET_ITC_REDLIGHT_PEDESTRIAN_PARAM;

typedef struct tagNET_ITC_POST_MOBILE_PARAM
{
    BYTE  byEnable;    
    BYTE  bySceneMode;//³¡¾°Ä£Ê½ 0-¸ßËÙ¹«Â· 1-³ÇÊÐµÀÂ·
    /*×¥ÅÄÀàÐÍ
    bit0-¿¨¿Ú,bit1-´ó³µÕ¼µÀ,bit2-Ñ¹Ó²Â·¼ç
    */
    WORD  wExpressWayCapType;//¸ßËÙ¹«Â·
    /*×¥ÅÄÀàÐÍ
    bit0-¿¨¿Ú,bit1-»úÕ¼·Ç,bit2-Õ¼ÓÃ×¨ÓÃ³µµÀ
    */
    WORD  wUrbanRoadCapType;//³ÇÊÐµÀÂ·
    BYTE  byCapNum;//×¥ÅÄÕÅÊý [2,3]
    BYTE  byRecordEnable;//Î¥ÕÂÂ¼ÏñÊ¹ÄÜ 0-¹Ø±Õ£¬1-¿ªÆô
    DWORD dwPreRecordTime;//Â¼ÏñÔ¤Â¼Ê±¼ä(s)
    DWORD dwOverRecordTime;//Â¼Ïñ³¬Ê±Ê±¼ä(s)
    NET_ITC_LANE_LOGIC_PARAM struLane;   //³µµÀÊôÐÔ
    NET_ITC_POLYGON struPolygon[MAX_MOBILE_POLYGON_NUM/*3*/]; //ÅÆÊ¶ÇøÓò²ÎÊý
    NET_ITC_VIOLATION_DETECT_LINE struLine[MAX_MOBILE_DETECTLINE_NUM/*3*/]; //Î¥¹æ¼ì²âÏß
    NET_ITC_LINE struLaneBoundaryLine;        //³µµÀ±ß½çÏß£¨×îÓÒ±ß³µµÀµÄÓÒ³µµÀÏß£©
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog; //ÅÆÊ¶²ÎÊý
    NET_ITC_INTERVAL_PARAM struInterval;//×¥ÅÄ¼ä¸ô²ÎÊý£¨20byte£©
    BYTE  byRes[256];
}NET_ITC_POST_MOBILE_PARAM,*LPNET_ITC_POST_MOBILE_PARAM;

typedef union tagNET_ITC_TRIGGER_PARAM_UNION
{
    DWORD  uLen[1070];            //²ÎÊý
    NET_ITC_POST_IOSPEED_PARAM      struIOSpeed;    //£¨¿¨¿Ú£©IO²âËÙ²ÎÊý 
    NET_ITC_POST_SINGLEIO_PARAM     struSingleIO;   //£¨¿¨¿Ú£©µ¥IO²ÎÊý
    NET_ITC_POST_RS485_PARAM        struPostRs485;  //£¨¿¨¿Ú£©RS485³µ¼ìÆ÷²ÎÊý
    NET_ITC_POST_RS485_RADAR_PARAM  struPostRadar;  //£¨¿¨¿Ú£©RS485À×´ï²ÎÊý
    NET_ITC_POST_VTCOIL_PARAM       struVtCoil;     //£¨¿¨¿Ú£©ÐéÄâÏßÈ¦²ÎÊý
    NET_ITC_POST_HVT_PARAM          struHvt;        //£¨¿¨¿Ú£©»ìÐÐ¿¨¿Ú²ÎÊý
    NET_ITC_EPOLICE_IOTL_PARAM      struIOTL;        //£¨µç¾¯£©IOºìÂÌµÆ²ÎÊý
    NET_ITC_EPOLICE_RS485_PARAM     struEpoliceRs485; //£¨µç¾¯£©RS485³µ¼ìÆ÷´¥·¢²ÎÊý
    NET_ITC_EPOLICE_RS485_PARAM     struPERs485;    //£¨¿¨Ê½µç¾¯£©RS485³µ¼ìÆ÷´¥·¢²ÎÊý
    NET_ITC_POST_MPR_PARAM          struPostMpr;    //¶àÖ¡¼ì²â´¥·¢£¨MPR£©
    NET_DVR_VIA_VTCOIL_PARAM        struViaVtCoil;  //(VIA)ÊÓÆµ¼ì²â²ÎÊý
    NET_ITC_POST_IMT_PARAM          struPostImt;//ÖÇ»Û¼à¿Ø´¥·¢
    NET_ITC_POST_PRS_PARAM          struPostPrs;//ÊÓÆµ¼ì²â´¥·¢
    NET_IPC_POST_HVT_PARAM          struIpcHvt;//(IPC) »ìÐÐ¿¨¿Ú²ÎÊý
    NET_ITC_POST_HVT_PARAM_V50      struHvtV50;  /*£¨¿¨¿Ú£©»ìÐÐ¿¨¿Ú²ÎÊýV50*/
    NET_ITC_POST_MOBILE_PARAM       struPostMobile;// ÒÆ¶¯½»Í¨´¥·¢Ä£Ê½
    NET_ITC_NOCOMITY_PEDESTRIAN_PARAM struNoComityPed;//²»ÀñÈÃÐÐÈË²ÎÊý
    NET_ITC_REDLIGHT_PEDESTRIAN_PARAM struRedLightPed;//ÐÐÈË´³ºìµÆ²ÎÊý
}NET_ITC_TRIGGER_PARAM_UNION, *LPNET_ITC_TRIGGER_PARAM_UNION;

//µ¥¸ö´¥·¢²ÎÊý½á¹¹
typedef struct tagNET_ITC_SINGLE_TRIGGERCFG
{
    BYTE  byEnable;    //ÊÇ·ñÆôÓÃ¸Ã´¥·¢Ä£Ê½£¬0-·ñ£¬1-ÊÇ
    BYTE  byRes1[3];
    DWORD dwTriggerType; //´¥·¢ÀàÐÍ£¬Ïê¼ûITC_TRIGGERMODE_TYPE
    NET_ITC_TRIGGER_PARAM_UNION uTriggerParam; //´¥·¢²ÎÊý
    BYTE  byRes[64];
}NET_ITC_SINGLE_TRIGGERCFG, *LPNET_ITC_SINGLE_TRIGGERCFG;

//´¥·¢²ÎÊý½á¹¹
typedef struct tagNET_ITC_TRIGGERCFG
{
    DWORD   dwSize;            //½á¹¹³¤¶È
    NET_ITC_SINGLE_TRIGGERCFG  struTriggerParam;  //µ¥¸ö´¥·¢²ÎÊý
    BYTE    byRes[32];
}NET_ITC_TRIGGERCFG, *LPNET_ITC_TRIGGERCFG;


//Î¥¹æ¼ì²âÀàÐÍºê¶¨Òå
typedef enum _ITC_VIOLATION_DETECT_TYPE_
{
    ITC_VIOLATION_POST = 0x01, //¿¨¿Ú×¥ÅÄ
        ITC_VIOLATION_DRIVELINE = 0x02,//Ñ¹³µµÀÏß×¥ÅÄ
        ITC_VIOLATION_REVERSE = 0x04,//ÄæÐÐ×¥ÅÄ
        ITC_VIOLATION_REDLIGHT = 0x08,//´³ºìµÆ×¥ÅÄ
        ITC_VIOLATION_DIRECTION = 0x10,//²»°´µ¼ÏòÐÐÊ»×¥ÅÄ
        ITC_VIOLATION_INTERSECTION_CONGEST = 0x20,//Â·¿ÚÖÍÁô×¥ÅÄ
        ITC_VIOLATION_NONDRIVEWAY = 0x40,  //»úÕ¼·Ç×¥ÅÄ
        ITC_VIOLATION_CHANGELANE = 0x80, //Î¥·¨±äµÀ
        ITC_VIOLATION_BAN = 0x100, //Î¥·¨½ûÁî
        ITC_VIOLATION_INTERSECTION_PARK=0x200,//ºìµÆÔ½Ïß
        ITC_VIOLATION_GREEN_PARK=0x400,//ÂÌµÆÍ£³µ
        ITC_VIOLATION_HIGH_SPEED = 0x800, /*³¬ËÙ*/
        ITC_VIOLATION_LOW_SPEED = 0x1000, /*µÍËÙ*/
        ITC_VIOLATION_EMERGENCY = 0x2000, /*Õ¼ÓÃÓ¦¼±³µµÀ*/
        ITC_VIOLATION_TURN_AROUND = 0x8000,/*Î¥·¨µôÍ·*/
        ITC_VIOLATION_CONGESTION = 0x10000 /*Óµ¶Â*/
}ITC_VIOLATION_DETECT_TYPE;


//Î¥¹æ¼ì²â²ÎÊý½á¹¹
typedef struct tagNET_ITC_VIOLATION_DETECT_PARAM
{
    DWORD dwVioDetectType; //Î¥¹æ¼ì²âÀàÐÍ, °´Î»±íÊ¾, Ïê¼ûITC_VIOLATION_DETECT_TYPE ,0-²»ÆôÓÃ,1-ÆôÓÃ
    BYTE byDriveLineSnapTimes; //Ñ¹³µµÀÏß×¥ÅÄÕÅÊý,2-3
    BYTE byReverseSnapTimes; //ÄæÐÐ×¥ÅÄ,2-3
    WORD wStayTime; //»úÕ¼·ÇÍ£ÁôÊ±¼ä£¨¸ÃÊ±¼äºó×¥ÅÄ£©£¬µ¥Î»s
    BYTE byNonDriveSnapTimes;//»úÕ¼·Ç×¥ÅÄÕÅÊý2-3
    BYTE byChangeLaneTimes;//Î¥·¨±äµÀ×¥ÅÄÕÅÊý 2-3
    BYTE bybanTimes;//Î¥·¨½ûÁî×¥ÅÄÕÅÊý2-3
    BYTE byDriveLineSnapSen;// Ñ¹ÏßÁéÃô¶È(0~100)(3.7Ver)
    WORD wSnapPosFixPixel; //µÚ2,3ÕÅ×¥ÅÄÎ»ÖÃ×îÐ¡Æ«ÒÆ(Î¥·´ÐÅºÅµÆÊ±ÆðÐ§)£¨µ¥Î»£ºÏñËØ£© ÃüÃûÐè¸Ä½ø
    BYTE bySpeedTimes;//Î¥·¨³¬ËÙ×¥ÅÄÕÅÊý2-3(3.8Ver)
    BYTE byTurnAroundEnable;//Î¥ÕÂµôÍ·Ê¹ÄÜ 0~¹Ø±Õ 1~¿ªÆô
    BYTE byThirdPlateRecogTime;//µÚÈýÕÅÅÆÊ¶Ê±¼ä 0~180s
    BYTE byPostSnapTimes;//¿¨¿Ú×¥ÅÄÕÅÊý,1-2ÕÅ
    BYTE byRes1[18];
    WORD wStopLineDis;  //µç¾¯µÚ2ÕÅÎ¥¹æÍ¼Æ¬ÓëÍ£Ö¹ÏßµÄ×î¶Ì¾àÀë£¬[0,300]µ¥Î»(ÏñËØ)
    BYTE byRes[14];
}NET_ITC_VIOLATION_DETECT_PARAM, *LPNET_ITC_VIOLATION_DETECT_PARAM;

//¹ØÁª³µµÀ·½ÏòÀàÐÍ¶¨Òå
typedef enum _ITC_RELA_LANE_DIRECTION_TYPE_
{
    ITC_RELA_LANE_DIRECTION_UNKNOW      = 0,   //ÆäËü
        ITC_RELA_LANE_EAST_WEST               = 1,    //´Ó¶«ÏòÎ÷
        ITC_RELA_LANE_WEST_EAST               = 2,    //´ÓÎ÷Ïò¶«
        ITC_RELA_LANE_SOUTH_NORTH            = 3,    //´ÓÄÏÏò±±
        ITC_RELA_LANE_NORTH_SOUTH            = 4,    //´Ó±±ÏòÄÏ
        ITC_RELA_LANE_EASTSOUTH_WESTNORTH  = 5,    //´Ó¶«ÄÏÏòÎ÷±±
        ITC_RELA_LANE_WESTNORTH_EASTSOUTH  = 6,    //´ÓÎ÷±±Ïò¶«ÄÏ
        ITC_RELA_LANE_EASTNORTH_WESTSOUTH  = 7,    //´Ó¶«±±ÏòÎ÷ÄÏ
        ITC_RELA_LANE_WESTSOUTH_EASTNORTH  = 8     //´ÓÎ÷ÄÏÏò¶«±±
} ITC_RELA_LANE_DIRECTION_TYPE;


//³µµÀÓÃÍ¾ÀàÐÍ¶¨Òå
typedef enum _ITC_LANE_USEAGE_TYPE_
{
    ITC_LANE_USEAGE_UNKNOW     =  0,   //Î´Öª
        ITC_LANE_CARRIAGEWAY  = 1,  //Õý³£³µµÀ
        ITC_LANE_BUS      = 2,  //¹«½»³µ×¨ÓÃµÀ
        ITC_LANE_FAST  = 3,  //¿ì³µµÀ
        ITC_LANE_SLOW  = 4,  //Âý³µµÀ
        ITC_LANE_MOTOR     = 5,   //Ä¦ÍÐ³µµÀ
        ITC_LANE_NONMOTOR  = 6,  //·Ç»ú¶¯³µµÀ
        ITC_LANE_REVERSE_LANE = 7, //·´Ïò³µµÀ
        ITC_LANE_BAN_TRUCKS  = 8, // ½ûÖ¹»õ³µ³µµÀ
        ITC_LANE_MIX = 9, //»ìºÏ³µµÀ
        ITC_LANE_EMERGENCY = 10, //Ó¦¼±³µµÀ
        ITC_LANE_BAN_LEFT  = 11, // ½û×ó³µµÀ
        ITC_LANE_BAN_RIGHT  = 12 // ½ûÓÒ³µµÀ
}ITC_LANE_USEAGE_TYPE;

//³µµÀ·½ÏòÀàÐÍ¶¨Òå
typedef enum _ITC_LANE_DIRECTION_TYPE_
{
    ITC_LANE_DIRECTION_UNKNOW     =  0,   //Î´Öª
        ITC_LANE_LEFT      = 1,  //×ó×ª
        ITC_LANE_STRAIGHT  = 2,  //Ö±ÐÐ
        ITC_LANE_LEFT_STRAIGHT = 3, //×ó×ª+Ö±ÐÐ
        ITC_LANE_RIGHT  = 4,  //ÓÒ×ª
        ITC_LANE_LEFT_RIGHT = 5, //×ó×ª+ÓÒ×ª
        ITC_LANE_RIGHT_STRAIGHT = 6, //ÓÒ×ª+Ö±ÐÐ
        ITC_LANE_LEFT_RIGHT_STRAIGHT = 7, //×ó×ª+ÓÒ×ª+Ö±ÐÐ
        ITC_LANE_LEFT_WAIT  =  9,  //×ó×ª´ýÐÐ
        ITC_LANE_STRAIGHT_WAIT = 10, //Ö±ÐÐ´ýÐÐ
        ITC_LANE_FORWARD = 11, //ÕýÏòÐÐÊ»
        ITC_LANE_BACKWARD = 12, //±³ÏòÐÐÊ»
        ITC_LANE_BOTHWAY = 13, //Ë«ÏòÐÐÊ»
        ITC_LANE_STRAIGHT_WAIT_RIGHT = 14 //Ö±ÐÐ´ýÐÐ + ÓÒ×ª
}ITC_LANE_DIRECTION_TYPE; 

//³µÁ¾ÐÐÊ»·½ÏòÀàÐÍ¶¨Òå 
typedef enum _ITC_LANE_CAR_DRIVE_DIRECT_
{
    ITC_LANE_DRIVE_UNKNOW        = 0, //Î´Öª
        ITC_LANE_DRIVE_UP_TO_DOWN    = 1, //´ÓÉÏÍùÏÂÐÐÊ»(ÏÂÐÐ)
        ITC_LANE_DRIVE_DOWN_TO_UP    = 2  //´ÓÏÂÍùÉÏÐÐÊ»(ÉÏÐÐ)        
}ITC_LANE_CAR_DRIVE_DIRECT;

//ÏßÀàÐÍ¶¨Òå
typedef enum _ITC_LINE_TYPE_
{
    ITC_LINT_UNKNOW     =  0,   //Î´Öª
        ITC_LINE_WHITE      = 1,  //³µµÀ¼äµÄ°×ÊµÏß
        ITC_LINE_STOP       = 2, //³µµÀÍ£Ö¹Ïß
        ITC_LINE_SINGLE_YELLOW = 3, //µ¥»ÆÏß
        ITC_LINE_DOUBLE_YELLOW = 4, //Ë«»ÆÏß
        ITC_LINE_GUARD_RAIL = 5, //³µµÀÏßÉÏÓÐ»¤À¸
        ITC_LINE_NO_CROSS = 6, //³µÁ¾ÎÞ·¨¿çÔ½µÄ³µµÀÏß
        ITC_LINE_DOTTED = 7 //ÐéÏß
}ITC_LINE_TYPE;


//µ¥¸ö³µµÀÊÓÆµµç¾¯´¥·¢²ÎÊý½á¹¹
typedef struct tagNET_ITC_LANE_VIDEO_EPOLICE_PARAM
{
    BYTE byLaneNO; //¹ØÁªµÄ³µµÀºÅ
    BYTE bySensitivity; //ÏßÈ¦ÁéÃô¶È£¬[1,100]
    BYTE byEnableRadar;//ÆôÓÃÀ×´ï²âÊÔ0-²»ÆôÓÃ£¬1-ÆôÓÃ
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE byRelaLaneDirectionType;
    NET_ITC_LANE_LOGIC_PARAM struLane; //³µµÀ²ÎÊý
    NET_ITC_VIOLATION_DETECT_PARAM struVioDetect; //Î¥¹æ¼ì²â²ÎÊý
    NET_ITC_VIOLATION_DETECT_LINE struLine; //Î¥¹æ¼ì²âÏß
    NET_ITC_POLYGON struPlateRecog; //ÅÆÊ¶ÇøÓò²ÎÊý
    BYTE byRecordEnable;//´³ºìµÆÖÜÆÚÂ¼Ïñ±êÖ¾£¬0-²»Â¼Ïñ£¬1-Â¼Ïñ
    BYTE byRecordType;//´³ºìµÆÂ¼ÏñÀàÐÍ£¬0-Ô¤Â¼£¬1-ÑÓÊ±Â¼Ïñ
    BYTE byPreRecordTime;//´³ºìµÆÂ¼ÏñÆ¬¶ÎÔ¤Â¼Ê±¼ä£¨Ä¬ÈÏ0£©£¬µ¥Î»£ºÃë
    BYTE byRecordDelayTime;//´³ºìµÆÂ¼ÏñÆ¬¶ÎÑÓÊ±Ê±¼ä£¨Ä¬ÈÏ0£©£¬µ¥Î»£ºÃë
    BYTE byRecordTimeOut;//´³ºìµÆÖÜÆÚÂ¼Ïñ³¬Ê±Ê±¼ä£¨Ãë£©
    BYTE byCarSpeedLimit; //³µËÙÏÞÖÆÖµ£¬µ¥Î»km/h
    BYTE byCarSignSpeed;//±êÖ¾ÏÞËÙ£¬µ¥Î»km/h
    BYTE bySnapPicPreRecord; //×¥ÅÄÍ¼Æ¬Ô¤Â¼Ê±¼äµã£»0-Ä¬ÈÏÖµ£¨µÚ¶þÕÅÍ¼Æ¬£©£¬1-µÚÒ»ÕÅÍ¼Æ¬£¬2-µÚ¶þÕÅÍ¼Æ¬£¬3-µÚÈýÕÅÍ¼Æ¬
    NET_ITC_INTERVAL_PARAM struInterval;//×¥ÅÄ¼ä¸ô²ÎÊý£¨20byte£©
    BYTE byRes[36];
}NET_ITC_LANE_VIDEO_EPOLICE_PARAM, *LPNET_ITC_LANE_VIDEO_EPOLICE_PARAM;

//ÊÓÆµµç¾¯´¥·¢²ÎÊý½á¹¹
typedef struct tagNET_ITC_VIDEO_EPOLICE_PARAM
{
    BYTE byEnable;    //ÊÇ·ñÆôÓÃ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byLaneNum; //Ê¶±ðµÄ³µµÀ¸öÊý
    BYTE byLogicJudge;//´³ºìµÆÎ¥¹æÅÐ¶ÏÂß¼­£¬ÉèÖÃÖµÎª£º0-°´·½Ïò£¬1-°´³µµÀ
    BYTE byRes1;
    NET_ITC_PLATE_RECOG_PARAM struPlateRecog; //ÅÆÊ¶²ÎÊý
    NET_ITC_TRAFFIC_LIGHT_PARAM struTrafficLight; //½»Í¨ÐÅºÅµÆ²ÎÊý
    NET_ITC_LANE_VIDEO_EPOLICE_PARAM struLaneParam[MAX_ITC_LANE_NUM]; //µ¥³µµÀ²ÎÊý
    NET_ITC_LINE  struLaneBoundaryLine; //³µµÀ±ß½çÏß£¨×îÓÒ±ß³µµÀµÄ±ß½çÏß£©
    NET_ITC_LINE  struLeftLine; //×ó×ªÍä·Ö½çÏß
    NET_ITC_LINE  struRightLine; //ÓÒ×ªÍä·Ö½çÏß
    NET_ITC_LINE  struTopZebraLine; //ÉÏ²¿°ßÂíÏß
    NET_ITC_LINE  struBotZebraLine; //ÏÂ²¿°ßÂíÏß
    BYTE  byRes[32];
}NET_ITC_VIDEO_EPOLICE_PARAM, *LPNET_ITC_VIDEO_EPOLICE_PARAM;

typedef union tagNET_ITC_VIDEO_TRIGGER_PARAM_UNION
{
    DWORD  uLen[1150];            
    NET_ITC_VIDEO_EPOLICE_PARAM struVideoEP; //ÊÓÆµµç¾¯²ÎÊý
}NET_ITC_VIDEO_TRIGGER_PARAM_UNION, *LPNET_ITC_VIDEO_TRIGGER_PARAM_UNION;

typedef struct tagNET_ITC_VIDEO_TRIGGER_PARAM
{
    DWORD dwSize;
    DWORD dwMode; //´¥·¢Ä£Ê½£¬Ïê¼ûITC_TRIGGERMODE_TYPE
    NET_ITC_VIDEO_TRIGGER_PARAM_UNION uVideoTrigger; //´¥·¢Ä£Ê½²ÎÊý
    BYTE  byRes[32];
}NET_ITC_VIDEO_TRIGGER_PARAM, *LPNET_ITC_VIDEO_TRIGGER_PARAM;

typedef struct tagNET_DVR_STATUS_DETECTCFG
{
    DWORD  dwSize;            //½á¹¹³¤¶È
    BYTE   byEnableTrigIODetect; //¿ªÆô´¥·¢IO×´Ì¬¼ì²â£¬1-ÊÇ£¬0-·ñ
    BYTE   byEnableFlashOutDetect; //¿ªÆôÍ¬²½Êä³ö×´Ì¬¼ì²â£¬1-ÊÇ£¬0-·ñ
    BYTE   byEnableRS485Detect; //¿ªÆôRS485½ÓÊÕ×´Ì¬¼ì²â£¬1-ÊÇ£¬0-·ñ
    BYTE   byEnableTrafficLightDetect;//¿ªÆô½»Í¨µÆ×´Ì¬¼ì²â£¬1-ÊÇ£¬0-·ñ
    BYTE   byRes[28];
}NET_DVR_STATUS_DETECTCFG, *LPNET_DVR_STATUS_DETECTCFG;

typedef enum _ITC_STATUS_DETECT_TYPE_
{
    ITC_STATUS_DETECT_NULL = 0,        //Î´Öª
        ITC_STATUS_DETECT_TRIGGERIO,    //´¥·¢IO
        ITC_STATUS_DETECT_FLASHOUT,     //Í¬²½Êä³ö
        ITC_STATUS_DETECT_RS485, //RS485
        ITC_STATUS_DETECT_TRIGGERTYPE, //´¥·¢ÀàÐÍ£¨±£Áô£©
        ITC_STATUS_DETECT_TRAFFICLIGHT_COLOR,  //½»Í¨µÆ£¨Çø·ÖÑÕÉ«£©
        ITC_STATUS_DETECT_TRAFFICLIGHT_TURN  //½»Í¨µÆ£¨Çø·Ö×ªÏò£©
}ITC_STATUS_DETECT_TYPE;

typedef struct tagNET_ITC_TRIGGERIO_INFO
{
    BYTE byTriggerIOIndex[MAX_IOIN_NUM]; //´¥·¢IOºÅ
    BYTE byRes[40]; 
}NET_ITC_TRIGGERIO_INFO, *LPNET_ITC_TRIGGERIO_INFO;

typedef struct tagNET_ITC_FLASHOUT_INFO
{
    BYTE byFlashOutIndex[MAX_IOOUT_K_NUM]; //Í¬²½Êä³öºÅ
    BYTE byRes[40]; 
}NET_ITC_FLASHOUT_INFO, *LPNET_ITC_FLASHOUT_INFO;

typedef struct tagNET_ITC_SERIAL_CHECKINFO
{
    BYTE bySerialIndex[MAX_ITC_SERIALCHECK_NUM]; //485´®¿ÚÐ£Ñé½á¹û£¬0-ÎÞÐ§,1-ÓÐÐ§, bySerialIndex[0]±íÊ¾ÕýÈ·µÄÍ·, bySerialIndex[1]±íÊ¾ÕýÈ·µÄÎ²
    BYTE byRes[40]; 
}NET_ITC_SERIAL_CHECKINFO, *LPNET_ITC_SERIAL_CHECKINFO;

typedef struct tagNET_ITC_TRIGGERTYPE_INFO
{
    BYTE byTrigTypeIndex; //´¥·¢ÀàÐÍÖµ
    BYTE byRes[47]; 
}NET_ITC_TRIGGERTYPE_INFO, *LPNET_ITC_TRIGGERTYPE_INFO;

//ÊÓÆµµç¾¯
typedef struct tagNET_ITC_TRAFFIC_LIGHT_COLOR
{
    BYTE  byLeftLight;//×ó×ªµÆ£¬0 ±íÊ¾ÎÞÐ§£¬1ÎªºìµÆ 2ÎªÂÌµÆ 3 »ÆµÆ 4µÆ¶¼²»ÁÁ
    BYTE  byRightLight; //ÓÒ×ªµÆ£¬0 ±íÊ¾ÎÞÐ§£¬1ÎªºìµÆ 2ÎªÂÌµÆ 3 »ÆµÆ 4µÆ¶¼²»ÁÁ
    BYTE  byStraightLight; //Ö±ÐÐµÆ£¬0 ±íÊ¾ÎÞÐ§£¬1ÎªºìµÆ 2ÎªÂÌµÆ 3 »ÆµÆ 4µÆ¶¼²»ÁÁ
    BYTE  byRes[45];
}NET_ITC_TRAFFIC_LIGHT_COLOR, *LPNET_ITC_TRAFFIC_LIGHT_COLOR;

//·ÇÊÓÆµµç¾¯
typedef struct tagNET_ITC_TRAFFIC_LIGHT_TURN
{
    BYTE byLightType[MAX_ITC_LANE_NUM];// 0 ±íÊ¾ÎÞÐ§£¬1ÎªºìµÆ 2ÎªÂÌµÆ 3 »ÆµÆ 4µÆ¶¼²»ÁÁ
    BYTE byRes[42];
} NET_ITC_TRAFFIC_LIGHT_TURN, *LPNET_ITC_TRAFFIC_LIGHT_TURN;

typedef union tagNET_ITC_STATUS_UNION
{
    BYTE   uLen[48];            //²ÎÊý
    NET_ITC_TRIGGERIO_INFO struTrigIO; //´¥·¢IO¿ÚºÅ
    NET_ITC_FLASHOUT_INFO struFlashOut; //Í¬²½Êä³ö
    NET_ITC_SERIAL_CHECKINFO struSerial;  //´®¿Ú
    NET_ITC_TRIGGERTYPE_INFO struTrigType; //´¥·¢ÀàÐÍ£¨±£Áô£©
    NET_ITC_TRAFFIC_LIGHT_COLOR struTrafficLightColor; //½»Í¨µÆ£¨Çø·ÖÑÕÉ«£©¶ÔÓ¦ÀàÐÍITC_STATUS_DETECT_TRAFFICLIGHT_COLOR
    NET_ITC_TRAFFIC_LIGHT_TURN struTrafficLightTurn;//½»Í¨µÆ£¨Çø·Ö×ªÏò£©¶ÔÓ¦ÀàÐÍITC_STATUS_DETECT_TRAFFICLIGHT_TURN
}NET_ITC_STATUS_UNION, *LPNET_ITC_STATUS_UNION;

typedef struct tagNET_ITC_STATUS_DETECT_RESULT
{
    ITC_STATUS_DETECT_TYPE dwStatusType;//×´Ì¬¼ì²âÀàÐÍ£¬Ïê¼ûITC_STATUS_DETECT_TYPE
    NET_ITC_STATUS_UNION uStatusParam; //×´Ì¬¼ì²â½á¹û
    DWORD dwHoldTime; //µÆÁÁ³ÖÐøÊ±¼ä£¨±£Áô£©£¬µ¥Î»£ºms
    BYTE byRes[32];
}NET_ITC_STATUS_DETECT_RESULT, *LPNET_ITC_STATUS_DETECT_RESULT;

typedef struct tagNET_DVR_SETUPALARM_PARAM
{
    DWORD dwSize;
    BYTE  byLevel; //²¼·ÀÓÅÏÈ¼¶£¬0-Ò»µÈ¼¶£¨¸ß£©£¬1-¶þµÈ¼¶£¨ÖÐ£©£¬2-ÈýµÈ¼¶£¨µÍ£©
    BYTE  byAlarmInfoType; //ÉÏ´«±¨¾¯ÐÅÏ¢ÀàÐÍ£¨×¥ÅÄ»úÖ§³Ö£©£¬0-ÀÏ±¨¾¯ÐÅÏ¢£¨NET_DVR_PLATE_RESULT£©£¬1-ÐÂ±¨¾¯ÐÅÏ¢(NET_ITS_PLATE_RESULT)2012-9-28
    BYTE  byRetAlarmTypeV40; //0--·µ»ØNET_DVR_ALARMINFO_V30»òNET_DVR_ALARMINFO, 1--Éè±¸Ö§³ÖNET_DVR_ALARMINFO_V40Ôò·µ»ØNET_DVR_ALARMINFO_V40£¬²»Ö§³ÖÔò·µ»ØNET_DVR_ALARMINFO_V30»òNET_DVR_ALARMINFO
    BYTE  byRetDevInfoVersion; //CVRÉÏ´«±¨¾¯ÐÅÏ¢»Øµ÷½á¹¹Ìå°æ±¾ºÅ 0-COMM_ALARM_DEVICE£¬ 1-COMM_ALARM_DEVICE_V40
    BYTE  byRetVQDAlarmType; //VQD±¨¾¯ÉÏ´«ÀàÐÍ£¬0-ÉÏ´«±¨±¨¾¯NET_DVR_VQD_DIAGNOSE_INFO£¬1-ÉÏ´«±¨¾¯NET_DVR_VQD_ALARM
    //1-±íÊ¾ÈËÁ³Õì²â±¨¾¯À©Õ¹(INTER_FACE_DETECTION),0-±íÊ¾Ô­ÏÈÖ§³Ö½á¹¹(INTER_FACESNAP_RESULT)
    BYTE  byFaceAlarmDetection;
    BYTE  bySupport; //Bit0- ±íÊ¾¶þ¼¶²¼·ÀÊÇ·ñÉÏ´«Í¼Æ¬: 0-ÉÏ´«£¬1-²»ÉÏ´«
    //¶ÏÍøÐø´«ÀàÐÍ 
    //bit0-³µÅÆ¼ì²â£¨IPC£© £¨0-²»Ðø´«£¬1-Ðø´«£©
    //bit1-¿ÍÁ÷Í³¼Æ£¨IPC£©  £¨0-²»Ðø´«£¬1-Ðø´«£©
    //bit2-ÈÈ¶ÈÍ¼Í³¼Æ£¨IPC£© £¨0-²»Ðø´«£¬1-Ðø´«£©
    BYTE  byBrokenNetHttp;
    WORD  wTaskNo;    //ÈÎÎñ´¦ÀíºÅ ºÍ (ÉÏ´«Êý¾ÝNET_DVR_VEHICLE_RECOG_RESULTÖÐµÄ×Ö¶ÎdwTaskNo¶ÔÓ¦ Í¬Ê± ÏÂ·¢ÈÎÎñ½á¹¹ NET_DVR_VEHICLE_RECOG_CONDÖÐµÄ×Ö¶ÎdwTaskNo¶ÔÓ¦)
    BYTE  byRes1[5];
    BYTE  byCustomCtrl;//Bit0- ±íÊ¾Ö§³Ö¸±¼ÝÊ»ÈËÁ³×ÓÍ¼ÉÏ´«: 0-²»ÉÏ´«,1-ÉÏ´«,(×¢£ºÖ»ÔÚ¹«Ë¾ÄÚ²¿8600/8200µÈÆ½Ì¨¿ª·Å)
}NET_DVR_SETUPALARM_PARAM, *LPNET_DVR_SETUPALARM_PARAM;

typedef struct tagNET_ITC_VIDEO_TRIGGER_COND
{
    DWORD dwSize;
    DWORD dwChannel;
    DWORD dwTriggerMode; //ÊÓÆµ´¥·¢Ä£Ê½ÀàÐÍ£¬Ïê¼ûITC_TRIGGERMODE_TYPE
    BYTE byRes[16];
}NET_ITC_VIDEO_TRIGGER_COND, *LPNET_ITC_VIDEO_TRIGGER_COND;

//Ìõ¼þ½á¹¹
typedef struct tagNET_ITC_FTP_TYPE_COND
{
    DWORD dwChannel;//Í¨µÀºÅ
    BYTE    byWorkMode;  // 0-FTP1(Ö÷FTP)£¬1-FTP2(±¸FTP)
    BYTE    byRes[7];
}NET_ITC_FTP_TYPE_COND, *LPNET_ITC_FTP_TYPE_COND;

//ÅäÖÃ½á¹¹
typedef struct tagNET_ITC_FTP_CFG
{
    DWORD            dwSize;
    BYTE                byEnable;            /*ÊÇ·ñÆô¶¯ftpÉÏ´«¹¦ÄÜ£¬0-·ñ£¬1-ÊÇ*/
    BYTE                 byAddressType;   //0-Êµ¼Êipv4 ipv6µØÖ· 1-ÓòÃû
    // ¿ØÖÆunionServerÊÇÊ¹ÓÃÊµ¼ÊµØÖ·»¹ÊÇÓòÃû
    WORD                wFTPPort;            /*¶Ë¿Ú*/
    union
    {
        struct
        {
            BYTE            szDomain[MAX_DOMAIN_NAME];//·þÎñÆ÷µØÖ·£¬ÓòÃû 
            BYTE            byRes1[80];
        }struDomain;
        struct
        {
            NET_DVR_IPADDR     struIp;/*IPµØÖ·*/        //IPv4 IPv6µØÖ·, 144×Ö½Ú
        } struAddrIP;
    }unionServer;  //Ê¹ÓÃÁªºÏÌå½á¹¹£¬Í¨¹ýbyAddressType×Ö¶Î±íÊ¾ÊÇIPµØÖ·»¹ÊÇÓòÃû 64    
    BYTE                szUserName[NAME_LEN];        /*ÓÃ»§Ãû*/
    BYTE                szPassWORD[PASSWD_LEN];        /*ÃÜÂë*/
    BYTE                byRes4;  // 0-FTP1(Ö÷FTP)£¬1-FTP2(±¸FTP)
                                 BYTE                byDirLevel;    /*0 = ²»Ê¹ÓÃÄ¿Â¼½á¹¹£¬Ö±½Ó±£´æÔÚ¸ùÄ¿Â¼,
                                                                1 = Ê¹ÓÃ1¼¶Ä¿Â¼,2=Ê¹ÓÃ2¼¶Ä¿Â¼,
                                 3 = Ê¹ÓÃ3¼¶Ä¿Â¼,4=Ê¹ÓÃ4¼¶Ä¿Â¼*/                    
                                 BYTE                 byIsFilterCarPic;/*³µÅÆÐ¡Í¼ÊÇ·ñÉÏ´«£¬0-ÉÏ´«,1-²»ÉÏ´«*/
                                 BYTE                    byUploadDataType;//0-È«²¿£¬1-¿¨¿Ú£¬2-Î¥ÕÂ (µ¥FTPÊ±Ä¬ÈÏÑ¡ÔñÈ«²¿£¬Ë«FTPÊ±Ö§³Ö¿¨¿Ú£¬Î¥ÕÂµÄÑ¡Ôñ)
                                 NET_DVR_PICTURE_NAME     struPicNameRule;/* Í¼Æ¬ÃüÃû¹æÔò */
                                                                        BYTE                byTopDirMode; /*Ò»¼¶Ä¿Â¼, 0x1 = Ê¹ÓÃÉè±¸Ãû,
                                                                                                          0x2 = Ê¹ÓÃÉè±¸ºÅ,0x3 =Ê¹ÓÃÉè±¸ipµØÖ·£¬
                                                                                                          0x4=Ê¹ÓÃ¼à²âµã,0x5=Ê¹ÓÃÊ±¼ä(ÄêÔÂ),  
                                                                                                          0x6=Ê¹ÓÃÊ±¼ä(ÄêÔÂÈÕ),0x7=Î¥¹æÀàÐÍ,0x8=·½Ïò,0x9=µØµã,
                                                                        0xa=Í¨µÀÃû,0xb=Í¨µÀºÅ,0xc=³µµÀºÅ0xff=×Ô¶¨Òå*/
                                                                        BYTE                bySubDirMode; /*¶þ¼¶Ä¿Â¼, 0x1 =Ê¹ÓÃÉè±¸Ãû,
                                                                                                          0x2 = Ê¹ÓÃÉè±¸ºÅ,0x3 =Ê¹ÓÃÉè±¸ipµØÖ·£¬
                                                                                                          0x4=Ê¹ÓÃ¼à²âµã,0x5=Ê¹ÓÃÊ±¼ä(ÄêÔÂ),  
                                                                                                          0x6=Ê¹ÓÃÊ±¼ä(ÄêÔÂÈÕ),0x7=Î¥¹æÀàÐÍ,0x8=·½Ïò,0x9=µØµã,
                                                                        0xa=Í¨µÀÃû,0xb=Í¨µÀºÅ,0xc=³µµÀºÅ0xff=×Ô¶¨Òå*/
                                                                        BYTE                byThreeDirMode; /*Èý¼¶Ä¿Â¼, 0x1 = Ê¹ÓÃÉè±¸Ãû,
                                                                                                            0x2 = Ê¹ÓÃÉè±¸ºÅ,0x3 =Ê¹ÓÃÉè±¸ipµØÖ·£¬
                                                                                                            0x4=Ê¹ÓÃ¼à²âµã,0x5=Ê¹ÓÃÊ±¼ä(ÄêÔÂ),  
                                                                                                            0x6=Ê¹ÓÃÊ±¼ä(ÄêÔÂÈÕ),0x7=Î¥¹æÀàÐÍ,0x8=·½Ïò,0x9=µØµã,
                                                                        0xa=Í¨µÀÃû,0xb=Í¨µÀºÅ,0xc=³µµÀºÅ0xff=×Ô¶¨Òå*/
                                                                        BYTE                byFourDirMode; /*ËÄ¼¶Ä¿Â¼, 0x1 =Ê¹ÓÃÉè±¸Ãû,
                                                                                                           0x2 = Ê¹ÓÃÉè±¸ºÅ,0x3 =Ê¹ÓÃÉè±¸ipµØÖ·£¬
                                                                                                           0x4=Ê¹ÓÃ¼à²âµã,0x5=Ê¹ÓÃÊ±¼ä(ÄêÔÂ),  
                                                                                                           0x6=Ê¹ÓÃÊ±¼ä(ÄêÔÂÈÕ),0x7=Î¥¹æÀàÐÍ,0x8=·½Ïò,0x9=µØµã,
                                                                        0xa=Í¨µÀÃû,0xb=Í¨µÀºÅ,0xc=³µµÀºÅ0xff=×Ô¶¨Òå*/
                                                                        /*Í¼Æ¬ÃüÃû×Ô¶¨Òå µ±PICNAME_ITEM_CUSTOM Ê± ÉúÐ§*/
                                                                        BYTE                szPicNameCustom[MAX_CUSTOMDIR_LEN];// (3.7Ver ÉúÐ§)
                                                                        BYTE                szTopCustomDir[MAX_CUSTOMDIR_LEN]; /*×Ô¶¨ÒåÒ»¼¶Ä¿Â¼*/  
                                                                        BYTE                szSubCustomDir[MAX_CUSTOMDIR_LEN];/*×Ô¶¨Òå¶þ¼¶Ä¿Â¼*/
                                                                        BYTE                szThreeCustomDir[MAX_CUSTOMDIR_LEN];    /*×Ô¶¨ÒåÈý¼¶Ä¿Â¼*/
                                                                        BYTE                szFourCustomDir[MAX_CUSTOMDIR_LEN];    /*×Ô¶¨ÒåËÄ¼¶Ä¿Â¼*/
                                                                        BYTE                 byRes3[900]; //Âú×ã12¼¶À©Õ¹Ô¤Áô Ö§³ÖÍ¸´«
}NET_ITC_FTP_CFG, *LPNET_ITC_FTP_CFG;

typedef struct tagNET_DVR_LATITUDE_PARAM
{
    BYTE byDegree;//¶È[0,179]
    BYTE byMinute;//·Ö[0,59]
    BYTE bySec;//Ãë[0,59]
    BYTE byRes;
}NET_DVR_LATITUDE_PARAM, *LPNET_DVR_LATITUDE_PARAM;

typedef struct tagNET_DVR_LONGITUDE_PARAM
{
    BYTE byDegree;//¶È[0,179]
    BYTE byMinute;//·Ö[0,59]
    BYTE bySec;//Ãë[0,59]
    BYTE byRes;
}NET_DVR_LONGITUDE_PARAM, *LPNET_DVR_LONGITUDE_PARAM;

typedef struct tagNET_DVR_GPS_DATACFG
{
    DWORD     dwSize;
    BYTE byGpsDataMode;//GPSÊý¾Ý»ñÈ¡ 0-×Ô¶¯£¬1-ÊÖ¶¯
    BYTE byLongitudeType;//¾­¶È 0-¶«¾­£¬1-Î÷¾­
    BYTE byLatitudeType;//Î³¶È 0-ÄÏÎ³£¬1-±±Î³
    BYTE byRes;
    NET_DVR_LATITUDE_PARAM    struLatitude;     /*Î³¶È*/
    NET_DVR_LONGITUDE_PARAM    struLongitude; /*¾­¶È*/
    BYTE byRes1[128];
}NET_DVR_GPS_DATACFG,*LPNET_DVR_GPS_DATACFG;

typedef enum _VCA_DATABASE_TYPE_
{
    DATABASE_NULL = 0, //Î´Öª
        DATABASE_SNAP,    //×¥ÅÄÊý¾Ý¿â
        DATABASE_FACE    //ÈËÁ³Êý¾Ý¿â
}VCA_DATABASE_TYPE;

typedef struct tagNET_VCA_DATABASE_PARAM
{
    DWORD dwSize;
    DWORD dwDataBaseID; //Êý¾Ý¿âID£¨Éè±¸Éú³É£¬Ìí¼ÓÊ±ÎÞÐ§£¬ÐÞ¸ÄºÍÉ¾³ýÊ±ÓÐÐ§£©
    DWORD dwDataBaseType; //Êý¾Ý¿âÀàÐÍ£¬¼ûVCA_DATABASE_TYPE
    BYTE byDataBaseName[NAME_LEN]; //Êý¾Ý¿âÃû³Æ
    BYTE byAttribute[64]; //Êý¾Ý¿âÊôÐÔ
    BYTE byRes[20];
}NET_VCA_DATABASE_PARAM, *LPNET_VCA_DATABASE_PARAM;

typedef struct tagNET_VCA_FIND_DATABASE_COND
{
    DWORD dwDataBaseType; //Êý¾Ý¿âÀàÐÍ£¬Ïê¼ûVCA_DATABASE_TYPE
    BYTE byRes[12]; //±£Áô
}NET_VCA_FIND_DATABASE_COND, *LPNET_VCA_FIND_DATABASE_COND;

typedef struct tagNET_VCA_DELETE_DATABASE_COND
{
    DWORD dwSize;
    DWORD dwDataBaseType; //Êý¾Ý¿âÀàÐÍ£¬¼ûVCA_DATABASE_TYPE
    DWORD dwDataBaseID; //Êý¾Ý¿âID
    BYTE byRes[64]; //±£Áô
}NET_VCA_DELETE_DATABASE_COND, *LPNET_VCA_DELETE_DATABASE_COND;

typedef struct tagNET_VCA_INQUIRE_SNAPDB_COND
{
    DWORD dwChannel;//Í¨µÀºÅ
    NET_DVR_TIME struStartTime;//¿ªÊ¼Ê±¼ä
    NET_DVR_TIME struStopTime;//½áÊøÊ±¼ä
    BYTE bySex; //ÐÔ±ð£º0-²»ÆôÓÃ£¬1-ÄÐ£¬2-Å®
    BYTE byRes1[3]; //±£Áô
    BYTE byStartBirthDate[MAX_HUMAN_BIRTHDATE_LEN]; //ÆðÊ¼³öÉúÄêÔÂ£¬Èç£º201106
    BYTE byEndBirthDate[MAX_HUMAN_BIRTHDATE_LEN]; //½ØÖ¹³öÉúÄêÔÂ£¬Èç201106
    BYTE byAttribute1[NAME_LEN]; //ÊôÐÔ1
    BYTE byAttribute2[NAME_LEN]; //ÊôÐÔ2
    BYTE byRes[12]; //±£Áô
}NET_VCA_INQUIRE_SNAPDB_COND, *LPNET_VCA_INQUIRE_SNAPDB_COND;

typedef struct tagNET_VCA_INQUIRE_SNAPRECORD_RESULT
{ 
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    DWORD dwDataBaseID;  //Êý¾Ý¿âID
    DWORD dwRecordID; //¼ÇÂ¼ID
    NET_DVR_TIME struSnapTime;  //×¥ÅÄÊ±¼ä
    BYTE bySex; //ÐÔ±ð£º0-²»ÆôÓÃ£¬1-ÄÐ£¬2-Å®
    BYTE byRes1[3]; //±£Áô
    BYTE byStartBirthDate[MAX_HUMAN_BIRTHDATE_LEN]; //ÆðÊ¼³öÉúÄêÔÂ£¬Èç£º201106
    BYTE byEndBirthDate[MAX_HUMAN_BIRTHDATE_LEN]; //½ØÖ¹³öÉúÄêÔÂ£¬Èç201106
    BYTE byAttribute1[NAME_LEN]; //ÊôÐÔ1
    BYTE byAttribute2[NAME_LEN]; //ÊôÐÔ2
    DWORD dwFacePicID; //ÈËÁ³Í¼ID
    DWORD dwFacePicLen;  //ÈËÁ³Í¼Êý¾Ý³¤¶È
    BYTE byRes[80];  //±£Áô
    BYTE *pFacePic;    //ÈËÁ³Í¼Êý¾Ý
}NET_VCA_INQUIRE_SNAPRECORD_RESULT, *LPNET_VCA_INQUIRE_SNAPRECORD_RESULT;

typedef union tagNET_VCA_DELETE_SNAPRECORD_COND_UNION
{ 
    NET_VCA_INQUIRE_SNAPDB_COND struAttribute;  //ÈËÔ±ÐÅÏ¢£¨ÅúÁ¿É¾³ý£©
    DWORD dwRecordID; //¼ÇÂ¼ID£¨µ¥ÌõÉ¾³ý£©
}NET_VCA_DELETE_SNAPRECORD_COND_UNION, *LPNET_VCA_DELETE_SNAPRECORD_COND_UNION;

typedef enum _VCA_DELETE_RECORD_TYPE_
{
    DELETE_RECORD_SINGLE = 0, //µ¥ÌõÉ¾³ý
        DELETE_RECORD_BATCH    //ÅúÁ¿É¾³ý
}VCA_DELETE_RECORD_TYPE;

typedef struct tagNET_VCA_DELETE_SNAPRECORD_COND
{ 
    VCA_DELETE_RECORD_TYPE dwDeleteType; //É¾³ý¼ÇÂ¼ÀàÐÍ
    NET_VCA_DELETE_SNAPRECORD_COND_UNION uDeleteCond;  //É¾³ý²ÎÊý
    BYTE  byRes[40]; //±£Áô
}NET_VCA_DELETE_SNAPRECORD_COND, *LPNET_VCA_DELETE_SNAPRECORD_COND;

typedef enum _VCA_SEARCH_DATABASE_TYPE_
{
    VCA_NORMAL_SEARCH_DATABASE  = 0x00000000,   //ÆÕÍ¨¼ìË÷
        VCA_ADVANCE_SEARCH_DATABASE  = 0x00000001  //¸ß¼¶¼ìË÷
}VCA_SEARCH_DATABASE_TYPE;

typedef struct tagNET_VCA_ADVANCE_SEARCH_DATABASE_COND
{
    DWORD dwDataBaseType; //Êý¾Ý¿âÀàÐÍ£¬Ïê¼ûVCA_DATABASE_TYPE
    DWORD dwDataBaseID; //Êý¾Ý¿âID
    DWORD dwFacePicID; //ÈËÁ³Í¼Æ¬ID
    BYTE byRes[36];
}NET_VCA_ADVANCE_SEARCH_DATABASE_COND, *LPNET_VCA_ADVANCE_SEARCH_DATABASE_COND;

typedef union tagNET_VCA_SEARCH_DATABASE_COND_UNION
{
    DWORD uLen[25];
    NET_VCA_REGISTER_PIC struNormalFind; //ÆÕÍ¨¼ìË÷
    NET_VCA_ADVANCE_SEARCH_DATABASE_COND struAdvanceFind; //¸ß¼¶¼ìË÷
}NET_VCA_SEARCH_DATABASE_COND_UNION, *LPNET_VCA_SEARCH_DATABASE_COND_UNION;

typedef struct tagNET_VCA_SEARCH_DATABASE_PARAM
{
    DWORD dwSearchType; //¼ìË÷ÀàÐÍ£¬Ïê¼ûVCA_SEARCH_DATABASE_TYPE
    NET_VCA_SEARCH_DATABASE_COND_UNION uSearchCond; //¼ìË÷²ÎÊý
    BYTE byRes[16];
}NET_VCA_SEARCH_DATABASE_PARAM, *LPNET_VCA_SEARCH_DATABASE_PARAM;

typedef struct tagNET_VCA_SEARCH_SNAPDB_COND
{ 
    DWORD dwChannel; //Í¨µÀ
    DWORD dwDataBaseID; //Êý¾Ý¿âID
    NET_DVR_TIME struStartTime;//¿ªÊ¼Ê±¼ä
    NET_DVR_TIME struStopTime;//½áÊøÊ±¼ä
    BYTE bySex; //ÐÔ±ð£º0-²»ÆôÓÃ£¬1-ÄÐ£¬2-Å®
    BYTE byRes1[3]; //±£Áô
    BYTE byStartBirthDate[MAX_HUMAN_BIRTHDATE_LEN]; //ÆðÊ¼³öÉúÄêÔÂ£¬Èç£º201106
    BYTE byEndBirthDate[MAX_HUMAN_BIRTHDATE_LEN]; //½ØÖ¹³öÉúÄêÔÂ£¬Èç201106
    BYTE byAttribute1[NAME_LEN]; //ÊôÐÔ1
    BYTE byAttribute2[NAME_LEN]; //ÊôÐÔ2
    NET_VCA_SEARCH_DATABASE_PARAM struSearchParam;  //¼ìË÷²ÎÊý
    DWORD dwMaxSearchNum; //×î´ó¼ìË÷ÌõÊý
    WORD wThreshold;  //ãÐÖµ£¬0-100
    BYTE  byRes[78]; //±£Áô
}NET_VCA_SEARCH_SNAPDB_COND, *LPNET_VCA_SEARCH_SNAPDB_COND;

typedef struct tagNET_VCA_SEARCH_SNAPRECORD_RESULT
{ 
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    DWORD dwDataBaseID;  //Êý¾Ý¿âID
    DWORD dwRecordID; //¼ÇÂ¼ID
    NET_DVR_TIME struSnapTime;//×¥ÅÄÊ±¼ä
    BYTE bySex; //ÐÔ±ð£º0-²»ÆôÓÃ£¬1-ÄÐ£¬2-Å®
    BYTE byRes1[3]; //±£Áô
    BYTE byStartBirthDate[MAX_HUMAN_BIRTHDATE_LEN]; //ÆðÊ¼³öÉúÄêÔÂ£¬Èç£º201106
    BYTE byEndBirthDate[MAX_HUMAN_BIRTHDATE_LEN]; //½ØÖ¹³öÉúÄêÔÂ£¬Èç201106
    BYTE byAttribute1[NAME_LEN]; //ÊôÐÔ1
    BYTE byAttribute2[NAME_LEN]; //ÊôÐÔ2
    float fSimilarity; //ÏàËÆ¶È£¬[0.001,1]
    DWORD dwFacePicID; //ÈËÁ³Í¼ID
    DWORD dwFacePicLen;  //ÈËÁ³Í¼Êý¾Ý³¤¶È
    BYTE byRes[80];  //±£Áô
    BYTE *pFacePic;    //ÈËÁ³Í¼Êý¾Ý
}NET_VCA_SEARCH_SNAPRECORD_RESULT, *LPNET_VCA_SEARCH_SNAPRECORD_RESULT;

typedef struct tagNET_VCA_DATARECORD_INFO
{ 
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    DWORD dwRecordID; //¼ÇÂ¼ID£¬Ìí¼ÓÊ±ÎÞÐ§£¬ÐÞ¸ÄÊ±ÓÐÐ§
    NET_VCA_HUMAN_ATTRIBUTE struAttribute;  //ÈËÔ±ÐÅÏ¢
    NET_VCA_REGISTER_PIC struRegisterPic;  //ÈËÔ±Í¼Æ¬ÐÅÏ¢
    BYTE  byRemark1[NAME_LEN]; //±¸×¢ÐÅÏ¢1
    BYTE  byRemark2[64]; //±¸×¢ÐÅÏ¢2
    BYTE  byRes[32]; //±£Áô
}NET_VCA_DATARECORD_INFO, *LPNET_VCA_DATARECORD_INFO;

typedef struct tagNET_VCA_FAST_DATARECORD_INFO
{ 
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    NET_VCA_HUMAN_ATTRIBUTE struAttribute;  //ÈËÔ±ÐÅÏ¢
    BYTE  byRemark1[NAME_LEN]; //±¸×¢ÐÅÏ¢1
    BYTE  byRemark2[64]; //±¸×¢ÐÅÏ¢2
    DWORD dwImageLen;  //Í¼ÏñÊý¾Ý³¤¶È
    BYTE  byRes[80];  //±£Áô
    BYTE *pImage;    //Í¼ÏñÊý¾Ý
}NET_VCA_FAST_DATARECORD_INFO, *LPNET_VCA_FAST_DATARECORD_INFO;

typedef struct tagNET_VCA_INQUIRE_DATARECORD_RESULT
{ 
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    DWORD dwDataBaseID;  //Êý¾Ý¿âID
    DWORD dwRecordID; //¼ÇÂ¼ID
    NET_VCA_HUMAN_ATTRIBUTE struAttribute;  //ÈËÔ±ÐÅÏ¢
    BYTE  byRemark1[NAME_LEN]; //±¸×¢ÐÅÏ¢1
    BYTE  byRemark2[64]; //±¸×¢ÐÅÏ¢2
    DWORD dwFacePicID; //ÈËÁ³Í¼ID
    DWORD dwFacePicLen;  //ÈËÁ³Í¼Êý¾Ý³¤¶È
    BYTE byRes[80];  //±£Áô
    BYTE *pFacePic;    //ÈËÁ³Í¼Êý¾Ý
}NET_VCA_INQUIRE_DATARECORD_RESULT, *LPNET_VCA_INQUIRE_DATARECORD_RESULT;

typedef struct tagNET_VCA_SEARCH_DATARECORD_RESULT
{ 
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    DWORD dwDataBaseID;  //Êý¾Ý¿âID
    DWORD dwRecordID; //¼ÇÂ¼ID
    NET_VCA_HUMAN_ATTRIBUTE struAttribute;  //ÈËÔ±ÐÅÏ¢
    BYTE  byRemark1[NAME_LEN]; //±¸×¢ÐÅÏ¢1
    BYTE  byRemark2[64]; //±¸×¢ÐÅÏ¢2
    float fSimilarity; //ÏàËÆ¶È£¬[0.001,1]
    DWORD dwFacePicID; //ÈËÁ³Í¼ID
    DWORD dwFacePicLen;  //ÈËÁ³Í¼Êý¾Ý³¤¶È
    BYTE byRes[80];  //±£Áô
    BYTE *pFacePic;    //ÈËÁ³Í¼Êý¾Ý
}NET_VCA_SEARCH_DATARECORD_RESULT, *LPNET_VCA_SEARCH_DATARECORD_RESULT;

typedef struct tagNET_VCA_DATARECORD_COND
{ 
    DWORD dwDataBaseID; //Êý¾Ý¿âID
    NET_VCA_HUMANATTRIBUTE_COND struAttribute;  //ÈËÔ±ÐÅÏ¢
    BYTE byRes[80];  //±£Áô
}NET_VCA_DATARECORD_COND, *LPNET_VCA_DATARECORD_COND;

typedef union tagNET_VCA_DELETE_RECORD_COND_UNION
{ 
    NET_VCA_HUMANATTRIBUTE_COND struAttribute;  //ÈËÔ±ÐÅÏ¢£¨ÅúÁ¿É¾³ý£©
    DWORD dwRecordID; //¼ÇÂ¼ID£¨µ¥ÌõÉ¾³ý£©
}NET_VCA_DELETE_RECORD_COND_UNION, *LPNET_VCA_DELETE_RECORD_COND_UNION;

typedef struct tagNET_VCA_DELETE_RECORD_COND
{ 
    VCA_DELETE_RECORD_TYPE dwDeleteType; //É¾³ý¼ÇÂ¼ÀàÐÍ
    NET_VCA_DELETE_RECORD_COND_UNION uDeleteCond;  //É¾³ý²ÎÊý
    BYTE  byRes[40]; //±£Áô
}NET_VCA_DELETE_RECORD_COND, *LPNET_VCA_DELETE_RECORD_COND;

typedef struct tagNET_VCA_SEARCH_FACEDB_COND
{ 
    DWORD dwDataBaseID; //Êý¾Ý¿âID
    NET_VCA_HUMANATTRIBUTE_COND struAttribute;  //ÈËÔ±ÐÅÏ¢
    NET_VCA_SEARCH_DATABASE_PARAM struSearchParam;  //¼ìË÷²ÎÊý
    DWORD dwMaxSearchNum; //×î´ó¼ìË÷ÌõÊý
    WORD wThreshold;  //ãÐÖµ£¬0-100
    BYTE  byRes[78]; //±£Áô
}NET_VCA_SEARCH_FACEDB_COND, *LPNET_VCA_SEARCH_FACEDB_COND;

typedef struct tagNET_VCA_FIND_MATCHPIC_COND
{
    DWORD dwSize;
    DWORD dwDataBaseType; //Êý¾Ý¿âÀàÐÍ£¬¼ûVCA_DATABASE_TYPE
    DWORD dwDataBaseID; //Êý¾Ý¿âID
    DWORD dwRecordID; //¼ÇÂ¼ID
    BYTE byRes[64]; //±£Áô
}NET_VCA_FIND_MATCHPIC_COND, *LPNET_VCA_FIND_MATCHPIC_COND;

typedef struct tagNET_VCA_FIND_MATCHPIC_RESULT
{
    DWORD dwSize;
    DWORD dwDataBaseType; //Êý¾Ý¿âÀàÐÍ£¬¼ûVCA_DATABASE_TYPE
    DWORD dwDataBaseID; //Êý¾Ý¿âID
    DWORD dwRecordID; //¼ÇÂ¼ID
    DWORD dwPicLen; //Í¼Æ¬³¤¶È
    BYTE byRes[64]; //±£Áô
    BYTE *pPicBuffer; //Í¼Æ¬Êý¾ÝÖ¸Õë
}NET_VCA_FIND_MATCHPIC_RESULT, *LPNET_VCA_FIND_MATCHPIC_RESULT;

typedef struct tagNET_DVR_REMOTECONTROL_ALARM_PARAM
{
    DWORD dwSize;
    DWORD dwChannel; //Í¨µÀºÅ
    WORD wDealyTime; //ÑÓ³ÙÊ±¼ä£¬µ¥Î»s
    BYTE  byRes[30]; 
}NET_DVR_REMOTECONTROL_ALARM_PARAM, *LPNET_DVR_REMOTECONTROL_ALARM_PARAM;

typedef struct tagNET_DVR_REMOTECONTROL_STUDY_PARAM
{
    DWORD dwSize;
    DWORD dwChannel; //Í¨µÀºÅ
    BYTE  byRes[16]; 
}NET_DVR_REMOTECONTROL_STUDY_PARAM, *LPNET_DVR_REMOTECONTROL_STUDY_PARAM;

typedef struct tagNET_DVR_WIRELESS_ALARM_STUDY_PARAM
{
    DWORD dwSize;
    DWORD dwChannel; //Í¨µÀºÅ
    BYTE  byIndex;  //ÎÞÏß±¨¾¯ÐòºÅ£¬1-8
    BYTE  byRes[15]; 
}NET_DVR_WIRELESS_ALARM_STUDY_PARAM, *LPNET_DVR_WIRELESS_ALARM_STUDY_PARAM;

#define MAX_AUX_ALARM_NUM 8 //×î´ó¸¨Öú±¨¾¯¸öÊý
#define MAX_WIRELESS_ALARM_NUM 8 //×î´óÎÞÏß±¨¾¯¸öÊý
typedef enum _IPC_AUX_ALARM_TYPE_
{
    IPC_AUXALARM_UNKNOW = 0, //Î´Öª
        IPC_AUXALARM_PIR = 1, //PIR±¨¾¯
        IPC_AUXALARM_WIRELESS = 2,   //ÎÞÏß±¨¾¯
        IPC_AUXALARM_CALLHELP = 3  //ºô¾È±¨¾¯
}IPC_AUX_ALARM_TYPE;

typedef struct tagNET_DVR_AUDIO_LIMIT_ALARM_CFG
{    
    DWORD    dwSize;
    BYTE    byEnable;//Ê¹ÄÜ
    BYTE    byRes1[3];
    DWORD    dwDecibelLimit; //·Ö±´¸æ¾¯·§Öµ
    NET_DVR_HANDLEEXCEPTION_V30    struHandleException;  //Òì³£´¦Àí·½Ê½
    BYTE    byRes2[24];
}NET_IPC_AUDIO_LIMIT_ALARM_CFG,*LPNET_IPC_AUDIO_LIMIT_ALARM_CFG;

typedef struct tagNET_DVR_BUTTON_DOWN_ALARM_CFG
{    
    DWORD    dwSize;
    BYTE    byEnable;//Ê¹ÄÜ
    BYTE    byRes1[3]; 
    NET_DVR_HANDLEEXCEPTION_V30    struHandleException;  //Òì³£´¦Àí·½Ê½
    BYTE    byRes2[24];
}NET_IPC_BUTTON_DOWN_ALARM_CFG,*LPNET_IPC_BUTTON_DOWN_ALARM_CFG;

typedef struct tagNET_IPC_PIR_ALARMCFG
{
    BYTE byAlarmName[NAME_LEN];    /* ±¨¾¯Ãû³Æ */
    BYTE byAlarmHandle;            /* ÊÇ·ñ´¦Àí 0-²»´¦Àí 1-´¦Àí*/
    BYTE byRes1[3];            
    NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;    /* ´¦Àí·½Ê½ */    
    BYTE byRelRecordChan[MAX_CHANNUM_V30]; //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
    BYTE byRes[64];
}NET_IPC_PIR_ALARMCFG, *LPNET_IPC_PIR_ALARMCFG;

typedef struct tagNET_IPC_PIR_ALARMCFG_EX
{
    BYTE byAlarmName[NAME_LEN];    /* ±¨¾¯Ãû³Æ */
    BYTE byAlarmHandle;            /* ÊÇ·ñ´¦Àí 0-²»´¦Àí 1-´¦Àí*/
    BYTE byRes1[3];            
    NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;    /* ´¦Àí·½Ê½ */    
    BYTE byRelRecordChan[MAX_CHANNUM_V30]; //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
    NET_DVR_SCHEDTIME   struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];
    BYTE byRes[1464];
}NET_IPC_PIR_ALARMCFG_EX, *LPNET_IPC_PIR_ALARMCFG_EX;

//ºô¾È±¨¾¯
typedef struct tagNET_IPC_CALLHELP_ALARMCFG
{
    BYTE byAlarmHandle;            /* ÊÇ·ñ´¦Àí 0-²»´¦Àí 1-´¦Àí*/
    BYTE byRes1[3];            
    NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;    /* ´¦Àí·½Ê½ */    
    BYTE byRelRecordChan[MAX_CHANNUM_V30]; //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ
    BYTE byRes[64];
}NET_IPC_CALLHELP_ALARMCFG, *LPNET_IPC_CALLHELP_ALARMCFG;

typedef struct tagNET_IPC_SINGLE_WIRELESS_ALARMCFG
{
    BYTE byAlarmName[NAME_LEN];    /* ±¨¾¯Ãû³Æ */
    BYTE byAlarmHandle;            /* ÊÇ·ñ´¦Àí 0-²»´¦Àí 1-´¦Àí*/
    BYTE byID; //ÎÞÏß±¨¾¯ID£¬1-8
    BYTE byRes1[2];            
    NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;    /* ´¦Àí·½Ê½ */
    BYTE byRelRecordChan[MAX_CHANNUM_V30]; //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ,Îª1±íÊ¾´¥·¢¸ÃÍ¨µÀ    
    BYTE byRes[32];
}NET_IPC_SINGLE_WIRELESS_ALARMCFG, *LPNET_IPC_SINGLE_WIRELESS_ALARMCFG;

typedef struct tagNET_IPC_WIRELESS_ALARMCFG
{
    NET_IPC_SINGLE_WIRELESS_ALARMCFG struWirelessAlarm[MAX_WIRELESS_ALARM_NUM]; //µ¥¸öÎÞÏß±¨¾¯²ÎÊý
    BYTE byRes[32];
}NET_IPC_WIRELESS_ALARMCFG, *LPNET_IPC_WIRELESS_ALARMCFG;

typedef union tagNET_IPC_AUX_ALARMCFG_UNION
{
    DWORD uLen[472];
    NET_IPC_PIR_ALARMCFG_EX struPIRAlarm; //PIR±¨¾¯²ÎÊý
    NET_IPC_WIRELESS_ALARMCFG struWirelessAlarm; //ÎÞÏß±¨¾¯²ÎÊý
    NET_IPC_CALLHELP_ALARMCFG struCallHelpAlarm; //ºô¾È±¨¾¯²ÎÊý
}NET_IPC_AUX_ALARMCFG_UNION, *LPNET_IPC_AUX_ALARMCFG_UNION;

typedef struct tagNET_IPC_SINGLE_AUX_ALARMCFG
{
    BYTE byAlarmType;       //±¨¾¯Æ÷ÀàÐÍ£¬Ïê¼ûIPC_AUX_ALARM_TYPE
    BYTE byRes1[3];            
    NET_IPC_AUX_ALARMCFG_UNION uAlarm; //±¨¾¯²ÎÊý
    BYTE byRes[16];
}NET_IPC_SINGLE_AUX_ALARMCFG, *LPNET_IPC_SINGLE_AUX_ALARMCFG;

typedef struct tagNET_IPC_AUX_ALARMCFG
{
    DWORD dwSize;
    NET_IPC_SINGLE_AUX_ALARMCFG struAlarm[MAX_AUX_ALARM_NUM]; //±¨¾¯²ÎÊý
    BYTE byRes[64];
}NET_IPC_AUX_ALARMCFG, *LPNET_IPC_AUX_ALARMCFG;

typedef union tagNET_IPC_AUXALARM_UPLOAD_UNION
{
    DWORD uLen[66];
    NET_IPC_PIR_ALARMCFG struPIRAlarm; //PIR±¨¾¯²ÎÊý
    NET_IPC_SINGLE_WIRELESS_ALARMCFG struWirelessAlarm; //ÎÞÏß±¨¾¯²ÎÊý
    NET_IPC_CALLHELP_ALARMCFG struCallHelpAlarm; //ºô¾È±¨¾¯²ÎÊý
}NET_IPC_AUXALARM_UPLOAD_UNION, *LPNET_IPC_AUXALARM_UPLOAD_UNION;

typedef struct tagNET_IPC_AUXALARM_RESULT
{
    DWORD dwSize;
    DWORD dwChannel; //Í¨µÀºÅ
    BYTE byAlarmType;       //±¨¾¯Æ÷ÀàÐÍ£¬Ïê¼ûIPC_AUX_ALARM_TYPE
    BYTE byRes1[3];
    NET_IPC_AUXALARM_UPLOAD_UNION struAuxAlarm; //±¨¾¯½á¹û²ÎÊý
    BYTE byDeviceID[NAME_LEN];/*Éè±¸µÄID´®*/
    BYTE byRes[32];
}NET_IPC_AUXALARM_RESULT, *LPNET_IPC_AUXALARM_RESULT;

typedef struct tagNET_DVR_PREVIEW_DISPLAYCFG
{
    DWORD  dwSize;         // ½á¹¹Ìå´óÐ¡ 
    BYTE   byCorrectMode;   //Ð£ÕýÄ£Ê½£¬0-Èí¼þÐ£Õý£¬1-Ð¾Æ¬Ð£Õý
    BYTE   byMountType;     //°²×°ÀàÐÍ£¬0-Îü¶¥£¬1-×ÀÃæ£¬2-Ç½Ãæ
    /*
    0-Ä£Ê½1£ºÓãÑÛ+È«¾°+3PTZ (ÓëÔ­ÓÐ·ÇÊµÊ±Ä£Ê½Ò»ÖÂ)£»
    1-Ä£Ê½2£ºÓãÑÛ+4PTZ(ÓëÔ­ÓÐÊµÊ±Ä£Ê½Ò»ÖÂ)£»
    2-Ä£Ê½3£ºÓãÑÛ(Ö÷)+ÓãÑÛ(×Ó)+3PTZ£»
    3-Ä£Ê½4£ºÈ«¾°Õ¹¿ª(Ö÷ÂëÁ÷+×ÓÂëÁ÷)£»
    4-Ä£Ê½5£º4PTZ£»
    5-Ä£Ê½6£ºÓãÑÛ£»
    */
    BYTE   byRealTimeOutput;  //ÊµÊ±Êä³ö£¬0 -²»ÆôÓÃ£¬1- ÆôÓÃ
    BYTE   byRes[61];
}NET_DVR_PREVIEW_DISPLAYCFG, *LPNET_DVR_PREVIEW_DISPLAYCFG;

typedef struct tagNET_DVR_REMOTECONTROL_PTZ_PARAM
{
    DWORD dwSize;
    DWORD dwChannel; //Í¨µÀºÅ
    DWORD dwPTZCommand; //PTZ¿ØÖÆÃüÁî 
    NET_VCA_POINT struVcaPoint; //Ô¤ÀÀ½çÃæµã×ø±ê
    DWORD dwSpeed; //¿ØÖÆµÄËÙ¶È£¬È¡Öµ·¶Î§[0,7]
    DWORD dwStop; //Í£Ö¹¶¯×÷»ò¿ªÊ¼¶¯×÷£º0-¿ªÊ¼£»1-Í£Ö¹
    BYTE  byRes[32]; 
}NET_DVR_REMOTECONTROL_PTZ_PARAM, *LPNET_DVR_REMOTECONTROL_PTZ_PARAM;

typedef struct tagNET_DVR_PRESET_POINT_PARAM
{
    DWORD dwSize;
    DWORD dwChannel; //Í¨µÀºÅ
    DWORD dwPTZPresetCmd; //Ô¤ÖÃµã¿ØÖÆÃüÁî 
    NET_VCA_POINT struVcaPoint; //Ô¤ÀÀ½çÃæµã×ø±ê
    DWORD dwPresetIndex; //Ô¤ÖÃµãµÄÐòºÅ£¨´Ó1¿ªÊ¼£©£¬×î¶àÖ§³Ö255¸öÔ¤ÖÃµã
    WORD  wZoomCoordinate;///<Ô¤ÖÃµã´°¿ÚZoomÖµ
    BYTE  byRes[30];
}NET_DVR_PRESET_POINT_PARAM, *LPNET_DVR_PRESET_POINT_PARAM;

typedef struct tagNET_DVR_PTZ_CRUISE_PARAM
{
    DWORD dwSize;
    DWORD dwChannel; //Í¨µÀºÅ
    DWORD dwPTZCruiseCmd; //Ñ²º½¿ØÖÆÃüÁî 
    NET_VCA_POINT struVcaPoint; //Ô¤ÀÀ½çÃæµã×ø±ê
    WORD wCruiseRoute; //Ñ²º½Â·¾¶£¬×î¶àÖ§³Ö32ÌõÂ·¾¶£¨ÐòºÅ´Ó1¿ªÊ¼£©
    WORD wCruisePoint; //Ñ²º½µã£¬×î¶àÖ§³Ö32¸öµã£¨ÐòºÅ´Ó1¿ªÊ¼£©
    WORD wInput; //²»Í¬Ñ²º½ÃüÁîÊ±µÄÖµ²»Í¬£¬Ô¤ÖÃµã(×î´ó255)¡¢Ê±¼ä(×î´ó255)¡¢ËÙ¶È(×î´ó40)
    WORD wZoomCoordinate;///<Ô¤ÖÃµã´°¿ÚZoomÖµ
    BYTE  byRes[32];
}NET_DVR_PTZ_CRUISE_PARAM, *LPNET_DVR_PTZ_CRUISE_PARAM;

typedef struct tagNET_DVR_WPS_PARAM
{
    DWORD dwSize;
    BYTE byEnableWps; //ÆôÓÃWPS£¬0-·ñ£¬1-ÊÇ
    BYTE byRes[31]; 
}NET_DVR_WPS_PARAM, *LPNET_DVR_WPS_PARAM;

typedef struct tagNET_DVR_PIN_PARAM
{
    DWORD dwSize;
    BYTE byPIN[8]; //PINÂë
    BYTE byRes[32]; 
}NET_DVR_PIN_PARAM, *LPNET_DVR_PIN_PARAM;

typedef struct tagNET_DVR_WPS_CONNECT_PARAM_
{
    DWORD dwSize;
    BYTE byConnectType; //WPSÁ¬½Ó·½Ê½£¬0-PBC,1-AP PIN
    BYTE byRes1[3];
    BYTE byPIN[8]; //PINÂë(WPSÁ¬½Ó·½Ê½ÎªAP PINÊ±ÓÐÐ§)
    BYTE byEssid[IW_ESSID_MAX_SIZE]; //essid(WPSÁ¬½Ó·½Ê½ÎªAP PINÊ±ÓÐÐ§)
    BYTE byRes[32]; 
}NET_DVR_WPS_CONNECT_PARAM, *LPNET_DVR_WPS_CONNECT_PARAM;

typedef struct tagNET_DVR_DECODER_JOINT_PARAM
{
    DWORD    dwSize;        // ½á¹¹Ìå´óÐ¡
    BYTE    byJointed;        //  0 Ã»ÓÐ¹ØÁª 1 ÒÑ¾­¹ØÁª
    BYTE    byRes1[3];        // ±£Áô×Ö½Ú
    NET_DVR_IPADDR    struIP;    // ±»¹ØÁª½âÂëÆ÷µÄIPµØÖ·
    WORD    wPort;            // ±»¹ØÁª½âÂëÆ÷µÄ¶Ë¿ÚºÅ
    WORD    wChannel;        // ±»¹ØÁª½âÂëÆ÷µÄ½âÂëÍ¨µÀºÅ
    BYTE    sDeviceName[NAME_LEN];    //±»¹ØÁª½âÂëÆ÷µÄÉè±¸Ãû³Æ
    BYTE    sChanName[NAME_LEN];    //±»¹ØÁª½âÂëÆ÷µÄ½âÂëÍ¨µÀÃû³Æ
    BYTE    byRes2[32];        // ±£Áô×Ö½Ú
}NET_DVR_DECODER_JOINT_PARAM, *LPNET_DVR_DECODER_JOINT_PARAM;

typedef struct tagNET_DVR_PIC_VIEW_PARAM
{
    DWORD    dwSize;
    NET_DVR_IPADDR    struCuIp; //CU¶ËIPµØÖ·
    WORD    wPort;/*CU¶Ë¿Ú*/
    BYTE    bySourceIndex;    //ÐÅºÅÔ´Í¨µÀºÅ
    BYTE    byRes[29];
}NET_DVR_PIC_VIEW_PARAM, *LPNET_DVR_PIC_VIEW_PARAM;

#define DVCS_DEVICEID_LEN   16
//2012-03-13Í¼Æ¬»ØÏÔ×¢²áÏûÏ¢»Øµ÷
typedef struct tagNET_DVR_PICVIEW_CALLBACKPARAM
{
    DWORD    dwUserID;
    BYTE    sDeviceID[DVCS_DEVICEID_LEN];
    LONG    nPicViewHandle; //»ØÏÔ¾ä±ú
    WORD    wSignalIndex;    //ÐÅºÅÔ´Ë÷Òý
    WORD    wHeadLen;        //ÎÄ¼þÍ·³¤¶È Ë½ÓÐµÄÂëÁ÷ÎÄ¼þÍ·¶¼ÊÇ40
    BYTE    byHeadBuf[100]; //ÎÄ¼þÍ·
    BYTE    byRes2[32];
}NET_DVR_PICVIEW_CALLBACKPARAM, *LPNET_DVR_PICVIEW_CALLBACKPARAM;

#define DEVICEID_LEN      32

typedef struct tagNET_DVR_DEVICEID_INFO
{
    DWORD        dwSize;
    DWORD        dwDeviceIndex;    //Éè±¸ÐòºÅ
    BYTE        byWallNo;     //Ç½ºÅ£¬´Ó1¿ªÊ¼
    BYTE        byRes1[27];
    DWORD        dwChan;        //Í¨µÀºÅ
    DWORD        dwInputSignalIndex; //ÐÅºÅÔ´Ë÷Òý£¬¼¯ÖÐÊ½´óÆÁ¿ØÖÆÆ÷Ê¹ÓÃ
    BYTE        byRes2[60];
}NET_DVR_DEVICEID_INFO, *LPNET_DVR_DEVICEID_INFO;


typedef struct tagNET_DVR_SINGLE_NETPARAM
{
    DWORD  dwSize;
    BYTE   byUseDhcp;                 //ÊÇ·ñÆôÓÃDHCP 0xff-ÎÞÐ§ 0-²»ÆôÓÃ 1-ÆôÓÃ
    BYTE   byRes1[3];
    NET_DVR_IPADDR  struDevIP;       // Éè±¸IPµØÖ·
    NET_DVR_IPADDR  struSubnetMask;  // Éè±¸×ÓÍøÑÚÂë
    NET_DVR_IPADDR  struGateway;     // Éè±¸Íø¹Ø
    WORD    wDevPort;                 // Éè±¸¶Ë¿ÚºÅ
    BYTE    byMACAddr[MACADDR_LEN];   // MAC µØÖ·(Ö»ÄÜ»ñÈ¡)
    BYTE    byRes2[16];
} NET_DVR_SINGLE_NETPARAM, *LPNET_DVR_SINGLE_NETPARAM;

typedef struct tagNET_DVR_CHAN_INFO
{
    DWORD    dwSize;
    BYTE    byValid;                //0-ÎÞÐ§ 1-ÓÐÐ§
    BYTE    byRes1[3];
    BYTE    sChanName[NAME_LEN];    //Í¨µÀÃû³Æ
    NET_DVR_COLOR struVideoColor;   //ÐÅºÅÔ´ÑÕÉ«
    WORD    wResolutionX;        //µ±Ç°·Ö±æÂÊ---¿í 
    WORD    wResolutionY;        //µ±Ç°·Ö±æÂÊ---¸ß
    BYTE   byRes2[40];
} NET_DVR_CHAN_INFO, *LPNET_DVR_CHAN_INFO;

//±àÂë×ÓÉè±¸ÐÅÏ¢
typedef struct tagNET_DVR_CODEDEV_INFO 
{
    NET_DVR_CHAN_INFO struChanInfo[MAX_CHANNUM/*16*/];/*Éè±¸Í¨µÀÐÅÏ¢*/ 
} NET_DVR_CODEDEV_INFO, *LPNET_DVR_CODEDEV_INFO;

//½âÂë×ÓÉè±¸ÐÅÏ¢
typedef struct tagNET_DVR_DECODEDEV_INFO 
{
    BYTE    byRes[1408];
} NET_DVR_DECODEDEV_INFO, *LPNET_DVR_DECODEDEV_INFO;

//ÍøÂçÐÅºÅÔ´ÐÅÏ¢
typedef struct tagNET_DVR_NETSIGNAL_INFO
{
    DWORD    dwSize;
    BYTE    byDevName[NAME_LEN/*32*/];//ÍøÂçÐÅºÅÔ´Ãû³Æ
    NET_DVR_PU_STREAM_CFG struPuStream;  
    BYTE    byValid;            //ÊÇ·ñÓÐÐ§£¬0-ÎÞÐ§£¬É¾³ýÊ±ÉèÎª0  1-ÓÐÐ§£¬Ìí¼ÓºÍÐÞ¸ÄÊ±ÉèÎª1/
    BYTE     byRes1[3];    //±£Áô
    BYTE    sGroupName[NAME_LEN/*32*/];//ÍøÂçÐÅºÅÔ´ËùÔÚ×éµÄ×éÃû£¬ÍøÂçÐÅºÅÔ´¸ù¾ÝÕâ¸ö×éÃûÀ´·ÖÀà
    WORD    wResolutionX;        //µ±Ç°·Ö±æÂÊ---¿í 
    WORD    wResolutionY;        //µ±Ç°·Ö±æÂÊ---¸ß
    BYTE    byRes2[24];        
}NET_DVR_NETSIGNAL_INFO, *LPNET_DVR_NETSIGNAL_INFO;

typedef struct tagNET_DVR_NETSIGNALDEV_INFO
{
    NET_DVR_NETSIGNAL_INFO struDevInfo;
    BYTE    byRes1[816];
}NET_DVR_NETSIGNALDEV_INFO, *LPNET_DVR_NETSIGNALDEV_INFO;

typedef union tagNET_DVR_DIFFDEV_INFO 
{
    NET_DVR_CODEDEV_INFO struCodeDevInfo;        //±àÂëÉè±¸ÐÅÏ¢
    NET_DVR_DECODEDEV_INFO struDecodeDevInfo;    //½âÂëÉè±¸ÐÅÏ¢
    NET_DVR_NETSIGNALDEV_INFO struNetSignalInfo;    //ÍøÂçÐÅºÅÔ´ÐÅÏ¢
} NET_DVR_DIFFDEV_INFO, *LPNET_DVR_DIFFDEV_INFO;

/*×¢²áÉè±¸ÐÅÏ¢*/
typedef enum tagNET_DVCS_DEVICE_TYPE
{
    NET_DVR_BNC_PROC = 1,                       /* BNC´¦ÀíÆ÷ */
        NET_DVR_RGB_PROC,                       /* RGB´¦ÀíÆ÷ */
        NET_DVR_STP_PROC,                       /* ×ªÂë´¦ÀíÆ÷ */
        NET_DVR_DISP_PROC,                      /* ÏÔÊ¾´¦ÀíÆ÷ */
        NET_DVR_NETSIGNAL,                        //ÍøÂçÐÅºÅÔ´
        NET_DVR_SDI_PROC,                       //SDI´¦ÀíÆ÷
        NET_DVR_BIW_PROC,                       //8Â·BNC´¦ÀíÆ÷
        NET_DVR_DON_PROC,                        //ÏÔÊ¾´¦ÀíÆ÷
        NET_DVR_TVI_PROC,                       //TVI´¦ÀíÆ÷
        NET_DVR_DI2_PROC                        //2Â·DVI´¦ÀíÆ÷
}NET_DVCS_DEVICE_TYPE;

typedef struct  tagNET_DVR_SINGLE_DEV_INFO 
{
    DWORD    dwSize;
    DWORD    dwSoftVersion;            /*Éè±¸Èí¼þ°æ±¾ºÅ(Ö»ÄÜ»ñÈ¡) ×î¸ß8Î»ÎªÖ÷°æ±¾ºÅ£¬´Î¸ß8Î»Îª´Î°æ±¾ºÅ£¬µÍ16Î»ÎªÐÞ¸´°æ±¾ºÅ*/
    DWORD    dwSoftwareBuildDate;         //°æ±¾±àÒëÈÕÆÚBuild, 0xYYYYMMDD
    BYTE    byUseInSys;                /*ÊÇ·ñÔÚÏµÍ³ÖÐÊ¹ÓÃ*/
    BYTE    byDevStatus;            /*Éè±¸µ±Ç°×´Ì¬£¬0-ÏÂÏß£¬1-ÉÏÏß(Ö»ÄÜ»ñÈ¡)*/ 
    BYTE    byDeviceType;            /*Éè±¸ÀàÐÍ(Ö»ÄÜ»ñÈ¡)  ¼ûDEVICE_TYPE*/ 
    BYTE    byRes1[17];
    BYTE    sDevName[NAME_LEN];     /*Éè±¸Ãû³Æ*/
    NET_DVR_SINGLE_NETPARAM struEtherNet[MAX_ETHERNET]; /*Éè±¸ÍøÂç²ÎÊý*/
    BYTE    sSerialNumber[SERIALNO_LEN];    /*Éè±¸ÐòÁÐºÅ*/
    NET_DVR_DIFFDEV_INFO  struSubDevInfo;        /*Éè±¸ÐÅÏ¢*/ 
    DWORD    dwDeviceIndex;//Éè±¸ÐòºÅ£¬Ã¿¸öÉè±¸Î¨Ò»È·¶¨
    BYTE    byRes2[48];
} NET_DVR_SINGLE_DEV_INFO, *LPNET_DVR_SINGLE_DEV_INFO;

typedef struct tagNET_DVR_DEVLIST
{
    DWORD        dwSize;
    DWORD        dwDevNums;//Éè±¸·µ»ØµÄ·Ö²¼Ê½×ÓÉè±¸ÊýÁ¿
    BYTE          *pBuffer;
    BYTE        byRes1[3];
    DWORD         dwBufLen;//Ëù·ÖÅäÖ¸Õë³¤¶È£¬ÊäÈë²ÎÊý
    BYTE        byRes2[64];
} NET_DVR_DEVLIST,*LPNET_DVR_DEVLIST;

typedef struct tagNET_DVR_DEV_BASE_INFO
{
    DWORD  dwSize;
    BYTE   byEnable;          /*ÊÇ·ñÔÚÏµÍ³ÖÐÊ¹ÓÃ*/
    BYTE   byDeviceType;      /*Éè±¸ÀàÐÍ(Ö»ÄÜ»ñÈ¡)*/ 
    BYTE   byRes1[2];
    BYTE   sDevName[NAME_LEN]; /*Éè±¸Ãû³Æ*/ 
    BYTE   byRes2[24];
} NET_DVR_DEV_BASE_INFO,*LPNET_DVR_DEV_BASE_INFO;

/*ÍøÂçÅäÖÃÐÅÏ¢*/
typedef  struct tagNET_DVR_NETPARAM
{    
    DWORD dwSize;
    NET_DVR_SINGLE_NETPARAM struEtherNet[MAX_ETHERNET];//ÒÔÌ«Íø¿Ú    
    BYTE   byRes[64];
} NET_DVR_NETPARAM, *LPNET_DVR_NETPARAM;

// °ó¶¨ÆÁÄ»ºÍÉè±¸¹ØÏµ(16¸ö×Ö½Ú)
typedef struct tagNET_DVR_DISP_SCREEN
{
    DWORD    dwSize;
    WORD    wScreenID;        // ÆÁÄ»IDºÅ, IDºÅ´Ó1¿ªÊ¼
    BYTE    byWallNo;        // µçÊÓÇ½ºÅ
    BYTE    byRes1;            // ±£Áô1
    DWORD    dwDeviceIndex;    // Êä³öÉè±¸ÐòºÅ
    BYTE    byRes2[16];        // ±£Áô2
}NET_DVR_DISP_SCREEN, *LPNET_DVR_DISP_SCREEN;

// ÆÁÄ»¿ØÖÆ
typedef struct tagNET_DVR_TEXTSHOW
{
    DWORD dwSize;
    BYTE  byShowText;//ÊÇ·ñÏÔÊ¾ÎÄ×Ö£¬1-ÏÔÊ¾ÎÄ×Ö£¬0-²»ÏÔÊ¾ÎÄ×Ö
    BYTE  byRes[35];
}NET_DVR_TEXTSHOW, *LPNET_DVR_TEXTSHOW;

typedef struct tagNET_DVR_SCREENLIST
{
    DWORD        dwSize;
    BYTE        byWallNo;    //µçÊÓÇ½ºÅ£¬´Ó1¿ªÊ¼
    BYTE        byRes[11];
    DWORD        dwScreenNums;//Éè±¸·µ»ØµÄÓ³ÉäÏÔÊ¾ÆÁÊýÁ¿
    BYTE          *pBuffer;
    DWORD         dwBufLen;//Ëù·ÖÅäÖ¸Õë³¤¶È£¬ÊäÈë²ÎÊý
} NET_DVR_SCREENLIST,*LPNET_DVR_SCREENLIST;

typedef struct tagNET_DVR_OPERATE_DEVICE
{
    DWORD    dwSize;
    DWORD    dwSubCommand;    //ÉèÖÃÉè±¸µÄÃüÁî£¬1-Éè±¸¿ªÊ¼Éý¼¶£¬2-Í£Ö¹Éý¼¶
    DWORD    dwDeviceIndex;//Éè±¸ÐòºÅ
    BYTE    byRes[44];
}NET_DVR_OPERATE_DEVICE, *LPNET_DVR_OPERATE_DEVICE;

//Éè±¸Éý¼¶
typedef struct tagNET_DVR_UPGRADE_STATE
{
    DWORD    dwProgress; // 0-100
    BYTE     byState;  //Éý¼¶½ø¶È£º1-Éý¼¶Íê³É 2-ÕýÔÚÉý¼¶ 3-Éý¼¶Ê§°Ü
    BYTE    byRes2[31];
}NET_DVR_UPGRADE_STATE, *LPNET_DVR_UPGRADE_STATE;
typedef void (CALLBACK *DVCS_UPGRADESTATE_CB)(LONG nUpgradeHandle, BYTE *pBuffer, DWORD dwBufSize, void* pUser);

typedef enum
{
    NET_DVR_DATA_BMP = 0,
        NET_DVR_START_CALLBACK, 
        NET_DVR_STREAM_SYSHEAD,
        NET_DVR_STREAM_DATA
}PIC_PREVIEW_DATATYPE;

typedef struct tagNET_DVR_START_PIC_VIEW_INFO
{
    DWORD    dwSize;
    DWORD    dwSignalIndex;    //ÐÅºÅÔ´ÐòºÅ£¬¸Ã²ÎÊýÓÃÓÚ´óÆÁ¿ØÖÆÆ÷£¬ÆäËûÉè±¸¸ÃÖµÉèÎª0
    DWORD    dwDeviceIndex;//Éè±¸ÐòºÅ
    BYTE    byRes1[12];
    BYTE    byChanIndex;    //Í¨µÀºÅ
    BYTE    byRes2[3];
    //ÊÓÆµ×ÛºÏÆ½Ì¨»ØÏÔ²ÎÊý
    DWORD   dwScreenNum; //´óÆÁÐòºÅ£º´ÓÁã¿ªÊ¼
    DWORD   dwLayer;     //Í¼²ãºÅ£º´ÓÁã¿ªÊ¼
    DWORD   dwResolution;//»ØÏÔ·Ö±æÂÊ,1-QCIF,2-CIF,3-D1
    BYTE    byFrame;//Ö¡ÂÊ£¬µ¥Î»£ºÖ¡/Ãë
    BYTE    bySupportStreamView; //¿Í»§¶ËÊÇ·ñÖ§³ÖÂëÁ÷»ØÏÔ£¬0-²»Ö§³Ö£¬1-Ö§³Ö
    BYTE    byRes3[14];
}NET_DVR_START_PIC_VIEW_INFO, *LPNET_DVR_START_PIC_VIEW_INFO;

typedef struct tagNET_DVR_DVCS_STATE_ALARM
{
    DWORD    dwSize;
    BYTE    byAlarmType;        // ±¨¾¯ÀàÐÍ,1-Éè±¸ÉÏÏß£¬2-Éè±¸ÀëÏß 3-·þÎñÆ÷ÉÏÏß 4-·þÎñÆ÷ÀëÏß 5-¹ÜÀíÔ±µÇÂ½ 6-Ô¤°¸¿ªÊ¼,7-Ô¤°¸½áÊø£¬8-·Ö±æÂÊ±ä»¯£¬9-Í¼ÏñÇÐ¸îÊ§°Ü£¬10-Éè±¸×ÊÔ´²»×ã£¬11-ÎÂ¶ÈÒì³£  12-´°¿Ú´óÐ¡ÓëÐÅºÅÔ´·Ö±æÂÊ²»·ûºÏ*/
    BYTE    byDeviceType;        // Éè±¸ÀàÐÍ ¼û¶¨ÒåNET_DVCS_DEVICE_TYPE */ 
    BYTE    byWallNo;            // Ç½ºÅ£¬´Ó1¿ªÊ¼£¬ 0±íÊ¾ÎÞÐ§
    BYTE    byDeviceChanIndex;     // Éè±¸Í¨µÀºÅ£¬0±íÊ¾ÎÞÐ§£¬ÆäËûÖµ±íÊ¾Í¨µÀºÅ
    DWORD    dwDeviceIndex;        // Éè±¸ÐòºÅ£¬ 0±íÊ¾ÎÞÐ§
    WORD    wResolutionX;        // ·Ö±æÂÊ-¿í  0±íÊ¾ÎÞÐ§
    WORD    wResolutionY;        // ·Ö±æÂÊ-¸ß  0±íÊ¾ÎÞÐ§
    WORD    wTemperature;       // Éè±¸ÎÂ¶È µ¥Î»£ºÉãÊÏ¶È, 0±íÊ¾ÎÞÐ§ 
    BYTE    byRes[86];
}NET_DVR_DVCS_STATE_ALARM, *LPNET_DVR_DVCS_STATE_ALARM;

typedef struct tagNET_DVR_PIC_ADJUST
{
    DWORD        dwSize;
    BYTE        bySubCommand;        //¼ûºê¶¨ÒåDECODEPIC_LEFTADJUSTµÈ
    BYTE        byScale;            //µ÷ÕûµÄÁ¿Öµ
    BYTE        byPictureProportion;    //Í¼ÏñËõ·Å±ÈÀý 0-ÎÞÐ§ 1-4:3, 2-16:9
    BYTE        byRes[29];            
}NET_DVR_PIC_ADJUST, *LPNET_DVR_PIC_ADJUST;

typedef struct tagNET_DVR_PICTURE_PARAM
{
    DWORD    dwSize;        
    BYTE    byControlCommand;    //ÇÐ»»ÃüÁî£¬1-ÏÔÊ¾£¬2-Òþ²Ø£¬3-È«²¿É¾³ý£¨Õë¶ÔGIFÍ¼Æ¬    £©
    BYTE    byUseType;            //Í¼Æ¬ÀàÐÍ£¬1-OSD 2-µ×Í¼£¬3-GIF
    BYTE    byWallNo;            //µçÊÓÇ½Ç½ºÅ£¬´Ó1¿ªÊ¼
    BYTE    byPictureNo;        //Í¼Æ¬ÐòºÅ
    BYTE    byRes[64];
}NET_DVR_PICTURE_PARAM, *LPNET_DVR_PICTURE_PARAM;

// 76SPÉè±¸POEÍ¨µÀÌí¼Ó·½Ê½ÅäÖÃ
typedef struct tagNET_DVR_POE_CHANNEL_ADD_MODE
{
    DWORD        dwSize;                  //½á¹¹Ìå´óÐ¡
    BYTE         byAddMode;                 //Ìí¼Ó·½Ê½ 0: ¼´²å¼´ÓÃ 1: ÊÖ¶¯Ìí¼Ó    
    BYTE          byRes1[127];              //±£Áô
}NET_DVR_POE_CHANNEL_ADD_MODE, *LPNET_DVR_POE_CHANNEL_ADD_MODE;

#define MAX_ESATA_NUM 16
#define MAX_MINISAS_NUM 96

typedef struct tagNET_DVR_ESATA_MINISAS_USAGE
{
    DWORD        dwSize;
    BYTE        byESATAUsage[MAX_ESATA_NUM];        // Êý×éË÷Òý±íÊ¾µÚ¼¸¸öeSATA£¬0£ºÄ¬ÈÏ±¸·Ý 1£ºÄ¬ÈÏÂ¼Ïñ
    BYTE        byMiniSASUsage[MAX_MINISAS_NUM];    // Êý×éË÷Òý±íÊ¾µÚ¼¸¸öminiSAS£¬0£ºÄ¬ÈÏ±¸·Ý 1£ºÄ¬ÈÏÂ¼Ïñ
    BYTE         byRes[32];
}NET_DVR_ESATA_MINISAS_USAGE, *LPNET_DVR_ESATA_MINISAS_USAGE;

#define MAX_DISK_NUM 128

typedef struct tagNET_DVR_BACKUP_LOG_PARAM
{
    DWORD        dwSize;
    BYTE        byDiskDesc[DESC_LEN_32];        //±¸·Ý´ÅÅÌÃèÊö
    BYTE        byHardDisk[MAX_DISK_NUM];        //Ðè±¸·ÝµÄÓ²ÅÌºÅ£¬±¸·Ý¼¸¸öÈ¡Ç°¼¸¸ö 
    BYTE        byBackupHardDiskNum;              //Ðè±¸·ÝµÄÓ²ÅÌ¸öÊý
    BYTE        byContinue;                        //ÊÇ·ñ¼ÌÐø±¸·Ý£¬0-²»¼ÌÐø£¬1-¼ÌÐø
    BYTE        byAllLogBackUp ;        /*ÊÇ·ñÈ«²¿±¸·Ý£¬0-°´´ÅÅÌºÅ±¸·Ý£¬1-±¸·ÝËùÓÐÈÕÖ¾£¬µ±Îª1Ê±£¬Ðè±¸·ÝµÄ´ÅÅÌºÅºÍÓ²ÅÌ¸öÊýÎÞÐ§*/
    BYTE         byRes[29];
}NET_DVR_BACKUP_LOG_PARAM, *LPNET_DVR_BACKUP_LOG_PARAM;

typedef struct tagNET_DVR_DIGITAL_CHANNEL_STATE
{
    DWORD    dwSize;
    BYTE    byDigitalAudioChanTalkState[MAX_CHANNUM_V30];  //±íÊ¾Êý×ÖÓïÒôÍ¨µÀµÄ¶Ô½²×´Ì¬ 0-Î´Ê¹ÓÃ£¬1-Ê¹ÓÃÖÐ, 0xffÎÞÐ§
    BYTE    byDigitalChanState[MAX_CHANNUM_V30];  /*Êý×ÖÍ¨µÀµÄÁ¬½Ó×´Ì¬ byDigitalChanErrState[0] 
                                               ±íÊ¾µÚÒ»¸öÊý×ÖÍ¨µÀ£¬¾ßÌåÖµ±íÊ¾×´Ì¬Âë£¬Ïé¼ûNET_SDK_DIGITAL_CHANNEL_STATUS£¬ÒÔ´ËÀàÍÆ£¬0xff±íÊ¾ÎÞÐ§Í¨µÀ»òÎ´Ìí¼ÓIPC*/
    BYTE    byDigitalAudioChanTalkStateEx[MAX_CHANNUM_V30*3];  //±íÊ¾Êý×ÖÓïÒôÍ¨µÀµÄ¶Ô½²×´Ì¬£¬´ÓµÚMAX_CHANNUM_V30+1 µ½µÚMAX_CHANNUM_V30*4¸ö£¬ 0-Î´Ê¹ÓÃ£¬1-Ê¹ÓÃÖÐ, 0xffÎÞÐ§
    BYTE    byDigitalChanStateEx[MAX_CHANNUM_V30*3];  /*Êý×ÖÍ¨µÀµÄÁ¬½Ó×´Ì¬ byDigitalChanErrStateEx[0]±íÊ¾µÚ´ÓµÚMAX_CHANNUM_V30+1¸ö¸öÊý×ÖÍ¨µÀ£¬¾ßÌåÖµ±íÊ¾×´Ì¬Âë£¬Ïé¼ûNET_SDK_DIGITAL_CHANNEL_STATUS£¬ÒÔ´ËÀàÍÆ£¬0±íÊ¾ÎÞÐ§*/
    BYTE    byAnalogChanState[MAX_ANALOG_CHANNUM];//±íÊ¾Ä£ÄâÍ¨µÀÊÇ·ñÆôÓÃ,0-½ûÓÃ,1-ÆôÓÃ
    BYTE    byRes[32];
}NET_DVR_DIGITAL_CHANNEL_STATE, *LPNET_DVR_DIGITAL_CHANNEL_STATE;

//Êý×ÖÍ¨µÀ×´Ì¬
typedef enum
{
    NET_SDK_DC_STATUS_CONNECTED = 1,                //ÒÑÁ¬½Ó
        NET_SDK_DC_STATUS_CONNECTING,                    //ÕýÔÚÁ¬½Ó
        NET_SDK_DC_STATUS_BAND_WIDTH_EXCEED,        //³¬¹ýÏµÍ³´ø¿í
        NET_SDK_DC_STATUS_DOMAIN_ERROR,                //ÓòÃû´íÎó
        NET_SDK_DC_STATUS_CHANNEL_ERROR,                //Í¨µÀºÅ´íÎó
        NET_SDK_DC_STATUS_ACCOUNT_ERROR,                //ÓÃ»§Ãû»òÃÜÂë´íÎó
        NET_SDK_DC_STATUS_STREAM_TYPE_NOT_SUPPORT,    //Á÷ÀàÐÍ²»Ö§³Ö
        NET_SDK_DC_STATUS_CONFLICT_WITH_DVR,            //ºÍÉè±¸IPµØÖ·³åÍ»
        NET_SDK_DC_STATUS_CONFLICT_WITH_IPC,            //ºÍIPC IPµØÖ·³åÍ»
        NET_SDK_DC_STATUS_NETWORK_UNREACHBALE,    //ÍøÂç²»¿É´ï
        NET_SDK_DC_STATUS_IPC_NOT_EXIST,                //IPÍ¨µÀÎ´½ÓÈë
        NET_SDK_DC_STATUS_IPC_EXCEPTION,                //IPÍ¨µÀÒì³£
        NET_SDK_DC_STATUS_OTHER_ERROR,                //ÆäËû´íÎó
        NET_SDK_DC_STATUS_RESOLUTION_NOT_SUPPORT,    //IPC·Ö±æÂÊ²»Ö§³Ö
        NET_SDK_DC_STATUS_IPC_LAN_ERR = 15,         //IPCÓïÑÔÓëNVRÓïÑÔ²»Æ¥Åä
        NET_SDK_DC_STATUS_USER_LOCKED = 16,         //ÓÃ»§±»Ëø¶¨
        NET_SDK_DC_STATUS_NOT_ACTIVATED = 17,        //Éè±¸Î´¼¤»î
        NET_SDK_DC_STATUS_USER_NOT_EXIST = 18,      //ÓÃ»§²»´æÔÚ
        NET_SDK_DC_STATUS_IPC_UNREGISTERED = 19,     //IPÍ¨µÀ¶ÔÓ¦Éè±¸Î´×¢²á(GB28181Ð­Òé½ÓÈë)
        NET_SDK_DC_STATUS_POE_PORT_DETECTING = 20   //POEÍ¨µÀ¼ì²âÖÐ
}NET_SDK_DIGITAL_CHANNEL_STATUS;

/*************************************ITS****************************/
#define VERSION_LEN                 32 //°æ±¾³¤¶È
#define    MAX_OVERLAP_ITEM_NUM        50 //×î´ó×Ö·ûµþ¼ÓÖÖÊý
#define    ITS_MAX_DEVICE_NUM            32 //×î´óÉè±¸¸öÊý

//ÖÕ¶Ë»ù±¾ÐÅÏ¢
typedef struct tagNET_ITS_BASEINFO
{
    DWORD   dwSize;    
    BYTE    byMainVer[VERSION_LEN];    // Ëã·¨Ö÷Á÷³Ì°æ±¾
    BYTE    byMprVer[VERSION_LEN];    // ¶àÖ¡Ê¶±ð¿â°æ±¾
    BYTE    byBvtVer[VERSION_LEN];    // ±³ÏòÊÓÆµ¿â°æ±¾
    BYTE    byLptVer[VERSION_LEN];    // ÊÓÆµ¸ú×Ù¿â°æ±¾
    BYTE    byTvdVer[VERSION_LEN];    // Î¥ÕÂ¼ì²â¿â°æ±¾
    BYTE    byTldVer[VERSION_LEN];    // ÐÅºÅµÆ¼ì²â¿â°æ±¾
    BYTE    byRes[252];        // Ô¤Áô×Ö¶Î
}NET_ITS_BASEINFO,*LPNET_ITS_BASEINFO;

//Í¼Æ¬ºÏ³É²ÎÊý
typedef struct tagNET_ITS_IMGMERGE_CFG
{
    DWORD  dwSize;
    BYTE   byIsMerge;        //ÊÇ·ñÐèÒªºÏ³É£¨0£º²»ºÏ³É£»1£ººÏ³É£©
    BYTE   byCloseupProportion;//ÌØÐ´Í¼±ÈÀý 1-Ô­Ê¼·Ö±æÂÊ´óÐ¡£¬2-¿í¸ßÎªÔ­Ê¼·Ö±æÂÊÁ½±¶£¬ÒÔ´ËÀàÍÆ(1¡«8)
    BYTE   byRes1[2];
    DWORD  dwOneMergeType;    //×¥ÅÄµ¥ÕÅÍ¼ºÏ³É·½Ê½£¨¿ÉÄÜ»á½ØÈ¡ÌØÐ´Í¼£©
    /************************************************************************/
    /* 201 Á½ÕÅÍ¼Æ¬ÉÏÏÂÅÅÁÐºÏ³É,ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ1±¶,¸ßÎª2±¶         */
    /* 202 Á½ÕÅÍ¼Æ¬×óÓÒÅÅÁÐºÏ³É,ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ2±¶,¸ßÎª1±¶         */
    /* 203 ÉÏÏÂºÏ³É£¬ÌØÐ´ÔÚ×îÉÏ±ß.                                          */
    /* 204 ÉÏÏÂºÏ³É£¬ÌØÐ´ÔÚ×îÏÂ±ß.                                        */
    /* 205 ×óÓÒºÏ³É£¬ÌØÐ´ÔÚ×îÓÒ±ß¡£                                       */
    /* 206 ×óÓÒºÏ³É£¬ÌØÐ´ÔÚ×î×ó±ß                                         */
    /* 207 Æ·×ÖºÏ³É£¬ÌØÐ´Í¼ÔÚÉÏ±ß                                         */
    /* 208 µ¹Æ·×ÖºÏ³É£¬ÌØÐ´Í¼ÔÚÏÂ±ß                                       */
    /* 209 ³ª×ÖÐÎ£¬×ó±ß1ÕÅÎªÌØÐ´                                          */
    /* 210 ·´³ª×ÖÐÎ£¬ÓÒ±ß1ÕÅÎªÌØÐ´                                        */
    /* 301 ÈýÕÅÍ¼Æ¬ÉÏÏÂÅÅÁÐºÏ³É,ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ1±¶,¸ßÎª3±¶         */
    /* 302 ÈýÕÅÍ¼Æ¬×óÓÒÅÅÁÐºÏ³É,ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ3±¶,¸ßÎª1±¶          */
    /* 303 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò,×é³ÉËÄÕÅÍ¼Æ¬;ËÄÕÅÍ¼Æ¬"Ìï"×ÖÐÍºÏ³É,
    ÌØÐ´ÔÚÓÒÏÂ;ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ2±¶,¸ßÎª2±¶                      */
    /* 304 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò,×é³ÉËÄÕÅÍ¼Æ¬;ËÄÕÅÍ¼Æ¬"Ìï"×ÖÐÍºÏ³É,
    ÌØÐ´ÔÚÓÒÏÂ;ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ1±¶,¸ßÎª1±¶                      */
    /* 305 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò,×é³ÉËÄÕÅÍ¼Æ¬;ËÄÕÅÍ¼Æ¬"Ìï"×ÖÐÍºÏ³É,
    ÌØÐ´ÔÚ×óÉÏ;ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ2±¶,¸ßÎª2±¶                      */
    /* 306 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò,×é³ÉËÄÕÅÍ¼Æ¬;ËÄÕÅÍ¼Æ¬"Ìï"×ÖÐÍºÏ³É,
    ÌØÐ´ÔÚ×óÉÏ;Ñ¹ËõÍ¼Æ¬·Ö±æÂÊ,ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ1±¶,¸ßÎª1±¶      */
    /* 307 ÈýÕÅÍ¼Æ¬"Æ·"×ÖÐÍÅÅÁÐºÏ³É                                          */
    /* 308 ÈýÕÅÍ¼Æ¬µ¹"Æ·"×ÖÐÍÅÅÁÐºÏ³É                                      */
    /* 309 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò,×é³ÉËÄÕÅÍ¼Æ¬;ËÄÕÅÍ¼Æ¬"Ìï"×ÖÐÍºÏ³É,
    ÌØÐ´ÔÚ×óÏÂ;ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ2±¶,¸ßÎª2±¶                          */
    /* 310 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò,×é³ÉËÄÕÅÍ¼Æ¬;ËÄÕÅÍ¼Æ¬"Ìï"×ÖÐÍºÏ³É,
    ÌØÐ´ÔÚ×óÏÂ;ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ1±¶,¸ßÎª1±¶                          */
    /* 311 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò,×é³ÉËÄÕÅÍ¼Æ¬;ËÄÕÅÍ¼Æ¬"Ìï"×ÖÐÍºÏ³É,
    ÌØÐ´ÔÚÓÒÉÏ;ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ2±¶,¸ßÎª2±¶                          */
    /* 312 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò,×é³ÉËÄÕÅÍ¼Æ¬;ËÄÕÅÍ¼Æ¬"Ìï"×ÖÐÍºÏ³É,
    ÌØÐ´ÔÚÓÒÉÏ;Ñ¹ËõÍ¼Æ¬·Ö±æÂÊ,ºÏ³ÉºóÍ¼Æ¬¿íÎªµ¥ÕÅÍ¼µÄ1±¶,¸ßÎª1±¶      */
    
    /* 313 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò£¬×é³ÉËÄÕÅÍ¼Æ¬£»
    ËÄÕÅÍ¼Æ¬ºá"Ò»"×ÖÐÍºÏ³É£¬
    Ë³ÐòÎª£ºÌØÐ´Í¼¡¢³¡¾°Í¼¡¢³¡¾°Í¼¡¢³¡¾°Í¼                         */
    /* 314 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò£¬×é³ÉËÄÕÅÍ¼Æ¬£»
    ËÄÕÅÍ¼Æ¬ºá"Ò»"×ÖÐÍºÏ³É£¬
    Ë³ÐòÎª£º³¡¾°Í¼¡¢ÌØÐ´Í¼¡¢³¡¾°Í¼¡¢³¡¾°Í¼                         */
    /* 315 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò£¬×é³ÉËÄÕÅÍ¼Æ¬£»
    ËÄÕÅÍ¼Æ¬ºá"Ò»"×ÖÐÍºÏ³É£¬
    Ë³ÐòÎª£º³¡¾°Í¼¡¢³¡¾°Í¼¡¢ÌØÐ´Í¼¡¢³¡¾°Í¼                         */                   
    /* 316 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò£¬×é³ÉËÄÕÅÍ¼Æ¬£»
    ËÄÕÅÍ¼Æ¬ºá"Ò»"×ÖÐÍºÏ³É£¬
    Ë³ÐòÎª£º³¡¾°Í¼¡¢³¡¾°Í¼¡¢³¡¾°Í¼¡¢ÌØÐ´Í¼                         */  
    /* 317 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò£¬×é³ÉËÄÕÅÍ¼Æ¬£»
    ËÄÕÅÍ¼Æ¬Êú"1"×ÖÐÍºÏ³É£¬
    Ë³ÐòÎª£ºÌØÐ´Í¼¡¢³¡¾°Í¼¡¢³¡¾°Í¼¡¢³¡¾°Í¼                         */
    /* 318 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò£¬×é³ÉËÄÕÅÍ¼Æ¬£»
    ËÄÕÅÍ¼Æ¬Êú"1"×ÖÐÍºÏ³É£¬
    Ë³ÐòÎª£º³¡¾°Í¼¡¢ÌØÐ´Í¼¡¢³¡¾°Í¼¡¢³¡¾°Í¼                         */  
    /* 319 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò£¬×é³ÉËÄÕÅÍ¼Æ¬£»
    ËÄÕÅÍ¼Æ¬Êú"1"×ÖÐÍºÏ³É£¬
    Ë³ÐòÎª£º³¡¾°Í¼¡¢³¡¾°Í¼¡¢ÌØÐ´Í¼¡¢³¡¾°Í¼                         */ 
    /* 320 ´ÓÈýÕÅÍ¼Æ¬ÖÐÈ¡Ò»·ù³µÅÆÌØÐ´ÇøÓò£¬×é³ÉËÄÕÅÍ¼Æ¬£»
    ËÄÕÅÍ¼Æ¬Êú"1"×ÖÐÍºÏ³É£¬
    Ë³ÐòÎª£º³¡¾°Í¼¡¢³¡¾°Í¼¡¢³¡¾°Í¼¡¢ÌØÐ´Í¼                         */     
    /************************************************************************/
    DWORD  dwTwoMergeType;    //×¥ÅÄÁ½ÕÅÍ¼ºÏ³É·½Ê½
    DWORD  dwThreeMergeType;    //×¥ÅÄÈýÕÅÍ¼ºÏ³É·½Ê½
    DWORD  dwJpegQuality;      //Ñ¹ËõÖÊÁ¿£¨0~100£©
    DWORD  dwCloseupIndex;     //ÌØÐ´Í¼×¥ÅÄµÚ¼¸ÕÅ
    DWORD  dwMerageMaxSize;   //ºÏ³ÉÍ¼Æ¬´óÐ¡µÄÉÏÏÞ,300-10240(µ¥Î»KB)
    WORD   wCloseupDeviation; // ÌØÐ´Í¼Æ«ÒÆÁ¿(50~Í¼Æ¬¸ß¶È)£¬µ¥Î»:ÏñËØ
    BYTE   byRes[30];
}NET_ITS_IMGMERGE_CFG,*LPNET_ITS_IMGMERGE_CFG;

//½»Í¨Êý¾ÝÖ÷»ú
typedef    struct    tagNET_ITS_TRAFFIC_DATA_HOST
{
    NET_DVR_IPADDR    struHostAddr;    // Ô¶³ÌÖ÷»úIP
    WORD            wHostPort;    // Ô¶³ÌÖ÷»úPort
    BYTE            byRes1[2];
    DWORD            dwDataType;    // ÉÏ´«Ô¶³ÌÖ÷»úµÄÊý¾ÝÀàÐÍ£¨¶¨Òå¼ûÏÂ£©£¬°´Î»±íÊ¾
    BYTE            bySuspendUpload;    // ÊÇ·ñÔÝÍ£Êý¾ÝÉÏ´«£º0-Õý³£ÉÏ´«£»1-ÔÝÍ£ÉÏ´«
    BYTE            byUploadStrategy;    // ÉÏ´«²ßÂÔ£º0-×îÐÂÊý¾ÝÓÅÏÈÉÏ´«£»1-°´ÕÕÍ¨ÐÐÊ±¼äÉÏ´«
    WORD            wUploadInterval;    // ÉÏ´«¼ä¸ôÊ±¼ä£¨ms£¬1~2000£©£¬¸Ã²ÎÊýÖ»¶ÔÀúÊ·Êý¾ÝÓÐÐ§
    DWORD            dwUploadTimeOut; //ÉÏ´«³¬Ê±Ê±¼ä
    BYTE            byRes[24];
}NET_ITS_TRAFFIC_DATA_HOST,*LPNET_ITS_TRAFFIC_DATA_HOST;

//Êý¾ÝÉÏ´«²ÎÊý
typedef  struct    tagNET_ITS_UPLOAD_CFG
{
    DWORD                  dwSize;
    NET_ITS_TRAFFIC_DATA_HOST    struRemoteDataHost1;       //½ÓÊÕ½»Í¨Êý¾ÝÖ÷»ú1
    NET_ITS_TRAFFIC_DATA_HOST    struRemoteDataHost2;        //½ÓÊÕ½»Í¨Êý¾ÝÖ÷»ú2 
}NET_ITS_UPLOAD_CFG,*LPNET_ITS_UPLOAD_CFG;

typedef struct tagNET_DVR_SYSTEM_TIME
{
    WORD  wYear;           //Äê
    WORD  wMonth;          //ÔÂ
    WORD  wDay;            //ÈÕ
    WORD  wHour;           //Ê±
    WORD  wMinute;      //·Ö
    WORD  wSecond;      //Ãë
    WORD  wMilliSec;    //ºÁÃë
    BYTE  byRes[2];
}NET_DVR_SYSTEM_TIME, *LPNET_DVR_SYSTEM_TIME;

//½»Í¨Êý¾ÝÖ÷»ú×´Ì¬ÐÅÏ¢
typedef    struct tagNET_ITS_TRAFFIC_DATA_INFO
{
    DWORD    dwDataQuantity;      //Êý¾Ý×ÜÁ¿
    DWORD    dwDataRsendQuantity;     //Î´·¢ËÍÊýÁ¿£¨ÐèÒªÉÏ´«½»Í¨Êý¾ÝÖ÷»úµÄ£©
    NET_DVR_SYSTEM_TIME      struStartTime;        //Î´·¢ËÍÊý¾ÝµÄ×îÔçÊ±¼ä
    NET_DVR_SYSTEM_TIME      struEndTime;        //Î´·¢ËÍÊý¾ÝµÄ×îÍíÊ±¼ä
    NET_DVR_IPADDR   struDataHost;    //½ÓÊÕ½»Í¨Êý¾ÝÖ÷»ú
}NET_ITS_TRAFFIC_DATA_INFO, *LPNET_ITS_TRAFFIC_DATA_INFO;

//ÖÕ¶Ë¹¤×÷×´Ì¬
typedef  struct tagNET_ITS_WORKSTATE
{ 
    DWORD  dwSize ;
    BYTE   byDevName[NAME_LEN];    // Éè±¸Ãû³Æ
    DWORD  dwRunTime;        // ÏµÍ³ÔËÐÐÊ±¼ä£¬µ¥Î»s
    NET_ITS_TRAFFIC_DATA_INFO    struTrafficDataInfo[2]; //Ö§³ÖÁ½Ì¨Ö÷»ú£¨Êý¾ÝÉÏ´«ÅäÖÃµÄÖ÷»ú£©
    DWORD  dwMemoryUsage;    // ÄÚ´æÕ¼ÓÃÂÊ£¨Èç¹ûÄÚ´æÕ¼ÓÃÂÊÎª30%£¬´Ë´¦Ìî30£©
    DWORD  dwCpuUsage;        // cpuÕ¼ÓÃÂÊ£¨Èç¹ûcpuÕ¼ÓÃÂÊÎª30%£¬´Ë´¦Ìî30£©
    DWORD  dwDevTemperature;    // ±¾»úÎÂ¶È
    DWORD  dwDeviceStatic;     // Éè±¸µÄ×´Ì¬,0-Õý³£,1-CPUÕ¼ÓÃÂÊÌ«¸ß,³¬¹ý85%,2-Ó²¼þ´íÎó,ÀýÈç´®¿ÚËÀµô
    NET_DVR_DISKSTATE  struHardDiskStatic[MAX_DISKNUM_V30];   //Ó²ÅÌ×´Ì¬
    NET_DVR_CHANNELSTATE_V30 struChanStatic[MAX_CHANNUM_V30]; //Í¨µÀµÄ×´Ì¬
    BYTE  byAlarmInStatic[MAX_ALARMIN_V30];  //±¨¾¯ÊäÈë¿ÚµÄ×´Ì¬,0-Ã»ÓÐ±¨¾¯,1-ÓÐ±¨¾¯
    BYTE  byAlarmOutStatic[MAX_ALARMOUT_V30]; //±¨¾¯Êä³ö¶Ë¿ÚµÄ×´Ì¬,0-Ã»ÓÐÊä³ö,1-ÓÐ±¨¾¯Êä³ö
    DWORD dwLocalDisplay;            //±¾µØÏÔÊ¾×´Ì¬,0-Õý³£,1-²»Õý³£
    BYTE  byAudioInChanStatus[8];      //±íÊ¾ÓïÒôÍ¨µÀµÄ×´Ì¬ 0-Î´Ê¹ÓÃ£¬1-Ê¹ÓÃÖÐ£¬Êý×é0±íÊ¾µÚ1¸öÓïÒôÍ¨µÀ
    BYTE  byRes[36];             //±£Áô
}NET_ITS_WORKSTATE, *LPNET_ITS_WORKSTATE;

//³öÈë¿Ú½»Í¨ÅäÖÃ»ñÈ¡²ÎÊý
typedef  struct tagNET_ITS_ECT_WORKSTATE_COMMAND
{ 
    DWORD    dwSize;
    DWORD   dwChannel;
    BYTE    byRes[256];             //±£Áô
}NET_ITS_ECT_WORKSTATE_COMMAND, *LPNET_ITS_ECT_WORKSTATE_COMMAND;

typedef struct tagNET_ITS_ECTWORKSTATE
{ 
    DWORD     dwSize ;
    BYTE     byDevName[NAME_LEN];    // Éè±¸Ãû³Æ
    DWORD    dwRunTime;        // ÏµÍ³ÔËÐÐÊ±¼ä£¬µ¥Î»s
    NET_ITS_TRAFFIC_DATA_INFO    struTrafficDataInfo[2]; //Ö§³ÖÁ½Ì¨Ö÷»ú£¨Êý¾ÝÉÏ´«ÅäÖÃµÄÖ÷»ú£©
    DWORD    dwMemoryUsage;    // ÄÚ´æÕ¼ÓÃÂÊ£¨Èç¹ûÄÚ´æÕ¼ÓÃÂÊÎª30%£¬´Ë´¦Ìî30£©
    DWORD    dwCpuUsage;        // cpuÕ¼ÓÃÂÊ£¨Èç¹ûcpuÕ¼ÓÃÂÊÎª30%£¬´Ë´¦Ìî30£©
    DWORD    dwDevTemperature;    // ±¾»úÎÂ¶È
    DWORD    dwDeviceStatic;     // Éè±¸µÄ×´Ì¬,0-Õý³£,1-CPUÕ¼ÓÃÂÊÌ«¸ß,³¬¹ý85%,2-Ó²¼þ´íÎó,ÀýÈç´®¿ÚËÀµô
    NET_DVR_DISKSTATE  struHardDiskStatic[MAX_DISKNUM_V30];   //Ó²ÅÌ×´Ì¬
    BYTE     byAlarmInStatic[MAX_ALARMIN_V30];  //±¨¾¯ÊäÈë¿ÚµÄ×´Ì¬,0-Ã»ÓÐ±¨¾¯,1-ÓÐ±¨¾¯
    BYTE     byAlarmOutStatic[MAX_ALARMOUT_V30]; //±¨¾¯Êä³ö¶Ë¿ÚµÄ×´Ì¬,0-Ã»ÓÐÊä³ö,1-ÓÐ±¨¾¯Êä³ö
    DWORD    dwLocalDisplay;            //±¾µØÏÔÊ¾×´Ì¬,0-Õý³£,1-²»Õý³£
    BYTE     byRes[256];             //±£Áô
}NET_ITS_ECTWORKSTATE, *LPNET_ITS_ECTWORKSTATE;

// Í¼Æ¬ÐÅÏ¢£¨ºóÐø»á¼ÓÈëÂëÁ÷£©
typedef struct tagNET_ITS_PICTURE_INFO
{
    DWORD   dwDataLen;            //Ã½ÌåÊý¾Ý³¤¶È
    BYTE    byType;            // 0:³µÅÆÍ¼;1:³µÁ¾Í¼;2:ºÏ³ÉÍ¼; 3:ÌØÐ´Í¼;4:¶þÖ±Í¼;5:ÂëÁ÷;6:ÈËÁ³×ÓÍ¼(Ö÷¼ÝÊ»);7:ÈËÁ³×ÓÍ¼(¸±¼ÝÊ»)³ÉÍ¼;8-·Ç»ú¶¯³µ;9-ÐÐÈË;10-³ÆÖØÔ­Ê¼ÂãÊý¾Ý;11-Ä¿±êÍ¼
    // 0-Êý¾ÝÖ±½ÓÉÏ´«; 1-ÔÆ´æ´¢·þÎñÆ÷URL(3.7Ver)Ô­ÏÈµÄÍ¼Æ¬Êý¾Ý±ä³ÉURLÊý¾Ý£¬Í¼Æ¬³¤¶È±ä³ÉURL³¤¶È
    BYTE    byDataType;
    BYTE    byCloseUpType;//ÌØÐ´Í¼ÀàÐÍ£¬0-±£Áô,1-·Ç»ú¶¯³µ,2-ÐÐÈË
    BYTE    byPicRecogMode;  //Í¼Æ¬±³ÏòÊ¶±ð£º0-ÕýÏò³µÅÆÊ¶±ð£¬1-±³ÏòÊ¶±ð(Î²ÅÆÊ¶±ð) £»
    DWORD   dwRedLightTime;        //¾­¹ýµÄºìµÆÊ±¼ä  £¨s£©
    BYTE    byAbsTime[32];        //¾ø¶ÔÊ±¼äµã,yyyymmddhhmmssxxx,e.g.20090810235959999  ×îºóÈýÎ»ÎªºÁÃëÊý
    NET_VCA_RECT   struPlateRect;    //³µÅÆÎ»ÖÃ
    NET_VCA_RECT  struPlateRecgRect;   //ÅÆÊ¶ÇøÓò×ø±ê
    BYTE    *pBuffer;    //Êý¾ÝÖ¸Õë
    DWORD   dwUTCTime;//UTCÊ±¼ä¶¨Òå
    BYTE    byCompatibleAblity; //¼æÈÝÄÜÁ¦×Ö¶Î 0±íÊ¾ÎÞÐ§£¬1±íÊ¾ÓÐÐ§; bit0-±íÊ¾dwUTCTime×Ö¶ÎÓÐÐ§
    BYTE    byRes2[7];           //±£Áô
}NET_ITS_PICTURE_INFO, *LPNET_ITS_PICTURE_INFO;


typedef struct tagNET_ITS_ILLEGAL_INFO
{
    BYTE  byIllegalInfo[MAX_ILLEGAL_LEN/*64*/];// Î¥ÕÂÀàÐÍÐÅÏ¢£¨×Ö·û¸ñÊ½£©
    BYTE  byRes[256];
}NET_ITS_ILLEGAL_INFO,*LPNET_ITS_ILLEGAL_INFO;


// ¼ì²â½á¹û
typedef struct tagNET_ITS_PLATE_RESULT
{
    DWORD   dwSize;        //½á¹¹³¤¶È
    DWORD   dwMatchNo;        //Æ¥ÅäÐòºÅ,ÓÉ(³µÁ¾ÐòºÅ,Êý¾ÝÀàÐÍ,³µµÀºÅ)×é³ÉÆ¥ÅäÂë
    BYTE    byGroupNum;    //Í¼Æ¬×éÊýÁ¿£¨Ò»Á¾¹ý³µÏà»ú¶à´Î×¥ÅÄµÄÊýÁ¿£¬´ú±íÒ»×éÍ¼Æ¬µÄ×ÜÊý£¬ÓÃÓÚÑÓÊ±Æ¥ÅäÊý¾Ý£©
    BYTE    byPicNo;        //Á¬ÅÄµÄÍ¼Æ¬ÐòºÅ£¨½ÓÊÕµ½Í¼Æ¬×éÊýÁ¿ºó£¬±íÊ¾½ÓÊÕÍê³É;½ÓÊÕ³¬Ê±²»×ãÍ¼Æ¬×éÊýÁ¿Ê±£¬¸ù¾ÝÐèÒª±£Áô»òÉ¾³ý£©
    BYTE    bySecondCam;    //ÊÇ·ñµÚ¶þÏà»ú×¥ÅÄ£¨ÈçÔ¶½ü¾°×¥ÅÄµÄÔ¶¾°Ïà»ú£¬»òÇ°ºó×¥ÅÄµÄºóÏà»ú£¬ÌØÊâÏîÄ¿ÖÐ»áÓÃµ½£©
    BYTE    byFeaturePicNo; //´³ºìµÆµç¾¯£¬È¡µÚ¼¸ÕÅÍ¼×÷ÎªÌØÐ´Í¼,0xff-±íÊ¾²»È¡
    BYTE    byDriveChan;        //´¥·¢³µµÀºÅ
    BYTE    byVehicleType;     //³µÁ¾ÀàÐÍ£¬²Î¿¼VTR_RESULT
    BYTE    byDetSceneID;//¼ì²â³¡¾°ºÅ[1,4], IPCÄ¬ÈÏÊÇ0
    BYTE    byVehicleAttribute;//³µÁ¾ÊôÐÔ£¬°´Î»±íÊ¾£¬0- ÎÞ¸½¼ÓÊôÐÔ(ÆÕÍ¨³µ)£¬bit1- »Æ±ê³µ(ÀàËÆÄê¼ìµÄ±êÖ¾)£¬bit2- Î£ÏÕÆ·³µÁ¾£¬Öµ£º0- ·ñ£¬1- ÊÇ
    WORD    wIllegalType;       //Î¥ÕÂÀàÐÍ²ÉÓÃ¹ú±ê¶¨Òå
    BYTE    byIllegalSubType[8];   //Î¥ÕÂ×ÓÀàÐÍ
    BYTE    byPostPicNo;    //Î¥ÕÂÊ±È¡µÚ¼¸ÕÅÍ¼Æ¬×÷Îª¿¨¿ÚÍ¼,0xff-±íÊ¾²»È¡
    //Í¨µÀºÅ(ÓÐÐ§£¬±¨¾¯Í¨µÀºÅºÍËùÔÚÉè±¸ÉÏ´«±¨¾¯Í¨µÀºÅÒ»ÖÂ£¬ÔÚºó¶ËºÍËù½ÓÈëµÄ Í¨µÀºÅÒ»ÖÂ)
    BYTE    byChanIndex;        
    WORD    wSpeedLimit;        //ÏÞËÙÉÏÏÞ£¨³¬ËÙÊ±ÓÐÐ§£©
    BYTE    byRes2[2];
    NET_DVR_PLATE_INFO  struPlateInfo;     //³µÅÆÐÅÏ¢½á¹¹
    NET_DVR_VEHICLE_INFO struVehicleInfo;    //³µÁ¾ÐÅÏ¢
    BYTE    byMonitoringSiteID[48];        //¼à²âµã±àºÅ
    BYTE    byDeviceID[48];                //Éè±¸±àºÅ
    BYTE    byDir;            //¼à²â·½Ïò£¬1-ÉÏÐÐ£¨·´Ïò£©£¬2-ÏÂÐÐ(ÕýÏò)£¬3-Ë«Ïò£¬4-ÓÉ¶«ÏòÎ÷£¬5-ÓÉÄÏÏò±±,6-ÓÉÎ÷Ïò¶«£¬7-ÓÉ±±ÏòÄÏ£¬8-ÆäËü
    BYTE    byDetectType;    //¼ì²â·½Ê½,1-µØ¸Ð´¥·¢£¬2-ÊÓÆµ´¥·¢£¬3-¶àÖ¡Ê¶±ð£¬4-À×´ï´¥·¢
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE    byRelaLaneDirectionType;
    BYTE    byCarDirectionType; //³µÁ¾¾ßÌåÐÐÊ»µÄ·½Ïò£¬0±íÊ¾´ÓÉÏÍùÏÂ£¬1±íÊ¾´ÓÏÂÍùÉÏ£¨¸ù¾ÝÊµ¼Ê³µÁ¾µÄÐÐÊ»·½ÏòÀ´µÄÇø·Ö£©
    //µ±wIllegalType²ÎÊýÎª¿ÕÊ±£¬Ê¹ÓÃ¸Ã²ÎÊý¡£ÈôwIllegalType²ÎÊýÎªÓÐÖµÊ±£¬ÒÔwIllegalType²ÎÊýÎª×¼£¬¸Ã²ÎÊýÎÞÐ§¡£
    DWORD   dwCustomIllegalType; //Î¥ÕÂÀàÐÍ¶¨Òå(ÓÃ»§×Ô¶¨Òå)
    /*Îª0~Êý×Ö¸ñÊ½Ê±£¬ÎªÀÏµÄÎ¥ÕÂÀàÐÍ£¬wIllegalType¡¢dwCustomIllegalType²ÎÊýÉúÐ§£¬¸³Öµ¹ú±êÎ¥·¨´úÂë¡£
      Îª1~×Ö·û¸ñÊ½Ê±£¬pIllegalInfoBuf²ÎÊýÉúÐ§¡£ÀÏµÄÎ¥ÕÂÀàÐÍ£¬wIllegalType¡¢dwCustomIllegalType²ÎÊýÒÀÈ»¸³Öµ¹ú±êÎ¥·¨´úÂë*/
    BYTE*   pIllegalInfoBuf;    //Î¥·¨´úÂë×Ö·ûÐÅÏ¢½á¹¹ÌåÖ¸Õë£»Ö¸ÏòNET_ITS_ILLEGAL_INFO 
	BYTE    byIllegalFromatType; //Î¥ÕÂÐÅÏ¢¸ñÊ½ÀàÐÍ£» 0~Êý×Ö¸ñÊ½£¬ 1~×Ö·û¸ñÊ½
	BYTE    byRes4; //±£Áô
    BYTE    byDataAnalysis;            //0-Êý¾ÝÎ´·ÖÎö, 1-Êý¾ÝÒÑ·ÖÎö
    BYTE    byYellowLabelCar;        //0-±íÊ¾Î´Öª, 1-·Ç»Æ±ê³µ,2-»Æ±ê³µ
    BYTE    byDangerousVehicles;    //0-±íÊ¾Î´Öª, 1-·ÇÎ£ÏÕÆ·³µ,2-Î£ÏÕÆ·³µ
    BYTE    byPilotSafebelt;//0-±íÊ¾Î´Öª,1-Ïµ°²È«´ø,2-²»Ïµ°²È«´ø
    BYTE    byCopilotSafebelt;//0-±íÊ¾Î´Öª,1-Ïµ°²È«´ø,2-²»Ïµ°²È«´ø
    BYTE    byPilotSunVisor;//0-±íÊ¾Î´Öª,1-²»´ò¿ªÕÚÑô°å,2-´ò¿ªÕÚÑô°å
    BYTE    byCopilotSunVisor;//0-±íÊ¾Î´Öª, 1-²»´ò¿ªÕÚÑô°å,2-´ò¿ªÕÚÑô°å
    BYTE    byPilotCall;// 0-±íÊ¾Î´Öª, 1-²»´òµç»°,2-´òµç»°
    //0-¿ªÕ¢£¬1-Î´¿ªÕ¢ (×¨ÓÃÓÚÀúÊ·Êý¾ÝÖÐÏà»ú¸ù¾ÝºÚ°×Ãûµ¥Æ¥Åäºó£¬ÊÇ·ñ¿ªÕ¢³É¹¦µÄ±êÖ¾)
    BYTE    byBarrierGateCtrlType; 
    BYTE    byAlarmDataType;//0-ÊµÊ±Êý¾Ý£¬1-ÀúÊ·Êý¾Ý
    NET_DVR_TIME_V30  struSnapFirstPicTime;//¶ËµãÊ±¼ä(ms)£¨×¥ÅÄµÚÒ»ÕÅÍ¼Æ¬µÄÊ±¼ä£©
    DWORD   dwIllegalTime;//Î¥·¨³ÖÐøÊ±¼ä£¨ms£© = ×¥ÅÄ×îºóÒ»ÕÅÍ¼Æ¬µÄÊ±¼ä - ×¥ÅÄµÚÒ»ÕÅÍ¼Æ¬µÄÊ±¼ä
    DWORD   dwPicNum;        //Í¼Æ¬ÊýÁ¿£¨ÓëpicGroupNum²»Í¬£¬´ú±í±¾ÌõÐÅÏ¢¸½´øµÄÍ¼Æ¬ÊýÁ¿£¬Í¼Æ¬ÐÅÏ¢ÓÉstruVehicleInfoEx¶¨Òå    
    NET_ITS_PICTURE_INFO struPicInfo[6];         //Í¼Æ¬ÐÅÏ¢,µ¥ÕÅ»Øµ÷£¬×î¶à6ÕÅÍ¼£¬ÓÉÐòºÅÇø·Ö
}NET_ITS_PLATE_RESULT, *LPNET_ITS_PLATE_RESULT;

//³öÈë¿Ú³µÁ¾×¥ÅÄÊý¾ÝÉÏ´«
typedef struct tagNET_ITS_GATE_VEHICLE
{
    DWORD   dwSize;        //½á¹¹³¤¶È
    DWORD   dwMatchNo;        //Æ¥ÅäÐòºÅ,ÓÉ(³µÁ¾ÐòºÅ,Êý¾ÝÀàÐÍ,³µµÀºÅ)×é³ÉÆ¥ÅäÂë Ä¬ÈÏ0
    BYTE    byGroupNum;    //Í¼Æ¬×éÊýÁ¿£¨Ò»Á¾¹ý³µÏà»ú¶à´Î×¥ÅÄµÄÊýÁ¿£¬´ú±íÒ»×éÍ¼Æ¬µÄ×ÜÊý£¬ÓÃÓÚÑÓÊ±Æ¥ÅäÊý¾Ý£©Ä¬ÈÏ 1 ×¥ÅÄÀàÐÍÏÂÍ¼Æ¬Êý¾Ý ¿ØÖÆºóÐø½ÓÊÕÑÓÊ±²Ù×÷
    BYTE    byPicNo;        //Á¬ÅÄµÄÍ¼Æ¬×éÉÏ´«Í¼Æ¬ÐòºÅ£¨½ÓÊÕµ½Í¼Æ¬×éÊýÁ¿ºó£¬±íÊ¾½ÓÊÕÍê³É¡£
    //½ÓÊÕ³¬Ê±²»×ãÍ¼Æ¬×éÊýÁ¿Ê±£¬¸ù¾ÝÐèÒª±£Áô»òÉ¾³ý£©
    BYTE    bySecondCam;    //ÊÇ·ñµÚ¶þÏà»ú×¥ÅÄ£¨ÈçÔ¶½ü¾°×¥ÅÄµÄÔ¶¾°Ïà»ú£¬»òÇ°ºó×¥ÅÄµÄºóÏà»ú£¬ÌØÊâÏîÄ¿ÖÐ»áÓÃµ½£©±êÊ¾Ç°ºóÏà»ú×¥ÅÄÍ¼Æ¬
    BYTE    byRes; //±ê¼ÇÎªÔ¤Áô
    WORD    wLaneid;            //³µµÀºÅ1¡«32£¨Ë÷Òý³µµÀºÅ£¬¿ÉÒÔÌøÔ¾£©
    BYTE    byCamLaneId;    //¶ÔÓ¦Ïà»ú³µµÀºÅ1¡«16£¨Ïà»úÅäÖÃµÄ³µµÀºÅ£¬¿ÉÒÔÌøÔ¾£¬¿ÉÒÔÏàÍ¬£©
    BYTE    byRes1;            //±£Áô
    BYTE    byAlarmReason[MAX_ALARMREASON_LEN]; //×Ô¶¨Òå±¨¾¯ÀàÐÍ Ä¬ÈÏÎªÖÐÎÄ
    WORD    wBackList;    //±ê¼ÇÎªÊÇ·ñ±¨¾¯Êý¾Ý 0 ±íÊ¾ÎªÕý³£¹ý³µÊý¾Ý 1 ±íÊ¾ºÚÃûµ¥
    WORD    wSpeedLimit;        //ÏÞËÙÉÏÏÞ£¨³¬ËÙÊ±ÓÐÐ§£©km/h
    DWORD   dwChanIndex;        //Í¨µÀºÅ
    NET_DVR_PLATE_INFO    struPlateInfo;     //³µÅÆÐÅÏ¢½á¹¹
    NET_DVR_VEHICLE_INFO  struVehicleInfo;    //³µÁ¾ÐÅÏ¢  º¬ËÙ¶È
    BYTE    byMonitoringSiteID[MAX_ID_LEN];        //¼à²âµã±àºÅ
    BYTE    byDeviceID[MAX_ID_LEN];                //Éè±¸±àºÅ 
    BYTE    byDir;            //¼à²â·½Ïò£¬0-ÆäËü 1 Èë³¡£¬2 ³ö³¡
    BYTE    byDetectType;    //¼ì²â·½Ê½, 0-ÆäËû 1-µØ¸Ð´¥·¢£¬2-ÊÓÆµ´¥·¢£¬3-¶àÖ¡Ê¶±ð£¬4-À×´ï´¥·¢
    BYTE    byRes2[2];
    BYTE    byCardNo[MAX_ID_LEN]; // ¿¨ºÅ
    DWORD   dwPicNum;        //Í¼Æ¬ÊýÁ¿£¨ÓëpicGroupNum²»Í¬£¬´ú±í±¾ÌõÐÅÏ¢¸½´øµÄÍ¼Æ¬ÊýÁ¿£¬Í¼Æ¬ÐÅÏ¢ÓÉstruVehicleInfoEx¶¨Òå    
    NET_ITS_PICTURE_INFO struPicInfo[4];         //Í¼Æ¬ÐÅÏ¢,µ¥ÕÅ»Øµ÷£¬×î¶à4ÕÅÍ¼£¬ÓÉÐòºÅÇø·Ö
    //2013-11-19 ³öÈë¿Ú³µÁ¾×¥ÅÄÊý¾ÝÉÏ´«£¨¼àÌý·½Ê½£©ÐÂÔö²ÎÊý
    BYTE    bySwipeTime[MAX_TIME_LEN];//Ôö¼ÓË¢¿¨Ê±¼ä  Ê±¼ä¸ñÊ½Îªyyyymmddhh24missfff
    BYTE    byRes3[224];
}NET_ITS_GATE_VEHICLE, *LPNET_ITS_GATE_VEHICLE;

//³öÈë¿ÚÈËÁ³Ê¶±ð
typedef  struct  tagNET_ITS_GATE_FACE
{
    DWORD   dwSize;            //½á¹¹Ìå³¤¶È
    BYTE    byGroupNum;    //Í¼Æ¬×éÊýÁ¿£¨Ò»¸öÐÐÈËÏà»ú¶à´Î×¥ÅÄµÄÊýÁ¿£¬´ú±íÒ»×éÍ¼Æ¬µÄ×ÜÊý£¬ÓÃÓÚÑÓÊ±Æ¥ÅäÊý¾Ý£©
    BYTE    byPicNo;        //Á¬ÅÄµÄÍ¼Æ¬ÐòºÅ£¨½ÓÊÕµ½Í¼Æ¬×éÊýÁ¿ºó£¬±íÊ¾½ÓÊÕÍê³É¡£
    //½ÓÊÕ³¬Ê±²»×ãÍ¼Æ¬×éÊýÁ¿Ê±£¬¸ù¾ÝÐèÒª±£Áô»òÉ¾³ý£©
    BYTE    byFeaturePicNo; //Á¬×¥Ê±È¡µÚ¼¸ÕÅÍ¼×÷ÎªÌØÐ´Í¼,0xff-±íÊ¾²»È¡
    BYTE    byRes;   //±£Áô
    WORD    wLaneid;            //³µµÀºÅ1¡«32£¨Ë÷Òý³µµÀºÅ£¬¿ÉÒÔÌøÔ¾£©
    BYTE    byCamLaneId;    //¶ÔÓ¦Ïà»ú³µµÀºÅ1¡«16£¨Ïà»úÅäÖÃµÄ³µµÀºÅ£¬¿ÉÒÔÌøÔ¾£¬¿ÉÒÔÏàÍ¬£©
    BYTE    byDir;        //¼à²â·½Ïò£¬0-ÆäËû 1 Èë³¡£¬ 2 ³ö³¡
    DWORD   dwChanIndex;        //Í¨µÀºÅ 
    BYTE    byMonitoringSiteID[MAX_ID_LEN];        //¼à²âµã±àºÅ
    BYTE    byDeviceID[MAX_ID_LEN];                //Éè±¸±àºÅ
    NET_VCA_FACESNAP_RESULT     struFaceInfo;   //ÈËÁ³×¥ÅÄÊý¾Ý    
    BYTE    byRes2[256];   //Ô¤Áô
}NET_ITS_GATE_FACE, *LPNET_ITS_GATE_FACE;

//Í£³µ³¡Êý¾ÝÉÏ´«
typedef struct _tagNET_ITS_PARK_VEHICLE_
{
    DWORD   dwSize; //½á¹¹³¤¶È
    BYTE    byGroupNum; //Í¼Æ¬×éÊýÁ¿£¨µ¥´ÎÂÖÑ¯×¥ÅÄµÄÍ¼Æ¬ÊýÁ¿£©
    BYTE    byPicNo; //Á¬ÅÄµÄÍ¼Æ¬×éÉÏ´«Í¼Æ¬ÐòºÅ£¨½ÓÊÕµ½Í¼Æ¬×éÊýÁ¿ºó£¬±íÊ¾½ÓÊÕÍê³É
    //½ÓÊÕ³¬Ê±²»×ãÍ¼Æ¬×éÊýÁ¿Ê±£¬¸ù¾ÝÐèÒª±£Áô»òÉ¾³ý£©
    BYTE    byLocationNum; //µ¥ÕÅÍ¼Æ¬Ëù¹ÜÀíµÄ³µÎ»Êý
    BYTE    byParkError; //Í£³µÒì³££¬0-Õý³£ 1 Òì³£
    BYTE    byParkingNo[MAX_PARKNO_LEN];//³µÎ»±àºÅ
    BYTE    byLocationStatus; //³µÎ»³µÁ¾×´Ì¬£¬0-ÎÞ³µ£¬1ÓÐ³µ
    BYTE    bylogicalLaneNum;//Âß¼­³µÎ»ºÅ£¬0-3£¬Ò»¸öÏà»ú×î´óÄÜ¹Ü4¸ö³µÎ» £¨0´ú±í×î×ó±ß£¬3´ú±í×îÓÒ±ß£©
    WORD    wUpLoadType;//µÚÁãÎ»±íÊ¾£º0~ÂÖÑµÉÏ´«¡¢1~±ä»¯ÉÏ´«
    BYTE    byRes1[4]; //±£Áô×Ö½Ú
    DWORD   dwChanIndex; //Í¨µÀºÅÊý×ÖÍ¨µÀ
    NET_DVR_PLATE_INFO   struPlateInfo;  //³µÅÆÐÅÏ¢½á¹¹
    NET_DVR_VEHICLE_INFO struVehicleInfo; //³µÁ¾ÐÅÏ¢
    BYTE    byMonitoringSiteID[MAX_ID_LEN]; //¼à²âµã±àºÅ
    BYTE    byDeviceID[MAX_ID_LEN]; //Éè±¸±àºÅ 
    DWORD   dwPicNum; //Í¼Æ¬ÊýÁ¿£¨ÓëpicGroupNum²»Í¬£¬´ú±í±¾ÌõÐÅÏ¢¸½´øµÄÍ¼Æ¬ÊýÁ¿
    //£¬Í¼Æ¬ÐÅÏ¢ÓÉstruVehicleInfoEx¶¨Òå 
    NET_ITS_PICTURE_INFO struPicInfo[2];  //Í¼Æ¬ÐÅÏ¢,µ¥ÕÅ»Øµ÷£¬×î¶à2ÕÅÍ¼£¬ÓÉÐòºÅÇø·Ö
    BYTE   byRes2[256];
}NET_ITS_PARK_VEHICLE, *LPNET_ITS_PARK_VEHICLE;

//½»Í¨È¡Ö¤±¨¾¯
typedef struct tagNET_DVR_TFS_ALARM
{
    DWORD                   dwSize;                //½á¹¹Ìå´óÐ¡
    DWORD                   dwRelativeTime;        //Ïà¶ÔÊ±±ê
    DWORD                   dwAbsTime;               //¾ø¶ÔÊ±±ê
    DWORD                   dwIllegalType;         //Î¥ÕÂÀàÐÍ£¬²ÉÓÃ¹ú±ê¶¨Òå
    DWORD                   dwIllegalDuration;     //Î¥·¨³ÖÐøÊ±¼ä£¨µ¥Î»£ºÃë£© = ×¥ÅÄ×îºóÒ»ÕÅÍ¼Æ¬µÄÊ±¼ä - ×¥ÅÄµÚÒ»ÕÅÍ¼Æ¬µÄÊ±¼ä
    BYTE                    byMonitoringSiteID[MONITORSITE_ID_LEN];//¼à²âµã±àºÅ£¨Â·¿Ú±àºÅ¡¢ÄÚ²¿±àºÅ£©
    BYTE                    byDeviceID[DEVICE_ID_LEN];             //Éè±¸±àºÅ
    NET_VCA_DEV_INFO        struDevInfo;           //Ç°¶ËÉè±¸ÐÅÏ¢
    NET_DVR_SCENE_INFO      struSceneInfo;         //³¡¾°ÐÅÏ¢
    NET_DVR_TIME_EX         struBeginRecTime;      //Â¼Ïñ¿ªÊ¼Ê±¼ä 
    NET_DVR_TIME_EX         struEndRecTime;        //Â¼Ïñ½áÊøÊ±¼ä 
    NET_DVR_AID_INFO        struAIDInfo;           //½»Í¨ÊÂ¼þÐÅÏ¢
    NET_DVR_PLATE_INFO      struPlateInfo;         //³µÅÆÐÅÏ¢
    NET_DVR_VEHICLE_INFO    struVehicleInfo;       //³µÁ¾ÐÅÏ¢
    DWORD                   dwPicNum;              //Í¼Æ¬ÊýÁ¿
    NET_ITS_PICTURE_INFO    struPicInfo[8];        //Í¼Æ¬ÐÅÏ¢£¬×î¶à8ÕÅ 
    BYTE                    bySpecificVehicleType;     //¾ßÌå³µÁ¾ÖÖÀà  ²Î¿¼Ê¶±ð½á¹ûÀàÐÍVTR_RESULT
    BYTE                    byLaneNo;  //¹ØÁª³µµÀºÅ
    BYTE                    byRes1[2]; //±£Áô
    NET_DVR_TIME_V30        struTime;//ÊÖ¶¯¸ú×Ù¶¨Î»£¬µ±Ç°Ê±¼ä¡£
    DWORD                   dwSerialNo;//ÐòºÅ£»
    BYTE                    byVehicleAttribute;//³µÁ¾ÊôÐÔ£¬°´Î»±íÊ¾£¬0- ÎÞ¸½¼ÓÊôÐÔ(ÆÕÍ¨³µ)£¬bit1- »Æ±ê³µ(ÀàËÆÄê¼ìµÄ±êÖ¾)£¬bit2- Î£ÏÕÆ·³µÁ¾£¬Öµ£º0- ·ñ£¬1- ÊÇ
    BYTE                    byPilotSafebelt;//0-±íÊ¾Î´Öª,1-Ïµ°²È«´ø,2-²»Ïµ°²È«´ø
    BYTE                    byCopilotSafebelt;//0-±íÊ¾Î´Öª,1-Ïµ°²È«´ø,2-²»Ïµ°²È«´ø
    BYTE                    byPilotSunVisor;//0-±íÊ¾Î´Öª,1-²»´ò¿ªÕÚÑô°å,2-´ò¿ªÕÚÑô°å
    BYTE                    byCopilotSunVisor;//0-±íÊ¾Î´Öª, 1-²»´ò¿ªÕÚÑô°å,2-´ò¿ªÕÚÑô°å
    BYTE                    byPilotCall;// 0-±íÊ¾Î´Öª, 1-²»´òµç»°,2-´òµç»°
    BYTE                    byRes[102]; //±£Áô
}NET_DVR_TFS_ALARM,*LPNET_DVR_TFS_ALARM;

typedef struct _tagNET_ITS_ECT_BLACKLIST_
{
    DWORD dwSize;
    DWORD dwChannel; //Í¨µÀºÅ
    BYTE  bylogicalLaneNo;//Âß¼­³µµÀºÅ
    BYTE  byRes1[3];
    BYTE  byLaneName[NAME_LEN];//³µµÀÃû³Æ 32
    NET_DVR_PLATE_INFO  struPlateInfo;  //³µÅÆÐÅÏ¢½á¹¹  
    BYTE  byRes2[256];       // ±£Áô×Ö½Ú    
}NET_ITS_ECT_BLACKLIST, *LPNET_ITS_ECT_BLACKLIST;

//IPCÍ¨µÀ²ÎÊýÅäÖÃ
typedef    struct     tagNET_ITS_IPC_CHAN_CFG
{
    DWORD        dwSize; 
    BYTE        byCameraType;        //Ïà»úÖÖÀà£¬0-¼à¿ØÓÃÏà»ú£»1-ÏßÈ¦´¥·¢Ïà»ú£»2-ÊÓÆµ·ÖÎöÓÃÏà»ú,3-Ò»Ìå»ú
    BYTE        byRes1[3];           //±£Áô
    BYTE        byMonitoringSiteID[48];        //¼à²âµã±àºÅ
    BYTE        byDeviceID[48];                //Éè±¸±àºÅ
    BYTE        byDirectionNo;         //¼à²â·½Ïò±àºÅ,0-ÎÞ,1-ÉÏÐÐ,2-ÏÂÐÐ,3-Ë«Ïò,4-ÓÉ¶«ÏòÎ÷,5-ÓÉÄÏÏò±±,6-ÓÉÎ÷Ïò¶«,7-ÓÉ±±ÏòÄÏ,8-ÆäËû
    BYTE        byMonitorInfo[48];      //¼à²âµãÐÅÏ¢ÃèÊö
    BYTE        byRes2[15];        //±£Áô
}NET_ITS_IPC_CHAN_CFG, *LPNET_ITS_IPC_CHAN_CFG;

//µ¥¸öÉè±¸ÐÅÏ¢
typedef struct tagNET_ITS_SINGLE_DEVICE_INFO
{
    DWORD  dwDeviceType;  //Éè±¸ÀàÐÍ£º0-ÖÕ¶Ë£¬1-Ïà»ú£¬2-²¹¹âµÆ£¬3-³µ¼ìÆ÷£¬4-ÏßÈ¦1£¬5-ÏßÈ¦2£¬6-ÏßÈ¦3£¬7-ºìÂÌµÆ¼ì²âÆ÷£¬8-»ú¹ñ£¬
    //9-À×´ï£¬10-µÀÕ¢£¬11-³öÈë¿Ú¿ØÖÆ»ú(Æ±Ïä)£¬12-LEDÏÔÊ¾ÆÁ£¬13-Ô¶¾àÀë¶Á¿¨Æ÷£¬14-½ü¾àÀë¶Á¿¨Æ÷£¬15-ºìÍâÉ¨ÃèÇ¹£¬
    //16-Æ±¾Ý´òÓ¡»ú£¬17-½Úµã¹ÜÀíÆ÷(ÓÕµ¼·þÎñÆ÷Ïà¹Ø) , 18-»ú¹ñ¼ì²âÒÇ
    DWORD  dwDirID;               //·½Ïò±àºÅ
    DWORD  dwLaneID;             //³µµÀ±àºÅ
    DWORD  dwDeviceState;         //Éè±¸×´Ì¬  0Õý³£ ·Ç0 Òì³££¨²Î¿¼Éè±¸Òì³£´úÂë±í£©
    BYTE   byDeviceName[32];     //Éè±¸Ãû³Æ
    BYTE   byDeviceID[48];           //Éè±¸±àºÅ£¬Ò»°ãÓÃÐòÁÐºÅ£¬³µ¼ìÆ÷ÓÃµØÖ·
    NET_DVR_TIME_V30  struTriggerTime;//´¥·¢Ê±¼ä
    BYTE   byRelateChan; //¹ØÁªÍ¨µÀºÅ£¨´«¸ÐÆ÷ÊÇ1~8  AC¶Ë×Ó1~4  AC²å×ù1~2£©
    BYTE   byRes[3];
}NET_ITS_SINGLE_DEVICE_INFO,*LPNET_ITS_SINGLE_DEVICE_INFO;

//Â·¿ÚÐÅÏ¢
typedef struct tagNET_ITS_ROADINFO
{    
    DWORD     dwSize;
    DWORD     dwChannel;          //Í¨µÀºÅ,0xffffffff±íÊ¾ÖÕ¶Ë£¬ÆäËü±íÊ¾¶ÔÓ¦µÄÏà»ú
    BYTE     byTriggerMode;    //  0:ÏßÈ¦´¥·¢;  1:ÊÓÆµ´¥·¢
    BYTE     byRes1[3];
    DWORD    dwDeviceNum;       //Êµ¼ÊÉè±¸¸öÊý 
    BYTE     byMonitoringSiteID[48];    //¼à²âµã±àºÅ
    BYTE       byRoadInfo[48];       //¼à²âµãÐÅÏ¢
    NET_ITS_SINGLE_DEVICE_INFO        struSingleDevice[ITS_MAX_DEVICE_NUM];
    BYTE     byRes[16];
}NET_ITS_ROADINFO,*LPNET_ITS_ROADINFO;

//µ¥¸ö³µµÀÂ·¿öÐÅÏ¢
typedef struct tagNET_ITS_TRAFFIC_DRIVE_CHAN
{
    BYTE   byDriveChan;        //³µµÀºÅ
    BYTE   byRes1[3];            // Ô¤Áô
    WORD   wCarFlux;            //Æû³µÁ÷Á¿Êý
    WORD   wPasserbyFlux;        //ÐÐÈËÁ÷Á¿Êý
    WORD   wShayFlux;        //¶þÂÖ³µÁ÷Á¿Êý
    float  fAverOccpancy;       //Æ½¾ù³µµÀÕ¼ÓÐÂÊ°Ù·Ö±È
    WORD   wAverSpeed;         //Æ½¾ù³µËÙ(km/h)
    WORD   wAverCarDis;        //Æ½¾ù³µ¾à(µ¥Î»´ý¶¨)
    BYTE   byRes2[16];            // Ô¤Áô
}NET_ITS_TRAFFIC_DRIVE_CHAN,*LPNET_ITS_TRAFFIC_DRIVE_CHAN;

typedef struct tagNET_ITS_TRAFFIC_COLLECT
{
    DWORD  dwSize;        //½á¹¹´óÐ¡
    BYTE   byMonitoringSiteID[48];        //¼à²âµã±àºÅ
    BYTE   byDeviceID[48];                //Éè±¸±àºÅ
    BYTE   byLaneNum;    //³µµÀ×ÜÊý
    BYTE   byDir;        //¼à²â·½Ïò
    BYTE   byDetectType;    //¼ì²â·½Ê½1-µØ¸ÐÏßÈ¦¡¢2-ÊÓÆµ´¥·¢¡¢3¡¢¶àÖ¡Ê¶±ð¡¢4À×´ï´¥·¢
    BYTE   byRes1;           //Ô¤Áô     
    DWORD  dwChannel; //Í¨µÀºÅ
    NET_DVR_SYSTEM_TIME     struStartTime;        //Í³¼Æ¿ªÊ¼Ê±¼ä
    DWORD  dwSamplePeriod;    //Í³¼ÆÊ±¼ä,µ¥Î»Ãë
    NET_ITS_TRAFFIC_DRIVE_CHAN    struDriveChan[6];         //½»Í¨Á÷Á¿Êý¾Ý,Ã¿¸öÏà»úÖ§³Ö6¸ö³µµÀ
    BYTE   byRes2[24];     //Ô¤Áô
}NET_ITS_TRAFFIC_COLLECT,*LPNET_ITS_TRAFFIC_COLLECT;

typedef struct tagNET_ITS_OVERLAPCFG_COND
{
    DWORD dwSize;
    DWORD dwChannel;
    DWORD dwConfigMode; //ÅäÖÃÄ£Ê½£¬0-ÖÕ¶Ë£¬1-Ç°¶Ë(Ö±Á¬Ç°¶Ë»òÖÕ¶Ë½ÓÇ°¶Ë)
    BYTE  byPicModeType;//0-±íÊ¾Ð¡Í¼(¶ÀÁ¢Í¼)£¬1-±íÊ¾´óÍ¼(ºÏ³ÉÍ¼)
                        /*
                        0±íÊ¾¹ØÁª ×¥ÅÄMPRÄ£Ê½£¨¶àÖ¡´¥·¢×¥ÅÄ IPCÊ¹ÓÃ£©
                        1 ±íÊ¾¹ØÁª ×¥ÅÄ HVT Ä£Ê½£¨»ì¿¨IPCÊ¹ÓÃ£©
    */
    BYTE  byRelateType; 
    BYTE  byRes[14];
}NET_ITS_OVERLAPCFG_COND, *LPNET_ITS_OVERLAPCFG_COND;

typedef enum ITS_OVERLAP_ITEM_TYPE
{
    OVERLAP_ITEM_NULL = 0,          //0-Î´Öª
        OVERLAP_ITEM_SITE,                //1-µØµã
        OVERLAP_ITEM_ROADNUM,             //2-Â·¿Ú±àºÅ
        OVERLAP_ITEM_INSTRUMENTNUM,       //3-Éè±¸±àºÅ
        OVERLAP_ITEM_DIRECTION,           //4-·½Ïò±àºÅ
        OVERLAP_ITEM_DIRECTIONDESC,       //5-·½Ïò
        OVERLAP_ITEM_LANENUM,             //6-³µµÀºÅ
        OVERLAP_ITEM_LANEDES,             //7-³µµÀ
        OVERLAP_ITEM_CAPTIME,             //8-×¥ÅÄÊ±¼ä(²»´øºÁÃë)
        OVERLAP_ITEM_CAPTIME_MILLSECOND,  //9-×¥ÅÄÊ±¼ä(´øºÁÃë)
        OVERLAP_ITEM_PLATENUM,            //10-³µÅÆºÅ
        OVERLAP_ITEM_CARCOLOR,            //11-³µÉíÑÕÉ«
        OVERLAP_ITEM_CARTYPE,             //12-³µÁ¾ÀàÐÍ
        OVERLAP_ITEM_CARBRAND,            //13-³µÁ¾Æ·ÅÆ
        OVERLAP_ITEM_CARSPEED,            //14-³µÁ¾ËÙ¶È
        OVERLAP_ITEM_SPEEDLIMIT,          //15-ÏÞËÙ±êÖ¾
        OVERLAP_ITEM_CARLENGTH,           //16-³µÁ¾³¤¶È1~99m
        OVERLAP_ITEM_ILLEGALNUM,          //17-Î¥·¨´úÂë(Î¥·¨´úÂëµþ¼ÓÓ¦¸ÃÃ»ÓÃµÄ£¬Ó¦¸ÃÖ±½Óµþ¼ÓÎ¥·¨ÐÅÏ¢£¬±ÈÈçÕý³£¡¢µÍËÙ¡¢³¬ËÙ¡¢ÄæÐÐ¡¢´³ºìµÆ¡¢Õ¼µÀ¡¢Ñ¹»ÆÏßµÈ)
        OVERLAP_ITEM_MONITOR_INFO,      //18-¼à²âµãÐÅÏ¢
        OVERLAP_ITEM_ILLEGALDES,          //19-Î¥·¨ÐÐÎª
        OVERLAP_ITEM_OVERSPEED_PERCENT,    //20-³¬ËÙ±È
        OVERLAP_ITEM_RED_STARTTIME,           //21-ºìµÆ¿ªÊ¼Ê±¼ä
        OVERLAP_ITEM_RED_STOPTIME,        //22-ºìµÆ½áÊøÊ±¼ä
        OVERLAP_ITEM_RED_DURATION,        //23-ºìµÆÒÑÁÁÊ±¼ä
        OVERLAP_ITEM_SECUNITY_CODE,        //24-·ÀÎ±Âë
        OVERLAP_ITEM_CAP_CODE,        //25-×¥ÅÄ±àºÅ
        OVERLAP_ITEM_SEATBELT,      //26-°²È«´ø  
        OVERLAP_ITEM_MONITOR_ID,    //27-¼à²âµã±àºÅ
        OVERLAP_ITEM_SUN_VISOR,     //28-ÕÚÑô°å 
        OVERLAP_ITEM_LANE_DIRECTION,  //29-³µµÀÐÐÊ»·½Ïò 
        OVERLAP_ITEM_LICENSE_PLATE_COLOR,  // 30-³µÅÆÑÕÉ«
        OVERLAP_ITEM_SCENE_NUMBER,  //31-³¡¾°±àºÅ
        OVERLAP_ITEM_SCENE_NAME,   //32-³¡¾°Ãû³Æ
        OVERLAP_ITEM_YELLOW_SIGN_CAR,  //33-»Æ±ê³µ
        OVERLAP_ITEM_DANGEROUS_CAR,    //34-Î£ÏÕÆ·³µ
        OVERLAP_ITEM_CAR_SUBBRAND  //35-³µÁ¾×ÓÆ·ÅÆ
}ITS_OVERLAP_ITEM_TYPE;

//×Ö·ûµþ¼ÓÃ¿Ò»ÌõÐÅÏ¢½á¹¹Ìå
typedef struct tagNET_ITS_OVERLAP_SINGLE_ITEM_PARAM
{
    BYTE byRes1[2];                   // ±£Áô
    BYTE byItemType;   //ÀàÐÍ£¬Ïê¼ûOVERLAP_ITEM_TYPE
    BYTE byChangeLineNum;           //µþ¼ÓÏîºóµÄ»»ÐÐÊý[0-10](Ä¬ÈÏ0)
    BYTE bySpaceNum;                   //µþ¼ÓÏîºóµÄ¿Õ¸ñÊý[0-255](Ä¬ÈÏ0)
    BYTE byRes2[2];
    BYTE byEnablePos;  //ÊÇ·ñÆôÓÃ×ø±êÏÔÊ¾
    WORD wStartPosTop;    //ÆðÊ¼ÉÏ×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0)
    WORD wStartPosLeft;    //ÆðÊ¼×ó×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0)
    BYTE byRes[8];
}NET_ITS_OVERLAP_SINGLE_ITEM_PARAM, *LPNET_ITS_OVERLAP_SINGLE_ITEM_PARAM;

typedef struct tagNET_ITS_OVERLAP_ITEM_PARAM
{
    NET_ITS_OVERLAP_SINGLE_ITEM_PARAM struSingleItem[MAX_OVERLAP_ITEM_NUM]; //µ¥Ìõ×Ö·û²ÎÊý
    DWORD dwLinePercent;  //µþ¼ÓÐÐ°Ù·Ö±È(0-100),(Ä¬ÈÏ100)
    DWORD dwItemsStlye;   //µþ¼Ó·½Ê½£º0-ºáÅÅ,1-ÊúÅÅ(Ä¬ÈÏºáÅÅ)
    WORD  wStartPosTop;    //ÆðÊ¼ÉÏ×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0)
    WORD  wStartPosLeft;    //ÆðÊ¼×ó×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0)
    WORD  wCharStyle;    //×ÖÌåÀàÐÍ,0-ËÎÌå1-ÎºÌå(Ä¬ÈÏ)
    WORD  wCharSize;    //×Ö·û´óÐ¡,0--16x16,1--32x32,2-48x48,3--64x64 (Ä¬ÈÏ),8x128(Ver3.7)
    WORD  wCharInterval;    //×Ö·û¼ä¾à£¬[0¡«16]£¬¿ÉÉèµ¥Î»£ºÏñËØ(Ä¬ÈÏ)
    BYTE  byRes1[2];
    DWORD dwForeClorRGB;      //Ç°¾°É«µÄRGBÖµbit0-1:(B) bit2-3:(G) bit4-5:(G) (Ä¬ÈÏx00FFFFFF-°×)
    DWORD dwBackClorRGB; //±³¾°É«µÄRGBÖµ,Ö»¶ÔÍ¼Æ¬Íâµþ¼ÓÓÐÐ§bit0-1:(B) bit2-3:(G) bit4-5:(G) (Ä¬ÈÏx00000000-ºÚ)
    BYTE  byColorAdapt;    //ÑÕÉ«ÊÇ·ñ×ÔÊÊÓ¦0-·ñ1-ÊÇ
    //(Ver3.7 ÐÂÔö)
    // ²ÎÊý²¹ÁãÊ¹ÄÜ 0-²¹Áã, 1-²»²¹Áã£¨ÏêÏ¸×¢ÊÍ£©ËÙ¶È,ÏÞËÙÖµ ²»×ã3Î»²¹0
    BYTE  byParamFillZeroEnble;
    BYTE  byPlateLeftCornerEnable;// ³µÅÆÐ¡Í¼µþ¼Ó×óÉÏ½ÇÊ¹ÄÜ 0-²»µþ¼Ó, 1-µþ¼Ó
    BYTE  byRes2;
    WORD  wStartSPicPosTop; //ÆðÊ¼ÉÏ×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0) 
    WORD  wStartSPicPosLeft; //ÆðÊ¼×ó×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0) 
    //OSDµþ¼ÓÎ»ÖÃ  0-Í¼Æ¬ÄÚ,1-Í¼Æ¬ÉÏ±ßÔµ,2-Í¼Æ¬ÏÂ±ßÔµ£¨ºÏ³ÉÍ¼×¨ÓÃµÄÊÇÉÏ±ßÔµÍâ£©£¨V3.7£©
    BYTE       byOsdLocate;
    BYTE         byRes[23];
}NET_ITS_OVERLAP_ITEM_PARAM, *LPNET_ITS_OVERLAP_ITEM_PARAM;

//µþ¼ÓÏî¾ßÌåÐÅÏ¢
typedef struct tagNET_ITS_OVERLAP_INFO_PARAM
{
    BYTE bySite[128];           //µØµãÃèÊö
    BYTE byRoadNum[32];  //Â·¿Ú±àºÅ
    BYTE byInstrumentNum[32];                //Éè±¸±àºÅ
    BYTE byDirection[32];        //·½Ïò±àºÅ
    BYTE byDirectionDesc[32];    //·½ÏòÃèÊö
    BYTE byLaneDes[32];        //³µµÀÃèÊö
    BYTE byRes1[32];     //±£Áô
    BYTE byMonitoringSite1[44];        //¼à²âµã1ÐÅÏ¢
    BYTE byMonitoringSite2[32];        //¼à²âµã2ÐÅÏ¢
    BYTE byRes[64];        //±£Áô
}NET_ITS_OVERLAP_INFO_PARAM, *LPNET_ITS_OVERLAP_INFO_PARAM;

typedef struct tagNET_ITS_OVERLAP_CFG
{
    DWORD dwSize;    
    BYTE  byEnable; //ÊÇ·ñÆôÓÃ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE  byRes1[3]; 
    NET_ITS_OVERLAP_ITEM_PARAM        struOverLapItem; //×Ö·û´®²ÎÊý
    NET_ITS_OVERLAP_INFO_PARAM     struOverLapInfo;  //×Ö·û´®ÄÚÈÝÐÅÏ¢
    BYTE  byRes[32];
}NET_ITS_OVERLAP_CFG, *LPNET_ITS_OVERLAP_CFG;

//×Ö·ûµþ¼ÓÃ¿Ò»ÌõÐÅÏ¢½á¹¹Ìå
typedef struct tagNET_ITS_OVERLAP_SINGLE_ITEM_PARAM_V50
{
    BYTE byRes1[2];                   // ±£Áô
    BYTE byItemType;   //ÀàÐÍ£¬Ïê¼ûOVERLAP_ITEM_TYPE
    BYTE byChangeLineNum;           //µþ¼ÓÏîºóµÄ»»ÐÐÊý[0-10](Ä¬ÈÏ0)
    BYTE bySpaceNum;                   //µþ¼ÓÏîºóµÄ¿Õ¸ñÊý[0-255](Ä¬ÈÏ0)
    BYTE byRes2[2];
    BYTE byEnablePos;  //ÊÇ·ñÆôÓÃ×ø±êÏÔÊ¾
    WORD wStartPosTop;    //ÆðÊ¼ÉÏ×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0)
    WORD wStartPosLeft;    //ÆðÊ¼×ó×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0)
    //×Ô¶¨ÒåÀàÐÍ£»ÓëbyItemType²ÎÊý¶ÔÓ¦¡£¿É½«byItemType²ÎÊýÀàÐÍ×Ô¶¨ÒåÃû³Æ¡£Èô×Ô¶¨ÒåÄÚÈÝÎª¿Õ£¬±ãÄ¬ÈÏÒÔbyItemType²ÎÊýÖÐµÄÀàÐÍÃüÃû¡£
    BYTE byItemTypeCustom[32]; 
    BYTE byRes[8];
}NET_ITS_OVERLAP_SINGLE_ITEM_PARAM_V50, *LPNET_ITS_OVERLAP_SINGLE_ITEM_PARAM_V50;

typedef struct tagNET_ITS_OVERLAP_ITEM_PARAM_V50
{
    NET_ITS_OVERLAP_SINGLE_ITEM_PARAM_V50 struSingleItem[MAX_OVERLAP_ITEM_NUM]; //µ¥Ìõ×Ö·û²ÎÊý
    DWORD dwLinePercent;  //µþ¼ÓÐÐ°Ù·Ö±È(0-100),(Ä¬ÈÏ100)
    DWORD dwItemsStlye;   //µþ¼Ó·½Ê½£º0-ºáÅÅ,1-ÊúÅÅ(Ä¬ÈÏºáÅÅ)
    WORD  wStartPosTop;    //ÆðÊ¼ÉÏ×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0)
    WORD  wStartPosLeft;    //ÆðÊ¼×ó×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0)
    WORD  wCharStyle;    //×ÖÌåÀàÐÍ,0-ËÎÌå1-ÎºÌå(Ä¬ÈÏ)
    WORD  wCharSize;    //×Ö·û´óÐ¡,0--16x16,1--32x32,2-48x48,3--64x64 (Ä¬ÈÏ),8x128(Ver3.7)
    WORD  wCharInterval;    //×Ö·û¼ä¾à£¬[0¡«16]£¬¿ÉÉèµ¥Î»£ºÏñËØ(Ä¬ÈÏ)
    BYTE  byRes1[2];
    DWORD dwForeClorRGB;      //Ç°¾°É«µÄRGBÖµbit0-1:(B) bit2-3:(G) bit4-5:(G) (Ä¬ÈÏx00FFFFFF-°×)
    DWORD dwBackClorRGB; //±³¾°É«µÄRGBÖµ,Ö»¶ÔÍ¼Æ¬Íâµþ¼ÓÓÐÐ§bit0-1:(B) bit2-3:(G) bit4-5:(G) (Ä¬ÈÏx00000000-ºÚ)
    BYTE  byColorAdapt;    //ÑÕÉ«ÊÇ·ñ×ÔÊÊÓ¦0-·ñ1-ÊÇ
    //(Ver3.7 ÐÂÔö)
    // ²ÎÊý²¹ÁãÊ¹ÄÜ 0-²¹Áã, 1-²»²¹Áã£¨ÏêÏ¸×¢ÊÍ£©ËÙ¶È,ÏÞËÙÖµ ²»×ã3Î»²¹0
    BYTE  byParamFillZeroEnble;
    BYTE  byPlateLeftCornerEnable;// ³µÅÆÐ¡Í¼µþ¼Ó×óÉÏ½ÇÊ¹ÄÜ 0-²»µþ¼Ó, 1-µþ¼Ó
    BYTE  byRes2;
    WORD  wStartSPicPosTop; //ÆðÊ¼ÉÏ×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0) 
    WORD  wStartSPicPosLeft; //ÆðÊ¼×ó×ø±ê,Ö»¶ÔÍ¼Æ¬ÄÚ²¿µþ¼ÓÓÐÐ§[0~2448](Ä¬ÈÏ0) 
    //OSDµþ¼ÓÎ»ÖÃ  0-Í¼Æ¬ÄÚ,1-Í¼Æ¬ÉÏ±ßÔµ,2-Í¼Æ¬ÏÂ±ßÔµ£¨ºÏ³ÉÍ¼×¨ÓÃµÄÊÇÉÏ±ßÔµÍâ£©£¨V3.7£©
    BYTE  byOsdLocate;
    BYTE  byRes[63];
}NET_ITS_OVERLAP_ITEM_PARAM_V50, *LPNET_ITS_OVERLAP_ITEM_PARAM_V50;

typedef struct tagNET_ITS_OVERLAP_CFG_V50
{
    DWORD dwSize;    
    BYTE  byEnable; //ÊÇ·ñÆôÓÃ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE  byRes1[3]; 
    NET_ITS_OVERLAP_ITEM_PARAM_V50        struOverLapItemV50; //×Ö·û´®²ÎÊý
    NET_ITS_OVERLAP_INFO_PARAM             struOverLapInfo;  //×Ö·û´®ÄÚÈÝÐÅÏ¢
    BYTE  byRes[120];
}NET_ITS_OVERLAP_CFG_V50, *LPNET_ITS_OVERLAP_CFG_V50;

#define  MAX_PTZCRUISE_POINT_NUM   32   //×î´óÖ§³Ö32¸öÑ²º½µã


//Ô¤ÖÃµãÐÅÏ¢
typedef struct tagNET_DVR_PRESET_INFO
{
    DWORD dwSize;
    DWORD dwPresetNum; //Ô¤ÖÃµã¸öÊý
    DWORD dwGroupNum;  //×éÊý
    BYTE  byRes[8];
}NET_DVR_PRESET_INFO, *LPNET_DVR_PRESET_INFO;

//ÊäÈë²ÎÊý
typedef struct tagNET_DVR_PRESET_COND
{
    DWORD dwSize;
    DWORD dwChannel;
    DWORD dwGroupNO; //×éºÅ
    BYTE byRes[8];
}NET_DVR_PRESET_COND, *LPNET_DVR_PRESET_COND;

//Êä³ö²ÎÊý
typedef struct tagNET_DVR_PRESETCFG
{
    DWORD dwSize;
    DWORD dwPresetIndex; //Ô¤ÖÃµãÐòºÅ
    NET_VCA_POINT struVcaPoint; //Ô¤ÖÃµã×ø±ê
    WORD wZoomCoordinate; ///<Ô¤ÖÃµã´°¿ÚZoomÖµ
    BYTE  byRes[30]; 
}NET_DVR_PRESETCFG, *LPNET_DVR_PRESETCFG;

//»ñÈ¡Ñ²º½Â·¾¶µÄÊýÄ¿
typedef struct tagNET_DVR_PTZCRUISE_INFO
{
    DWORD dwSize;
    DWORD dwPtzCruiseNum; //Â·¾¶¸öÊý
    DWORD dwGroupNum; //×éÊý
    BYTE byRes[8];
}NET_DVR_PTZCRUISE_INFO, *LPNET_DVR_PTZCRUISE_INFO;

//ÊäÈë²ÎÊý£º
typedef struct tagNET_DVR_PTZCRUISE_COND
{
    DWORD dwSize;
    DWORD dwChannel;
    DWORD dwGroupNO; //×éºÅ
    BYTE byRes[8];
}NET_DVR_PTZCRUISE_COND, *LPNET_DVR_PTZCRUISE_COND;

//Êä³ö²ÎÊý
typedef struct tagNET_DVR_PTZCRUISE_POINTCFG
{
    DWORD dwSize;
    DWORD dwPresetIndex; //Ô¤ÖÃµãÐòºÅ
    NET_VCA_POINT struVcaPoint; //Ô¤ÖÃµã×ø±ê
    BYTE    byDwell;        //Í£ÁôÊ±¼ä
    BYTE    bySpeed;        //ËÙ¶È
    WORD  wZoomCoordinate;///<Ô¤ÖÃµã´°¿ÚZoomÖµ
    BYTE   byRes[28]; 
}NET_DVR_PTZCRUISE_POINTCFG, *LPNET_DVR_PTZCRUISE_POINTCFG;

typedef struct tagNET_DVR_PTZCRUISECFG
{
    DWORD dwSize;
    DWORD dwCruiseRoute; //Ñ²º½Â·¾¶ÐòºÅ
    NET_DVR_PTZCRUISE_POINTCFG struCruisePoint[MAX_PTZCRUISE_POINT_NUM]; //×î´óÖ§³Ö32¸öÑ²º½µã
    BYTE  byRes[32]; 
}NET_DVR_PTZCRUISECFG, *LPNET_DVR_PTZCRUISECFG;

//¸ú×ÙÄ£Ê½½á¹¹
typedef struct tagNET_DVR_MOTION_TRACK_CFG
{
    DWORD dwSize; 
    BYTE byEnableTrack;   //ÆôÓÃ¸ú×Ù£¬0-·ñ£¬1-ÊÇ
    BYTE byRes[63];
}NET_DVR_MOTION_TRACK_CFG, *LPNET_DVR_MOTION_TRACK_CFG;

//Ò»ÌìµÄ¶¨Ê±¼Æ»®
typedef struct tagNET_DVR_DAY_SCHEDULE
{   
    BYTE byWorkMode ;            //0-È«Ìì¿ª£¬1-È«Ìì¹Ø£¬2-¶¨Ê±
    BYTE byRes1[3] ;
    NET_DVR_SCHEDTIME struTime[MAX_TIMESEGMENT_V30/*8*/];  //Ê±¼ä¶Î
    BYTE byRes2[8];                  //±£Áô
}NET_DVR_DAY_SCHEDULE ,*LPNET_DVR_DAY_SCHEDULE;

//¶¨Ê±ÖÇÄÜ¸ú×Ù²ÎÊý½á¹¹
typedef struct tagNET_DVR_SCHEDULE_AUTO_TRACK_CFG
{
    DWORD    dwSize;    //½á¹¹³¤¶È
    BYTE     byEnableTrack;            //ÆôÓÃ¸ú×Ù£º0- ·ñ£¬1- ÊÇ
    BYTE    byRes1[3] ;
    NET_DVR_DAY_SCHEDULE struSchedule[MAX_DAYS/*7*/];    //¶¨Ê±ÖÇÄÜ¸ú×ÙÊ±¼ä¶Î£¬²»ÔÚÕâ8¸öÊ±¼ä¶ÎÄÚµÄÊ±¼ä£¬Ä¬ÈÏ¶¨Ê±ÖÇÄÜ¸ú×Ù¹Ø±Õ
    BYTE    byRes2[128];
}NET_DVR_SCHEDULE_AUTO_TRACK_CFG,*LPNET_DVR_SCHEDULE_AUTO_TRACK_CFG;

typedef struct tagNET_DVR_I_FRAME
{
    DWORD    dwSize;                    //½á¹¹³¤¶È
    BYTE    sStreamID[STREAM_ID_LEN/*32*/] ; //Á÷ID
    DWORD    dwChan;                     //±»¿ØÍ¨µÀºÅ
    BYTE    byStreamType;             //0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷£¬2-ÂëÁ÷3£¬3-ÂëÁ÷4£¬4-ÂëÁ÷5     
    BYTE    byRes[63];
} NET_DVR_I_FRAME, *LPNET_DVR_I_FRAME;

typedef struct tagNET_DVR_REBOOT_TIME
{
    BYTE byDate;   //ÐÇÆÚ¼¸£¬1-7´ú±íÐÇÆÚÒ»µ½ÐÇÆÚÈÕ
    BYTE byHour;   //Ê±
    BYTE byMinute; //·Ö    
    BYTE byRes1;
    BYTE byRebootMode; //0-°´ÖÜÖØÆô£¬1-°´ÔÂÖØÆô£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£¬²»ÄÜÉèÖÃ£©
    BYTE byRes[11]; //±£Áô
}NET_DVR_REBOOT_TIME,*LPNET_DVR_REBOOT_TIME;

typedef struct tagNET_DVR_AUTO_REBOOT_CFG
{
    DWORD dwSize;
    NET_DVR_REBOOT_TIME struRebootTime;
}NET_DVR_AUTO_REBOOT_CFG,*LPNET_DVR_AUTO_REBOOT_CFG;

#define NET_DVR_GPS_FINDING       0   //ÕýÔÚ²éÕÒ
#define NET_DVR_GPS_RECV          1   //½ÓÊÕÊý¾Ý
#define NET_DVR_GPS_OVER          2   //²éÕÒ½áÊø
#define NET_DVR_GPS_EXCEPTION     3   //½ÓÊÕÒì³£
typedef struct tagNET_DVR_MENU_OUTPUT_MODE
{
    DWORD        dwSize;
    BYTE        byMenuOutputMode; //·ÇÍ¬Ô´Éè±¸£º0-Auto 1-Ö÷CVBS 2-HDMI 3-VGA Í¬Ô´Éè±¸£º0-Auto 1-Ö÷CVBS 2-HDMI/VGA
    BYTE        byRes[63];
}NET_DVR_MENU_OUTPUT_MODE, *LPNET_DVR_MENU_OUTPUT_MODE;

typedef struct tagNET_DVR_MB_IPADDR
{
    NET_DVR_IPADDR   struIP;  //IPµØÖ·
    WORD        wPort;   //¶Ë¿ÚºÅ
    BYTE        byRes[2];
}NET_DVR_MB_IPADDR,*LPNET_DVR_MB_IPADDR;

typedef struct tagNET_DVR_MB_WVSPARA
{
    NET_DVR_MB_IPADDR struWVSAddr;
    BYTE byPuid[NAME_LEN];    //Éè±¸id
    BYTE byPassword[PASSWD_LEN];  //ÃÜÂë
    BYTE byRes[8];
}NET_DVR_MB_WVSPARA, *LPNET_DVR_MB_WVSPARA;

typedef struct tagNET_DVR_MB_EHOMEPARA
{
    NET_DVR_MB_IPADDR struEHomeAddr;
    BYTE byPuid[NAME_LEN];   //Éè±¸id
}NET_DVR_MB_EHOMEPARA, *LPNET_DVR_MB_EHOMEPARA;

typedef struct tagNET_DVR_MB_PLATFORMPARA
{   
    DWORD dwSize;
    BYTE byNetEnvironment;/*ÍøÂç»·¾³,0-wireless,1-3G,2-wLan,3-lan*/
    BYTE byCurPlatForm;   /*< µ±Ç°Æ½Ì¨0 - WVS, 1 - E¼Ò, 2 - ÍÆÄ£Ê½ */
    BYTE byRes1[2];    
    NET_DVR_MB_WVSPARA  struWVSPara; /*³µÔØÆ½Ì¨(Æ½Ì¨µÇÈë)*/
    NET_DVR_MB_EHOMEPARA struMbEHpara;/*E¼ÒÆ½Ì¨³µÔØÆ½Ì¨²»ÉèÖÃÉè±¸µÇÈëÃÜÂë */
    BYTE byRes2[64];
}NET_DVR_MB_PLATFORMPARA, *LPNET_DVR_MB_PLATFORMPARA;

typedef struct tagNET_DVR_MB_GPS_STATUS
{
    BYTE        byGPSModule;      /*gpsÄ£¿é, 0: ²»´æÔÚ, 1: Õý³£*/
    BYTE        byPositionStatus;      /*gps¶¨Î»×´Ì¬, 0: ¶¨Î»Ê§°Ü, 1: ¶¨Î»³É¹¦*/
    BYTE        bySignalStrength;    /*ÐÅºÅÇ¿¶È, 0: Èõ, 1: Õý³£, 2: Ç¿*/
    BYTE        byres[5];
}NET_DVR_MB_GPS_STATUS, *LPNET_DVR_MB_GPS_STATUS;

typedef struct tagNET_DVR_MB_GSENSOR_STATUS
{
    BYTE        byGsensorModule;    /*g-sensorÄ£¿é, 0: not exist, 1: ÄÚÖÃ, 2: ÍâÖÃ*/
    BYTE        byCurAccX[10];     /*µ±Ç°XÖá¼ÓËÙ¶È*/
    BYTE        byCurAccY[10];    /*µ±Ç°YÖá¼ÓËÙ¶È*/
    BYTE        byCurAccZ[10];    /*µ±Ç°ZÖá¼ÓËÙ¶È*/
    BYTE        byRefAccX[10];    /* XÖá¼ÓËÙ¶È±ê¶¨Öµ*/
    BYTE        byRefAccY[10];    /* YÖá¼ÓËÙ¶È±ê¶¨Öµ*/
    BYTE        byRefAccZ[10];    /* ZÖá¼ÓËÙ¶È±ê¶¨Öµ*/
    BYTE        byres[3];
}NET_DVR_MB_GSENSOR_STATUS, *LPNET_DVR_MB_GSENSOR_STATUS;

#define IP_ADDR_LEN         16
#define IW_ESSID_MAX_SIZE    32

typedef struct tagNET_DVR_MB_WIFI_STATUS
{
    BYTE        byEnableWiFi; /* ÎÞÏß, 0 ¹Ø, 1 ¿ª */
    BYTE         byWiFiConnectStatus;  /* WIFI×´Ì¬, 0: Á¬½ÓÊ§°Ü, 1: Á¬½Ó³É¹¦ 2: ÎÞÄ£¿é*/
    BYTE        bySignalStrength;             /* ÐÅºÅÇ¿¶È, 0 Èõ, 1 Õý³£, 2 Ç¿ */
    BYTE        byIPaddress[IP_ADDR_LEN];   /*WIFI Éè±¸ ip*/
    BYTE        byEssid[IW_ESSID_MAX_SIZE];  /*ÎÞÏß½ÓÈëµãessid*/
    BYTE        byres[5];
}NET_DVR_MB_WIFI_STATUS,*LPNET_DVR_MB_WIFI_STATUS;

typedef struct tagNET_DVR_MB_PLATFORM_STATUS
{
    BYTE        byCurPlat;      /*µ±Ç°Æ½Ì¨, 0: wvs, 1: ivms, 2: ÍÆÄ£Ê½(net_3g_sdk)*/
    BYTE        byLoginStatus;     /*login ×´Ì¬, 0: login failed, 1: login success*/
    BYTE        byExceptionInfo;      /*Òì³£ÐÅÏ¢*/
    /*
    WVS :exception info:
    0: Á¬½Ó·þÎñÆ÷Ê§°Ü
    1: ×¢²áÖÐ
    2: ÓÃ»§ÃûÃÜÂë´íÎó
    3: ×¢²á³¬Ê±
    4: ÐÄÌø³¬Ê±
    5: ×¢²á³É¹¦
    iVMS :exception info:
    0Î´×¢²á    
    1×¢²áÖÐ    
    2×¢²áÁ¬½Ó³ö´í
    3×¢²á³¬Ê±
    4³¤Ê±¼äÃ»ÓÐÐÄÌø£¬Á¬½ÓÖÐ¶Ï
    5ÖØÐÂ×¢²á
    6 CMSÖÐ×¢²áÉè±¸ÊýÁ¿ÒÑ¾­³¬¹ýÏÞ¶¨µÄÌ¨Êý
    7 CMSÖÐ×¢²áÍ¨µÀÊýÁ¿ÒÑ¾­³¬¹ýÏÞ¶¨Í¨µÀÊý
    8Éè±¸ÔÚWEB¹ÜÀíÖÐÐÄÖÐÃ»ÓÐÅäÖÃ
    9CMSºÍWEB¹ÜÀíÖÐÐÄÍ¨ÐÅÊ§°Ü
    10µÇÂ¼Î´Öª´íÎó
    11×¢²á³É¹¦
    ÍÆÄ£Ê½ :exception info:    
    0Î´×¢²á
    1: ×¢²áÖÐ
    2: ÖØ¸´×¢²á
    3: ×¢²áÁ¬½ÓÊ§°Ü
    4: ·þÎñÆ÷IP±ä»¯
    5: ×¢²á³É¹¦
    6: ÓÃ»§×¢Ïú
    7: ÐÄÌø³¬Ê±
    */                        
    BYTE        byres[5];
}NET_DVR_MB_PLATFORM_STATUS, *LPNET_DVR_MB_PLATFORM_STATUS;


typedef struct tagNET_DVR_MB_MOBILEDEV_STATUS
{
    DWORD        dwSize;      /*½á¹¹´óÐ¡*/
    union
    {
        NET_DVR_MB_GPS_STATUS struGPSStatus;
        NET_DVR_MB_GSENSOR_STATUS struGSensorStatus;
        NET_DVR_MB_WIFI_STATUS struWiFiStatus;
        NET_DVR_MB_PLATFORM_STATUS struPlatformStatus;
    }mobileStatus;
}NET_DVR_MB_MOBILEDEV_STATUS, *LPNET_DVR_MB_MOBILEDEV_STATUS;

#define NET_DVR_GPS_STATUS       0
#define NET_DVR_GSENSOR_STATUS   1
#define NET_DVR_WIFI_STATUS      2
#define NET_DVR_PLATFORM_STATUS  3

//GPSµãÐÅÏ¢½á¹¹
typedef struct tagNET_DVR_GPS_INFO
{
    /* ¾­Î³¶ÈÎªS*100 */
    BYTE    byDirection[2];        /*direction[0]0or1(¶«¾­/Î÷¾­), direction[1]:0or1(±±Î³/ÄÏÎ³)  */
    BYTE    bySvs;         /* satellite vehicles(³õÖµ0)£ºÓÐÐ§¶¨Î»ÐÇÊý */
    BYTE    byLocateMode;  /* ¶¨Î»Ä£Ê½(³õÖµ0)£º½öNMEA0183 3.00°æ±¾Êä³ö£¬0=×ÔÖ÷¶¨Î»£¬1=²î·Ö£¬2=¹ÀËã£¬3=Êý¾ÝÎÞÐ§ */
    WORD    wHDOP;  /* Ë®Æ½¾«¶ÈÒò×Ó£¬¶ÈÁ¿GPS¾«È·¶È£¬0.5-99.9£¬6ÒÔÄÚ¶¨Î»¾«¶È¸ß£¬20ÒÔÉÏÐè¶ªÆú£¬ÕâÀï´æ´¢µÄÊÇ³ËÒÔ10ÒÔºóµÄÕûÊý */     
    WORD    wHeight;             /* ¸ß¶È */
    DWORD   dwLatitude;     /*Î³¶Èlatitude = Êµ¼Ê¶È*3600*100+Êµ¼Ê·Ö*60*100+Êµ¼ÊÃë*100 */
    DWORD   dwLongitude; /*¾­¶Èlongitude =Êµ¼Ê¶È*3600*100+Êµ¼Ê·Ö*60*100+Êµ¼ÊÃë*100 */
    DWORD   dwVehicleSpeed;        /* mobile speed =Êµ¼ÊËÙ¶È*100000 Êµ¼Êµ¥Î»kph*/
    DWORD    dwVehicleDirection;    /* mobile direction= Êµ¼Ê·½Ïò*100£¬Êµ¼ÊÊýÖµÊÇ·½Ïò½Ç£¬Õý±±Îª0¶È£¬Ë³Ê±Õë */
    BYTE    byRes[8];            // ±£Áô
}NET_DVR_GPS_INFO,*LPNET_DVR_GPS_INFO; //32×Ö½Ú

//GPS¹ØÁªÊ±¼ä
typedef struct tagNTE_DVR_GPS_DATA
{
    NET_DVR_GPS_INFO  struGPSInfo;      //GPS×ø±êµã
    NET_DVR_TIME      struTime;            //GPS×ø±ê¶ÔÓ¦µÄÊ±¼äµã£¬UTCÊ±¼ä
    BYTE        byRes[12];             // ±£Áô
}NET_DVR_GPS_DATA,*LPNET_DVR_GPS_DATA;

//GPS²éÕÒÌõ¼þ½á¹¹
typedef struct tagNET_DVR_GET_GPS_DATA_PAPAM
{    
    DWORD dwCmdType;              //0-°´Ê±¼ä¶Î²éÕÒGPSÊý¾Ý,1-°´Ê±¼äµã²éÕÒGPSÊý¾Ý    
    union
    {
        struct
        {
            NET_DVR_TIME struBeginTime;               //GPSÊý¾Ý²éÕÒÆðÊ¼Ê±¼ä       
            NET_DVR_TIME struEndTime;                 //GPSÊý¾Ý²éÕÒ½áÊøÊ±¼ä
            DWORD dwInterval;                  //GPSµãÊ±¼ä¼ä¸ô£¬µ¥Î»Ãë
            BYTE  byRes[76];                    // ±£Áô
        }TimeSeg;
        struct
        {
            NET_DVR_TIME struTimePoint;              //GPSÊý¾Ý²éÕÒÆðÊ¼Ê±¼äµ¥Î»Ãë
            BYTE  byRes[104];              // ±£Áô
        }TimePoint;    
    }GpsDataParam;
}NET_DVR_GET_GPS_DATA_PARAM,*LPNET_DVR_GET_GPS_DATA_PARAM;

typedef struct tagNET_DVR_SDKLOCAL_CFG
{
    BYTE    byEnableAbilityParse;    //Ê¹ÓÃÄÜÁ¦¼¯½âÎö¿â,0-²»Ê¹ÓÃ,1-Ê¹ÓÃ,Ä¬ÈÏ²»Ê¹ÓÃ
    BYTE    byVoiceComMode;          //¶Ô½²Ä£Ê½£¬0-Ê¹ÓÃ¶Ô½²¿â£¨Ä¬ÈÏ£©£¬1-Ê¹ÓÃwindows apiÄ£Ê½    
    BYTE    byLoginWithSimXml;  //µÇÂ¼Ê±Ê¹ÓÃÄ£ÄâÄÜÁ¦,0-²»Ê¹ÓÃ,1-Ê¹ÓÃ,Ä¬ÈÏ²»Ê¹ÓÃ
    BYTE    byCompatibleType;
    BYTE    byRes[380];
    BYTE    byProtectKey[128];    //Ä¬ÈÏÉèÖÃÎª0
}NET_DVR_SDKLOCAL_CFG, *LPNET_DVR_SDKLOCAL_CFG;

typedef struct tagNET_DVR_LOCAL_ABILITY_PARSE_CFG
{
    BYTE    byEnableAbilityParse;    //Ê¹ÓÃÄÜÁ¦¼¯½âÎö¿â,0-²»Ê¹ÓÃ,1-Ê¹ÓÃ,Ä¬ÈÏ²»Ê¹ÓÃ
    BYTE    byRes[127];                
}NET_DVR_LOCAL_ABILITY_PARSE_CFG, *LPNET_DVR_LOCAL_ABILITY_PARSE_CFG;

typedef struct tagNET_DVR_LOCAL_TALK_MODE_CFG
{
    BYTE    byTalkMode;                //¶Ô½²Ä£Ê½£¬0-Ê¹ÓÃ¶Ô½²¿â£¨Ä¬ÈÏ£©£¬1-Ê¹ÓÃwindows apiÄ£Ê½
    BYTE    byRes[127];                
}NET_DVR_LOCAL_TALK_MODE_CFG, *LPNET_DVR_LOCAL_TALK_MODE_CFG;


typedef struct tagNET_DVR_LOCAL_PROTECT_KEY_CFG
{
    BYTE    byProtectKey[128];        //Ä¬ÈÏÉèÖÃÎª0
    BYTE    byRes[128];            
}NET_DVR_LOCAL_PROTECT_KEY_CFG, *LPNET_DVR_LOCAL_PROTECT_KEY_CFG;

typedef struct tagNET_DVR_SIMXML_LOGIN
{
    BYTE   byLoginWithSimXml;   //µÇÂ¼Ê±Ê¹ÓÃÄ£ÄâÄÜÁ¦Ð£Õý½á¹¹ÌåÄÜÁ¦×Ö¶Î,0-²»Ê¹ÓÃ,1-Ê¹ÓÃ
    BYTE   byRes[127];
}NET_DVR_SIMXML_LOGIN, *LPNET_DVR_SIMXML_LOGIN;

typedef enum tagNET_SDK_LOCAL_CFG_TYPE
{
    NET_SDK_LOCAL_CFG_TYPE_TCP_PORT_BIND = 0,        //±¾µØTCP¶Ë¿Ú°ó¶¨ÅäÖÃ£¬¶ÔÓ¦½á¹¹ÌåNET_DVR_LOCAL_TCP_PORT_BIND_CFG
    NET_SDK_LOCAL_CFG_TYPE_UDP_PORT_BIND,            //±¾µØUDP¶Ë¿Ú°ó¶¨ÅäÖÃ£¬¶ÔÓ¦½á¹¹ÌåNET_DVR_LOCAL_UDP_PORT_BIND_CFG
    NET_SDK_LOCAL_CFG_TYPE_MEM_POOL,                //ÄÚ´æ³Ø±¾µØÅäÖÃ£¬¶ÔÓ¦½á¹¹ÌåNET_DVR_LOCAL_MEM_POOL_CFG
    NET_SDK_LOCAL_CFG_TYPE_MODULE_RECV_TIMEOUT,        //°´Ä£¿éÅäÖÃ³¬Ê±Ê±¼ä£¬¶ÔÓ¦½á¹¹ÌåNET_DVR_LOCAL_MODULE_RECV_TIMEOUT_CFG
    NET_SDK_LOCAL_CFG_TYPE_ABILITY_PARSE,            //ÊÇ·ñÊ¹ÓÃÄÜÁ¦¼¯½âÎö¿â£¬¶ÔÓ¦½á¹¹ÌåNET_DVR_LOCAL_ABILITY_PARSE_CFG
    NET_SDK_LOCAL_CFG_TYPE_TALK_MODE,                //¶Ô½²Ä£Ê½£¬¶ÔÓ¦½á¹¹ÌåNET_DVR_LOCAL_TALK_MODE_CFG
    NET_SDK_LOCAL_CFG_TYPE_PROTECT_KEY,                //ÃÜÔ¿ÉèÖÃ£¬¶ÔÓ¦½á¹¹ÌåNET_DVR_LOCAL_PROTECT_KEY_CFG
    NET_SDK_LOCAL_CFG_TYPE_CFG_VERSION,             //ÓÃÓÚ²âÊÔ°æ±¾Í·µÄÉè±¸¶Ë¼æÈÝÇéNET_DVR_LOCAL_MEM_POOL_CFG¿ö, Ö»ÓÐÔÚÉèÖÃ²ÎÊýÊ±²ÅÆð×÷ÓÃ¡£
    NET_SDK_LOCAL_CFG_TYPE_RTSP_PARAMS,                //rtsp²ÎÊýÅäÖÃ£¬¶ÔÓÚ½á¹¹ÌåNET_DVR_RTSP_PARAMS_CFG
    NET_SDK_LOCAL_CFG_TYPE_SIMXML_LOGIN,            //ÔÚµÇÂ¼Ê±Ê¹ÓÃÄ£ÄâÄÜÁ¦²¹³äsupport×Ö¶Î, ¶ÔÓ¦½á¹¹NET_DVR_SIMXML_LOGIN
    NET_SDK_LOCAL_CFG_TYPE_CHECK_DEV,                //ÐÄÌø½»»¥¼ä¸ôÊ±¼ä
    NET_SDK_LOCAL_CFG_TYPE_SECURITY,                  //SDK±¾´Î°²È«ÅäÖÃ£¬
    NET_SDK_LOCAL_CFG_TYPE_EZVIZLIB_PATH,            //ÅäÖÃÓ©Ê¯ÔÆÍ¨ÐÅ¿âµØÖ·£¬
    NET_SDK_LOCAL_CFG_TYPE_CHAR_ENCODE,               //13.ÅäÖÃ×Ö·û±àÂëÏà¹Ø´¦Àí»Øµ÷
    NET_SDK_LOCAL_CFG_TYPE_PROXYS,                     //ÉèÖÃ»ñÈ¡´ú
    NET_DVR_LOCAL_CFG_TYPE_LOG,                       //ÈÕÖ¾²ÎÊýÅäÖÃ  NET_DVR_LOCAL_LOG_CFG
    NET_DVR_LOCAL_CFG_TYPE_STREAM_CALLBACK           //ÂëÁ÷»Øµ÷²ÎÊýÅäÖÃ NET_DVR_LOCAL_STREAM_CALLBACK_CFG
}NET_SDK_LOCAL_CFG_TYPE;

typedef struct tagNET_DVR_LOCAL_STREAM_CALLBACK_CFG
{
    BYTE     byPlayBackEndFlag;      //0-²»»Øµ÷»Ø·Å½áÊø±ê¼Ç£¬1-»Øµ÷»Ø·Å½áÊø±ê¼Ç
    BYTE     byRes[255];      //±£Áô
}NET_DVR_LOCAL_STREAM_CALLBACK_CFG, *LPNET_DVR_LOCAL_STREAM_CALLBACK_CFG;

typedef struct tagNET_DVR_LOCAL_LOG_CFG
{
    WORD    wSDKLogNum;      //sdkÔÚ¸²¸ÇÄ£Ê½ÏÂ£¬ÈÕÖ¾Éú³ÉµÄ¸öÊý 0ÎªÄ¬ÈÏÖµ£¨10¸ö£©
    BYTE     byRes[254];      //±£Áô
}NET_DVR_LOCAL_LOG_CFG, *LPNET_DVR_LOCAL_LOG_CFG;

typedef int(CALLBACK * CHAR_ENCODE_CONVERT)(char * pInput, DWORD dwInputLen, DWORD dwInEncodeType, char *pOutput, DWORD dwOutputLen, DWORD dwOutEncodeType);

typedef struct tagNET_DVR_LOCAL_BYTE_ENCODE_CONVERT
{
    CHAR_ENCODE_CONVERT  fnCharConvertCallBack;
    BYTE     byRes[256];
}NET_DVR_LOCAL_BYTE_ENCODE_CONVERT, *LPNET_DVR_LOCAL_BYTE_ENCODE_CONVERT;

typedef struct tagNET_DVR_LOCAL_SECURITY
{
    BYTE bySecurityLevel;//Ë½ÓÐÐ­ÒéÍ¨ÐÅÄ£Ê½£¬ //0-¼æÈÝÄ£Ê½£¨Ä¬ÈÏ£©£¬ÔÊÐíËùÓÐµÄSDKµÇÂ¼Ð­ÒéÍ¨¹ý£¬1-°²È«Ä£Ê½£¨MD5£©, ÔÊÐíRSAºÍMD5µÇÂ¼£¬¿ªÆôÐ£Ñé2-°²È«Ä£Ê½£¨RSA£©RSAµÇÂ¼£¬¿ªÆôÐ£Ñé
    BYTE byRes[255];
}NET_DVR_LOCAL_SECURITY, *LPNET_DVR_LOCAL_SECURITY;

typedef struct tagNET_DVR_LOCAL_CHECK_DEV
{
    DWORD   dwCheckOnlineTimeout;     //Ñ²¼ìÊ±¼ä¼ä¸ô£¬µ¥Î»ms  ×îÐ¡ÖµÎª30s£¬×î´óÖµ120s¡£Îª0Ê±£¬±íÊ¾ÓÃÄ¬ÈÏÖµ(120s)
    DWORD   dwCheckOnlineNetFailMax;  //ÓÉÓÚÍøÂçÔ­ÒòÊ§°ÜµÄ×î´óÀÛ¼Ó´ÎÊý£»³¬¹ý¸ÃÖµSDK²Å»Øµ÷ÓÃ»§Òì³££¬Îª0Ê±£¬±íÊ¾Ê¹ÓÃÄ¬ÈÏÖµ1
    BYTE    byRes[256];
}NET_DVR_LOCAL_CHECK_DEV,*LPNET_DVR_LOCAL_CHECK_DEV;


typedef struct tagNET_DVR_LOCAL_CFG_VERSION
{
    BYTE    byVersion;                        //°æ±¾ÐÅÏ¢
    BYTE    byRes[63];                        //±£Áô
}NET_DVR_LOCAL_CFG_VERSION, *LPNET_DVR_LOCAL_CFG_VERSION;

typedef struct tagNET_DVR_LOCAL_TCP_PORT_BIND_CFG
{
    WORD    wLocalBindTcpMinPort;            //±¾µØ°ó¶¨Tcp×îÐ¡¶Ë¿Ú
    WORD    wLocalBindTcpMaxPort;            //±¾µØ°ó¶¨Tcp×î´ó¶Ë¿Ú
    BYTE    byRes[60];                        //±£Áô
}NET_DVR_LOCAL_TCP_PORT_BIND_CFG, *LPNET_DVR_LOCAL_TCP_PORT_BIND_CFG;


typedef struct tagNET_DVR_LOCAL_UDP_PORT_BIND_CFG
{
    WORD    wLocalBindUdpMinPort;            //±¾µØ°ó¶¨Udp×îÐ¡¶Ë¿Ú
    WORD    wLocalBindUdpMaxPort;            //±¾µØ°ó¶¨Udp×î´ó¶Ë¿Ú
    BYTE    byRes[60];                        //±£Áô
}NET_DVR_LOCAL_UDP_PORT_BIND_CFG, *LPNET_DVR_LOCAL_UDP_PORT_BIND_CFG;


typedef struct tagNET_DVR_LOCAL_MEM_POOL_CFG
{
    DWORD    dwAlarmMaxBlockNum;        //±¨¾¯Ä£¿éÄÚ´æ³Ø×î¶àÏòÏµÍ³ÉêÇëµÄÄÚ´æ¿é£¨block£©¸öÊý£¬Ã¿¸öblockÎª64MB, ³¬¹ýÕâ¸öÉÏÏÞÔò²»ÏòÏµÍ³ÉêÇë£¬0±íÊ¾ÎÞÉÏÏÞ
    DWORD    dwAlarmReleaseInterval;                //±¨¾¯Ä£¿é¿ÕÏÐÄÚ´æÊÍ·ÅµÄ¼ä¸ô£¬µ¥Î»Ãë£¬Îª0±íÊ¾²»ÊÍ·Å
    DWORD   dwObjectReleaseInterval;   //¶ÔÏóÉêÇëÄ£¿é¿ÕÏÐÄÚ´æÊÍ·ÅµÄ¼ä¸ô£¬µ¥Î»Ãë£¬Îª0±íÊ¾²»ÊÍ·Å
    BYTE    byRes[508];                //±£Áô
}NET_DVR_LOCAL_MEM_POOL_CFG, *LPNET_DVR_LOCAL_MEM_POOL_CFG;

typedef struct tagNET_DVR_LOCAL_MODULE_RECV_TIMEOUT_CFG
{
    DWORD        dwPreviewTime;        //Ô¤ÀÀÄ£¿é³¬Ê±Ê±¼ä
    DWORD        dwAlarmTime;        //±¨¾¯Ä£¿é³¬Ê±Ê±¼ä
    DWORD        dwVodTime;            //»Ø·ÅÄ£¿é³¬Ê±Ê±¼ä
    DWORD        dwElse;                //ÆäËûÄ£¿é
    BYTE        byRes[512];                            //±£Áô
}NET_DVR_LOCAL_MODULE_RECV_TIMEOUT_CFG, *LPNET_DVR_LOCAL_MODULE_RECV_TIMEOUT_CFG;

typedef struct tagNET_DVR_RTSP_PARAMS_CFG
{
    DWORD    dwMaxBuffRoomNum;    //rtp over udpÅÅÐò¿ª±ÙµÄ×î´ó»º³åÇø¸öÊý£¬0ÎªÎÞÐ§£¬Ê¹ÓÃÄ¬ÈÏÖµ20
    //Ò»¸ö»º³åÇø¿ª±ÙÄÚ´æÎª10K¶àÒ»µã£¬»º³åÇø¸öÊýÔ½¶à£¬´¦ÀíÂÒÐòµÄÄÜÁ¦ÔòÔ½Ç¿£¬Á÷³©ÐÔÔ½ºÃ£¬ÑÓÊ±Ò²Ô½´ó
    BYTE    byUseSort;    //ÊÇ·ñ¿ªÆôrtp over udpÅÅÐò£¬ 0-²»¿ªÆô  1-¿ªÆô
    BYTE    byRes[123];
}NET_DVR_RTSP_PARAMS_CFG, *LPNET_DVR_RTSP_PARAMS_CFG;

typedef  struct  tagNET_DVR_OPTICAL_CHANNEL_BIND
{
    WORD wChannelIndex;    //¹â¿ÚºÅ(0-7)
    WORD wSubChannel;      //¹â¿Ú×ÓÍ¨µÀºÅ£¬È¡Öµ·¶Î§´ÓÄÜÁ¦¼¯»ñÈ¡
    BYTE  byBind;      //0-²»°ó¶¨»òÇå³ý°ó¶¨£¬1-°ó¶¨
    BYTE  byRes[3];
}NET_DVR_OPTICAL_CHANNEL_BIND,*LPNET_DVR_OPTICAL_CHANNEL_BIND;

typedef struct tagNET_DVR_OPTICAL_CHANNEL_CFG
{
    DWORD dwSize;
    NET_DVR_OPTICAL_CHANNEL_BIND struBindVideo;//ÊÓÆµ°ó¶¨
    NET_DVR_OPTICAL_CHANNEL_BIND struBindAudio;//ÒôÆµ°ó¶¨
    BYTE  byRes[16];           //±£Áô   
}NET_DVR_OPTICAL_CHANNEL_CFG,*LPNET_DVR_OPTICAL_CHANNEL_CFG;

typedef struct tagNET_DVR_OPTICAL_INFO
{
    DWORD dwSize;
    BYTE  bySlotNum;//±àÂë×ÓÏµÍ³²ÛÎ»ºÅ
    BYTE  byChannel; //±àÂëÍ¨µÀºÅ
    BYTE  byRes[18];
}NET_DVR_OPTICAL_INFO,*LPNET_DVR_OPTICAL_INFO;

//ÒôÆµÇÐ»»
typedef struct tagNET_DVR_AUDIO_SURCHAN_CFG
{
    DWORD dwSize;
    BYTE  byStatus;       //ÒôÆµÊÇ·ñ¿ªÆô£¬1-¿ª£¬0-¹Ø
    BYTE  byRes1[3];
    //ÒÔÏÂ²ÎÊýµ±byStatus == 1Ê±ÓÐÐ§
    DWORD dwSubWinNum; //¹ØÁªµÄ×Ó´°¿ÚºÅ
    DWORD dwSurChanNum;             /*¼à¿ØÍ¨µÀºÅ  */   
    NET_DVR_IPADDR struIpaddr;            /*¼à¿ØÍ¨µÀµØÖ· */
    WORD   wPort;                          /*¼à¿ØÍ¨µÀ¶Ë¿Ú */     
    BYTE   byRes2[14];
}NET_DVR_AUDIO_SURCHAN_CFG, *LPNET_DVR_AUDIO_SURCHAN_CFG;

//¶Ë¿Ú¾ÛºÏ
#define MAX_ETHERNET_PORT_NUM       8//Ã¿ÌõÁ´Â·×î´ó¶Ë¿ÚÊý
typedef struct tagNET_DVR_ETHERNET_CHANNEL_INFO
{
    DWORD dwSize;
    BYTE byConverge[MAX_ETHERNET_PORT_NUM];
    //byConverge[i] = j±íÊ¾½«µÚi¸ö¶Ë¿Ú¼ÓÈëµ½µÚjÌõÁ´Â·£¬jµÄÈ¡ÖµÎª1-8,j=0±íÊ¾ÒÆ³ý
    BYTE byRes[32];
}NET_DVR_ETHERNET_CHANNEL_INFO,*LPNET_DVR_ETHERNET_CHANNEL_INFO;

//³©ÏÔ
typedef struct tagNET_DVR_SPARTAN_INFO
{
    DWORD  dwSize;
    BYTE   bySpartanStatus; //0-³©ÏÔ¹Ø£¬1-³©ÏÔ¿ª
    BYTE   byRes[31];
}NET_DVR_SPARTAN_INFO,*LPNET_DVR_SPARTAN_INFO;

typedef struct tagNET_DVR_IPADDR_FILTERCFG
{
    DWORD dwSize;
    BYTE byEnable; //ÆôÓÃIPµØÖ·¹ýÂË£¬0-·ñ£¬1-ÊÇ
    BYTE byFilterType; //¹ýÂËÀàÐÍ£¬0-½ûÓÃ£¬1-ÔÊÐí
    BYTE byRes[18];
    BYTE byIPAddr[1024];    //IPµØÖ·ÐÅÏ¢£¬¸ñÊ½192.168.1.2;192.168.1.3
}NET_DVR_IPADDR_FILTERCFG, *LPNET_DVR_IPADDR_FILTERCFG;

typedef struct tagNET_DVR_LOGO_OVERLAYCFG
{
    DWORD dwSize;
    BYTE  byEnable; //ÊÇ·ñÆôÓÃ£¬0-·ñ£¬1-ÊÇ
    BYTE  byRes1[3];
    DWORD dwCoordinateX;    //Í¼Æ¬ÏÔÊ¾ÇøÓòX×ø±ê
    DWORD dwCoordinateY;    //Í¼Æ¬ÏÔÊ¾ÇøÓòY×ø±ê
    WORD  wPicWidth; //Í¼Æ¬¿í
    WORD  wPicHeight; //Í¼Æ¬¸ß
    BYTE  byRes[16];        //±£Áô
}NET_DVR_LOGO_OVERLAYCFG,*LPNET_DVR_LOGO_OVERLAYCFG;


typedef struct tagNET_DVR_INVALID_DISK_PARAM
{
    NET_DVR_STRUCTHEAD    struStructHead;
    DWORD                dwDiskNo;            // ´ÅÅÌºÅ
    BYTE                byDelAll;            // 0-É¾³ýdwDiskNo  1-É¾³ýÈ«²¿ÎÞÐ§´ÅÅÌ
    BYTE                 byres[31];
}NET_DVR_INVALID_DISK_PARAM, *LPNET_DVR_INVALID_DISK_PARAM;


typedef struct tagNET_DVR_INVALID_MOUNT_DISK_PARAM
{
    NET_DVR_STRUCTHEAD    struStructHead;
    DWORD                dwDiskNo;            // ´ÅÅÌºÅ
    BYTE                 byres[32];
}NET_DVR_MOUNT_DISK_PARAM, *LPNET_DVR_MOUNT_DISK_PARAM;

// ³¤Á¬½Ó»Øµ÷ÀàÐÍ
typedef enum
{
    NET_SDK_CALLBACK_TYPE_STATUS = 0,        // »Øµ÷×´Ì¬Öµ
        NET_SDK_CALLBACK_TYPE_PROGRESS,            // »Øµ÷½ø¶ÈÖµ
        NET_SDK_CALLBACK_TYPE_DATA                // »Øµ÷Êý¾ÝÄÚÈÝ
}NET_SDK_CALLBACK_TYPE;


// »Øµ÷ÀàÐÍÎªNET_SDK_CALLBACK_TYPE_STATUSÊ±µÄ×´Ì¬Öµ
typedef enum
{
    NET_SDK_CALLBACK_STATUS_SUCCESS = 1000,        // ³É¹¦
        NET_SDK_CALLBACK_STATUS_PROCESSING,            // ´¦ÀíÖÐ
        NET_SDK_CALLBACK_STATUS_FAILED,                // Ê§°Ü
        NET_SDK_CALLBACK_STATUS_EXCEPTION,            // Òì³£
        NET_SDK_CALLBACK_STATUS_LANGUAGE_MISMATCH,    //£¨IPCÅäÖÃÎÄ¼þµ¼Èë£©ÓïÑÔ²»Æ¥Åä
        NET_SDK_CALLBACK_STATUS_DEV_TYPE_MISMATCH,    //£¨IPCÅäÖÃÎÄ¼þµ¼Èë£©Éè±¸ÀàÐÍ²»Æ¥Åä
        NET_DVR_CALLBACK_STATUS_SEND_WAIT           // ·¢ËÍµÈ´ý
}NET_SDK_CALLBACK_STATUS_NORMAL;


//Ò»¼üÅäÖÃÍ¨ÓÃ×´Ì¬
#define NET_SDK_OKC_STATUS_SUCCESS                1000  //Ò»¼üÅäÖÃ³É¹¦
#define NET_SDK_OKC_STATUS_FAILED                1002  //Ò»¼üÅäÖÃÊ§°Ü

//Ò»¼üÅäÖÃCVR×´Ì¬
#define NET_SDK_OKC_STATUS_START_CONFIG            1003  //¿ªÊ¼ÅäÖÃ
#define NET_SDK_OKC_CHECK_HD                    1004  //¼ì²â´ÅÅÌ
#define NET_SDK_OKC_INIT_HD                        1005  //³õÊ¼»¯´ÅÅÌ
#define NET_SDK_OKC_CREATE_RAID_OR_SINGLE_DISK    1006  //´´½¨ÕóÁÐ»òÕßµ¥ÅÌÄ£Ê½
#define NET_SDK_OKC_INIT_CVR_SERVICE            1007  //³õÊ¼»¯CVR·þÎñ
#define NET_SDK_OKC_CREATE_RECORD_VOLUME        1008  //´´½¨Â¼Ïñ¾í

//ÒÔÏÂÎªÒ»¼üÅäÖÃÊ§°ÜµÄ×´Ì¬Âë
#define NET_SDK_OKC_ERR_LOAD_CONF_FAILED              1009 //¼ÓÔØÅäÖÃÎÄ¼þÊ§°Ü
#define NET_SDK_OKC_ERR_NOT_SUPPORT_RAID_LEVLE        1010 //²»Ö§³Ö´ËÖÖÀàÐÍµÄraid 
#define NET_SDK_OKC_ERR_CONFIGURATION_CONFLICT          1011 //ÏµÍ³ÒÑ¾­´æÔÚraid»ò´æ´¢³Ø
#define NET_SDK_OKC_ERR_GET_DISK_INFO_FAILED          1012 //»ñÈ¡´ÅÅÌÐÅÏ¢Ê§°Ü
#define NET_SDK_OKC_ERR_CHECK_DISK_FAILED             1013 //¼ì²â´ÅÅÌÊ§°Ü
#define NET_SDK_OKC_ERR_INIT_DISK_FAILED              1014 //³õÊ¼»¯´ÅÅÌÊ§°Ü
#define NET_SDK_OKC_ERR_DISK_CAPACITY_SMALL           1015 //´ÅÅÌ×ÜÈÝÁ¿²»×ã
#define NET_SDK_OKC_ERR_BOTH_SV_NS                    1016 //Í¬Ê±´æÔÚSVÅÌºÍNSÅÌ
#define NET_SDK_OKC_ERR_CREATE_RAID_FAILED            1017 //´´½¨raidÊ§°Ü
#define NET_SDK_OKC_ERR_GET_RAID_FAILED               1018 //»ñÈ¡raidÊ§°Ü
#define NET_SDK_OKC_ERR_CREATE_SPARE_FAILED           1019 //´´½¨ÈÈ±¸ÅÌÊ§°Ü
#define NET_SDK_OKC_ERR_CREATE_STORAGE_POOL_FAILED    1020 //´´½¨´æ´¢³ØÊ§°Ü
#define NET_SDK_OKC_ERR_GET_POOL_INFO_FAILED          1021 //»ñÈ¡´æ´¢³ØÐÅÏ¢Ê§°Ü
#define NET_SDK_OKC_ERR_CREATE_LUN_FAILED             1022 //´´½¨lun¾íÊ§°Ü
#define NET_SDK_OKC_ERR_GET_LUN_INFO_FAILED           1023 //»ñÈ¡lunÐÅÏ¢Ê§°Ü
#define NET_SDK_OKC_ERR_CREATE_BACKUP_FAILED          1024 //´´½¨Ô¤Áô¾íÊ§°Ü
#define NET_SDK_OKC_ERR_GET_BACKUP_FAILED                1025 //»ñÈ¡Ô¤Áô¾íÊ§°Ü
#define NET_SDK_OKC_ERR_CREATE_PRIVATE_LUN_FAILED        1026 //´´½¨Ë½ÓÐ¾íÊ§°Ü
#define NET_SDK_OKC_ERR_CREATE_RV_FAILED              1027 //´´½¨Â¼Ïñ¾íÊ§°Ü
#define NET_SDK_OKC_ERR_CREATE_ARCH_RV_FAILED         1028 //´´½¨´æµµ¾íÊ§°Ü
#define NET_SDK_OKC_ERR_START_CVR_SERVICE_FAILED      1029 //¿ªÆôCVR·þÎñÊ§°Ü

//Ò»¼üÅäÖÃSAN×´Ì¬
#define NET_SDK_OKC_CREATING_ARRAY                    1030  //´´½¨ÕóÁÐ½×¶Î
#define NET_SDK_OKC_CREATING_STORAGE_POOL            1031  //´´½¨´æ´¢³Ø½×¶Î
#define NET_SDK_OKC_CREATING_LUN_VOL                1032  //´´½¨Âß¼­¾í½×¶Î
#define NET_SDK_OKC_CREATING_ISCSI                    1033  //´´½¨ISCSI½×¶Î
#define NET_SDK_OKC_ERR_HOT_SPARE_CONFICT            1034  //ÒÑ´æÔÚÈÈ±¸ÅÌ
#define NET_SDK_OKC_ERR_STORAGE_POOL_CONFICT        1035  //ÒÑ´æÔÚ´æ´¢³Ø

typedef enum
{
    NET_SDK_GET_NEXT_STATUS_SUCCESS = 1000,    // ³É¹¦¶ÁÈ¡µ½Êý¾Ý£¬¿Í»§¶Ë´¦ÀíÍê±¾´ÎÊý¾ÝºóÐèÒªÔÙ´Îµ÷ÓÃNET_DVR_RemoteConfigGetNext»ñÈ¡ÏÂÒ»ÌõÊý¾Ý
        NET_SDK_GET_NETX_STATUS_NEED_WAIT,        // ÐèµÈ´ýÉè±¸·¢ËÍÊý¾Ý£¬¼ÌÐøµ÷ÓÃNET_DVR_RemoteConfigGetNextº¯Êý
        NET_SDK_GET_NEXT_STATUS_FINISH,            // Êý¾ÝÈ«²¿È¡Íê£¬´ËÊ±¿Í»§¶Ë¿Éµ÷ÓÃNET_DVR_StopRemoteConfig½áÊø³¤Á¬½Ó
        NET_SDK_GET_NEXT_STATUS_FAILED,            // ³öÏÖÒì³££¬¿Í»§¶Ë¿Éµ÷ÓÃNET_DVR_StopRemoteConfig½áÊø³¤Á¬½Ó
}NET_SDK_GET_NEXT_STATUS;

//µ¼ÈëÅäÖÃÎÄ¼þ´íÎóÂë
typedef enum tagNET_SDK_IPC_CFG_FILE_ERR_CODE
{
    NET_SDK_IPC_CFG_FILE_NO_ERR = 0,                                /* Ã»³ö´í */
        NET_SDK_IPC_CFG_FILE_ERR_CODE_CHANNEL_INVALID = 1,       /* Í¨µÀID·Ç·¨ */
        NET_SDK_IPC_CFG_FILE_ERR_CODE_CHANNEL_DUPLICATE,         /* Í¨µÀIDÖØ¸´ */
        NET_SDK_IPC_CFG_FILE_ERR_CODE_IP_INVALID,              /* Í¨µÀIP»òÓòÃû·Ç·¨ */
        NET_SDK_IPC_CFG_FILE_ERR_CODE_IP_DUPLICATE,           /* Í¨µÀIP»òÓòÃûÖØ¸´ */
        NET_SDK_IPC_CFG_FILE_ERR_CODE_IP_CONFLICT_WITH_LOCAL, /* Í¨µÀIPÓë±¾µØIP³åÍ» */
        NET_SDK_IPC_CFG_FILE_ERR_CODE_PROTOCOL_INVALID,         /* Ð­Òé´íÎó */
        NET_SDK_IPC_CFG_FILE_ERR_CODE_PORT_INVALID,             /* ¹ÜÀí¶Ë¿Ú´íÎó */
        NET_SDK_IPC_CFG_FILE_ERR_CODE_DEVICE_CHANNEL_ERR,   /* Éè±¸Í¨µÀºÅ´íÎó */
        NET_SDK_IPC_CFG_FILE_ERR_CODE_USER_NAME_ERR,       /* ÓÃ»§Ãûº¬·Ç·¨×Ö·û */
        NET_SDK_IPC_CFG_FILE_ERR_CODE_PASSWD_ERR,             /* ÃÜÂëº¬·Ç·¨×Ö·û */
        NET_SDK_IPC_CFG_FILE_ERR_CODE_TRANSPORT_PROTOCOL_INVALID /*´«ÊäÐ­Òé´íÎó*/
}NET_SDK_IPC_CFG_FILE_ERR_CODE;

//IPCÉý¼¶´íÎóÂë
typedef enum
{
    NET_SDK_UPGRADE_IPC_INVALID = 0,                //ÎÞÐ§Í¨µÀ»òÎ´Ñ¡Ôñ¸ÃÍ¨µÀÉý¼¶
        NET_SDK_UPGRADE_IPC_SUCCESS,                    //Éý¼¶³É¹¦
        NET_SDK_UPGRADE_IPC_OFFLINE,                    //IPC²»ÔÚÏß
        NET_SDK_UPGRADE_IPC_NOT_SUPPORT,                //IPC²»Ö§³ÖÉý¼¶ÃüÁî
        NET_SDK_UPGRADE_IPC_LANGUAGE_MISMATCH,            //ÓïÑÔ²»Æ¥Åä
        NET_SDK_UPGRADE_IPC_WRITE_FLASH_FAILED,            //Ð´flshÊ§°Ü
        NET_SDK_UPGRADE_IPC_OTHER_ERROR                    //ÆäËû´íÎó
}NET_SDK_UPGRADE_IPC_ERR_CODE;

typedef enum
{
    NET_SDK_REMOTE_CONFIG_STATUS_SUCCESS = 1001,//Â¼²¥Ö÷»úÒ»¼ü·¢²¼³É¹¦
        NET_SDK_REMOTE_CONFIG_STATUS_FAILED,    //Â¼²¥Ö÷»úÒ»¼ü·¢²¼Ê§°Ü
        NET_SDK_REMOTE_CONFIG_STATUS_PROCESSING    //Â¼²¥Ö÷»úÒ»¼ü·¢²¼ÕýÔÚ»ñÈ¡
}NET_SDK_REMOTE_CONFIG_STATUS;

#define MAX_CODE_CARD_SUPPORTDISPNUMS 8//Ã¿¸ö±àÂë¿¨×î¶àÖ§³ÖµÄÏÔÊ¾Í¨µÀÊý
#define MAX_SUPPORT_RES 32

typedef enum _BOARD_TYPE
{
    DS4004HC_BOARD        =2,  //4004HC
        DS4008HC_BOARD        =3,  //4008HC
        DS4016HC_BOARD        =4,  //4016HC
        DS4001HF_BOARD        =5,  //4001HF
        DS4004HF_BOARD        =6,  //4004HF
        DS4002MD_BOARD        =7,  //4002MD
        DS4004MD_BOARD        =8,  //4004MD
        DS4016HCS_BOARD        =9,  //4016HCS
        DS4004HC_PLUS_BOARD    =13, //4004HC+
        DS4008HC_PLUS_BOARD    =14, //4008HC+
        DS4016HC_PLUS_BOARD    =15, //4016HC+
        DS4008HF_BOARD        =16, //4008HF
        DS4008MD_BOARD        =17, //4008MD
        DS4008HS_BOARD        =18, //4008HS
        DS4016HS_BOARD        =19, //4016HS
        
        DS4108HCV_BOARD        =20, //4108HCV
        DS4116HCV_BOARD        =21, //4116HCV
        DS5016HC_BOARD        =22, //5016HC
        
        DS4208HFV_BOARD        =23, //4208HFV
        DS4216HC_BOARD        =24, //4216HC
        DS4216HFV_BOARD        =25, //4216HFV
        
        DS5008HF_BOARD        =26, //5008HF
        DS5116HF_BOARD        =27, //5116HF
        
        DS5216HC_BOARD        =28, //5216HC
        DS5208HF_BOARD        =29, //5208HF
        DS5216HF_BOARD        =30, //5216HF
        
        DS4101HD_BOARD        =31, //4101HD
        DS4102HD_BOARD        =32, //4102HD
        DS4104HD_BOARD        =33, //4104HD
        
        DS4002MD_PLUS_BOARD =34, //4002MD+  
        DS4004MD_PLUS_BOARD =35, //4004MD+
        
        DS4204HFV_BOARD        =36, //4204HFV
        DS4308HCV_BOARD        =37, //4308HCV
        DS4308HFV_BOARD        =38, //4308HFV
        DS4316HCV_BOARD        =39, //4316HCV
        DS4316HFV_BOARD        =40, //4316HFV
        DS4304HD_BOARD        =41, //4304HD
        DS4304HFH_BOARD     =42, //4304HFH
        DS4304HFV_BOARD     =43, //4304HFV
        DS4302HFH_BOARD     =44, //4302HFH
        DS5316HF_BOARD      =45, //5316HF
        DS4308HW_BOARD      =46, //4308HW
        DS4316HW_BOARD      =47, //4316HW
        DS4308MD_BOARD      =48, //4308MD
        UNKNOWN_BOARD_TYPE  =0xffffffff,
}BOARD_TYPE;

typedef struct tagNET_DVR_CODECARD_ABILITY /*¸ßÇå±àÂë¿¨ÄÜÁ¦¼¯*/
{
    BYTE byCardType;      //±àÂë¿¨ÀàÐÍ(°´BOARD_TYPEÖÐµÄÃ¶¾Ù)
    BYTE byCodeNums;      //±àÂëÍ¨µÀÊý 
    BYTE byDispNums;      //ÏÔÊ¾Í¨µÀÊý 
    BYTE byCodeStartIdx;     //Ê×¸ö±àÂëÍ¨µÀÔÚËùÓÐ±àÂëÍ¨µÀÖÐµÄË÷Òý 
    BYTE byDispStartIdx;     //Ê×¸öÏÔÊ¾Í¨µÀÔÚËùÓÐÏÔÊ¾Í¨µÀÖÐµÄË÷Òý
    BYTE byRes1[3]; 
    DWORD dwVgaSupportResolution[MAX_SUPPORT_RES/*32*/];//Ö§³ÖµÄ·Ö±æÂÊ
    DWORD dwHdmiSupportResolution[MAX_SUPPORT_RES/*32*/];//Ö§³ÖµÄ·Ö±æÂÊ
    DWORD dwDviSupportResolution[MAX_SUPPORT_RES/*32*/];//Ö§³ÖµÄ·Ö±æÂÊ
    DWORD dwYpbprSupportResolution[MAX_SUPPORT_RES/*32*/];//Ö§³ÖµÄ·Ö±æÂÊ
    BYTE byDispFormat[MAX_CODE_CARD_SUPPORTDISPNUMS];   //Ö§³ÖµÄÊä³öÄ£Ê½(°´HD_DISPLAY_FORMATÖÐµÄÃ¶¾Ù) 
    BYTE byWindowMode[MAX_CODE_CARD_SUPPORTDISPNUMS][12]; //Ö§³ÖµÄ´°¿ÚÄ£Ê½(±ÈÈç1,2,4,9,16))
    BYTE byRes2[36];
}NET_DVR_CODECARD_ABILITY,*LPNET_DVR_CODECARD_ABILITY;

#define        MAX_CODE_CARD_NUM            8   //×î¶à¸ßÇå±àÂë¿¨Êý
typedef struct tagNET_DVR_CODESVR_ABILITY
{
    DWORD dwSize;      /* ½á¹¹Ìå´óÐ¡ */
    BYTE byCardNums;      /* ±àÂë¿¨Êý */
    BYTE byStartChan;     /* ÆðÊ¼Í¨µÀºÅ */
    BYTE byRes1[2];
    NET_DVR_CODECARD_ABILITY struCodeCardAbility[MAX_CODE_CARD_NUM];
    BYTE byRes2[64];
}NET_DVR_CODESVR_ABILITY, *LPNET_DVR_CODESVR_ABILITY;

typedef struct tagNET_DVR_CODER_SERVER_OUTPUT_CFG
{
    DWORD  dwSize;
    BYTE   byDispChanType;        /*ÏÔÊ¾Í¨µÀÀàÐÍ£º0-BNC£¬1-VGA£¬2-HDMI£¬3-DVI*/ //´Ë²ÎÊýÖ»ÄÜ»ñÈ¡
    BYTE   byVedioFormat;      /*1:NTSC,2:PAL£¬0-NULL*/
    BYTE   byRes1[2];
    DWORD  dwResolution;       //·Ö±æÂÊ
    DWORD  dwWindowMode;        /*»­ÃæÄ£Ê½£¬Ö§³ÖÄ£Ê½´ÓÄÜÁ¦¼¯»ñÈ¡*/
    BYTE   byRes2[64];
}NET_DVR_CODER_SERVER_OUTPUT_CFG,*LPNET_DVR_CODER_SERVER_OUTPUT_CFG;

typedef struct tagNET_DVR_DISPLAY_START_INFO 
{
    DWORD  dwSize;
    DWORD  dwDisplayChan; //ÏÔÊ¾Í¨µÀºÅ
    DWORD  dwCodeChan; //±àÂëÍ¨µÀºÅ
    DWORD  dwWinNum;   //´°¿ÚºÅ£¬´Ó1Æð
    BYTE   byEnableAudio; //¿ªÆôÒôÆµ£¬0-¹Ø£¬1-¿ª
    BYTE   byRes[31];
}NET_DVR_DISPLAY_START_INFO,*LPNET_DVR_DISPLAY_START_INFO;

typedef struct tagNET_DVR_CODER_WINDOW_INFO
{
    DWORD dwSize;
    DWORD dwDisplayChan;//ÏÔÊ¾Í¨µÀºÅ
    DWORD dwWinNum;     //´°¿ÚºÅ£¬´Ó1¿ªÊ¼
    BYTE  byRes[16];
}NET_DVR_CODER_WINDOW_INFO,*LPNET_DVR_CODER_WINDOW_INFO;

typedef struct tagNET_DVR_WINDOW_STATUS
{
    DWORD  dwSize;         //½á¹¹´óÐ¡
    DWORD  dwCodeChan;      /*±àÂëÍ¨µÀºÅ*/
    BYTE   byDisplay;              /*ÊÇ·ñÊä³ö£¬0-·ñ£¬1-ÊÇ*/
    BYTE   byAudio;            /*ÒôÆµÊÇ·ñ¿ªÆô,0-·ñ£¬1-ÊÇ*/   
    BYTE   byRes[30];                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
}NET_DVR_WINDOW_STATUS,*LPNET_DVR_WINDOW_STATUS;

typedef struct tagNET_DVR_RECORD_LOCK_PERCENTAGE
{
    DWORD     dwSize;              //½á¹¹Ìå´óÐ¡
    BYTE     byPercentage;        //°Ù·Ö±È£¬È¡Öµ·¶Î§[0,100]
    BYTE      byRes[31];          //±£Áô
}NET_DVR_RECORD_LOCK_PERCENTAGE, *LPNET_DVR_RECORD_LOCK_PERCENTAGE;

typedef struct tagNET_DVR_UPDATE_RECORD_INFO
{
    DWORD             dwSize;             //½á¹¹Ìå´óÐ¡
    NET_DVR_STREAM_INFO struStreasmInfo;     //Á÷ID
    DWORD              dwBeginTime;    //Â¼Ïñ×ÜµÄ¿ªÊ¼Ê±¼ä
    DWORD             dwEndTime;        //Â¼Ïñ×ÜµÄ½áÊøÊ±¼ä
    BYTE              byRes[32];       //±£Áô
}NET_DVR_UPDATE_RECORD_INFO, *LPNET_DVR_UPDATE_RECORD_INFO;

typedef struct tagNET_DVR_CMD_TRIGGER_PERIOD_RECORD_PARA
{
    NET_DVR_STREAM_INFO        struStreamInfo; 
    DWORD                    dwCmdType;                         //Íâ²¿´¥·¢ÀàÐÍ 
    DWORD                    dwRecordTimeLen;                //Â¼Ïñ³ÖÐøÊ±¼ä£¬µ¥Î»£ºÃë
    BYTE                    byEventID[MAX_EVENTID_LEN];        //ÊÂ¼þID£¬×÷Îª¸½¼ÓÐÅÏ¢
    BYTE                    byRes[128];
}NET_DVR_CMD_TRIGGER_PERIOD_RECORD_PARA, *LPNET_DVR_CMD_TRIGGER_PERIOD_RECORD_PARA;

typedef struct tagNET_DVR_LOCK_FILE_BY_NAME_PARA
{
    BYTE                byFileName[NAME_LEN];     // Â¼ÏñÎÄ¼þÃû£¬ÀÏÐ­ÒéÖ»´«32¸öÎÄ¼þÃû
    DWORD                dwLockDuration;            // Ëø¶¨³ÖÐøÊ±¼ä,µ¥Î»Ãë£¬0xffffffff±íÊ¾ÓÀ¾ÃËø¶¨
    BYTE                byRes[512];
}NET_DVR_LOCK_FILE_BY_NAME_PARA, *LPNET_DVR_LOCK_FILE_BY_NAME_PARA;


typedef struct tagNET_DVR_MULTI_STREAM_COMPRESSIONCFG_COND
{
    DWORD                    dwSize;
    NET_DVR_STREAM_INFO        struStreamInfo;
    DWORD                    dwStreamType; //ÂëÁ÷ÀàÐÍ£¬0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷£¬2-ÊÂ¼þÀàÐÍ£¬3-ÂëÁ÷3£¬¡­¡­
    BYTE                    byRes[32];
}NET_DVR_MULTI_STREAM_COMPRESSIONCFG_COND, *LPNET_DVR_MULTI_STREAM_COMPRESSIONCFG_COND;


typedef struct tagNET_DVR_MULTI_STREAM_COMPRESSIONCFG
{
    DWORD                            dwSize;
    DWORD                            dwStreamType;        //ÂëÁ÷ÀàÐÍ£¬0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷£¬2-ÊÂ¼þÀàÐÍ£¬3-ÂëÁ÷3£¬¡­¡­
    NET_DVR_COMPRESSION_INFO_V30    struStreamPara;        //ÂëÁ÷Ñ¹Ëõ²ÎÊý
    BYTE                            byRes[80];
}NET_DVR_MULTI_STREAM_COMPRESSIONCFG, *LPNET_DVR_MULTI_STREAM_COMPRESSIONCFG;

typedef struct tagNET_DVR_PUSHALARMINFO_V40
{
    DWORD dwAlarmType; /*0-ÐÅºÅÁ¿±¨¾¯,1-Ó²ÅÌÂú,2-ÐÅºÅ¶ªÊ§,3£­ÒÆ¶¯Õì²â,4£­Ó²ÅÌÎ´¸ñÊ½»¯,5-¶ÁÐ´Ó²ÅÌ³ö´í,6-ÕÚµ²±¨¾¯,7-ÖÆÊ½²»Æ¥Åä, 8-·Ç·¨·ÃÎÊ, 9-ÊÓÆµÐÅºÅÒì³££¬10-Â¼ÏñÒì³£ 11- ÖÇÄÜ³¡¾°±ä»¯  12-ÕóÁÐÒì³£ */
    union
    {
        BYTE byRes[300];
        struct
        {
            DWORD dwAlarmInputNumber;    /*°´Î»,µÚ0Î»¶ÔÓ¦µÚ0¸öÊäÈë¶Ë¿Ú,dwAlarmTypeÎª0Ê±ÐèÒªÉèÖÃ*/
            BYTE  byAlarmOutputNumber[MAX_ALARMOUT_V30];   /*°´Î»,µÚ0Î»¶ÔÓ¦µÚ0¸öÊä³ö¶Ë¿Ú, */
            BYTE  byAlarmRelateChannel[MAX_CHANNUM_V30];  /*°´Î»,µÚ0Î»¶ÔÓ¦µÚ0¸öÍ¨µÀ*/
            BYTE  byRes1[97];
            BYTE  byDeviceID[NAME_LEN]; /*Éè±¸µÄID´®*/
            BYTE  byRes2[7];
        }struIOAlarm;
        struct
        {
            BYTE byStreamID[STREAM_ID_LEN]; // IDÐÅÏ¢
            BYTE byRes1[132];
            BYTE byChannel[MAX_CHANNUM_V30];             /*°´Î»,0x2±íÊ¾µÚ1Í¨µÀ£¬µÚ1Î»¶ÔÓ¦µÚ1¸öÍ¨µÀ(´ÓÍ¨µÀ1¿ªÊ¼)£¬dwAlarmTypeÎª2»ò3, 6£¬9£¬10Ê±ÐèÒªÉèÖÃ, */
            BYTE byRes2[33];
            BYTE byDeviceID[NAME_LEN]; /*Éè±¸µÄID´®*/
            BYTE byRes3[7];
        }struStreamIDorChannel;
        struct
        {
            BYTE byRes1[228];
            BYTE byDiskNumber[MAX_DISKNUM_V30];  /*°´Î»,µÚ0Î»¶ÔÓ¦µÚ0¸öÓ²ÅÌ,dwAlarmTypeÎª1,4,5Ê±ÐèÒªÉèÖÃ*/
            BYTE byDeviceID[NAME_LEN]; /*Éè±¸µÄID´®*/
            BYTE byRes2[7];
        }struDiskAlarm;
    }uAlarmInfo;
}NET_DVR_PUSHALARMINFO_V40, *LPNET_DVR_PUSHALARMINFO_V40;

typedef struct tagNET_DVR_RECORD_PACK
{
    NET_DVR_STRUCTHEAD     struStruceHead;
    DWORD             dwPackageInterval;    // ´ò°üÊ±¼ä¼ä¸ô £¬Ê±¼äµ¥Î»£º·ÖÖÓ
    BYTE              byRes[32];               // ±£Áô
}NET_DVR_RECORD_PACK,*LPNET_DVR_RECORD_PACK;

#define NET_DVR_FIND_NAS_DIRECTORY     6161        //²éÕÒNASÄ¿Â¼
#define NET_DVR_NAS_FINDING       0   //ÕýÔÚ²éÕÒ
#define NET_DVR_NAS_RECV          1   //½ÓÊÕÊý¾Ý
#define NET_DVR_NAS_OVER          2   //²éÕÒ½áÊø
#define NET_DVR_NAS_EXCEPTION     3   //½ÓÊÕÒì³£
typedef struct tagNET_DVR_NET_DISK_SERACH_PARAM
{
    NET_DVR_IPADDR              struIP;         // IPµØÖ·
    WORD              wPort;      // IP¶Ë¿Ú
    BYTE                byRes[10];  // ±£Áô×Ö½Ú
}NET_DVR_NET_DISK_SERACH_PARAM, *LPNET_DVR_NET_DISK_SERACH_PARAM;


typedef struct tagNET_DVR_NET_DISK_SERACH_RET
{
    BYTE byDirectory[128];  // ·µ»ØµÄÎÄ¼þÄ¿Â¼
    BYTE byRes[20];
}NET_DVR_NET_DISK_SERACH_RET, *LPNET_DVR_NET_DISK_SERACH_RET;

typedef struct tagNET_DVR_WD1_CFG
{
    NET_DVR_STRUCTHEAD     struStruceHead;
    BYTE              byWD1Enable;         //WD1Ê¹ÄÜ¿ª¹Ø 0 ¹Ø±Õ 1 ¿ªÆô    
    BYTE                 byRes[31];      //±£Áô
}NET_DVR_WD1_CFG, *LPNET_DVR_WD1_CFG;

typedef struct tagNET_DVR_FTPCFG_V40
{
    NET_DVR_STRUCTHEAD     struStruceHead;
    BYTE                byEnableFTP;            /*ÊÇ·ñÆô¶¯ftpÉÏ´«¹¦ÄÜ£¬0-·ñ£¬1-ÊÇ*/
    BYTE                byProtocolType;             /*Ð­ÒéÀàÐÍ 0-FTP£¬1-SFTP*/
    WORD                wFTPPort;                /*¶Ë¿Ú*/
    union 
    {
        struct
        {
            BYTE            szDomain[64];        //·þÎñÆ÷µØÖ·£¬¿ÉÒÔÊ¹IPv4 IPv6»òÊÇÓòÃû
            BYTE            byRes1[80];
        }struDomain;
        struct
        {
            NET_DVR_IPADDR     struIp;             /*IPµØÖ·:IPv4 IPv6µØÖ·, 144×Ö½Ú*/
        }struAddrIP;
    }unionServer;  //Ê¹ÓÃÁªºÏÌå½á¹¹£¬·ÀÖ¹¼ÈÊÇIPµØÖ·ÓÖÊÇÓòÃûµÄÇé¿ö
    BYTE                szUserName[32];            /*ÓÃ»§Ãû*/
    BYTE                szPassWORD[16];            /*ÃÜÂë*/
    BYTE                szTopCustomDir[64];        /*×Ô¶¨ÒåÒ»¼¶Ä¿Â¼*/
    BYTE                szSubCustomDir[64];        /*×Ô¶¨Òå¶þ¼¶Ä¿Â¼*/
    BYTE                byDirLevel;                /*0 = ²»Ê¹ÓÃÄ¿Â¼½á¹¹£¬Ö±½Ó±£´æÔÚ¸ùÄ¿Â¼,    1 = Ê¹ÓÃ1¼¶Ä¿Â¼,2=Ê¹ÓÃ2¼¶Ä¿Â¼*/
    BYTE                 byTopDirMode;            /* Ò»¼¶Ä¿Â¼£¬0x1 = Ê¹ÓÃÉè±¸Ãû,0x2 = Ê¹ÓÃÉè±¸ºÅ,0x3 = Ê¹ÓÃÉè±¸ipµØÖ·£¬
                                                0x4=Ê¹ÓÃ¼à²âµã,0x5=Ê¹ÓÃÊ±¼ä(ÄêÔÂ),0x6-Ê¹ÓÃ×Ô¶¨Òå ,0x7=Î¥¹æÀàÐÍ,0x8=·½Ïò,0x9=µØµã*/
    BYTE                 bySubDirMode;           /*¶þ¼¶Ä¿Â¼£¬0x1=Ê¹ÓÃÍ¨µÀÃû,0x2=Ê¹ÓÃÍ¨µÀºÅ 0x3=Ê¹ÓÃÊ±¼ä(ÄêÔÂÈÕ),
                                                0x4=Ê¹ÓÃ³µµÀºÅ,0x5-Ê¹ÓÃ×Ô¶¨Òå, 0x6=Î¥¹æÀàÐÍ,0x7=·½Ïò,0x8=µØµã,0x9 = ³µÎ»±àºÅ*/
    BYTE                byType;                    /* 0-Ö÷·þÎñÆ÷£¬1-±¸·þÎñÆ÷*/
    BYTE                byEnableAnony;          /*ÆôÓÃÄäÃû 0-·ñ 1ÊÇ*/
    BYTE                byAddresType;           /*0 Ê¹ÓÃIPV4¡¢IPV6  1- Ê¹ÓÃÓòÃû*/
    BYTE                byFTPPicType;           //0-±£Áô£¬1-Í£³µ³¡×¥ÅÄÍ¼Æ¬ÃüÃû¹æÔò
    BYTE                 byPicArchivingInterval; //Í¼Æ¬¹éµµ¼ä¸ô[1~30],0±íÊ¾¹Ø±Õ
    NET_DVR_PICTURE_NAME_EX     struPicNameRule;   /* Í¼Æ¬ÃüÃû¹æÔò:     
    byFTPPicType ==1µÄÊ±ºò,×ÔÊý×éÄÚµÄÃüÃû¹æÔòÊÇÍ£³µ³¡×¥ÅÄÍ¼Æ¬ÃüÃû¹æÔò*/
    BYTE                byPicNameRuleType;      //Í¼Æ¬ÃüÁî¹æÔòÀàÐÍ£»0~Ä¬ÈÏÀàÐÍ£¬1~Í¼Æ¬Ç°×ºÃû¶¨Òå(ÆôÓÃstruPicNameRuleÖÐµÄbyPicNamePrefix×Ö¶Î)
    BYTE                 byRes[203];             /*±£Áô*/
}NET_DVR_FTPCFG_V40, *LPNET_DVR_FTPCFG_V40;

typedef struct tagNET_DVR_FTP_TYPE
{
    BYTE    byType;  // 0-Ö÷·þÎñÆ÷£¬1-±¸·þÎñÆ÷
    BYTE    byRes[3];
}NET_DVR_FTP_TYPE, *LPNET_DVR_FTP_TYPE;

//FTP·þÎñÆ÷²âÊÔ²ÎÊý½á¹¹Ìå
typedef struct 
{
    DWORD     dwSize;
    BYTE    byEnableFTP;            /*ÊÇ·ñÆô¶¯ftpÉÏ´«¹¦ÄÜ£¬0-·ñ£¬1-ÊÇ*/
    BYTE    byProtocolType;             /*Ð­ÒéÀàÐÍ 0-FTP£¬1-SFTP*/
    WORD    wFTPPort;                /*¶Ë¿Ú*/
    union 
    {
        BYTE    byRes[144];
        struct
        {
            BYTE    szDomain[MAX_DOMAIN_NAME];        //·þÎñÆ÷µØÖ·£¬¿ÉÒÔÊ¹IPv4 IPv6»òÊÇÓòÃû
            BYTE    byRes1[80];
        }struDomain;
        struct
        {
            NET_DVR_IPADDR     struIp;             /*IPµØÖ·:IPv4 IPv6µØÖ·, 144×Ö½Ú*/
        }struAddrIP;
    }unionServer;  //Ê¹ÓÃÁªºÏÌå½á¹¹£¬·ÀÖ¹¼ÈÊÇIPµØÖ·ÓÖÊÇÓòÃûµÄÇé¿ö
    
    BYTE    szUserName[NAME_LEN];            /*ÓÃ»§Ãû*/
    BYTE    szPassWORD[PASSWD_LEN];            /*ÃÜÂë*/
    BYTE    szTopCustomDir[MAX_CUSTOM_DIR];        /*×Ô¶¨ÒåÒ»¼¶Ä¿Â¼*/
    BYTE    szSubCustomDir[MAX_CUSTOM_DIR];        /*×Ô¶¨Òå¶þ¼¶Ä¿Â¼*/
    BYTE    byDirLevel;                /*0 = ²»Ê¹ÓÃÄ¿Â¼½á¹¹£¬Ö±½Ó±£´æÔÚ¸ùÄ¿Â¼,    1 = Ê¹ÓÃ1¼¶Ä¿Â¼,2=Ê¹ÓÃ2¼¶Ä¿Â¼*/
                                    BYTE    byTopDirMode;            /* Ò»¼¶Ä¿Â¼£¬0x1 = Ê¹ÓÃÉè±¸Ãû,0x2 = Ê¹ÓÃÉè±¸ºÅ,0x3 = Ê¹ÓÃÉè±¸ipµØÖ·£¬
                                                                    0x4=Ê¹ÓÃ¼à²âµã,0x5=Ê¹ÓÃÊ±¼ä(ÄêÔÂ),0x6-Ê¹ÓÃ×Ô¶¨Òå ,0x7=Î¥¹æÀàÐÍ,
                                    0x8=·½Ïò,0x9=µØµã*/
                                    BYTE    bySubDirMode;           /*¶þ¼¶Ä¿Â¼£¬0x1=Ê¹ÓÃÍ¨µÀÃû,0x2=Ê¹ÓÃÍ¨µÀºÅ 0x3=Ê¹ÓÃÊ±¼ä(ÄêÔÂÈÕ),
                                                                    0x4=Ê¹ÓÃ³µµÀºÅ,0x5-Ê¹ÓÃ×Ô¶¨Òå, 0x6=Î¥¹æÀàÐÍ,0x7=·½Ïò,0x8=µØµã,
                                    0x9 = ³µÎ»±àºÅ*/
                                    BYTE    byType;                    /* 0-Ö÷·þÎñÆ÷£¬1-±¸·þÎñÆ÷*/
                                    BYTE    byEnableAnony;          /*ÆôÓÃÄäÃû 0-·ñ 1ÊÇ*/
                                    BYTE    byAddresType;           /*0 Ê¹ÓÃIPV4¡¢IPV6  1- Ê¹ÓÃÓòÃû*/
                                    
                                    BYTE    byRes2[198];
}NET_DVR_FTP_SERVER_TEST_PARA, *LPNET_DVR_FTP_SERVER_TEST_PARA;

//·þÎñÆ÷²âÊÔ½á¹¹Ìå
typedef struct tagNET_DVR_SERVER_TEST_PARA
{
    DWORD    dwSize;
    union 
    {
        BYTE byRes[740];
        struct
        {
            NET_DVR_NTPPARA    struNtpPara;                    /*NTP·þÎñÆ÷²âÊÔ²ÎÊý80×Ö½Ú*/           
            BYTE    byRes1[660];
        }struNtpPara;
        struct
        {
            NET_DVR_SINGLE_NET_DISK_INFO_V40    struNasPara;   /*NAS·þÎñÆ÷²âÊÔ²ÎÊý480×Ö½Ú*/         
            BYTE    byRes1[260];
        }struNasPara;
        struct
        {
            NET_DVR_FTP_SERVER_TEST_PARA    struFtpPara;   /*FTP·þÎñÆ÷²âÊÔ²ÎÊý528×Ö½Ú*/          
            BYTE    byRes1[212];
        }struFtpPara;
        struct
        {
            NET_DVR_EMAILCFG_V30    struEmailPara;            /*Email·þÎñÆ÷²âÊÔ²ÎÊý660×Ö½Ú*/        
            BYTE    byRes1[80];
        }struEmailPara;
        struct
        {
            NET_DVR_IPADDR    struIp;                            /*IP³åÍ»²âÊÔ²ÎÊý24×Ö½Ú*/
            BYTE    byRes1[716];
        }struIpPara;
        struct  
        {
            NET_DVR_IPADDR  struIPAdder;
            WORD  wPort; //¶Ë¿ÚºÅ
            BYTE  byRes2[2];
            char  szUser[CLOUD_NAME_LEN/*48*/]; //ÓÃ»§Ãû
            char  szPassword[CLOUD_PASSWD_LEN/*48*/];     // ÃÜÂë
            NET_DVR_POOLPARAM  struPoolInfo[16];// Êý×é0±íÊ¾¿¨¿ÚÍ¼Æ¬Êý¾Ý³Ø£¬Êý×é1±íÊ¾Î¥ÕÂÍ¼Æ¬Êý¾Ý³Ø£¬Êý×é2±íÊ¾³µÁ¾Õì²âÊý¾Ý³Ø£¨IPC/D£©
            BYTE byRes1[486];
        }struCloudStoragePara;
        struct 
        {
            BYTE byPhoneNum[MAX_PHONE_NUM/*32*/];
            BYTE byRes1[708];
        }struPhoneNumPara;//¶ÌÐÅ²âÊÔ
    }unionServerPara; 
    BYTE byRes2[800]; 
}NET_DVR_SERVER_TEST_PARA, *LPNET_DVR_SERVER_TEST_PARA;

typedef struct  tagNET_DVR_GOP_INFO  //»ñÈ¡GOPË÷ÒýÐÅÏ¢½á¹¹Ìå,½¨Á¢Á¬½ÓÊ±Ê¹ÓÃ
{
    DWORD      dwSize;          //½á¹¹Ìå´óÐ¡
    LONG      lChannel;       //Í¨µÀºÅ
    NET_DVR_TIME_EX   struStartTime;    //¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_EX   struEndTime;     //½áÊøÊ±¼ä
    BYTE                 byRes[256];      // ±£Áô×Ö½Ú  
}NET_DVR_GOP_INFO, *LPNET_DVR_GOP_INFO;

typedef struct  tagNET_DVR_GOP_INFO_RET
{
    NET_DVR_TIME_V30   struGopTime;    //GopÐÅÏ¢Ê±¼äµã
    DWORD         dwDuration;    //ÐÅÏ¢³ÖÐøÊ±¼ä
    DWORD         dwDataSize;     //Ö¸ÕëpBuf´óÐ¡
    BYTE          byRes[128];
    char* pBuf;//GopÐÅÏ¢¿é
}NET_DVR_GOP_INFO_RET, *LPNET_DVR_GOP_INFO_RET;

typedef struct tagNET_DVR_GOP_INFO_PASSBACK   //ÖÇÄÜÊý¾ÝÐÅÏ¢»ØÌî
{
    DWORD       dwSize;                 //½á¹¹Ìå´óÐ¡
    NET_DVR_TIME_V30  struTime;         //¿ªÊ¼Ê±¼ä,µ±Êý¾ÝÀàÐÍÎªÖÇÄÜÔªÊý¾ÝÊ±£¬±íÊ¾µÄ¿ªÊ¼Ê±¼ä£¬µ±ÎªËõÂÔÍ¼Ê±£¬±íÊ¾µÄÊÇÍ¼Æ¬Ê±¼ä
    DWORD       dwDuration;             //ÐÅÏ¢³ÖÐøÊ±¼ä£¬½öµ±Êý¾ÝÀàÐÍÎªÖÇÄÜÔªÊý¾ÝÊ±ÓÐÐ§
    DWORD       dwMetaDataSize;         //Êý¾ÝÔ´µÄ´óÐ¡
    DWORD       dwPicDataSize;          //Í¼Æ¬Êý¾Ý´óÐ¡
    char*        pMetaDataBuffer;        //ÖÇÄÜÔªÊý¾Ý»º³åÇø
    char*       pPicDataBuf;            //Í¼Æ¬»º³åÇø
    BYTE        byRes[32];
}NET_DVR_GOP_INFO_PASSBACK, *LPNET_DVR_GOP_INFO_PASSBACK;

typedef struct tagNET_DVR_SINGLEWALLPARAM
{
    DWORD  dwSize;
    BYTE   byEnable;    
    BYTE   byRes1[3];
    DWORD  dwWallNum;//µçÊÓÇ½Êä³öºÅ
    //×ø±êÐëÎª»ù×¼×ø±êµÄÕûÊý±¶£¨128¡Á128£©£¬¿í¶ÈºÍ¸ß¶ÈÖµ²»ÓÃÉèÖÃ£¬¼´Îª»ù×¼Öµ
    NET_DVR_RECTCFG struRectCfg;
    BYTE    byRes2[36];
}NET_DVR_SINGLEWALLPARAM, *LPNET_DVR_SINGLEWALLPARAM;

/*´°¿ÚÐÅÏ¢*/
typedef struct tagNET_DVR_WALLWINCFG
{
    DWORD dwSize;
    BYTE  byEnable;
    BYTE  byRes1[7];
    DWORD dwWinNum;//´°¿ÚºÅ
    DWORD dwLayerIndex;//´°¿ÚÏà¶ÔÓ¦µÄÍ¼²ãºÅ
    NET_DVR_RECTCFG struWinPosition;//Ä¿µÄ´°¿Ú(Ïà¶ÔÏÔÊ¾Ç½)
    DWORD dwDeviceIndex;//·Ö²¼Ê½´óÆÁ¿ØÖÆÆ÷Éè±¸ÐòºÅ
    WORD wInputIndex;//ÊäÈëÐÅºÅÔ´
    BYTE  byRes2[14];
}NET_DVR_WALLWINCFG, *LPNET_DVR_WALLWINCFG;

typedef struct tagNET_DVR_WALL_INDEX
{
    DWORD    dwSize;
    BYTE    byWallNo;    //µçÊÓÇ½ÐòºÅ£¬´Ó1¿ªÊ¼
    BYTE    bySceneNo;    //³¡¾°ÐòºÅ
    BYTE    byRes1[2];
    DWORD    dwDeviceID;    //·Ö²¼Ê½×ÓÉè±¸ID
    DWORD    dwWindowNo;    //´°¿ÚÐòºÅ/ÐÅºÅÔ´ÐòºÅ
    BYTE    byRes2[32];
}NET_DVR_WALL_INDEX, *LPNET_DVR_WALL_INDEX;

typedef struct tagNET_DVR_WALLWINPARAM
{
    DWORD dwSize;
    BYTE  byTransparency; //Ê¹ÄÜÍ¸Ã÷¶È£¬0-¹Ø£¬·Ç0-¿ª    
    BYTE  byWinMode;//´°¿Ú·ÖÆÁÄ£Ê½£¬ÄÜÁ¦¼¯»ñÈ¡
    BYTE  byEnableSpartan;//³©ÏÔÊ¹ÄÜ£¬0-¹Ø£¬1-¿ª
    BYTE  byDecResource;  //Îª´°¿Ú·ÖÅäµÄ½âÂë×ÊÔ´£¬1-D1,2-720P,3-1080P
    BYTE  byWndShowMode; //´°¿ÚÏÔÊ¾Ä£Ê½£¬0-´Ë×Ö¶Î²»ÓÃ£¬1-×Ó´°¿ÚÄ£Ê½£¬2-×Ó´°¿ÚÈ«ÆÁÄ£Ê½
    BYTE  byRes1[3];
    DWORD dwAmplifyingSubWndNo; //È«ÆÁ×Ó´°¿ÚºÅ£¨1×Ö½ÚÇ½ºÅ+1×Ö½Ú×Ó´°¿ÚºÅ+2×Ö½Ú´°¿ÚºÅ£©
                                                                  //µ±byWndShowModeÎª2Ê±ÓÐÐ§£¬±íÊ¾µ±Ç°È«ÆÁÏÔÊ¾µÄ×Ó´°¿Ú
    BYTE  byRes[24];
}NET_DVR_WALLWINPARAM, *LPNET_DVR_WALLWINPARAM;

typedef struct tagNET_DVR_WALLSCENECFG
{
    DWORD    dwSize;
    BYTE    sSceneName[NAME_LEN];    //³¡¾°Ãû³Æ
    BYTE    byEnable;                //³¡¾°ÊÇ·ñÓÐÐ§£¬0-ÎÞÐ§£¬1-ÓÐÐ§
    BYTE    bySceneIndex;            //³¡¾°ºÅ£¬Ö»ÄÜ»ñÈ¡¡£»ñÈ¡ËùÓÐ³¡¾°Ê±Ê¹ÓÃ¸Ã²ÎÊý
    BYTE    byRes [78];
}NET_DVR_WALLSCENECFG, *LPNET_DVR_WALLSCENECFG;

typedef struct tagNET_DVR_WALLWIN_INFO
{
    DWORD dwSize;
    DWORD dwWinNum;   //´°¿ÚºÅ
    DWORD dwSubWinNum;//×Ó´°¿ÚºÅ
    DWORD dwWallNo; //Ç½ºÅ
    BYTE  byRes[12];
}NET_DVR_WALLWIN_INFO,*LPNET_DVR_WALLWIN_INFO;

typedef struct tagNET_DVR_WALL_WIN_STATUS
{
    DWORD dwSize ;
    BYTE  byDecodeStatus; /*µ±Ç°½âÂë×´Ì¬:0:Î´Æô¶¯,1 :ÒÑÆô¶¯*/
    BYTE  byStreamType;    /*ÂëÁ÷ÀàÐÍ*/
    BYTE  byPacketType;    /*´ò°ü·½Ê½*/
    BYTE  byFpsDecV; /*ÊÓÆµ½âÂëÖ¡ÂÊ*/
    BYTE  byFpsDecA; /*ÒôÆµ½âÂëÖ¡ÂÊ*/
    BYTE  byRes1[7];    
    DWORD dwDecodedV; /*½âÂëµÄÊÓÆµÖ¡*/
    DWORD dwDecodedA; /*½âÂëµÄÒôÆµÖ¡*/
    WORD  wImgW; /*µ±Ç°ÂëÁ÷Ô´µÄÍ¼Ïñ´óÐ¡*/
    WORD  wImgH; 
    BYTE  byStreamMode ; //ÂëÁ÷Ô´(´Ë²ÎÊý¶ÔÊÓÆµ×ÛºÏÆ½Ì¨ÓÐÐ§)£º1-ÍøÂç£¬2-×ÛºÏÆ½Ì¨ÄÚ²¿±àÂë×ÓÏµÍ³£¬3-ÆÁÄ»·þÎñÆ÷£¬0xff-ÎÞÐ§
    BYTE  byRes2[31];
}NET_DVR_WALL_WIN_STATUS, *LPNET_DVR_WALL_WIN_STATUS;

typedef struct tagNET_DVR_WININDEX_INFO
{
    DWORD dwWinIndex; //´°¿ÚºÅ
    DWORD dwSubWinIndex;//×Ó´°¿ÚºÅ
    BYTE  byType ;//×ÊÔ´ÀàÐÍ£¬1-½âÂë£¬2-»ØÏÔ
    BYTE  byWallNo ; //Ç½ºÅ
    BYTE  byRes[6];
}NET_DVR_WININDEX_INFO, *LPNET_DVR_WININDEX_INFO;

typedef struct tagNET_DVR_ASSOCIATEDDEV_CHAN_INFO
{
    DWORD  dwSize ;
    BYTE   sAddress[MAX_DOMAIN_NAME];//ipµØÖ·£¬»òÊÇÓòÃû
    WORD   wDVRPort;                 /* ¶Ë¿ÚºÅ */
    WORD   wChannel;                /* Í¨µÀºÅ */
    BYTE   sUserName[NAME_LEN];    /* ¼à¿ØÖ÷»úµÇÂ½ÕÊºÅ */
    BYTE   sPassword[PASSWD_LEN];    /* ¼à¿ØÖ÷»úÃÜÂë */
    BYTE   byRes[24];
}NET_DVR_ASSOCIATEDDEV_CHAN_INFO,*LPNET_DVR_ASSOCIATEDDEV_CHAN_INFO;

typedef struct tagNET_DVR_WALLOUTPUTPARAM
{
    DWORD dwSize;
    DWORD dwResolution; //·Ö±æÂÊ    
    NET_DVR_VIDEOEFFECT struRes;
    BYTE  byVideoFormat; //ÊÓÆµÖÆÊ½£¬¼ûVIDEO_STANDARD
    BYTE  byDisplayMode;/*Êä³öÁ¬½ÓÄ£Ê½,1-BNC£¬2-VGA£¬3-HDMI£¬4-DVI£¬5-SDI, 6-FIBER, 7-RGB, 8-YPrPb, 9-VGA/HDMI/DVI×ÔÊÊÓ¦£¬0xff-ÎÞÐ§*/
    BYTE  byBackgroundColor; //±³¾°É«£¬0-ÎÞÐ§£¬²»Ö§³Ö±³¾°É«£¬1-ºì£¬2-ÂÌ£¬3-À¶£¬4-»Æ£¬5-×Ï£¬6-Çà£¬7-ºÚ£¬8-°×
    BYTE  byUseEDIDResolution; //ÊÇ·ñÊ¹ÓÃEDID·Ö±æÂÊ£¬0-²»Ê¹ÓÃ£¬1-Ê¹ÓÃ
    WORD  wLEDWidth;     //LEDÆÁÊä³ö·Ö±æÂÊ¿í
    WORD  wLEDHeight;    //LEDÆÁÊä³ö·Ö±æÂÊ¸ß
    BYTE  byRes2[56];
}NET_DVR_WALLOUTPUTPARAM, *LPNET_DVR_WALLOUTPUTPARAM;

#define     MAX_UNITEDMATRIX_NUM        8  //¼¶ÁªÖÐ×î¶àÊÓÆµ×ÛºÏÆ½Ì¨ÊýÁ¿

typedef struct NET_DVR_SUBMATRIXSYSTEMINFO
{
    //Æ½Ì¨ºÅ£¬0±íÊ¾ÎÞ´ËÆ½Ì¨
    DWORD        dwSequence;
    BYTE        sAddress[MAX_DOMAIN_NAME];//ipµØÖ·£¬»òÊÇÓòÃû
    WORD        wSubMatrixPort;        /*×ÓÏµÍ³¶Ë¿ÚºÅ*/
    BYTE        byRes1[6];   
    BYTE        sUserName[NAME_LEN];    /*ÓÃ»§Ãû*/
    BYTE        sPassword[PASSWD_LEN];    /*ÃÜÂë */   
    BYTE        byRes2[36];
}NET_DVR_SUBMATRIXSYSTEMINFO,*LPNET_DVR_SUBMATRIXSYSTEMINFO;

typedef struct tagNET_DVR_UNITEDMATRIXSYSTEMINFO
{
    DWORD dwSize;
    //ÊÓÆµ×ÛºÏÆ½Ì¨ÐÅÏ¢
    NET_DVR_SUBMATRIXSYSTEMINFO struMatrixInfo[MAX_UNITEDMATRIX_NUM]; 
    BYTE  byRes[32];
}NET_DVR_UNITEDMATRIXSYSTEMINFO,*LPNET_DVR_UNITEDMATRIXSYSTEMINFO;

typedef struct tagNET_DVR_SUBSTREAM_SWITCH_CFG
{
    BYTE  byAutoSwitchEnable; //×ÓÂëÁ÷×Ô¶¯ÇÐ»»£¬0 - ²»ÆôÓÃ£¬1 - ÆôÓÃ
    BYTE     byRes1[3];
    WORD  wSubWndWidth; //×Ó´°¿Ú¿í¶ÈÉè¶¨Öµ£¬byAutoSwitchEnableÎª1Ê±ÓÐÐ§
    WORD  wSubWndHeight; //×Ó´°¿Ú¸ß¶ÈÉè¶¨Öµ£¬byAutoSwitchEnableÎª1Ê±ÓÐÐ§
}NET_DVR_SUBSTREAM_SWITCH_CFG, *LPNET_DVR_SUBSTREAM_SWITCH_CFG;

typedef struct tagNET_DVR_WALL_CFG
{
    DWORD  dwSize;
    BYTE  byTransparency;//Í¸Ã÷¶È,0-100,0Îª²»Í¸Ã÷
    BYTE  byWinStaticMode; //´°¿Ú½âÂëÍ£Ö¹ÏÔÊ¾Ä£Ê½£¬1-ºÚÆÁ£¬2-ÏÔÊ¾×îºóÒ»Ö¡Í¼Ïñ
    BYTE  byStreamFailedMode; //È¡Á÷Ê§°ÜÏÔÊ¾Ä£Ê½£¬1-¡°ÎÞÍøÂçÊÓÆµÐÅºÅ¡±£¬2-ÏÔÊ¾×îºóÒ»Ö¡Í¼Ïñ
    BYTE  byRes1;
    NET_DVR_SUBSTREAM_SWITCH_CFG  struSubStreamSwitch; //×ÓÂëÁ÷ÇÐ»»
    BYTE  byLEDShowMode; //LED´°¿ÚÏÔÊ¾Ä£Ê½£¬0-ÆÕÍ¨Ä£Ê½£¬1-Æ½ÆÌÄ£Ê½
    BYTE  byRes[51];
}NET_DVR_WALL_CFG, *LPNET_DVR_WALL_CFG;

typedef    struct tagNET_DVR_LEDDISPLAYINFO
{
    DWORD            dwSize;
    BYTE              byAddressType;   //0-Êµ¼Êipv4 ipv6µØÖ· 1-ÓòÃû
    BYTE        byRes1[3];
    // ¿ØÖÆunionServerÊÇÊ¹ÓÃÊµ¼ÊµØÖ·»¹ÊÇÓòÃû
    union
    {
        struct
        {
            BYTE            szDomain[MAX_DOMAIN_NAME/*64*/];//·þÎñÆ÷µØÖ·£¬ÓòÃû 
            BYTE            byRes1[80];
        }struDomain;
        struct
        {
            NET_DVR_IPADDR     struIp;/*IPµØÖ·*/        //IPv4 IPv6µØÖ·, 144×Ö½Ú
        } struAddrIP;
    }unionServer;  //Ê¹ÓÃÁªºÏÌå½á¹¹£¬Í¨¹ýbyAddressType×Ö¶Î±íÊ¾ÊÇIPµØÖ·»¹ÊÇÓòÃû 64    
    char        szDisplayInfo[MAX_LEDDISPLAYINFO_LEN/*1024*/];
    BYTE        byRes[128];
}NET_DVR_LEDDISPLAYINFO,*LPNET_DVR_LEDDISPLAYINFO;


typedef struct tagNET_DVR_LOW_LIGHT_CFG
{
    DWORD dwSize;
    BYTE  byLowLightLimt; /* µÍÕÕ¶Èµç×Ó¿ìÃÅ: 0-¹Ø£¬1-¿ª */
    BYTE  byLowLightLimtLevel; 
    /*Çò»ú0-¹Ø£¬1-Âý¿ìÃÅ*2£¬2-Âý¿ìÃÅ*3£¬3-Âý¿ìÃÅ*4£¬4-Âý¿ìÃÅ*6£¬5-Âý¿ìÃÅ*8£¬6-Âý¿ìÃÅ*12£¬7-Âý¿ìÃÅ*16£¬
    8-Âý¿ìÃÅ*24£¬9-Âý¿ìÃÅ*32£¬10-Âý¿ìÃÅ*48£¬11-Âý¿ìÃÅ*64£¬12-Âý¿ìÃÅ*96£¬13-Âý¿ìÃÅ*128£¬14-Âý¿ìÃÅ*256£¬
    15-Âý¿ìÃÅ*512, 16-Âý¿ìÃÅ*1.25, 17-Âý¿ìÃÅ*1.5 */
    BYTE  byRes[66];
}NET_DVR_LOW_LIGHT_CFG, *LPNET_DVR_LOW_LIGHT_CFG;

typedef struct tagNET_DVR_FOCUSMODE_CFG
{
    DWORD dwSize;
    BYTE  byFocusMode;  /* ¾Û½¹Ä£Ê½£¬0-×Ô¶¯£¬1-ÊÖ¶¯£¬2-°ë×Ô¶¯ */
    BYTE  byAutoFocusMode; /* ×Ô¶¯¾Û½¹Ä£Ê½£¬0-¹Ø£¬1-Ä£Ê½A£¬2-Ä£Ê½B£¬3-Ä£Ê½AB£¬4-Ä£Ê½C ×Ô¶¯¾Û½¹Ä£Ê½£¬ÐèÒªÔÚ¾Û½¹Ä£Ê½Îª×Ô¶¯Ê±²ÅÏÔÊ¾*/
    WORD  wMinFocusDistance; /* ×îÐ¡¾Û½¹¾àÀë£¬µ¥Î»CM,  0-×Ô¶¯£¬0xffff-ÎÞÇîÔ¶ */
    BYTE  byZoomSpeedLevel;  /* ±ä±¶ËÙ¶È£¬ÎªÊµ¼ÊÈ¡Öµ£¬1-3 */
    BYTE  byFocusSpeedLevel; /* ¾Û½¹ËÙ¶È£¬ÎªÊµ¼ÊÈ¡Öµ£¬1-3 */
    BYTE  byOpticalZoom;        /* ¹âÑ§±ä±¶£¬0-255 */
    BYTE  byDigtitalZoom;        /* Êý×Ö±ä±¶£¬0-255 */
    float fOpticalZoomLevel; /* ¹âÑ§±ä±¶(±¶ÂÊÖµ) [1,32], ×îÐ¡¼ä¸ô0.5 £¬ÄÚ²¿Éè±¸½»»¥µÄÊ±ºò*1000 */
    DWORD dwFocusPos;/* dwFocusPos ÊÇfocusÖµ£¨¾Û½¹Öµ£©£¬·¶Î§Îª[0x1000,0xC000]£¬Õâ¸öÖµÊÇsony×ø±êÖµ£¬Ê¹ÓÃÕâ¸öÖµÊÇÎªÁË¶ÔÍâÍ³Ò»£¬±£Ö¤²»Í¬µÄ¾µÍ·¶ÔÍâfocusÖµ¶¼×ª»»ÔÚÕâ¸ö·¶Î§ÄÚ (ÊÖ¶¯¾Û½¹Ä£Ê½ÏÂÏÂÓ¦ÓÃ)*/
    BYTE  byRes[56];
}NET_DVR_FOCUSMODE_CFG, *LPNET_DVR_FOCUSMODE_CFG;

typedef struct tagNET_DVR_INFRARE_CFG
{
    DWORD  dwSize;
    BYTE  byIrControlMode;  /* ºìÍâÇò»úÅäÖÃ-¿ØÖÆÄ£Ê½£º0-×Ô¶¯£¬1-ÊÖ¶¯ */
    BYTE  byIrBrightness;    /* ºìÍâÇò»úÅäÖÃ-ºìÍâÁÁ¶È£º0-100 */
    BYTE  byIrSensitivity;    /* ºìÍâÇò»úÅäÖÃ-ºìÍâµÆÁéÃô¶È£º0-100 */
    BYTE  byIrTrigMode; /* ´¥·¢Ä£Ê½ 0-»úÐ¾´¥·¢£¬1-¹âÃô´¥·¢ ×Ô¶¯Ä£Ê½ÏÂÉúÐ§*/
    BYTE  byIrBrightnessLimit;/* ÁÁ¶ÈÏÞÖÆ Èç¹û´ËÖµÎª80£¬±íÊ¾µÄÒâÒåÊÇµ±Ç°ºìÍâµÆµÄÁÁ¶ÈÎªÔ­ÏÈ¸ù¾Ý×Ô¶¯²ßÂÔ¼ÆËã³öµÄÁÁ¶ÈÖµ¡Á80% ×Ô¶¯Ä£Ê½ÏÂÉúÐ§*/   
    BYTE  byRes[63];
}NET_DVR_INFRARE_CFG, *LPNET_DVR_INFRARE_CFG;

typedef struct tagNET_DVR_AEMODECFG
{
    DWORD  dwSize;
    int   iIrisSet;    /* ¹âÈ¦£¬ÎªÊµ¼ÊÈ¡Öµ*100µÄÖµ£¬0-¹Ø */
    int   iGainSet;    /* ¿ìÇòÔöÒæ£¬ÆØ¹â²¹³¥£¬ÎªÊµ¼ÊÈ¡Öµ*100µÄÖµ£¬ÓÐ¿ÉÄÜÊÇ¸ºÖµ */
    int   iGainLimit;/* ÔöÒæÏÞÖÆ£¬ÆØ¹â²¹³¥£¬ÎªÊµ¼ÊÈ¡Öµ*100µÄÖµ£¬ÓÐ¿ÉÄÜÊÇ¸ºÖµ */
    int   iExposureCompensate; /* ÆØ¹â²¹³¥£¬ÎªÊµ¼ÊÈ¡Öµ*100µÄÖµ£¬±ÈÈç1050´ú±í10.5dB, -750´ú±í-7.5dB */
    BYTE  byExposureModeSet;    /* Çò»úµÄÆØ¹âÄ£Ê½,0-ÊÖ¶¯Ä£Ê½£¬1-×Ô¶¯ÆØ¹â£¬2-¹âÈ¦ÓÅÏÈ£¬3-¿ìÃÅÓÅÏÈ£¬4-ÔöÒæÓÅÏÈ */
    BYTE  byShutterSet;         /* ¿ìÃÅ£¬0-¹Ø£¬1-×Ô¶¯x1£¬2-×Ô¶¯x2£¬3-×Ô¶¯x4£¬4-×Ô¶¯x8£¬5-×Ô¶¯x16£¬6-×Ô¶¯x32£¬7-×Ô¶¯x64£¬8-×Ô¶¯x128£¬9-1/1£¬10-1/2£¬
    11-1/3£¬12-1/4£¬13-1/6£¬14-1/8£¬15-1/12£¬16-1/15£¬17-1/25£¬18-1/30£¬19-1/50£¬20-1/60£¬21-1/75£¬
    22-1/90£¬23-1/100£¬24-1/120£¬25-1/125£¬26-1/150£¬27-1/180£¬28-1/200£¬29-1/215£¬30-1/250£¬31-1/300£¬
    32-1/350£¬33-1/425£¬34-1/500£¬35-1/600£¬36-1/725£¬37-1/1000£¬38-1/1250£¬39-1500,40-1/1750£¬41-1/2000£¬
    42-1/2500£¬43-3000,44-1/3500£¬45-1/4000£¬46-1/6000£¬47-1/10000£¬48-1/30000£¬49-1/100000,50-1/175£¬
    51-1/195£¬52-1/225£¬53-1/230 */
    BYTE  byImageStabilizeLevel;  /* ·À¶¶¶¯µÈ¼¶: 0-3 */
    BYTE  byCameraIrCorrect; /* ºìÍâÐ£Õý: 0-×Ô¶¯£¬1-¿ª£¬2,¹Ø */
    BYTE  byHighSensitivity; /* ¸ßÁéÃô¶ÈÉèÖÃ: 0-¹Ø£¬1-¿ª */
    BYTE  byInitializeLens;  /* ³õÊ¼»¯¾µÍ·: 0-¹Ø£¬1-¿ª */
    BYTE  byChromaSuppress; /* É«²ÊÒÖÖÆ :0-255*/
    BYTE  byMaxShutterSet;     //×î´ó¿ìÃÅÖµ;Ë÷ÒýÖµÓëbyShutterSetÏàÍ¬(ÔÚ×Ô¶¯ÆØ¹â¡¢¹âÈ¦ÓÅÏÈÄ£Ê½ÏÂÉúÐ§)
    BYTE  byMinShutterSet;     //×îÐ¡¿ìÃÅÖµ;Ë÷ÒýÖµÓëbyShutterSetÏàÍ¬(ÔÚ×Ô¶¯ÆØ¹â¡¢¹âÈ¦ÓÅÏÈÄ£Ê½ÏÂÉúÐ§)
    BYTE  byMaxIrisSet; //×î´ó¹âÈ¦ÏÞÖÆÖµ(×Ô¶¯ÆØ¹â¡¢¿ìÃÅÓÅÏÈÄ£Ê½) [0,100] ;
    BYTE  byMinIrisSet;    //×îÐ¡¹âÈ¦ÏÞÖÆÖµ(×Ô¶¯ÆØ¹â¡¢¿ìÃÅÓÅÏÈÄ£Ê½) [0,100] ;
    BYTE  byExposureLevel;//ÆØ¹âµÈ¼¶£¨ÆØ¹âÄ£Ê½Îª×Ô¶¯¡¢¹âÈ¦ÓÅÏÈ¡¢¿ìÃÅÓÅÏÈÇé¿öÓÐÐ§£©£¬µÈ¼¶1-5 Ä¬ÈÏ4£¬¼æÈÝÀÏ°æ±¾SDKÅäÖÃÐÂÉè±¸Ê±£¬±£Áô×Ö½ÚÎª0µÄÇé¿ö£¬ËùÒÔÕâ¸ö×Ö½ÚÎª0Ê±£¬Ò²Ä¬ÈÏÎªÆØ¹âµÈ¼¶Îª1
    BYTE  byRes[60];
}NET_DVR_AEMODECFG, *LPNET_DVR_AEMODECFG;

typedef struct tagNET_DVR_FLASH_CFG
{
    DWORD      dwSize;
    DWORD    dwChan;//Í¨µÀºÅ
    DWORD    dwInNumbers;//½øÈëÈËÊý
    DWORD    dwOutNumbers;//Àë¿ªÈËÊý
    DWORD    dwStartTime;//¿ªÊ¼Ê±¼äÃëÊý
    DWORD    dwEndTime;//½áÊøÊ±¼äÃëÊý
    DWORD    dwEhomeFlag;//
    DWORD    dwAlarmFlag;//
    BYTE       byRes[1024];
}NET_DVR_FLASH_CFG, *LPNET_DVR_FLASH_CFG;

typedef struct tagNET_DVR_EXTERNAL_MATRIX_CFG
{
    DWORD        dwSize;
    BYTE        byValid;            // ÓÐÐ§Ê±ÎªÉèÖÃ£¬ÎÞÐ§Ê±ÎªÉ¾³ý
    BYTE        byRes1[3];
    BYTE        sMatrixName[NAME_LEN/*32*/];       // ¾ØÕóµÄÃû³Æ
    DWORD          dwMatrixID;        // ¾ØÕóµÄIDºÅ£¬Ö»ÄÜ»ñÈ¡
    WORD        wMatrixInputChanNum;                // ¾ØÕóµÄÊäÈëÍ¨µÀÊýÄ¿
    WORD        wMatrixOutputChanNum;            // ¾ØÕóµÄÊä³öÍ¨µÀÊýÄ¿
    WORD           wMatrixOutputChanRef[MAX_CAM_COUNT];   //// Éè±¸ÊäÈëºÍ¾ØÕóÊä³öµÄ°ó¶¨¹ØÏµ£¬Êý×éÏÂ±ê±íÊ¾¿ØÖÆÆ÷Éè±¸ÊäÈëÍ¨µÀºÅ£¬ÔªËØµÄÖµ±íÊ¾¾ØÕóµÄÊä³öÍ¨µÀºÅ£¬
    //ÔªËØÖµ´óÓÚ0 ±íÊ¾°ó¶¨¾ØÕóÊä³öÍ¨µÀ£¬ÔªËØÖµÎª0Ê±±íÊ¾²»°ó¶¨£¬ÆÁÄ»·þÎñÆ÷ÎªÆÁÄ»Ë÷ÒýºÅºÍ¾ØÕóÊä³öµÄ°ó¶¨¹ØÏµ
    BYTE        byMatrixChanType;// ¾ØÕóµÄÍ¨µÀÀàÐÍ1-BNC¡¢2-VGA¡¢3-RGB¡¢4-DVI
    BYTE        byMatrixProtocol;    // ¾ØÕóËùÓÃÐ­Òé1¡¢ZT1.0¡¢2.ZT2.0¡¢3.Extron¡¢4.Creator
    BYTE        byMatrixType;        //1-Ä£Äâ¾ØÕó£¬2-Êý×Ö¾ØÕó
    BYTE        byRes2;
    NET_MATRIX_UNION struMatrixUnion;    
    BYTE        byRes3[128];        
}NET_DVR_EXTERNAL_MATRIX_CFG, *LPNET_DVR_EXTERNAL_MATRIX_CFG;


#define MAX_INPUTNUMS 1024
#define MAX_OUTPUTNUMS 256
typedef struct tagNET_DVR_ASSOCIATE_INPUT_PARAM
{
    BYTE byEnable;
    BYTE byRes1[3];
    DWORD dwDeviceIndex;//·Ö²¼Ê½´óÆÁ¿ØÖÆÆ÷Éè±¸ÐòºÅ
    WORD wInputIndex;//ÊäÈëÐÅºÅÔ´
    BYTE  byRes2[18];
}NET_DVR_ASSOCIATE_INPUT_PARAM, *LPNET_DVR_ASSOCIATE_INPUT_PARAM;

typedef struct tagNET_DVR_ASSOCIATE_OUTPUT_PARAM
{
    BYTE    byEnable;
    BYTE    byWallNo;        //Ç½ºÅ£¬´Ó1¿ªÊ¼
    BYTE    byRes1[2];
    DWORD    dwOutputIndex;    //Êä³öÏÔÊ¾ÆÁµÄÐòºÅ    
    BYTE    byRes2[20];
}NET_DVR_ASSOCIATE_OUTPUT_PARAM,*LPNET_DVR_ASSOCIATE_OUTPUT_PARAM;

typedef struct tagNET_DVR_VCS_USER_INFO
{
    DWORD   dwSize;
    BYTE    sUserName[NAME_LEN];            // ÓÃ»§Ãû£¬×î´ó16×Ö½Ú
    BYTE    sPassWord[PASSWD_LEN];        // ÃÜÂë
    NET_DVR_IPADDR    struUserIP;    // ÓÃ»§IPµØÖ·(Îª0Ê±±íÊ¾ÔÊÐíÈÎºÎµØÖ·)
    BYTE    byMacAddr[MACADDR_LEN];            // ÎïÀíµØÖ·
    BYTE    byPriority;        // ÓÅÏÈ¼¶£¬1-¹ÜÀíÔ±£¬2-²Ù×÷Ô± £¬¹ÜÀíÔ±¾ßÓÐÈÎºÎÈ¨ÏÞ£¬²Ù×÷Ô±Ã»ÓÐ"¹ÜÀíÓÃ»§"µÄÈ¨ÏÞ
    BYTE    byRes1;
    DWORD    dwRight;/*Ô¶³Ì²Ù×÷È¨ÏÞ£¬°´Î»±íÊ¾£¬0-²»Ö§³Ö£¬1-Ö§³Ö£¬¸÷32Î»´ú±íµÄÈ¨ÏÞÀàÐÍ*/    
    //bit0-»ñÈ¡ÉèÖÃ»ù±¾²ÎÊý
    //bit1-ÏÔÊ¾ÆÁ¹ÜÀí
    //bit2-´°¿Ú¹ÜÀí
    //bit3-ÐÅºÅÔ´¹ÜÀí
    //bit4-²¼¾Ö¹ÜÀí
    //bit5-Ô¤°¸¹ÜÀí
    //bit6-µ×Í¼¹ÜÀí
    //bit7-OSD¹ÜÀí
    //bit8-»ØÏÔÈ¨ÏÞ
    //bit9-±¨¾¯²¼·À
    //bit10-Ô¶³ÌÉý¼¶
    //bit11-»Ö¸´Ä¬ÈÏÉèÖÃ
    //bit12-µ¼Èëµ¼³öÅäÖÃÅäÖÃÎÄ¼þ
    //bit13-ÈÕÖ¾²éÑ¯
    //bit14-Ô¶³ÌÖØÆô
    //bit15-ÆÁÄ»ÇøÓò¹ÜÀí
    NET_DVR_ASSOCIATE_INPUT_PARAM struInputParam[MAX_INPUTNUMS/*1024*/];
    NET_DVR_ASSOCIATE_OUTPUT_PARAM struOutputParam[MAX_OUTPUTNUMS/*256*/];
    NET_DVR_RECTCFG_EX struManageRegion;   //ÆÁÄ»¹ÜÀíÇøÓò
    BYTE   byWallNo;    //¿ªÆôÆÁÄ»¹ÜÀíÇøÓòµÄÇ½ºÅ£¬¶ÔÖ»Ö§³Öµ¥Ç½µÄÉè±¸£¬´Ë×Ö¶ÎÎÞÐ§
    BYTE   byRes[107];                /* ±£Áô */
} NET_DVR_VCS_USER_INFO, *LPNET_DVR_VCS_USER_INFO;

typedef struct tagNET_DVR_STREAM_MEDIA_SERVER_CFG_V41
{    
    BYTE    byValid; //ÊÇ·ñÆôÓÃ£¬0-·ñ£¬1-ÊÇ
    BYTE    byRes1[3];
    BYTE    byAddress[MAX_DOMAIN_NAME];   //IP»òÕßÓòÃû   
    WORD    wDevPort;            /*Á÷Ã½Ìå·þÎñÆ÷¶Ë¿Ú*/    
    BYTE    byTransmitType;        /*´«ÊäÐ­ÒéÀàÐÍ 0-TCP£¬1-UDP*/
    BYTE    byRes2[69];
}NET_DVR_STREAM_MEDIA_SERVER_CFG_V41,*LPNET_DVR_STREAM_MEDIA_SERVER_CFG_V41;

//Éè±¸Í¨µÀÐÅÏ¢
typedef struct tagNET_DVR_DEV_CHAN_INFO_V41
{
    BYTE    byAddress[MAX_DOMAIN_NAME];    //Éè±¸ÓòÃû
    WORD     wDVRPort;                 //¶Ë¿ÚºÅ
    BYTE     byChannel;                //Í¨µÀºÅ
    BYTE    byTransProtocol;        //´«ÊäÐ­ÒéÀàÐÍ0-TCP£¬1-UDP
    BYTE    byTransMode;            //´«ÊäÂëÁ÷Ä£Ê½ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷
    BYTE    byFactoryType;            /*Ç°¶ËÉè±¸³§¼ÒÀàÐÍ,Í¨¹ý½Ó¿Ú»ñÈ¡*/
    BYTE    byDeviceType; //Éè±¸ÀàÐÍ(ÊÓÆµ×ÛºÏÆ½Ì¨ÖÇÄÜ°åÊ¹ÓÃ)£¬1-½âÂëÆ÷£¨´ËÊ±¸ù¾ÝÊÓÆµ×ÛºÏÆ½Ì¨ÄÜÁ¦¼¯ÖÐbyVcaSupportChanMode×Ö¶ÎÀ´¾ö¶¨ÊÇÊ¹ÓÃ½âÂëÍ¨µÀ»¹ÊÇÏÔÊ¾Í¨µÀ£©£¬2-±àÂëÆ÷
    BYTE    byDispChan;//ÏÔÊ¾Í¨µÀºÅ,ÖÇÄÜÅäÖÃÊ¹ÓÃ
    BYTE    bySubDispChan;//ÏÔÊ¾Í¨µÀ×ÓÍ¨µÀºÅ£¬ÖÇÄÜÅäÖÃÊ±Ê¹ÓÃ
    BYTE    byResolution;    //; 1-CIF 2-4CIF 3-720P 4-1080P 5-500w´óÆÁ¿ØÖÆÆ÷Ê¹ÓÃ£¬´óÆÁ¿ØÖÆÆ÷»á¸ù¾Ý¸Ã²ÎÊý·ÖÅä½âÂë×ÊÔ´
    BYTE    byUseZeroChan; //ÊÇ·ñÊ¹ÓÃÁãÍ¨µÀ£¬0-·ñ£¬1-ÊÇ
    BYTE    byRes;   
    BYTE    sUserName[NAME_LEN];    //¼à¿ØÖ÷»úµÇÂ½ÕÊºÅ
    BYTE    sPassword[PASSWD_LEN];    //¼à¿ØÖ÷»úÃÜÂë
}NET_DVR_DEV_CHAN_INFO_V41,*LPNET_DVR_DEV_CHAN_INFO_V41;

typedef struct tagNET_DVR_DEV_CHAN_INFO_EX
{
    BYTE    byChanType;              //Í¨µÀÀàÐÍ£¬0-ÆÕÍ¨Í¨µÀ,1-ÁãÍ¨µÀ,2-Á÷ID,3-±¾µØÊäÈëÔ´£¬4-ÐéÄâÆÁ·þÎñÆ÷Í¨µÀ£¬5-Æ´½ÓÍ¨µÀ£¬6-ÆÁÄ»·þÎñÆ÷
    BYTE    byStreamId[STREAM_ID_LEN];//Á÷ID
    
    BYTE    byRes1[3];
    DWORD   dwChannel;  //Í¨µÀºÅ£¬Í¨µÀÀàÐÍÎªÆÕÍ¨Í¨µÀ£¬ÁãÍ¨µÀ£¬±¾µØÊäÈëÔ´£¬ÐéÄâÆÁ·þÎñÆ÷Í¨µÀÊ±Ìî´Ë×Ö¶Î
    BYTE    byRes2[24];
    BYTE    byAddress[MAX_DOMAIN_NAME];    //Éè±¸ÓòÃû
    WORD     wDVRPort;                 //¶Ë¿ÚºÅ
    BYTE     byChannel;                //Í¨µÀºÅ,dwChannel²»Îª0Ê±´Ë×Ö¶ÎÎÞÐ§
    BYTE    byTransProtocol;        //´«ÊäÐ­ÒéÀàÐÍ0-TCP£¬1-UDP
    BYTE    byTransMode;            //´«ÊäÂëÁ÷Ä£Ê½ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷
    BYTE    byFactoryType;            /*Ç°¶ËÉè±¸³§¼ÒÀàÐÍ,Í¨¹ý½Ó¿Ú»ñÈ¡*/
    BYTE    byDeviceType; //Éè±¸ÀàÐÍ(ÊÓÆµ×ÛºÏÆ½Ì¨ÖÇÄÜ°åÊ¹ÓÃ)£¬1-½âÂëÆ÷£¨´ËÊ±¸ù¾ÝÊÓÆµ×ÛºÏÆ½Ì¨ÄÜÁ¦¼¯ÖÐbyVcaSupportChanMode×Ö¶ÎÀ´¾ö¶¨ÊÇÊ¹ÓÃ½âÂëÍ¨µÀ»¹ÊÇÏÔÊ¾Í¨µÀ£©£¬2-±àÂëÆ÷
    BYTE    byDispChan;//ÏÔÊ¾Í¨µÀºÅ,ÖÇÄÜÅäÖÃÊ¹ÓÃ
    BYTE    bySubDispChan;//ÏÔÊ¾Í¨µÀ×ÓÍ¨µÀºÅ£¬ÖÇÄÜÅäÖÃÊ±Ê¹ÓÃ
    BYTE    byResolution;    //; 1-CIF 2-4CIF 3-720P 4-1080P 5-500w´óÆÁ¿ØÖÆÆ÷Ê¹ÓÃ£¬´óÆÁ¿ØÖÆÆ÷»á¸ù¾Ý¸Ã²ÎÊý·ÖÅä½âÂë×ÊÔ´
    BYTE    byRes[2];   
    BYTE    sUserName[NAME_LEN];    //¼à¿ØÖ÷»úµÇÂ½ÕÊºÅ
    BYTE    sPassword[PASSWD_LEN];    //¼à¿ØÖ÷»úÃÜÂë
}NET_DVR_DEV_CHAN_INFO_EX,*LPNET_DVR_DEV_CHAN_INFO_EX;

typedef struct tagNET_DVR_STREAM_MEDIA_SERVER
{    
    BYTE   byValid; //ÊÇ·ñÆôÓÃ£¬0-·ñ£¬1-ÊÇ
    BYTE   byRes1[3];
    BYTE   byAddress[MAX_DOMAIN_NAME];   //IP»òÕßÓòÃû 
    WORD   wDevPort;            /*Á÷Ã½Ìå·þÎñÆ÷¶Ë¿Ú*/    
    BYTE   byTransmitType;        /*´«ÊäÐ­ÒéÀàÐÍ 0-TCP£¬1-UDP*/
    BYTE   byRes2[5];
}NET_DVR_STREAM_MEDIA_SERVER,*LPNET_DVR_STREAM_MEDIA_SERVER;

typedef struct tagNET_DVR_DEV_DDNS_INFO
{
    BYTE   byDevAddress[MAX_DOMAIN_NAME];    //ÓòÃû(IPServer»òhiDDNSÊ±¿ÉÌîÐòÁÐºÅ»òÕß±ðÃû)
    BYTE   byTransProtocol;        //´«ÊäÐ­ÒéÀàÐÍ0-TCP£¬1-UDP, 2-MCAST
    BYTE   byTransMode;            //´«ÊäÂëÁ÷Ä£Ê½ 0£­Ö÷ÂëÁ÷ 1£­×ÓÂëÁ÷
    BYTE   byDdnsType;         //ÓòÃû·þÎñÆ÷ÀàÐÍ£¬0-IPServer 1£­Dyndns 2£­PeanutHull(»¨Éú¿Ç)£¬3- NO-IP, 4- hiDDNS
    BYTE   byRes1;
    BYTE   byDdnsAddress[MAX_DOMAIN_NAME];  //DDNS·þÎñÆ÷µØÖ·
    WORD   wDdnsPort;                 //DDNS·þÎñÆ÷¶Ë¿ÚºÅ
    BYTE   byChanType;              //0-ÆÕÍ¨Í¨µÀ,1-ÁãÍ¨µÀ,2-Á÷ID
    BYTE   byFactoryType;            //Ç°¶ËÉè±¸³§¼ÒÀàÐÍ,Í¨¹ý½Ó¿Ú»ñÈ¡
    DWORD  dwChannel; //Í¨µÀºÅ
    BYTE   byStreamId[STREAM_ID_LEN]; //Á÷ID
    BYTE   sUserName[NAME_LEN];    //¼à¿ØÖ÷»úµÇÂ½ÕÊºÅ
    BYTE   sPassword[PASSWD_LEN];    //¼à¿ØÖ÷»úÃÜÂë
    WORD   wDevPort;                //Ç°¶ËÉè±¸Í¨ÐÅ¶Ë¿Ú
    BYTE   byRes2[2];
}NET_DVR_DEV_DDNS_INFO,*LPNET_DVR_DEV_DDNS_INFO;

typedef struct tagNET_DVR_DEC_STREAM_DEV_EX
{
    NET_DVR_STREAM_MEDIA_SERVER    struStreamMediaSvrCfg;
    NET_DVR_DEV_CHAN_INFO_EX                struDevChanInfo;
}NET_DVR_DEC_STREAM_DEV_EX,*LPNET_DVR_DEC_STREAM_DEV_EX;


//DDNS·½Ê½È¡Á÷
typedef struct tagNET_DVR_DEC_DDNS_DEV
{
    NET_DVR_DEV_DDNS_INFO struDdnsInfo;
    NET_DVR_STREAM_MEDIA_SERVER struMediaServer;
}NET_DVR_DEC_DDNS_DEV,*LPNET_DVR_DEC_DDNS_DEV;

typedef union tagNET_DVR_DEC_STREAM_MODE
{
    NET_DVR_DEC_STREAM_DEV_EX struDecStreamDev;
    NET_DVR_PU_STREAM_URL struUrlInfo;
    NET_DVR_DEC_DDNS_DEV struDdnsDecInfo;
    BYTE byRes[300];    
}NET_DVR_DEC_STREAM_MODE,*LPNET_DVR_DEC_STREAM_MODE;

typedef struct tagNET_DVR_PU_STREAM_CFG_V41
{
    DWORD dwSize;
    BYTE byStreamMode;/*È¡Á÷Ä£Ê½£¬0-ÎÞÐ§£¬1-Í¨¹ýIP»òÓòÃûÈ¡Á÷£¬2-Í¨¹ýURLÈ¡Á÷,3-Í¨¹ý¶¯Ì¬ÓòÃû½âÎöÏòÉè±¸È¡Á÷*/
    BYTE byRes1[3];
    NET_DVR_DEC_STREAM_MODE uDecStreamMode;//È¡Á÷ÐÅÏ¢
    BYTE  byRes2[64];
}NET_DVR_PU_STREAM_CFG_V41,*LPNET_DVR_PU_STREAM_CFG_V41;

typedef struct  tagNET_DVR_MATRIX_CHAN_INFO_V41
{
    BYTE byEnable; //ÊÇ·ñÆôÓÃ£¬0-·ñ£¬1-ÊÇ
    BYTE byStreamMode;/*È¡Á÷Ä£Ê½£¬0-ÎÞÐ§£¬1-Í¨¹ýIP»òÓòÃûÈ¡Á÷£¬2-Í¨¹ýURLÈ¡Á÷,3-Í¨¹ý¶¯Ì¬ÓòÃû½âÎöÏòÉè±¸È¡Á÷*/
    BYTE byRes[2];
    NET_DVR_DEC_STREAM_MODE uDecStreamMode;//È¡Á÷ÐÅÏ¢
}NET_DVR_MATRIX_CHAN_INFO_V41,*LPNET_DVR_MATRIX_CHAN_INFO_V41;

typedef struct  tagNET_DVR_MATRIX_LOOP_DECINFO_V41
{
    DWORD                            dwSize;
    DWORD                            dwPoolTime;        /*ÂÖÑ²¼ä¸ô*/
    NET_DVR_MATRIX_CHAN_INFO_V41    struchanConInfo[MAX_CYCLE_CHAN_V30];
    BYTE                           byRes[16];
}NET_DVR_MATRIX_LOOP_DECINFO_V41,*LPNET_DVR_MATRIX_LOOP_DECINFO_V41;

typedef struct tagNET_DVR_MATRIX_DEC_CHAN_INFO_V41
{
    DWORD    dwSize;
    BYTE byStreamMode;/*È¡Á÷Ä£Ê½£¬0-ÎÞÐ§£¬1-Í¨¹ýIP»òÓòÃûÈ¡Á÷£¬2-Í¨¹ýURLÈ¡Á÷,3-Í¨¹ý¶¯Ì¬ÓòÃû½âÎöÏòÉè±¸È¡Á÷*/
    BYTE byRes1[3];
    NET_DVR_DEC_STREAM_MODE uDecStreamMode;//È¡Á÷ÐÅÏ¢
    DWORD    dwPlayMode;        /* 0-¶¯Ì¬½âÂë 1£­Ñ­»·½âÂë 2£­°´Ê±¼ä»Ø·Å 3£­°´ÎÄ¼þ»Ø·Å */
    NET_DVR_TIME StartTime;        /* °´Ê±¼ä»Ø·Å¿ªÊ¼Ê±¼ä */
    NET_DVR_TIME StopTime;        /* °´Ê±¼ä»Ø·ÅÍ£Ö¹Ê±¼ä */
    BYTE    sFileName[128];        /* °´ÎÄ¼þ»Ø·ÅÎÄ¼þÃû */
    DWORD   dwGetStreamMode;    /*È¡Á÷Ä£Ê½:1-Ö÷¶¯£¬2-±»¶¯*/
    NET_DVR_MATRIX_PASSIVEMODE    struPassiveMode;
    BYTE    byRes2[32];
}NET_DVR_MATRIX_DEC_CHAN_INFO_V41,*LPNET_DVR_MATRIX_DEC_CHAN_INFO_V41;

typedef struct tagNet_DVR_IP_ADDRESS
{
    BYTE    byDevAddress[MAX_DOMAIN_NAME];    /*Éè±¸IPµØÖ·*/
    WORD    wDevPort;       //Éè±¸¶Ë¿Ú
    BYTE     byres[134];
}NET_DVR_IP_ADDRESS, *LPNET_DVR_IP_ADDRESS;

typedef struct tagNet_DVR_DDNS_ADDRESS
{
    BYTE byDevAddress[MAX_DOMAIN_NAME];    /*DDNSÓòÃû*/
    BYTE byDevDdns[MAX_DOMAIN_NAME];    /*Éè±¸µØÖ·*/
    BYTE byDdnsType; //ÓòÃû·þÎñÆ÷ÀàÐÍ£¬0-IPServer 1£­Dyndns 2£­PeanutHull(»¨Éú¿Ç)£¬//3- NO-IP, 4- hiDDNS
    BYTE byRes1[3];
    WORD wDevPort;       //Éè±¸¶Ë¿Ú
    WORD wDdnsPort; //ÓòÃû·þÎñÆ÷¶Ë¿Ú
    BYTE byres[64];
}NET_DVR_DDNS_ADDRESS, *LPNET_DVR_DDNS_ADDRESS;

typedef struct tagNet_DVR_PLAY_BACK_BY_TIME
{
    NET_DVR_TIME StartTime;
    NET_DVR_TIME StopTime;
}NET_DVR_PLAY_BACK_BY_TIME, *LPNET_DVR_PLAY_BACK_BY_TIME;

typedef struct tagNet_DVR_MATRIX_DEC_REMOTE_PLAY_EX
{
    DWORD    dwSize;
    DWORD    dwDecChannel;  //½âÂëÍ¨µÀºÅ
    BYTE    byAddressType;  //Éè±¸µØÖ·ÀàÐÍ£¬0-IP£¬1-DDNS
    BYTE    byChannelType;  //Í¨µÀÀàÐÍ£¬0-ÆÕÍ¨Í¨µÀ£¬1-ÁãÍ¨µÀ£¬2-Á÷ID
    BYTE    byres[2];
    BYTE    sUserName[NAME_LEN];        /* ÓÃ»§Ãû */
    BYTE    sPassword[PASSWD_LEN];        /* ÃÜÂë */
    DWORD    dwChannel;            /* Éè±¸Í¨µÀºÅ */
    BYTE    byStreamId[STREAM_ID_LEN];  //Á÷ID,´Ë²ÎÊýÔÚÍ¨µÀÀàÐÍÎªÁ÷IDÊ±ÓÐÐ§
    DWORD    dwPlayMode;       /* 0£­°´ÎÄ¼þ 1£­°´Ê±¼ä*/
    union
    {
        BYTE byRes[200];
        NET_DVR_IP_ADDRESS struIpAddr;
        NET_DVR_DDNS_ADDRESS struDdnsAddr;
    }unionAddr;
    
    union
    {
        BYTE byRes[128];
        NET_DVR_PLAY_BACK_BY_TIME struPlayBackByTime; //°´Ê±¼ä»Ø·ÅÊ±ÎÄ¼þÐÅÏ¢
        char sFileName[128];    //°´ÎÄ¼þÃû»Ø·ÅÊ±ÎÄ¼þÐÅÏ¢
    }unionPlayBackInfo;
}NET_DVR_MATRIX_DEC_REMOTE_PLAY_EX, *LPNET_DVR_MATRIX_DEC_REMOTE_PLAY_EX;

typedef struct tagNET_DVR_DISPLAY_EFFECT_CFG
{
    DWORD dwSize;
    NET_DVR_COLOR  struColor;      //ÏÔÊ¾Ïà¹Ø²ÎÊý/
    BYTE byRes[32];
}NET_DVR_DISPLAY_EFFECT_CFG,*LPNET_DVR_DISPLAY_EFFECT_CFG;

//»ñÈ¡¸ÉÏß×´Ì¬
typedef struct tagNET_DVR_TRUNK_USE_STATE
{
    DWORD        dwSize;
    DWORD        dwTrunkID;    //¸ÉÏßID
    WORD        wReserveUserID;    //Ô¤ÁôµÄÓÃ»§ID£º 1~256 £¬0±íÊ¾ÊÍ·ÅÔ¤Áô
    BYTE        byStatus;  //1-¿ÕÏÐ£¬2-Õ¼ÓÃ£¬3-¸´ÓÃ */
    BYTE        byRes1;
    BYTE          byUserId[256];  //Êý×éÏÂ±ê±íÊ¾ÓÃ»§IDºÅ£¬Êý×éÔªËØµÄÖµ±íÊ¾ÊÇ·ñÊ¹ÓÃ¸ÉÏß¡£Èç£ºbyUserID[0] µÄÖµÎª1£¬±íÊ¾ÓÃ»§IDÎª0µÄÓÃ»§ÕýÔÚÊ¹ÓÃ£¬byUserID[0] µÄÖµÎª0±íÊ¾ÓÃ»§IDÎª0µÄÓÃ»§Ã»ÓÐÊ¹ÓÃÕâÌõ¸ÉÏß
    BYTE           byRes2[64];  
}NET_DVR_TRUNK_USE_STATE,  *LPNET_DVR_TRUNK_USE_STATE;


//PTZ¿ØÖÆ²ÎÊý
typedef struct tagNET_DVR_PTZ_CTRL_INFO
{
    DWORD    dwSize;
    DWORD    dwCtrlDelayTime;        //PTZ¿ØÖÆ³ÖÐøÊ±¼ä£¬Ö¸PTZ¿ØÖÆºóÔÚdwCtrlDelayTimeÊ±¼äÄÚ£¬ÆäËûÍ¬¼¶±ð»òµÍ¼¶±ðÓÃ»§¶ÔÆä²Ù×÷ÎÞÐ§¡£µ¥Î»£ºÃë
    BYTE    byRes[64];
}NET_DVR_PTZ_CTRL_INFO, *LPNET_DVR_PTZ_CTRL_INFO;

//ÏÔÊ¾Â·¾¶
#define        MAX_MATRIX_CASCADE        32
typedef struct tagNET_DVR_MATRIX_ROUTE_INFO
{
    DWORD        dwSize;
    DWORD           dwCamNo;
    DWORD       dwMonNo;
    DWORD        dwSubWin;
    DWORD        dwUserId;
    DWORD       dwTrunkId[MAX_MATRIX_CASCADE/*32*/];//trunkId³ÉÔ±¶ÔÓ¦¼¶Áª¼¶Êý´Ó1µ½32£¬´ÓCAM¶Ë¿ªÊ¼£¬trunkId[0]±íÊ¾µÚÒ»¼¶¼¶Áª£¬trunkId[1]±íÊ¾µÚ¶þ¼¶¼¶Áª, trunkId[i] = 0 ±íÊ¾ÎÞ¸ÉÏß
    BYTE        byRes[64];      /* Ô¤Áô */
}NET_DVR_MATRIX_ROUTE_INFO, *LPNET_DVR_MATRIX_ROUTE_INFO;


//»ñÈ¡PTZ×´Ì¬
typedef struct tagNET_DVR_PTZ_STATUS
{
    DWORD        dwSize;
    DWORD        dwUserID;    //1~256£¬0 ±íÊ¾ÎÞÓÃ»§
    DWORD       dwStatus;      // PTZ¿ØÖÆ×´Ì¬0-Í£Ö¹¡¢1-ÔËÐÐ
    DWORD        dwRestTime;  //Ê£ÓàÊ±¼ä
    BYTE        byRes[64];  
}NET_DVR_PTZ_STATUS, *LPNET_DVR_PTZ_STATUS;

typedef struct tagNET_DVR_SAFETYCABIN_WORK_MODE
{
    DWORD dwSize;
    BYTE  byWorkMode; //¹¤×÷Ä£Ê½£¬0-ÎÞÈËÃÅ³£¿ª£¬1-ÎÞÈËÃÅ³£Ëø
    BYTE  byRes[15];
}NET_DVR_SAFETYCABIN_WORK_MODE,*LPNET_DVR_SAFETYCABIN_WORK_MODE;

typedef struct tagNET_DVR_SAFETYCABIN_PERSON_SIGNAL_CFG
{
    DWORD dwSize;
    BYTE  bySensorType; //´«¸ÐÆ÷ÀàÐÍ£¬0-ºìÍâ¶ÔÉäÐÍ£¬1-Ä»Á±´«¸ÐÆ÷
    BYTE  bySensitivity; //´«¸ÐÆ÷Ãô¸Ð¶È£¬·¶Î§£º0-100%
    BYTE  byDevUseTimeout; //·À»¤²ÕÊ¹ÓÃ³¬Ê±Ê±¼ä£¬µ¥Î»£º·Ö,·¶Î§£º5-30£¬Ä¬ÈÏ³¬Ê±15min,³¬Ê±ºóÍ¨¹ý²¼·ÀÍ¨µÀÉÏ´«±¨¾¯
    BYTE  byRes1;
    WORD  wCurtainDelayTime; //Ä»Á±´«¸ÐÆ÷Ì½²âÑÓÊ±Ê±¼ä£¬µ¥Î»£ºÃë£¬·¶Î§£º0-10
    WORD  wCurtainResponseTime; //Ä»Á±ÈË×´Ì¬±ä»¯¿ØÖÆÆ÷ÏìÓ¦Ê±¼ä£¬µ¥Î»£ºÃë£¬·¶Î§£º0-300    
    BYTE  byRes2[32];
}NET_DVR_SAFETYCABIN_PERSON_SIGNAL_CFG,*LPNET_DVR_SAFETYCABIN_PERSON_SIGNAL_CFG;    

typedef struct tagNET_DVR_ETHERNET_IPV6_COND
{
    DWORD        dwSize;
    BYTE  byMACAddr[MACADDR_LEN]; //Íø¿¨µÄÎïÀíµØÖ·
    BYTE  byRes[64];      //±£Áô
}NET_DVR_ETHERNET_IPV6_COND,*LPNET_DVR_ETHERNET_IPV6_COND;

typedef struct tagNET_DVR_ETHERNET_IPV6_CFG
{
    DWORD        dwSize;
    BYTE  byState; //IPv6×´Ì¬£¬0-Â·ÓÉ·ÖÅä£¬1-×Ô¶¯ÉèÖÃ
    BYTE  byRes1[3]; 
    BYTE  byIPv6[MAX_IPV6_LEN]; //IPv6µØÖ·
    BYTE  byRes[64];      //±£Áô
}NET_DVR_ETHERNET_IPV6_CFG,*LPNET_DVR_ETHERNET_IPV6_CFG;

typedef struct  
{
    BYTE byHour;//0~24
    BYTE byMinute;//0~60
    BYTE bySecond;//0~60
    BYTE byRes;
    WORD wMilliSecond; //0~1000
    BYTE byRes1[2];
}NET_DVR_DAYTIME,*LPNET_DVR_DAYTIME;

typedef struct
{
    NET_DVR_DAYTIME  struStartTime; //¿ªÊ¼Ê±¼ä
    NET_DVR_DAYTIME  struStopTime; //½áÊøÊ±¼ä
}NET_DVR_SCHEDULE_DAYTIME, *LPNET_DVR_SCHEDULE_DAYTIME;

typedef struct
{
    BYTE byObjectSize;//Õ¼±È²ÎÊý(0~100)
    BYTE byMotionSensitive; /*ÒÆ¶¯Õì²âÁéÃô¶È, 0 - 5,Ô½¸ßÔ½ÁéÃô,0xff¹Ø±Õ*/
    BYTE byRes[6];
}NET_DVR_DNMODE, *LPNET_DVR_DNMODE;

typedef struct 
{
    BYTE byAreaNo;//ÇøÓò±àºÅ(IPC- 1~8)
    BYTE byRes[3];
    NET_VCA_RECT struRect;//µ¥¸öÇøÓòµÄ×ø±êÐÅÏ¢(¾ØÐÎ) size = 16;
    NET_DVR_DNMODE  struDayNightDisable;//¹Ø±ÕÄ£Ê½
    NET_DVR_DNMODE  struDayModeParam;//°×ÌìÄ£Ê½
    NET_DVR_DNMODE  struNightModeParam;//Ò¹ÍíÄ£Ê½
    BYTE byRes1[8];
}NET_DVR_MOTION_MULTI_AREAPARAM, *LPNET_DVR_MOTION_MULTI_AREAPARAM;

typedef struct
{
    BYTE byDayNightCtrl;//ÈÕÒ¹¿ØÖÆ 0~¹Ø±Õ,1~×Ô¶¯ÇÐ»»,2~¶¨Ê±ÇÐ»»(Ä¬ÈÏ¹Ø±Õ)
    BYTE byAllMotionSensitive; /*ÒÆ¶¯Õì²âÁéÃô¶È, 0 - 5,Ô½¸ßÔ½ÁéÃô,0xff¹Ø±Õ£¬È«²¿ÇøÓòµÄÁéÃô¶È·¶Î§*/ 
    BYTE byRes[2];//
    NET_DVR_SCHEDULE_DAYTIME struScheduleTime;//ÇÐ»»Ê±¼ä  16
    NET_DVR_MOTION_MULTI_AREAPARAM struMotionMultiAreaParam[MAX_MULTI_AREA_NUM];//×î´óÖ§³Ö24¸öÇøÓò
    BYTE byRes1[60];
}NET_DVR_MOTION_MULTI_AREA,*LPNET_DVR_MOTION_MULTI_AREA; //1328

typedef struct
{
    BYTE byMotionScope[64][96];        /*Õì²âÇøÓò,0-96Î»,±íÊ¾64ÐÐ,¹²ÓÐ96*64¸öÐ¡ºê¿é,Ä¿Ç°ÓÐÐ§µÄÊÇ22*18,Îª1±íÊ¾ÊÇÒÆ¶¯Õì²âÇøÓò,0-±íÊ¾²»ÊÇ*/
    BYTE byMotionSensitive;            /*ÒÆ¶¯Õì²âÁéÃô¶È, 0 - 5,Ô½¸ßÔ½ÁéÃô,0xff¹Ø±Õ*/
    BYTE byRes[3];
}NET_DVR_MOTION_SINGLE_AREA, *LPNET_DVR_MOTION_SINGLE_AREA;

typedef struct 
{
    NET_DVR_MOTION_SINGLE_AREA  struMotionSingleArea; //ÆÕÍ¨Ä£Ê½ÏÂµÄµ¥ÇøÓòÉè
    NET_DVR_MOTION_MULTI_AREA struMotionMultiArea; //×¨¼ÒÄ£Ê½ÏÂµÄ¶àÇøÓòÉèÖÃ    
}NET_DVR_MOTION_MODE_PARAM, *LPNET_DVR_MOTION_MODE_PARAM;

typedef struct 
{    
    NET_DVR_MOTION_MODE_PARAM  struMotionMode; //(5.1.0ÐÂÔö)
    BYTE byEnableHandleMotion;        /* ÊÇ·ñ´¦ÀíÒÆ¶¯Õì²â 0£­·ñ 1£­ÊÇ*/ 
    BYTE byEnableDisplay;    /*ÆôÓÃÒÆ¶¯Õì²â¸ßÁÁÏÔÊ¾£¬0-·ñ£¬1-ÊÇ*/
    BYTE byConfigurationMode; //0~ÆÕÍ¨,1~×¨¼Ò(5.1.0ÐÂÔö)
    BYTE byRes1; //±£Áô×Ö½Ú
    /* Òì³£´¦Àí·½Ê½ */
    DWORD   dwHandleType;        //Òì³£´¦Àí,Òì³£´¦Àí·½Ê½µÄ"»ò"½á¹û   
    /*0x00: ÎÞÏìÓ¦*/
    /*0x01: ¼àÊÓÆ÷ÉÏ¾¯¸æ*/
    /*0x02: ÉùÒô¾¯¸æ*/
    /*0x04: ÉÏ´«ÖÐÐÄ*/
    /*0x08: ´¥·¢±¨¾¯Êä³ö*/
    /*0x10: ´¥·¢JPRG×¥Í¼²¢ÉÏ´«Email*/
    /*0x20: ÎÞÏßÉù¹â±¨¾¯Æ÷Áª¶¯*/
    /*0x40: Áª¶¯µç×ÓµØÍ¼(Ä¿Ç°Ö»ÓÐPCNVRÖ§³Ö)*/
    /*0x200: ×¥Í¼²¢ÉÏ´«FTP*/ 
    /*0x1000: ×¥Í¼ÉÏ´«µ½ÔÆ*/
    DWORD   dwMaxRelAlarmOutChanNum ; //´¥·¢µÄ±¨¾¯Êä³öÍ¨µÀÊý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD   dwRelAlarmOut[MAX_ALARMOUT_V40]; //Êµ¼Ê´¥·¢µÄ±¨¾¯Êä³öºÅ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬´ÓÏÂ±ê0 - dwRelAlarmOut -1ÓÐÐ§£¬Èç¹ûÖÐ¼äÓöµ½0xffffffff,ÔòºóÐøÎÞÐ§
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30]; /*²¼·ÀÊ±¼ä*/
    /*´¥·¢µÄÂ¼ÏñÍ¨µÀ*/
    DWORD     dwMaxRecordChanNum;   //Éè±¸Ö§³ÖµÄ×î´ó¹ØÁªÂ¼ÏñÍ¨µÀÊý-Ö»¶Á
    DWORD     dwRelRecordChan[MAX_CHANNUM_V40];     /* Êµ¼Ê´¥·¢Â¼ÏñÍ¨µÀ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬´ÓÏÂ±ê0 - dwRelRecordChan -1ÓÐÐ§£¬Èç¹ûÖÐ¼äÓöµ½0xffffffff,ÔòºóÐøÎÞÐ§*/  
    BYTE  byRes[128]; //±£Áô×Ö½Ú
}NET_DVR_MOTION_V40,*LPNET_DVR_MOTION_V40;

typedef struct
{
    DWORD dwEnableHideAlarm;                /* ÊÇ·ñÆô¶¯ÕÚµ²±¨¾¯£¬0-·ñ£¬1-µÍÁéÃô¶È£¬2-ÖÐÁéÃô¶È£¬3-¸ßÁéÃô¶È*/
    WORD wHideAlarmAreaTopLeftX;            /* ÕÚµ²ÇøÓòµÄx×ø±ê */
    WORD wHideAlarmAreaTopLeftY;            /* ÕÚµ²ÇøÓòµÄy×ø±ê */
    WORD wHideAlarmAreaWidth;                /* ÕÚµ²ÇøÓòµÄ¿í */
    WORD wHideAlarmAreaHeight;                /*ÕÚµ²ÇøÓòµÄ¸ß*/ 
    /* ÐÅºÅ¶ªÊ§´¥·¢±¨¾¯Êä³ö */    
    DWORD   dwHandleType;        //Òì³£´¦Àí,Òì³£´¦Àí·½Ê½µÄ"»ò"½á¹û   
    /*0x00: ÎÞÏìÓ¦*/
    /*0x01: ¼àÊÓÆ÷ÉÏ¾¯¸æ*/
    /*0x02: ÉùÒô¾¯¸æ*/
    /*0x04: ÉÏ´«ÖÐÐÄ*/
    /*0x08: ´¥·¢±¨¾¯Êä³ö*/
    /*0x10: ´¥·¢JPRG×¥Í¼²¢ÉÏ´«Email*/
    /*0x20: ÎÞÏßÉù¹â±¨¾¯Æ÷Áª¶¯*/
    /*0x40: Áª¶¯µç×ÓµØÍ¼(Ä¿Ç°Ö»ÓÐPCNVRÖ§³Ö)*/
    /*0x200: ×¥Í¼²¢ÉÏ´«FTP*/ 
    /*0x1000:×¥Í¼ÉÏ´«µ½ÔÆ*/
    DWORD   dwMaxRelAlarmOutChanNum ; //´¥·¢µÄ±¨¾¯Êä³öÍ¨µÀÊý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD   dwRelAlarmOut[MAX_ALARMOUT_V40]; /*´¥·¢±¨¾¯Êä³öºÅ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬´ÓÏÂ±ê0 - dwRelAlarmOut -1ÓÐÐ§£¬Èç¹ûÖÐ¼äÓöµ½0xffffffff,ÔòºóÐøÎÞÐ§*/  
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30]; /*²¼·ÀÊ±¼ä*/
    BYTE  byRes[64]; //±£Áô
}NET_DVR_HIDEALARM_V40,*LPNET_DVR_HIDEALARM_V40; //ÕÚµ²±¨¾¯

typedef struct
{
    DWORD dwEnableVILostAlarm;                /* ÊÇ·ñÆô¶¯ÐÅºÅ¶ªÊ§±¨¾¯ ,0-·ñ,1-ÊÇ*/
    /* ÐÅºÅ¶ªÊ§´¥·¢±¨¾¯Êä³ö */    
    DWORD   dwHandleType;        //Òì³£´¦Àí,Òì³£´¦Àí·½Ê½µÄ"»ò"½á¹û   
    /*0x00: ÎÞÏìÓ¦*/
    /*0x01: ¼àÊÓÆ÷ÉÏ¾¯¸æ*/
    /*0x02: ÉùÒô¾¯¸æ*/
    /*0x04: ÉÏ´«ÖÐÐÄ*/
    /*0x08: ´¥·¢±¨¾¯Êä³ö*/
    /*0x10: ´¥·¢JPRG×¥Í¼²¢ÉÏ´«Email*/
    /*0x20: ÎÞÏßÉù¹â±¨¾¯Æ÷Áª¶¯*/
    /*0x40: Áª¶¯µç×ÓµØÍ¼(Ä¿Ç°Ö»ÓÐPCNVRÖ§³Ö)*/
    /*0x200: ×¥Í¼²¢ÉÏ´«FTP*/ 
    /*0x1000:×¥Í¼ÉÏ´«µ½ÔÆ*/
    DWORD   dwMaxRelAlarmOutChanNum ; //´¥·¢µÄ±¨¾¯Êä³öÍ¨µÀÊý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD   dwRelAlarmOut[MAX_ALARMOUT_V40]; /*´¥·¢±¨¾¯Êä³öºÅ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬´ÓÏÂ±ê0 - dwRelAlarmOut -1ÓÐÐ§£¬Èç¹ûÖÐ¼äÓöµ½0xffffffff,ÔòºóÐøÎÞÐ§*/
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30]; /*²¼·ÀÊ±¼ä*/
    BYTE    byVILostAlarmThreshold;    /*ÐÅºÅ¶ªÊ§±¨¾¯ãÐÖµ£¬µ±ÖµµÍÓÚãÐÖµ£¬ÈÏÎªÐÅºÅ¶ªÊ§£¬È¡Öµ0-99*/
    BYTE    byRes[63]; //±£Áô
}NET_DVR_VILOST_V40,*LPNET_DVR_VILOST_V40;    //ÐÅºÅ¶ªÊ§±¨¾¯

typedef struct
{
    NET_DVR_COLOR      struColor[MAX_TIMESEGMENT_V30];/*Í¼Ïó²ÎÊý(µÚÒ»¸öÓÐÐ§£¬ÆäËûÈý¸ö±£Áô)*/
    NET_DVR_SCHEDTIME  struHandleTime[MAX_TIMESEGMENT_V30];/*´¦ÀíÊ±¼ä¶Î(±£Áô)*/
}NET_DVR_VICOLOR, *LPNET_DVR_VICOLOR;

typedef struct
{
    DWORD  dwSize;
    BYTE  sChanName[NAME_LEN]; 
    DWORD  dwVideoFormat;    /* Ö»¶Á ÊÓÆµÖÆÊ½ 1-NTSC 2-PAL  */
    NET_DVR_VICOLOR struViColor;//    Í¼Ïñ²ÎÊý°´Ê±¼ä¶ÎÉèÖÃ
    //ÏÔÊ¾Í¨µÀÃû
    DWORD  dwShowChanName; // Ô¤ÀÀµÄÍ¼ÏóÉÏÊÇ·ñÏÔÊ¾Í¨µÀÃû³Æ,0-²»ÏÔÊ¾,1-ÏÔÊ¾
    WORD    wShowNameTopLeftX;                /* Í¨µÀÃû³ÆÏÔÊ¾Î»ÖÃµÄx×ø±ê */
    WORD    wShowNameTopLeftY;                /* Í¨µÀÃû³ÆÏÔÊ¾Î»ÖÃµÄy×ø±ê */
    //ÒþË½ÕÚµ²
    DWORD  dwEnableHide;        /* ÊÇ·ñÆô¶¯ÕÚµ² ,0-·ñ,1-ÊÇ*/
    NET_DVR_SHELTER struShelter[MAX_SHELTERNUM];
    //OSD
    DWORD  dwShowOsd;// Ô¤ÀÀµÄÍ¼ÏóÉÏÊÇ·ñÏÔÊ¾OSD,0-²»ÏÔÊ¾,1-ÏÔÊ¾
    WORD   wOSDTopLeftX;                /* OSDµÄx×ø±ê */
    WORD   wOSDTopLeftY;                /* OSDµÄy×ø±ê */
    BYTE    byOSDType;                    /* OSDÀàÐÍ(Ö÷ÒªÊÇÄêÔÂÈÕ¸ñÊ½) */
    /* 0: XXXX-XX-XX ÄêÔÂÈÕ */
    /* 1: XX-XX-XXXX ÔÂÈÕÄê */
    /* 2: XXXXÄêXXÔÂXXÈÕ */
    /* 3: XXÔÂXXÈÕXXXXÄê */
    /* 4: XX-XX-XXXX ÈÕÔÂÄê*/
    /* 5: XXÈÕXXÔÂXXXXÄê */
    /*6: xx/xx/xxxx(ÔÂ/ÈÕ/Äê) */
    /*7: xxxx/xx/xx(Äê/ÔÂ/ÈÕ) */
    /*8: xx/xx/xxxx(ÈÕ/ÔÂ/Äê)*/
    BYTE    byDispWeek;                /* ÊÇ·ñÏÔÊ¾ÐÇÆÚ */
    BYTE    byOSDAttrib;                /* OSDÊôÐÔ:Í¸Ã÷£¬ÉÁË¸ */
    /* 0: ²»ÏÔÊ¾OSD */
    /* 1: Í¸Ã÷£¬ÉÁË¸ */
    /* 2: Í¸Ã÷£¬²»ÉÁË¸ */
    /* 3: ²»Í¸Ã÷£¬ÉÁË¸ */
    /* 4: ²»Í¸Ã÷£¬²»ÉÁË¸ */    
    BYTE    byHourOSDType;                /* OSDÐ¡Ê±ÖÆ:0-24Ð¡Ê±ÖÆ,1-12Ð¡Ê±ÖÆ */
    BYTE    byFontSize;      //16*16(ÖÐ)/8*16(Ó¢)£¬1-32*32(ÖÐ)/16*32(Ó¢)£¬2-64*64(ÖÐ)/32*64(Ó¢)  3-48*48(ÖÐ)/24*48(Ó¢) 4-24*24(ÖÐ)/12*24(Ó¢) 5-96*96(ÖÐ)/48*96(Ó¢) 6-128*128(ÖÐ)/64*128(Ó¢) 0xff-×ÔÊÊÓ¦(adaptive)
    BYTE    byOSDColorType;     //0-Ä¬ÈÏ£¨ºÚ°×£©£»1-×Ô¶¨Òå
    BYTE    byAlignment;//¶ÔÆë·½Ê½ 0-×ÔÊÊÓ¦£¬1-ÓÒ¶ÔÆë, 2-×ó¶ÔÆë
    BYTE    byOSDMilliSecondEnable;//ÊÓÆµµþ¼ÓÊ±¼äÖ§³ÖºÁÃë£»0~²»µþ¼Ó, 1-µþ¼Ó
    NET_DVR_VILOST_V40 struVILost;  //ÊÓÆµÐÅºÅ¶ªÊ§±¨¾¯£¨Ö§³Ö×é£©
    NET_DVR_VILOST_V40 struAULost;  /*ÒôÆµÐÅºÅ¶ªÊ§±¨¾¯£¨Ö§³Ö×é£©*/
    NET_DVR_MOTION_V40 struMotion;  //ÒÆ¶¯Õì²â±¨¾¯£¨Ö§³Ö×é£©
    NET_DVR_HIDEALARM_V40 struHideAlarm;  //ÕÚµ²±¨¾¯£¨Ö§³Ö×é£©
    NET_DVR_RGB_COLOR    struOsdColor;//OSDÑÕÉ«
    BYTE    byRes[124];
}NET_DVR_PICCFG_V40,*LPNET_DVR_PICCFG_V40;

typedef struct  //
{
    DWORD                   dwSize; 
    BYTE   byWorkType;// 0-×ÔÊÊÓ¦, 1-¶¨Ê±Ä£Ê½
    BYTE   byRes[3];
    //¶¨Ê±Ä£Ê½²ÎÊý
    NET_DVR_SCHEDULE_DAYTIME  struDayNightScheduleTime;//ÈÕÒ¹¶¨Ê±ÇÐ»»Ä£Ê½(°×ÌìÊ±¼ä)
    NET_DVR_CAMERAPARAMCFG_EX   struSelfAdaptiveParam; //×ÔÊÊÓ¦²ÎÊý
    NET_DVR_CAMERAPARAMCFG_EX   struDayIspAdvanceParam;//°×Ìì²ÎÊý
    NET_DVR_CAMERAPARAMCFG_EX   struNightIspAdvanceParam;//Ò¹Íí²ÎÊý
    BYTE   byRes1[512];
}NET_DVR_ISP_CAMERAPARAMCFG,*LPNET_DVR_ISP_CAMERAPARAMCFG;

typedef struct
{
    DWORD       dwSize; 
    BYTE        byIrLampServer;//ºìÍâµÆÉèÖÃ 0¡«½ûÓÃ£¬1¡«ÆôÓÃ
    BYTE        bytelnetServer;//telnetÉèÖÃ 0¡«½ûÓÃ£¬1¡«ÆôÓÃ
    BYTE        byABFServer;//ABFÉèÖÃ 0¡«ÆôÓÃ£¬1¡«½ûÓÃ
    BYTE        byEnableLEDStatus;//×´Ì¬Ö¸Ê¾µÆ¿ØÖÆ 0¡«½ûÓÃ£¬1¡«ÆôÓÃ
    BYTE        byEnableAutoDefog;//×Ô¶¯³ýÎí¿ØÖÆ 0¡«ÆôÓÃ£¬1¡«½ûÓÃ
    BYTE        byEnableSupplementLight;//²¹¹âµÆ¿ØÖÆ0-ÆôÓÃ£¬1-½ûÓÃ
    BYTE        byEnableDeicing;//³ý±ù¹¦ÄÜ 0-¹Ø±Õ£¬1-¿ªÆô
    BYTE        byRes[249];
}NET_DVR_DEVSERVER_CFG,*LPNET_DVR_DEVSERVER_CFG;

typedef struct tagNET_DVR_GBT28181_ACCESS_CFG
{
    DWORD       dwSize;
    BYTE       byEnable;//28181Ð­ÒéÊ¹ÄÜ 0-¹Ø±Õ 1-¿ªÆô
    BYTE       byTransProtocol;//´«ÊäÐ­Òé:0-UDP¡¢1-TCP¡¢Ä¬ÈÏ0-UDP
    WORD       wLocalSipPort;//1024-65535(IPCÉè±¸¶Ë)
    char       szServerID[MAX_SERVERID_LEN];//·þÎñÆ÷ID£º64×Ö½Ú×Ö·û´®£¬½öÏÞÊý×Ö
    char       szServerDomain[MAX_SIPSERVER_ADDRESS_LEN] ;// ·þÎñÆ÷Óò
    char       szSipServerAddress[MAX_SIPSERVER_ADDRESS_LEN] ;// SIP·þÎñÆ÷µØÖ·Ö§³ÖÓòÃûºÍIPµØÖ·
    WORD       wServerSipPort;//·þÎñÆ÷SIP¶Ë¿Ú£º1024-65535
    BYTE       byProtocolVersion;//Ð­Òé°æ±¾ 0-GB/T28181-2011(½öÖ§³ÖUDP),1-GB/T28181-2015(Ö§³ÖTCP,UDP)
    BYTE       byRes3;
    char       szSipUserName[MAX_SERVERNAME_LEN];//SIPÓÃ»§Ãû³Æ£º64×Ö½Ú×Ö·û´®(µÚÈý·½SIPÖÕ¶ËÇëÇóIPC·þÎñÊ±Ê¹ÓÃ)
    char       szSipAuthenticateID[MAX_AUTHENTICATEID_LEN];//SIPÓÃ»§ÈÏÖ¤ID£º64×Ö½Ú×Ö·û´®
    char       szSipAuthenticatePasswd[MAX_AUTHENTICATEPASSWD_LEN];//SIPÓÃ»§ÈÏÖ¤ÃÜÂë£º32×Ö½Ú×Ö·û´®(IPCÉè±¸×¢²áµ½SIP·þÎñÆ÷Ê±Ê¹ÓÃ)
    DWORD      dwRegisterValid;//×¢²áÓÐÐ§ÆÚ£ºµ¥Î»Ãë£¬Ä¬ÈÏ3600£»
    BYTE       byHeartbeatInterval;//ÐÄÌø¼ä¸ô£ºµ¥Î»Ãë£¬Ä¬ÈÏ10Ãë£»
    BYTE       byMaxHeartbeatTimeOut;//×î´óÐÄÌø³¬Ê±´ÎÊý£ºÄ¬ÈÏ3´Î£»
    BYTE       byStreamType;// È¡Á÷ÀàÐÍ0¡«Ö÷ÂëÁ÷£¬1¡«×ÓÂëÁ÷£¬2¡«3ÂëÁ÷
    BYTE          byDeviceStatus; //Éè±¸ÊÇ·ñÔÚÏß×´Ì¬£¬0-±£Áô£¬1-ÔÚÏß£¬2-ÀëÏß
    DWORD      dwRegisterInterval;//×¢²á¼ä¸ô:×¢²áÊ§°ÜºóÔÙ´Î×¢²áµÄÊ±¼ä¼ä¸ô,·¶Î§60-600s£¬Ä¬ÈÏ60s
    DWORD      dwAutoAllocChannelID ; //ÊÇ·ñ×Ô¶¯·ÖÅäÍ¨µÀID,°´Î»±íÊ¾£¬0ÎªÊÖ¶¯ÅäÖÃ£¬1Îª×Ô¶¯·ÖÅä£¬bit1-×Ô¶¯·ÖÅä±àÂëÍ¨µÀID,bit2-×Ô¶¯·ÖÅä±¨¾¯ÊäÈëÍ¨µÀ,bit3-×Ô¶¯·ÖÅä½âÂëÍ¨µÀID 
    char       szDeviceDomain[MAX_SIPSERVER_ADDRESS_LEN] ;// Éè±¸Óò
    BYTE       byRes4[116];
}NET_DVR_GBT28181_ACCESS_CFG,*LPNET_DVR_GBT28181_ACCESS_CFG;

//GBT28181Ð­ÒéµÄÉè±¸±àÂëÍ¨µÀÅäÖÃ
typedef struct tagNET_DVR_GBT28181_CHANINFO_CFG
{
    DWORD                   dwSize;
    char    szVideoChannelNumID[MAX_COMPRESSIONID_LEN];//Éè±¸ÊÓÆµÍ¨µÀ±àÂëID£º64×Ö½Ú×Ö·û´®£¬½öÏÞÊý×Ö
    BYTE             byRes[256];
}NET_DVR_GBT28181_CHANINFO_CFG,*LPNET_DVR_GBT28181_CHANINFO_CFG;

//GBT28181Ð­ÒéµÄ±¨¾¯ÊäÈëÍ¨µÀÅäÖÃ Ìõ¼þ½á¹¹
typedef struct tagNET_DVR_ALARMIN_INFO
{
    NET_DVR_STREAM_INFO struStreamInfo;
    DWORD  dwAlarmInChannel;//±¨¾¯ÊäÈëÍ¨µÀºÅ
    BYTE  byRes[32]; //±£Áô
}NET_DVR_ALARMIN_INFO,*LPNET_DVR_ALARMIN_INFO;

//GBT28181Ð­ÒéµÄ±¨¾¯ÊäÈëÍ¨µÀÅäÖÃ ÅäÖÃ½á¹¹
typedef struct tagNET_DVR_GBT28181_ALARMINCFG
{
    DWORD                   dwSize;
    char    szAlarmInNumID[MAX_COMPRESSIONID_LEN];//Éè±¸±¨¾¯ÊäÈë±àÂëID£¨Ã¿Ò»Â·±¨¾¯ÊäÈë²»Í¬£©£º20×Ö½Ú×Ö·û´®£¬½öÏÞÊý×Ö
    BYTE             byRes[256];
}NET_DVR_GBT28181_ALARMINCFG,*LPNET_DVR_GBT28181_ALARMINCFG;

typedef struct tagNET_DVR_CAMERA_SETUPCFG
{
    DWORD dwSize;
    WORD  wSetupHeight; //¼ÜÉè¸ß¶È[0,20]£¬µ¥Î»£ºÃ×
    BYTE  byLensType; //¾µÍ·½¹¾àÀàÐÍ£¬0-Î´Öª,1-8mm,2-12mm,3-16mm,4-25mm,5-35mm,6-50mm,7-4mm,8-6mm
    BYTE  bySetupHeightUnit;// ¼ÜÉè¸ß¶Èµ¥Î»0¡«M,1~CM
    DWORD dwSceneDis; //Í¼ÏñÏÂ±ßÔµÎ»ÖÃÓëÏà»úÖ®¼äµÄË®Æ½¾àÀë£¬µ¥Î»£ºÀåÃ×
    float fPitchAngle;//Ïà»ú¸©Ñö½Ç¶È[-180¡ã, 180¡ã],
    float fInclineAngle;//Ïà»úÇãÐ±½Ç¶È[-180¡ã,180¡ã]
    float fRotateAngle;//Ïà»úÐý×ª½Ç¶È[-180¡ã,180¡ã]
    WORD  wVideoDetCoefficient; //ÊÓÆµ²âÊÔÏµÊý[0,300](3.6ÐÂÔö)
    BYTE  byErectMethod; //¼ÜÉè·½Ê½0-Õý×°£¬1-²à×°(3.6ÐÂÔö)
    BYTE  byCameraViewAngle;//ÉãÏñ»ú°²×°ÊÓÒ°½Ç¶È(0-´¹Ö±£¬1-ÇãÐ±£¬Ä¬ÈÏ0-´¹Ö±)
    DWORD dwHorizontalDistance;//ÉãÏñ»úÓë³öÈë¿ÚË®Æ½¾àÀë£º·¶Î§1-1000£¬Ä¬ÈÏ30£¬µ¥Î»cm£¬×¢ÒâÉãÏñ»ú½Ç¶ÈÎªÇãÐ±Ê±¸ÃÏîÓÐÐ§
    BYTE  byDetailLensType;//·¶Î§1-100£¬Ä¬ÈÏ28£¬µ¥Î»0.1mm
    BYTE  byRes[3]; 
    float fHorFieldAngle; //Ïà»úË®Æ½ÊÓ³¡½Ç½Ç¶È[0¡ã, 360¡ã]£¨×¥ÅÄ»ú£©
    float fVerFieldAngle; //Ïà»ú´¹Ö±ÊÓ³¡½Ç½Ç¶È[0¡ã, 360¡ã]£¨×¥ÅÄ»ú£©
    BYTE  byRes1[24];
}NET_DVR_CAMERA_SETUPCFG, *LPNET_DVR_CAMERA_SETUPCFG;

//ÆðÖ¹ÈÕÆÚ¶Î²ÎÊý½á¹¹Ìå
typedef struct tagNET_DVR_SCHEDDATE
{   
    BYTE   byStartMonth;   //ÆðÊ¼£¨ÔÂ£©
    BYTE   byStartDay;     //ÆðÊ¼£¨ÈÕ£©
    BYTE   byStopMonth;    //½áÊø£¨ÔÂ£©
    BYTE   byStopDay;      //½áÊø£¨ÈÕ£©
}NET_DVR_SCHEDDATE,*LPNET_DVR_SCHEDDATE;

//Ê±¿ØÊä³ö²ÎÊý
typedef struct tagNET_DVR_OUTPUT_SCHEDULE
{   
    NET_DVR_SCHEDTIME struTime;  //Ê±¼ä¶Î
    BYTE byState;                //0¨C¹Ø±Õ, 1¨C¿ªÆô
    BYTE byRes[11];              //±£Áô
} NET_DVR_OUTPUT_SCHEDULE ,*LPNET_DVR_OUTPUT_SCHEDULE;

//µ¥ÌõÊ±¿ØÊä³ö¹æÔò²ÎÊý
typedef struct tagNET_DVR_ONE_OUTPUT_SCHEDULE_RULE
{   
    BYTE                     byEnable;    //ÊÇ·ñÆôÓÃ¹æÔò,0-·ñ,1-ÊÇ
    BYTE                     byRes1[3];   //±£Áô
    NET_DVR_SCHEDDATE        struDate;    //ÈÕÆÚÇø¶Î
    NET_DVR_OUTPUT_SCHEDULE  struOutputSchedule[MAX_TIMESEGMENT_V30];  //×î¶àÖ§³Ö8¸öÊ±¼ä¶ÎµÄÊ±¿ØÊä³ö
    BYTE                     byRes2[16];  //±£Áô
}NET_DVR_ONE_OUTPUT_SCHEDULE_RULE,*LPNET_DVR_ONE_OUTPUT_SCHEDULE_RULE;

//Ê±¿ØÊä³ö¹æÔò²ÎÊý
typedef struct tagNET_DVR_OUTPUT_SCHEDULE_RULECFG
{   
    DWORD  dwSize; //½á¹¹Ìå´óÐ¡
    NET_DVR_ONE_OUTPUT_SCHEDULE_RULE struOutputRule[MAX_RULE_NUM]; //×î¶àÖ§³Ö8¸öÈÕÆÚÇø¶ÎµÄ¹æÔòÅäÖÃ
    BYTE   byRes[64];  //±£Áô
}NET_DVR_OUTPUT_SCHEDULE_RULECFG,*LPNET_DVR_OUTPUT_SCHEDULE_RULECFG;

//½»Í¨Í³¼Æ±¨¾¯²ÎÊý
typedef struct tagNET_DVR_TPS_ALARMCFG
{
    DWORD dwSize;
    BYTE byEnable; //ÊÇ·ñÆôÓÃ½»Í¨Í³¼Æ±¨¾¯ÉÏ´«
    BYTE byRes1[3];    //
    DWORD dwInterval;//Í³¼Æ¼ä¸ôÊ±¼ä£¨µ¥Î»£º·ÖÖÓ£©
    BYTE  byRes[248];
}NET_DVR_TPS_ALARMCFG, *LPNET_DVR_TPS_ALARMCFG;

typedef struct tagNET_DVR_DOWNLOAD_ALARM_RECORD_COND
{
    DWORD dwSize;
    WORD  wAlarmRecordID;    //±¨¾¯Â¼ÏñID(ÓÃÓÚ²éÑ¯Â¼Ïñ£¬½öµ±byResultTypeÎª2Ê±ÓÐÐ§)
    BYTE  byRes[130];
}NET_DVR_DOWNLOAD_ALARM_RECORD_COND, *LPNET_DVR_DOWNLOAD_ALARM_RECORD_COND;

typedef struct tagNET_DVR_CABINET_AlARM_PARAMCFG
{
    char  sCabinetName[NAME_LEN];
    BYTE  byAssociateIO;//1-4£¬0xff£¬ ÆäÖÐ1-4±íÊ¾¾ßÌåµÄIOÍ¨µÀºÅ£¬0xff±íÊ¾²»ÆôÓÃ
    BYTE  byCabinetState;//0~µÍµçÆ½,1~¸ßµçÆ½
    BYTE  byAlarmIntervalTime;//È¡Öµ·¶Î§1-60£¬µ¥Î»£ºÃë
    BYTE  byRes1[25]; 
}NET_DVR_CABINET_AlARM_PARAMCFG, *LPNET_DVR_CABINET_AlARM_PARAMCFG;

typedef struct tagNET_DVR_CABINET_CFG
{
    DWORD dwSize;
    BYTE  byEnable;//0~²»ÆôÓÃ£¬1¡«ÆôÓÃ
    BYTE  byRes[3];
    NET_DVR_CABINET_AlARM_PARAMCFG struCabinetCfg[MAX_CABINET_COUNT];
    BYTE  byRes1[84];
} NET_DVR_CABINET_CFG, *LPNET_DVR_CABINET_CFG;

typedef  struct  tagNET_ITS_GATE_LANE_CFG
{ 
    BYTE      byGateSiteID[MAX_ID_LEN];    //³öÈë¿Ú±àºÅ
    BYTE      byGateInfo[MAX_ID_LEN];      //³öÈë¿ÚÐÅÏ¢ÃèÊö
    BYTE      byLaneName[NAME_LEN];     //³µµÀÃû³Æ
    BYTE      byValid;              //ÊÇ·ñÆôÓÃ 0 ±íÊ¾Î´ÆôÓÃ£¬1±íÊ¾ÆôÓÃ
    BYTE      byCamLaneId;     //¶ÔÓ¦Ïà»ú³µµÀºÅ1¡«16£¨Ïà»úÅäÖÃµÄ³µµÀºÅ£¬¿ÉÒÔÌøÔ¾£¬¿ÉÒÔÏàÍ¬£©
    WORD      wLaneid;            //³µµÀºÅ1¡«32£¨Ë÷Òý³µµÀºÅ£¬¿ÉÒÔÌøÔ¾ Âß¼­³µµÀ£©
    BYTE      byRelativeIoNum;         //Âß¼­³µµÀºÅ¹ØÁªµÄÊä³ö¿Ú±àºÅ      
    BYTE      byDirection;          //·½Ïò±àºÅ;  0 -ÆäËû 1 Èë³¡  2 ³ö³¡ 3 Ë«Ïò
    BYTE      byLprMode; //ÅÆÊ¶·ÅÐÐÅäÖÃ0 È«²¿½ø1 ³ýºÚÃûµ¥½ø2 °×Ãûµ¥½ø
    BYTE       byCardMode; //¿¨Æ¬·ÅÐÐÅäÖÃ0 È«²¿½ø1 ³ýºÚÃûµ¥½ø2 °×Ãûµ¥½ø 
    BYTE       byGateLaneMode;//³öÈë¿Ú·ÅÐÐÅäÖÃÄ£Ê½ 0-È«²¿½ø 1-Ö»ÓÐÅÆÊ¶Æ¥Åä·ÅÐÐ2 Ö»ÓÐË¢¿¨Æ¥Åä·Å//ÐÐ 3-ÅÆÊ¶»ò¿¨Æ¬ÓÐÒ»¸öÆ¥ÅäÔò·ÅÐÐ 4-ÅÆÊ¶ÇÒ¿¨Æ¬Í¬Ê±Æ¥ÅäÔò·ÅÐÐ 5-È«²»½ø
    //2013-11-19 ÐÂÔö²ÎÊý
    BYTE      byCharge;//ÊÇ·ñÊÕ·Ñ 0-²»ÊÕ·Ñ£¬1-ÊÕ·Ñ
    BYTE      byChargeMode;//ÊÕ·ÑÀàÐÍ 0-³µÅÆÊÕ·Ñ£¬1-¿¨ºÅÊÕ·Ñ
    BYTE      byRes1;
    BYTE      byLedRelativeIndex[MAX_INDEX_LED];//LED Ë÷Òý (1~255) ½ô´ÕÅÅÁÐ£¬0±íÊ¾ÎÞÐ§£¬²»½âÎöºóÃæµÄÊý¾Ý
    BYTE      byGateRelativeIndex;//³öÈë¿Ú¿ØÖÆ»úÏà¶ÔË÷Òý
    BYTE      byFarRrRelativeIndex;// Ô¶¾àÀë¶Á¿¨Æ÷Ïà¶ÔË÷Òý
    BYTE      byRes[82]; //Ô¤Áô
}NET_ITS_GATE_LANE_CFG, *LPNET_ITS_GATE_LANE_CFG;

typedef    struct  tagNET_ITS_IPC_CHAN_LANE_CFG
{
    DWORD     dwSize; 
    BYTE      byIpcType;  //0-ÎÞ£¬1-³µÅÆ×¥ÅÄ£¬2-ÈËÁ³×¥ÅÄ£¬3-¼à¿ØÏà»ú
    BYTE      byRes[135];
    NET_ITS_GATE_LANE_CFG  struGateLane[4]; //³µµÀÅäÖÃ½á¹¹Ìå
}NET_ITS_IPC_CHAN_LANE_CFG, *LPNET_ITS_IPC_CHAN_LANE_CFG;

//Éè±¸Ô¶³Ì¿ØÖÆ
typedef    struct    tagNET_ITS_REMOTE_COMMAND
{
    WORD            wLaneid; //³µµÀºÅ1¡«32£¨Ë÷Òý³µµÀºÅ£¬¿ÉÒÔÌøÔ¾£©
    BYTE             byCamLaneId;    //¶ÔÓ¦Ïà»ú³µµÀºÅ1¡«16£¨Ïà»úÅäÖÃµÄ³µµÀºÅ£¬¿ÉÒÔÌøÔ¾£¬¿ÉÒÔÏàÍ¬£©
    BYTE            byRes;     //Ô¤Áô
    DWORD           dwCode;       //ÃüÁîÂë 0x0 ¿ªÕ¢ 0x1 ¹ØÕ¢£¬ÆäËü´ýÀ©Õ¹
    BYTE            byRes1[128];
}NET_ITS_REMOTE_COMMAND,*LPNET_ITS_REMOTE_COMMAND;

typedef  struct    tagNET_ITS_REMOTE_CONTROL_
{
    DWORD          dwSize;
    NET_ITS_REMOTE_COMMAND    struRemoteCommand;   //Ô¶³ÌÃüÁî½á¹¹
}NET_ITS_REMOTE_CONTROL,*LPNET_ITS_REMOTE_CONTROL;

//³¤Á¬½Ó»ñÈ¡Í¨µÀ×´Ì¬
typedef struct tagNET_ITS_ECT_CHANNELSTATE
{
    DWORD dwSize;
    BYTE  byRecordStatic; //Í¨µÀÊÇ·ñÔÚÂ¼Ïñ,0-²»Â¼Ïñ,1-Â¼Ïñ
    BYTE  bySignalStatic; //Á¬½ÓµÄÐÅºÅ×´Ì¬,0-Õý³£,1-ÐÅºÅ¶ªÊ§
    BYTE  byHardwareStatic;//Í¨µÀÓ²¼þ×´Ì¬,0-Õý³£,1-Òì³£,ÀýÈçDSPËÀµô
    BYTE  byChannelArmState; //½ÓÈëIPCµÄ²¼·À×´Ì¬
    DWORD dwChannel; //Í¨µÀºÅ
    DWORD dwBitRate;//Êµ¼ÊÂëÂÊ
    DWORD dwLinkNum;//¿Í»§¶ËÁ¬½ÓµÄ¸öÊý
    NET_DVR_IPADDR struClientIP[MAX_LINK];//¿Í»§¶ËµÄIPµØÖ·
    DWORD dwIPLinkNum;//Èç¹û¸ÃÍ¨µÀÎªIP½ÓÈë£¬ÄÇÃ´±íÊ¾IP½ÓÈëµ±Ç°µÄÁ¬½ÓÊý
    BYTE  byExceedMaxLink;    // ÊÇ·ñ³¬³öÁË128Â·Á¬½ÓÊý 0 - Î´³¬³ö, 1-³¬³ö     
    BYTE  byRes[139];       // ±£Áô×Ö½Ú    
}NET_ITS_ECT_CHANNELSTATE, *LPNET_ITS_ECT_CHANNELSTATE;

//Íâ½ÓµÆ
typedef struct tagNET_DVR_PARK_EXTERNAL_SUBINFO
{
    BYTE   byEnable; //0 ¡« ²»¿ªÆô 1 ¡« ¿ªÆô
    BYTE   byFlicker;//0 ¡« ²»ÉÁË¸ 1 ¡« ÉÁË¸
    BYTE   byIOState;//0 ¡« µÍµçÆ½ 1 ¡« ¸ßµçÆ½ (ÍâÖÃµÆÆðÐ§)
    BYTE   byLampColor;// 0- Ãð 1-ºì   2-ÂÌ  3-»Æ  4-À¶ 5-Æ·ºì  6-Çà  7-°×É« (ÄÚÖÃµÆÆðÐ§)
    BYTE   byRes[4];
}NET_DVR_PARK_EXTERNAL_SUBINFO, *LPNET_DVR_PARK_EXTERNAL_SUBINFO;

typedef struct tagNET_DVR_PARK_INLAY_SUBINFO
{
    BYTE   byEnable; //0¡«²»¿ªÆô 1 ¡«¿ªÆô
    BYTE   byFlicker;//0¡«²»ÉÁË¸ 1 ¡«ÉÁË¸
    BYTE   byLampColor;//0-Ãð 1-ºì 2-ÂÌ 3-»Æ 4-À¶ 5-Æ·ºì 6-Çà 7-°×É« (ÄÚÖÃµÆÆðÐ§) 
    BYTE   byRes[21];
}NET_DVR_PARK_INLAY_SUBINFO, *LPNET_DVR_PARK_INLAY_SUBINFO;

typedef struct tagNET_DVR_PARKINFO
{
    NET_DVR_PARK_EXTERNAL_SUBINFO   struNormalParkIOState;//ÓÐ³µioµçÆ½×´Ì¬
    NET_DVR_PARK_EXTERNAL_SUBINFO   struNormalNoParkIOState;//ÎÞ³µioµçÆ½×´Ì¬
    NET_DVR_PARK_EXTERNAL_SUBINFO   struSpecialParkIOState;//ÌØÊâ³µÎ»ÓÐ³µioµçÆ½×´Ì¬
    NET_DVR_PARK_EXTERNAL_SUBINFO   struSpecialNoParkIOState;//ÌØÊâ³µÎ»ÎÞ³µioµçÆ½×´Ì¬
    BYTE   byRes[32];
}NET_DVR_PARKINFO, *LPNET_DVR_PARKINFO;

typedef struct tagNET_DVR_EXTERNAL_LAMP_CTRL_MODE
{
    NET_DVR_PARKINFO  struParkInfo[MAX_PARKING_NUM];/*Íâ½ÓµÆµÄÇé¿öÏÂ³µÎ»ÐÅÏ¢£¬Ò»¸öÍ¨µÀ×î´ó4¸ö³µÎ» (´Ó×óµ½ÓÒ³µÎ» Êý×é0¡«3)*/
    BYTE   byRes[32];
}NET_DVR_EXTERNAL_LAMP_CTRL_MODE, *LPNET_DVR_EXTERNAL_LAMP_CTRL_MODE; 

typedef struct tagNET_DVR_INLAY_LAMP_CTRL_MODE
{
    NET_DVR_PARK_INLAY_SUBINFO  struLampStateCtrl[MAX_PARKING_STATUS];
    BYTE   byRes[96];
}NET_DVR_INLAY_LAMP_CTRL_MODE, *LPNET_DVR_INLAY_LAMP_CTRL_MODE; 

typedef struct tagNET_DVR_LAMP_INFO //8
{
    BYTE   byEnable; //0¡«²»¿ªÆô 1 ¡«¿ªÆô
    BYTE   byFlicker;//0~²»ÉÁË¸ 1 ¡«ÉÁË¸(³µÎ»Ö¸Ê¾µÆÉÁË¸)
    BYTE   byLampColor;//0- Ãð 1-ºì 2-ÂÌ 3-»Æ 4-À¶ 5-Æ·ºì 6-Çà 7-°×É« (³µÎ»Ö¸Ê¾µÆÑÕÉ«)
    BYTE   byRes[5];
}NET_DVR_LAMP_INFO, *LPNET_DVR_LAMP_INFO;

//ÄÚÖÃÍâÖÃµÆÄ£Ê½
typedef struct tagNET_DVR_PARKLAMP_CTRL_MODE//size == 72
{
    //³µÎ»×´Ì¬ 0´ú±íÎÞ³µ£¬1´ú±íÓÐ³µ£¬2´ú±íÑ¹Ïß(ÓÅÏÈ¼¶×î¸ß), 3ÌØÊâ³µÎ»
    NET_DVR_LAMP_INFO  struLampInfo[MAX_PARKING_STATUS/*8*/];
    //¹ØÁª³µÎ»µÆ£¨0-ÄÚÖÃµÆ, 1-ÍâÖÃµÆ1, 2-ÍâÖÃµÆ2, 3-ÍâÖÃµÆ3£©
    BYTE   byLampType;
    BYTE   byRes[7];
}NET_DVR_PARKLAMP_CTRL_MODE, *LPNET_DVR_PARKLAMP_CTRL_MODE; 

typedef struct tagNET_DVR_LAMP_PARAM //4
{
    BYTE   byEnable; //0¡«²»¿ªÆô 1 ¡«¿ªÆô
    BYTE   byFlicker;//0~²»ÉÁË¸ 1 ¡«ÉÁË¸
    BYTE   byLampColor;//0- Ãð 1-ºì   2-ÂÌ  3-»Æ  4-À¶ 5-Æ·ºì  6-Çà  7-°×É« 
    BYTE   byRes[3];
}NET_DVR_LAMP_PARAM, *LPNET_DVR_LAMP_PARAM;

//ÄÚÖÃÍâÖÃµÆÄ£Ê½
typedef struct tagNET_DVR_EXTERNAL_PARKLAMP //size == 56
{
    //³µÎ»×´Ì¬ 0´ú±íÎÞ³µ£¬1´ú±íÓÐ³µ£¬2´ú±íÑ¹Ïß(ÓÅÏÈ¼¶×î¸ß), 3ÌØÊâ³µÎ»
    NET_DVR_LAMP_PARAM  struLampParam[MAX_PARKING_STATUS/*8*/];
    //¹ØÁª³µÎ»µÆ£¨0-ÄÚÖÃµÆ, 1-ÍâÖÃµÆ1, 2-ÍâÖÃµÆ2, 3-ÍâÖÃµÆ3£©
    BYTE   byLampType;
    BYTE   byRes[7];
}NET_DVR_EXTERNAL_PARKLAMP, *LPNET_DVR_EXTERNAL_PARKLAMP; 

/*ÄÚÖÃµÆ¼ÓÍâÖÃµÆÄ£Ê½ÏÂ ÄÚÖÃµÆ¿ØÖÆ½á¹¹×ÓÐÅÏ¢ */
typedef struct tagNET_DVR_BUILTIN_PARKLAMP
{
    BYTE   byEnable;     //0¡«²»¿ªÆô 1 ¡«¿ªÆô
    BYTE   byFlicker;    //0~²»ÉÁË¸ 1 ¡«ÉÁË¸
    BYTE   byLampColor;  //0- Ãð 1-ºì 2-ÂÌ 3-»Æ 4-À¶ 5-Æ·ºì 6-Çà 7-°×É« (ÄÚÖÃµÆÆðÐ§)  
    BYTE   byRes[5];
}NET_DVR_BUILTIN_PARKLAMP, *LPNET_DVR_BUILTIN_PARKLAMP;

/* »ìºÏ¿ØÖÆÄ£Ê½½á¹¹ */ 
typedef struct tagNET_DVR_MIXLAMP_CTRL_MODE
{
    NET_DVR_EXTERNAL_PARKLAMP  struExternalParkLamp[MAX_PARKING_NUM/*4*/];//ÍâÖÃµÆ °´ÕÕ³µÎ»ºÅ½øÐÐÇø·Ö£¬Ò»¸öÍ¨µÀ×î´ó4¸ö³µÎ» (´Ó×óµ½ÓÒ³µÎ» Êý×é0¡«3) 
    NET_DVR_BUILTIN_PARKLAMP  struBuiltInParkLamp[MAX_PARKING_STATUS/*8*/];//ÄÚÖÃµÆ °´ÕÕ³µÎ»×´Ì¬Çø·Ö£¬³µÎ»×´Ì¬ 0´ú±íÎÞ³µ£¬1´ú±íÓÐ³µ£¬2´ú±íÑ¹Ïß(ÓÅÏÈ¼¶×î¸ß), 3ÌØÊâ³µÎ»
}NET_DVR_MIXLAMP_CTRL_MODE, *LPNET_DVR_MIXLAMP_CTRL_MODE;

/* µ¥¿ØÍâ½ÓµÆ¿ØÖÆÄ£Ê½½á¹¹ */ 
typedef struct tagNET_DVR_SINGLELAMP_CTRL_MODE //µ¥ÍâÖÃµÆÄ£Ê½ÊÇ²»Çø·Ö³µÎ»ÐÅÏ¢£¬ÏÔÊ¾µ±Ç°³µÎ»×´Ì¬ÖÐ£¬µÈ¼¶×îºÃµÄ×´Ì¬£¨Ñ¹Ïß>ÌØÊâ³µÎ»>ÓÐÎÞ³µ×´Ì¬£©
{
    NET_DVR_PARK_EXTERNAL_SUBINFO   struExternLampStateCtrl[MAX_PARKING_STATUS/*4*/];//ÍâÖÃµÆ °´ÕÕ³µÎ»ºÅ½øÐÐÇø·Ö£¬Ò»¸öÍ¨µÀ×î´ó4¸ö³µÎ» (´Ó×óµ½ÓÒ³µÎ» Êý×é0¡«3)
    BYTE byLampType; /* 1-ÍâÖÃµÆ1£¬2-ÍâÖÃµÆ2£¬3-ÍâÖÃµÆ3*/
    BYTE byRes[23];
}NET_DVR_SINGLELAMP_CTRL_MODE, *LPNET_DVR_SINGLELAMP_CTRL_MODE;

typedef union tagNET_DVR_LAMP_CTRL_MODE_UNION
{
    BYTE uLen[288];
    NET_DVR_INLAY_LAMP_CTRL_MODE struInlayLampCtrlMode;/*ÄÚÖÃµÆ¿ØÖÆÄ£Ê½½á¹¹*/ 
    NET_DVR_EXTERNAL_LAMP_CTRL_MODE struExternalLampCtrlMode;/*Íâ½ÓµÆ¿ØÖÆÄ£Ê½½á¹¹*/
    NET_DVR_PARKLAMP_CTRL_MODE struParkLampCtrlMode[MAX_PARKING_NUM/*4*/];/*ÄÚÖÃÍâÖÃµÆÄ£Ê½£¬Ò»¸öÍ¨µÀ×î´ó4¸ö³µÎ» (´Ó×óµ½ÓÒ³µÎ» Êý×é0¡«3)  µ±Ä£Ê½ÎªÄÚÍâÖÃµÆµÄÊ±ºòÉúÐ§*/
    //³µÎ»¼ì²âÏà»úÄÚÍâÖÃµÆ£¬»ìºÏ¿ØÖÆÄ£Ê½£¨Çø·ÖÓëÉÏÃæÄÚÍâÖÃµÆÄ£Ê½£¬¸ÃÄ£Ê½ÏÂÄÚÖÃµÆ²»×÷ÎªÍâÖÃµÆÊ¹ÓÃ£¨ÄÚÖÃÍâÖÃµÆÄ£Ê½ÏÂ£¬ÄÚÖÃµÆ×÷ÎªÍâÖÃµÆÊ¹ÓÃ£©£©£»
    //»ìºÏ¿ØÖÆÄ£Ê½ÏÂ£¬ÄÚÖÃµÆÏÔÊ¾µ±Ç°¼à²â³µÎ»×´Ì¬ÖÐ£¬ÓÅÏÈ¼¶×î¸ßµÄ³µÎ»×´Ì¬(Ñ¹Ïß>ÌØÊâ³µÎ»>ÓÐÎÞ³µ×´Ì¬)¹ØÁªµÆµÄ×´Ì¬
    NET_DVR_MIXLAMP_CTRL_MODE  struMixLampCtrlMode;
    //µ¥ÍâÖÃµÆÄ£Ê½ÊÇ²»Çø·Ö³µÎ»ÐÅÏ¢£¬ÏÔÊ¾µ±Ç°³µÎ»×´Ì¬ÖÐ£¬µÈ¼¶×îºÃµÄ×´Ì¬£¨Ñ¹Ïß>ÌØÊâ³µÎ»>ÓÐÎÞ³µ×´Ì¬£©
    NET_DVR_SINGLELAMP_CTRL_MODE struSingleExternalLampCtrlMode;
}NET_DVR_LAMP_CTRL_MODE_UNION, *LPNET_DVR_LAMP_CTRL_MODE_UNION;/*µÆ¿ØÖÆÄ£Ê½ÁªºÏÌå*/ 

typedef struct tagNET_DVR_LAMP_CTRL_INFO
{
    DWORD     dwSize;
    BYTE      byLampCtrlMode;/*¿ØµÆÄ£Ê½£º1´ú±íÄÚÖÃµÆ,2´ú±íÍâ½ÓµÆ,3´ú±íÄÚÍâÖÃµÆ,4´ú±í»ìºÏµÆÄ£Ê½£¨ÄÚÖÃµÆÖ»×ö¸ßÓÅÏÈ¼¶Ö¸Ê¾µÆ),5-´ú±íµ¥ÍâÖÃµÆÄ£Ê½*/
    BYTE      byCtrlChannelIndex;/*½»Ìæ¿ØÖÆÍ¨µÀºÅ(33~48)*/
    BYTE      byRes[2];
    NET_DVR_LAMP_CTRL_MODE_UNION  uLampCtrlMode;/*µÆ¿ØÖÆÄ£Ê½ÁªºÏÌå*/
    BYTE      byRes2[32];
}NET_DVR_LAMP_CTRL_INFO, *LPNET_DVR_LAMP_CTRL_INFO;

//³µÎ»ÊôÐÔÅäÖÃ£¨Ä¬ÈÏ¶¼ÊÇnormal£©
typedef struct tagNET_DVR_PARKSPACE_INFO
{
    BYTE      byParkSpaceAttribute; //0~ÆÕÍ¨³µÎ» 1¡«ÌØÊâ³µÎ»
    BYTE      byRes[23];
}NET_DVR_PARKSPACE_INFO, *LPNET_DVR_PARKSPACE_INFO;

typedef struct tagNET_DVR_PARKSPACE_ATTRIBUTE
{
    DWORD     dwSize;
    NET_DVR_PARKSPACE_INFO  struParkSpaceInfo[MAX_PARKING_NUM];//Ò»¸öÍ¨µÀ×î´ó4¸ö³µÎ» (´Ó×óµ½ÓÒ³µÎ» Êý×é0¡«3)
    BYTE      byRes[64];
}NET_DVR_PARKSPACE_ATTRIBUTE, *LPNET_DVR_PARKSPACE_ATTRIBUTE;

//Ö¸Ê¾µÆÍâ¿Ø
typedef struct tagNET_DVR_LAMP_STATE
{
    BYTE      byFlicker;//0~²»ÉÁË¸ 1 ¡«ÉÁË¸
    BYTE      byParkingIndex;//³µÎ»ºÅ1¡«3
    BYTE      byRes1[2];
    DWORD     dwIONo;//1~IO1;2~IO2;4~IO3;
    BYTE      byRes2[8];
}NET_DVR_LAMP_STATE, *LPNET_DVR_LAMP_STATE;

typedef struct tagNET_DVR_LAMP_EXTERNAL_CFG
{
    DWORD     dwSize;
    BYTE      byEnable; //Íâ¿ØÊ¹ÄÜ 0¡«²»ÆôÓÃ 1¡«ÆôÓÃ
    BYTE      byRes1[3];
    NET_DVR_LAMP_STATE     struLampStateCtrl;//Ö¸Ê¾µÆÍâ¿Ø
    BYTE      byRes2[32];
}NET_DVR_LAMP_EXTERNAL_CFG, *LPNET_DVR_LAMP_EXTERNAL_CFG;

//³µÎ»Ç¿ÖÆ×¥Í¼ Ò»¸öÍ¨µÀ×î¶àËÄ³µÎ»
typedef struct tagNET_DVR_COMPEL_CAPTURE
{
    DWORD      dwSize;
    BYTE       byParkIndex;/*³µÎ»ÐòºÅ´Ó×óµ½ÓÒ £¨0-±íÊ¾µ±Ç°ÓÐ¼¸¸ö³µÎ»£¬¾ÍÉÏ´«¼¸ÕÅÍ¼Æ¬£©1,2,3,4*/
    BYTE       byRes[63];
}NET_DVR_COMPEL_CAPTURE, *LPNET_DVR_COMPEL_CAPTURE;

//Íâ¿Ø±¨¾¯½á¹¹
typedef struct tagNET_DVR_EXTERNAL_CONTROL_ALARM
{
    DWORD     dwSize;
    DWORD      dwChannelNo;
    NET_DVR_LAMP_STATE      struLampStateCtrl;//Ö¸Ê¾µÆÍâ¿Ø×´Ì¬
    NET_DVR_TIME      struExternalBeginTime;/*Íâ¿Ø¿ªÊ¼Ê±¼ä*/ 
    BYTE      byRes1[64];
}NET_DVR_EXTERNAL_CONTROL_ALARM, *LPNET_DVR_EXTERNAL_CONTROL_ALARM;

/* Éè±¸ÀàÐÍ */
typedef enum tagEXTERNAL_DEVICES_TYPE
{
    DEVICES_TYPE_RES1 = 0,                //±£Áô1    
    DEVICES_TYPE_FAR_SCR = 1,            //Ô¶¾àÀë¶Á¿¨Æ÷
    DEVICES_TYPE_ENTRANCE_CONTROL = 2,    //³öÈë¿Ú¿ØÖÆ»ú
    DEVICES_TYPE_WJ_LED_DEV = 3,        //Íâ½ÓLED
    DEVICES_TYPE_NJ_LED_DEV = 4,        //ÄÚ½ÓLED
    DEVICES_TYPE_VEH_DETECT_DEV = 5,    //³µ¼ìÆ÷Éè±¸
    DEVICES_TYPE_DZ_DEV = 6,            //µÀÕ¢
    DEVICES_TYPE_PX_SCR_DEV = 7,         //Æ±Ïä¶Á¿¨Æ÷
    DEVICES_TYPE_KJ_SCR_DEV = 8,         //¿¨»ú¶Á¿¨Æ÷
    DEVICES_TYPE_FKJ_DEV = 9,            //·¢¿¨»ú
    DEVICES_TYPE_SKJ_DEV = 10,            //ÊÕ¿¨»ú
    DEVICES_TYPE_HDD_DEV = 11,            //Ó²ÅÌ(ÂãÅÌ 1G)
    DEVICES_TYPE_DZ_LOCK = 12,            //µÀÕ¢ËøÕ¢×´Ì¬£¬0±íÊ¾Î´ËøÕ¢£¬1±íÊ¾ËøÕ¢
    DEVICES_TYPE_PAPER_PRINTER = 13,    //Ö½Æ±´òÓ¡»ú 
    DEVICES_TYPE_PAPER_SCANNERS = 14,   //Ö½Æ±É¨ÃèÒÇ
    DEVICES_TYPE_IPC_ALARM = 15         //IPC²¼·À×´Ì¬
}EXTERNAL_DEVICES_TYPE;

/* Éè±¸×´Ì¬ */
typedef enum tagEXTERNAL_DEVICES_STATUS
{
    /* Í¨ÓÃÉè±¸×´Ì¬Âë 0~19*/
    DEVICES_STATUS_NORMAL = 0,            //×´Ì¬Õý³£
    DEVICES_STATUS_ABNORMAL = 1,        //×´Ì¬Òì³£
    
    /* ·¢¿¨»úÉè±¸×´Ì¬Âë 20~39*/
    DEVICES_STATUS_TOO_LESS_CARD = 20,         //·¢¿¨»úÉÙ¿¨
    DEVICES_STATUS_NO_CARD = 21,             //·¢¿¨»úÎÞ¿¨
    DEVICES_STATUS_SENDCARD_ERROR = 22,     //Ô¤·¢¿¨´íÎó
    DEVICES_STATUS_CARD_BLOCKED = 23,         //¶Â¿¨
    DEVICES_STATUS_CARD_FULL = 24,             //»ØÊÕ²Ö¿¨Âú

    
    /* µÀÕ¢Éè±¸×´Ì¬Âë 40~60*/
    DEVICES_STATUS_OPENING = 40,             //µÀÕ¢ÕýÔÚ¿ª
    DEVICES_STATUS_CLOSING = 41,             //µÀÕ¢ÕýÔÚ¹Ø
    DEVICES_STATUS_OPENED  = 42,             //µÀÕ¢¿ªµ½Î»
    DEVICES_STATUS_CLOSED  = 43,             //µÀÕ¢¹Øµ½Î»    
    DEVICES_STATUS_NOSIGNAL = 44,             //µÀÕ¢ÎÞÐÅºÅ
    DEVICES_STATUS_LOCK= 45,                 //ËøÕ¢

    /* Ö½Æ±´òÓ¡»ú×´Ì¬ 61~90*/
    PP_STATUS_OFFLINE = 61,                   //ÍÑ»ú
    PP_STATUS_PRINT_HEADER_UP,           // ´òÓ¡Í·Ì§Æð       
    PP_STATUS_FEED_BUTTON_FEEDING,       //ÕýÔÚÓÃ½øÖ½¼ü½øÖ½                      
    PP_STATUS_ONLINE_WAITING,            //Áª»úµÈ´ý               
    PP_STATUS_FEED_BUTTON_ENABLE,        //°´¼ü½øÖ½Ê¹ÄÜÎª¿ª           
    PP_STATUS_JAMR_PAPER_ERROR,          //¿¨Ö½´íÎó
    PP_STATUS_CUT_PAPER_ERROR,           //ÇÐµ¶´íÎó
    PP_STATUS_AUTO_FEED_ERROR,           //×Ô¶¯ÉÏÖ½´íÎó
    PP_STATUS_EXIT_RECOVERY_ERROR,       //ÓÐ¿É»Ö¸´´íÎó
    PP_STATUS_EXIT_AUTO_RECOVERY_ERROR,  //ÓÐ¿É×Ô¶¯»Ö¸´´íÎó
    PP_STATUS_PULL_PAPER_ERROR,          //À­Ö½´íÎó
    PP_STATUS_LESS_PAPER ,               //Ö½½«¾¡
    PP_STATUS_NO_PAPER,                  //ÎÞÖ½
    PP_STATUS_PRINT_FAIL,                //´òÓ¡Ê§°Ü
    PP_STATUS_PRINTING,                  //ÕýÔÚ´òÓ¡  
}EXTERNAL_DEVICES_STATUS;

typedef struct  tagNET_DVR_GATE_ALARMINFO
{
    DWORD  dwSize;
    //0x1³µÁ¾·Ç·¨ÇÖÈë±¨¾¯
    //0x2µÀÕ¢³¬Ê±Î´¹Ø±¨¾¯
    //0x3³µÁ¾Ñ¹ÏßÈ¦³¬Ê±±¨¾¯
    //0x4·¢¿¨±¨¾¯£¨ÎÞ¿¨£©
    //0x5·¢¿¨±¨¾¯£¨ÉÙ¿¨£©
    //0x6·¢¿¨±¨¾¯£¨·¢¿¨Òì³££©
    BYTE  byAlarmType;
    BYTE  byExternalDevType;//Íâ½ÓÉè±¸ÀàÐÍ(EXTERNAL_DEVICES_TYPE)
    BYTE  byExternalDevStatus;//Íâ½ÓÉè±¸ÀàÐÍ(EXTERNAL_DEVICES_STATUS)
    BYTE  byRes;
    NET_DVR_TIME_V30  struAlarmTime;//±¨¾¯Ê±¼ä        
    union
    {
        BYTE  uLen[128];
        struct
        {
            char  sLicense[MAX_LICENSE_LEN/*16*/];//³µÅÆºÅÂë
            /*³µÁ¾ÀàÐÍ0-±£Áô 1-¹Ì¶¨³µ£¬2-ÁÙÊ±³µ£¬3-Ô¤¶©³µ£¬4-Áª¼ì³µ£¬5-ÊÚÈ¨³µ*/
            BYTE  byVehicleType;
            BYTE  byRes1[111];
        }struVehicleInfo;//µ±struAlarmTypeÎª(0x1³µÁ¾·Ç·¨ÇÖÈë±¨¾¯)
    }uAlarmInfo;
    BYTE  byRes2[64]; //Ô¤Áô
}NET_DVR_GATE_ALARMINFO, *LPNET_DVR_GATE_ALARMINFO;

typedef struct tagNET_DVR_VOLTAGE
{
    int iPhaseAVol;            //AÏàµçÑ¹
    int iPhaseBVol;            //BÏàµçÑ¹
    int iPhaseCVol;            //CÏàµçÑ¹
    int iAveragePhaseVol;    //ÏàµçÑ¹Æ½¾ùÖµ
}NET_DVR_VOLTAGE, *LPNET_DVR_VOLTAGE;

typedef struct _tagNET_DVR_LINE_VOLTAGE
{
    int iLineVolAB;            //ABÏßµçÑ¹
    int iLineVolBC;            //BCÏßµçÑ¹
    int iLineVolCA;            //CAÏßµçÑ¹
    int iAverageLineVol;    //ÏßµçÑ¹Æ½¾ùÖµ
} NET_DVR_LINE_VOLTAGE,*LPNET_DVR_LINE_VOLTAGE;


//µçÁ÷
typedef struct tagNET_DVR_CURRENT
{
    int iPhaseACurrent;            //AÏàµçÁ÷
    int iPhaseBCurrent;            //BÏàµçÁ÷
    int iPhaseCCurrent;            //CÏàµçÁ÷
    BYTE byRes[4];
}NET_DVR_CURRENT, *LPNET_DVR_CURRENT;

//¹¦ÂÊ
typedef struct tagNET_DVR_POWER
{
    int iPhaseAPower;            //AÏà¹¦ÂÊ
    int iPhaseBPower;            //BÏà¹¦ÂÊ
    int iPhaseCPower;            //CÏà¹¦ÂÊ
    int iSysTotalPower;            //ÏµÍ³×Ü¹¦ÂÊ
}NET_DVR_POWER, *LPNET_DVR_POWER;

//¹¦ÂÊÒòËØ
typedef struct tagNET_DVR_POWER_FACTOR
{
    int iPhaseAPowerFactor;    //AÏà¹¦ÂÊÒòËØ
    int iPhaseBPowerFactor;        //BÏà¹¦ÂÊÒòËØ
    int iPhaseCPowerFactor;        //CÏà¹¦ÂÊÒòËØ
    int iTotalPowerFactor;        //×Ü¹¦ÂÊÒòËØ
}NET_DVR_POWER_FACTOR, *LPNET_DVR_POWER_FACTOR;

//ÆµÂÊ
typedef struct tagNET_DVR_FREQUENCY
{
    int iPhaseAFrequency;        //AÏàÆµÂÊ
    int iPhaseBFrequency;        //BÏàÆµÂÊ
    int iPhaseCFrequency;        //CÏàÆµÂÊ
    BYTE byRes[4];
}NET_DVR_FREQUENCY, *LPNET_DVR_FREQUENCY;

//¸ºÔØÂÊ
typedef struct tagNET_DVR_LOAD_FACTOR
{
    int iPhaseALoadFactor;        //AÏà¸ºÔØÂÊ
    int iPhaseBLoadFactor;        //BÏà¸ºÔØÂÊ
    int iPhaseCLoadFactor;        //CÏà¸ºÔØÂÊ
    BYTE    byRes[4];
} NET_DVR_LOAD_FACTOR, *LPNET_DVR_LOAD_FACTOR;

//UPS×´Ì¬
typedef struct tagNET_DVR_ALARMHOST_UPS_STATE
{
    NET_DVR_VOLTAGE        struInputVoltage;    //ÊäÈëµçÑ¹
    NET_DVR_VOLTAGE        struBypassVoltage;    //ÅÔÂ·µçÑ¹
    NET_DVR_VOLTAGE        struOutputVoltage;    //Êä³öµçÑ¹
    int iRectifierVol;            //ÕûÁ÷Æ÷µçÑ¹
    int iInverterVol;            //Äæ±äÆ÷µçÑ¹
    
    NET_DVR_CURRENT    struInputCurrent;    //ÊäÈëµçÁ÷
    NET_DVR_CURRENT    struBypassCurrent;    //ÅÔÂ·µçÁ÷
    NET_DVR_CURRENT    struOutputCurrent;    //Êä³öµçÁ÷
    int iInverterCurrent;        //Äæ±äÆ÷µçÁ÷
    
    NET_DVR_FREQUENCY    struInputFrequency;    //ÊäÈëÆµÂÊ
    NET_DVR_FREQUENCY    struBypassFrequency;    //ÅÔÂ·ÆµÂÊ
    NET_DVR_FREQUENCY    struOutputFrequency;    //Êä³öÆµÂÊ
    int iInverterFre;            //Äæ±äÆ÷ÆµÂÊ
    
    NET_DVR_POWER         struInputPower;    //ÊäÈë¹¦ÂÊ
    NET_DVR_POWER        struBypassPower;    //ÅÔÂ·¹¦ÂÊ
    NET_DVR_POWER        struOutputPower;    //Êä³ö¹¦ÂÊ
    NET_DVR_POWER        struComplexPower;    //¸´¹¦ÂÊ
    
    int iNormalPower;            //±ê³Æ¹¦ÂÊ
    int iPowerFacter;            //¹¦ÂÊÒòËØ
    
    NET_DVR_LOAD_FACTOR    struBatteryLoadFactor;    //µç³Ø¸ºÔØÂÊ
    int iBatteryEstimated;        //µç³Ø±¸·ÝÊ±¼ä(min)
    int iBatteryTemperature;        //µç³ØÎÂ¶È
    int iBatteryVoltage;            //µç³ØµçÑ¹
    
    
    BYTE    byRectifierState;        //ÕûÁ÷Æ÷ÔËÐÐ×´Ì¬/*1Õý³£ 2Òì³£*/
    BYTE    byInverterState;        //Äæ±äÆ÷ÔËÐÐ×´Ì¬/*1Õý³£ 2Òì³£*/
    BYTE    byChargeState;        //³äµçÆ÷ÔËÐÐ×´Ì¬/*1Õý³£ 2Òì³£*/
    BYTE    byBatteryState;        //µç³ØÔËÐÐ×´Ì¬/*1Õý³£ 2Òì³£*/
    BYTE    byAutoBypassState;    //×Ô¶¯ÅÔÂ·×´Ì¬/*1Õý³£ 2Òì³£*/
    BYTE    byRes2[247];
} NET_DVR_ALARMHOST_UPS_STATE, *LPNET_DVR_ALARMHOST_UPS_STATE; 

//¿ª¹ØµçÔ´×´Ì¬
typedef struct tagNET_DVR_ALARMHOST_SWITCH_POWER_STATE
{
    NET_DVR_VOLTAGE        struACVoltage;    //½»Á÷µçÑ¹
    int     iDCConvertVoltage;    //DC×ª»»Æ÷µçÑ¹
    NET_DVR_CURRENT        struACCurrent;    //½»Á÷µçÁ÷
    int     iTotalCurrent;            //¸ºÔØ×ÜµçÁ÷
    int     iBattery1Temperature;    //µç³Ø1ÎÂ¶È
    int     iBattery2Temperature;    //µç³Ø2ÎÂ¶È
    int     iBattery1Current;        //µç³Ø1µçÁ÷
    int     iBattery2Current;        //µç³Ø2µçÁ÷
    int     iBattery3Current;        //µç³Ø3µçÁ÷
    int     iBattery4Current;        //µç³Ø4µçÁ÷
    int     iBatteryTestVoltage;    //µç³Ø²âÊÔµçÑ¹
    int     iRectifierOutputVoltage;    //ÕûÁ÷Ä£¿éÊä³öµçÑ¹
    int     iRectifierOutputCurrent;    //ÕûÁ÷Ä£¿éÊä³öµçÁ÷
    int     iDCOutputVoltage;        //Ö±Á÷Êä³öµçÑ¹
    BYTE    byRes[432];
} NET_DVR_ALARMHOST_SWITCH_POWER_SUPPLY_STATE, 
*LPNET_DVR_ALARMHOST_SWITCH_POWER_SUPPLY_STATE;

//ÆøÌåÌ½²âÆ÷×´Ì¬
typedef struct tagNET_DVR_ALARMHOST_GAS_DETECTOR_STATE
{
    int        iSF6;            //SF6£¬µ¥Î»ppm
    int      iFlow;           //Á÷Á¿£¬ml/min       
    int        iTemperature;        //ÎÂ¶È£¬µ¥Î»ÉãÊÏ¶È
    int        iO2;            //ÑõÆø£¬µ¥Î»%
    int        iHumidity;        //Êª¶È£¬µ¥Î»%
    BYTE    byRes[492];
} NET_DVR_ALARMHOST_GAS_DETECTOR_STATE,
*LPNET_DVR_ALARMHOST_GAS_DETECTOR_STATE;

//ÎÂÊª¶È´«¸ÐÆ÷×´Ì¬
typedef struct tagNET_DVR_ALARMHOST_TEMP_HUMI_SENSOR_STATE
{
    int        iTemperature;    //ÎÂ¶È£¬µ¥Î»ÉãÊÏ¶È
    int        iHumidity;        //Êª¶È£¬µ¥Î»%
    BYTE    byRes[504];
} NET_DVR_ALARMHOST_TEMP_HUMI_SENSOR_STATE, *LPNET_DVR_ALARMHOST_TEMP_HUMI_SENSOR_STATE;

//¿Õµ÷×´Ì¬
typedef struct tagNET_DVR_ALARMHOST_AIRCONDITION_STATE
{
    int        iTemperature;    //ÎÂ¶È£¬µ¥Î»ÉãÊÏ¶È
    int        iHumidity;        //Êª¶È£¬µ¥Î»%
    BYTE   byRunState;        //ÔËÐÐ×´Ì¬ 1-Õý³££¬2-Í£»ú
    BYTE    byRes[503];
} NET_DVR_ALARMHOST_AIRCONDITION_STATE, *LPNET_DVR_ALARMHOST_AIRCONDITION_STATE;


//µçÁ¿±í×´Ì¬
typedef struct tagNET_DVR_ALARMHOST_ELECTRICITY_STATE
{
    int        iDCVoltage;        //Ö±Á÷µçÑ¹
    int        iDCCurrent;        //Ö±Á÷µçÁ÷
    NET_DVR_VOLTAGE        struPhaseVoltage;    //ÏàµçÑ¹
    NET_DVR_LINE_VOLTAGE struLineVoltage;    //ÏßµçÑ¹
    NET_DVR_CURRENT    struCurrent[4];        //µçÁ÷£¬struCurrent[0]±íÊ¾µÚ1Â·, ÒÔ´ËÀàÍÆ 
    int iAverageCurrent;    //Æ½¾ùµçÁ÷
    int iNeutralCurrent;        //ÖÐÏßµçÁ÷
    NET_DVR_POWER    struActivePower[4];    //ÓÐ¹¦¹¦ÂÊ struActivePower[0]±íÊ¾µÚÒ»Â·ÓÐ¹¦¹¦ÂÊ£¬ÒÔ´ËÀàÍÆ
    NET_DVR_POWER    struReactivePower[4];    //ÎÞ¹¦¹¦ÂÊ struReactivePower[0]±íÊ¾µÚÒ»Â·ÎÞ¹¦¹¦ÂÊ£¬ÒÔ´ËÀàÍÆ
    NET_DVR_POWER    struApparentPower[4];    //ÊÓÔÚ¹¦ÂÊ struApprentPower[0]±íÊ¾µÚÒ»Â·ÊÓÔÚ¹¦ÂÊ£¬ÒÔ´ËÀàÍÆ
    NET_DVR_POWER_FACTOR    struPowerFactor[4];    //¹¦ÂÊÒòËØ£¬struPowerFactor[0]±íÊ¾µÚÒ»Â·¹¦ÂÊÒòËØ£¬ÒÔ´ËÀàÍÆ
    NET_DVR_FREQUENCY        struFrequency;            //ÆµÂÊ
    BYTE byRes[128];
}NET_DVR_ALARMHOST_ELECTRICITY_STATE, *LPNET_DVR_ALARMHOST_ELECTRICITY_STATE;

//±äµçÆ÷ÎÂÏÔ±í×´Ì¬
typedef struct  tagNET_DVR_ALARMHOST_TRANSFORMER_TEMP_STATE
{
    int        iPhaseATemperature;        //AÏàÎÂ¶È
    int        iPhaseBTemperature;        //BÏàÎÂ¶È
    int        iPhaseCTemperature;        //CÏàÎÂ¶È
    int        iPhaseDTemperature;        //DÏàÎÂ¶È
    BYTE     byRes[496];
}NET_DVR_ALARMHOST_TRANSFORMER_TEMP_STATE, *LPNET_DVR_ALARMHOST_TRANSFORMER_TEMP_STATE;

//Ë®Î»´«¸ÐÆ÷
typedef struct tagNET_DVR_ALARMHOST_WATERLEVEL_SENSOR
{
    LONG        iWaterLevel;        //Ë®Î»
    BYTE        byRes[508];
}NET_DVR_ALARMHOST_WATERLEVEL_SENSOR, *LPNET_DVR_ALARMHOST_WATERLEVEL_SENSOR;

//Ñï³¾ÔëÉù´«¸ÐÆ÷
typedef struct tagNET_DVR_ALARMHOST_DUSTNOISE_SENSOR
{
    LONG        iDust;        //Ñï³¾
    LONG        iNoise;        //ÔëÉù
    BYTE        byRes[504];
}NET_DVR_ALARMHOST_DUSTNOISE_SENSOR, *LPNET_DVR_ALARMHOST_DUSTNOISE_SENSOR;

//»·¾³²É¼¯ÒÇ
typedef struct tagNET_DVR_ALARMHOST_ENVIRONMENTAL_LOGGER
{
    LONG        iAmmoniaNitrogen;    //°±µª
    LONG        iCOD;                //COD
    LONG        iPH;                //PH
    LONG        iOxygen;            //ÑõÆø
    LONG        iSulfurDioxide;    //¶þÑõ»¯Áò
    LONG        iSoot;            //ÑÌ³¾
    LONG        iFluoride;        //·ú»¯Îï
    LONG        iPollutedWater;    //ÎÛË®
    LONG        iTotalPhosphorus;    //×ÜÁ×
    LONG        iExhaust;            //·ÏÆø
    LONG        iNitrogenOxides;    //µªÑõ»¯Îï
    LONG        iFlueGasTemperature;//ÑÌÆøÎÂ¶È
    LONG        iFlueGasPressure;    //ÑÌÆøÑ¹Á¦
    BYTE        byRes[460];
}NET_DVR_ALARMHOST_ENVIRONMENTAL_LOGGER, *LPNET_DVR_ALARMHOST_ENVIRONMENTAL_LOGGER;

typedef union tagNET_DVR_EXTERNAL_DEVICE_STATE_UNION
{
    NET_DVR_ALARMHOST_UPS_STATE struUpsState;        //UPS×´Ì¬
    NET_DVR_ALARMHOST_SWITCH_POWER_SUPPLY_STATE struSwitchPowerState;//¿ª¹ØµçÔ´×´Ì¬
    NET_DVR_ALARMHOST_GAS_DETECTOR_STATE struGasDetectorState;//ÆøÌå¼ì²âÏµÍ³×´Ì¬
    NET_DVR_ALARMHOST_TEMP_HUMI_SENSOR_STATE struTempHumiSensorState;//ÎÂÊª¶È´«¸ÐÆ÷×´Ì¬
    NET_DVR_ALARMHOST_AIRCONDITION_STATE struAirConditionState;//¿Õµ÷×´Ì¬
    NET_DVR_ALARMHOST_ELECTRICITY_STATE struElectricityState;//µçÁ¿±í×´Ì¬
    NET_DVR_ALARMHOST_TRANSFORMER_TEMP_STATE struTransformerTempState;    //±äµçÆ÷×´Ì¬
    NET_DVR_ALARMHOST_WATERLEVEL_SENSOR struWaterLevelSensor;//Ë®Î»´«¸ÐÆ÷
    NET_DVR_ALARMHOST_DUSTNOISE_SENSOR struDustNoiseSensor;//Ñï³¾ÔëÉù´«¸ÐÆ÷
    NET_DVR_ALARMHOST_ENVIRONMENTAL_LOGGER struEnvironmentLogger;//»·¾³²É¼¯ÒÇ
    BYTE    byRes[512];
} NET_DVR_EXTERNAL_DEVICE_STATE_UNION, *LPNET_DVR_EXTERNAL_DEVICE_STATE_UNION;

typedef struct tagNET_DVR_ALARMHOST_EXTERNAL_DEVICE_STATE
{
    DWORD dwSize;
    BYTE    byDevType;    //1-UPS£¬2-¿ª¹ØµçÔ´£¬3-ÆøÌå¼ì²âÏµÍ³£¬4-ÎÂÊª¶È´«¸ÐÆ÷£¬5-¿Õµ÷£¬6-µçÁ¿±í£¬7-±äµçÆ÷×´Ì¬, 8-Ë®Î»´«¸ÐÆ÷¡¢9-Ñï³¾ÔëÉù´«¸ÐÆ÷¡¢10-»·¾³²É¼¯ÒÇ
    BYTE    byRes1[3];
    NET_DVR_EXTERNAL_DEVICE_STATE_UNION struDevState;
    BYTE    byRes2[32];
} NET_DVR_ALARMHOST_EXTERNAL_DEVICE_STATE, *LPNET_DVR_ALARMHOST_EXTERNAL_DEVICE_STATE;


//UPS±¨¾¯ÏÞÖµ
typedef struct tagNET_DVR_ALARMHOST_UPS_LIMIT_VALUE
{
    int iInputVolHigh;        //Ô½ÏÞÊäÈëµçÑ¹Öµ(¸ßÖµ)
    int iInputVolLow;        //Ô½ÏÞÊäÈëµçÑ¹Öµ(µÍÖµ)
    int iInputFreHigh;        //Ô½ÏÞÊäÈëÆµÂÊÖµ(¸ßÖµ)
    int iInputFreLow;        //Ô½ÏÞÊäÈëÆµÂÊÖµ(µÍÖµ)
    int iOutputVolHigh;    //Ô½½çÊä³öµçÑ¹Öµ(¸ßÖµ)
    int iOutputVolLow;        //Ô½½çÊä³öµçÑ¹Öµ(µÍÖµ)
    int iBatteryVoltageLow;    //µç³ØµÍµçÑ¹ÏÞÖµ
    int iBatterySurplus;        //µç³Øºó±¸Ê±¼äµÍ ÏÞÖµ
    int iBatteryTemperatureHigh;//µç³ØÎÂ¶È¸ßÏÞÖµ
    BYTE    byRes[64];            //±£Áô
}NET_DVR_ALARMHOST_UPS_LIMIT_VALUE, *LPNET_DVR_ALARMHOST_UPS_LIMIT_VALUE;

//ÎÂÊª¶È´«¸ÐÆ÷ÏÞÖµ
typedef struct tagNET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_LIMIT_VALUE
{
    int iTemperatureHighLimit;    //ÎÂ¶È¸ßÏÞÖµ£¬µ¥Î»ÉãÊÏ¶È
    int iTemperatureLowLimit;    //ÎÂ¶ÈµÍÏÞÖµ£¬µ¥Î»ÉãÊÏ¶È
    int iHumidityHighLimit;        //Êª¶È¸ßÏÞÖµ£¬µ¥Î»%
    int iHumidityLowLimit;        //Êª¶ÈµÍÏÞÖµ£¬µ¥Î»%
    BYTE    byRes[84];        
} NET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_LIMIT_VALUE, *LPNET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_LIMIT_VALUE;

typedef union tagNET_DVR_EXTERNAL_DEVICE_LIMIT_VALUE_UNION
{
    NET_DVR_ALARMHOST_UPS_LIMIT_VALUE struUpsLimitValue;
    NET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_LIMIT_VALUE struTempHumidityLimitValue;
}NET_DVR_EXTERNAL_DEVICE_LIMIT_VALUE_UNION,*LPNET_DVR_EXTERNAL_DEVICE_LIMIT_VALUE_UNION;

typedef struct tagNET_DVR_ALARMHOST_EXTERNAL_DEVICE_LIMIT_VALUE
{
    DWORD dwSize;
    BYTE    byDevType;    //1-UPS£¬2-ÎÂÊª¶È´«¸ÐÆ÷
    BYTE    byRes1[3];
    NET_DVR_EXTERNAL_DEVICE_LIMIT_VALUE_UNION struAlarmValue;
    BYTE    byRes2[32];
}NET_DVR_ALARMHOST_EXTERNAL_DEVICE_LIMIT_VALUE, *LPNET_DVR_ALARMHOST_EXTERNAL_DEVICE_LIMIT_VALUE;

#define    ALARMHOST_ALARMOUT_NUM    64  //´¥·¢Æ÷¸öÊý
typedef struct  tagNET_DVR_ALARMHOST_SENSOR_JOINT_CFG
{
    DWORD         dwSize;
    BYTE        bySensorJointAlarmOut[MAX_ALARMHOST_ALARMOUT_NUM/*512*/];//Ä£ÄâÁ¿Áª¶¯´¥·¢Æ÷£¬0-²»Áª¶¯£¬1-Áª¶¯
    BYTE        bySensorJointSiren[ALARMHOST_MAX_SIREN_NUM/*8*/];//Ä£ÄâÁ¿Áª¶¯¾¯ºÅ
    BYTE        bySensorAlarmTypeJointAlarmOut[ALARMHOST_ALARMOUT_NUM/*64*/];//Ä£ÄâÁ¿°´ÀàÐÍÁª¶¯´¥·¢Æ÷£¬¸Ã×Ö¶ÎÊÇbySensorJointAlarmOutµÄÀ©Õ¹¡£Êý×éÏÂ±ê±íÊ¾´¥·¢Æ÷ºÅ£¬Êý×éÔªËØµÄÖµ°´Î»±íÊ¾±¨¾¯ÀàÐÍ£¬¸÷¸öÀàÐÍ¼äÊÇ"»ò"µÄ¹ØÏµ¡£ÀàÐÍÖµ¶¨Òå£º1bit0-ÏÞ1£»bit1-ÏÞ2£»bit2-ÏÞ3£»bit3-ÏÞ4£»bit4-¹ÊÕÏ
    BYTE        bySesorAlarmTypeJointSiren[ALARMHOST_MAX_SIREN_NUM]; //Ä£ÄâÁ¿°´ÀàÐÍÁª¶¯¾¯ºÅ£¬¸Ã×Ö¶ÎÊÇbySensorJointSirenµÄÀ©Õ¹¡£Êý×éÏÂ±ê±íÊ¾¾¯ºÅÐòºÅ£¬Êý×éÔªËØµÄÖµ°´Î»±íÊ¾±¨¾¯ÀàÐÍ£¬¸÷¸öÀàÐÍ¼äÊÇ"»ò"µÄ¹ØÏµ¡£ÀàÐÍÖµ¶¨Òå£ºbit0-ÏÞ1£»bit1-ÏÞ2£»bit2-ÏÞ3£»bit3-ÏÞ4£»bit4-¹ÊÕÏ
    BYTE        byChan;        //Í¨µÀºÅ
    BYTE        byRes[55];
}NET_DVR_ALARMHOST_SENSOR_JOINT_CFG, *LPNET_DVR_ALARMHOST_SENSOR_JOINT_CFG;

//UPS±¨¾¯ÐÅÏ¢ÉÏ´«
typedef struct tagNET_DVR_ALARMHOST_UPS_ALARMINFO
{
    BYTE    byAlarmType;/*±¨¾¯ÀàÐÍ£º1.AÏàÊäÈëµçÑ¹Ô½ÏÞ 2.BÏàÊäÈëµçÑ¹Ô½ÏÞ 3.CÏàÊäÈëµçÑ¹Ô½ÏÞ 4.AÏàÊä³öµçÑ¹Ô½ÏÞ5.BÏàÊä³öµçÑ¹Ô½ÏÞ 6.CÏàÊä³öµçÑ¹Ô½ÏÞ7.AÏàÊäÈëÆµÂÊÔ½ÏÞ 8.BÏàÊäÈëÆµÂÊÔ½ÏÞ9.CÏàÊäÈëÆµÂÊÔ½ÏÞ10.ÕûÁ÷Æ÷µçÑ¹Ô½ÏÞ±¨¾¯ 11.¹ýÔØ±¨¾¯ 12.µç³ØµçÑ¹µÍ±¨¾¯ 13.µç³Øºó±¸Ê±¼ä³¬µÍ±¨¾¯ 14.µç³ØÎÂ¶È³¬¸ß±¨¾¯ 15.Äæ±äÆ÷¹Ø±Õ±¨¾¯ 16.×Ô¶¯ÅÔÂ·¿ª±¨¾¯ 17.ÕûÁ÷Æ÷¹ÊÕÏ±¨¾¯ 18.Äæ±äÆ÷¹ÊÕÏ±¨¾¯ 19.³äµçÆ÷¹ÊÕÏ±¨¾¯    20.µç³Ø¹ÊÕÏ±¨¾¯     21.×Ô¶¯ÅÔÂ·¹ÊÕÏ±¨¾¯ */    
    BYTE    byChanNo;    //485Í¨µÀºÅ£¬´Ó1¿ªÊ¼
    BYTE    bySlotNo;    //485ÐéÄâ²ÛÎ»ºÅ
    BYTE    byRes1;        //±£Áô
    int        iAlarmValue;//±¨¾¯Öµ
    BYTE    byRes2[64];        //±£Áô
}NET_DVR_ALARMHOST_UPS_ALARMINFO, *LPNET_DVR_ALARMHOST_UPS_ALARMINFO;

//¿ª¹ØµçÔ´±¨¾¯ÉÏ´«
typedef struct tagNET_DVR_ALARMHOST_SWITCH_POWER_SUPPLY_ALARMINFO
{
    BYTE    byAlarmType;    /*±¨¾¯ÀàÐÍ£º1-µç³Ø²âÊÔÊ§°Ü 2-AC-DC×ª»»Æ÷¹ÊÕÏ£¬3-ÊäÈëÏß/ÏàµçÑ¹AB/AÔ½ÏÞ£¬4-ÊäÈëÏß/ÏàµçÑ¹BC/BÔ½ÏÞ£¬5-ÊäÈëÏß/ÏàµçÑ¹CA/CÔ½ÏÞ£¬6-Êä³öµçÁ÷AÔ½ÏÞ£¬7-Êä³öµçÁ÷BÔ½ÏÞ£¬8-Êä³öµçÁ÷CÔ½ÏÞ£¬9ÕûÁ÷Ä£¿é¹ÊÕÏ£¬10-·çÉÈ¹ÊÕÏ£¬11-Ö±Á÷µçÑ¹Ô½ÏÞ*/
    BYTE    byChanNo;        //485Í¨µÀºÅ£¬´Ó1¿ªÊ¼
    BYTE    bySlotNo;        //485ÐéÄâ²ÛÎ»ºÅ
    BYTE    byRes1;
    int     iAlarmValue;        //±¨¾¯Öµ
    BYTE    byRes2[64];
}NET_DVR_ALARMHOST_SWITCH_POWER_SUPPLY_ALARMINFO, 
*LPNET_DVR_ALARMHOST_SWITCH_POWER_SUPPLY_ALARMINFO;

//ÆøÌå¼ì²âÏµÍ³±¨¾¯
typedef struct tagNET_DVR_ALARMHOST_GAS_DETECT_SYS_ALARMINFO
{
    BYTE    byAlarmType;    /*±¨¾¯ÀàÐÍ£º1- SF6ÆøÌåº¬Á¿Òì³££¬2-ÑõÆøº¬Á¿Òì³££¬3-ÎÂ¶ÈÖµÒì³££¬4-Êª¶ÈÖµÒì³££¬5-Á÷Á¿*/
    BYTE    byChanNo;    //485Í¨µÀºÅ£¬´Ó1¿ªÊ¼
    BYTE    bySlotNo;    //485ÐéÄâ²ÛÎ»ºÅ
    BYTE    byRes1;
    int     iAlarmValue;        //±¨¾¯Öµ
    BYTE    byRes2[64];
}NET_DVR_ALARMHOST_GAS_DETECT_SYS_ALARMINFO, 
*LPNET_DVR_ALARMHOST_GAS_DETECT_SYS_ALARMINFO;


//ÎÂÊª¶È´«¸ÐÆ÷±¨¾¯
typedef struct tagNET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_ALARMINFO
{
    BYTE    byAlarmType;    //1-ÎÂ¶ÈÒì³££¬2-Êª¶ÈÒì³£
    BYTE    byChanNo;        //485Í¨µÀºÅ
    BYTE    bySlotNo;        //485²ÛÎ»ºÅ
    BYTE    byRes1;
    int         iAlarmValue;    //±¨¾¯Öµ
    BYTE    byRes2[64];
} NET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_ALARMINFO, *LPNET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_ALARMINFO;

typedef union  tagNET_DVR_485_DEVICE_ALARM_UNION
{
    NET_DVR_ALARMHOST_UPS_ALARMINFO struUPSAlarm; //UPS±¨¾¯
    NET_DVR_ALARMHOST_SWITCH_POWER_SUPPLY_ALARMINFO struSwitchPowerAlarm; //¿ª¹ØµçÔ´±¨¾¯
    NET_DVR_ALARMHOST_GAS_DETECT_SYS_ALARMINFO struGasDetectSystemAlarm; //ÆøÌå¼ì²âÏµÍ³±¨¾¯
    NET_DVR_ALARMHOST_TEMP_HUMIDITY_SENSOR_ALARMINFO struTempHumiditySensorAlarm; //ÎÂÊª¶È´«¸ÐÆ÷±¨¾¯
    BYTE    byRes[72];
} NET_DVR_485_DEVICE_ALARM_UNION, *LPNET_DVR_485_DEVICE_ALARM_UNION;

//485Íâ½ÓÉè±¸±¨¾¯ÐÅÏ¢
typedef struct  tagNET_DVR_485_EXTERNAL_DEVICE_ALARMINFO
{
    DWORD dwSize;
    BYTE    byAlarmType;    //1-UPS±¨¾¯£¬2-¿ª¹ØµçÔ´±¨¾¯£¬3-ÆøÌå¼ì²âÏµÍ³±¨¾¯£¬4-ÎÂÊª¶È´«¸ÐÆ÷±¨¾¯
    BYTE    byRes1[3];
    NET_DVR_485_DEVICE_ALARM_UNION struAlarmInfo;
    BYTE    byRes2[16];
} NET_DVR_485_EXTERNAL_DEVICE_ALARMINFO, *LPNET_DVR_485_EXTERNAL_DEVICE_ALARMINFO;

typedef struct tagNET_DVR_ALARMHOST_RS485_SLOT_CFG
{
    DWORD       dwSize;              // ½á¹¹Ìå´óÐ¡
    BYTE        sDeviceName[NAME_LEN];      // Ç°¶ËÉè±¸Ãû³Æ 
    WORD        wDeviceType;            // Ç°¶ËÉè±¸ÀàÐÍALARM_FRONT_DEVICE _TYPE
    WORD        wDeviceProtocol;     // Ç°¶ËÉè±¸Ð­Òé Í¨¹ý»ñÈ¡Ð­ÒéÁÐ±í»ñÈ¡
    WORD        wAddress;            //Éè±¸µØÖ·    
    BYTE        byChannel;          //485Í¨µÀºÅ
    BYTE        bySlotChan;         //²ÛÎ»ºÅ
    BYTE        byRes[60];          // ±£Áô×Ö½Ú
}NET_DVR_ALARMHOST_RS485_SLOT_CFG, *LPNET_DVR_ALARMHOST_RS485_SLOT_CFG;

//×ßÀÈÄ£Ê½
typedef struct tagNET_DVR_CORRIDOR_MODE
{
    DWORD        dwSize;
    BYTE        byEnableCorridorMode; //ÊÇ·ñÆôÓÃ×ßÀÈÄ£Ê½ 0¡«²»ÆôÓÃ£¬ 1¡«ÆôÓÃ
    BYTE        byMirrorMode;            //¾µÏñ·½Ê½£¬0 ¹Ø±Õ;1 ×óÓÒ;2 ÉÏÏÂ;3 ÖÐ¼ä 
    BYTE        byRes[126];
}NET_DVR_CORRIDOR_MODE, *LPNET_DVR_CORRIDOR_MODE;

//ÈËÁ³Õì²â
typedef struct tagNET_DVR_DETECT_FACE
{
    DWORD     dwSize;
    BYTE     byEnableDetectFace; //ÊÇ·ñÆôÓÃ 0¡«²»ÆôÓÃ£¬ 1¡«ÆôÓÃ
    BYTE     byDetectSensitive; //ÁéÃô¶È 10¸öµÈ¼¶ 1¡«10
    BYTE     byEnableDisplay;    /*ÆôÓÃÒÆ¶¯Õì²â¸ßÁÁÏÔÊ¾£¬0-·ñ£¬1-ÊÇ*/
    BYTE     byEnableFaceRecog;  //ÊÇ·ñÆôÓÃÈËÁ³Ê¶±ð£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    NET_DVR_HANDLEEXCEPTION_V40  struAlarmHandleType; /*´¦Àí·½Ê½*/
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30]; /*²¼·ÀÊ±¼ä */
    DWORD    dwMaxRelRecordChanNum;     //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD    dwRelRecordChanNum;     //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀÊý Êµ¼ÊÖ§³ÖÊý
    DWORD    dwRelRecordChan[MAX_CHANNUM_V30];    /* ±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ*/
    NET_DVR_SCHEDTIME struHolidayTime[MAX_TIMESEGMENT_V30]; //¼ÙÈÕ²¼·ÀÊ±¼ä
    WORD     wDuration;  //±¨¾¯³ÖÐøÊ±¼ä 5s ÄÜÁ¦¼¯
    BYTE     byRes1[30];
}NET_DVR_DETECT_FACE, *LPNET_DVR_DETECT_FACE;

typedef struct tagNET_DVR_MUL_STREAM_CHANNEL_GROUP
{
    DWORD        dwSize;                 // ½á¹¹Ìå´óÐ¡
    DWORD       dwGroup ;             //×éºÅ
    NET_DVR_MULTI_STREAM_COMPRESSIONCFG_COND  struMultiStreamCfg; //¶àÂëÁ÷ÅäÖÃ
    BYTE         byRes[64] ;        
}NET_DVR_MUL_STREAM_CHANNEL_GROUP,*LPNET_DVR_MUL_STREAM_CHANNEL_GROUP;

typedef struct tagNET_DVR_CHANNEL_GROUP
{
    DWORD        dwSize;       // ½á¹¹Ìå´óÐ¡
    DWORD       dwChannel; //Í¨µÀºÅ
    DWORD       dwGroup;   //×éºÅ 
    BYTE        byID;      //Éè±¸ÇøÓòÉèÖÃID
    BYTE        byRes1[3];
    DWORD       dwPositionNo; //³¡¾°Î»ÖÃË÷ÒýºÅ,IPCÊÇ0£¬IPDÊÇ´Ó1¿ªÊ¼
    BYTE        byRes[56];              
}NET_DVR_CHANNEL_GROUP, *LPNET_DVR_CHANNEL_GROUP;


typedef struct tagNET_DVR_TIME_DETECTION
{
    NET_DVR_SCHEDTIME  struSchedTime; //Ê±¼ä
    BYTE   byDetSceneID;//¼ì²â³¡¾°ºÅ[1,4],IPCÄ¬ÈÏÊÇ0
    BYTE   byRes[15];
}NET_DVR_TIME_DETECTION,*LPNET_DVR_TIME_DETECTION;

//×¥ÅÄ´¥·¢Ä£Ê½Ö§³Ö¹ØÁª²¼·ÀÊ±¼ä¶ÎºÍÉÏ´«ÖÐÐÄÌõ¼þ
typedef struct tagNET_DVR_GUARD_COND
{
    DWORD  dwSize;
    DWORD  dwChannel; //Í¨µÀºÅ
    /*
    0±íÊ¾ÎÞÐ§£¬ 
    1±íÊ¾¹ØÁª ×¥ÅÄVIAÄ£Ê½£¨ÊÓÆµ´¥·¢×¥ÅÄ IPCÊ¹ÓÃ£©;
    2 ±íÊ¾¹ØÁª ×¥ÅÄ HVT Ä£Ê½ £¨»ì¿¨IPCÊ¹ÓÃ£©
    */
    BYTE   byRelateType; 
    BYTE   byGroupNo;  //×éºÅ
    BYTE   byRes[62];
}NET_DVR_GUARD_COND,*LPNET_DVR_GUARD_COND;

//×¥ÅÄ´¥·¢Ä£Ê½Ö§³Ö¹ØÁª²¼·ÀÊ±¼ä¶ÎºÍÉÏ´«ÖÐÐÄ
typedef struct tagNET_DVR_GUARD_CFG
{
    DWORD  dwSize;
    //²¼·ÀÊ±¼ä
    NET_DVR_TIME_DETECTION    struAlarmSched[MAX_DAYS/*7*/][MAX_TIMESEGMENT_V30/*8*/]; 
    NET_DVR_HANDLEEXCEPTION_V40 struHandleException;  //Òì³£´¦Àí·½Ê½
    DWORD  dwMaxRelRecordChanNum ;  //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD  dwRelRecordChanNum ;     //±¾×éÄÚÊµ¼Ê´¥·¢µÄÂ¼ÏóÍ¨µÀÊý
    DWORD  dwRelRecordChan[MAX_CHANNUM_V30];    //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ(0xffff ffff±íÊ¾ºóÐøÎÞÐ§£©
    NET_DVR_TIME_DETECTION  struHolidayTime[MAX_TIMESEGMENT_V30]; //¼ÙÈÕ²¼·ÀÊ±¼ä 
    BYTE   byRes[88];
}NET_DVR_GUARD_CFG,*LPNET_DVR_GUARD_CFG;

//×¥ÅÄÍ¼Æ¬²ÎÊýÅäÖÃÀ©Õ¹Ìõ¼þ½á¹¹
typedef    struct  tagNET_DVR_SNAPINFO_COND_
{
    DWORD    dwSize; 
    DWORD    dwChan;
    /*
    0 ±íÊ¾¹ØÁª ×¥ÅÄMPRÄ£Ê½£¨¶àÖ¡´¥·¢×¥ÅÄ IPCÊ¹ÓÃ£©
    1 ±íÊ¾¹ØÁª ×¥ÅÄ HVT Ä£Ê½£¨»ì¿¨IPCÊ¹ÓÃ£©
    */
    BYTE     byRelateType;
    BYTE     byRes[63];        //±£Áô
}NET_DVR_SNAPINFO_COND, *LPNET_DVR_SNAPINFO_COND;


//×¥ÅÄÍ¼Æ¬²ÎÊýÅäÖÃ
typedef struct tagNET_DVR_SNAPINFOCFG
{
    DWORD dwSize;
    BYTE  byCurPicType;//0-±íÊ¾µÄÍ¼Æ¬ÖÊÁ¿£¬1-±íÊ¾Í¼Æ¬´óÐ¡
    BYTE  byPicQuality;//Í¼Æ¬ÖÊÁ¿[1,100]
    BYTE  byRes1[2];
    DWORD dwPicSize;//Í¼Æ¬´óÐ¡[64k,2048k]
    BYTE  byRes2[128];
}NET_DVR_SNAPINFOCFG,*LPNET_DVR_SNAPINFOCFG;

//ptz¸ú×Ù·½Ê½
typedef enum _PTZ_TRACK_MODE_
{
    PTZ_TRACK_MODE_ALWAYS  = 1,   //Ò»Ö±¸ú×Ù
        PTZ_TRACK_MODE_BYTIME  = 2,   //¸ú×ÙÖ¸¶¨Ê±¼ä
        PTZ_TRACK_MODE_NEXT    = 3,   //¸ú×ÙÏÂÒ»Ä¿±ê
}PTZ_TRACK_MODE;

//ptz¸ú×Ù²ÎÊý
typedef struct _NET_DVR_PTZ_TRACK_PARAM_
{
    DWORD dwSize;     //½á¹¹Ìå´óÐ¡
    BYTE  byTrackMode; //¸ú×Ù·½Ê½,²Î¿¼PTZ_TRACK_MODE
    BYTE  byLinkageTarget; //Áª¶¯Ä¿±ê0-Ä¬ÈÏ,1-Çò»ú1,2-Çò»ú2¡­..ÒÀ´ÎÀàÍÆ
    BYTE  byAutoTrackEnable;//¸ú×ÙÊ¹ÄÜ 0-×Ô¶¯¸ú×Ù¿ªÆô£¬1-×Ô¶¯¸ú×Ù¹Ø±Õ£¨Ç¹ÇòÉè±¸²ÅÖ§³Ö×Ô¶¯¸ú×Ù¹Ø±Õ¹¦ÄÜ£¬¹ÊÔÚ´ËÌØÊâÀ©Õ¹£©
    BYTE  byRes1; //±£Áô
    DWORD dwTrackTime; //¸ú×ÙÊ±¼ä£¬
    //µ±¸ú×ÙÄ£Ê½ÎªPTZ_TRACK_MODE_ALWAYS£¬´Ë×Ö¶ÎÎÞÐ§
    //µ±¸ú×ÙÄ£Ê½ÎªPTZ_TRACK MODE_BYTIMEÊ±£¬·¶Î§[1,60]£¬Ä¬ÈÏ10Ãë
    //µ±¸ú×ÙÄ£Ê½ÎªPTZ_TRACK MODE_NEXTÊ±£¬·¶Î§[1,10]£¬Ä¬ÈÏ2Ãë
    BYTE  byRes2[256]; //±£Áô
}NET_DVR_PTZ_TRACK_PARAM,*LPNET_DVR_PTZ_TRACK_PARAM;

typedef struct tagNET_VCA_TRAVERSE_PLANEPARAM
{
    DWORD dwSize;
    BYTE    byEnable;//Ê¹ÄÜ
    BYTE    byEnableDualVca;// ÆôÓÃÖ§³ÖÖÇÄÜºó¼ìË÷ 0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE   byRes1[2];
    NET_VCA_TRAVERSE_PLANE struAlertParam[MAX_ALERTLINE_NUM];  //¾¯½äÏß²ÎÊý
    NET_DVR_SCHEDTIME    struAlarmSched[MAX_DAYS][MAX_TIMESEGMENT_V30];
    NET_DVR_HANDLEEXCEPTION_V40 struHandleException;  //Òì³£´¦Àí·½Ê½
    DWORD  dwMaxRelRecordChanNum ;  //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD  dwRelRecordChanNum ;     //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý Êµ¼ÊÖ§³ÖµÄÊýÁ¿
    DWORD  byRelRecordChan[MAX_CHANNUM_V30];//´¥·¢Â¼ÏñµÄÍ¨µÀºÅ
    NET_DVR_SCHEDTIME struHolidayTime[MAX_TIMESEGMENT_V30]; //¼ÙÈÕ²¼·ÀÊ±¼ä
    BYTE byRes2[100];
}NET_VCA_TRAVERSE_PLANE_DETECTION, *LPNET_VCA_TRAVERSE_PLANE_DETECTION;


typedef struct tagNET_VCA_FIELDDETECION
{
    DWORD dwSize;
    BYTE byEnable; //Ê¹ÄÜ£¬ÊÇ·ñ¿ªÆô
    BYTE byEnableDualVca;// ÆôÓÃÖ§³ÖÖÇÄÜºó¼ìË÷ 0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byRes1[2];
    NET_VCA_INTRUSION struIntrusion[MAX_INTRUSIONREGION_NUM];//Ã¿¸öÇøÓòµÄ²ÎÊýÉèÖÃ
    NET_DVR_SCHEDTIME struAlarmSched[MAX_DAYS][MAX_TIMESEGMENT_V30]; //²¼·ÀÊ±¼ä
    NET_DVR_HANDLEEXCEPTION_V40 struHandleException;  //Òì³£´¦Àí·½Ê½
    DWORD  dwMaxRelRecordChanNum ;  //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD  dwRelRecordChanNum ;     //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý Êµ¼ÊÖ§³ÖµÄÊýÁ¿
    DWORD  byRelRecordChan[MAX_CHANNUM_V30];//´¥·¢Â¼ÏñÍ¨µÀ
    NET_DVR_SCHEDTIME struHolidayTime[MAX_TIMESEGMENT_V30/*8*/]; //¼ÙÈÕ²¼·ÀÊ±¼ä
    BYTE byRes2[100];
}NET_VCA_FIELDDETECION, *LPNET_VCA_FIELDDETECION;

typedef struct tagNET_DVR_ROI_DETECT_NUM
{
    DWORD   dwSize;
    DWORD   dwGroup;
    DWORD   dwStreamType;    //ÂëÁ÷ÀàÐÍ£¬0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷£¬2-ÊÂ¼þÀàÐÍ£¬3-ÂëÁ÷3£¬¡­¡­
    DWORD   dwRoiFixNum; //¹Ì¶¨ÇøÓò×ÜÊý£¬È·¶¨ºóÐøÔÙ´Î»ñÈ¡µÄ×éºÅ
    DWORD   dwRoiFixID[MAX_ROIDETECT_NUM];//IPCÏÖÔÚÖ§³Ö4¸ö£¬Çò»úÏÖÔÚÖ§³Ö24¸ö
    BYTE    szFixRoiName[MAX_ROIDETECT_NUM][NAME_LEN];//¹Ì¶¨ROIÇøÓòÃû³Æ
    DWORD   dwRoiTrackNum; //×Ô¶¯¸ú×ÙÇøÓò×ÜÊý£¬È·¶¨ºóÐøÔÙ´Î»ñÈ¡µÄ×éºÅ
    DWORD   dwRoiTrackID[MAX_ROIDETECT_NUM];//IPCÏÖÔÚÖ§³Ö4¸ö£¬Çò»úÏÖÔÚÖ§³Ö24¸ö
    BYTE    byRes[320];
}NET_DVR_ROI_DETECT_NUM, *LPNET_DVR_ROI_DETECT_NUM;

typedef  enum  _DETECT_ROI_TYPE_
{
    DETECT_FIX_ROI  =  0, //¼ì²âROI¹Ì¶¨ÇøÓò
        DETECT_TRACK_ROI = 1 //¼ì²âROI ×Ô¶¯¸ú×ÙÇøÓò
}DETECT_ROI_TYPE;
//Ìõ¼þ²ÎÊý
typedef struct tagNET_DVR_ROI_DETECT_COND
{
    DWORD   dwSize;
    DWORD   dwRoiID; //ÇøÓò¼ì²âºÅ Ò»¸öPTZÖ§³Ö4¸ö 
    NET_DVR_MULTI_STREAM_COMPRESSIONCFG_COND  struMultiStreamCfg; //¶àÂëÁ÷ÅäÖÃ
    BYTE    byRoiDetectType; // DECTECT_ROI_TYPE µÄÖµ
    BYTE    byRoiDetectTrackType;//¹Ì¶¨ÇøÓòÊ±£¬¸Ã×Ö¶ÎÎÞÐ§£»¸ú×ÙÇøÓòÊ±£¬1¡«ÈËÁ³Õì²â£¨IPC£©,2¡«ÒÆ¶¯ÎïÌå¸ú×Ù,3-³µÅÆ¸ú×Ù
    BYTE    byRes[30];
}NET_DVR_ROI_DETECT_COND,*LPNET_DVR_ROI_DETECT_COND;

//ÅäÖÃ²ÎÊý
//ROI¹Ì¶¨ÇøÓòÄ£Ê½ ÇøÓò±àÂë¹¦ÄÜ
typedef struct tagNET_DVR_ROI_FIX_RECT_CFG
{
    BYTE  byEnableFixRoi; // ROI¹Ì¶¨ÇøÓòÄ£Ê½ ÊÇ·ñÆôÓÃ 0¡«²»ÆôÓÃ£¬ 1¡«ÆôÓÃ
    BYTE  byImageQualityLevel; //Í¼ÏñÖÊÁ¿ÌáÉýµÈ¼¶ 1¡«6
    BYTE  byRes[2];
    BYTE  szFixRoiName[NAME_LEN];
    NET_VCA_RECT  struRoiRect;  //ROIÇøÓò
    BYTE  byRes1[468];
}NET_DVR_ROI_FIX_RECT_CFG, *LPNET_DVR_ROI_FIX_RECT_CFG;

//ROI×Ô¶¯¸ú×ÙÄ£Ê½ ÇøÓò±àÂë¹¦ÄÜ  
typedef struct tagNET_DVR_ROI_TRACK_RECT_CFG
{
    BYTE  byEnableTrackRoi; // ROI×Ô¶¯¸ú×ÙÄ£Ê½ ÊÇ·ñÆôÓÃ 0¡«²»ÆôÓÃ£¬ 1¡«ÆôÓÃ
    BYTE  byImageQualityLevel; //Í¼ÏñÖÊÁ¿ÌáÉýµÈ¼¶ 1¡«6
    BYTE  byModeType;// 0 ~ ÎÞ, 1¡«ÈËÁ³Ä£Ê½(ÒÆ¶¯ºÍ¾²Ö¹µÄÎïÌå), 2~ÒÆ¶¯ÎïÌå¸ú×Ù(ÒÆ¶¯µÄÎïÌå), 3-³µÅÆ¸ú×Ù
    BYTE  byRes[509];
}NET_DVR_ROI_TRACK_RECT_CFG, *LPNET_DVR_ROI_TRACK_RECT_CFG;

typedef union tagNET_DVR_ROI_DETECT_UNION
{
    DWORD                        uLen[128];   
    NET_DVR_ROI_FIX_RECT_CFG    strRoiFixRectCfg;//¹Ì¶¨ÇøÓòÄ£Ê½
    NET_DVR_ROI_TRACK_RECT_CFG  strRoiTrackRectCfg;//×Ô¶¯¸ú×ÙÄ£Ê½
}NET_DVR_ROI_DETECT_UNION,*LPNET_DVR_ROI_DETECT_UNION;

typedef struct tagNET_DVR_ROI_DETECT_CFG
{
    DWORD      dwSize;  //560
    DWORD       dwStreamType;    //ÂëÁ÷ÀàÐÍ£¬0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷£¬2-ÊÂ¼þÀàÐÍ£¬3-ÂëÁ÷3£¬¡­¡­
    BYTE       byRoiDetectType; // DECTECT_ROI_TYPE µÄÖµ 
    BYTE       byRes[3];
    NET_DVR_ROI_DETECT_UNION  uRoiDetectInfo; //ROI¼ì²âÇøÓò
    BYTE       byRes1[36];
}NET_DVR_ROI_DETECT_CFG, *LPNET_DVR_ROI_DETECT_CFG;

//Ðé½¹Õì²â
typedef struct tagNET_VCA_DEFOCUSPARAM
{    
    DWORD dwSize;
    BYTE byEnable;//Ê¹ÄÜ
    BYTE  bySensitiveLevel;// 1-100£¬Ä¬ÈÏ50£¬ÁéÃô¶ÈÔ½¸ß£¬Ô½ÈÝÒ×±¨¾¯
    BYTE  byRes1[2];
    NET_DVR_HANDLEEXCEPTION_V40 struHandleException;  //Òì³£´¦Àí·½Ê½
    BYTE byRes2[24];
}NET_VCA_DEFOCUSPARAM,*LPNET_VCA_DEFOCUSPARAM;

//IPC5.1.0  
typedef struct tagNET_DVR_PRESET_NAME
{
    DWORD dwSize;
    WORD wPresetNum; //Ô¤ÖÃµã±àºÅ
    BYTE byRes1[2]; //×Ö½Ú¶ÔÆë 
    char byName[NAME_LEN];
    WORD wPanPos;//Ë®Æ½²ÎÊý Èç¹û»ñÈ¡µ½µÄÊý¾Ý´óÓÚ360Ä¬ÈÏ¼õÈ¥360
    WORD wTiltPos;//´¹Ö±²ÎÊý Èç¹û»ñÈ¡µ½µÄÊý¾Ý´óÓÚ360Ä¬ÈÏ¼õÈ¥360
    WORD wZoomPos;//±ä±¶²ÎÊýÈç¹û»ñÈ¡µ½µÄÊý¾Ý´óÓÚ360Ä¬ÈÏ¼õÈ¥360
    BYTE byRes[58];
}NET_DVR_PRESET_NAME, *LPNET_DVR_PRESET_NAME;

typedef struct
{
    NET_DVR_SCHEDTIME struSchedTime; //Ê±¼ä
    WORD  wAction;  ///< ¶¨Ê±¶¯×÷¾ßÌå¶¯×÷
    WORD  wActionNum; ///< ÌØÊâ¶¯×÷×Ó±àºÅ£¬ÈçÔ¤ÖÃµã£¬Ñ²º½£¬»¨Ñù£¬±¨¾¯Êä³ö£¬ÈÕÒ¹ÇÐ»»£¬
    BYTE byres[12];
}NET_DVR_SCHEDTASK,* LPNET_DVR_SCHEDTASK;

//¶¨Ê±ÈÎÎñ
typedef struct tagNET_DVR_TIME_TASK
{
    DWORD dwSize;
    BYTE byTaskEnable;   ///< Ê¹ÄÜ 1-¿ª£¬0-¹Ø
    BYTE byRes[3];    ///< ×Ö½Ú¶ÔÆë
    NET_DVR_SCHEDTASK struTask[MAX_DAYS][MAX_SCH_TASKS_NUM];    ///< 7Ìì£¬Ã¿Ìì10Ê±¼ä¶Î
    DWORD dwParkTime;   ///< ÊØÍûÊ±¼ä 5s-720s
    BYTE byRes1[64];
}NET_DVR_TIME_TASK,*LPNET_DVR_TIME_TASK;

//Ìõ¼þ½á¹¹Ìå
typedef struct tagNET_DVR_CHANNEL_INDEX
{
    DWORD dwSize;                 // ½á¹¹Ìå´óÐ¡
    DWORD dwChannel ;           //Í¨µÀºÅ
    DWORD dwIndex ;             //Ë÷ÒýºÅ
    BYTE  byRes[64] ;        
}NET_DVR_CHANNEL_INDEX, *LPNET_DVR_CHANNEL_INDEX;

typedef struct tagNET_DVR_AUDIO_NAME
{
    DWORD dwSize;                 // ½á¹¹Ìå´óÐ¡
    char  cName[NAME_LEN] ;          //Ãû³Æ
    BYTE  byRes[64];          
}NET_DVR_AUDIO_NAME, *LPNET_DVR_AUDIO_NAME;

//µÇÂ¼Éè±¸²ÎÊý
typedef struct tagNET_DVR_LOGIN_DEVICE_PARAM_
{    
    DWORD  dwSize;       //½á¹¹Ìå´óÐ¡
    BYTE   byMobileDev;  //Éè±¸ÖÖÀà, 0- ·ÇÒÆ¶¯Éè±¸, 1 - ÒÆ¶¯Éè±¸
    BYTE   byRes[63];    //±£Áô                    
}NET_DVR_LOGIN_DEVICE_PARAM, *LPNET_DVR_LOGIN_DEVICE_PARAM;

typedef enum RECV_DATA_TYPE
{ 
    ENUM_RECV_ERRCODE = 0x0, //·µ»Ø´íÎóÂë
} RECV_DATA_TYPE;

//ÂëÁ÷Êä³öÄ£Ê½
typedef enum tagFISHEYE_STREAM_OUTPUT_MODE_
{
    FISHEYE_STREAM_MODE_FISHEYE    = 1,   //ÓãÑÛÄ£Ê½
        FISHEYE_STREAM_MODE_PTZ        = 2,   //PTZÄ£Ê½
        FISHEYE_STREAM_MODE_PANORAMA   = 3    //È«¾°Ä£Ê½
}FISHEYE_STREAM_OUTPUT_MODE;

//»Øµ÷Êý¾ÝÀàÐÍÃ¶¾Ù
typedef enum _CALLBACK_TYPE_DATA_ENUM_
{
    ENUM_FISHEYE_STREAM_STATUS   = 1,  //ÓãÑÛÂëÁ÷Êä³ö×´Ì¬
        ENUM_FISHEYE_PTZPOS          = 2,  //ptzÍ¨µÀµ±Ç°Ëù´¦ÓãÑÛÄ£Ê½ÏÂµÄ×ø±ê
        ENUM_FISHEYE_REALTIME_OUTPUT = 3   //ÊµÊ±Êä³öÄ£Ê½
}CALLBACK_TYPE_DATA_ENUM;

//ÓãÑÛÂëÁ÷×´Ì¬
typedef struct tagNET_DVR_FISHEYE_STREAM_STATUS_
{   
    DWORD  dwSize;        //½á¹¹Ìå´óÐ¡ 
    BYTE   byStreamMode;  //ÂëÁ÷Êä³öÄ£Ê½£¬²Î¼ûFISHEYE_STREAM_OUTPUT_MODE
    BYTE   byRes[63];     //±£Áô
}NET_DVR_FISHEYE_STREAM_STATUS,*LPNET_DVR_FISHEYE_STREAM_STATUS;

//³¤Á¬½Ó»Øµ÷Êý¾Ý½á¹¹Ìå
typedef struct tagNET_DVR_CALLBACK_TYPE_DATA
{   
    DWORD  dwChannel;      //Í¨µÀºÅ
    DWORD  dwDataType;     //²Î¼ûCALLBACK_TYPE_DATA_ENUM
    DWORD  dwDataLen;      //Êý¾Ý³¤¶È
    BYTE*  pData;          //Êý¾Ý£¬µ±dwTypeDataÎª ENUM_FISHEYE_STREAM_STATUS£¬Æä¶ÔÓ¦ÎªNET_DVR_FISHEYE_STREAM_STATUS
    BYTE   byRes[64];      //±£Áô    
}NET_DVR_CALLBACK_TYPE_DATA,*LPNET_DVR_CALLBACK_TYPE_DATA;

//ÓãÑÛptzÍÏ¶¯²ÎÊý
typedef struct tagNET_DVR_DRAG_POS_PARAM
{
    DWORD          dwChannel;      //Í¨µÀºÅ
    DWORD          dwPtzChannel;   //µ±dwChannelËùÖ¸Í¨µÀÄ£Ê½ÎªFISHEYE_STREAM_MODE_FISHEYE£¨ÓãÑÛÄ£Ê½Ê±£©£¬´ËÖµÎªÆäÍÏ¶¯ËùÁª¶¯µÄptzÍ¨µÀ¡£µ±dwChannelÍ¨µÀÄ£Ê½Îª·ÇÓãÑÛÊ±£¬ÖÃÎª0¼´¿É
    NET_VCA_POINT  struToPoint;    //ÍÏ¶¯»­ÃæÒªÌø×ªµ½µÄÄ¿±êµã£¬Ä¿±êµãÎ»ÖÃÏà¶ÔÓÚÔ¤ÀÀ»­ÃæµÄ×óÉÏ½Ç
    NET_VCA_POINT  struOriPoint;   //ÍÏ¶¯²Ù×÷ÆðÊ¼µã,´ËµãÎªµ±´ÎÍÏ¶¯²Ù×÷¿ªÊ¼Ê±£¬Êó±êÖ¸ÕëÏà¶ÔÓÚÔ¤ÀÀ»­Ãæ×óÉÏ½ÇµÄÎ»ÖÃ
    BYTE           byRes[56];      //±£Áô
}NET_DVR_DRAG_POS_PARAM,*LPNET_DVR_DRAG_POS_PARAM;

//Æ½Ì¨²éÑ¯Õï¶Ï·þÎñÆ÷µÄ×´Ì¬
typedef struct tagNET_DVR_QUERY_STATUS
{
    DWORD      dwSize;
    BYTE       byCpuLoad;       //CPU×ÊÔ´Õ¼ÓÃÇé¿ö, È¡Öµ·¶Î§£º0-100
    BYTE       byMemLoad;      //Memory×ÊÔ´Õ¼ÓÃÇé¿ö£¬È¡Öµ·¶Î§£º0-100
    WORD       wAbility;      //Õï¶Ï·þÎñÆ÷ÄÜÁ¦¼¯£¬´óÓÚ0
    WORD       wRemainAbility;//Õï¶Ï·þÎñÆ÷Ê£ÓàÄÜÁ¦£¬È¡Öµ·¶Î§£º´óÓÚ 0  Ê£Óà¼à¿ØµãµÄ¸öÊý
    WORD       wTotalPlanNum; //×î¶à64¸ö¼Æ»®>
    WORD       wCurPlanNum;   //µ±Ç°¼Æ»®Êý  ×î¶à64¸ö¼Æ»®>
    BYTE       byRes[62];     //±£Áô
}NET_DVR_QUERY_STATUS, *LPNET_DVR_QUERY_STATUS;

typedef struct tagNET_DVR_MONITOR_VQDCFG
{
    DWORD   dwSize;
    BYTE   byEnable;            //ÊÇ·ñÆôÓÃ     
    BYTE   byDevType;             //Éè±¸ÀàÐÍ£º0-·ÇÔÆÌ¨Éè±¸£¬1-´øÔÆÌ¨Éè±¸
    BYTE   bySignalPoint;       //ÐÅºÅ¶ªÊ§·§Öµ£¬0-100
    BYTE   byBlurPoint;         //Í¼ÏñÄ£ºý·§Öµ£¬0-100
    BYTE   byLumaPoint;         //Í¼Ïñ¹ýÁÁ·§Öµ£¬0-100
    BYTE   byChromaPoint;       //Í¼ÏñÆ«É«·§Öµ£¬0-100
    BYTE   bySnowPoint;         //ÔëÉù¸ÉÈÅ·§Öµ£¬0-100
    BYTE   byStreakPoint;       //ÌõÎÆ¸ÉÈÅ·§Öµ£¬0-100
    BYTE   byFreezePoint;       //»­Ãæ¶³½á·§Öµ£¬0-100
    BYTE   byPTZPoint;          //ÔÆÌ¨Ê§¿Ø·§Öµ£¬0-100
    BYTE   byMonitorDel;        //¼à¿ØµãÉ¾³ý 0-²»É¾³ý£¬ 1-É¾³ý
    BYTE   byContrastThreshold; //¶Ô±È¶ÈÒì³£ãÐÖµ£¬0-100
    BYTE   byMonoThreshold;     //ºÚ°×Í¼ÏñãÐÖµ£¬0-100
    BYTE   byShakeThreshold;    //ÊÓÆµ¶¶¶¯ãÐÖµ£¬0-100
    BYTE   byFlashThreshold;    //ÊÓÆµ¾ç±äãÐÖµ£¬0-100
    BYTE   byCoverThreshold;    //ÊÓÆµÕÚµ²ãÐÖµ£¬0-100
    BYTE   bySceneThreshold;    //³¡¾°±ä¸üãÐÖµ£¬0-100
    BYTE   byDarkThreshold;     //Í¼Ïñ¹ý°µãÐÖµ£¬0-100
    BYTE   byRes[46];
}NET_DVR_MONITOR_VQDCFG, *LPNET_DVR_MONITOR_VQDCFG;

//Õï¶Ï½á¹û
typedef struct tagNET_DVR_DIAGNOSIS_UPLOAD
{
    DWORD  dwSize;
    char   sStreamID[STREAM_ID_LEN];    ///< Á÷ID£¬³¤¶ÈÐ¡ÓÚ32¸ö×Ö½Ú
       char  sMonitorIP[64];  ///< ¼à¿Øµãip
       DWORD  dwChanIndex;  ///< ¼à¿ØµãÍ¨µÀºÅ  
    DWORD  dwWidth;  ///< Í¼Ïñ¿í¶È
    DWORD  dwHeight;  ///< Í¼Ïñ¸ß¶È
    NET_DVR_TIME  struCheckTime;  ///< ¼ì²âÊ±¼ä(ºÏ²¢ÈÕÆÚºÍÊ±¼ä×Ö¶Î)£¬¸ñÊ½£º2012-08-06 13:00:00
    BYTE  byResult;  ///0-Î´¼ì²â 1-Õý³£ 2-Òì³£ 3-µÇÂ¼Ê§°Ü 4-È¡Á÷Òì³£
    BYTE  bySignalResult; ///< ÊÓÆµ¶ªÊ§¼ì²â½á¹û 0-Î´¼ì²â 1-Õý³£ 2-Òì³£
       BYTE  byBlurResult;  ///< Í¼ÏñÄ£ºý¼ì²â½á¹û£¬0-Î´¼ì²â 1-Õý³£ 2-Òì³£
       BYTE  byLumaResult;  ///< Í¼Ïñ¹ýÁÁ¼ì²â½á¹û£¬0-Î´¼ì²â 1-Õý³£ 2-Òì³£
       BYTE  byChromaResult;  ///< Æ«É«¼ì²â½á¹û£¬0-Î´¼ì²â 1-Õý³£ 2-Òì³£
       BYTE  bySnowResult;  ///< ÔëÉù¸ÉÈÅ¼ì²â½á¹û£¬0-Î´¼ì²â 1-Õý³£ 2-Òì³£
    BYTE  byStreakResult;  ///< ÌõÎÆ¸ÉÈÅ¼ì²â½á¹û£¬0-Î´¼ì²â 1-Õý³£ 2-Òì³£
       BYTE  byFreezeResult;  ///< »­Ãæ¶³½á¼ì²â½á¹û£¬0-Î´¼ì²â 1-Õý³£ 2-Òì³£
       BYTE  byPTZResult;  ///< ÔÆÌ¨¼ì²â½á¹û£¬0-Î´¼ì²â 1-Õý³£ 2-Òì³£
    BYTE  byContrastResult;     //¶Ô±È¶ÈÒì³£¼ì²â½á¹û£¬0-Î´¼ì²â£¬1-Õý³££¬2-Òì³£
    BYTE  byMonoResult;         //ºÚ°×Í¼Ïñ¼ì²â½á¹û£¬0-Î´¼ì²â£¬1-Õý³££¬2-Òì³£
    BYTE  byShakeResult;        //ÊÓÆµ¶¶¶¯¼ì²â½á¹û£¬0-Î´¼ì²â£¬1-Õý³££¬2-Òì³£
    char  sSNapShotURL[256];    ///<Í¼Æ¬URLµØÖ·
    BYTE  byFlashResult;        //ÊÓÆµ¾ç±ä¼ì²â½á¹û£¬0-Î´¼ì²â£¬1-Õý³££¬2-Òì³£
    BYTE  byCoverResult;        //ÊÓÆµÕÚµ²¼ì²â½á¹û£¬0-Î´¼ì²â£¬1-Õý³££¬2-Òì³£
    BYTE  bySceneResult;        //³¡¾°±ä¸ü¼ì²â½á¹û£¬0-Î´¼ì²â£¬1-Õý³££¬2-Òì³£
    BYTE  byDarkResult;         //Í¼Ïñ¹ý°µ¼ì²â½á¹û£¬0-Î´¼ì²â£¬1-Õý³££¬2-Òì³£
    BYTE  byStreamType;        //ÂëÁ÷ÀàÐÍ£¬0-ÎÞÐ§£¬1-Î´Öª£¬2-¹ú±êÀàÐÍ£¬3-·Ç¹ú±êÀàÐÍ
    BYTE  byRes2[59];
}NET_DVR_DIAGNOSIS_UPLOAD, *LPNET_DVR_DIAGNOSIS_UPLOAD;

typedef struct tagNET_DVR_DOWN_LOAD_REQUEST   ///< Õâ¸öÊý¾Ý½á¹¹ÊÇÆ½Ì¨·¢ËÍµ½Õï¶Ï·þÎñÆ÷µÄ
{
    NET_DVR_STREAM_INFO  struStreamInfo;
       char   sSnapShotURL[256];  ///< Õï¶Ï×¥Í¼URL£¬³¤¶ÈÐ¡ÓÚ256¸ö×Ö½Ú    
    BYTE   byRes[32];
}NET_DVR_DOWN_LOAD_REQUEST, *LPNET_DVR_DOWN_LOAD_REQUEST;

typedef struct tagNET_DVR_VQD_RESULT_INFO  ///< Õâ¸öÊý¾Ý½á¹¹ÊÇÕï¶Ï·þÎñÆ÷·µ»Ø¸øÆ½Ì¨µÄ
{
    DWORD  dwSize;
    char   sStreamID[32];     ///<Á÷ID(¼à¿ØµãID)£¬³¤¶ÈÐ¡ÓÚ32¸ö×Ö½Ú
    DWORD  dwPicLength;  ///Í¼Æ¬³¤¶È
    BYTE   byStatus;     ///< ÉèÖÃ½á¹û:0-³É¹¦,1-Êý¾ÝÓÐÎó£¬2-Í¼Æ¬²»´æÔÚ£¬3-»ñÈ¡Í¼Æ¬Ê§°Ü
    BYTE   byRes[31];
       char   *pSnapShot;      ///< Õï¶Ï×¥Í¼£¬ÊÇÒ»¿éÍ¼Æ¬»º´æÊý¾Ý(700k)
}NET_DVR_VQD_RESULT_INFO, *LPNET_DVR_VQD_RESULT_INFO;

typedef struct tagNET_DVR_PLAN_VQD_CFG
{
    DWORD   dwSize;
    BYTE    sPlanID[PLAN_ID_LEN];    ///< ¼Æ»®id£¬³¤¶ÈÐ¡ÓÚ32¸ö×Ö½Ú
       NET_DVR_SCHEDTIME  struDetectTime[MAX_DAYS][MAX_TIMESEGMENT_V30];    ///< ¼ì²âÊ±¼ä 
    BYTE    byPlanMode;  ///0:¼´Ê±¼Æ»®£¬1:ÖÜÆÚ¼Æ»®
    BYTE    byRes1;//     
    BYTE    byCheckFlag;  ///< ÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
    BYTE    bySignal;  ///<ÊÓÆµ¶ªÊ§ ÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
       BYTE    byBlur;  ///< Í¼ÏñÄ£ºý ÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
       BYTE    byLuma;  ///< Í¼Ïñ¹ýÁÁÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
       BYTE    byChroma;  ///< Æ«É«¼ì²â ÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
       BYTE    bySnow;  ///<ÔëÉù¸ÉÈÅ ÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
    BYTE    byStreak;  ///<ÌõÎÆ¸ÉÈÅ ÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
       BYTE    byFreeze;  ///<»­Ãæ¶³½áÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
       BYTE    byPTZ;  ///<ÔÆÌ¨ÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
    BYTE    byEnablePlanRound;  ///¼Æ»®Ñ­»·ÊÇ·ñ¿ªÆô
    BYTE    byContrast;  //¶Ô±È¶ÈÒì³£ÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
    BYTE    byMono;      //ºÚ°×Í¼ÏñÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
    BYTE    byShake;     //ÊÓÆµ¶¶¶¯ÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
    BYTE    byFlash;     //ÊÓÆµ¾ç±äÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
    BYTE    byCover;     //ÊÓÆµÕÚµ²ÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
    BYTE    byScene;     //³¡¾°±ä¸üÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
    BYTE    byDark;      //Í¼Ïñ¹ý°µÊÇ·ñ¼ì²â£¬0-²»¼ì²â£¬1-¼ì²â
    BYTE    byRes[13];     
}NET_DVR_PLAN_VQD_CFG, *LPNET_DVR_PLAN_VQD_CFG;


typedef struct tagNET_DVR_TEST_SPOTCFG
{
    DWORD dwSize;
    BYTE  byStepCount;                //×Ü²½Êý
    BYTE  byStepIndex;                //µ±Ç°µÚ¼¸²½
    BYTE  byRes[14];
}NET_DVR_TEST_SPOTCFG, *LPNET_DVR_TEST_SPOTCFG;

//µÚÈý·½IPCÁÐ±í
typedef enum tagNET_DVR_IPC_ENUM
{
    ENUM_BUSINESS_INVALID = -1,
        
        ENUM_BUSINESS_HIKVISION = 0,
        ENUM_BUSINESS_PANASONIC,
        ENUM_BUSINESS_SONY,
        ENUM_BUSINESS_AXIS,
        ENUM_BUSINESS_SANYO,
        ENUM_BUSINESS_BOSCH,
        ENUM_BUSINESS_ZAVIO,
        ENUM_BUSINESS_GRANDEYE,
        ENUM_BUSINESS_PROVIDEO,
        ENUM_BUSINESS_ARECONT, // 9 
        ENUM_BUSINESS_ACTI,
        ENUM_BUSINESS_PELCO,
        ENUM_BUSINESS_VIVOTEK,
        ENUM_BUSINESS_INFINOVA,  
        ENUM_BUSINESS_DAHUA,    //14
        
        ENUM_BUSINESS_HIK_STD_H264 = 0x20,
        ENUM_BUSINESS_HIK_STD_MPEG4,
        ENUM_BUSINESS_SUNELL ,    //¾°Ñô
        ENUM_BUSINESS_ATEME ,    
        ENUM_BUSINESS_LAUNCH,    //ÀÊ³Û
        ENUM_BUSINESS_YAAN,    //ÑÅ°²
        ENUM_BUSINESS_BLUESKY,    //À¶É«ÐÇ¼Ê
        ENUM_BUSINESS_BLUESKYLIMIT,//À¶É«ÐÇ¼ÊLIMIT
        ENUM_BUSINESS_TDWY,            //ÌìµØÎ°Òµ
        ENUM_BUSINESS_HBGK,            //ºº°î¸ß¿Æ
        ENUM_BUSINESS_SANTACHI,        //½ðÈýÁ¢
        ENUM_BUSINESS_HIGHEASY,        //ºãÒä
        ENUM_BUSINESS_SAMSUNG,          
        
        ENUM_BUSINESS_URL_RTSP = 0x40,    /* urlÀàÐÍÈ¡Á÷ */
        ENUM_BUSINESS_ONVIF,            
        
        ENUM_MAX_BUSINESS_TYPE,    //×î´ó³§ÉÌÀàÐÍ
} NET_DVR_IPC_ENUM, *LPNET_DVR_IPC_ENUM;

//ºó¶Ë´«ÏÔÍ³Ò»ºóµÚÈý·½IPCÁÐ±í
typedef enum tagNET_DVR_IPC_ENUM_UNIFY
{
    ENUM_IPC_PROTOCOL_INVALID = -1,
        ENUM_IPC_PROTOCOL_HIKVISION = 0,  //º£¿µÍþÊÓ
        ENUM_IPC_PROTOCOL_PANASONIC ,     //ËÉÏÂ
        ENUM_IPC_PROTOCOL_SONY ,          //Ë÷Äá
        
        ENUM_IPC_PROTOCOL_AXIS = 4,       //°²Ñ¶Ê¿
        ENUM_IPC_PROTOCOL_SANYO ,         //ÈýÑó
        ENUM_IPC_PROTOCOL_BOSCH ,         //²©ÊÀ  
        ENUM_IPC_PROTOCOL_ZAVIO ,         //ZAVIO  
        ENUM_IPC_PROTOCOL_GRANDEYE ,      //GRANDEYE
        ENUM_IPC_PROTOCOL_PROVIDEO ,      //´´ÊÓ
        ENUM_IPC_PROTOCOL_ARECONT ,       //°®Èñ¿µÌØ
        ENUM_IPC_PROTOCOL_ACTI ,          //´óÎÀÍ¨
        ENUM_IPC_PROTOCOL_PELCO ,         //ÅÁ¶û¸ß 
        ENUM_IPC_PROTOCOL_VIVOTEK ,       //¾§î£Í¨Ñ¶
        ENUM_IPC_PROTOCOL_DAHUA ,         //´ó»ª
        ENUM_IPC_PROTOCOL_SAMSUNG ,       //ÈýÐÇ
        
        ENUM_IPC_PROTOCOL_PSIA = 17,      //PSIA
        ENUM_IPC_PROTOCOL_ONVIF ,         //ONVIF
        ENUM_IPC_PROTOCOL_BRICKCOM ,      //½ð×©Í¨ÐÅ
        ENUM_IPC_PROTOCOL_GB28181 ,       //GB28181
        
        ENUM_IPC_PROTOCOL_CANON = 23 ,    //¼ÑÄÜ
        
        ENUM_IPC_PROTOCOL_HUINT = 32,      //HUINT
        ENUM_IPC_PROTOCOL_INFINOVA ,       //Ó¢·ÉÍØ
        ENUM_IPC_PROTOCOL_HIK_STD_H264,    //º£¿µ±ê×¼264
        ENUM_IPC_PROTOCOL_HIK_STD_MPEG4 ,  //º£¿µ±ê×¼MPEG4
        ENUM_IPC_PROTOCOL_SUNELL ,         //¾°Ñô
        ENUM_IPC_PROTOCOL_ATEME ,          //°²ÌØÄ·
        ENUM_IPC_PROTOCOL_LAUNCH ,         //ÀÉ³Û
        ENUM_IPC_PROTOCOL_YAAN,                //ÑÇ°²
        ENUM_IPC_PROTOCOL_BLUESKY ,            //À¶É«ÐÇ¼Ê
        ENUM_IPC_PROTOCOL_BLUESKYLIMIT ,    //À¶É«ÐÇ¼ÊLIMIT
        ENUM_IPC_PROTOCOL_TDWY ,           //ÌìµØÎ°Òµ
        ENUM_IPC_PROTOCOL_HBGK ,            //ºº°î¸ß¿Æ
        ENUM_IPC_PROTOCOL_SANTACHI,            //½ðÈýÁ¢
        ENUM_IPC_PROTOCOL_HIGHEASY,            //ºãÒÚ
        ENUM_IPC_PROTOCOL_HANBANG ,         //ºº°î¸ß¿Æ
        ENUM_IPC_PROTOCOL_SAMSUNG_3120 ,    //ÈýÐÇ3120
        ENUM_IPC_PROTOCOL_SAMSUNG_3080 ,    //ÈýÐÇ3080
        ENUM_IPC_PROTOCOL_SAMSUNG_2000,     //ÈýÐÇ2000
        ENUM_IPC_PROTOCOL_SAMSUNG_5200 ,    //ÈýÐÇ5200
        ENUM_IPC_PROTOCOL_JINGYUAN ,        //¾¯Ôº
        ENUM_IPC_PROTOCOL_VIDEOTREC ,       //¶¯Á¦Ó¯¿Æ
        ENUM_IPC_PROTOCOL_CHENOVA ,            //ÉÏº£³Ï·á
        ENUM_IPC_PROTOCOL_FENGHUO ,         //·é»ð
        ENUM_IPC_PROTOCOL_ZB_5301 ,         //Õã½­±´¶û5301
        ENUM_IPC_PROTOCOL_ZB_5401 ,         //Õã½­±´¶û5401
        ENUM_IPC_PROTOCOL_HAIXIN,            //º£ÐÅ
        ENUM_IPC_PROTOCOL_ZHONGYINGXIN ,    //ÖÐå­öÎ
        ENUM_IPC_PROTOCOL_AVUN ,            //ÐÅÅµ°²´ï
        ENUM_IPC_PROTOCOL_GOVTY ,           //¹ãÖÝ¼ªÌï
        ENUM_IPC_PROTOCOL_SAE ,                //°¬Àï¿Ë
        ENUM_IPC_PROTOCOL_DONGFANGWANGLI,   //¶«·½ÍøÁ¦
        ENUM_IPC_PROTOCOL_CHANGHONG,        //³¤ºç
        ENUM_IPC_PROTOCOL_H3C ,                //»ªÈý
        ENUM_IPC_PROTOCOL_BAIAN ,           //°Ù°²
        ENUM_IPC_PROTOCOL_HAT ,                //»ª°²Ì©
        ENUM_IPC_PROTOCOL_YUANYE,            //Ô¶Òµ
        ENUM_IPC_PROTOCOL_HIKCARD ,            //º£¿µ°å¿¨
        ENUM_IPC_PROTOCOL_HAIXINCAP ,       //º£ÐÅ×¥ÅÄ»ú
        ENUM_IPC_PROTOCOL_WENANCAP ,        //ÎÄ°²×¥ÅÄ»ú
        ENUM_IPC_PROTOCOL_XUNMEI ,            //Ñ¶ÃÀ
        ENUM_IPC_PROTOCOL_BAIWO ,            //°ÛÎÖ
        ENUM_IPC_PROTOCOL_APD ,                //°²ÆÕ´ï
        ENUM_IPC_PROTOCOL_REACHDEV ,        //ÈñÈ¡
        ENUM_IPC_PROTOCOL_XUNMEI_DAHUA ,    //Ñ¶ÃÀ´ó»ªOEM
        ENUM_IPC_PROTOCOL_HUANGHE,            //»ÆºÓÉè±¸
        ENUM_IPC_PROTOCOL_LIANCHEN ,        //Áªå·
        ENUM_IPC_PROTOCOL_CHENGYE,            //³ÏÒµ
        ENUM_IPC_PROTOCOL_VISIONDIGI ,      //ÍþÇ¬
        ENUM_IPC_PROTOCOL_HENGHE ,          //ºãºÓ
        ENUM_IPC_PROTOCOL_KODAK ,           //¿Æ´ï
        ENUM_IPC_PROTOCOL_AIRONIX,          //°ÂÄá¿ËË¹
        ENUM_IPC_PROTOCOL_LG,               //ÀÖ½ð
        ENUM_IPC_PROTOCOL_HASEE ,          //ÉñÖÝ
        ENUM_IPC_PROTOCOL_8000ME ,          //8000ME
        ENUM_IPC_PROTOCOL_POVITEL ,         //ÆÕÌì²©Íþ
        ENUM_IPC_PROTOCOL_YIVIEW,           //ÒÚÎ¬
        ENUM_IPC_PROTOCOL_TIANYUE ,         //ÌìÔ¾
        ENUM_IPC_PROTOCOL_HOWELL ,          //ºÆÎ¬
        ENUM_IPC_PROTOCOL_WAPA,             //²¨Á£
        ENUM_IPC_PROTOCOL_SANLE ,           //ÈýÀÖ
        ENUM_IPC_PROTOCOL_HIKCARD_ENCRYPTION,      //¼ÓÃÜº£¿µ°å¿¨
        ENUM_IPC_PROTOCOL_JUNSDA ,          //ÖæÊÓ´ï
        ENUM_IPC_PROTOCOL_LIYUAN ,          //Á¢Ôª
        ENUM_IPC_PROTOCOL_XINCHAN ,         //ÐÅ²ú
        ENUM_IPC_PROTOCOL_BITE ,            //±ÈÌØ
        ENUM_IPC_PROTOCOL_MEIAN,            //ÃÀ°²
        ENUM_IPC_PROTOCOL_ROSEEK,           //ÈñÊÆ
        ENUM_IPC_PROTOCOL_AEBELL ,          //ÃÀµç±´¶û
        ENUM_IPC_PROTOCOL_JSL_ST ,          //½ðÈýÁ¢ST
        ENUM_IPC_PROTOCOL_VIMICRO,          //ÖÐÐÇÎ¢µç×Ó
        
        ENUM_IPC_PROTOCOL_TYPE,    //×î´ó³§ÉÌÀàÐÍ
}NET_DVR_IPC_ENUM_UNIFY, *LPNET_DVR_IPC_ENUM_UNIFY;



typedef struct tagNET_DVR_MRD_SEARCH_PARAM
{
    DWORD                dwSize;            // ½á¹¹Ìå´óÐ¡
    NET_DVR_STREAM_INFO    struStreamInfo;    // ¼à¿Øµã
    WORD                 wYear;              // Äê 
    BYTE                 byMonth;            // ÔÂ
    BYTE                byDrawFrame;    // 0-²»³éÖ¡ 1-³éÖ¡
    BYTE                byStreamType;   //0-Ö÷ÂëÁ÷ 1-×ÓÂëÁ÷
    BYTE                byRes[31];  
}NET_DVR_MRD_SEARCH_PARAM, *LPNET_DVR_MRD_SEARCH_PARAM;

typedef struct tagNET_DVR_MRD_SEARCH_RESULT
{    
    DWORD            dwSize;            // ½á¹¹Ìå´óÐ¡
    BYTE            byRecordDistribution[LEN_32];   // Â¼Ïñ·Ö²¼£¬byRecordDistribution[0]=1±íÊ¾1ÈÕ´æÔÚÂ¼Ïñ£¬byRecordDistribution[0]=0±íÊ¾Ã»ÓÐÂ¼Ïñ£¬
    //byRecordDistribution[1]±íÊ¾2ÈÕ£¬ÒÔ´ËÀàÍÆ
    BYTE            byHasEventRecode[LEN_31];            //ÊÂ¼þÂ¼Ïñ 0-ÎÞÊÂ¼þÂ¼Ïñ£¬1-ÓÐÊÂ¼þÂ¼Ïñ
    BYTE            byRes;                        //±£Áô
}NET_DVR_MRD_SEARCH_RESULT, *LPNET_DVR_MRD_SEARCH_RESULT;


typedef struct tagNET_DVR_ACCESS_DEVICE_INFO
{
    DWORD    dwSize;                        // ½á¹¹Ìå´óÐ¡
    BYTE     byGroup;                    // ×éºÅ£¬Ã¿×é¿É»ñÈ¡ 64¸öÍ¨µÀ£¬´Ó0¿ªÊ¼, 0±íÊ¾µÚ1×é£¬ÒÔ´ËÀàÍÆ
    BYTE    byProType;                    //Ð­ÒéÀàÐÍ£¬0-Ë½ÓÐÐ­Òé£¬1-ËÉÏÂÐ­Òé£¬2-Ë÷Äá
    BYTE    byAccessMode;                //½ÓÈëÄ£Ê½£¬0-IPµØÖ·£¬1-ÓòÃû
    BYTE    byRes1;                        //±£Áô×Ö¶Î£¬ÖÃ0
    char    szUserName[NAME_LEN];        //ÓÃ»§Ãû
    char    szPassword[PASSWD_LEN];        //ÃÜÂë
    char    szDomain[MAX_DOMAIN_NAME];    //Éè±¸ÓòÃû
    NET_DVR_IPADDR struIP;                //IPµØÖ·
    WORD    wPort;                         // ¶Ë¿ÚºÅ
    BYTE    szGB28181DevID[DEV_ID_LEN]; //GB28181Ð­Òé½ÓÈëÊ±µÄÉè±¸·þÎñÆ÷ID
    BYTE    byRes2[2];                    //±£Áô×Ö¶Î£¬ÖÃ0
}NET_DVR_ACCESS_DEVICE_INFO, *LPNET_DVR_ACCESS_DEVICE_INFO;

typedef struct tagNET_DVR_ACCESS_DEVICE_CHANNEL_INFO
{
    DWORD    dwSize;    // ½á¹¹Ìå´óÐ¡
    DWORD    dwTotalChannelNum;      //Éè±¸×ÜÍ¨µÀ¸öÊý£¬Éè±¸²»ÔÚÏßÊ±·µ»Ø0£¬byChannelÎÞÐ§
    BYTE     byChannel[MAX_CHANNUM_V30];    /*byChannel[i]Îª0±íÊ¾µÚ£¨byGroup+1£©*£¨i-1£©Í¨µÀÎ´½ÓÈëµ½NVR£¬
                                    Îª1±íÊ¾¸ÃÍ¨µÀÒÑ½ÓÈëµ½NVR byGroupÔÚNET_DVR_ACCESS_DEVICE_INFOÖÐ*/
    BYTE  byRes[32];           //±£Áô
}NET_DVR_ACCESS_DEVICE_CHANNEL_INFO, *LPNET_DVR_ACCESS_DEVICE_CHANNEL_INFO;

typedef struct tagNET_DVR_PREVIEW_SWITCH_COND
{
    DWORD    dwSize; //×éºÅ
    BYTE    byGroup; //×éºÅ£¬Ã¿×é¿ÉÅäÖÃ64¸ö»­Ãæ
    BYTE    byVideoOutType; /*ÊÓÆµÊä³ö½Ó¿ÚÀàÐÍ,0-Ö÷CVBS,1-HDMI 2-VGA 3-¸¨ÖúÊä³öÒ»
                     4-¸¨ÖúÊä³ö¶þ 5-¸¨ÖúÊä³öÈý 6-¸¨ÖúÊä³öËÄ, 7-¸¨ÖúHDMI, 8-À©Õ¹HDMI1,
                     9-À©Õ¹HDMI2, 10-À©Õ¹HDMI3, 11-À©Õ¹HDMI4, 12-·ÇÍ¬Ô´VGA1£¬
                     13-·ÇÍ¬Ô´VGA2£¬14-·ÇÍ¬Ô´VGA3£¬15-·ÇÍ¬Ô´VGA4£¬16-Í¬Ô´VGA, 17-Ö÷LCD,18-¸¨ÖúVGA,19-¸¨ÖúLCD*/
    BYTE    byRes[2];
}NET_DVR_PREVIEW_SWITCH_COND, *LPNET_DVR_PREVIEW_SWITCH_COND;

typedef struct tagNET_DVR_PREVIEW_SWITCH_CFG
{
    DWORD    dwSize;    // °æ±¾¹ÜÀí¼°½á¹¹Ìå´óÐ¡
                    WORD    wSwitchSeq[MAX_WINDOW_V40];/*bySwitchSeq [i]=6£¬±íÊ¾µÚ£¨×éºÅ*64+i+1£©¸ö´°¿Ú
                    ÏÔÊ¾µÚÁùÍ¨µÀ£¬Îª0xff±íÊ¾¸Ã´°¿Ú²»ÏÔÊ¾*/
                    BYTE    byPreviewNumber;/*Ô¤ÀÀÊýÄ¿,0-1»­Ãæ,1-4»­Ãæ,2-9»­Ãæ,3-16»­Ãæ, 4-6»­Ãæ, 5-8»­Ãæ£¬6-25»­Ãæ,7-32»­Ãæ, 8-36»­Ãæ, 9-64»­Ãæ
                    0xff:×î´ó»­Ãæ*/
                    BYTE    byEnableAudio;//ÊÇ·ñÉùÒôÔ¤ÀÀ,0-²»Ô¤ÀÀ,1-Ô¤ÀÀ
                    BYTE    bySwitchTime;//ÇÐ»»Ê±¼ä,0-²»ÇÐ»»,1-5s,2-10s,3-20s,4-30s, 5-60s 6-120s,7-300s
                    BYTE    bySameSource ; //ÊÇ·ñÍ¬Ô´£¬µ±ÊÓÆµÊä³ö¿ÚÀàÐÍÎª·ÇÍ¬Ô´VGA1-·ÇÍ¬Ô´VGA4Ê±ÓÐÐ§ 
                    BYTE    byRes[32];        //±£Áô
}NET_DVR_PREVIEW_SWITCH_CFG,* LPNET_DVR_PREVIEW_SWITCH_CFG;

typedef struct tagNET_DVR_USER_COND
{    
    char        szUserName[NAME_LEN];
    BYTE        byRes[48];
}NET_DVR_USER_COND, *LPNET_DVR_USER_COND;

typedef struct tagNET_DVR_USER_RIGHT_CFG
{    
    DWORD            dwSize;
    BYTE            byAddMonitoringPointRight; // Ìí¼Ó¼à¿Øµã£¨Ç°¶ËÉè±¸£©È¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byModMonitoringPointRight; // ÐÞ¸Ä¼à¿Øµã£¨Ç°¶ËÉè±¸£©È¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byDelMonitoringPointRight; // Ìí¼Ó¼à¿Øµã£¨Ç°¶ËÉè±¸£©È¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            bySetRecordPlanRight; // ÖÆ¶¨Â¼Ïñ²ßÂÔÈ¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byDelRecordPlanRight; // É¾³ýÂ¼Ïñ²ßÂÔÈ¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byEnableOrDisableRecordPlanRight; // ÆôÓÃºÍ½ûÓÃÂ¼Ïñ¼Æ»®È¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byManualRecordRight; // Æô¶¯ºÍÍ£Ö¹ÊÖ¶¯Â¼ÏñÈ¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            bySetAlarmRecordRight; // ±¨¾¯Â¼ÏñÉè¶¨È¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byRecordBackupRight; // Â¼Ïñ´æµµÈ¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byRecordDownloadRight; // Â¼ÏñÏÂÔØÈ¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byRecordDeleteRight; // Â¼ÏñÉ¾³ýÈ¨ÏÞ0-ÎÞ 1-ÓÐ£¨±£Áô£©
    BYTE            byDelBackupRecordRight; // É¾³ý´æµµÂ¼ÏñÈ¨ÏÞ0-ÎÞ 1-ÓÐ£¨±£Áô£©
    BYTE            bySetBackupVolumeRight; // ÉèÖÃ´æµµ¾íÈ¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byRecordPlayBackRight; // Â¼Ïñ»Ø·ÅÈ¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byLogDeleteRight; // ÈÕÖ¾Çå¿ÕÈ¨ÏÞ0-ÎÞ 1-ÓÐ£¨±£Áô£©
    BYTE            byLogDownloadRight; // ÈÕÖ¾ÏÂÔØÈ¨ÏÞ0-ÎÞ 1-ÓÐ£¨±£Áô£©
    BYTE            byAddUserRight; // Ìí¼ÓÓÃ»§È¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byDelUserRight; // É¾³ýÓÃ»§È¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byModUserRight; // ÐÞ¸ÄÓÃ»§È¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byAllocUserRight; // ÓÃ»§È¨ÏÞ·ÖÅäÈ¨ÏÞ0-ÎÞ 1-ÓÐ
    BYTE            byRes[128];
}NET_DVR_USER_RIGHT_CFG, *LPNET_DVR_USER_RIGHT_CFG;

typedef struct tagNET_DVR_MACHINE_MAX_NUM_CFG
{
    DWORD                dwSize;
    DWORD               dwMaxNum;         // ×î´ó±¸»úÊýÄ¿
    BYTE                   byRes[32];
}NET_DVR_MACHINE_MAX_NUM_CFG, *LPNETDVR_MACHINE_MAX_NUM_CFG;

//ÅäÖÃN+1Éè±¸¹¤×÷»úÄ£Ê½£¬NVRÐèÒªÕâ²½£¬CVR²»ÐèÒª
typedef struct tagNET_DVR_N_PLUS_ONE_WORK_MODE_CFG
{
    DWORD    dwSize ;
    BYTE    byWorkMode;        //0-¹¤×÷»ú 1-±¸»ú
    BYTE    byRes[127];       //±£Áô
}NET_DVR_N_PLUS_ONE_WORK_MODE_CFG, *LPNET_DVR_N_PLUS_ONE_WORK_MODE_CFG;

typedef struct tagNET_DVR_ADD_PARAM
{
    NET_DVR_IPADDR    struIP;        // Éè±¸IP
    char            szPassword[PASSWD_LEN];    //±¸»úÃÜÂë£¬Ðè¼òÒ×¼ÓÃÜ
    BYTE             byAddType;         // 0-£¨¹¤×÷»úÉÏ£©Ìí¼Ó±¸»ú£¬1-£¨±¸»úÉÏ£©Ìí¼Ó¹¤×÷»ú
    BYTE             byDisableBackup; //±¸·Ý¹¦ÄÜÊ¹ÄÜ¿ª¹Ø 0-¿ªÆô1-¹Ø±Õ CVRÄ¬ÈÏ¿ªÆô
}NET_DVR_ADD_PARAM, *LPNET_DVR_ADD_PARAM;

typedef struct tagNET_DVR_DEL_PARAM
{
    NET_DVR_IPADDR    struIP;        // Éè±¸IP
    BYTE             byDelType;     // 0-É¾³ýÖ¸¶¨µÄ»úÆ÷£¨±¸»ú»ò¹¤×÷»ú£©1-È«É¾
}NET_DVR_DEL_PARAM, *LPNET_DVR_DEL_PARAM;

typedef union tagNET_DVR_NPO_PARAM_UNION
{
    NET_DVR_ADD_PARAM    struAddParam;        //Ìí¼ÓÐÅÏ¢
    NET_DVR_DEL_PARAM     struDelParam;        //É¾³ýÐÅÏ¢
}NET_DVR_NPO_PARAM_UNION, *LPNET_DVR_NPO_PARAM_UNION;

// N+1Ä£Ê½Éè±¸²ÎÊý
typedef struct tagNET_DVR_N_PLUS_ONE_DEVICE_PARAM
{
    DWORD                    dwSize;
    NET_DVR_NPO_PARAM_UNION unionParam;
    BYTE                     byType;     /* 0-Ìí¼Ó£¬¶ÔÓ¦unionParamÖÐµÄstruAddParam 1-É¾³ý£¬¶ÔÓ¦unionParamÖÐµÄstruDelParam */
    BYTE                      byRes2[255];          // ±£Áô
}NET_DVR_N_PLUS_ONE_DEVICE_PARAM, *LPNET_DVR_N_PLUS_ONE_DEVICE_PARAM;

// Êý¾Ý»ØÇ¨
typedef struct tagNET_DVR_DATA_CALLBACK_CFG
{
    DWORD                dwSize;
    BYTE                   byEnable;     // 0-²»ÆôÓÃÊý¾Ý»ØÇ¨ 1-ÆôÓÃÊý¾Ý»ØÇ¨
    BYTE                   byDelData;     // µ±byEnableÎª1ÊÇÓÐÐ§ 0-²»É¾³ý±¸»úÂ¼ÏñÊý¾Ý 1-É¾³ý±¸»úÂ¼ÏñÊý¾Ý
    BYTE                   byRes[30];
}NET_DVR_DATA_CALLBACK_CFG, *LPNET_DVR_DATA_CALLBACK_CFG;

typedef struct tagNET_DVR_HD_STATUS
{
    DWORD     dwSize;
    BYTE     bySleepStatus;/*ÐÝÃß×´Ì¬0-²»ÐÝÃß 1-ÐÝÃß*/
    BYTE      byRes[127];
}NET_DVR_HD_STATUS, *LPNET_DVR_HD_STATUS;

typedef struct tagNET_DVR_RAID_BTS_CFG
{
    DWORD     dwSize;
    BYTE     bySpeed;    /*0-¸ßËÙ 1-ÖÐËÙ 2-µÍËÙ*/
    BYTE      byRes[127];
}NET_DVR_RAID_BTS_CFG, *LPNET_DVR_RAID_BTS_CFG;

typedef struct tagNET_DVR_LUN_CLONE
{
    DWORD                dwSize;
    DWORD                dwSrcLunID;        // Ô´LUN ID
    DWORD               dwDstLunID;     // Ä¿µÄLUN ID
    BYTE                   byRes[32];
}NET_DVR_LUN_CLONE, *LPNET_DVR_LUN_CLONE;

typedef struct tagNET_DVR_LUN_EXPAND
{
    DWORD                dwSize;
    DWORD                dwLunID;                    // LUN ID
    DWORD                dwHSize;                    // À©Õ¹µÄ´óÐ¡¸ß32Î»
    DWORD                dwLSize;                    // À©Õ¹µÄ´óÐ¡µÍ32Î»
    char                szArrayIDGroup[NAME_LEN];    // Ê¹ÓÃµÄÕóÁÐID×é£¬ÒÔ¶ººÅ¸ô¿ª£¬Îª¿ÕÔòÎªÄ¬ÈÏ
    char                   szNewLunName[MAX_NAMELEN];     // ÐÂLUNÃû
    BYTE                   byRes[32];
}NET_DVR_LUN_EXPAND, *LPNET_DVR_LUN_EXPAND;


typedef struct tagNET_DVR_DVR_NET_DISK_MODIFY
{
    DWORD                dwSize;
    char                szOldDvrNetDiskName[MAX_NAMELEN];        // Ô­DVRÍøÅÌ¹²ÏíÃû
    char                   szNewDvrNetDiskName[MAX_NAMELEN];     // ÐÂDVRÍøÅÌ¹²ÏíÃû
    NET_DVR_IPADDR        struWarrantIP;                        // ÐÂÊÚÈ¨µÄDVRÍøÅÌIP
    BYTE                   byRes[32];
}NET_DVR_DVR_NET_DISK_MODIFY, *LPNET_DVR_DVR_NET_DISK_MODIFY;


typedef struct tagNET_DVR_NAS_PARAM
{
    DWORD                dwSize;
    DWORD                dwLunID;        // LUN ID
    BYTE                   byRes[32];
}NET_DVR_NAS_PARAM, *LPNET_DVR_NAS_PARAM;

typedef struct tagNET_DVR_ISCSI_PARAM
{
    DWORD                dwSize;
    DWORD                dwTargetID;        // iSCSI·þÎñµÄTarget ID
    DWORD                dwLunID;        // LUN ID
    DWORD                dwAccessMode;    //¶ÁÐ´·½Ê½ 0-¶ÁÐ´ 1-Í¬²½¶ÁÐ´ 2-Ö»¶Á 3-ÖÇÄÜÖ»¶Á;
    NET_DVR_IPADDR        struClientIP;        // ¿Í»§¶ËIP£¬0.0.0.0ÎªËùÒÔIP
    BYTE                   byRes[32];
}NET_DVR_ISCSI_PARAM, *LPNET_DVR_ISCSI_PARAM;

typedef struct tagNET_DVR_FC_PARAM
{
    DWORD                dwSize;
    DWORD                dwStoreLunID;                    // ´æ´¢LUN ID
    DWORD                dwLogicLunID;                    // Âß¼­LUN ID£¬-1±íÊ¾×Ô¶¯Éú³É
    DWORD                dwHbaID;                        // ¹âÏËÍ¨µÀºÅ
    DWORD                dwAccessMode;                    //¶ÁÐ´·½Ê½ 0-¶ÁÐ´ 1-Í¬²½¶ÁÐ´ 2-Ö»¶Á 3-ÖÇÄÜÖ»¶Á;
    char                szClientWWWPN[NAME_LEN];         // ¿Í»§¹âÏË¿¨
    BYTE                   byRes[32];
}NET_DVR_FC_PARAM, *LPNET_DVR_FC_PARAM;


// Âß¼­¾í 60×Ö½Ú
typedef struct tagNET_DVR_LUN_PARAM
{
    DWORD        dwHCapacity;    // Âß¼­¾í´óÐ¡¸ß32Î»
    DWORD        dwLCapacity;    // Âß¼­¾í´óÐ¡µÍ32Î»
    char        szName[MAX_NAMELEN];     // Âß¼­¾íÃû³Æ
    DWORD        dwBlockSize;        // Âß¼­¾íµÄ×îÐ¡´æ´¢µ¥Ôª¿é´óÐ¡
    char        szArrayIDGroup[NAME_LEN];     //Ê¹ÓÃµÄÕóÁÐID×é£¬ÒÔ¶ººÅ¸ô¿ª£¬Îª¿ÕÔòÊ¹ÓÃÄ¬ÈÏÕóÁÐ
}NET_DVR_LUN_PARAM, *LPNET_DVR_LUN_PARAM;

typedef struct tagNET_DVR_DVR_PARAM_
{
    DWORD            dwHCapacity;    // DVRÍøÅÌ´óÐ¡¸ß32Î»
    DWORD            dwLCapacity;    // DVRÍøÅÌ´óÐ¡µÍ32Î»
    char                szName[MAX_NAMELEN];     // DVRÍøÅÌÃû³Æ
    DWORD            dwBlockSize;        // Âß¼­¾íµÄ×îÐ¡´æ´¢µ¥Ôª¿é´óÐ¡
    NET_DVR_IPADDR    struWarrantIP;        // ÊÚÈ¨µÄDVRÍøÅÌIP
    char            szArrayIDGroup[NAME_LEN];     //Ê¹ÓÃµÄÕóÁÐID×é£¬ÒÔ¶ººÅ¸ô¿ª£¬Îª¿ÕÔòÊ¹ÓÃÄ¬ÈÏÕóÁÐ
}NET_DVR_DVR_PARAM, *LPNET_DVR_DVR_PARAM;

typedef union tagNET_DVR_VD_UNION
{
    BYTE                        byUnionLen[256];      // ÁªºÏÌå´óÐ¡
    NET_DVR_OPERATE_VD_PARAM    struHikVDParam;        // ÐéÄâ´ÅÅÌ
    NET_DVR_LUN_PARAM            struLunParam;            // Âß¼­¾í
    NET_DVR_DVR_PARAM            struDvrParam;            // DVRÍøÅÌ
}NET_DVR_VD_UNION, *LPNET_DVR_VD_UNION;

typedef struct tagNET_DVR_OPERATE_VD_PARAM_EX
{
    BYTE                byVDType;    //ÐéÄâ´ÅÅÌÀàÐÍ£º0-Ë½ÓÐÐéÄâ´ÅÅÌ 1-Âß¼­¾í 2-DVRÍøÅÌ
    BYTE                byRes1[3];
    NET_DVR_VD_UNION     uVDParam;
    BYTE                byRes2[32];
}NET_DVR_OPERATE_VD_PARAM_EX, *LPNET_DVR_OPERATE_VD_PARAM_EX;

typedef struct tagNET_DVR_CVR_ALARM
{
    char            szFirstType[NAME_LEN];  //Ö÷ÀàÐÍ£¬²»ÄÜÎª¿Õ
    char            szFirstIndex[NAME_LEN];    //Ö÷ÀàÐÍ±àºÅ
    char            szSecondType[NAME_LEN];    //´ÎÀàÐÍ£¬¿ÉÒÔÎª¿Õ
    NET_DVR_TIME    struTime;        //±¨¾¯Ê±¼ä
    BYTE             byStatus;       //×´Ì¬ 0-Õý³£ ·Ç0-²»Õý³££¬²»Í¬ÀàÐÍÖµ±íÊ¾ÒâÒå²»Í¬£¬¼ûÏÂ±í
    BYTE            byAlarmLevel;         //±¨¾¯¼¶±ð
    BYTE            byRes1[2];
    char               szSecondIndex[NAME_LEN];  //´ÎÀàÐÍ±àºÅ£¬¿ÉÒÔÎª¿Õ
    char            szThirdType[NAME_LEN];  //µÚÈýÀàÐÍ£¬¿ÉÒÔÎª¿Õ
    char            szThirdIndex[NAME_LEN];    //µÚÈýÀàÐÍ±àºÅ
    char            szFourthType[NAME_LEN];  //µÚËÄÀàÐÍ£¬¿ÉÒÔÎª¿Õ
    char            szFourthIndex[NAME_LEN];    //µÚËÄÀàÐÍ±àºÅ
    BYTE              byRes2[92];  //±£Áô
}NET_DVR_CVR_ALARM, *LPNET_DVR_CVR_ALARM; 

typedef struct tagNET_DVR_WORKING_DEVICE_INFO
{
    NET_DVR_IPADDR    struIP;            //Éè±¸IP
    BYTE             byLinkStatus; //Á¬½Ó×´Ì¬ 0-Á¬½ÓÊ§°Ü1-Á¬½Ó³É¹¦
    BYTE             byWorkStatus; //¹¤×÷×´Ì¬ 0-Õý³£1-Òì³£
    BYTE             byBacupStatus; //±¸·Ý×´Ì¬0-²»ÔÚ±¸·Ý1-ÕýÔÚ±¸·Ý
    BYTE             bySyncProgress; //Â¼ÏñÍ¬²½½ø¶È£¬0±íÊ¾Î´¿ªÊ¼£¬100±íÊ¾Í¬²½Íê³É
    NET_DVR_TIME_EX    struSyncBeginTime;    //Í¬²½¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_EX    struSyncEndTime;        //Í¬²½½áÊøÊ±
    char            szSerialNumber[SERIALNO_LEN] ; //Éè±¸ÐòÁÐºÅ
    DWORD            dwSoftwareVersion ;        //Éè±¸Èí¼þ°æ±¾
    BYTE              byWorkingDeviceGUID[GUID_LEN]; //¹¤×÷»úGUID£¬·Ç×Ö·û´®£¬ÓÃÓÚ±¸»úÉÏËÑË÷¹¤×÷»úÂ¼Ïñ
    char            szDevTypeName[DEV_TYPE_NAME_LEN];        //Éè±¸ÀàÐÍÃû³Æ
    WORD            wDevType;        //Éè±¸ÀàÐÍÖµ
}NET_DVR_WORKING_DEVICE_INFO, *LPNET_DVR_WORKING_DEVICE_INFO;

typedef struct tagNET_DVR_REDUNDANT_DEVICE_INFO
{
    NET_DVR_IPADDR    struIP;            //Éè±¸IP
    BYTE             byWorkStatus;     //¹¤×÷×´Ì¬ 0-Õý³£1-Òì³£
    BYTE             byBackupStatus; //±¸·Ý×´Ì¬0-²»ÔÚ¼à¿Ø 1-ÕýÔÚ¼à¿Ø2-ÕýÔÚ±¸·ÝÖÐ2-ÕýÔÚÍ¬²½
    WORD            wBackupPort;    //±¸·Ý¶Ë¿Ú
}NET_DVR_REDUNDANT_DEVICE_INFO, *LPNET_DVR_REDUNDANT_DEVICE_INFO;

typedef union tagNET_DVR_NPO_DEV_INFO_UNION
{
    BYTE                             byUnionLen[512];            //ÁªºÏÌå³¤¶È
    NET_DVR_WORKING_DEVICE_INFO        struWorkingDeviceInfo;        //¹¤×÷»úÐÅÏ¢
    NET_DVR_REDUNDANT_DEVICE_INFO    struRedundantDeviceInfo;     //±¸»úÐÅÏ¢
}NET_DVR_NPO_DEV_INFO_UNION, *LPNET_DVR_NPO_DEV_INFO_UNION;


typedef struct tagNET_DVR_N_PLUS_ONE_DEVICE_INFO
{
    DWORD                        dwSize;
    NET_DVR_NPO_DEV_INFO_UNION    unionDevInfo;
    BYTE                        byType;    /*ÀàÐÍ 0-¹¤×÷»ú£¬¶ÔÓ¦unionDevInfoÖÐµÄstruWorkingDeviceInfo     1-±¸»ú£¬¶ÔÓ¦unionDevInfoÖÐµÄstruRedundantDeviceInfo*/
    BYTE                           byRes[127];    
}NET_DVR_N_PLUS_ONE_DEVICE_INFO, *LPNET_DVR_N_PLUS_ONE_DEVICE_INFO;

//ipcÉý¼¶²ÎÊý
typedef struct tagNET_DVR_UPGRADE_IPC_PARAM
{
    NET_DVR_STREAM_INFO    struStreamInfo[MAX_CHANNUM_V30];    // 64¸ö¼à¿Øµã
    char                  szFileName[260];                    // Éý¼¶ÎÄ¼þÃû
}NET_DVR_UPGRADE_IPC_PARAM, *LPNET_DVR_UPGRADE_IPC_PARAM;


typedef struct tagNET_DVR_UPGRADE_IPC_ERR_INFO_SINGLE
{
    NET_DVR_STREAM_INFO    struStreamInfo;     //¼à¿Øµã
    WORD                wErrCode;            //¶ÔÓ¦´íÎóÂë
    BYTE                byRes[30];          //±£Áô
}NET_DVR_UPGRADE_IPC_ERR_INFO_SINGLE, *LPNET_DVR_UPGRADE_IPC_ERR_INFO_SINGLE;

typedef struct tagNET_DVR_UPGRADE_IPC_ERR_INFO
{
    NET_DVR_UPGRADE_IPC_ERR_INFO_SINGLE struErrInfoSingle[MAX_CHANNUM_V30];
}NET_DVR_UPGRADE_IPC_ERR_INFO, *LPNET_DVR_UPGRADE_IPC_ERR_INFO;

//IPCÅäÖÃÎÄ¼þµ¼Èë
typedef struct tagNET_DVR_IPC_CFG_FILE_PARAM
{
    char          szFileName[260];                    // ÅäÖÃÎÄ¼þÃû
    BYTE        byRes[32];                        
}NET_DVR_IPC_CFG_FILE_PARAM, *LPNET_DVR_IPC_CFG_FILE_PARAM;

typedef struct tagNET_DVR_IPC_CFG_FILE_ERR_INFO_SINGLE
{
    WORD     wRow;       //³ö´íµÄÐÐ£¬0±íÊ¾Ã»³ö´í£¬1±íÊ¾µÚ1ÐÐ³ö´í£¬ÒÔ´ËÀàÍÆ
    WORD    wErrCode;    //´íÎóÂë
    BYTE    byRes[32];
}NET_DVR_IPC_CFG_FILE_ERR_INFO_SINGLE, *LPNET_DVR_IPC_CFG_FILE_ERR_INFO_SINGLE;

typedef struct tagNET_DVR_IPC_CFG_FILE_ERR_INFO
{
    NET_DVR_IPC_CFG_FILE_ERR_INFO_SINGLE     struErrInfoSingle[MAX_CHANNUM_V30];
}NET_DVR_IPC_CFG_FILE_ERR_INFO, *LPNET_DVR_IPC_CFG_FILE_ERR_INFO;

typedef struct tagNET_DVR_PTZ_PATTERN
{
    DWORD dwSize; 
    DWORD dwChannel; //Í¨µÀºÅ
    DWORD dwPatternCmd; //ÔÆÌ¨¹ì¼£²Ù×÷ÃüÁîÂë,Ïê¼ûÏÂÃæ¶¨Òå
    DWORD dwPatternID; //ÔÆÌ¨¹ì¼£ID£¨É¾³ýËùÓÐ¹ì¼£Ê±ÎÞÐ§£©
    BYTE  byRes[64]; 
}NET_DVR_PTZ_PATTERN, *LPNET_DVR_PTZ_PATTERN;

typedef struct tagNET_DVR_PTZ_PARKACTION_CFG
{
    DWORD dwSize;
    BYTE  byEnable; //ÊÇ·ñÆôÓÃ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE  byOneTouchSwitch;//Ò»¼ü¿ª¹Ø, 0-²»ÆôÓÃ£¬1-ÆôÓÃ (ºÍwActionType×éºÏÊ¹ÓÃ)
    BYTE  byRes1[2];
    DWORD dwParkTime; //ÊØÍûµÈ´ýÊ±¼ä£¬µ¥Î»s 
    WORD  wActionType; //ÊØÍû¶¯×÷ÀàÐÍ£¬0-×Ô¶¯É¨Ãè£¬1-Ö¡É¨Ãè£¬2-Ëæ»úÉ¨Ãè£¬3-Ñ²º½É¨Ãè£¬4-»¨ÑùÉ¨Ãè£¬5-Ô¤ÖÃµã£¬6-È«¾°É¨Ãè£¬7-´¹Ö±É¨Ãè
    WORD  wID; //IDºÅ£¨Ñ²º½É¨Ãè¡¢Ô¤ÖÃµã¡¢»¨ÑùÉ¨ÃèµÄID£©
    BYTE  byRes[128]; 
}NET_DVR_PTZ_PARKACTION_CFG, *LPNET_DVR_PTZ_PARKACTION_CFG;

typedef struct tagNET_DVR_PTZ_MANUALTRACE
{
    DWORD  dwSize; 
    DWORD  dwChannel; //Í¨µÀºÅ
    NET_VCA_POINT struPoint; //¶¨Î»×ø±ê
    BYTE byTrackType; //¸ú×ÙÀàÐÍ0¡¢·Ç×Ô¶¯È¡Ö¤(ÆÕÍ¨È¡Ö¤) 1¡¢¸ßËÙµÀÂ·¸ú×Ù 2¡¢³ÇÊÐµÀÂ·¸ú×Ù£¨ÊÖ¶¯¸ú×ÙÈ¡Ö¤£©3¡¢¾²Ì¬È¡Ö¤
    BYTE byLinkageType;//Áª¶¯¶¯×÷: 0-ÊÖ¶¯¸ú×Ù 1-Áª¶¯²»¸ú×Ù
    BYTE byRes[2];
    NET_VCA_POINT struPointEnd;/*¶¨Î»×ø±êÖÕµã*/
    NET_DVR_TIME_V30 struTime;//ÊÖ¶¯¸ú×Ù¶¨Î»£¬µ±Ç°Ê±¼ä¡£
    DWORD  dwSerialNo;//ÐòºÅ£»
    BYTE   byRes1[36];  
}NET_DVR_PTZ_MANUALTRACE, *LPNET_DVR_PTZ_MANUALTRACE;

typedef enum tagVQD_TYPE
{
    VQD_BLUR_FLAG     = 0x00000001,    //Í¼ÏñÄ£ºý
        VQD_LUMA_FLAG     = 0x00000002,//ÁÁ¶ÈÒì³£
        VQD_CHROMA_FLAG   = 0x00000004,//Í¼ÏñÆ«É«
        VQD_SNOW_FLAG     = 0x00000008,//Ñ©»¨¸ÉÈÅ
        VQD_STREAK_FLAG   = 0x00000010,//ÌõÎÆ¸ÉÈÅ
        VQD_FREEZE_FLAG   = 0x00000020,//»­Ãæ¶³½á
        VQD_SIGLOSE_FLAG  = 0x00000040,//ÐÅºÅ¶ªÊ§
        VQD_PTZ_FLAG      = 0x00000080//ÔÆÌ¨Ê§¿Ø
}VQD_TYPE;

typedef struct tagNET_DVR_VQD_LOOP_DIAGNOSE_CFG
{
    DWORD  dwSize ;        //½á¹¹Ìå´óÐ¡
    BYTE    byEnable;        // Õï¶ÏÊ¹ÄÜ 0 :¹Ø±Õ£¬¿ªÆô 1:¿ªÆô
    BYTE     byRes1[3] ;     //±£Áô
    BYTE    byVQDTypeEnable[32];     //VQDÕï¶ÏÄ£Ê½£¬0 --²»ÆôÓÃ 1--ÆôÓÃ  Ã¿ÖÖÕï¶ÏÀàÐÍ¶ÔÓ¦ÓÐÁéÃô¶È£¬ÁéÃô¶ÈµÄÏÂ±êÓëÕï¶ÏÀàÐÍµÄÏÂ±êÒ»ÖÂ
    /*Êý×é0 Í¼ÏñÄ£ºý     Êý×é1 ÁÁ¶ÈÒì³£ Êý×é2 Í¼ÏñÆ«É«*/
    /*Êý×é3 Ñ©»¨¸ÉÈÅ     Êý×é4 ÌõÎÆ¸ÉÈÅ Êý×é5 »­Ãæ¶³½á*/
    /*Êý×é6 ÐÅºÅ¶ªÊ§     Êý×é7 ÔÆÌ¨Ê§¿Ø*/    
    BYTE byThresholdValue[32] ;       //ãÐÖµ0~100£¬²»Í¬Õï¶ÏÄ£Ê½ÓÐ¸÷×Ô¶ÔÓ¦µÄãÐÖµ
    NET_DVR_HANDLEEXCEPTION_V40      struAlarmHandleType;   //±¨¾¯´¦Àí·½Ê½
    NET_DVR_SCHEDTIME   struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];
    NET_DVR_SCHEDTIME   struHolidayAlarmTime[MAX_TIMESEGMENT_V30];  //¼ÙÈÕ²¼·ÀÊ±¼ä¶Î 
    BYTE    byRes[324];      //±£Áô
}NET_DVR_VQD_LOOP_DIAGNOSE_CFG, *LPNET_DVR_VQD_LOOP_DIAGNOSE_CFG;


typedef struct tagNET_DVR_VQD_DIAGNOSE_EXCEPTION_INFO
{
    DWORD  dwChannelNO;   //Í¨µÀºÅ
    DWORD  dwVQDType;     // VQDÕï¶ÏÀàÐÍ    
    NET_DVR_TIME struDiagnoseTime;    //Õï¶ÏÊ±¼ä
    BYTE     byScoreValue;       //·ÖÊýÖµ £¬°Ù·ÖÖÆ
    BYTE     byRes[27];
}NET_DVR_VQD_DIAGNOSE_EXCEPTION_INFO,*LPNET_DVR_VQD_DIAGNOSE_EXCEPTION_INFO;


typedef struct tagNET_DVR_VQD_DIAGNOSE_INFO
{
    DWORD  dwSize ;        //½á¹¹Ìå´óÐ¡
    NET_DVR_VQD_DIAGNOSE_EXCEPTION_INFO  struVQDDiagnoseExceptionInfo ; //Õï¶ÏÒì³£ÐÅÏ¢½á¹¹Ìå
}NET_DVR_VQD_DIAGNOSE_INFO, *LPNET_DVR_VQD_DIAGNOSE_INFO;

typedef struct tagNET_DVR_DEC_RESOURCE_LIST
{
    DWORD dwSize;
    BYTE  byDecStatus[MAX_SUBSYSTEM_NUM_V40/*120*/]; 
    //½âÂë×ÊÔ´×´Ì¬ÁÐ±í£¬byDecStatus[i]±íÊ¾²ÛÎ»ºÅiµÄ×ÓÏµÍ³×´Ì¬£¬0-ÎÞÐ§£¬1-¿ÕÏÐ£¬2-ÆÕÍ¨½âÂë(°üÀ¨ÆÕÍ¨½âÂëÉÏÇ½ºÍ´óÆÁÖ÷´ÓÆÁ)£¬3-ÖÇÄÜ½âÂë
    BYTE  byRes[32];
}NET_DVR_DEC_RESOURCE_LIST,*LPNET_DVR_DEC_RESOURCE_LIST;

typedef struct tagNET_DVR_DEC_APPLICANT_INFO
{
    DWORD dwSize;
    DWORD dwDecResource; /*ÉêÇëµÄ½âÂë×ÊÔ´£¬ÒÔ·Ö±æÂÊºâÁ¿£¬0-DCIF 1-CIF, 2-QCIF, 3-4CIF, 4-2CIF 5£¨±£Áô£©,
                         6-QVGA(320*240), 7-QQVGA(160*120), 16-VGA£¨640*480£©, 17-UXGA£¨1600*1200£©, 18-SVGA £¨800*600£©,
                         19-HD720p£¨1280*720£©,20-XVGA,  21-HD900p, 27-HD1080i, 28-2560*1920, 29-1600*304, 30-2048*1536, 
                         31-2448*2048,32-2448*1200,33-2448*800,34-XGA£¨1024*768£©£¬35-SXGA£¨1280*1024£©,36-WD1(960*576/960*480),
    37-1080i,38-WXGA(1440*900),39-HD_F(1920*1080/1280*720),40-HD_H(1920*540/1280*360),41-HD_Q(960*540/630*360)*/
    DWORD  dwChannel; //ÖÇÄÜÍ¨µÀºÅ
    NET_DVR_IPADDR  struIP;   //ÉêÇëÕßIP
    WORD  wPort;         //ÉêÇëÕß¶Ë¿ÚºÅ(ÖÇÄÜ·ÖÎöÒÇÍ¨Ñ¶¶Ë¿Ú)
    BYTE  byRes[18];
}NET_DVR_DEC_APPLICANT_INFO,*LPNET_DVR_DEC_APPLICANT_INFO;

typedef struct tagNET_DVR_DEC_RESOURCE_INFO
{
    DWORD dwSize;
    DWORD dwSlotNum;  //²ÛÎ»ºÅ£¬´Ë²ÎÊý×öÊÍ·Å½âÂë×ÊÔ´ºÍµÇÂ½½âÂë×ÓÏµÍ³Ð£ÑéÓÃ
    NET_DVR_IPADDR struIP; //½âÂë×ÓÏµÍ³IPµØÖ·
    WORD  wPort;      //¶Ë¿ÚºÅ
    BYTE  byRes1[2];
    DWORD dwDecChan;  //½âÂëÍ¨µÀºÅ
    BYTE  sUserName[NAME_LEN];    /* ½âÂë×ÓÏµÍ³µÇÂ½ÕÊºÅ */
    BYTE  sPassword[PASSWD_LEN];    /* ½âÂë×ÓÏµÍ³µÇÂ½ÃÜÂë */
    BYTE  byRes2[32];
}NET_DVR_DEC_RESOURCE_INFO,*LPNET_DVR_DEC_RESOURCE_INFO;

typedef struct tagNET_DVR_DEC_CHAN_COND
{
    DWORD dwSize;
    DWORD dwSlotNum; //²ÛÎ»ºÅ,ÌîÉêÇë½âÂë×ÊÔ´Ê±·µ»ØµÄ²ÛÎ»ºÅ
    DWORD dwDecChan; //½âÂëÍ¨µÀºÅ
    BYTE  byRes[16];
}NET_DVR_DEC_CHAN_COND,*LPNET_DVR_DEC_CHAN_COND;

typedef struct tagNET_DVR_DEC_YUV_CFG
{
    DWORD dwSize;
    BYTE  byEnable;     //¹ØÁªÊ¹ÄÜ£¬0-ÎÞ¹ØÁª£¬1-¹ØÁª
    BYTE  byRes1[3];
    //byEnable = 1Ê±ÒÔÏÂ²ÎÊýÓÐÐ§
    DWORD dwYUVAddress[3]; //YUVÊä³öµØÖ·
    WORD  wWidth;       //YUVÊä³ö¿í
    WORD  wHeight;      //YUVÊä³ö¸ß
    BYTE  byEnableAudio;  //Ê¹ÄÜÒôÆµ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE  byRes2[3];
    DWORD dwAudioAddr;  //ÒôÆµÊä³öµØÖ·
    BYTE  byRes3[16];
}NET_DVR_DEC_YUV_CFG,*LPNET_DVR_DEC_YUV_CFG;

typedef struct tagNET_DVR_INPUT_INFO
{
    DWORD        dwSize;
    BYTE        byChanType;        //½ÓÈëÀàÐÍ£¬1-±¾µØÄ£ÄâÁ¿Í¨µÀ£¬2-±¾µØ¿ª¹ØÁ¿Í¨µÀ£¬3-485Í¨µÀ£¬4-ÍøÂçÍ¨µÀ
    BYTE        byRes1[3];
    DWORD        dwChanNo;        //Í¨µÀºÅ
    DWORD        dwSubChanNo;    //²ÛÎ»ºÅ
    DWORD        dwVariableNo;    //±äÁ¿±àºÅ
    BYTE        byRes2[60];
}NET_DVR_INPUT_INFO, *LPNET_DVR_INPUT_INFO;

typedef struct tagNET_DVR_ALARM_VARIABLE_CFG
{
    DWORD        dwSize; 
    WORD        wVariableIndex;        //±äÁ¿±àºÅ£¬Ö»ÄÜ»ñÈ¡
    WORD        wVariableType;        //±äÁ¿ÀàÐÍ 1-Ä£ÄâÁ¿ 2-¿ª¹ØÁ¿£¬Ö»ÄÜ»ñÈ¡
    BYTE        sDescribe[NAME_LEN];//±äÁ¿ÃèÊö
    BYTE        byLimitLineType;    //±¨¾¯ÏÞÖµÅäÖÃÀàÐÍ£¬0-²»Ö§³Ö±¨¾¯ÏÞÖµÅäÖÃ£¬1-Á½ÏÞÖµÅäÖÃ£¨¼´ÉÏÏÞ¡¢ÏÂÏÞ£©£¬2-ËÄÏÞÖµÅäÖÃ
    BYTE        byRes[31];            //±£Áô
}NET_DVR_ALARM_VARIABLE_CFG, *LPNET_DVR_ALARM_VARIABLE_CFG;


//Ä£ÄâÁ¿µãºÅÏà¹Ø²ÎÊý
typedef struct tagNET_DVR_ALARM_SENSOR_POINT_CFG
{
    int           nMeasureHigh;            // Á¿³ÌÉÏÏÞ Íâ²¿Öµ*1000´«Èë ¿ÉÒÔÎª¸ºÊý
    int           nMeasureLow;            // Á¿³ÌÏÂÏÞ Íâ²¿Öµ*1000´«Èë
    BYTE        byAlarmMode;            // ±¨¾¯Ä£Ê½£¬ÎåÖÖ£¬-HHHH¡¢-HHHL¡¢-HHLL¡¢HLLL¡¢-LLLL£¬
    // ¼´£º1111£¨ÉÏÉÏÉÏÉÏ£©£¬1110£¨ÉÏÉÏÉÏÏÂ£©£¬1100£¨ÉÏÉÏÏÂÏÂ£©£¬1000(ÉÏÏÂÏÂÏÂ)£¬0000(ÏÂÏÂÏÂÏÂ)
    BYTE         byRes1[3];
    int            nAlarmValue[4];            // ±¨¾¯ÏÞ
    DWORD          dwOsdCfg;                // Ä£ÄâÁ¿×Ö·ûµþ¼Ó£¬°´Î»±íÊ¾0-15¶ÔÓ¦ÊÓÆµÍ¨µÀ1-16
    DWORD        dwSensitive;            // ÁéÃô¶È·¶Î§10~1000¡£Íâ²¿ float*1000¡£ ÁéÃô¶È±íÊ¾µ±ÊµÊ±ÖµµÄ±ä»¯³¬¹ýÁéÃô¶ÈµÄ·¶Î§Ê±£¬Ôò±íÊ¾ÊµÊ±Öµ·¢ÉúÁË±ä»¯£¬·ñÔòÈÏÎªÃ»ÓÐ·¢Éú±ä»¯¡£Èç£ºÁéÃô¶ÈÎª0.1£¬Ôò±íÊ¾Ç°ºó¼ì²âµÄÁ½¸öÖµÖ®²î´óÓÚ0.1Ê±£¬ÔòÈÏÎªÊý¾Ý·¢Éú±ä»¯£¬ÐèÒªÉÏ´«¡£Èç¹ûÎª1£¬Ôò±íÊ¾±ä»¯³¬¹ý1Ê±ÉÏ±¨¡£
    DWORD        dwIPChanOsd;            // Êý×ÖÍ¨µÀµþ¼ÓÄ£ÄâÁ¿×Ö·û£¬°´Î»±íÊ¾£¬0~31¶ÔÓ¦Êý×ÖÍ¨µÀ1-32
    BYTE        byRes[24];
}NET_DVR_ALARM_SENSOR_POINT_CFG,*LPNET_DVR_ALARM_SENSOR_POINT_CFG;

typedef struct tagNET_DVR_ALARM_SWITCH_POINT_CFG
{
    BYTE        byRes[64];
}NET_DVR_ALARM_SWITCH_POINT_CFG,*LPNET_DVR_ALARM_SWITCH_POINT_CFG;

typedef union tagNET_DVR_ALARM_POINT_PARAM_UNION
{
    BYTE    byLength[64]; //ÁªºÏÌå³¤¶ÈÎª64
    NET_DVR_ALARM_SENSOR_POINT_CFG struSensor;    //Ä£ÄâÁ¿Ïà¹Ø²ÎÊý
    NET_DVR_ALARM_SWITCH_POINT_CFG struSwitch;    //¿ª¹ØÁ¿Ïà¹Ø²ÎÊý
}NET_DVR_ALARM_POINT_PARAM_UNION,*LPNET_DVR_ALARM_POINT_PARAM_UNION;

//µãºÅÐÅÏ¢
typedef struct tagNET_DVR_ALARM_POINT_CFG
{
    DWORD        dwSize;
    DWORD        dwPointNo;            //µãºÅ
    BYTE        sPointDescribe[NAME_LEN];        //µãºÅÃèÊö
    NET_DVR_ALARM_POINT_PARAM_UNION struPointParam; //µ±±äÁ¿ÀàÐÍÎªÄ£ÄâÁ¿Ê±£¬Ê¹ÓÃ½á¹¹ÌåstruSensor£¬µ±±äÁ¿ÀàÐÍÎª¿ª¹ØÁ¿Ê±£¬Ê¹ÓÃ½á¹¹ÌåstruSwitch
    BYTE        byPointType;        //µãºÅÀàÐÍ£¬1-Ä£ÄâÁ¿£¬2-¿ª¹ØÁ¿
    BYTE        byChanType;        //½ÓÈëÀàÐÍ£¬1-±¾µØÄ£ÄâÁ¿Í¨µÀ£¬2-±¾µØ¿ª¹ØÁ¿Í¨µÀ£¬3-485Í¨µÀ£¬4-ÍøÂçÍ¨µÀ
    BYTE        byRes1[2];
    DWORD        dwChanNo;        //Í¨µÀºÅ
    DWORD        dwSubChanNo;    //²ÛÎ»ºÅ
    DWORD        dwVariableNo;    //±äÁ¿±àºÅ
    BYTE        byRes[16];            //±£Áô
}NET_DVR_ALARM_POINT_CFG, *LPNET_DVR_ALARM_POINT_CFG;

//ÀúÊ·Êý¾Ý²éÑ¯
typedef struct _NET_DVR_SEARCH_CONDITION
{
    DWORD        dwSize;
    BYTE        byMajorType;    //²éÑ¯·½Ê½£¬1-È«²¿£¬2-°´Ê±¼ä£¬ 3-°´ÀàÐÍ£¬4-Ê±¼ä+ÀàÐÍ
    BYTE        byMinorType;    //1-µãºÅ£¬2-Í¨µÀ+²ÛÎ»+±äÁ¿ºÅ
    BYTE        byRes1[2];
    NET_DVR_TIME struStartTime;    //ÆðÊ¼Ê±¼ä
    NET_DVR_TIME struStopTime;    //½áÊøÊ±¼ä
    BYTE        byChanType;        //Í¨µÀÀàÐÍ£¬1-Ä£ÄâÁ¿£¬2-¿ª¹ØÁ¿£¬3-485Í¨µÀ£¬0xff±íÊ¾ÎÞÐ§
    BYTE        byRes2[3];
    DWORD        dwChanNo;        //Í¨µÀºÅ£¬´Ó1¿ªÊ¼£¬0xffffffff±íÊ¾ÎÞÐ§
    DWORD        dwSubChanNo;    //²ÛÎ»ºÅ£¬´Ó1¿ªÊ¼£¬0xffffffff±íÊ¾ÎÞÐ§
    DWORD        dwVariableNo;    //±äÁ¿ºÅ£¬´Ó1¿ªÊ¼£¬0xffffffff±íÊ¾ÎÞÐ§
    DWORD        dwPointNo;    //µãºÅ£¬0xffffffff±íÊ¾ÎÞÐ§
    BYTE          byRes3[32];        //±£Áô
}NET_DVR_SEARCH_CONDITION, *LPNET_DVR_SEARCH_CONDITION;

typedef struct _NET_DVR_HISTORY_DATA
{
    DWORD        dwSize;
    NET_DVR_TIME struTime;    //Ê±¼äµã
    BYTE        byChanType;        //Í¨µÀÀàÐÍ£¬1-Ä£ÄâÁ¿£¬2-¿ª¹ØÁ¿£¬3-485Í¨µÀ£¬0xff±íÊ¾ÎÞÐ§
    BYTE        byRes1[3];
    DWORD        dwChanNo;        //Í¨µÀºÅ£¬´Ó1¿ªÊ¼£¬0xffffffff±íÊ¾ÎÞÐ§
    DWORD        dwSubChanNo;    //²ÛÎ»ºÅ£¬´Ó1¿ªÊ¼£¬0xffffffff±íÊ¾ÎÞÐ§
    DWORD        dwVariableNo;    //±äÁ¿ºÅ£¬´Ó1¿ªÊ¼£¬0xffffffff±íÊ¾ÎÞÐ§
    DWORD        dwPointNo;        //µãºÅ£¬0xffffffff±íÊ¾ÎÞÐ§
    int            iData;            //ÀúÊ·Êý¾Ý
    BYTE        byDataType;        //0-Õý³£Êý¾Ý£¬1-Ô½ÉÏÏÞÊý¾Ý£¬2-Ô½ÏÂÏÞÊý¾Ý
    BYTE        byRes2[31];
}NET_DVR_HISTORY_DATA, *LPNET_DVR_HISTORY_DATA;

typedef struct tagNET_DVR_ALARMHOST_ALARM_MODE_CFG
{
    DWORD    dwSize;
    BYTE    byDataUploadMode;    //1-°´Í¨µÀÉÏ´«£¬2-°´¼à²âµãÉÏ´«
    BYTE    byRes[31];
}NET_DVR_ALARMHOST_ALARM_MODE_CFG,*LPNET_DVR_ALARMHOST_ALARM_MODE_CFG;


typedef struct tagNET_DVR_ALARMHOST_POINT_VALUE
{
    BYTE    byChanType;        //½ÓÈëÀàÐÍ£¬1-±¾µØÄ£ÄâÁ¿Í¨µÀ£¬2-±¾µØ¿ª¹ØÁ¿Í¨µÀ£¬3-485Í¨µÀ£¬4-ÍøÂçÍ¨µÀ
    BYTE    byPointType;    //µãÀàÐÍ£¬1-Ò£²â£¨Ä£ÄâÁ¿£©£¬2-Ò£ÐÅ£¨¿ª¹ØÁ¿£©
    BYTE    byRes1[2];        //±£Áô
    DWORD     dwChanNo;        //485Í¨µÀºÅ£¬0xffffffff±íÊ¾ÎÞÐ§£¬Í¨µÀÀàÐÍÎª1Ê±£º±íÊ¾±¾µØÄ£ÄâÁ¿Í¨µÀºÅ£¬Í¨µÀÀàÐÍÎª2Ê±±íÊ¾±¾µØ¿ª¹ØÁ¿Í¨µÀºÅ£¬Í¨µÀÀàÐÍÎª3Ê±±íÊ¾485Í¨µÀºÅ¡£
    DWORD    dwSubChanNo;    //²ÛÎ»ºÅ£¬ 0xffffffff±íÊ¾ÎÞÐ§£¬Í¨µÀÀàÐÍÎª3Ê±Ê¹ÓÃ
    DWORD    dwVariableNo;    //±äÁ¿±àºÅ£¬0xffffffff±íÊ¾ÎÞÐ§
    DWORD     dwPointNo;        //104µãºÅ£¬0xffffffff±íÊ¾ÎÞÐ§
    int        iValue;            //¼à²âµãµÄÖµ
    BYTE    byRes[16];
}NET_DVR_ALARMHOST_POINT_VALUE,*LPNET_DVR_ALARMHOST_POINT_VALUE;

typedef union tagNET_DVR_ALARMHOST_DATA_UNION
{
    BYTE    byLength[40];
    NET_DVR_ALARMHOST_POINT_VALUE struPointValue;    //¼à²âµãÊµÊ±Êý¾Ý
}NET_DVR_ALARMHOST_DATA_UNION,*LPNET_DVR_ALARMHOST_DATA_UNION;

typedef struct tagNET_DVR_ALARMHOST_DATA_UPLOAD
{
    DWORD        dwSize;
    BYTE        byDataType;        //Êý¾ÝÀàÐÍ£¬1-¼à²âµãÊµÊ±Êý¾ÝÉÏ´«
    BYTE        byRes1[3];
    NET_DVR_ALARMHOST_DATA_UNION struAlarmData;
    BYTE        byRes2[32];
}NET_DVR_ALARMHOST_DATA_UPLOAD, *LPNET_DVR_ALARMHOST_DATA_UPLOAD;

typedef struct  tagNET_DVR_INPUTVOLUME
{
    DWORD  dwSize;     /*½á¹¹³¤¶È*/
    BYTE   byAudioInputChan;//ÒôÆµÊäÈëÍ¨µÀºÅ 
    BYTE   byRes[63];        // ±£Áô×Ö½Ú
}NET_DVR_INPUTVOLUME, *LPNET_DVR_INPUTVOLUME;

typedef struct tagNET_DVR_AUDIOOUT_VOLUME
{
    DWORD  dwSize;
    BYTE byAudioOutVolume;// Êä³öÒôÁ¿µÈ¼¶£º¹éÒ»»¯Îª0-100£»
    BYTE byRes[63];
}NET_DVR_AUDIOOUT_VOLUME,*LPNET_DVR_AUDIOOUT_VOLUME;

typedef struct tagNET_DVR_FUZZY_UPGRADE
{
    DWORD  dwSize;
    char  sUpgradeInfo[MAX_UPGRADE_INFO_LEN];
    BYTE  byRes[64];
}NET_DVR_FUZZY_UPGRADE,*LPNET_DVR_FUZZY_UPGRADE;

typedef struct tagNET_DVR_RS485_WORK_MODE
{
    DWORD dwSize;
    BYTE  byWorkMode; //¹¤×÷Ä£Ê½£¬0-¿ØÖÆÌ¨£¬1-Ë½ÓÐÍ¸Ã÷Í¨µÀ£¬2-Í¸Ã÷Í¨µÀ
    BYTE  byRes[31];
}NET_DVR_RS485_WORK_MODE, *LPNET_DVR_RS485_WORK_MODE;

typedef struct tagNET_DVR_TRANSPARENT_CLIENT_SINGLE
{
    BYTE byEnable; //Ê¹ÄÜÍ¸Ã÷Í¨µÀ£¬0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE byRes1[3];
    NET_DVR_IPADDR struIP; //Ô¶³ÌÉè±¸IPµØÖ·
    WORD wPort; //Ô¶³ÌÉè±¸¶Ë¿Ú
    BYTE byRes2[18];    
}NET_DVR_TRANSPARENT_CLIENT_SINGLE, *LPNET_DVR_TRANSPARENT_CLIENT_SINGLE;

typedef struct tagNET_DVR_TRANSPARENT_SERVER_SINGLE
{
    BYTE byEnable; //Ê¹ÄÜÍ¸Ã÷Í¨µÀ£¬0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE byRes1[3];
    NET_DVR_IPADDR struIP; //ÔÊÐí½ÓÈëµÄÔ¶³ÌÉè±¸IP    
    BYTE byRes2[16];    
}NET_DVR_TRANSPARENT_SERVER_SINGLE, *LPNET_DVR_TRANSPARENT_SERVER_SINGLE;

typedef struct tagNET_DVR_TRANSPARENT_CLIENT_MODE
{
    NET_DVR_TRANSPARENT_CLIENT_SINGLE struClientSingle[MAX_TRANSPARENT_CHAN_NUM];
    BYTE byRes[320];
}NET_DVR_TRANSPARENT_CLIENT_MODE, *LPNET_DVR_TRANSPARENT_CLIENT_MODE;

typedef struct tagNET_DVR_TRANSPARENT_SERVER_MODE
{
    WORD wPort; //±¾µØ¼àÌýµÄ¶Ë¿ÚºÅ£¬ºÍRS485¿ÚÒ»Ò»¶ÔÓ¦
    BYTE byRes1[2];
    NET_DVR_TRANSPARENT_SERVER_SINGLE struServerSingle[MAX_TRANSPARENT_ACCESS_NUM];
    BYTE byRes2[332];    
}NET_DVR_TRANSPARENT_SERVER_MODE, *LPNET_DVR_TRANSPARENT_SERVER_MODE;

typedef union tagNET_DVR_TRANSPARENT_CHAN_WORK_MODE_UNION
{
    BYTE byRes[512];
    NET_DVR_TRANSPARENT_CLIENT_MODE struClientMode;  //¿Í»§¶ËÄ£Ê½²ÎÊý
    NET_DVR_TRANSPARENT_SERVER_MODE struServerMode; //·þÎñÆ÷Ä£Ê½²ÎÊý
}NET_DVR_TRANSPARENT_CHAN_WORK_MODE_UNION, *LPNET_DVR_TRANSPARENT_CHAN_WORK_MODE_UNION;

typedef struct tagNET_DVR_TRANSPARENT_CHAN_CFG
{
    DWORD dwSize;    
    BYTE  byWorkMode; //¹¤×÷Ä£Ê½£¬1-¿Í»§¶ËÄ£Ê½£¬2-·þÎñÆ÷Ä£Ê½
    BYTE  byRes[3];
    NET_DVR_TRANSPARENT_CHAN_WORK_MODE_UNION struTransparentPara;
}NET_DVR_TRANSPARENT_CHAN_CFG, *LPNET_DVR_TRANSPARENT_CHAN_CFG;

typedef struct tagNET_DVR_NAKED_DATA_INFO
{
    char   sSocketIP[128];
    WORD   wSocktPort;
    BYTE   byRes[258];
}NET_DVR_NAKED_DATA_INFO, *LPNET_DVR_NAKED_DATA_INFO;

typedef enum tagNAKED_DATA_TYPE
{
    NAKED_DATA_TYPE_NOT_DEFINED = 0, //Î´¶¨Òå
        NAKED_DATA_TYPE_POS_INFO    //½ÓÊÕµÄÊÇPosÐÅÏ¢
}NAKED_DATA_TYPE;


typedef struct tagNET_DVR_NAKED_DATA_PARAM
{
    WORD  wPort;           //IP¶Ë¿ÚºÅ£¬¶ÔÓÚPosÐÅÏ¢½ÓÊÕ£¬¸ÃÖµÎª0£¬ÔòÊ¹ÓÃÄ¬ÈÏ¶Ë¿Ú7050
    BYTE  byRes[130];      //±£Áô×Ö½Ú
}NET_DVR_NAKED_DATA_PARAM, *LPNET_DVR_NAKED_DATA_PARAM;

#define UPLOAD_POS_INFO     1001  //ÉÏ´«PosÐÅÏ¢

typedef struct tagNET_DVR_POS_INFO
{
    NET_DVR_STRUCTHEAD     struVerHead;  //°æ±¾Í·
    DWORD dwChannelNum;          //Í¨µÀºÅ
    BYTE  byRes[60]; 
}NET_DVR_POS_INFO, *LPNET_DVR_POS_INFO;


#define MAX_IGNORE_STRING_NUM        4
#define FILTERRULE_NUM              4
#define MAX_POS_FILTER_DATA_LEN     128

typedef struct tagNET_DVR_POS_OSD_REGION
{
    NET_VCA_POINT   struStart;   //Æðµã×ø±ê
    NET_VCA_POINT   struEnd;    //ÖÕµã×ø±ê
}NET_DVR_POS_OSD_REGION, *LPNET_DVR_POS_OSD_REGION;


typedef struct 
{
    DWORD dwDelayTime;                /*delay time(5-3600s)*/
    BYTE  byPrevOsd;                   /*overlay osd on preview*/
    BYTE  byRes1[3];                    /*preserve*/
    NET_DVR_POS_OSD_REGION  struOsdPosInfo;          /*overlay osd rect info*/
    BYTE  byRes[64];                   /*preserve*/
}NET_DVR_POS_ACTION, *LPNET_DVR_POS_ACTION;

typedef struct
{
    BYTE sData[MAX_POS_FILTER_DATA_LEN];/*½»Ò×¿ªÊ¼±êÖ¾£¬Ä¿Ç°×î´óÎª32£¬Ö»ÓÐanyCharacterÎª·ñÊ±²ÅÉúÐ§*/
    BYTE byExclusive;    //ÊÇ·ñ°üº¬±êÖ¾±¾Éí 0-°üº¬ 1-²»°üº¬
    BYTE byFlagType;    //±êÖ¾ÀàÐÍ£º0-×Ö·û´®£»1-Ê®Áù½øÖÆ
    BYTE byRes[2];        /*±£Áô*/
}NET_DVR_GENERIC_START, *LPNET_DVR_GENERIC_START;

typedef struct
{
    BYTE  sData[MAX_POS_FILTER_DATA_LEN];/*½»Ò×½áÊø±êÖ¾£¬Ä¿Ç°×î´óÎª32*/
    BYTE  byExclusive;    //ÊÇ·ñ°üº¬±êÖ¾±¾Éí 0-°üº¬ 1-²»°üº¬
    BYTE  byFlagType;    //±êÖ¾ÀàÐÍ£º0-×Ö·û´®£»1-Ê®Áù½øÖÆ
    BYTE  byRes[6];
} NET_DVR_GENERIC_END, *LPNET_DVR_GENERIC_END;

typedef struct
{
    BYTE  sData[MAX_POS_FILTER_DATA_LEN];/*Êý¾Ý±êÖ¾£¬Ä¿Ç°×î´óÎª32*/
    BYTE  byFlagType;    //±êÖ¾ÀàÐÍ£º0-×Ö·û´®£»1-Ê®Áù½øÖÆ
    BYTE  byRes[3];
}NET_DVR_GENERIC_DATA_CFG, *LPNET_DVR_GENERIC_DATA_CFG;

typedef struct
{
    BYTE sData[MAX_POS_FILTER_DATA_LEN];/*ºöÂÔµÄ×Ö·û£¬Ä¿Ç°×î´óÎª32*/
}NET_DVR_IGNORE_STRING, *LPNET_DVR_IGNORE_STRING;

typedef struct
{
    BYTE  byCaseSensitive;/*ÊÇ·ñÇø·Ö´óÐ¡Ð´£¬0->²»Çø·Ö£¬1->Çø·Ö*/
    BYTE  byRes1[7];   
    NET_DVR_GENERIC_START struTransactionStart;/*½»Ò×¿ªÊ¼*/
    NET_DVR_GENERIC_END struTransactionEnd;/*½»Ò×½áÊø*/
    NET_DVR_GENERIC_DATA_CFG struLineDeli;/*ÐÐ¼ä¸ô·û*/
    NET_DVR_IGNORE_STRING struIgnoreString[MAX_IGNORE_STRING_NUM];/*ºöÂÔ×Ö·û´®£¬Ä¿Ç°Îª4¸ö*/
    BYTE byRes[40];    //±£Áô
}NET_DVR_POS_GENERIC, *LPNET_DVR_GENERIC;

typedef struct
{
    DWORD    dwPosAddr;        //posµØÖ·±àºÅ
    BYTE    byRes[948];
}NET_DVR_POS_AVE, *LPNET_DVR_AVE;

#define SERIAL_NUM_LEN 8
typedef struct tagNET_DVR_POS_NUCLEUS/*size 952byte*/
{
    char   szEmployeeNo[SERIAL_NUM_LEN];//Ô±¹¤±àºÅ£¬Èç1£¨±¸×¢£º±êÌâe<employee#>£©
    char   szTerminalNo[SERIAL_NUM_LEN];// Pos»ú±àºÅ£¬Èç1£¨±¸×¢£º±êÌât<terminal#>£©
    char   szShiftNo[SERIAL_NUM_LEN]; //ÂÖ°à£¨±¸×¢£º±êÌâs<shift#>£©
    BYTE      byRes[928];
}NET_DVR_POS_NUCLEUS, *LPNET_DVR_POS_NUCLEUS;
typedef  union _NET_DVR_POS_PROTOCOL_UNION
{
    BYTE byLenth[952];   //ÓÃÓÚ±íÊ¾ÁªºÏÌå³¤¶È£¬ÎÞÊµ¼ÊÒâÒå
    NET_DVR_POS_GENERIC struGeneric;
    NET_DVR_POS_AVE struAve;
    NET_DVR_POS_NUCLEUS struNUCLEUS;
}NET_DVR_POS_PROTOCOL_UNION,*LPNET_DVR_POS_PROTOCOL_UNION;

typedef enum tagNET_DVR_CHARSET_ENUM  //±àÂë·½Ê½
{
    ENUM_UTF8 =0,
        ENUM_GB2312,
        ENUM_LATIN1,
        ENUM_LATIN2,
        ENUM_LATIN3,
        ENUM_LATIN4,
        ENUM_CYRILLIC,
        ENUM_ARABIC,
        ENUM_GREEK,
        ENUM_HEBREW,
        ENUM_TURKISH,
        ENUM_NORDIC,
        ENUM_THAI,
        ENUM_LATIN7,
        ENUM_LATIN8,
        ENUM_LATIN9,
        ENUM_LATIN10,
        ENUM_CENTRAL_EUROPEAN,
        ENUM_CYRILLIC_SCRIPT,
        ENUM_HEBREW_DOS862
}NET_DVR_CHARSET_ENUM, *LPNET_DVR_CHARSET_ENUM;


typedef struct
{
    DWORD   dwSize;
    BYTE     byEnable;            //¹æÔòÊ¹ÄÜ
    BYTE     byCharSetType;      //±àÂë·½Ê½0-UTF-8,1-GB2312
    BYTE    byRes1;   //±£Áô
    BYTE    byProtocolType;//Ð­ÒéÀàÐÍ£¬1->generic textÐ­Òé(universal Protocol), 2->AVE VSI-ADD     3->AVE Vnet,4-EPSON(¸ÃÀàÐÍÎÞÐè´¦ÀíposÐ­Òé²ÎÊý), 5-NUCLEUS
    NET_DVR_POS_PROTOCOL_UNION uPosProtocol;   //POSÐ­Òé 
    BYTE    byRes[32];    //±£Áô
}NET_DVR_POS_FILTER_CFG, *LPNET_DVR_POS_FILTER_CFG;

typedef struct  tagNET_DVR_NET_SNIFF /*ÍøÂçÕìÌý½á¹¹Ìå 312byte*/
{
    BYTE       byEnableSourcePort;       //ÊÇ·ñÆôÓÃ¶ÔÊý¾ÝÔ´¶Ë¿Ú¹ýÂË  0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE       byEnableDestAddr;        //ÊÇ·ñÆôÓÃ¶ÔÄ¿±êIPµØÖ·½øÐÐ¹ýÂË 0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE       byEnableDestPort;         //ÊÇ·ñÆôÓÃ¶ÔÄ¿±êµØÖ·µÄ¶Ë¿ÚºÅ½øÐÐ¹ýÂË
    BYTE       byRes1;                 //±£Áô
    BYTE       bySourceIpAddr[MAX_DOMAIN_NAME];                //Êý¾ÝÔ´µØÖ· 
    BYTE       byDestinationIpAddr[MAX_DOMAIN_NAME];        //Êý¾Ý·¢ËÍÄ¿±êµØÖ· 
    WORD          wSourcePort;               //Êý¾ÝÔ´¶Ë¿ÚºÅ
    WORD          wDestinationPort;           //Êý¾Ý·¢ËÍÄ¿±ê¶Ë¿ÚºÅ
    BYTE       byRes[16];                 //±£Áô
}NET_DVR_NET_SNIFF, *LPNET_DVR_NET_SNIFF;

typedef struct
{
    WORD  wNetPort;  /*device net port*/
    BYTE  byRes[2];
}NET_DVR_NET_RECEIVE, *LPNET_DVR_NET_RECEIVE;

typedef struct tagNET_DVR_MONITOR_INFO  /*¼àÌý*/
{
    WORD  wPort;       //¼àÌý¶Ë¿ÚºÅ
    BYTE   byRes1[2];
    NET_DVR_IPADDR  struRestrictRemoteIP;//±£ÁôÏÞÖÆÔ¶³Ì·ÃÎÊIP
    BYTE   byRes[164];     
}NET_DVR_MONITOR_INFO, *LPNET_DVR_MONITOR_INFO;

typedef struct tagNET_DVR_ADDRESS
{
    NET_DVR_IPADDR struIP; //IPµØÖ·
    WORD wPort;    //¶Ë¿ÚºÅ
    BYTE byRes[2];
}NET_DVR_ADDRESS,*LPNET_DVR_ADDRESS;

typedef union tagNET_DVR_POS_CONNECTMODE_UNION
{
    BYTE                       byLen[312];      //ÁªºÏÌå³¤¶È£¬ÎÞÊµ¼ÊÒâÒå
    NET_DVR_NET_RECEIVE     struNetRecv;     //ÍøÂç½ÓÊÜÄ£Ê½
    NET_DVR_MONITOR_INFO     struTcpMonitor;    //ÍøÂç¼àÌýÄ£Ê½
    NET_DVR_SINGLE_RS232     struRS232;        //´®¿Ú·½Ê½
    NET_DVR_MONITOR_INFO     struUdpMonitor;     //ÍøÂç¼àÌý-UDPÄ£Ê½
    NET_DVR_NET_SNIFF          struSniff;          //ÍøÂçÕìÌýÄ£Ê½
    NET_DVR_ADDRESS            struMcast;          //¶à²¥Ä£Ê½
    NET_DVR_USB_RS232         struUSBRS232;    //USB×ª´®¿Ú·½Ê½
}NET_DVR_POS_CONNECTMODE_UNION, *LPNET_DVR_POS_CONNECTMODE_UNION;


//DVRÓëPOSÁ¬½Ó·½Ê½ÅäÖÃ½á¹¹Ìå
typedef struct tagNET_DVR_CONNECT_POS_CFG
{
    DWORD   dwSize;               //½á¹¹Ìå´óÐ¡
    BYTE     byConnectMode;    //Á¬½ÓÄ£Ê½:0->ÍøÂç¼àÌý(TCP),1->ÍøÂç½ÓÊÜ,2->´®¿Ú½ÓÊÕ3-ÍøÂç¼àÌý£¨UDP£©,4-ÍøÂçÕìÌý,5-¶à²¥
    BYTE     byRes1[3];         //±£Áô
    NET_DVR_POS_CONNECTMODE_UNION uPosConnMode;    //Á¬½ÓÄ£Ê½ÅäÖÃ
    BYTE  byRes[64];
}NET_DVR_CONNECT_POS_CFG, *LPNET_DVR_CONNECT_POS_CFG;

typedef struct  tagNET_DVR_CHAN_FILTER_CFG
{
    DWORD                  dwSize;              //½á¹¹Ìå´óÐ¡
    BYTE                  byFilterID;           //POS¹ýÂË¹æÔòID
    BYTE                 byFontSize;         //×ÖºÅ´óÐ¡£¬0-- 8*16  1--16*32  2--32*64 
    BYTE                  byShowPosInfo;        //ÂëÁ÷ÖÐÊÇ·ñµþ¼ÓposÐÅÏ¢
    BYTE                byOverlayMode;      //µþ¼Ó·½Ê½£¬0-¹öÆÁ£¬1-·­Ò³
    DWORD                 dwDelayTime;        /*delay time(5-3600s)*/
    NET_DVR_POS_OSD_REGION  struOsdPosInfo;          /*overlay osd rect info*/
    NET_DVR_RGB_COLOR        struOsdColor;           //OSDÑÕÉ«
    NET_DVR_SCHEDTIME        struAlarmSched[MAX_DAYS][MAX_TIMESEGMENT_V30];
    NET_DVR_HANDLEEXCEPTION_V40 struHandleException;  //Òì³£´¦Àí·½Ê½
    //Òì³£´¦Àí·½Ê½ÖÐ±¨¾¯Êä³öºÅÓë×éºÅ°ó¶¨£¬¼´×éºÅÎª0Ê±£¬±íÊ¾¹ØÁªµÄ±¨¾¯Êä³öºÅ·¶Î§Îª1-64£¬µ±×éºÅÎª1Ê±£¬±íÊ¾¹ØÁªµÄ±¨¾¯Êä³öºÅ·¶Î§Îª65-128£¬ ÇÒÊÇ×éÄÚ½ô´ÕÅÅÁÐ£¬Èç¹ûÓöµ½0xffffffff±íÊ¾±¾×é µ±Ç°µÄ¼°×éÄÚºóÐøµÄ±¨¾¯³öºÅÎÞÐ§
    DWORD                  dwMaxRelRecordChanNum ;  //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀÊý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD                  dwRelRecordChanNum ;     //±¾×éÄÚ¹ØÁªµÄÂ¼ÏóÍ¨µÀÊý 
    DWORD                  dwRelRecordChan[MAX_CHANNUM_V30];//´¥·¢Â¼ÏñÍ¨µÀ
    //¹ØÁªµÄÂ¼ÏñÍ¨µÀºÅÓë×éºÅ°ó¶¨£¬¼´×éºÅÎª0Ê±£¬±íÊ¾¹ØÁªµÄÍ¨µÀºÅ·¶Î§Îª1-64£¬µ±×éºÅÎª1Ê±£¬±íÊ¾¹ØÁªµÄÍ¨µÀºÅ·¶Î§Îª65-128£¬ ÇÒÊÇ×éÄÚ½ô´ÕÅÅÁÐ£¬Èç¹ûÓöµ½0xffffffff±íÊ¾±¾×éÄÚºóÐøµÄ¹ØÁªÍ¨µÀºÅÎÞÐ§
    DWORD                 dwTimeOut;        /*time Out(5-3600s)*/ //Êý¾Ý³¬Ê±Ö¸ÔÚ¶à³¤Ê±¼ä½ÓÊÕ²»µ½POSÊý¾Ý¼´ÅÐ¶¨Ò»´ÎÊý¾Ý°üµÄ½áÊø¡£
    BYTE              byRes[60];    //±£Áô
}NET_DVR_CHAN_FILTER_CFG, *LPNET_DVR_CHAN_FILTER_CFG; 

#define        MAX_LAN_ENCODE_LEN        32    //ÓïÑÔ±àÂë¸ñÊ½×î´ó³¤¶È
typedef struct    tagNET_DVR_DEVICE_LAN_ENCODE
{    
    DWORD        dwSize;        
    BYTE        byLanEncode[MAX_LAN_ENCODE_LEN];    //Éè±¸ÓïÑÔ±àÂë¸ñÊ½
    BYTE        byRes[28];
}NET_DVR_DEVICE_LAN_ENCODE, *LPNET_DVR_DEVICE_LAN_ENCODE;

typedef struct tagNET_DVR_SCENECHANGE_DETECTION
{
    DWORD    dwSize;
    BYTE    byEnable; //Ê¹ÄÜ£¬ÊÇ·ñ¿ªÆô 0~²»¿ªÆô,1~¿ªÆô
    BYTE    bySensitiveLevel;// 1-100£¬Ä¬ÈÏ50£¬ÁéÃô¶ÈÔ½¸ß£¬Ô½ÈÝÒ×±¨¾¯
    BYTE    byRes1[2];
    NET_DVR_SCHEDTIME struAlarmSched[MAX_DAYS][MAX_TIMESEGMENT_V30];
    NET_DVR_HANDLEEXCEPTION_V40 struHandleException;  //Òì³£´¦Àí·½Ê½
    DWORD    dwMaxRelRecordChanNum ;  //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD    dwRelRecordChanNum ;     //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý Êµ¼ÊÖ§³ÖµÄÊýÁ¿
    DWORD    dwRelRecordChan[MAX_CHANNUM_V30];//´¥·¢Â¼ÏñÍ¨µÀ
    //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ£¨ËÄ×Ö½ÚµÄÍ¨µÀºÅ£¬³õÊ¼ÖµÊÇ 0xffffffff£©
    BYTE    byRes2[128];
}NET_DVR_SCENECHANGE_DETECTION,*LPNET_DVR_SCENECHANGE_DETECTION;

typedef struct tagNET_DVR_SCENECHANGE_DETECTION_RESULT
{
    DWORD            dwSize;          // ½á¹¹´óÐ¡
    NET_VCA_DEV_INFO struDevInfo;    //Ç°¶ËÉè±¸ÐÅÏ¢
    BYTE             byRes[128];      // ±£Áô×Ö½Ú
}NET_DVR_SCENECHANGE_DETECTION_RESULT,*LPNET_DVR_SCENECHANGE_DETECTION_RESULT;
typedef enum
{
    PREVIEW_MOD = 0,
        ALARM_MOD,
        PLAYBACK_MOD,
        MAX_TYPE
}MODULE_TYPE;

//³µÎ»ÐÅÏ¢
typedef struct tagNET_DVR_PARK_INFO
{ 
    char          sPlateNo[MAX_PlATE_NO_LEN];             //³µÅÆºÅÂë 
    char          sParkIndex[MAX_PlATE_NO_LEN];        //³µÎ»±àºÅ
    BYTE          byRes[64];
}NET_DVR_PARK_INFO, *LPNET_DVR_PARK_INFO;


typedef struct tagNET_DVR_CROSSLINE_ALARM
{
    DWORD                 dwSize;
    NET_VCA_DEV_INFO     struDevInfo;
    NET_DVR_TIME_EX      struTriggerTime;/*´¥·¢Ê±¼ä*/
    NET_DVR_PARK_INFO    struParkInfo; //³µÎ»ÐÅÏ¢
    BYTE                 byRes1[128];
}NET_DVR_CROSSLINE_ALARM, *LPNET_DVR_CROSSLINE_ALARM;

typedef struct tagNET_DVR_STREAM_SRC_CFG
{
    DWORD dwSize;
    NET_DVR_STREAM_INFO struStreamID; //Á÷ÐÅÏ¢
    NET_DVR_STREAM_SRC_INFO struStreamSrcInfo; //Á÷Ô´ÐÅÏ¢
}NET_DVR_STREAM_SRC_CFG,*LPNET_DVR_STREAM_SRC_CFG;

typedef struct tagNET_DVR_ENCODEINFO
{
    BYTE  byFormatType; //·â×°ÀàÐÍ£¬1-ÂãÁ÷£¬2-RTP·â×°£¬3-PS·â×°£¬4-TS·â×°£¬5-Ë½ÓÐ£¬6-FLV£¬7-ASF£¬8-3GP, 9-RTP+PS£¨¹ú±ê£ºGB28181£©£¬0xff-ÎÞÐ§
    BYTE  byVideoEncType;//ÊÓÆµ±àÂëÀàÐÍ£¬0-Ë½ÓÐ264£¬1-±ê×¼h264£¬2-±ê×¼mpeg4£¬7-M-JPEG£¬0xff-ÎÞÐ§
    WORD  wWidth; //Í¼Ïñ¿í¶È
    WORD  wHeight; //Í¼Ïñ¸ß¶È
    BYTE  byRes1[2];
    DWORD dwVideoBitrate;     //ÊÓÆµÂëÂÊ,µ¥Î»Kbps
    DWORD dwVideoFrameRate;    //Ö¡ÂÊ£¬200Æð±íÊ¾Ð¡ÓÚ1Ö¡/ÃëµÄ×´Ì¬£¬ÆäÓàÖµ±íÊ¾Êµ¼ÊÖ¡ÂÊÖµ,200-1/2,201-1/4,202-1/8,203-1/16
    BYTE  byAudioEncType;//ÒôÆµ±àÂëÀàÐÍ£¬0-G722£¬1-G711_U£¬2-G711_A£¬5-MPEG2,6-G726£¬7-AAC,0xff-ÎÞÐ§    
    BYTE  byRes2[15];
}NET_DVR_ENCODEINFO, *LPNET_DVR_ENCODEINFO;


typedef struct tagNET_DVR_TRANSSTATUS
{
    DWORD dwSize;
    NET_DVR_STREAM_INFO struStreamInfo;//Á÷ID¡¢×ªÂëÍ¨µÀÐÅÏ¢    
    BYTE  byMode;//×ªÂëÄ£Ê½£¬1-Ö÷¶¯×ªÂë£¬2-±»¶¯×ªÂë
    BYTE  byLinkNums;//Á¬½ÓÊý
    BYTE  byPassiveTransMode; //±»¶¯×ªÂëÄ£Ê½£¬0-ÎÞÐ§£¬1-ÊµÊ±Á÷£¬2-ÎÄ¼þÁ÷
    BYTE  byRes;
    NET_DVR_ADDRESS struDstIPInfo[MAX_LINK];//Ä¿±ê×ªÂëipµØÖ·
    BYTE  byTransResource;//ËùÊ¹ÓÃµÄ×ªÂë×ÊÔ´Êý£¬°´D1¼ÆËã
    BYTE  byRes1[15];
    NET_DVR_ENCODEINFO struSrcEncodeInfo;//Ô´±àÂëÐÅÏ¢
    NET_DVR_ENCODEINFO struDstEncodeInfo[MAX_LINK /*6*/];//Ä¿±ê±àÂëÐÅÏ¢
    BYTE  byRes2[36];
}NET_DVR_TRANSSTATUS, *LPNET_DVR_TRANSSTATUS;

typedef struct tagNET_DVR_TRANSDEVICE_STATUS
{
    DWORD dwSize;
    DWORD dwTotalResource;//È«²¿×ªÂë×ÊÔ´£¬ÒÔD1Îªµ¥Î»¼ÆËã
    DWORD dwIdleResource;//Ê£Óà×ªÂë×ÊÔ´£¬ÒÔD1Îªµ¥Î»¼ÆËã
    BYTE  byCpuLoad;//CPUÀûÓÃÂÊ
    BYTE  byRes[67];
}NET_DVR_TRANSDEVICE_STATUS, *LPNET_DVR_TRANSDEVICE_STATUS;

typedef struct tagNET_DVR_DEV_WORK_MODE
{
    DWORD dwSize;
    BYTE  byWorkMode; //1-Í¨µÀÄ£Ê½£¬2-Á÷IDÄ£Ê½
    BYTE  byDisplayMode; //0-ÆÕÍ¨£¬1-³©ÏÔ
    BYTE  byEnableVcaDec; //ÊÇ·ñÆôÓÃÖÇÄÜ½âÂë£¬0-²»ÆôÓÃ£¬·Ç0-ÆôÓÃ
    BYTE  byRes[61];
}NET_DVR_DEV_WORK_MODE,*LPNET_DVR_DEV_WORK_MODE;


typedef struct tagNET_DVR_PASSIVETRANSINFO 
{
    DWORD dwSize;
    BYTE byStreamType;// ÂëÁ÷ÀàÐÍ£¬0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷
    BYTE byLinkMode;// 0£ºTCP·½Ê½,1£ºUDP·½Ê½£¨±£Áô£©
    BYTE byPassiveTransMode; //±»¶¯×ªÂëÄ£Ê½£¬1-ÊµÊ±Á÷£¬2-ÎÄ¼þÁ÷
    BYTE byRes1[5];    
    BYTE byDataType;//»º³åÇøÀàÐÍ£¬1-SDP£¬2-ÂëÁ÷Í·
    BYTE byRes2;
    WORD wDataLength;//Êý¾Ý³¤¶È
    char *pBuffer;//»º³åÇø
    BYTE byRes3[32]; // ±£Áô
}NET_DVR_PASSIVETRANSINFO, *LPNET_DVR_PASSIVETRANSINFO;

typedef struct tagNET_DVR_BASEMAP_CONTROL_CFG
{
    DWORD dwSize;
    BYTE  byEnable;        //ÊÇ·ñÏÔÊ¾£¬1-ÏÔÊ¾£¬0-Òþ²Ø    
    BYTE  byBaseMapType;    //µ×Í¼ÀàÐÍ£¬1-Í¼Æ¬µ×Í¼£¬2-³¬¸ßÇåÊäÈëµ×Í¼
    BYTE  byRes1[2];
    DWORD dwBaseMapNo;     //µ×Í¼ºÅ£»µ×Í¼ÀàÐÍÎª1Ê±£¬´Ë²ÎÊýÎªÍ¼Æ¬ÐòºÅ£¬µ×Í¼ÀàÐÍÎª2Ê±´Ë²ÎÊýÎª³¬¸ßÇåÊäÈë×ÓÏµÍ³ÊäÈë¿ÚºÅ£¨1×Ö½Ú¾ØÕóºÅ+1×Ö½Ú×Ó°åºÅ+1×Ö½ÚÊäÈë¿ÚºÅ+1×Ö½Ú±£Áô£©
    BYTE  byRes2[64];
}NET_DVR_BASEMAP_CONTROL_CFG,*LPNET_DVR_BASEMAP_CONTROL_CFG;

typedef struct tagNET_DVR_VIRTUAL_SCREEN_CFG
{
    DWORD dwSize;
    DWORD dwResolution; //·Ö±æÂÊ£¬MAKE_RESOLUTIONºê¶¨ÒåµÄÖµ£¬´ÓµçÊÓÇ½ÄÜÁ¦»ñÈ¡Ö§³ÖµÄ·Ö±æÂÊÖµ
    BYTE byRes[64];
}NET_DVR_VIRTUAL_SCREEN_CFG, *LPNET_DVR_VIRTUAL_SCREEN_CFG;

typedef struct tagNET_DVR_BASEMAP_WINCFG
{
    DWORD dwSize;
    BYTE  byEnable;
    BYTE  byRes1[7];
    NET_DVR_RECTCFG_EX struWinPosition;//Ä¿µÄ´°¿Ú(Ïà¶ÔÏÔÊ¾Ç½),µ×Í¼´°¿ÚµÄÆðÊ¼×ø±êºÍ´óÐ¡±ØÐëÊÇ»ù×¼×ø±êµÄÕûÊý±¶
    BYTE  byRes2[64];
}NET_DVR_BASEMAP_WINCFG, *LPNET_DVR_BASEMAP_WINCFG;

typedef struct tagNET_DVR_BASEMAP_PIC_INFO
{
    DWORD  dwSize;
    BYTE   sPicName[NAME_LEN];//Í¼Æ¬Ãû³Æ
    BYTE   byUsed; //ÊÇ·ñÒÑ´æÔÚ£¬0-²»´æÔÚ£¬1-´æÔÚ
    BYTE   byRes[31];
}NET_DVR_BASEMAP_PIC_INFO,*LPNET_DVR_BASEMAP_PIC_INFO;

typedef struct tagNET_DVR_MATRIX_LOGO_INFO
{
    DWORD  dwSize;
    DWORD  dwLogoSize;//LOGO´óÐ¡£¬°üÀ¨BMPµÄÎÄ¼þÍ·£¬Í¼Æ¬´óÐ¡³¬ÏÞ£¬ÏÞ100K£¬¸ßºÍ¿íÐëÊÇ32µÄ±¶Êý
    BYTE   byRes[32];
}NET_DVR_MATRIX_LOGO_INFO,*LPNET_DVR_MATRIX_LOGO_INFO;

typedef struct tagNET_DVR_MATRIX_LOGO_CFG
{
    DWORD  dwSize;
    BYTE   byExist;  //logoÊÇ·ñ´æÔÚ£¬0-²»´æÔÚ£¬1-´æÔÚ£¨´Ë²ÎÊýÖ»ÄÜ»ñÈ¡£©
    BYTE   byRes1[3];
    DWORD  dwLogoSize;//LOGO´óÐ¡£¬°üÀ¨BMPµÄÎÄ¼þÍ·(´Ë²ÎÊýÖ»ÄÜ»ñÈ¡)
    BYTE   byLogoName[NAME_LEN];  //logoÃû³Æ
    DWORD  dwLogoNo;    //logo±àºÅ£¨»ñÈ¡ËùÓÐlogoÐÅÏ¢Ê±ÓÐÐ§£©
    BYTE   byRes2[28];
}NET_DVR_MATRIX_LOGO_CFG,*LPNET_DVR_MATRIX_LOGO_CFG;

typedef struct tagNET_DVR_WIN_LOGO_CFG
{
    DWORD  dwSize;
    DWORD  dwLogoNo; //logoºÅ
    BYTE   byEnable; //logoÊÇ·ñÏÔÊ¾£¬1-ÏÔÊ¾£¬0-Òþ²Ø
    BYTE   byRes1[3];    
    DWORD  dwCoordinateX;    //Í¼Æ¬ÏÔÊ¾ÇøÓòX×ø±ê
    DWORD  dwCoordinateY;    //Í¼Æ¬ÏÔÊ¾ÇøÓòY×ø±ê    
    BYTE   byFlash;  //ÊÇ·ñÉÁË¸1-ÉÁË¸£¬0-²»ÉÁË¸
    BYTE   byTranslucent; //ÊÇ·ñ°ëÍ¸Ã÷1-°ëÍ¸Ã÷£¬0-²»°ëÍ¸Ã÷
    BYTE   byRes2[34];                //±£Áô    
}NET_DVR_WIN_LOGO_CFG,*LPNET_DVR_WIN_LOGO_CFG;    


typedef struct tagNET_DVR_BIG_SCREEN_AUDIO_CFG
{
    DWORD dwSize;
    DWORD dwWinIndex; //´°¿ÚºÅ£¬´Ó1¿ªÊ¼£¬0±íÊ¾µ×Í¼
    BYTE  byEnable; //ÊÇ·ñ´ò¿ªÒôÆµ£¬1-´ò¿ªÒôÆµ£¬0-¹Ø±ÕÒôÆµ
    BYTE  byRes[31];
}NET_DVR_BIG_SCREEN_AUDIO_CFG, *LPNET_DVR_BIG_SCREEN_AUDIO_CFG;

typedef struct tagNET_DVR_WIN_ZOOM_STATUS
{
    DWORD dwSize;
    BYTE  byZoomStatus;  //0-Õý³£×´Ì¬£¬1-·Å´ó×´Ì¬
    BYTE  byRes1[3];
    NET_DVR_POINT_FRAME struPointFrame; //·Å´óÇøÓò£¬µ±byZoomStatusÎª1Ê±ÓÐÐ§
    BYTE  byRes2[32];
}NET_DVR_WIN_ZOOM_STATUS,NET_DVR_WIN_ZOOM_STATUS;

typedef struct tagNET_DVR_RESUME_INITRACKPOS_CFG
{
    DWORD           dwSize;          // ½á¹¹´óÐ¡
    DWORD           dwChannel;;     // Í¨µÀºÅ
    BYTE            byRes[16];      // ±£Áô×Ö½Ú
}NET_DVR_RESUME_INITRACKPOS_CFG,*LPNET_DVR_RESUME_INITRACKPOS_CFG;

typedef  struct tagNet_DVR_TEST_SELFCHECK_RESULT   
{
    DWORD   dwSize;     
    DWORD   dwChannel;      //Í¨µÀºÅ            
    BYTE    bySelfCheckStatus;   //×Ô¼ì×´Ì¬Öµ 0-Î´¿ªÊ¼£¬1-³É¹¦£¬2-Ê§°Ü£¬3-×Ô¼ìÖÐ
    BYTE    byRes[23];   //±£Áô×Ö½Ú
}NET_DVR_TEST_SELFCHECK_RESULT, *LPNET_DVR_TEST_SELECHECK_RESULT;


typedef struct  tagNET_DVR_TEST_COMMAND
{
    DWORD   dwSize;     
    DWORD   dwChannel;       //Í¨µÀºÅ
    BYTE    byTestCommand[MAX_TEST_COMMAND_NUM]; 
    //0-±íÊ¾²»¿ªÆô²âÊÔ£¬ 1-±íÊ¾¿ªÆô²âÊÔ
    //Êý×éÏÂ±ê0 ¿ªÆôÀÏ»¯²âÊÔ³ÌÐò                               
    //Êý×éÏÂ±ê1 ºìÍâµÆ½øÈë²âÊÔÄ£Ê½
    //Êý×éÏÂ±ê2 ICRÀÏ»¯²âÊÔ£¬0±íÊ¾¹Ø±Õ£¬1±íÊ¾¿ªÆô£¬¿ÉÒÔÓëbit0 ×éºÏ£¬Èç0000_0001(Ö»¿ªÆôÑ²º½ÀÏ»¯)¡¢0000_0101£¨Í¬Ê±¿ªÆôÑ²º½ºÍICRÀÏ»¯£©¡¢0000_0100£¨Ö»¿ªÆôICRÀÏ»¯£© 
    //Êý×éÏÂ±ê3 -Çò»úpt×Ô½ÃÕý¹¦ÄÜ×´Ì¬£¬0±íÊ¾Çò»ú×Ô½ÃÕý¹¦ÄÜÎ´Çå³ý£¬1±íÊ¾Çò»ú×Ô½ÃÕý¹¦ÄÜÒÑÇå³ý
    //Êý×éÏÂ±ê4 »¨ÑùÉ¨Ãè²âÊÔ³ÌÐò£¬0±íÊ¾¹Ø±Õ£¬1±íÊ¾¿ªÆô
    //Êý×éÏÂ±ê5 µç×ÓÂÞÅÌÐ£Õý³ÌÐò£¬0±íÊ¾¹Ø±Õ£¬1±íÊ¾¿ªÆô
    WORD    wICRIntervalTime;//icr¼ä¸ôÊ±¼ä£¨byTestCommand Êý×éÏÂ±í2ÄÚµÄÖµÎª1Ê±£¬ICR¿ª¹Ø¼ä¸ôÊ±¼ä£¬µ¥Î»Ãë£©
    BYTE      byElectronicCompassState;//ÂÞÅÌ×´Ì¬·µ»Ø£¬ 0-Õý³££¬ 1-²»Õý³£
    BYTE    byRes1[1];
    float     fDeviceTem; //Éè±¸»úÐ¾ÎÂ¶È£¬¾«È·¶È0.001
    BYTE    byRes[12];      //±£Áô×Ö½Ú 
}NET_DVR_TEST_COMMAND, *LPNET_DVR_TEST_COMMAND;

typedef struct  tagNET_DVR_AGING_TRICK_SCAN
{
    DWORD   dwSize;
    DWORD   dwChannel;       //Í¨µÀºÅ
    BYTE     byAging; // ±íÊ¾ÉèÖÃµÄ²ÎÊý ÎªÀÏ»¯Ç°¹¤¾ß»¹ÊÇÀÏ»¯ºó¹¤¾ß£¬ 0-ÀÏ»¯Ç°¡¢1-ÀÏ»¯ºó 
    BYTE     byWriteReadEnalbe; //¶ÁÐ´Ö¸ÁîÊ¹ÄÜ£¬0-ÉèÖÃ¶ÁÖ¸Áî£¬ 1-ÉèÖÃÐ´Ö¸Áî
    BYTE     byRes[126];      //±£Áô×Ö½Ú
}NET_DVR_AGING_TRICK_SCAN, *LPNET_DVR_AGING_TRICK_SCAN;

#define IPC_PARAM_AGING_TRICK_SCAN        0x00000001 //Çå³ý»¨ÑùÉ¨Ãè²ÎÊýÉèÖÃ
typedef struct tagNET_DVR_IPC_PARAM_TYPE
{
    DWORD dwSize;
    DWORD dwParamType; //²ÎÊýÀàÐÍ£¬°´Î»±íÊ¾    
    // #define IPC_PARAM_AGING_TRICK_SCAN       0x00000001 //Çå³ý»¨ÑùÉ¨Ãè²ÎÊýÉèÖÃ
    BYTE byRes[32];
}NET_DVR_IPC_PARAM_TYPE, *LPNET_DVR_IPC_PARAM_TYPE;

typedef struct  tagNET_DVR_ECCENTRIC_CORRECT_STATE
{
    DWORD   dwSize;
    DWORD   dwChannel;       //Í¨µÀºÅ
    BYTE     byEccentricCorrectState; // Æ«ÐÄ½ÃÕý×´Ì¬£¬0-Ð£ÕýÊ§°Ü¡¢1-Ð£Õý³É¹¦¡¢2-Ð£ÕýÖÐ
    BYTE     byRes[127];      //±£Áô×Ö½Ú
}NET_DVR_ECCENTRIC_CORRECT_STATE, *LPNET_DVR_ECCENTRIC_CORRECT_STATE;



#define MAX_DEVMODULE_NUM 8
typedef struct tagNET_DVR_TEST_DEVMODULE_CFG
{
    DWORD   dwSize;
    DWORD   dwChannel;      //Í¨µÀºÅ
    BYTE    byDevFanModuleType[MAX_DEVMODULE_NUM]; //²âÊÔµÄÉè±¸ÀàÐÍ
    // 0-²»¿ªÆô²âÊÔ,1-¿ªÆô²âÊÔ
    // bit0-²âÊÔ·çÉÈ1
    // bit1-²âÊÔ·çÉÈ2
    BYTE    byDevHeaterModuleType[MAX_DEVMODULE_NUM]; //²âÊÔµÄÉè±¸ÀàÐÍ
    // 0-²»¿ªÆô²âÊÔ,1-¿ªÆô²âÊÔ
    // bit0-²âÊÔ¼ÓÈÈÆ÷1
    // bit1-²âÊÔ¼ÓÈÈÆ÷2
    BYTE    byRes[22];      //±£Áô×Ö½Ú
}NET_DVR_TEST_DEVMODULE_CFG, *LPNET_DVR_TEST_DEVMODULE_CFG;

//³öÈë¿ÚÌõ¼þ
typedef struct tagNET_DVR_BARRIERGATE_COND
{
    BYTE  byLaneNo;//³µµÀºÅ£¨0-±íÊ¾ÎÞÐ§Öµ(Éè±¸ÐèÒª×öÓÐÐ§ÖµÅÐ¶Ï),1-³µµÀ1£©
    BYTE  byRes[3];
}NET_DVR_BARRIERGATE_COND,*LPNET_DVR_BARRIERGATE_COND;

typedef struct tagNET_DVR_VEHICLE_CONTROL
{
    BYTE   byGateOperateType;//0-ÎÞ²Ù×÷,1-¿ªµÀÕ¢
    BYTE   byRes1 ;
    WORD   wAlarmOperateType;//0-ÎÞ²Ù×÷,bit0-¼ÌµçÆ÷Êä³ö±¨¾¯ bit1-²¼·ÀÉÏ´«±¨¾¯ bit3-¸æ¾¯Ö÷»úÉÏ´«£¨¿É¸´Ñ¡£©(0-±íÊ¾¹Ø£¬1-±íÊ¾¿ª)
    BYTE   byRes2[8];
}NET_DVR_VEHICLE_CONTROL,*LPNET_DVR_VEHICLE_CONTROL;

typedef struct tagNET_DVR_RELAY_PARAM
{
    BYTE   byAccessDevInfo;//0-²»½ÓÈëÉè±¸£¬1-¿ªµÀÕ¢¡¢2-¹ØµÀÕ¢¡¢3-Í£µÀÕ¢¡¢4-±¨¾¯ÐÅºÅ¡¢5-³£ÁÁµÆ
    BYTE   byRes[3];
}NET_DVR_RELAY_PARAM,*LPNET_DVR_RELAY_PARAM;

//³öÈë¿ÚÅäÖÃ
typedef struct tagNET_DVR_ENTRANCE_CFG
{
    DWORD   dwSize;
    BYTE    byEnable ;// Ê¹ÄÜ0-±íÊ¾¹Ø±Õ£¬1-±íÊ¾´ò¿ª
    BYTE    byBarrierGateCtrlMode;//0-Ïà»ú×Ô¶¯¿ØÖÆ£¬1-Æ½Ì¨Íâ²¿¿ØÖÆ
    BYTE    byRes1[2];
    DWORD   dwRelateTriggerMode;//¹ØÁª´¥·¢Ä£Ê½ ²Î¿¼ITC_TRIGGERMODE_TYPE
    /*0x00: ²»×öÆ¥Åä*/
    /*0x01: ³µÅÆÆ¥Åä£¨´ø³µÅÆÑÕÉ«£©*/
    /*0x02: ³µÅÆÆ¥Åä£¨²»´ø³µÅÆÑÕÉ«£©*/
    /*0x04: ¿¨ºÅÆ¥Åä*/
    DWORD  dwMatchContent;  //Òì³£´¦Àí,Òì³£´¦Àí·½Ê½µÄ"»ò"½á¹û
    NET_DVR_RELAY_PARAM  struRelayRelateInfo[MAX_RELAY_NUM/*12*/];//¼ÌµçÆ÷¹ØÁªÅäÖÃÐÅÏ¢(Ò»¸ö¼ÌµçÆ÷Ö»ÄÜ¿ØÖÆÒ»¸ö½ÓÈëÉè±¸) Êý×é0±íÊ¾¼ÌµçÆ÷1 Êý×é1±íÊ¾¼ÌµçÆ÷2 ÒÀ´ÎÀàÍÆ 12
    BYTE byGateSingleIO[MAX_IOIN_NUM/*8*/]; //µ¥¸öIO´¥·¢²ÎÊý£¬µ¥¸öIO´¥·¢²ÎÊý£¬Êý×é0±íÊ¾IO1£¬Êý×é1±íÊ¾IO2£¬ÒÀ´ÎÀàÍÆ ; ¾ßÌåÊý×éÖµµÄº¬Òå£¨0-ÎÞ£¬1-µÀÕ¢¿ªµ½Î»£¬2-µÀÕ¢¹Øµ½Î»£¬3-Ïû·À±¨¾¯£©
    //³µÁ¾ÐÅÏ¢¹Ü¿Ø  
    //Êý×é0±íÊ¾ÁÙÊ±³µÁ¾ÅäÖÃµÄÄ£Ê½
    //Êý×é1-ºÚÃûµ¥³µÁ¾µÄÄ£Ê½, 
    //Êý×é2-°×Ãûµ¥³µÁ¾µÄÄ£Ê½
    NET_DVR_VEHICLE_CONTROL struVehicleCtrl[MAX_VEHICLE_TYPE_NUM/*8*/];//³µÁ¾ÐÅÏ¢¹Ü¿Ø  
    BYTE    byRes2[64];
}NET_DVR_ENTRANCE_CFG,*LPNET_DVR_ENTRANCE_CFG;
////////////////////////////³öÈë¿Ú²ÎÊýÅäÖÃ end///////////////////////////////

// µÀÕ¢¿ØÖÆ
typedef struct tagNET_DVR_BARRIERGATE_CFG
{
    DWORD dwSize;
    DWORD dwChannel; //Í¨µÀºÅ
    BYTE  byLaneNo;  //µÀÕ¢ºÅ£¨0-±íÊ¾ÎÞÐ§Öµ(Éè±¸ÐèÒª×öÓÐÐ§ÖµÅÐ¶Ï),1-µÀÕ¢1£©
    BYTE  byBarrierGateCtrl;//0-¹Ø±ÕµÀÕ¢,1-¿ªÆôµÀÕ¢,2-Í£Ö¹µÀÕ¢ 3-Ëø¶¨µÀÕ¢
    BYTE  byEntranceNo;//³öÈë¿Ú±àºÅ [1,8]
    BYTE  byRes[13];
}NET_DVR_BARRIERGATE_CFG, *LPNET_DVR_BARRIERGATE_CFG;

//³öÈë¿ÚºÚ°×Ãûµ¥µÄÊý¾ÝÍ¬²½
typedef struct  tagNET_DVR_VEHICLE_CONTROL_LIST_INFO
{
    DWORD  dwSize;
    DWORD  dwChannel;//Í¨µÀºÅ0xff - È«²¿Í¨µÀ£¨ITC Ä¬ÈÏÊÇ1£©
    DWORD  dwDataIndex;//Êý¾ÝÁ÷Ë®ºÅ£¨Æ½Ì¨Î¬»¤µÄÊý¾ÝÎ¨Ò»Öµ£¬¿Í»§¶Ë²Ù×÷µÄÊ±ºò£¬¸ÃÖµ²»»áÆðÐ§¡£¸ÃÖµÖ÷ÒªÓÃÓÚÊý¾ÝÔöÁ¿Í¬²½£©
    char   sLicense[MAX_LICENSE_LEN]; //³µÅÆºÅÂë
    BYTE   byListType;//Ãûµ¥ÊôÐÔ£¨ºÚ°×Ãûµ¥£©0-°×Ãûµ¥£¬1-ºÚÃûµ¥
    BYTE   byPlateType;    //³µÅÆÀàÐÍ
    BYTE   byPlateColor;    //³µÅÆÑÕÉ«
    BYTE   byRes[21];
    char   sCardNo[MAX_CARDNO_LEN]; // ¿¨ºÅ
    NET_DVR_TIME_V30  struStartTime;//ÓÐÐ§¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30  struStopTime;//ÓÐÐ§½áÊøÊ±¼ä
    //²Ù×÷Êý£¨Æ½Ì¨Í¬²½±íÁ÷Ë®ºÅ²»»áÖØ¸´£¬ÓÃÓÚÔöÁ¿¸üÐÂ£¬´ú±íÍ¬²½µ½Í¬²½±íµÄÄ³Ò»Ìõ¼ÇÂ¼ÁË£¬´æÔÚÏà»úÄÚ´æ£¬ÖØÆôºó»áÇå0£©2014-03-03
    char        sOperateIndex[MAX_OPERATE_INDEX_LEN]; 
    BYTE  byRes1[224]; // ±£Áô×Ö½Ú
} NET_DVR_VEHICLE_CONTROL_LIST_INFO,*LPNET_DVR_VEHICLE_CONTROL_LIST_INFO;

//Êý¾ÝÈ«²¿»ñÈ¡½Ó¿Ú £¨³¤Á¬½Ó»ñÈ¡£©
typedef struct tagNET_DVR_VEHICLE_CONTROL_COND
{
    DWORD  dwChannel;//Í¨µÀºÅ0xffffffff - È«²¿Í¨µÀ£¨ITC Ä¬ÈÏÊÇ1£©
    DWORD  dwOperateType;//²Ù×÷ÀàÐÍ£¬²ÎÕÕVCA_OPERATE _TYPE¡££¨¿É¸´Ñ¡£©
    char   sLicense[MAX_LICENSE_LEN];//³µÅÆºÅÂë
    char   sCardNo[MAX_CARDNO_LEN]; // ¿¨ºÅ
    BYTE   byListType;//Ãûµ¥ÊôÐÔ£¨ºÚ°×Ãûµ¥£©0-°×Ãûµ¥£¬1-ºÚÃûµ¥£¬0xff-È«²¿
    //2014-02-25
    BYTE   byRes1[3];
    DWORD  dwDataIndex;//Êý¾ÝÁ÷Ë®ºÅ     
    BYTE   byRes[116];
}NET_DVR_VEHICLE_CONTROL_COND,*LPNET_DVR_VEHICLE_CONTROL_COND;

//ºÚ°×Ãûµ¥Êý¾ÝÐèÒªÍ¬²½±¨¾¯
typedef struct
{
    DWORD    dwSize; 
    DWORD    dwDataIndex;//Êý¾ÝÁ÷Ë®ºÅ£¨Õâ¸öÖµ·µ»ØÉè±¸µ±Ç°½ÓÊÕµ½µÄÊý¾ÝµÄ×îºóÒ»¸öÊý¾ÝÁ÷Ë®ºÅ,Æ½Ì¨Í¬²½µÄÊ±ºò´ÓÏÂÒ»¸öÁ÷Ë®ºÅ¿ªÊ¼Í¬²½£©
    char     sOperateIndex[MAX_OPERATE_INDEX_LEN];  //²Ù×÷Êý£¨Æ½Ì¨Í¬²½±íÁ÷Ë®ºÅ²»»áÖØ¸´£¬ÓÃÓÚÔöÁ¿¸üÐÂ£¬´ú±íÍ¬²½µ½Í¬²½±íµÄÄ³Ò»Ìõ¼ÇÂ¼ÁË£¬´æÔÚÏà»úÄÚ´æ£¬ÖØÆôºó»áÇå0£© 2014-03-03
    BYTE     byRes[32];
}NET_DVR_VEHICLE_CONTROL_LIST_DSALARM, *LPNET_DVR_VEHICLE_CONTROL_LIST_DSALARM;

//³µÁ¾±¨¾¯£¨ºÚ°×Ãûµ¥£©
typedef struct tagNET_DVR_VEHICLE_CONTROL_ALARM
{
    DWORD dwSize;
    BYTE  byListType;   //Ãûµ¥ÊôÐÔ£¨ºÚ°×Ãûµ¥£©0-°×Ãûµ¥£¬1-ºÚÃûµ¥£¬2-ÁÙÊ±Ãûµ¥
    BYTE  byPlateType;  //³µÅÆÀàÐÍ
    BYTE  byPlateColor;    //³µÅÆÑÕÉ«
    BYTE  byRes1;
    char  sLicense[MAX_LICENSE_LEN];//³µÅÆºÅÂë
    char  sCardNo[MAX_CARDNO_LEN];  // ¿¨ºÅ
    NET_DVR_TIME_V30 struAlarmTime; //±¨¾¯Ê±¼ä
    DWORD dwChannel;          //Éè±¸Í¨µÀºÅ£¬Èç¹ûÖ±Á¬µÄÊÇIPC£¬ÔòÎªipcÍ¨µÀºÅ£»Èç¹ûÁ¬µÄDVR\nvr,ÔòÎªDVR\NVRµÄÍ¨µÀºÅ
    DWORD dwPicDataLen;   //Í¼Æ¬Êý¾Ý´óÐ¡£¬0±íÊ¾ÎÞÍ¼Æ¬£¬²»Îª0ÊÇ±íÊ¾ºóÃæ´øÍ¼Æ¬Êý¾Ý
    BYTE  byPicType;    //Í¼Æ¬ÀàÐÍ£¬0-JPEG
    BYTE  byRes3[3];
    char    *pPicData;
    BYTE  byRes2[48];
}NET_DVR_VEHICLE_CONTROL_ALARM,*LPNET_DVR_VEHICLE_CONTROL_ALARM;

//Ïû·À±¨¾¯
typedef struct tagNET_DVR_FIRE_ALARM
{
    DWORD            dwSize;
    NET_DVR_TIME_V30 struAlarmTime;//±¨¾¯Ê±¼ä
    BYTE             byRes[128];
}NET_DVR_FIRE_ALARM,*LPNET_DVR_FIRE_ALARM;

//Çå³ýÉè±¸³µÅÆºÚÃûµ¥Êý¾Ý¿âÐÅÏ¢
typedef struct
{
    DWORD dwSize;
    DWORD dwDelType;//É¾³ýÌõ¼þÀàÐÍ£¬É¾³ýÌõ¼þÀàÐÍ£¬²ÎÕÕVCA_OPERATE _TYPE¡££¨¿É¸´Ñ¡£©
    char  sLicense[16]; //³µÅÆºÅÂë
    char  sCardNo[48]; // ¿¨ºÅ 
    BYTE  byPlateType;    //³µÅÆÀàÐÍ
    BYTE  byPlateColor;    //³µÅÆÑÕÉ«
    BYTE  byOperateType;    //É¾³ý²Ù×÷ÀàÐÍ(0-Ìõ¼þÉ¾³ý,0xff-É¾³ýÈ«²¿)
    //2014-02-25
    BYTE  byListType;//Ãûµ¥ÊôÐÔ£¨ºÚ°×Ãûµ¥£©0-°×Ãûµ¥£¬1-ºÚÃûµ¥ 2014-03-03
    DWORD dwDataIndex;//Êý¾ÝÁ÷Ë®ºÅ     
    //²Ù×÷Êý£¨Æ½Ì¨Í¬²½±íÁ÷Ë®ºÅ²»»áÖØ¸´£¬ÓÃÓÚÔöÁ¿¸üÐÂ£¬´ú±íÍ¬²½µ½Í¬²½±íµÄÄ³Ò»Ìõ¼ÇÂ¼ÁË£¬´æÔÚÏà»úÄÚ´æ£¬ÖØÆôºó»áÇå0£©2014-03-03
    char  sOperateIndex[MAX_OPERATE_INDEX_LEN]; 
    BYTE  byRes[24];        
} NET_DVR_VEHICLE_CONTROL_DELINFO, *LPNET_DVR_VEHICLE_CONTROL_DELINFO;

//³£ÁÁµÆ¹¦ÄÜ
typedef struct tagNET_DVR_GATELAMP_INFO
{
    DWORD dwSize;
    DWORD dwChannel; //Í¨µÀºÅ
    BYTE  byLaneNo; //µÀÕ¢ºÅ£¨0-±íÊ¾ÎÞÐ§Öµ(Éè±¸ÐèÒª×öÓÐÐ§ÖµÅÐ¶Ï),1-µÀÕ¢1£©
    BYTE  byBrightlampCtrl;//0-¹Ø±Õ³£ÁÁµÆ£¬1-¿ªÆô³£ÁÁµÆ
    BYTE  byRes[14]; 
}NET_DVR_GATELAMP_INFO,*LPNET_DVR_GATELAMP_INFO;


//SDI¾ØÕó1.0
#define  MATRIX_MAX_OUTPUT_NUM      256              //¾ØÕó×î´óÊä³öÍ¨µÀ¸öÊý
typedef struct tagNET_DVR_MATRIX_BASE_CFG
{
    DWORD dwSize; 
    DWORD dwValidInputNum;     //ÓÐÐ§µÄÊäÈëÍ¨µÀÊý
    DWORD dwValidOutputNum;    //ÓÐÐ§µÄÊä³öÍ¨µÀÊý
    BYTE  byRes[64]; 
}NET_DVR_MATRIX_BASE_CFG, *LPNET_DVR_MATRIX_BASE_CFG;

typedef struct tagNET_DVR_MATRIX_SWITCH_INFO
{
    DWORD   dwSize; 
    DWORD   dwInputChan;        //ÊäÈëÍ¨µÀºÅ£¬Îª0±íÊ¾È¡ÏûºÍÖ¸¶¨Êä³öµÄ¹ØÁª¹ØÏµ
    DWORD   dwOutputChan;       //ÒªÇÐ»»µ½µÄÊä³öÍ¨µÀºÅ, (ÆÁÄ»·þÎñÆ÷ÎªÆÁÄ»Ë÷ÒýºÅ(1×Ö½ÚÉè±¸ºÅ+1×Ö½Ú±£Áô+2×Ö½ÚÆÁÄ»Ë÷ÒýºÅ)), 0xffffffff±íÊ¾ÇÐ»»µ½ËùÓÐÊä³ö
    DWORD   dwMatrixID; //¾ØÕóIDºÅ
    BYTE    byRes[28]; 
}NET_DVR_MATRIX_SWITCH_INFO, *LPNET_DVR_MATRIX_SWITCH_INFO;

typedef struct tagNET_DVR_IO_RELATION_INFO
{
    DWORD   dwSize; 
    DWORD   dwIORelation[MATRIX_MAX_OUTPUT_NUM];  //Êä³öÍ¨µÀ¹ØÁªµÄÊäÈëÍ¨µÀ, dwIORelation[i] = j±íÊ¾Êä³öÍ¨µÀ(i + 1)ºÍÊäÈëÍ¨µÀj¹ØÁª,
    //dwIORelation[i] = 0±íÊ¾Êä³öÍ¨µÀi + 1Î´¹ØÁªÊäÈëÍ¨µÀ                                                                
    BYTE    byRes[256]; 
}NET_DVR_IO_RELATION_INFO, *LPNET_DVR_IO_RELATION_INFO;


//ÅúÁ¿½Ó¿ÚÅäÖÃ
typedef struct tagNET_DVR_EXTERNAL_DEVCOND
{
    DWORD  dwSize;
    BYTE   byExternalDevTpye;//0-ÆäËû(±£Áô)£¬1-Ô¶¾àÀë¶ÁÍ·Éè±¸£¬2-³öÈë¿Ú¿ØÖÆ»ú£¬3-ledÆÁ  0xff-È«²¿ÐÅÏ¢£¨³¤Á¬½Ó»ñÈ¡Ê±Ê¹ÓÃ£©
    BYTE   byRelativeIndex;//0-ÆäËû(±£Áô)£¬Ë÷Òý(Ïà¶ÔÓÚ½ÓÈëÀàÐÍ) ·¶Î§ 1~8 LedµÄÏà¶ÔË÷Òý·¶Î§ÊÇ£¨1¡«255£©   0xff-È«²¿ÐÅÏ¢£¨³¤Á¬½Ó»ñÈ¡Ê±Ê¹ÓÃ£©
    //    BYTE   byLaneID;// Âß¼­³µµÀºÅ    
    BYTE   byRes[30];
}NET_DVR_EXTERNAL_DEVCOND,*LPNET_DVR_EXTERNAL_DEVCOND;

typedef struct tagNET_DVR_EXTERNAL_DEVCFG
{
    DWORD         dwSize;
    BYTE          byExternalDevTpye;//0-ÆäËû£¬1-Ô¶¾àÀë¶ÁÍ·Éè±¸£¬2-³öÈë¿Ú¿ØÖÆ»ú£¬3-ledÆÁ 
    BYTE          byRes2[3];
    char          sDevName[MAX_DEVNAME_LEN];
    union
    {
        BYTE    byUnionLen[656];
        struct
        {
            NET_DVR_IPADDR  struDevIP;//DEV IPµØÖ· 144
            WORD     wDevPort;//Éè±¸¶Ë¿Ú
            BYTE     byRes[510];
        }struRrReader;//Ô¶¾àÀë¶ÁÍ·Éè±¸
        struct
        {
            BYTE byRs485No; //RS485±àºÅ(Íâ½ÓÉè±¸ÀàÐÍÒ»Ñù£¬¸Ã±àºÅ¿ÉÒÔÖØ¸´£»ÀàÐÍ²»Ò»Ñù£¬¸Ã±àºÅ»¥³â)
            BYTE byDevCtrlCode;//²¦ÂëµØÖ·£¬ÓÃÓÚÇø·ÖÉè±¸(1-255)
            BYTE byAutoIssuedData;//ÊÇ·ñ×Ô¶¯ÏÂ·¢¿¨Æ¬Êý¾Ý 0-²»×Ô¶¯ÏÂ·¢£¬1-×Ô¶¯ÏÂ·¢
            BYTE byOfflineDetEnable;//ÀëÏß¼ì²â 0-¹Ø±Õ£¬1-¿ªÆô
            BYTE byDetCycle;//¼ì²âÖÜÆÚ£¨0¡«60 µ¥Î» s£©
            BYTE byRes[651];
        }struGateway;//³öÈë¿Ú¿ØÖÆ»ú
        struct
        {
            BYTE byExternalMode;//0-RS485,1-ÍøÂç
            BYTE byRes[3];
            NET_DVR_IPADDR  struDevIP;//DEV IPµØÖ· 144 (ÔÚbyExternalMode == 1 Ê±ÉúÐ§)
            WORD wDevPort;//Éè±¸¶Ë¿Ú(ÔÚbyExternalMode == 1 Ê±ÉúÐ§)
            BYTE byRs485No; //RS485±àºÅ(Íâ½ÓÉè±¸ÀàÐÍÒ»Ñù£¬¸Ã±àºÅ¿ÉÒÔÖØ¸´£»ÀàÐÍ²»Ò»Ñù£¬¸Ã±àºÅ»¥³â)
            BYTE byDevCtrlCode;//²¦ÂëµØÖ·£¬ÓÃÓÚÇø·ÖÉè±¸(1-255)
            //ledÆÁÍ¨¹ý¿ØÖÆ¿¨¿ØÖÆÏÔÊ¾µÄ£¬²»Í¬µÄ¿ØÖÆ¿¨ÀàÐÍÖ§³ÖµÄÏÔÊ¾·½Ê½²»Í¬
            BYTE byCtrlCardType;//¿ØÖÆ¿¨ÀàÐÍ 0-±£Áô(ÎÞÐ§Öµ) 1- EQ2013
            BYTE byLedScreenType;//ÆÁÀàÐÍ 0-µ¥É«ÆÁ 1-Ë«É«ÆÁ
            BYTE byLedScreenUse;//ÆÁÓÃÍ¾0-ÆäËü 1-ÇøÎ»ÆÁ 2-ÌáÊ¾ÆÁ 3-ÊÕ·ÑÆÁ
            BYTE byLedDisplayMode;//ÆÁÄ»×ÖÌåÏÔÊ¾·½Ê½: 1 "Á¢¼´ÏÔÊ¾",    2 "×óÒÆ" ,3 "ÓÒÒÆ" ,4 "ÉÏÒÆ",     5 "ÏÂÒÆ"
            char sLedCustomInfo[MAX_LED_INFO];//ÆÁÄ»×ÖÌåÏÔÊ¾ÐÅÏ¢
            //ledÆÁÊÇÓÉ¿ØÖÆ¿¨¿ØÖÆµÄ£¬ledÆÁ¿ÉÒÔ¸ù¾ÝÏîÄ¿Êµ¼ÊÊ¹ÓÃ¸ü»»´óÐ¡£¬´ËÊ±ÐèÒªÖÕ¶ËÍ¨Öª¿ØÖÆ¿¨Ä¿Ç°Ê¹ÓÃµÄÆÁ¿íºÍÆÁ¸ß
            DWORD dwLedScreenH;//ÏÔÊ¾ÆÁ×é³É¸ß¶ÈÉÏÐèÒªµÄLEDµãÊý
            DWORD dwLedScreenW;//ÏÔÊ¾ÆÁ×é³É¿í¶ÈÉÏÐèÒªµÄLEDµãÊý
            BYTE byRes1[236];
        }struLed;//ledÆÁ
    }uExternalDevInfo; //ÓÉbyExternalMode ÖµÀ´¾ö¶¨ÄÄ¸öÓÐÐ§
    BYTE byRes[128];
}NET_DVR_EXTERNAL_DEVCFG, *LPNET_DVR_EXTERNAL_DEVCFG;

//³¤Á¬½Ó»ñÈ¡ÅäÖÃ
typedef struct tagNET_DVR_EXTERNAL_DEVSTATUS//Ô¶¾àÀë¶ÁÍ·Éè±¸
{
    DWORD  dwSize;
    char   sDevName[MAX_DEVNAME_LEN];//Éè±¸Ãû³Æ
    BYTE   byExternalDevTpye;//0-ÆäËû(±£Áô)£¬1-Ô¶¾àÀë¶ÁÍ·Éè±¸£¬2-³öÈë¿Ú¿ØÖÆ»ú£¬3-ledÆÁ  0xff-È«²¿ÐÅÏ¢£¨³¤Á¬½Ó»ñÈ¡Ê±Ê¹ÓÃ£©
    BYTE   byRelativeIndex;//0-ÆäËû(±£Áô)£¬Ïà¶ÔË÷Òý(Ïà¶ÔÓÚ½ÓÈëÀàÐÍÄÜ) ·¶Î§ 1~8  0xff-È«²¿ÐÅÏ¢£¨³¤Á¬½Ó»ñÈ¡Ê±Ê¹ÓÃ£©
    BYTE   byOnline;//0-²»ÔÚÏß£¬1-ÔÚÏß
    BYTE   byRes[125];
}NET_DVR_EXTERNAL_DEVSTATUS,*LPNET_DVR_EXTERNAL_DEVSTATUS;

//ÖÕ¶Ë³öÈë¿Ú¼ì²âÅäÖÃ
typedef struct tagNET_DVR_ENTRANCEDET_CFG
{
    DWORD   dwSize;        //½á¹¹³¤¶È
    //ÀëÏß¼ì²â¿ªÆôÊ±£¬Èç¹û¼ì²âµ½Éè±¸ÔÚÏß£¬ÔòÓÉÖÕ¶ËÆ¥Åä¿¨Æ¬ÐÅÏ¢£¬²¢·¢ËÍµÀÕ¢¿ØÖÆÖ¸Áî¸ø³öÈë¿Ú¿ØÖÆ»ú£»·ñÔòÓÉ³öÈë¿Ú¿ØÖÆ»ú×ÔÉíÆ¥Åä¿ØÖÆµÀÕ¢
    BYTE   byOfflineDetEnable;//ÀëÏß¼ì²â 0-¹Ø±Õ£¬1-¿ªÆô
    BYTE   byDetCycle;//¼ì²âÖÜÆÚ£¨0¡«60 µ¥Î» s£©
    BYTE   byDevCtrlCode;//³öÈë¿Ú¿ØÖÆ»ú²¦ÂëµØÖ·£¬ÓÃÓÚÇø·ÖÉè±¸(1-255)
    BYTE   byRes[61];
}NET_DVR_ENTRANCEDET_CFG,*LPNET_DVR_ENTRANCEDET_CFG;

//ÖÕ¶Ë³öÈë¿Ú¿ØÖÆ(¿ØÖÆ½Ó¿Ú ÏÂ·¢¿¨Æ¬ÐÅÏ¢)
typedef struct tagNET_DVR_ENTRANCEDEV_COMMAND
{
    DWORD  dwSize; //½á¹¹³¤¶È
    BYTE   byDevCtrlCode;//³öÈë¿Ú¿ØÖÆ»ú²¦ÂëµØÖ·£¬ÓÃÓÚÇø·ÖÉè±¸(1-255)
    BYTE   byManualIssuedData;//ÊÖ¶¯Êý¾ÝÏÂ·¢ 0-¹Ø±Õ£¬1-¿ªÆô 
    BYTE   byRes[62];
}NET_DVR_ENTRANCEDEV_COMMAND,*LPNET_DVR_ENTRANCEDEV_COMMAND;

//ÖÕ¶Ë³öÈë¿Ú¿ØÖÆ(¿ØÖÆ½Ó¿Ú Çå¿ÕÏÂ·¢¿¨Æ¬ÐÅÏ¢)
typedef struct tagNET_DVR_ENISSUED_DATADEL
{
    DWORD   dwSize; //½á¹¹³¤¶È
    BYTE   byDevCtrlCode;//³öÈë¿Ú¿ØÖÆ»ú²¦ÂëµØÖ·£¬ÓÃÓÚÇø·ÖÉè±¸(1-255)
    BYTE   byRes[27];
}NET_DVR_ENISSUED_DATADEL,*LPNET_DVR_ENISSUED_DATADEL;

//³öÈë¿Ú¹ý³µÊÕ·ÑÃ÷Ï¸£¨¼àÌý·½Ê½£©
typedef  struct  _tagNET_ITS_PASSVEHICLE_COST_ITEM
{
    DWORD   dwSize;        //½á¹¹³¤¶È
    DWORD   dwPassVehicleID; //¹ý³µÐòºÅÓë³öÈë¿ÚÊý¾ÝµÄ¹ý³µÐòºÅÏà¹ØÁª
    BYTE    byIntime[MAX_TIME_LEN]; //Èë³¡Ê±¼ä¸ñÊ½Îªyyyymmddhh24missfff
    BYTE    byOuttime[MAX_TIME_LEN]; //³ö³¡Ê±¼ä¸ñÊ½Îªyyyymmddhh24missfff
    BYTE    byCardNo[MAX_CARD_LEN];   //¿¨ºÅ
    BYTE    byPlateInfo[MAX_LICENSE_LEN]; //³µÅÆºÅÂë
    float   fPayCost;       //ÊÕ·Ñ½ð¶î(µ¥Î»Ôª)
    BYTE    byOperatorName[MAX_OPERATORNAME_LEN]; //²Ù×÷ÈËÔ±Ãû³Æ
    BYTE    byVehicleType; //³µÁ¾ÀàÐÍ  0-Ð¡ÐÍ³µ 2 ´óÐÍ³µ
    BYTE    byRes1[3]; //Ô¤Áô×Ö¶Î1
    DWORD   dwPayRuleID; // ÊÕ·Ñ¹æÔòÁ÷Ë®ºÅ
    DWORD   dwFreeRuleID; // ¼õÃâ¹æÔòÁ÷Ë®ºÅ
    BYTE    byRes2[256]; // Ô¤Áô×Ö¶Î2
}NET_ITS_PASSVEHICLE_COST_ITEM, *LPNET_ITS_PASSVEHICLE_COST_ITEM;

//³öÈë¿Ú½»½Ó°àÊý¾Ý£¨¼àÌý·½Ê½£©
typedef struct  _tagNET_ITS_HANDOVER_INFO
{
    DWORD   dwSize;        //½á¹¹³¤¶È
    BYTE    byOperatorName[MAX_OPERATORNAME_LEN]; //²Ù×÷ÈËÔ±Ãû³Æ
    BYTE    byOperatorCard[MAX_CARD_LEN]; //²Ù×÷ÈËÔ±¿¨ºÅ
    BYTE    byStartTime[MAX_TIME_LEN];//ÉÏ°àÊ±¼ä¸ñÊ½ÐÎÈçyyyymmddhh24miss
    BYTE    byEndTime[MAX_TIME_LEN]; //ÏÂ°àÊ±¼ä¸ñÊ½ÐÎÈçyyyymmddhh24miss
    float   fTotal_Pay;    //±¾´ÎÉÏ°àÆÚ¼ä×ÜµÄÊÕ·Ñ½ð¶î(µ¥Î»Ôª)
    DWORD   dwTotal_Records;   //±¾´ÎÉÏ°àÆÚ¼ä×ÜµÄ¹ý³µÊÕ·ÑµÄ¼ÇÂ¼ÌõÊý
    BYTE    byRes[64]; //Ô¤Áô
}NET_ITS_HANDOVER_INFO, *LPNET_ITS_HANDOVER_INFO;


typedef struct tagNET_DVR_CURTRIGGERMODE //(3.7Ver)
{
    DWORD  dwSize;
    DWORD  dwTriggerType; //´¥·¢ÀàÐÍ£¬Ïê¼ûITC_TRIGGERMODE_TYPE 
    BYTE   byRes[24]; 
}NET_DVR_CURTRIGGERMODE, *LPNET_DVR_CURTRIGGERMODE;



typedef struct tagNET_DVR_TEMP_HUMI
{ 
    DWORD    dwSize;            // ÄÚÈÝ³¤¶È && °æ±¾£¨ÓÃÓÚºóÆÚÀ©Õ¹£©
    DWORD       dwChannel;         // Í¨µÀºÅ£¬Ä¬ÈÏ1
    int      iHumidity;         // Êª¶È£¬ÕûÊý²¿·Ö£ºval/1000£¬Ð¡Êý²¿·Ö£ºval%1000
    int      iTemp;             // ÎÂ¶È£¬ÕûÊý²¿·Ö£ºval/1000£¬Ð¡Êý²¿·Ö£ºval%100
    BYTE     byRes[8];          // ±£Áô×Ö½Ú    
}NET_DVR_TEMP_HUMI, *LPNET_DVR_TEMP_HUMI;


typedef struct tagNET_DVR_ALARMSOUNDMODE_CFG
{
    DWORD    dwSize;      // ÄÚÈÝ³¤¶È && °æ±¾£¨ÓÃÓÚºóÆÚÀ©Õ¹£©
    DWORD    dwChannel;     // Í¨µÀºÅ£¬Ä¬ÈÏ1
    DWORD    dwSoundMode;   // ±¨¾¯Ä£Ê½: 0ÌáÐÑÄ£Ê½£»1¾¯±¨Ä£Ê½£»2¾²ÒôÄ£Ê½
    BYTE     byRes[12];     // ±£Áô×Ö½Ú
}NET_DVR_ALARMSOUNDMODE_CFG, *LPNET_DVR_ALARMSOUNDMODE_CFG;

typedef struct tagNET_DVR_SECURITYMODE
{ 
       DWORD    dwSize;// ÄÚÈÝ³¤¶È && °æ±¾£¨ÓÃÓÚºóÆÚÀ©Õ¹£©
    DWORD    dwChannel;         // Í¨µÀºÅ£¬Ä¬ÈÏ1
    DWORD    dwMode;        // °²È«Ä£Ê½: 1ÆôÓÃ£¬ÂëÁ÷¼ÓÃÜ£»2²»ÆôÓÃ£¬ÂëÁ÷²»¼ÓÃÜ
    char     szRandCode[6];   //Éè±¸³ö³§µÄ"Ëæ»úÑéÖ¤Âë"
    BYTE     byRes[6];         // ±£Áô×Ö½Ú
}NET_DVR_SECURITYMODE, *LPNET_DVR_SECURITYMODE;

typedef struct tagNET_DVR_MOBILE_CAPTUREPIC_CFG
{
    DWORD dwSize;
    BYTE  byPreviewFpsAdjMode;   /* Ô¤ÀÀÖ¡ÂÊµ÷½ÚÄ£Ê½:0-²»µ÷½Ú£¬±ê×¼Ö¡ÂÊÔ¤ÀÀ,1-±ê×¼µÍÖ¡ÂÊÔ¤ÀÀ,2-¸ù¾ÝGPSËÙ¶È½øÐÐÖ¡ÂÊµ÷½Ú */
    BYTE  bySelPeccType;           /* ÊÇ·ñÑ¡ÔñÎ¥ÕÂÀàÐÍ */    
    BYTE  byOptHabit;             /* È¡Ö¤²Ù×÷Ï°¹ß, 0:³¤°´È¡Ö¤;1:¶Ì°´Á½´ÎÈ¡Ö¤ */    
    BYTE  byEnablePeccRec;      /* 1: Ê¹ÄÜÎ¥ÕÂÂ¼Ïñ×¥È¡, 0: ½ûÖ¹Î¥ÕÂÂ¼Ïñ×¥È¡ */
    BYTE  byPicSize;                /*0=CIF,1=QCIF,2=D1,3=UXGA(1600x1200), 4=SVGA(800x600), 5=HD720p(1280x720),6-VGA£¬7-XVGA£¬8-HD900p£¬9-HD1080£¬10-2560*1920£¬11-1600*304£¬12-2048*1536£¬13-2448*2048,14-2448*1200£¬15-2448*800£¬16-XGA(1024*768)£¬17-SXGA(1280*1024),18-WD1(960*576/960*480),19-1080i */
    BYTE  byPicQuality;            /* Í¼Æ¬ÖÊÁ¿ÏµÊý 0-×îºÃ 1-½ÏºÃ 2-Ò»°ã */
    BYTE  byRes[62];
}NET_DVR_MOBILE_CAPTUREPIC_CFG,*LPNET_DVR_MOBILE_CAPTUREPIC_CFG;

typedef struct tagNET_DVR_CMS_PARAM
{
    DWORD         dwSize;
    NET_DVR_IPADDR    struAddr;                    // Æ½Ì¨·þÎñÆ÷IP
    WORD            wServerPort;                   // Æ½Ì¨·þÎñÆ÷ÕìÌý¶Ë¿Ú£¬
    BYTE         bySeverProtocolType;            //Æ½Ì¨Ð­ÒéÀàÐÍ 1-Ë½ÓÐ£¬2-Ehome
    BYTE            byStatus;                         //Éè±¸×¢²áµ½¸ÃÆ½Ì¨µÄ×´Ì¬£¬1-Î´×¢²á£¬2-ÒÑ×¢²á
    BYTE         sDeviceId[NAME_LEN/*32*/];     //Éè±¸ID
    char         sPassWord[PASSWD_LEN];
    /********* IPC5.1.7 ÐÂÔö²ÎÊý Begin 2014-03-21***********/
    BYTE         sPlatformEhomeVersion[NAME_LEN];//Æ½Ì¨EHOMEÐ­Òé°æ±¾
    /********* IPC5.1.7 ÐÂÔö²ÎÊý end 2014-03-21***********/
    BYTE         byNetWork;                //0- ÎÞÒâÒå£¬1-×Ô¶¯£¬2-ÓÐÏßÍøÂçÓÅÏÈ£¬3-ÓÐÏßÍøÂç£¬4-3GÍøÂç
    BYTE         byAddressType;            //0 - ÎÞÒâÒå, 1 - ipv4/ipv6µØÖ·£¬2 - ÓòÃû
    BYTE            byRes1[2];
    BYTE         sDomainName[MAX_DOMAIN_NAME/*64*/]; //ÓòÃû
    BYTE            byRes[140];          // ±£Áô×Ö½Ú
}NET_DVR_CMS_PARAM, *LPNET_DVR_CMS_PARAM;

//Ìõ¼þ½á¹¹
typedef struct tagNET_DVR_HEATMAP_COND
{
    DWORD   dwSize;
    DWORD   dwChannel; //Í¨µÀºÅ
    BYTE    byDetSceneID;//¼ì²â³¡¾°ºÅ[1],Çò»úµ±Ç°Ö§³Ö1¸ö³¡¾°, IPCÄ¬ÈÏÊÇ0
    BYTE    byRes[63]; 
}NET_DVR_HEATMAP_COND, *LPNET_DVR_HEATMAP_COND;

typedef struct tagNET_DVR_HEATMAP_PARAM
{
    BYTE byTargetTrackEnable;//Ä¿±ê¸ú×Ù£º0-¹Ø±Õ£¬1-¿ªÆô£¬Ä¬ÈÏ0-¹Ø±Õ
    BYTE bySensitivity;  //ÁéÃô¶È²ÎÊý£¬·¶Î§1-100£¬Ä¬ÈÏ50
    BYTE byBackgroundUpdateRate;//±³¾°¸üÐÂËÙ¶È£º·¶Î§1-100£¬Ä¬ÈÏ50
    BYTE bySceneChangeLevel;//³¡¾°±ä»¯µÈ¼¶£º·¶Î§1-100£¬Ä¬ÈÏ50
    BYTE byMinTargetSize;//×îÐ¡Ä¿±ê³ß´ç£º·¶Î§1-100£¬Ä¬ÈÏ50
    BYTE byRes[15];
}NET_DVR_HEATMAP_PARAM, *LPNET_DVR_HEATMAP_PARAM;

#define MAX_HEATMAPREGION_NUM 8

//ÈÈ¶ÈÍ¼¼ì²âÅäÖÃ½á¹¹
typedef struct tagNET_DVR_HEATMAP_CFG
{
    DWORD dwSize;
    BYTE  byEnable; //Ê¹ÄÜ£¬ÊÇ·ñ¿ªÆô
    BYTE  byRes[3];
    NET_VCA_POLYGON struRegion[MAX_HEATMAPREGION_NUM/*8*/];//ÇøÓò·¶Î§
    NET_DVR_HEATMAP_PARAM  struHeatMap ; 
    NET_DVR_HANDLEEXCEPTION_V40 struHandleException;  //Òì³£´¦Àí·½Ê½
    //²¼·ÀÊ±¼ä
    NET_DVR_SCHEDTIME struAlarmSched[MAX_DAYS/*7*/][MAX_TIMESEGMENT_V30/*8*/]; 
    BYTE  byRes1[512];
}NET_DVR_HEATMAP_CFG, *LPNET_DVR_HEATMAP_CFG;

//ÈÈ¶ÈÍ¼±¨¾¯ÉÏ´«
typedef struct tagNET_DVR_HEATMAP_RESULT
{
    DWORD  dwSize;
    NET_VCA_DEV_INFO  struDevInfo;/*Éè±¸ÐÅÏ¢*/
    NET_DVR_TIME_EX   struStartTime;/*¿ªÊ¼Ê±¼ä*/
    NET_DVR_TIME_EX   struEndTime;/*½áÊøÊ±¼ä*/
    DWORD  dwMaxHeatMapValue;//×î´óÈÈ¶ÈÖµ
    DWORD  dwMinHeatMapValue;//×îÐ¡ÈÈ¶ÈÖµ
    DWORD  dwTimeHeatMapValue;// (Ê±¼äÈÈ¶ÈÖµ)Æ½¾ùÈÈ¶ÈÖµ
    WORD   wArrayLine;//Í¼Æ¬ÏñËØµãÐÐÖµ 
    WORD   wArrayColumn;//Í¼Æ¬ÏñËØµãÁÐÖµ £¨µ±ÐÐÁÐÖµÎª0µÄÊ±ºò£¬ÏñËØµãÖµÄÚ´æÐÅÏ¢²»´æÔÚ£©
    BYTE*  pBuffer;  //ÈÈ¶ÈÍ¼Æ¬ÏñËØµãÊý¾ÝÐÅÏ¢
    BYTE   byDetSceneID;//¼ì²â³¡¾°ºÅ[1],Çò»úµ±Ç°Ö§³Ö1¸ö³¡¾°, IPCÄ¬ÈÏÊÇ0
    BYTE   byRes[127];
}NET_DVR_HEATMAP_RESULT,*LPNET_DVR_HEATMAP_RESULT;

//ÈÈ¶ÈÍ¼±¨¾¯²éÕÒ Ìõ¼þ½á¹¹Ìå
typedef struct tagNET_DVR_HEATMAP_QUERY_COND
{
    DWORD   dwSize;
    DWORD   dwChannel ;//Í¨µÀºÅ
    NET_DVR_TIME_EX   struStartTime;/*¿ªÊ¼Ê±¼ä*/
    NET_DVR_TIME_EX   struEndTime;/*½áÊøÊ±¼ä*/
    BYTE    byReportType;//0-ÎÞÐ§Öµ£¬1-ÈÕ±¨±í£¬2-ÖÜ±¨±í£¬3-ÔÂ±¨±í£¬4-Äê±¨±í
    BYTE    byDetSceneID;//¼ì²â³¡¾°ºÅ[1],Çò»úµ±Ç°Ö§³Ö1¸ö³¡¾°, IPCÄ¬ÈÏÊÇ0
    BYTE    byRes[126];
}NET_DVR_HEATMAP_QUERY_COND,*LPNET_DVR_HEATMAP_QUERY_COND;

//ÈÈ¶ÈÍ¼±¨¾¯²éÕÒ 
typedef struct tagNET_DVR_HEATMAP_INFO
{
    DWORD  dwSize;
    NET_DVR_TIME_EX   struStartTime;/*¼ä¸ô¿ªÊ¼Ê±¼ä*/
    NET_DVR_TIME_EX   struEndTime;  /*¼ä¸ô½áÊøÊ±¼ä*/
    DWORD  dwHeatMapPicLen;         /*¿Õ¼äÈÈ¶ÈÍ¼Æ¬³¤¶È(µ±º¬ÓÐÍ¼Æ¬µÄÊ±ºò£¬¸Ã×Ö¶ÎÎª·Ç0£¬Ã»ÓÐÍ¼Æ¬µÄÊ±ºò£¬¸Ã×Ö¶ÎÎª0)*/
    BYTE*  pBuffer;                 //ÈÈ¶ÈÍ¼Æ¬Êý¾ÝÐÅÏ¢
    DWORD  dwTimeHeatMapValue ;     //Ê±¼äÈÈ¶ÈÖµ(º¬ÓÐ¿ÕÈÈ¶ÈÍ¼µÄÊ±ºò,¸Ã×Ö¶Î²»ÐèÒª´«Öµ)
    DWORD  dwHeatMapMaxValue;//¼ì²âÇøÓò×î¸ßÈÈ¶ÈµãÈËÔ±»î¶¯Ê±¼ä(s)(¿Õ¼äÈÈ¶ÈÍ¼Ê±ÓÐÐ§)
    DWORD  dwHeatMapMinValue;//¼ì²âÇøÓò×îµÍÈÈ¶ÈµãÈËÔ±»î¶¯Ê±¼ä(s) (¿Õ¼äÈÈ¶ÈÍ¼Ê±ÓÐÐ§)
    BYTE    byRes[116];
}NET_DVR_HEATMAP_INFO,*LPNET_DVR_HEATMAP_INFO;

typedef struct tagNET_DVR_PDC_QUERY_COND
{
    DWORD   dwSize;
    DWORD   dwChannel; //Í¨µÀºÅ
    NET_DVR_TIME_EX   struStartTime; //¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_EX   struEndTime; //½áÊøÊ±¼ä
    BYTE    byReportType; //0-ÎÞÐ§Öµ£¬1-ÈÕ±¨±í£¬2-ÖÜ±¨±í£¬3-ÔÂ±¨±í£¬4-Äê±¨±í
    BYTE    byEnableProgramStatistics; //ÊÇ·ñ°´½ÚÄ¿Í³¼Æ£¬0-·ñ£¬1-ÊÇ
    BYTE    byRes1[2];
    DWORD   dwPlayScheduleNo; //°´½ÚÄ¿Í³¼ÆÊ±¹ØÁªµÄÈÕ³ÌºÅ
    BYTE    byRes[120];
}NET_DVR_PDC_QUERY_COND,*LPNET_DVR_PDC_QUERY_COND;

typedef struct tagNET_DVR_PROGRAM_INFO
{
    DWORD   dwProgramNo; //½ÚÄ¿±àºÅ
    BYTE    sProgramName[NAME_LEN]; //½ÚÄ¿Ãû³Æ
    BYTE    byRes[16];
}NET_DVR_PROGRAM_INFO, *LPNET_DVR_PROGRAM_INFO;

typedef struct tagNET_DVR_PDC_RESULT
{
    DWORD   dwSize;
    NET_DVR_TIME_EX   struStartTime;/*¿ªÊ¼Ê±¼ä*/
    NET_DVR_TIME_EX   struEndTime;/*½áÊøÊ±¼ä*/
    DWORD   dwEnterNum;   //½øÈëÈËÊý
    DWORD   dwLeaveNum;  //Àë¿ªÈËÊý
    NET_DVR_PROGRAM_INFO struProgramInfo;        //½ÚÄ¿ÐÅÏ¢
    BYTE    byRes[204];    //±£Áô×Ö½Ú
}NET_DVR_PDC_RESULT, *LPNET_DVR_PDC_RESULT;


typedef struct tagNET_DVR_MOBILE_PLATE_RECOGCFG
{
    DWORD dwSize;
    BYTE  byDefaultCHN[MAX_CHJC_NUM]; /*Éè±¸ÔËÐÐÊ¡·ÝµÄºº×Ö¼òÐ´  3 */ 
    BYTE  byTimeOsd;// Ê±¼äÐÅÏ¢µþ¼Ó 0 - ²»µþ¼Ó£¬ 1- µþ¼Ó
    BYTE  byRecogResultOsd;//Ê¶±ð½á¹ûµþ¼Ó  0 - ²»µþ¼Ó£¬ 1- µþ¼Ó
    BYTE  byRecogHint;//Ê¶±ð³É¹¦ÌáÊ¾ 0 - ²»ÌáÊ¾£¬ 1- ÌáÊ¾
    BYTE  byRecogDir;//Ê¶±ð·½Ïò 0: ÕýÏò, 1: ±³Ïò
    BYTE  byRecogEnv;//Ê¶±ð»·¾³ 0: °×Ìì, 1: ÍíÉÏ
    BYTE  byRecogPlateType;//0-Ð¡³µÅÆÊ¶±ð£¬1-´ó³µÅÆÊ¶±ð
    BYTE  byUploadPlate;//ÊÇ·ñÉÏ´«³µÅÆ 0 -²»ÉÏ´«£¬ 1-ÉÏ´«
    BYTE  byRes[62];
}NET_DVR_MOBILE_PLATE_RECOGCFG,*LPNET_DVR_MOBILE_PLATE_RECOGCFG;

typedef struct tagNET_DVR_MOBILE_RADAR_CFG
{    
    DWORD  dwSize;
    BYTE   byEnableRadar;   /* 0:²»¿ªÆôÀ×´ï  1:¿ªÆôÀ×´ï */    
    BYTE   byEnableAlarm;   /* 0:²»¿ªÆô±¨¾¯  1:¿ªÆô±¨¾¯ */    
    WORD   wOverSpeed;    /* ·¶Î§Îª20~250 */    
    BYTE   bySpeedUnits;  /* 0:¹«Àï/Ð¡Ê±   1:Ó¢Àï/Ð¡Ê± */    
    BYTE   bydirection;     /* 0:·´Ïò£¨À×´ïÓë³µÏàÏò£© 1:ÕýÏò£¨À×´ïÓë³µ·´Ïò£© */    
    BYTE   byMeasureMode;   /* 0:¾²Ì¬ (À×´ï×´Ì¬)       1:¶¯Ì¬ (À×´ï×´Ì¬)*/    
    BYTE   byTargetType;    /* 0:×î¿ì(À×´ï²âËÙ³µÁ¾×î¿ì)  1:×î½ü(À×´ï²âËÙ³µÁ¾×î½ü)*/    
    BYTE   bySensitivity;  /* ÁéÃô¶È[0,100] */                          
    BYTE   byCaptureNum;   /* ×¥ÅÄÕÅÊý[0,255] */                                
    BYTE   byUploadPlate;  /*ÊÇ·ñÉÏ´«³¬ËÙ×¥ÅÄÍ¼Æ¬ 0-²»ÉÏ´«£¬1-ÉÏ´«*/    
    BYTE   byRes[61];
}NET_DVR_MOBILE_RADAR_CFG,*LPNET_DVR_MOBILE_RADAR_CFG;

typedef struct tagNET_DVR_MOBILE_LOCALPLATECHK_CFG
{
    DWORD       dwSize;
    BYTE  byCheck;  /* »ü²éÈÎÎñÊÇ·ñ½øÐÐºÚÃûµ¥»ü²é 0-»ü²é£¬1-²»»ü²é*/    
    BYTE  byCheckAlarm;/* »ü²é³É¹¦±¨¾¯ 0-²»±¨¾¯£¬1-±¨¾¯*/    
    BYTE  byCheckHint; /* »ü²é³É¹¦ÌáÊ¾ (Èí¼þÌáÊ¾) 0-²»ÌáÊ¾£¬1-ÌáÊ¾*/    
    BYTE  byUploadBlackCar; /*ÊÇ·ñÉÏ´«ºÚ³µÐÅÏ¢ 0-²»ÉÏ´«£¬1-ÉÏ´«*/
    BYTE  byRes[64];
}NET_DVR_MOBILE_LOCALPLATECHK_CFG,*LPNET_DVR_MOBILE_LOCALPLATECHK_CFG;

typedef struct tagNET_DVR_VEHICLE_CHECK
{
    DWORD dwSize;
    DWORD  dwChannel;//Í¨µÀºÅ0xff - È«²¿Í¨µÀ£¨Ä¬ÈÏÊÇ1,´ú±íÒ»¸öÍ¨µÀ£©
    NET_DVR_PLATE_INFO  struPlateInfo; //³µÅÆÐÅÏ¢
    WORD  wIllegalType; //Î¥ÕÂÀàÐÍ²ÉÓÃ¹ú±ê¶¨Òå £¨²Î¿¼¸½¼þ£©
    BYTE  byRes[2];
    char sIllegalTypeInfo[128];// Î¥¹æÀàÐÍÐÅÏ¢£¨128£©
    NET_DVR_TIME_V30  struIllegalTime;//Î¥¹æÊ±¼ä
    BYTE  byIllegalVehicleNum;//³µÁ¾Î¥·¨´ÎÊý
    BYTE  byRes1[3];
    char sCustomInfo[64];//×Ô¶¨ÒåÐÅÏ¢
    BYTE  byRes2[128]; // ±£Áô×Ö½Ú
}NET_DVR_VEHICLE_CHECK,*LPNET_DVR_VEHICLE_CHECK;

typedef enum _LONG_CFG_SEND_DATA_TYPE_ENUM_
{
    ENUM_DVR_VEHICLE_CHECK = 1, //ºÚÃûµ¥³µÁ¾Êý¾Ý»ü²éÀàÐÍ
    ENUM_MSC_SEND_DATA = 2, //ÆÁÄ»¿ØÖÆÆ÷Êý¾ÝÀàÐÍ
    ENUM_ACS_SEND_DATA = 3, //ÃÅ½ûÖ÷»úÊý¾ÝÀàÐÍ
    ENUM_TME_CARD_SEND_DATA = 4, //Í£³µ³¡(³öÈë¿Ú¿ØÖÆ»ú)¿¨Æ¬Êý¾ÝÀàÐÍ
    ENUM_TME_VEHICLE_SEND_DATA = 5, //Í£³µ³¡(³öÈë¿Ú¿ØÖÆ»ú)³µÁ¾Êý¾ÝÀàÐÍ
    ENUM_DVR_DEBUG_CMD = 6, //µ÷ÊÔÃüÁîÐÅÏ¢
    ENUM_DVR_SCREEN_CTRL_CMD =7, //ÆÁÄ»»¥¶¯ÃüÁîÀàÐÍ
    ENUM_CVR_PASSBACK_SEND_DATA = 8 //CVR»ñÈ¡¼à¿Øµã»Ø´«ÈÎÎñ¿ÉÖ´ÐÐÐÔ
}LONG_CFG_SEND_DATA_TYPE_ENUM;

typedef enum _LONG_CFG_RECV_DATA_TYPE_ENUM_
{
    ENUM_DVR_ERROR_CODE = 1, //´íÎóÂë
    ENUM_MSC_RECV_DATA=2, //ÆÁÄ»¿ØÖÆÆ÷Êý¾ÝÀàÐÍ
    ENUM_ACS_RECV_DATA=3 //ÃÅ½ûÖ÷»úÊý¾ÝÀàÐÍ
}LONG_CFG_RECV_DATA_TYPE_ENUM;

typedef struct tagNET_DVR_WIPER_CONTINUEWORK_PARAM
{
    BYTE  byWorkTimeInterval;//¹¤×÷Ê±¼ä¼ä¸ô£¨µ¥Î»£ºÃë£©[2s~60s]
    BYTE  byRes[3];
    DWORD dwContinueWorkTime;//³ÖÐø¹¤×÷Ê±¼ä£¨µ¥Î»£ºÃë£©[2min~24h]½çÃæÏÔÊ¾°´·ÖÖÓµ¥Î»
    BYTE  byRes1[8];
}NET_DVR_WIPER_CONTINUEWORK_PARAM,*LPNET_DVR_WIPER_CONTINUEWORK_PARAM;

typedef union tagNET_DVR_WIPERMODE_PARAM_UNION
{
    BYTE uLen[16];
    //µ±byWiperWorkMode = 1Ê±ÉúÐ§
    NET_DVR_WIPER_CONTINUEWORK_PARAM struWiperContinueWorkParam; 
}NET_DVR_WIPERMODE_PARAM_UNION,*LPNET_DVR_WIPERMODE_PARAM_UNION;

typedef struct tagNET_DVR_WIPERINFO_CFG
{
    DWORD dwSize;
    //ÓêË¢¹¤×÷Ä£Ê½
    //0-µ¥´ÎÄ£Ê½£¬1-³ÖÐøÄ£Ê½£¨Õë¶ÔÅäÖÃ½á¹¹NET_DVR_ROTATE_OPERATE_PARAM£©
    BYTE  byWiperWorkMode;
    BYTE  byRes[23];
    NET_DVR_WIPERMODE_PARAM_UNION ustruWiperModeParam;
}NET_DVR_WIPERINFO_CFG,*LPNET_DVR_WIPERINFO_CFG;

//±£´æ×Ô¶¯¶Ô½¹²ÎÊý 
typedef struct tagNET_DVR_AUTOFOCUS_TESTCFG
{ 
       DWORD     dwSize;
    DWORD     dwChannel;            //Í¨µÀºÅ
    BYTE      byRes[24];            // ±£Áô×Ö½Ú
}NET_DVR_AUTOFOCUS_TESTCFG,*LPNET_DVR_AUTOFOCUS_TESTCFG;


typedef struct tagNET_DVR_VIDEO_OUT_CFG
{    
    BYTE    byDisplayMode;        //ÏÔÊ¾Ä£Ê½£¬1-±ê×¼£¬2-ÀäÉ«£¬3-Å¯É«£¬0xff-×Ô¶¨Òå
    BYTE     byBrightnessLevel;     // ÁÁ¶ÈÖµ0-100
    BYTE    byContrastLevel;     // ¶Ô±È¶È0-100
    BYTE     bySharpnessLevel;     // Èñ¶È0-100
    BYTE     bySaturationLevel;     // ±¥ºÍ¶È0-100
    BYTE     byHueLevel;         // É«µ÷0-100
    BYTE    byImageMode;        // Í¼ÏñÄ£Ê½£¬0-Õý³£Ä£Ê½£¬1-Ò¹Ä£Ê½1£¬2-Ò¹Ä£Ê½2£¬3-Ò¹Ä£Ê½3£¬4-ÈÕÕÕÄ£Ê½1£¬5-ÈÕÕÕÄ£Ê½2£¬6-ÈÕÕÕÄ£Ê½3
    BYTE    byRes[5];            // ±£Áô
}NET_DVR_VIDEO_OUT_CFG, *LPNET_DVR_VIDEO_OUT_CFG;
//É«ÎÂ
typedef struct tagNET_DVR_COLOR_TEMPERATURE_CFG
{    
    BYTE    byRed;                //ºìÉ«£¬ 0-100
    BYTE    byGreen;            //ÂÌÉ«£¬ 0-100
    BYTE    byBlue;                //À¶É«£¬0-100
    BYTE    byRedOffset;        //ºìÉ«Æ«ÒÆ£¬0-100
    BYTE    byGreenOffset;        //ÂÌÉ«Æ«ÒÆ£¬0-100
    BYTE    byBlueOffset;        //À¶É«Æ«ÒÆ£¬0-100
    BYTE    byRes[6];        
}NET_DVR_COLOR_TEMPERATURE_CFG, *LPNET_DVR_COLOR_TEMPERATURE_CFG;

typedef struct tagNET_DVR_ADC_CFG
{    
    BYTE    byGainR;            //ÔöÒæR£¬ 0-100
    BYTE    byGainG;            //ÔöÒæG£¬0-100
    BYTE    byGainB;            //ÔöÒæB£¬0-100
    BYTE    byOffsetR;            //Æ«ÒÆÁ¿R£¬0-100
    BYTE    byOffsetG;            //Æ«ÒÆÁ¿G£¬0-100
    BYTE    byOffsetB;            //Æ«ÒÆÁ¿B£¬0-100
    BYTE    byRes[6];
}NET_DVR_ADC_CFG, *LPNET_DVR_ADC_CFG;

typedef struct tagNET_DVR_SCREEN_EDGE_CFG
{        
    BYTE    byEnable;            //ÊÇ·ñÆôÓÃÆÁÄ»±ßÔµ 0-²»ÆôÓÃ 1-ÆôÓÃ
    BYTE    byLeftEdge;            //×ó±ßÔµ£¬0-100
    BYTE    byRightEdge;        //ÓÒ±ßÔµ£¬0-100
    BYTE    byTopEdge;            //ÉÏ±ßÔµ£¬0-100
    BYTE    byLowerEdge;        //ÏÂ±ßÔµ£¬0-100
    BYTE    byRes[7];
}NET_DVR_SCREEN_EDGE_CFG, *LPNET_DVR_SCREEN_EDGE_CFG;

typedef struct tagNET_DVR_SCREEN_DISPLAY_CFG
{
    DWORD   dwSize;    
    BYTE    byCfgType;       /*ÉèÖÃµÄ²ÎÊýÀàÐÍ£¬»ñÈ¡Ê±´Ë²ÎÊýÎÞÐ§£¬0-ÎÞÐ§£¬1-±³¹â²ÎÊý£¬2-ÊÓÆµ²ÎÊý£¬3-É«ÎÂ²ÎÊý£¬4-ADC²ÎÊý£¬5-ÆÁÄ»±ßÔµ²ÎÊý*/
    BYTE    byBackLight;    //±³¹â 0~100
    BYTE    byRes1[2];
    NET_DVR_VIDEO_OUT_CFG           struVideoOutCfg;     //ÊÓÆµ²ÎÊý£¨»­ÃæÄ£Ê½£©
    NET_DVR_COLOR_TEMPERATURE_CFG struColorTempCfg;  //É«ÎÂ²ÎÊý
    NET_DVR_ADC_CFG               struAdcCfg;        //ADC²ÎÊý
    NET_DVR_SCREEN_EDGE_CFG       struScreenEdgeCfg; //ÆÁÄ»±ßÔµ²ÎÊý
    BYTE byRes[32];
}NET_DVR_SCREEN_DISPLAY_CFG, *LPNET_DVR_SCREEN_DISPLAY_CFG;
//Ä£ÄâÒ£¿ØÀàÐÍ
typedef enum tagNET_DVR_SCREEN_REMOTE_CTRL_TYPE
{
    REMOTE_CTRL_POWERSUPPLY_OPEN = 1,//1-µçÔ´¿ª
        REMOTE_CTRL_POWERSUPPLY_CLOSE = 2,//2-µçÔ´¹Ø
        REMOTE_CTRL_SIGNALSOURCE,//3-ÐÅºÅÔ´
        REMOTE_CTRL_MENU,//4-²Ëµ¥
        REMOTE_CTRL_DETERMINATION,//5-È·¶¨
        REMOTE_CTRL_ON,//6-ÉÏ
        REMOTE_CTRL_UNDER,//7-ÏÂ
        REMOTE_CTRL_LEFT,//8-×ó
        REMOTE_CTRL_RIGHT,//9-ÓÒ
        REMOTE_CTRL_INFO,//10-INFO
        REMOTE_CTRL_RETURN,// 11-·µ»ØÉÏÒ»²ã    
        REMOTE_CTRL_NUM, //12-Êý×Ö¼üÅÌ
}SCREEN_REMOTE_CTRL_TYPE;

//Ä£ÄâÒ£¿Ø°´¼ü
typedef struct tagNET_DVR_SIMULATE_SCREEN_REMOTE_CTRL
{
    DWORD       dwSize;    
    BYTE        byControlType;    //1-µçÔ´¿ª£¬2-µçÔ´¹Ø£¬3-ÐÅºÅÔ´£¬4-²Ëµ¥£¬5-È·¶¨£¬6-ÉÏ£¬7-ÏÂ£¬8-×ó£¬9-ÓÒ,  10-INFO, 11-·µ»ØÉÏÒ»²ã,12-Êý×Ö°´¼ü,13-¿ª¹ØÒ»Ìå°´¼ü
    BYTE       byControlParam; //²Ù×÷²ÎÊý£¬²Ù×÷ÀàÐÍÎª12Ê±£¬±íÊ¾°´¼üÖµ£¨0-9£©£¬ÆäËû²Ù×÷Ê±´Ë²ÎÊýÎÞÐ§
    BYTE        byRes[14];
}NET_DVR_SIMULATE_SCREEN_REMOTE_CTRL,*LPNET_DVR_SIMULATE_SCREEN_REMOTE_CTRL;

//ÆÁÄ»ÐÅºÅÔ´ÅäÖÃ
typedef struct tagNET_DVR_SCREEN_SIGNAL_CFG
{
    DWORD    dwSize;    
    BYTE     bySignalSourceType;    //ÊäÈëÔ´Ë÷Òý£¬¼ûÃ¶¾Ù NET_DVR_CAM_MODE
    BYTE     byNoSignalPic;            //ÎÞÐÅºÅ»­ÃæÄ£Ê½£¬1-À¶ÆÁ£¬2-ºÚÆÁ£¬3-LOGO»­Ãæ
    BYTE     byRes[14];
}NET_DVR_SCREEN_SIGNAL_CFG, *LPNET_DVR_SCREEN_SIGNAL_CFG;

//ÆÁÄ»Æ´½ÓÅäÖÃ
typedef struct tagNET_DVRSCREEN_SPLICE_CFG
{
    DWORD   dwSize;    
    BYTE    bySpliceIndex;            //×ÔÆ´½ÓÆÁºÅ£¬0¾ÍÊÇÃ»ÓÐÆ´½Ó£¬ÆäËûÖµ±íÊ¾×ÔÆ´½ÓÆÁµÄÆÁºÅ¡£ÀýÈçÆ´½Ó0101~0202Õâ4¿éÆÁ£¬ÔòÕâ4¿éÆÁµÄbySpliceIndex±ØÐëÏàÍ¬£¬ÇÒ·Ç0.
    BYTE    bySpliceX;                //ÆÁÄ»ÔÚ×ÔÆ´½ÓÆÁÖÐµÄÐÐÎ»ÖÃ
    BYTE    bySpliceY;                //ÆÁÄ»ÔÚ×ÔÆ´½ÓÆÁÖÐµÄÁÐÎ»ÖÃ
    BYTE    byWidth;                //Æ´½Ó¹æÄ£¿í£¬ÒÔÆÁÄ»Îªµ¥Î»
    BYTE    byHeight;               //Æ´½Ó¹æÄ£¸ß£¬ÒÔÆÁÄ»Îªµ¥Î»
    BYTE    byRes[11];
}NET_DVR_SCREEN_SPLICE_CFG, *LPNET_DVR_SCREEN_SPLICE_CFG;

//·çÉÈ¹¤×÷·½Ê½ÅäÖÃ
typedef struct tagNET_DVR_SCREEN_FAN_WORK_MODE_CFG
{
    DWORD       dwSize;    
    BYTE        byWorkMode;                 //1-³£¿ª£¬2-×Ô¶¯
    BYTE        byTemperatureLimitValue; //·çÉÈ¿ªÆôµÄÎÂ¶È·§Öµ£¬¹¤×÷Ä£Ê½Îª×Ô¶¯Ê±¸Ã²ÎÊýÓÐÐ§¡£
    BYTE        byRes[14];
}NET_DVR_SCREEN_FAN_WORK_MODE_CFG, *LPNET_DVR_SCREEN_FAN_WORK_MODE_CFG;

//VGAÐÅºÅÅäÖÃ
typedef struct tagNET_DVR_SCREEN_VGA_CFG
{
    DWORD       dwSize;    
    BYTE        byEnableAutoAdjust;      //ÊÇ·ñ×Ô¶¯µ÷Õû£¬0-·ñ£¬1-ÊÇ£¬µ±×Ô¶¯µ÷ÕûÆôÓÃÊ±ÒÔÏÂ²ÎÊýÎÞÐ§
    BYTE        byHorizontalPosition;   //Ë®Æ½Î»ÖÃ 0-100
    BYTE        byVerticalPosition;      //´¹Ö±Î»ÖÃ 0-100
    BYTE        byClock;                //Ê±ÖÓ £¬0-100
    BYTE        byPhase;                //ÏàÎ»£¬0-100
    BYTE        byRes[11];
}NET_DVR_SCREEN_VGA_CFG, *LPNET_DVR_SCREEN_VGA_CFG;

//ÆÁÄ»²Ëµ¥ÅäÖÃ
typedef struct tagNET_DVR_SCREEN_MENU_CFG
{
    DWORD       dwSize;    
    BYTE        byMenuLanguage; //ÓïÑÔ£¬1-ÖÐÎÄ£¬2-Ó¢ÎÄ
    BYTE        byTransparency; //Í¸Ã÷¶È 0-²»Í¸Ã÷£¬1-µÍ£¬2-ÖÐ£¬3-¸ß
    BYTE        byDuration;        //³ÖÐøÊ±¼ä£¬0-³£¿ª£¬1-5Ãë£¬2-15Ãë£¬3-30Ãë
    BYTE        byRes[13];
}NET_DVR_SCREEN_MENU_CFG, *LPNET_DVR_SCREEN_MENU_CFG;

//»­ÖÐ»­
typedef struct tagNET_DVR_PIP_CFG
{
    DWORD   dwSize;    
    BYTE    byEnable;    //ÊÇ·ñÆôÓÃ»­ÖÐ»­ 0-²»ÆôÓÃ 1-ÆôÓÃ
    BYTE    bySubWindowSource;    //×Ó»­ÃæÐÅºÅÔ´£¬²Î¿¼Ã¶¾ÙNET_DVR_CAM_MODE
    BYTE    bySubWindowBorderColor;    //×Ó»­Ãæ±ß¿òÑÕÉ«£¬ 1-À¶É«£¬2-ºÚÉ«
    BYTE    byRes1;
    NET_DVR_RECTCFG  struPosition;    //×Ó»­ÃæÎ»ÖÃ£¬ÆÁÄ»×Ü´óÐ¡Îª100*100
    BYTE    byRes2[12];
}NET_DVR_PIP_CFG, *LPNET_DVR_PIP_CFG;

//Í¸ÎíÅäÖÃ
typedef struct tagNET_DVR_DEFOG_LCD
{
    DWORD   dwSize;    
    BYTE    byDefogEnable;    //¿ªÆôÍ¸Îí¿ª¹Ø£¬0~¹Ø±Õ£¬1~¿ªÆô
    BYTE    byDefogModel;     //Í¸ÎíÄ£Ê½£¬0~×Ô¶¯È¥Îí£¬1~ÊÖ¶¯È¥Îí
    BYTE    byDefogLevel;     //Í¸ÎíÇ¿¶ÈµÈ¼¶£¬1-7¸öµÈ¼¶£¬Ä¬ÈÏµÈ¼¶Îª4¡£µÈ¼¶1Îª0.5£»µÈ¼¶2Îª0.55£»µÈ¼¶3Îª0.60£»µÈ¼¶4Îª0.65£»µÈ¼¶5Îª0.70£»µÈ¼¶6Îª0.75£»µÈ¼¶7Îª0.80¡££¨È¥ÎíÄ£Ê½ÎªÊÖ¶¯È¥ÎíÊ±£¬¿ÉÅäÖÃÈ¥ÎíÇ¿¶ÈµÈ¼¶£©
    BYTE    byRes[33];
}NET_DVR_DEFOG_LCD,*LPNET_DVR_DEFOG_LCD;

//ÆÁÄ»Î¬Ç½
typedef struct tagNET_DVR_SCREEN_WALL_CFG
{
    DWORD    dwSize;
    BYTE    byEnable; //×´Ì¬¿ª¹Ø¡£0-Îª¹Ø±Õ£»1-Îª¿ªÆô
    BYTE    byRes[35];
}NET_DVR_SCREEN_WALL_CFG, *LPNET_DVR_SCREEN_WALL_CFG;

//ÆÁÄ»Î»ÖÃ
typedef struct tagNET_DVR_SCREEN_POS_CFG
{
    DWORD     dwSize;
    BYTE     byScreenRowNum;//ÆÁÄ»ÐÐºÅ¡£
    BYTE     byScreenColNum;//ÆÁÄ»ÁÐºÅ¡£
    BYTE     byRes[34];
}NET_DVR_SCREEN_POS_CFG, *LPNET_DVR_SCREEN_POS_CFG;

typedef struct tagNET_DVR_VIDEO_AUDIOIN_CFG
{
    DWORD     dwSize;     //½á¹¹ÌåµÄ³¤¶È
    DWORD     dwChanNo;   //ÊÓÒôÆµÍ¨µÀºÅ£¬ °ó¶¨ÇÒÆôÓÃºó£¬±»°ó¶¨µÄÓïÒô¶Ô½²Í¨µÀÔò×÷Îª¸ÃÍ¨µÀµÄÒôÆµÔ´
    BYTE      byEnable;   //ÊÇ·ñÆôÓÃÓïÒô¶Ô½²×÷ÎªÒôÆµÊäÈëÔ´ 0-²»ÆôÓÃ 1-ÆôÓÃ
    BYTE      byRes[31];          //±£Áô
}NET_DVR_VIDEO_AUDIOIN_CFG, *LPNET_DVR_VIDEO_AUDIOIN_CFG;

typedef struct _NET_DVR_VCA_DETION_CFG
{    
    DWORD   dwSize; 
    BYTE    byEnable;//Ê¹ÄÜ
    BYTE    byRes1[3];
    NET_DVR_SCHEDTIME    struAlarmSched[MAX_DAYS][MAX_TIMESEGMENT_V30];
    NET_DVR_HANDLEEXCEPTION_V40 struHandleException;  //Òì³£´¦Àí·½Ê½
    DWORD    dwMaxRelRecordChanNum ;  //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD    dwRelRecordChanNum ;     //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ Êý Êµ¼ÊÖ§³ÖµÄÊýÁ¿
    DWORD    dwRelRecordChan[MAX_CHANNUM_V30/*64*/];//´¥·¢Â¼ÏñÍ¨µÀºÅ
    BYTE    byEnablePreset[MAX_CHANNUM_V30];
    BYTE    byPresetNo[MAX_CHANNUM_V30];
    BYTE    byEnableCruise[MAX_CHANNUM_V30];
    BYTE    byCruiseNo[MAX_CHANNUM_V30];
    BYTE    byEnablePtzTrack[MAX_CHANNUM_V30];
    BYTE    byPTZTrack[MAX_CHANNUM_V30];
    NET_DVR_SCHEDTIME struHolidayTime[MAX_TIMESEGMENT_V30/*8*/]; //¼ÙÈÕ²¼·ÀÊ±¼ä
    BYTE  byRes[224];;
}NET_DVR_VCA_DETION_CFG, *LPNET_DVR_VCA_DETION_CFG;

typedef struct tagNET_DVR_VCA_DETECTION_CFG_V40
{    
    DWORD dwSize;  //½á¹¹Ìå´óÐ¡
    BYTE    byEnable;//Ê¹ÄÜ
    BYTE   byRes1[3];
    NET_DVR_SCHEDTIME    struAlarmSched[MAX_DAYS][MAX_TIMESEGMENT_V30];
    DWORD   dwHandleType;        //Òì³£´¦Àí,Òì³£´¦Àí·½Ê½µÄ"»ò"½á¹û   
    /*0x00: ÎÞÏìÓ¦*/
    /*0x01: ¼àÊÓÆ÷ÉÏ¾¯¸æ*/
    /*0x02: ÉùÒô¾¯¸æ*/
    /*0x04: ÉÏ´«ÖÐÐÄ*/
    /*0x08: ´¥·¢±¨¾¯Êä³ö*/
    /*0x10: ´¥·¢JPRG×¥Í¼²¢ÉÏ´«Email*/
    /*0x20: ÎÞÏßÉù¹â±¨¾¯Æ÷Áª¶¯*/
    /*0x40: Áª¶¯µç×ÓµØÍ¼(Ä¿Ç°Ö»ÓÐPCNVRÖ§³Ö)*/
    /*0x200: ×¥Í¼²¢ÉÏ´«FTP*/ 
    DWORD   dwMaxRelAlarmOutChanNum ; //´¥·¢µÄ±¨¾¯Êä³öÍ¨µÀÊý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    DWORD   dwRelAlarmOut[MAX_ALARMOUT_V40/*4128*/]; //* Êµ¼Ê´¥·¢µÄ±¨¾¯Êä³öºÅ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬´ÓÏÂ±ê0¿ªÊ¼Ë³Ðò¶ÁÈ¡£¬Èç¹ûÓöµ½0xffffffffÔòºóÐøÎÞÐ§*/ 
    /*´¥·¢µÄÂ¼ÏñÍ¨µÀ*/
    DWORD     dwMaxRecordChanNum;   //Éè±¸Ö§³ÖµÄ×î´ó¹ØÁªÂ¼ÏñÍ¨µÀÊý-Ö»¶Á
    DWORD     dwRelRecordChan[MAX_CHANNUM_V40/*512*/];     /* Êµ¼Ê´¥·¢Â¼ÏñÍ¨µÀ£¬°´Öµ±íÊ¾,²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬´ÓÏÂ±ê0¿ªÊ¼Ë³Ðò¶ÁÈ¡£¬Èç¹ûÓöµ½0xffffffff,ÔòºóÐøÎÞÐ§*/ 
    DWORD dwEnablePresetChanNum;  //µ±Ç°ÒÑÆôÓÃÔ¤ÖÃµãµÄÊýÄ¿
    NET_DVR_PRESETCHAN_INFO struPresetChanInfo[MAX_CHANNUM_V40/*512*/]; //ÆôÓÃµÄÔ¤ÖÃµãÐÅÏ¢£¬µ±dwEnablePresetChanNum²»Îª0Ê±£¬Êý×éÏÂ±ê0-(dwEnablePresetChanNum -1)ÓÐÐ§£¬µ±Îª0Ê±£¬±íÊ¾Î´ÆôÓÃÔ¤ÖÃµã
    BYTE byRes2[516];                    /*±£Áô*/
    DWORD dwEnableCruiseChanNum;  //µ±Ç°ÒÑÆôÓÃÑ²º½µÄÍ¨µÀÊýÄ¿
    NET_DVR_CRUISECHAN_INFO struCruiseChanInfo[MAX_CHANNUM_V40/*512*/]; //ÆôÓÃÑ²º½¹¦ÄÜÍ¨µÀµÄÐÅÏ¢£¬µ±dwEnableCruiseChanNum²»Îª0Ê±£¬Êý×éÏÂ±ê0-( dwEnableCruiseChanNum -1)ÓÐÐ§£¬µ±Îª0Ê±£¬±íÊ¾Î´ÆôÓÃÑ²º½
    DWORD dwEnablePtzTrackChanNum;  //µ±Ç°ÒÑÆôÔÆÌ¨¹ì¼£Í¨µÀÊýÄ¿
    NET_DVR_PTZTRACKCHAN_INFO struPtzTrackInfo[MAX_CHANNUM_V40/*512*/]; //µ÷ÓÃÔÆÌ¨¹ì¼£µÄÍ¨µÀÐÅÏ¢£¬µ±dwEnablePtzTrackChanNum²»Îª0Ê±£¬Êý×éÏÂ±ê0-(dwEnablePresetChanNum -1)ÓÐÐ§£¬µ±Îª0Ê±£¬±íÊ¾Î´ÆôÓÃÔÆÌ¨¹ì¼£
    NET_DVR_SCHEDTIME struHolidayTime[MAX_TIMESEGMENT_V30]; //¼ÙÈÕ²¼·ÀÊ±¼ä
    BYTE    byRes[224];
}NET_DVR_VCA_DETECTION_CFG_V40, *LPNET_DVR_VCA_DETECTION_CFG_V40;

typedef struct tagNET_DVR_CLOUD_STORAGE_CFG
{
    DWORD    dwSize;  //½á¹¹Ìå´óÐ¡;
    BYTE     byEnableCS;  //¿ªÆôÔÆ´æ´¢·þÎñ  0-¹Ø±Õ 1-¿ªÆô
    BYTE     byRes[511];     //±£Áô
} NET_DVR_CLOUD_STORAGE_CFG, *LPNET_DVR_CLOUD_STORAGE_CFG;


typedef struct tagNET_DVR_CHANS_RECORD_STATUS_CFG
{
    DWORD dwSize ; //½á¹¹Ìå´óÐ¡
    BYTE    byValid;       //ÊÇ·ñÓÐÐ§
                           /*(Ö»¶Á)Â¼ÏñÀàÐÍ£¬0: ²»ÔÚÂ¼Ïñ£»1£ºÔÚÂ¼Ïñ 2-¿ÕÏÐ 
                           3-ÎÞÁ¬½Ó 4-ÎÞÊäÈëÊÓÆµ 5-Î´¼ÓÔØ 6-´æµµÖÐ 7-»Ø´«ÖÐ 
    8-ÓÃ»§Ãû»òÃÜÂë´í 9-Î´ÑéÖ¤,10-´æµµÖÐºÍÂ¼ÏñÖÐ 11-Â¼Ïñ»Ø´«ÖÐºÍÂ¼ÏñÖÐ*/
    BYTE    byRecord;     
    DWORD   dwRelatedHD;  //¹ØÁª´ÅÅÌ
    BYTE    byOffLineRecord;  //¶ÏÍøÂ¼Ïñ¹¦ÄÜ 0-¹Ø±Õ 1-¿ªÆô
    BYTE     byRes[63];        //±£Áô×Ö½Ú
}NET_DVR_CHAN_RECORD_STATUS_CFG, *LPNET_DVR_CHAN_RECORD_STATUS_CFG;

#define  MAX_CAMERAID_LEN    64
typedef struct  tagNET_DVR_UPLOAD_RECORD_INFO
{
    DWORD             dwSize;   
    DWORD             dwRecordType; //Â¼ÏñÀàÐÍ  0- ¶¨Ê±Â¼Ïñ£¬1- ÒÆ¶¯Õì²âÂ¼Ïñ£¬2- ±¨¾¯Â¼Ïñ£¬3- ±¨¾¯»òÒÆ¶¯Õì²âÂ¼Ïñ£¬4- ±¨¾¯ºÍÒÆ¶¯Õì²âÂ¼Ïñ£¬ 5- ÃüÁî´¥·¢£¬6- ÊÖ¶¯Â¼Ïñ£¬7- Õð¶¯±¨¾¯£¬8- »·¾³´¥·¢±¨¾¯£¬9- ÖÇÄÜ±¨¾¯£¬10- »Ø´«Â¼Ïñ
    BYTE              sCameraID[MAX_CAMERAID_LEN]; //camera id;
    NET_DVR_TIME_EX   struStartTime;  //Â¼Ïñ¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_EX   struStopTime;  //Â¼Ïñ½áÊøÊ±¼ä 
    DWORD             dwStoragePoolID; //´æ´¢³ØID
    BYTE              byFormatType ;     //·â×°ÀàÐÍ£º1-ÂãÁ÷£¬2-RTP·â×°£¬3-PS·â×°£¬4-TS·â×°£¬5-Ë½ÓÐ£¬6-FLV£¬7-ASF£¬8-3GP£¬9-RTP+PS£¨¹ú±ê£ºGB28181£©£¬0xff-ÎÞÐ§
    BYTE              byVideoEncType ;       //ÊÓÆµ±àÂëÀàÐÍ£º0-Ë½ÓÐ264£¬1-±ê×¼h264£¬2-±ê×¼mpeg4£¬7-M-JPEG£¬8-MPEG2£¬0xfe- ×Ô¶¯£¨ºÍÔ´Ò»ÖÂ£©£¬0xff-ÎÞÐ§ 
    BYTE              byAudioEncType;  //ÒôÆµ±àÂëÀàÐÍ£º0-G722£¬1-G711_U£¬2-G711_A£¬5-MP2L2£¬6-G726£¬7-AAC£¬0xfe- ×Ô¶¯£¨ºÍÔ´Ò»ÖÂ£©£¬0xff-ÎÞÐ§ 
    BYTE               byRes[125];
}NET_DVR_UPLOAD_RECORD_INFO,*LPNET_DVR_UPLOAD_RECORD_INFO;

//²¹¹âµÆ²ÎÊýÅäÖÃ  Ìõ¼þ½á¹¹Ìå
typedef struct tagNET_DVR_IOOUT_COND
{
    DWORD dwSize;
    BYTE  bySyncOutputNo;//Í¬²½Êä³öºÅ(0-F1,1-F2,2-F3)
    BYTE  byRes[63];
}NET_DVR_IOOUT_COND,*LPNET_DVR_IOOUT_COND;

//²¹¹âµÆ²ÎÊýÅäÖÃ
typedef struct tagNET_DVR_IOOUT_CFG
{
    DWORD  dwSize;
    BYTE   byWorkMode;// 0-±¨¾¯Êä³ö,1-ÆµÉÁµÆ(Ä¬ÈÏ)
    BYTE   byRes1[3];
    union
    {
        BYTE    byUnionLen[128];
        struct
        {
            BYTE   byDefaultState;//Ä¬ÈÏ×´Ì¬ 0-µÍµçÆ½(Ä¬ÈÏ)£¬1-¸ßµçÆ½
            BYTE   byWorkState;//ÉúÐ§×´Ì¬ 0-µÍµçÆ½(Ä¬ÈÏ),1-¸ßµçÆ½,2-Âö³å
            BYTE   byFreqMulti;//±¶Æµ£¬ÊýÖµ·¶Î§[1,15]
            BYTE   byDutyRatio;//Õ¼¿Õ±È£¬[0,40%]
            BYTE   byRes[3];
            BYTE   byFlashLightEnable;    //ÉèÖÃÉÁ¹âµÆÊ±¼äÊ¹ÄÜ:0-¹Ø;1-¿ª
            NET_DVR_SCHEDTIME  struFlashLightTime;//ÆôÓÃÉÁ¹âµÆÊ±¼ä
            BYTE   byRes1[116];
        }struStrobeLamp;    // ÆµÉÁµÆ Ê±ÓÐÐ§
    }uWorkModeInfo;
    BYTE   byRes2[128];
}NET_DVR_IOOUT_CFG,*LPNET_DVR_IOOUT_CFG;

//ÐÅºÅµÆÍ¬²½²ÎÊý
typedef struct tagNET_DVR_SIGNAL_SYNCCFG
{
    DWORD  dwSize;
    WORD   wPhase;//ÏàÎ»(0~360)
    BYTE   byLineLock;//µçÔ´Í¬²½ 0-·ñ£¬1-ÊÇ
    BYTE   byRes[125];
}NET_DVR_SIGNAL_SYNCCFG,*LPNET_DVR_SIGNAL_SYNCCFG;

// Ó©Ê¯EZVIZ½ÓÈë²ÎÊý½á¹¹Ìå
typedef struct
{
    DWORD    dwSize; 
    BYTE    byEnable;// ÆôÓÃEZVIZ½ÓÈë 0¡«½ûÓÃ£¬1¡«ÆôÓÃ
    /********* IPC5.1.7 ÐÂÔö²ÎÊý Begin 2014-03-21***********/
    BYTE    byDeviceStatus; //Éè±¸ÊÇ·ñÔÚÏß×´Ì¬£¬0-±£Áô£¬1-ÔÚÏß£¬2-ÀëÏß
    BYTE    byAllowRedirect;    //ÊÇ·ñÔÊÐíÖØ¶¨Ïò,0-±£Áô,1-ÊÇ,2-·ñ,0±íÊ¾±£³Ö²»±ä,¼æÈÝÀÏSDK½ÓÐÂÉè±¸µÄÇé¿ö
    BYTE    byDomainName[MAX_DOMAIN_NAME];    //ÓòÃû·þÎñÆ÷µØÖ·
    BYTE    byRes [445];
}NET_DVR_EZVIZ_ACCESS_CFG,*LPNET_DVR_EZVIZ_ACCESS_CFG;

typedef struct tagNET_DVR_ALARM_RELATE_COND
{
    DWORD  dwSize;
    /*
    0±íÊ¾ÒÆ¶¯Õì²â£¬ 
    1±íÊ¾ÊÓÆµÕÚµ²£¬ 
    2±íÊ¾ÊÓÆµ¶ªÊ§£¬ 
    3±íÊ¾PIR±¨¾¯£¬ 
    4±íÊ¾ÎÞÏß±¨¾¯£¬ 
    5±íÊ¾ºô¾È±¨¾¯£¬ 
    6±íÊ¾ÖÇÄÜ×¥Í¼£¬ 
    7±íÊ¾ÈËÁ³Õì²â£¬ 
    8±íÊ¾Ô½½çÕì²âÕì²â£¬ 
    9±íÊ¾ÇøÓòÈëÇÖÕì²â£¬ 
    10±íÊ¾³¡¾°±ä¸üÕì²â£¬
    11 ±íÊ¾Òì³£Õì²â£¬
    0xff ±íÊ¾±¨¾¯ÊäÈë
    */
    BYTE  byAlarmType; 
    //Áª¶¯¶¯×÷ 0-ÎÞÐ§,1-×¥Í¼ÉÏ´«FTP,2-Jpeg×¥Í¼ÉÏ´«Email
    BYTE  byRelateActType;
    BYTE  byRes[2];
    //±¨¾¯ÊäÈëºÅ»òÕßÍ¨µÀºÅ»òÕßÎÞÏß±àºÅ
    //(µ±byAlarmType ==0xffÊ±,dwChannel±íÊ¾µÄÊÇ±¨¾¯ÊäÈëºÅ)
    //(µ±byAlarmType ==4Ê±,dwChannel±íÊ¾µÄÊÇÎÞÏß±àºÅ)
    DWORD  dwChannel;
    BYTE  byRes1[64];
}NET_DVR_ALARM_RELATE_COND,*LPNET_DVR_ALARM_RELATE_COND;

typedef struct tagNET_DVR_ALARM_RELATE_CFG
{
    DWORD   dwSize;
    DWORD   dwMaxRelateChanNum ; //´¥·¢µÄ±¨¾¯¹ØÁªÍ¨µÀÊý£¨Ö»¶Á£©×î´óÖ§³ÖÊýÁ¿
    //dwRelateChanµÄ³õÊ¼ÖµÊÇ0xffffffff;Êý×éÄÚÌîÐ´ÊÇÊµ¼ÊµÄÍ¨µÀºÅ;
    DWORD   dwRelateChan[MAX_CHANNUM_V40/*512*/];
    BYTE    byRes1[256];
}NET_DVR_ALARM_RELATE_CFG,*LPNET_DVR_ALARM_RELATE_CFG;

typedef struct tagNET_DVR_PTZ_BASICPARAMCFG
{
    DWORD  dwSize;
    BYTE   byProportionalPan; //ÆôÓÃ±ÈÀý±ä±¶ÅäÖÃ 0-·ñ£¬1-ÊÇ
    BYTE   byPresetFreezing; //ÆôÓÃÔ¤ÖÃµãÊÓÆµ¶³½á 0-·ñ£¬1-ÊÇ
    BYTE   byPresetSpeed;//Ô¤ÖÃµãËÙ¶ÈµÈ¼¶ 1--8£¬Ä¬ÈÏ4
    BYTE   byKeyboardCtrlSpeed;//ÊÖ¿ØËÙ¶ÈµÈ¼¶0-µÍ,1-ÖÐ,2-¸ß
    BYTE   byAutoScanSpeed;//É¨ÃèËÙ¶ÈµÈ¼¶£º1--40£¬Ä¬ÈÏ28
    BYTE   byZoomingSpeed;//±ä±¶ËÙ¶È£º1--3£¬Ä¬ÈÏ3
    BYTE   byManualControlSpeed;//ÊÖ¿ØËÙ¶ÈÄ£Ê½£º0-¼æÈÝ£¬1-ÐÐÈË£¬2-·Ç»ú¶¯³µ£¬3-»ú¶¯³µ£¬4-×ÔÊÊÓ¦
    BYTE   byPTZMotionTrack;//ÆôÓÃÔË¶¯¸ú×Ù£¨Ëø¶¨ÔÆÌ¨²Ù×÷£© 0-Ä¬ÈÏ£¨¿ªÆô£©£¬1-¹Ø±Õ
    BYTE   byRes[124]; 
}NET_DVR_PTZ_BASICPARAMCFG,*LPNET_DVR_PTZ_BASICPARAMCFG;

typedef struct tagNET_DVR_PTZ_OSDCFG
{
    DWORD  dwSize;
    BYTE   byZoomStatus; //¾µÍ·±¶ÊýÏÔÊ¾£º1-2Ãë¡¢2-5Ãë¡¢3-10Ãë¡¢0xff-³£¹Ø¡¢0-³£¿ª£¬Ä¬ÈÏ2Ãë
    BYTE   byPtStatus;    //·½Î»½ÇÏÔÊ¾£º1-2Ãë¡¢2-5Ãë¡¢3-10Ãë¡¢0xff-³£¹Ø¡¢0-³£¿ª£¬Ä¬ÈÏ2Ãë
    BYTE   byPresetStatus;//Ô¤ÖÃµã±êÌâÏÔÊ¾£º1-2Ãë¡¢2-5Ãë¡¢3-10Ãë¡¢0xff-³£¹Ø¡¢0-³£¿ª£¬Ä¬ÈÏ2Ãë
    BYTE   byPositionDisplayFormat;//·½Î»½ÇÏÔÊ¾¸ñÊ½ 0-°´ÕÕPTÏÔÊ¾(Àý P179|T-02)£¬1-°´ÕÕ·½Î»ÏÔÊ¾(SE123|T-02)
    BYTE   byRes[124]; 
}NET_DVR_PTZ_OSDCFG,*LPNET_DVR_PTZ_OSDCFG;

typedef struct tagNET_DVR_PTZ_POWEROFFMEMCFG
{
    DWORD  dwSize;
    BYTE   byResumeTimePoint; //µôµç¼ÇÒäÄ£Ê½£ºOxff-½ûÓÃ¡¢1-30Ãë¡¢2-60Ãë¡¢3-300Ãë¡¢4-600Ãë£¬Ä¬ÈÏ30Ãë
    BYTE   byRes[127]; 
}NET_DVR_PTZ_POWEROFFMEMCFG,*LPNET_DVR_PTZ_POWEROFFMEMCFG;

typedef struct tagNET_DVR_PTZ_LIMITCOND
{
    DWORD  dwSize;
    DWORD  dwChan; //Í¨µÀºÅ
    BYTE   byLimitMode; //ÏÞÎ»Ä£Ê½ 0-±£Áô£¬1-¼ü¿ØÏÞÎ»£¬2-É¨ÃèÏÞÎ»
    BYTE   byRes[63]; 
}NET_DVR_PTZ_LIMITCOND, *LPNET_DVR_PTZ_LIMITCOND;

typedef struct tagNET_DVR_PTZ_LIMITCFG
{
    DWORD  dwSize;
    BYTE   byEnable;//ÆôÓÃÊ¹ÄÜ£¬0-·ñ£¬1-ÊÇ
    BYTE   byLimitStatus; //ÏÞÎ»×´Ì¬ 0-Î´ÏÞÎ»£¬1-ÒÑÏÞÎ»£¨²»¿É±à¼­£© 
    BYTE   byRes[122]; 
}NET_DVR_PTZ_LIMITCFG,*LPNET_DVR_PTZ_LIMITCFG;

typedef struct tagNET_DVR_PTZ_LIMITCTRL
{
    DWORD  dwSize;
    DWORD  dwChan;//Í¨µÀºÅ
    BYTE   byLimitMode; //ÏÞÎ»Ä£Ê½ 0-±£Áô£¬1-¼ü¿ØÏÞÎ»£¬2-É¨ÃèÏÞÎ»
    BYTE   byWorkMode ;//0-ÉèÖÃ£¬1-Çå³ý
    BYTE   byRes[122]; 
}NET_DVR_PTZ_LIMITCTRL,*LPNET_DVR_PTZ_LIMITCTRL;

typedef struct tagNET_DVR_PTZ_LOCKCFG
{
    DWORD   dwSize;
    BYTE   byWorkMode ;//ÔÆÌ¨Ëø¶¨¿ØÖÆ 0-½âËø£¬1-Ëø¶¨
    BYTE   byRes[123]; 
}NET_DVR_PTZ_LOCKCFG,*LPNET_DVR_PTZ_LOCKCFG;

typedef struct tagNET_DVR_PTZLOCKINFO_COND
{
    DWORD   dwSize;
    DWORD   dwChannel ;//Í¨µÀºÅ
    BYTE    byRes[64];
}NET_DVR_PTZLOCKINFO_COND,*LPNET_DVR_PTZLOCKINFO_COND;

typedef struct tagNET_DVR_PTZLOCKINFO
{
    DWORD   dwSize;
    DWORD   dwRemainingSec ;//Ê£ÓàÃëÊý
    BYTE    byRes[128];    //±£Áô×Ö½Ú
}NET_DVR_PTZLOCKINFO, *LPNET_DVR_PTZLOCKINFO;

typedef struct tagNET_DVR_CRUISEPOINT_COND
{
    DWORD  dwSize;
    DWORD  dwChan;//Í¨µÀºÅ
    WORD   wRouteNo;//Ñ²º½Â·¾¶ºÅ
    BYTE   byRes[30];
}NET_DVR_CRUISEPOINT_COND,*LPNET_DVR_CRUISEPOINT_COND;

typedef struct
{
    WORD    wPresetNo;    //Ô¤ÖÃµã
    WORD    wDwell;    //Í£ÁôÊ±¼ä
    BYTE    bySpeed;    //ËÙ¶È
    BYTE    bySupport256PresetNo;//¼æÈÝÖ®Ç°µÄ µÚ256ºÅÔ¤ÖÃµãÊÇ·ñÉúÐ§
    BYTE    byRes[6];
}NET_DVR_CRUISEPOINT_PARAM,*LPNET_DVR_CRUISEPOINT_PARAM;

typedef struct
{
    DWORD  dwSize;
    // ×î´óÖ§³Ö128¸öÑ²º½µã
    NET_DVR_CRUISEPOINT_PARAM struCruisePoint[MAX_CRUISE_POINT_NUM];
    BYTE     Res[64]; //±£Áô
}NET_DVR_CRUISEPOINT_V40, *LPNET_DVR_CRUISEPOINT_V40;

typedef struct tagNET_DVR_TEST_VERSION_HEAD
{
    DWORD        dwSize;
    DWORD        dwParam1;
    BYTE         byParam2;
    BYTE         byRes[31];
}NET_DVR_TEST_VERSION_HEAD, *LPNET_DVR_TEST_VERSION_HEAD;

typedef struct tagNET_DVR_TEST_VERSION_HEAD_V1
{
    DWORD        dwSize;
    DWORD        dwParam1;
    BYTE         byParam2;
    BYTE         byRes[31];
    DWORD        dwParam1_1;
    BYTE         byParam1_2;
    BYTE         byRes1[31];
}NET_DVR_TEST_VERSION_HEAD_V1, *LPNET_DVR_TEST_VERSION_HEAD_V1;

typedef struct tagNET_DVR_TEST_VERSION_HEAD_V2
{
    DWORD        dwSize;
    DWORD        dwParam1;
    BYTE         byParam2;
    BYTE         byRes[31];
    DWORD        dwParam1_1;
    BYTE         byParam1_2;
    BYTE         byRes1[31];
    DWORD        dwParam2_1;
    BYTE         byParam2_2;
    BYTE         byRes2[31];
}NET_DVR_TEST_VERSION_HEAD_V2, *LPNET_DVR_TEST_VERSION_HEAD_V2;

#define MAX_DISPLAY_NUM         512  //×î´óÏÔÊ¾Êä³ö¸öÊý
#define MAX_LEDCONTENT_NUM      512  //ÐéÄâLED×Ö·û´®×î´ó³¤¶È
#define MAX_PPT_CHAN            128     //PPT³¤¶È

typedef struct tagNET_DVR_VIDEOWALLDISPLAYMODE
{
    DWORD dwSize;
    BYTE  byEnable;//Ê¹ÄÜ
    BYTE  byRes1[3];
    NET_DVR_RECTCFG_EX struRect;//×ø±ê·¶Î§£¬ÒÀ¾Ý»ù×¼×ø±ê¼ÆËã³öÖ§³ÖµÄÆ´¿ØÄ£Ê½
    BYTE  sName[NAME_LEN]; //µçÊÓÇ½Ãû³Æ
    BYTE  byRes2[100];
}NET_DVR_VIDEOWALLDISPLAYMODE, *LPNET_DVR_VIDEOWALLDISPLAYMODE;

typedef struct tagNET_DVR_DISPLAYPARAM
{
    DWORD dwDisplayNo;//ÏÔÊ¾Êä³öºÅ
    BYTE  byDispChanType;/*Êä³öÁ¬½ÓÄ£Ê½,1-BNC£¬2-VGA£¬3-HDMI£¬4-DVI£¬5-SDI, 6-FIBER, \
                                    7-RGB, 8-YPrPb, 9-VGA/HDMI/DVI×ÔÊÊÓ¦£¬10-3GSDI,11-VGA/DVI×ÔÊÊÓ¦£¬12-HDBaseT, 0xff-ÎÞÐ§*/

    BYTE  byRes[11];
}NET_DVR_DISPLAYPARAM,*LPNET_DVR_DISPLAYPARAM;

typedef struct tagNET_DVR_DISPLAYCFG
{
    DWORD  dwSize;
    NET_DVR_DISPLAYPARAM struDisplayParam[MAX_DISPLAY_NUM/*512*/] ;
    BYTE  byRes[128];
}NET_DVR_DISPLAYCFG,*LPNET_DVR_DISPLAYCFG;

typedef struct tagNET_DVR_VIDEOWALLDISPLAYPOSITION
{
    DWORD   dwSize;
    BYTE    byEnable;
    BYTE    byRes1[3]; 
    //Ç½ºÅ,1×Ö½ÚÇ½ºÅ+3×Ö½Ú±£Áô
    DWORD    dwVideoWallNo; 
    DWORD   dwDisplayNo;//ÏÔÊ¾Êä³öºÅ
    //×ø±êÐëÎª»ù×¼×ø±êµÄÕûÊý±¶£¨1920*1920£©£¬¿í¶ÈºÍ¸ß¶ÈÖµ²»ÓÃÉèÖÃ£¬¼´Îª»ù×¼Öµ
    NET_DVR_RECTCFG_EX struRectCfg;
    BYTE    byRes2[64];
}NET_DVR_VIDEOWALLDISPLAYPOSITION,*LPNET_DVR_VIDEOWALLDISPLAYPOSITION;

/*´°¿ÚÐÅÏ¢*/
typedef struct tagNET_DVR_VIDEOWALLWINDOWPOSITION
{
    DWORD dwSize;
    BYTE  byEnable;  //´°¿ÚÊ¹ÄÜ,0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ 
    BYTE  byWndOperateMode;  //´°¿Ú²Ù×÷Ä£Ê½£¬0-Í³Ò»×ø±ê£¬1-·Ö±æÂÊ×ø±ê
    BYTE  byRes1[6];
    DWORD dwWindowNo;//´°¿ÚºÅ
    DWORD dwLayerIndex;//´°¿ÚÏà¶ÔÓ¦µÄÍ¼²ãºÅ£¬Í¼²ãºÅµ½×î´ó¼´ÖÃ¶¥£¬ÖÃ¶¥²Ù×÷
    NET_DVR_RECTCFG_EX struRect; //Ä¿µÄ´°¿ÚÍ³Ò»×ø±ê(Ïà¶ÔÏÔÊ¾Ç½)£¬»ñÈ¡»ò°´Í³Ò»×ø±êÉèÖÃÊ±ÓÐÐ§
    NET_DVR_RECTCFG_EX struResolution; //Ä¿µÄ´°¿Ú·Ö±æÂÊ×ø±ê£¬»ñÈ¡»ò°´·Ö±æÂÊ×ø±êÉèÖÃÓÐÐ§
   DWORD dwXCoordinate; //LEDÇøÓò×óÉÏ½ÇX×ø±ê£¨Í³Ò»×ø±ê£©£¬»ñÈ¡»ò°´·Ö±æÂÊ×ø±êÉèÖÃÓÐÐ§
   DWORD dwYCoordinate; //LEDÇøÓò×óÉÏ½ÇY×ø±ê£¨Í³Ò»×ø±ê£©£¬»ñÈ¡»ò°´·Ö±æÂÊ×ø±êÉèÖÃÓÐÐ§
   BYTE  byRes2[36];
}NET_DVR_VIDEOWALLWINDOWPOSITION,*LPNET_DVR_VIDEOWALLWINDOWPOSITION;

typedef struct tagNET_DVR_VIDEO_WALL_INFO
{
    DWORD dwSize;
    //´°¿ÚºÅ£º1×Ö½ÚÇ½ºÅ+1×Ö½Ú±£Áô+2×Ö½Ú´°¿ÚºÅ
    DWORD    dwWindowNo; 
    DWORD   dwSceneNo;//³¡¾°ºÅ
    BYTE    byRes[20];
}NET_DVR_VIDEO_WALL_INFO,*LPNET_DVR_VIDEO_WALL_INFO;

typedef struct tagNET_DVR_VIRTUALLED_PARAM 
{
    DWORD   dwSize;
    BYTE    byEnable; //Ê¹ÄÜ
    BYTE    byDispMode;//ÏÔÊ¾Ä£Ê½£¬1-Í¸Ã÷£¬2-°ëÍ¸Ã÷£¬3-¸²¸Ç
    BYTE    byRes1[6];
    NET_DVR_RGB_COLOR struContentColor;//×ÖÌåÑÕÉ«
    NET_DVR_RGB_COLOR struBackColor;//±³¾°ÑÕÉ«
    NET_DVR_RECTCFG_EX struRect;
    DWORD   dwContentNum;/*×Ö·ûµÄ¸öÊý*/
    BYTE    byLedContent[MAX_LEDCONTENT_NUM/*512*/]; /*ÐéÄâLED×Ö·ûÄÚÈÝ*/
    BYTE    byMoveMode; //×Ö·ûÒÆ¶¯Ä£Ê½£¬1-ÆÕÍ¨£»2-Æ½»¬£¬3-¾²Ö¹
    BYTE    byFontSize; //×ÖÌå´óÐ¡£¬1-1±¶£¬2-2±¶£¬3-4±¶
    BYTE    byMoveDirection; //ÒÆ¶¯·½Ïò£¬0-Ä¬ÈÏ£¨´Ó×óµ½ÓÒ£©£¬1-´Ó×óµ½ÓÒ£¬2-´ÓÓÒµ½×ó£¬3-´ÓÉÏµ½ÏÂ£¬4-´ÓÏÂµ½ÉÏ
    BYTE    byMoveSpeed; //ÒÆ¶¯ËÙ¶È£¬1-ËÙ¶È1,2-ËÙ¶È2
    BYTE    byRes2[124];
}NET_DVR_VIRTUALLED_PARAM,*LPNET_DVR_VIRTUALLED_PARAM;

typedef struct tagNET_DVR_IMAGE_CUT_MODE
{
    DWORD dwSize;
    BYTE  byCutMode;  //Í¼ÏñÇÐ¸îÄ£Ê½£¬1-4:3,2-16:9
    BYTE  byRes[31];
}NET_DVR_IMAGE_CUT_MODE,*LPNET_DVR_IMAGE_CUT_MODE;

typedef struct tagNET_DVR_USING_SERIALPORT
{ 
    DWORD  dwSize ;
    DWORD  dwSerialPort; //µ±Ç°Ê¹ÓÃ´®¿ÚºÅ
    BYTE byProtocolType; //´®¿ÚÐ­ÒéÀàÐÍ£¬1-LCD-S1 , 2-LCD-S2 , 3-LCD-L1 £¬ 4-LCD-DLP£¬ 5-LCD-S3 , 6-LCD-D20£¬7-LCD-L2,8-LCD-Z1£¬9-LCD-D20/D,10-LCD-D20/S,11-LCD-D20/P,12-LCD-D20/T,13-LCD-D20/F,14-LCD-D20/DF,15-LCD-D20/FS,16-LCD-D20/FP,17-LCD-D20/FT,18-LCD-D5022,19-LCD-D5032,20-LCD-D5042+ 
    BYTE byRes[31];
}NET_DVR_USING_SERIALPORT,*LPNET_DVR_USING_SERIALPORT;

typedef struct tagNET_DVR_VIDEOWALLSCENECFG
{
    DWORD dwSize;
    BYTE  sSceneName[NAME_LEN];//³¡¾°Ãû³Æ
    BYTE  byEnable;//³¡¾°ÊÇ·ñÓÐÐ§ 1-ÓÐÐ§£¬0-ÎÞÐ§
    BYTE  bySceneIndex;     //³¡¾°ºÅ£¬Ö»ÄÜ»ñÈ¡¡£»ñÈ¡ËùÓÐ³¡¾°Ê±Ê¹ÓÃ¸Ã²ÎÊý
    BYTE  byRes [78];
}NET_DVR_VIDEOWALLSCENECFG, *LPNET_DVR_VIDEOWALLSCENECFG;

typedef struct tagNET_DVR_SCENE_CONTROL_INFO
{
    DWORD dwSize;
    NET_DVR_VIDEO_WALL_INFO struVideoWallInfo; //µçÊÓÇ½ÐÅÏ¢
    DWORD dwCmd; //³¡¾°¿ØÖÆÃüÁî£¬1-³¡¾°Ä£Ê½ÇÐ»»£¨Èç¹ûÒªÇÐ»»µÄÊÇµ±Ç°³¡¾°£¬Ôò²»½øÐÐÇÐ»»£©£¬2-³õÊ¼»¯³¡¾°£¨½«´Ë³¡¾°µÄÅäÖÃÇå¿Õ£¬Èç¹ûÊÇµ±Ç°³¡¾°£¬ÔòÍ¬Ê±¶Ôµ±Ç°³¡¾°½øÐÐÇåÆÁ²Ù×÷£©£¬3-Ç¿ÖÆÇÐ»»£¨ÎÞÂÛÊÇ·ñÊÇµ±Ç°³¡¾°£¬Ç¿ÖÆÇÐ»»£©£¬4-±£´æµ±Ç°Ä£Ê½µ½Ä³³¡¾° 5-É¾³ý³¡¾° 
    BYTE  byRes[4];
}NET_DVR_SCENE_CONTROL_INFO, *LPNET_DVR_SCENE_CONTROL_INFO;

typedef struct tagNET_DVR_SHOW_CONTROL_INFO
{
    DWORD dwSize;
    DWORD dwDisplayNo;  //ÏÔÊ¾Êä³ö¿ÚºÅ£¬0xffffffff±íÊ¾¶ÔËùÓÃÊä³ö¿Ú½øÐÐ²Ù×÷
    BYTE  byEnable;     //Ê¹ÄÜÏÔÊ¾£¬0-²»ÏÔÊ¾£¬1-ÏÔÊ¾
    BYTE  byChanType;   //ÏÔÊ¾µÄÍ¨µÀÀàÐÍ£¬1-ÏÔÊ¾Í¨µÀºÅ£¬2-ÐéÄâÆÁºÅ
    BYTE  byRes1[2];
    DWORD dwWallNo; //Ç½ºÅ£¬1×Ö½ÚÇ½ºÅ£¨¸ßÎ»£©+3×Ö½Ú±£Áô£¬ÏÔÊ¾ÆÁÄ»ÐòºÅÊ±ÓÐÐ§
    BYTE byRes2[56];
}NET_DVR_SHOW_CONTROL_INFO,*LPNET_DVR_SHOW_CONTROL_INFO;

typedef struct tagNET_DVR_BUF_INFO
{
    void*   pBuf;    //»º³åÇøÖ¸Õë
    DWORD   nLen;    //»º³åÇø³¤¶È
}NET_DVR_BUF_INFO, *LPNET_DVR_BUF_INFO;

typedef struct tagNET_DVR_IN_PARAM
{
    NET_DVR_BUF_INFO struCondBuf;            //Ìõ¼þ»º³åÇø
    NET_DVR_BUF_INFO struInParamBuf;         //²ÎÊý»º³åÇø
    DWORD  dwRecvTimeout;      //½ÓÊÕÊý¾Ý³¬Ê±Ê±¼ä£¬µ¥Î»£ºms,ÖÃ0²ÉÓÃ½Ó¿ÚÄ¬ÈÏ³¬Ê±
    BYTE   byRes[32];
}NET_DVR_IN_PARAM,LPNET_DVR_IN_PARAM;

typedef struct tagNET_DVR_OUT_PARAM
{
    NET_DVR_BUF_INFO struOutBuf;            //Êä³ö²ÎÊý»º³åÇø
    void*  lpStatusList;       //×´Ì¬»º³åÇø    
    BYTE   byRes[32];
}NET_DVR_OUT_PARAM,LPNET_DVR_OUT_PARAM;

typedef struct tagNET_DVR_AUDIO_CHAN_INFO
{
    DWORD dwSize;    
    DWORD dwChannel;   //ÒôÆµÍ¨µÀºÅ×éºÏ£¨1×Ö½ÚÉè±¸ºÅ+1×Ö½Ú×Ó°åºÅ+2×Ö½ÚÒôÆµÍ¨µÀºÅ£©
    BYTE  byRes[48];   
}NET_DVR_AUDIO_CHAN_INFO, *LPNET_DVR_AUDIO_CHAN_INFO; 

typedef struct tagNET_DVR_AUDIO_CHAN_CFG
{
    DWORD         dwSize;
    BYTE          sChanName[NAME_LEN]; //ÒôÆµÍ¨µÀÃû³Æ
    BYTE          byEnable; //ÒôÆµÊÇ·ñ¿ªÆô£¬ 0-¹Ø£¬ 1-¿ª
    BYTE          byAudioSwitchType; //ÒôÆµÇÐ»»·½Ê½£¬1-°´Ç°¶ËÔ´·½Ê½£¬2-°´´°¿Ú½âÂëÔ´·½Ê½ 
    BYTE          byRes[2]; 
    NET_DVR_PU_STREAM_CFG_V41 struAudioSrcInfo;  //ÒôÆµÔ´ÐÅÏ¢ byAudioSwitchTypeÎª1Ê±ÓÐÐ§
    DWORD         dwWindowNo; //×Ó´°¿ÚºÅ£¨1×Ö½ÚÇ½ºÅ+1×Ö½Ú×Ó´°¿ÚºÅ+2×Ö½Ú´°¿ÚºÅ£©£¬byAudioSwitchTypeÎª2Ê±ÓÐÐ§
    BYTE          byRes2[28]; 
}NET_DVR_AUDIO_CHAN_CFG, *LPNET_DVR_AUDIO_CHAN_CFG;

#define MAX_SUBBOARD_NUM        42        //¼¯ÖÐÊ½´óÆÁÉè±¸°åÊýÄ¿
#define MAX_SINGLE_BOARD_EXCEPTION_NUM 16 //µ¥°å×î´ó²¢·¢Òì³£Êý
typedef struct tagNET_DVR_MAINBOARD_SERIAL_CFG
{
    DWORD dwSize;
    BYTE bySerialWorkMode; //´®¿Ú¹¤×÷Ä£Ê½£¬1-RS484,2-RS232
    BYTE byFunType; //´®¿Ú¹¦ÄÜ£¬1-¼üÅÌ¿ØÖÆ£¬2-ÆÁÄ»¿ØÖÆ£¬3-Í¸Ã÷Í¨µÀÄ£Ê½ 4-PTZ¿ØÖÆ  5-¾ØÕó¿ØÖÆ 6-¿ØÖÆÌ¨
    BYTE byDataBit;// Êý¾ÝÓÐ¼¸Î» 0£­5Î»£¬1£­6Î»£¬2£­7Î»£¬3£­8Î»;
    BYTE byStopBit;// Í£Ö¹Î» 0£­1Î»£¬1£­2Î»;
    DWORD dwBaudRate;//²¨ÌØÂÊ0£­50£¬1£­75£¬2£­110£¬3£­150£¬4£­300£¬5£­600£¬6£­1200£¬7£­2400£¬8£­4800£¬9£­9600£¬10£­19200£¬ 11£­38400£¬12£­57600£¬13£­76800£¬14£­115.2k;
    BYTE byParity;// Ð£Ñé 0£­ÎÞÐ£Ñé£¬1£­ÆæÐ£Ñé£¬2£­Å¼Ð£Ñé;
    BYTE byFlowcontrol;// 0£­ÎÞ£¬1£­ÈíÁ÷¿Ø,2-Ó²Á÷¿Ø
    WORD wProtocol;//´®¿ÚÐ­Òé£¬²»Í¬´®¿Ú¹¦ÄÜ¶ÔÓ¦´®¿ÚÐ­Òé²»Ò»Ñù
    BYTE byVariable ;  //´®¿ÚÊÇ·ñ¿É±ä£¬1-²»¿É±ä  2-¿É±ä £¨Ö»»ñÈ¡£©
    BYTE byRes[31];
}NET_DVR_MAINBOARD_SERIAL_CFG, *LPNET_DVR_MAINBOARD_SERIAL_CFG;

typedef struct tagNET_DVR_SUBBOARD_INFO
{
    DWORD      dwSize;   
    BYTE       byBoardType;    //ÀàÐÍ 0-Ö÷°å  1-DVI-IÊäÈë£¬2-YPbPrÊäÈë£¬3-BNCÊäÈë£¬4-SDIÊäÈë£¬ 5-DVIË«Á´Â·ÊäÈë£¬ 6-ÆÕÍ¨½âÂë°åÊäÈë£¬ 7-DVI-IÊä³ö£¬ 8-SDIÊä³ö, 9-ÔöÇ¿ÐÍ½âÂë°åÊäÈë 0xff-Î´ÖªÀàÐÍ
    BYTE       byInterfaceNum;  //½Ó¿ÚÊý
    BYTE       byStatus;        //×´Ì¬£¬0-Òì³££¬ 1-Õý³£
    BYTE       byRes[1]; 
    DWORD      dwSlotNo;       //ËùÔÚ²ÛÎ»ºÅ 
    BYTE       byRes2[32];  
}NET_DVR_SUBBOARD_INFO, *LPNET_DVR_SUBBOARD_INFO; 

typedef struct tagNET_DVR_DEVICE_SUBBOARD_INFO
{
    DWORD     dwSize;
    BYTE      byBackBoardType;  //±³°åÀàÐÍ£¬ 1-4U£¬ 2-8U£¬ 3-13U, 0xff-Î´ÖªÀàÐÍ
    BYTE      bySoltNum;        //²ÛÎ»ÊýÄ¿
    BYTE      byBoardNum;   //ÓÐÐ§ÊýÄ¿
    BYTE      byRes1[1];
    NET_DVR_SUBBOARD_INFO struSubBoadInfo[MAX_SUBBOARD_NUM]; //Ç°byBoardNumÏîÓÐÐ§ 
    BYTE       byRes2[32]; 
}NET_DVR_DEVICE_SUBBOARD_INFO, *LPNET_DVR_DEVICE_SUBBOARD_INFO; 

typedef struct tagNET_DVR_DEVICE_BOARD_EXCEPINFO
{
    DWORD       dwSize;
    BYTE         byExceptNum;         //Òì³£ÏîÊý
    BYTE        byRes1[3];               
    BYTE        byMajor[MAX_SINGLE_BOARD_EXCEPTION_NUM];    //Ö÷ÀàÐÍ
    WORD        wMinor[MAX_SINGLE_BOARD_EXCEPTION_NUM];    //´ÎÀàÐÍ
    BYTE        byRes2[32]; 
}NET_DVR_DEVICE_BOARD_EXCEPINFO, *LPNET_DVR_DEVICE_BOARD_EXCEPINFO;


typedef struct tagNET_DVR_LINEARSCAN
{
    DWORD   dwSize;
    DWORD   dwChan;           //Í¨µÀºÅ
    BYTE    byLinearScanType; //ÏÞÎ»ÀàÐÍ£¬0-±£Áô,1-×ó±ß½çÉèÖÃ,2-ÓÒ±ß½çÉèÖÃ
    BYTE    byRes[63]; 
}NET_DVR_LINEARSCAN, *LPNET_DVR_LINEARSCAN;

//ÂëÁ÷¸½¼ÓÐÅÏ¢
typedef struct tagNET_DVR_STREAM_ATTACHINFO_CFG
{
    DWORD dwSize;          //½á¹¹Ìå´óÐ¡
    BYTE  byStreamWithVca; //ÂëÁ÷ÖÐµþ¼ÓÖÇÄÜÐÅÏ¢£¬¿É¹©½øÐÐºó¼ìË÷¡£0-²»µþ¼Ó,1-µþ¼Ó
    BYTE  byRes[127];      //±£Áô
}NET_DVR_STREAM_ATTACHINFO_CFG,*LPNET_DVR_STREAM_ATTACHINFO_CFG;

typedef struct tagNET_DVR_SUBSYSTEM_NETCFG
{
    DWORD  dwSize;    
    BYTE   byDefaultRoute;  //Ä¬ÈÏÂ·ÓÉ£¬0±íÊ¾struEtherNet[0]£¬1±íÊ¾struEtherNet[1]
    BYTE   byNetworkCardNum;      //Éè±¸Êµ¼Ê¿ÉÅäÖÃµÄÍø¿¨ÊýÄ¿
    BYTE   byRes1[2]; //±£Áô
    NET_DVR_ETHERNET_MULTI struEtherNet [MAX_NETWORK_CARD]; //ÒÔÌ«Íø¿Ú
    BYTE   byRes2[128];
}NET_DVR_SUBSYSTEM_NETCFG, *LPNET_DVR_SUBSYSTEM_NETCFG;

//ÅäÖÃÇå³ý
typedef struct tagNET_DVR_CLEARCTRL
{
    DWORD  dwSize;
    DWORD  dwChan;//Í¨µÀºÅ
    BYTE   byAllPreset; //Çå³ýËùÓÐµÄÔ¤ÖÃµã£º0-·ñ,1-ÊÇ
    BYTE   byAllPatrols; //Çå³ýËùÓÐµÄÑ²º½Â·¾¶£º0-·ñ,1-ÊÇ
    BYTE   byAllPatterms; //Çå³ýËùÓÐµÄ»¨ÑùÉ¨Ãè£º0-·ñ,1-ÊÇ
    BYTE   byAllPrivacyMasks; //Çå³ýËùÓÐµÄÒþË½¿é£º0-·ñ,1-ÊÇ
    BYTE   byAllPTZLimited; //Çå³ýËùÓÐµÄÏÞÎ»ÉèÖÃ£º0-·ñ,1-ÊÇ
    BYTE   byAllScheduledTasks; //Çå³ýËùÓÐµÄ¶¨Ê±ÈÎÎñ£º0-·ñ,1-ÊÇ
    BYTE   byAllParkAction; //Çå³ýËùÓÐµÄÊØÍû£º0-·ñ,1-ÊÇ
    BYTE   byRes[125]; 
}NET_DVR_CLEARCTRL, *LPNET_DVR_CLEARCTRL;

//ÔÆÌ¨ÓÅÏÈÅäÖÃÐÅÏ¢
typedef struct tagNET_DVR_PTZ_PRIORITIZECFG
{
    DWORD  dwSize;
    BYTE   byPTZPrioritize; //ÔÆÌ¨ÓÅÏÈ£º0-Rs485£¬1-ÍøÂç£¬Ä¬ÈÏÍøÂç
    BYTE   byRes[3];
    DWORD   dwDelay; //ÑÓÊ±£º2---200Ãë
    BYTE   byRes1[124]; 
}NET_DVR_PTZ_PRIORITIZECFG, *LPNET_DVR_PTZ_PRIORITIZECFG;

//Áã·½Î»½Ç¿ØÖÆ
typedef struct tagNET_DVR_INITIALPOSITIONCTRL
{
    DWORD  dwSize;
    DWORD  dwChan;//Í¨µÀºÅ
    BYTE   byWorkMode ;//0-ÉèÖÃ£¬1-Çå³ý
    BYTE   byRes[127]; 
}NET_DVR_INITIALPOSITIONCTRL,*LPNET_DVR_INITIALPOSITIONCTRL;

//ÒþË½ÕÚ±Î²ÎÊý
typedef struct tagNET_DVR_PRIVACY_MASKS_COND
{
    DWORD  dwSize;
    DWORD  dwChan; //Í¨µÀºÅ
    BYTE   byRegionalID; //ÇøÓòIDºÅ 1¡«24
    //É¾³ýµ±Ç°ID¶ÔÓ¦µÄÒþË½ÕÚ±ÎÐÅÏ¢ 0-±£Áô£¬1-É¾³ý £¨WriteOnly£©
    BYTE   byDelPrivacyMaskCfg;
    BYTE   byRes[62]; 
}NET_DVR_PRIVACY_MASKS_COND, *LPNET_DVR_PRIVACY_MASKS_COND;

typedef struct tagNET_DVR_PRIVACY_MASKS_CFG
{
    DWORD  dwSize;
    BYTE   byEnable;//ÊÇ·ñÆôÓÃ 0-·ñ£¬1-ÊÇ
    //ÒþË½ÕÚ±ÎÇøÓòÅäÖÃ²ÎÊýÊÇ·ñÏÔÊ¾  0-·ñ£¬1-ÊÇ £¨ReadOnly£©
    BYTE   byPrivacyMaskCfgEnable;
    BYTE   byColorType; //0-±£Áô,1-»Ò¡¢2-ºì¡¢3-ÂÌ¡¢4-À¶¡¢5-³È¡¢6-»Æ¡¢0xff-ÂíÈü¿Ë
    BYTE   byActiveZoomRatio;//ÆÁ±Î±¶ÂÊ£º1--100
    char  sPrivacyMaskName[NAME_LEN/*32*/];//ÕÚµ²ÇøÓòÃû³Æ£¬Ö»Ê¹ÓÃ16¸ö×Ö½Ú
    NET_VCA_POLYGON  struRegion;//ÇøÓò·¶Î§
    //µ±Ç°ÇøÓò×ø±êÊÇ·ñÓÐÐ§ 0-·ñ£¬1-ÊÇ £¨Õë¶Ôµ¥¸öÇøÓòÉèÖÃÇøÓò×ø±êÐÅÏ¢£¬ºÍµ¥³¡¾°ÏÂµÄ¶àÇøÓòÉèÖÃÇøÓò×ø±êÐÅÏ¢£©
    BYTE   byCurrentRegionEnable;
    //µ±Ç°±¶ÂÊÊ¹ÓÃ×Ö¶Î 0- byActiveZoomRatio ;1- fActiveZoomRatio(Ö§³ÖÄÜÁ¦½ÚµãcurActiveZoomRatioType)
    BYTE   byCurZoomRatio ;
    BYTE   byRes[2];
    float  fActiveZoomRatio; //ÆÁ±Î±¶ÂÊ(¾«È·µ½Ð¡Êýµã1Î»)£º[1.0-100.0]
    BYTE   byRes1[120];
}NET_DVR_PRIVACY_MASKS_CFG, *LPNET_DVR_PRIVACY_MASKS_CFG;

//È«¾ÖÊ¹ÄÜ    
typedef struct tagNET_DVR_PRIVACY_MASKS_ENABLECFG
{
    DWORD  dwSize;
    BYTE   byEnable;//ÆôÓÃÊ¹ÄÜ£¬0-·ñ£¬1-ÊÇ
    BYTE   byRes[127]; 
}NET_DVR_PRIVACY_MASKS_ENABLECFG,*LPNET_DVR_PRIVACY_MASKS_ENABLECFG;

//ÖÇÄÜÔË¶¯¸ú×ÙÅäÖÃÐÅÏ¢
typedef struct tagNET_DVR_SMARTTRACKCFG
{
    DWORD dwSize;
    BYTE  byEnable;//Æô¶¯Ê¹ÄÜ 0-·ñ£¬1-ÊÇ
    BYTE  byRes[3];
    DWORD dwDuration;//³ÖÐøÊ±¼ä£º0--300Ãë£¬Ä¬ÈÏ300Ãë
    BYTE  byRes1[124];
}NET_DVR_SMARTTRACKCFG,*LPNET_DVR_SMARTTRACKCFG;

//¸ú×Ù±¶ÂÊ
typedef struct tagNET_DVR_ZOOMRATIOCTRL
{
    DWORD  dwSize;
    DWORD  dwChan;//Í¨µÀºÅ
    BYTE   byRes[128]; 
}NET_DVR_ZOOMRATIOCTRL,*LPNET_DVR_ZOOMRATIOCTRL;


//²¦Âë¿ª¹ØÐÅÏ¢
typedef struct tagNET_DVR_DIAL_SWITCH_CFG
{
    DWORD  dwSize;
    DWORD  dwSwitchState;//²¦ºÅ¿ª¹Ø×´Ì¬
    BYTE   byRes[28]; 
}NET_DVR_DIAL_SWITCH_CFG,*LPNET_DVR_DIAL_SWITCH_CFG;

typedef struct tagNET_ALARM_RECORDFILE_LOSS //Â¼Ïñ¶ªÊ§±¨¾¯×Ó½á¹¹ 
{
    NET_DVR_TIME_EX struInspectStart; //Ñ²¼ì¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_EX struInspectEnd;   //Ñ²¼ì½áÊøÊ±¼ä
    NET_DVR_IPADDR  struIP;           //Â¼Ïñ¶ªÊ§¶ÔÓ¦Í¨µÀµÄIPµØÖ· 
    DWORD  dwChanNo;                //Í¨µÀºÅ
    DWORD  dwIDIndex;                //±àÂëÆ÷ID
    BYTE   sName[STREAM_ID_LEN];       //±àÂëÆ÷Ãû³Æ 
    NET_DVR_TIME_EX struLossStartTime; //Â¼Ïñ¶ªÊ§¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_EX struLossEndTime;   //Â¼Ïñ¶ªÊ§½áÊøÊ±¼ä
    DWORD  dwLostNum;                 //Â¼Ïñ¶ªÊ§¸öÊý 0xffffffff±íÊ¾È«²¿¶ªÊ§
    BYTE   byRes[240];
} NET_ALARM_RECORDFILE_LOSS, *LPNET_ALARM_RECORDFILE_LOSS;

typedef struct tagNET_ALARM_STREAM_EXCEPTION //È¡Á÷Òì³£±¨¾¯  ×Ó½á¹¹ 
{
    NET_DVR_IPADDR  struIP;           //·¢ÉúÊÓÆµÒì³£Í¨µÀµÄIPµØÖ· 
    DWORD  dwChanNo;                //Í¨µÀºÅ
    DWORD  dwIDIndex;                //±àÂëÆ÷ID
    BYTE   sName[STREAM_ID_LEN];       //±àÂëÆ÷Ãû³Æ 
    BYTE   byExceptionCase;           //Òì³£Ô­Òò£¬0-Êý¾ÝÐ´ÈëÒì³£ 1-ÍøÂç½ÓÊÕÒì³£
    BYTE   byRes[307];                //±£Áô
} NET_ALARM_STREAM_EXCEPTION, *LPNET_ALARM_STREAM_EXCEPTION;


typedef struct tagNET_ALARM_RESOURCE_USAGE  //×ÊÔ´Ê¹ÓÃ±¨¾¯ ×Ó½á¹¹
{ 
    BYTE   byLevel;    //Ê¹ÓÃÇé¿ö£¬ÑÏÖØ³Ì¶ÈµÝÔö£º 0-Õý³££¬1-Ò»¼¶¸æ¾¯ÉÏÏÞ 2-¶þ¼¶¸æ¾¯ÉÏÏÞ 3-Èý¼¶¸æ¾¯ÉÏÏÞ  
    BYTE   byRes[491]; //±£Áô
}NET_ALARM_RESOURCE_USAGE, *LPNET_ALARM_RESOURCE_USAGE;

typedef struct tagNET_ALARM_RECORD_EXCEPTION //Â¼ÏñÒì³£±¨¾¯ ×Ó½á¹¹
{ 
    BYTE    byReason;    //Òì³£Ô­Òò 0-Â¼Ïñ¾íÂú 1-Â¼Ïñ¾íÒì³£ 2-ÎÞ¿ÉÓÃlun¾í
    BYTE    byRes1[3];   //±£Áô
    BYTE    sVolumeName[MAX_VOLUMENAME_LEN];
    DWORD  dwVolumeID;  //Â¼Ïñ¾íID£¨Ó²ÅÌºÅ£©
    BYTE    byRes[452];  //±£Áô
}NET_ALARM_RECORD_EXCEPTION, *LPNET_ALARM_RECORD_EXCEPTION;

typedef union tagNET_ALARM_CVR_SUBINFO_UNION  //CVR±¨¾¯×Ó½á¹¹
{
    BYTE byLen[492];   //ÁªºÏÌå³¤¶È
    NET_ALARM_RECORDFILE_LOSS     struRecordLost; //Â¼Ïñ¶ªÊ§
    NET_ALARM_STREAM_EXCEPTION     struStreamException; //È¡Á÷Òì³£
    NET_ALARM_RESOURCE_USAGE     struResourceUsage;  //×ÊÔ´Ê¹ÓÃ
    NET_ALARM_RECORD_EXCEPTION   struRecordException; //Â¼ÏñÒì³£
}NET_ALARM_CVR_SUBINFO_UNION, *LPNET_ALARM_CVR_SUBINFO_UNION;

#define  MAX_VARIABLE_DATA_NUM    65535  //×î´ó¿É±äÊý¾Ý¸öÊý

typedef struct tagNET_DVR_ALARMINFO_DEV_V40
{
    DWORD            dwAlarmType; //±¨¾¯×ÓÀàÐÍ 0-±àÂëÆ÷(Í¨µÀ)ÐÅºÅÁ¿±¨¾¯£»1-Ë½ÓÐ¾í¶þËð»µ£»2- NVR·þÎñÍË³ö£»3-±àÂëÆ÷×´Ì¬Òì³££»4-ÏµÍ³Ê±ÖÓÒì³££»5-Â¼Ïñ¾íÊ£ÓàÈÝÁ¿¹ýµÍ£»6-±àÂëÆ÷(Í¨µÀ)ÒÆ¶¯Õì²â±¨¾¯£»
    //7-±àÂëÆ÷(Í¨µÀ)ÕÚµ²±¨¾¯; 8-Â¼Ïñ¶ªÊ§±¨¾¯; 9-ÊÓÆµÊµÊ±¼à²â±¨¾¯; 10-×ÊÔ´Ê¹ÓÃÂÊ¸æ¾¯; 11- CVR×Ô¶¯ÐÞ¸´Òì³££¬ 12-Â¼ÏñÒì³£
    NET_DVR_TIME     struTime;
    NET_ALARM_CVR_SUBINFO_UNION  uSubAlarmInfo; //±¨¾¯ÐÅÏ¢×Ó½á¹¹ ±¨¾¯ÀàÐÍÎª8,9,10,11,12Ê±¸ÃÁªºÏÌåÓÐÐ§
    BYTE             byRes[256];
    DWORD            dwNumber; //¿É±äÊý¾Ý¸öÊý
    WORD             *pNO; //µ±ÀàÐÍÎª0¡¢3¡¢6¡¢7Ê±£¬¿ÉÄÜ»áÓÐÍ¨µÀºÅ£»µ±ÀàÐÍÎª5Ê±£¬¿ÉÄÜ»áÓÐ´ÅÅÌºÅ¡£¿É±íÊ¾µÄÖµ·¶Î§Îª0~65535    
}NET_DVR_ALARMINFO_DEV_V40, *LPNET_DVR_ALARMINFO_DEV_V40;

typedef struct tagNET_DVR_CONTROL_START_CFG //Ò»¼ü¿ªÊ¼¿ØÖÆÐÅÏ¢
{
    BYTE    byUseDefine; //Ê¹ÓÃ×Ô¶¨Òå£¬ 0-Ê¹ÓÃÄ¬ÈÏ£¬1-Ê¹ÓÃ×Ô¶¨Òå
    BYTE    byRes1;
    WORD    wCourseIndex; //¿Î³ÌË÷Òý
    BYTE    byRes[128];
}NET_DVR_CONTROL_START_CFG, *LPNET_DVR_CONTROL_START_CFG;

typedef struct tagNET_DVR_CONTROL_DELAY_CFG//Ò»¼üÑÓ³¤Â¼Ïñ¿ØÖÆÐÅÏ¢
{
    BYTE    byUseDefine; //Ê¹ÓÃ×Ô¶¨Òå£¬ 0-Ê¹ÓÃÄ¬ÈÏ£¬1-Ê¹ÓÃ×Ô¶¨Òå
    BYTE    byRes1;
    WORD    wDelayTime; //Â¼ÏñÑÓ³¤Ê±¼ä<¼ÌÐøÂ¼ÏñÊ±¼äÒÔ´ËÎª×¼>£¬µ¥Î»s
    BYTE    byRes[128];
}NET_DVR_CONTROL_DELAY_CFG, *LPNET_DVR_CONTROL_DELAY_CFG;

typedef union tagNET_DVR_CONTROL_INFO_UNION  //¿ØÖÆÐÅÏ¢ÁªºÏÌå
{
    BYTE    byLen[132]; //ÁªºÏÌå³¤¶È
    NET_DVR_CONTROL_START_CFG  struStartCfg;   //Ò»¼ü¿ªÊ¼
    NET_DVR_CONTROL_DELAY_CFG  struDelayCfg;  //Ò»¼üÑÓ³Ù
}NET_DVR_CONTROL_INFO_UNION, *LPNET_DVR_CONTROL_INFO_UNION;

typedef struct  tagNET_DVR_RECORDING_CONTROL_CFG_
{
    DWORD    dwSize;        //½á¹¹Ìå´óÐ¡
    WORD    wCmdType;    //¿ØÖÆÃüÁîÀàÐÍ£¬0-Ò»¼ü¿ªÊ¼£¬1-Ò»¼ü½áÊø£¬2-Ò»¼üÔÝÍ££¬3-Ò»¼ü»Ö¸´£¬4-Ò»¼üÑÓ³¤,5-Ò»¼ü¿ªÊ¼ÆÁ±Î 6-Ò»¼üÍ£Ö¹ÆÁ±Î
    BYTE    byRes1 [2]; //±£Áô
    NET_DVR_CONTROL_INFO_UNION struControlInfo; //¿ØÖÆÐÅÏ¢£¬¾ßÌåÊ¹ÓÃ½áºÏ¿ØÖÆÃüÁîÀàÐÍ
    BYTE    byRes[256]; //±£Áô
}NET_DVR_RECORDING_CONTROL_CFG, *LPNET_DVR_RECORDING_CONTROL_CFG;

typedef struct tagNET_DVR_RECORDING_HOST_CFG
{
    DWORD     dwSize;  //½á¹¹Ìå´óÐ¡
    DWORD    dwOneKeyDelayTime; //Ò»¼ü±¾µØÑÓ³ÙÊ±¼ä  Â¼Ïñ¼ÌÐøÂ¼µÄÊ±¼ä µ¥Î» S
    BYTE     byDirectedMode; //µ¼²¥Ä£Ê½£¬0-×Ô¶¯µ¼²¥£¬1ÊÖ¶¯µ¼²¥
    BYTE     byClassroomType;    //½ÌÊÒÀàÐÍ£¬0-ÎÞÐ§£¬1-Ö÷½ÌÊÒ£¬2-´Ó½ÌÊÒ
    BYTE     byCourseDataStorageEnabled;//¿ÎÌÃÊý¾ÝÍ³¼ÆÊÇ·ñ´æ´¢ÔÚÓ²ÅÌ, 0-²»´æ´¢£¬1-´æ´¢
    BYTE     byRes[125];     //±£Áô
}NET_DVR_RECORDING_HOST_CFG, *LPNET_DVR_RECORDING_HOST_CFG;

typedef struct tagNET_DVR_STATISTIC_DATA_COND
{
    DWORD        dwSize;
    DWORD        dwTypeTarget; //Í³¼Æ¶ÔÏóÀàÐÍ£¬Ïê¼ûTARGET_TYPE
    NET_DVR_TIME   struStartTime;//¿ªÊ¼Í³¼ÆÊ±¼ä
    NET_DVR_TIME   struStopTime;//½áÊøÍ³¼ÆÊ±¼ä
    BYTE        byRes[280];
}NET_DVR_STATISTIC_DATA_COND, *LPNET_DVR_STATISTIC_DATA_COND;

typedef struct tagNET_DVR_STATISTIC_DATA_CFG
{
    DWORD        dwSize;
    DWORD        dwTypeTarget; //Í³¼Æ¶ÔÏóÀàÐÍ£¬Ïê¼ûTARGET_TYPE
    NET_DVR_TIME   struStartTime;//ÊÂ¼þ¿ªÊ¼Ê±¼ä
    NET_DVR_TIME   struStopTime;//ÊÂ¼þ½áÊøÊ±¼ä
    BYTE        byRes[300];
}NET_DVR_STATISTIC_DATA_CFG, *LPNET_DVR_STATISTIC_DATA_CFG;

//typedef enum
//{
//    NET_SDK_ALL_TARGET = 0,          //Í³¼ÆËùÓÐ¶ÔÏó
//    NET_SDK_PPT_TARGET_ALARM,     //PPT±¨¾¯
//    NET_SDK_PPT_TARGET_VIEW,       //PPTÊÓÍ¼
//    NET_SDK_STU_SINGLE_ALARM,     //µ¥¸öÑ§Éú±¨¾¯
//    NET_SDK_STU_SINGLE_VIEW,       //µ¥¸öÑ§ÉúÊÓÍ¼
//    NET_SDK_SUT_MULT_ALARM,       //¶à¸öÑ§Éú±¨¾¯
//    NET_SDK_STU_MULT_VIEW,         //¶à¸öÑ§ÉúÊÓÍ¼
//    NET_SDK_STU_TEACHER_VIEW,     //Ê¦Éú»¥¶¯ÊÓÍ¼
//    NET_SDK_TEA_UP_DOWN_ALARM,  //½ÌÊ¦ÉÏÏÂ½²Ì¨
//    NET_SDK_TEA_START_VIEW,        //½ÌÊ¦ÊÚ¿ÎÊÓÍ¼
//    NET_SDK_BLA_WRITE_ALARM,      //ÊéÐ´°åÊé±¨¾¯
//    NET_SDK_BLA_WRITE_VIEW,       //ÊéÐ´°åÊéÊÓÍ¼
//    NET_SDK_TEA_FULL_VIEW,         //½ÌÊ¦È«¾°ÊÓÍ¼
//    NET_SDK_TEA_START_ALARM,      //½ÌÊ¦¿ªÊ¼ÊÚ¿Î±¨¾¯
//    NET_SDK_TEA_WALK_ALARM,      //½ÌÊ¦×ß¶¯±¨¾¯
//    NET_SDK_TEA_LEFT_ALARM,       //½ÌÊ¦Àë¿ª±¨¾¯
//    NET_SDK_TEA_RUN_ALARM,        //½ÌÊ¦±¼ÅÜ±¨¾¯
//    NET_SDK_TEA_MULT_ALARM       //½ÌÊ¦¶àÈË±¨¾¯
//}TARGET_TYPE;

typedef struct tagNET_DVR_AUTO_TRACK_CFG
{
    DWORD  dwSize;   //½á¹¹Ìå´óÐ¡
    NET_DVR_DIRECT_CONNECT_CHAN_INFO struSDIInfo[MAX_CHANNUM_V30] ; 
    //SDIÍ¨µÀ£¬Éè±¸¶ËÊµ¼ÊµÄÁ÷·µ»ØÐÎÊ½ÊÇÄ£ÄâÍ¨µÀ£¬¶ø¿ØÖÆÇ°¶ËÊ¹ÓÃIPÍ¨µÀ¡£
    BYTE   byCameraType[MAX_CHANNUM_V30];     //Í¨µÀ½ÓÈëµÄÏà»úÀàÐÍ£¬ÖµÎª 0-ÎÞÒâÒå£¬1-ÀÏÊ¦¸ú×Ù£¬2-Ñ§Éú¸ú×Ù£¬3-ÀÏÊ¦È«¾°£¬4-Ñ§ÉúÈ«¾°£¬5-¶àÃ½Ìå£¬0xff-Î´½ÓÈë
    BYTE   byRes[64];     //±£Áô
}NET_DVR_AUTO_TRACK_CFG, *LPNET_DVR_AUTO_TRACK_CFG; 

typedef struct tagNET_DVR_PUBLISH_FTP_CFG
{
    BYTE                byProtocolType;    //Ð­ÒéÀàÐÍ 0-FTP£¬1-SFTP
    BYTE                byRes1;     //±£Áô
    WORD                wFTPPort;  //¶Ë¿Ú
    BYTE                   byAddress[MAX_DOMAIN_NAME];  //IP»òÕßÓòÃû,ÐèÒªÉè±¸½âÎö
    //½âÎö·½Ê½ÎªÓÐ×ÖÄ¸´æÔÚÇÒÓÐ'.'ÔòÈÏÎªÊÇÓòÃû,·ñÔòÎªIPµØÖ·
    BYTE                szUserName[NAME_LEN/*32*/];        //ÓÃ»§Ãû<¼ÓÃÜ>
    BYTE                szPassWord[PASSWD_LEN/*16*/];        //ÃÜÂë<¼ÓÃÜ>
    BYTE                szCustomDir[128];    //·¢²¼Ä¿Â¼,Ö§³ÖÄ¿Â¼½á¹¹
    BYTE                byRes[12]; //±£Áô
} NET_DVR_PUBLISH_FTP_CFG, *LPNET_DVR_PUBLISH_FTP_CFG;

typedef struct tagNET_DVR_PUBLISH_HTTP_CFG
{
    BYTE   strUrl[256]; //·¢²¼µÄURLµØÖ·ÐÅÏ¢
}NET_DVR_PUBLISH_HTTP_CFG, *LPNET_DVR_PUBLISH_HTTP_CFG;

typedef struct tagNET_DVR_PUBLISH_FTP_CFG_DIR
{
    BYTE                byProtocolType;    //Ð­ÒéÀàÐÍ 0-FTP£¬1-SFTP
    BYTE                byRes1;     //±£Áô
    WORD                wFTPPort;  //¶Ë¿Ú
    BYTE               byAddress[MAX_DOMAIN_NAME];  //IP»òÕßÓòÃû,ÐèÒªÉè±¸½âÎö
    //½âÎö·½Ê½ÎªÓÐ×ÖÄ¸´æÔÚÇÒÓÐ'.'ÔòÈÏÎªÊÇÓòÃû,·ñÔòÎªIPµØÖ·
    BYTE                szUserName[NAME_LEN/*32*/];        //ÓÃ»§Ãû<¼ÓÃÜ>
    BYTE                szPassWord[PASSWD_LEN/*16*/];        //ÃÜÂë<¼ÓÃÜ>
    BYTE                  byDirLevel;                     /*0 = ²»Ê¹ÓÃÄ¿Â¼½á¹¹£¬Ö±½Ó±£´æÔÚ¸ùÄ¿Â¼,1 = Ê¹ÓÃ1¼¶Ä¿Â¼,2=Ê¹ÓÃ2¼¶Ä¿Â¼*/
    BYTE                byTopDirMode;         /* Ò»¼¶Ä¿Â¼£¬0x1 = Ê¹ÓÃÉè±¸Ãû,0x2 = Ê¹ÓÃÉè±¸ºÅ,0x3 = Ê¹ÓÃÉè±¸ipµØÖ·                     0xff=Ê¹ÓÃ×Ô¶¨Òå*/
    BYTE                bySubDirMode;         /*¶þ¼¶Ä¿Â¼£¬0x1=Ê¹ÓÃÍ¨µÀÃû³Æ,0x2=Ê¹ÓÃÍ¨µÀºÅ£¬0x3=Ê¹ÓÃ¿Î³ÌÃû³Æ£¬0x4-Ê¹ÓÃÊÚ¿ÎÈÕÆÚ£¬0xff-Ê¹ÓÃ×Ô¶¨Òå*/
    BYTE              byRes2;
    BYTE               byTopCustomDir[MAX_CUSTOMDIR_LEN/*32*/];/*×Ô¶¨ÒåÒ»¼¶Ä¿Â¼*/
    BYTE               bySubCustomDir[MAX_CUSTOMDIR_LEN/*32*/];/*×Ô¶¨Òå¶þ¼¶Ä¿Â¼*/   
    BYTE                byRes[72]; //±£Áô
}NET_DVR_PUBLISH_FTP_CFG_DIR, *LPNET_DVR_PUBLISH_FTP_CFG_DIR;


typedef  union tagNET_DVR_PUBLISH_ADD_UNION
{
    BYTE    byLen[256]; //ÁªºÏÌå³¤¶È
    NET_DVR_PUBLISH_HTTP_CFG struHttpCfg; //httpµØÖ·ÐÅÏ¢
    NET_DVR_PUBLISH_FTP_CFG  struFtpCfg;  //ftpµØÖ·ÐÅÏ¢
    NET_DVR_PUBLISH_FTP_CFG_DIR struDirFtpCfg;  //°´Ä¿Â¼·½Ê½µÄFTP
}NET_DVR_PUBLISH_ADD_UNION, *LPNET_DVR_PUBLISH_ADD_UNION;

typedef struct  tagNET_DVR_CHAN_RECORD_PUBLISH_INFO //Í¨µÀÂ¼Ïñ·¢²¼ÐÅÏ¢
{
    BYTE    byPublish; //ÊÇ·ñ·¢²¼£¬0-²»·¢²¼£¬ 1-·¢²¼
    BYTE    byRes1[3];
    DWORD  dwStreamType;   //Ò»¼ü·¢²¼ÂëÁ÷ÀàÐÍ£¬°´Î»±íÊ¾
    //&0x1-±íÊ¾Ö÷ÂëÁ÷ 
    //&0x2-±íÊ¾×ÓÂëÁ÷
    //&0x4-±íÊ¾ÂëÁ÷Èý
    BYTE    byRes[12];     //±£Áô
}NET_DVR_RECORD_PUBLISH_INFO,*LPNET_DVR_RECORD_PUBLISH_INFO;


typedef struct tagNET_DVR_PUBLISH_CFG
{
    DWORD  dwSize;  //½á¹¹Ìå´óÐ¡
    BYTE   byPublishType;    //·¢²¼·½Ê½£¬0-http,1-ftp,2-Dir FTP
    BYTE   byRes1[3]; //±£Áô
    NET_DVR_PUBLISH_ADD_UNION struPublishAddr;  //Ò»¼ü·¢²¼µØÖ·ÐÅÏ¢
    NET_DVR_RECORD_PUBLISH_INFO  struChanPublish[MAX_CHANNUM_V30]; //Í¨µÀÂ¼Ïñ·¢²¼ÐÅÏ¢ struChanPublis[0]±íÊ¾Í¨µÀ1¶ÔÓ¦Â¼Ïñ·¢²¼ÐÅÏ¢
    NET_DVR_RECORD_PUBLISH_INFO struDirectChanPublish; //µ¼²¥Í¨µÀÂ¼Ïñ·¢²¼ÐÅÏ¢
    BYTE                  byUploadTime;      //ÊÇ·ñÆô¶¯¶¨Ê±ftpÉÏ´«¹¦ÄÜ 0-ÎÞÒâÒå£¬1-²»Æô¶¯£¬2-ÆôÓÃ
    BYTE                byTimerMode;      //0-ÎÞÒâÒå£¬1-°´¿Î±í¶¨Ê±ÉÏ´«×î½üÒ»½Ú¿ÎµÄÂ¼Ïñ£¬2-°´Ê±¼äµã·½Ê½ÉÏ´«Ç°24Ð¡Ê±Â¼Ïñ
    BYTE                  byUploadStartHour;    //°´Ê±¼ä¶¨Ê±ÉÏ´«ÆðÊ¼Ê±¼ä  Ê±
    BYTE                byUoploadStartMin;    //°´Ê±¼ä¶¨Ê±ÉÏ´« ¿ªÊ¼Ê±¼ä ·Ö
    BYTE                byRes[1020]; //±£Áô
}NET_DVR_PUBLISH_CFG, *LPNET_DVR_PUBLISH_CFG;

typedef struct tagNET_DVR_ONEKEY_PUBLISH_CFG
{
    DWORD  dwSize;  //½á¹¹Ìå´óÐ¡
    BYTE  byUseDefine;  //Ê¹ÓÃ×Ô¶¨Òå  0-Ê¹ÓÃÄ¬ÈÏ·¢²¼ÅäÖÃÐÅÏ¢£¬1-Ê¹ÓÃ×Ô¶¨Òå·¢²¼ÅäÖÃÐÅÏ¢
    BYTE  byRes1[3];
    NET_DVR_RECORD_PUBLISH_INFO struChanPublish[MAX_CHANNUM_V30]; //Í¨µÀÂ¼Ïñ·¢²¼ÐÅÏ¢ struChanPublis[0]±íÊ¾Í¨µÀ1¶ÔÓ¦Â¼Ïñ·¢²¼ÐÅÏ¢
    NET_DVR_RECORD_PUBLISH_INFO struDirectChanPublish; //µ¼²¥Í¨µÀÂ¼Ïñ·¢²¼ÐÅÏ¢
    NET_DVR_TIME_EX  struStartTime;  //¿Î³Ì¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_EX  struEndTime;   //¿Î³Ì½áÊøÊ±¼ä
    BYTE    bySchedulePublish;  //ÊÇ·ñ°´¿Î±í·¢²¼£¬0²»°´¿Î±í·¢²¼1°´¿Î±í·¢²¼
    BYTE    sFileName[COURSE_NAME_LEN/*32*/];  //·¢²¼ÎÄ¼þÃû³Æ
    BYTE    byRes[31];
}NET_DVR_ONEKEY_PUBLISH_CFG,*LPNET_DVR_ONEKEY_PUBLISH_CFG;

typedef struct  tagNET_DVR_COURSE_RECORDING_INFO
{
    DWORD    dwSize;  
    char    sCourseName[COURSE_NAME_LEN/*32*/];  
    char    sInstructorName[INSTRUCTOR_NAME_LEN/*16*/]; 
    char    sCourseDescription[COURSE_DESCRIPTION_LEN /*256*/];
    BYTE    byIndex;        //¿Î³ÌË÷Òý
    BYTE    byRes[15];
}NET_DVR_COURSE_RECORDING_INFO, *LPNET_DVR_COURSE_RECORDING_INFO;

typedef struct tagNET_DVR_EACH_LESSON_INFO_
{
    NET_DVR_SCHEDTIME struSchedTime ;   //¿Î³ÌÆðÖ¹Ê±¼ä
    WORD  wCourseIndex ;        //¿Î³ÌË÷Òý
    WORD  wSessionIndex ;        //½Ú´Î
    BYTE   byRes[4] ;            //±£Áô
}NET_DVR_EACH_LESSON_INFO,*LPNET_DVR_EACH_LESSON_INFO ;
// Á÷Â¼Ïñ×´Ì¬
typedef struct tagNET_DVR_CURRICULUM_CFG  //¿Î±í¼Æ»® °´ÄêÔÂÈÕÅäÖÃ
{ 
    DWORD  dwSize ;         //½á¹¹Ìå´óÐ¡
    NET_DVR_EACH_LESSON_INFO struLessonInfo[MAX_TIMESEGMENT_V40/*16*/] ; //Ã¿½Ú¿ÎÐÅÏ¢
    BYTE   byRes[256] ; //±£Áô
}NET_DVR_CURRICULUM_CFG, *LPNET_DVR_CURRICULUM_CFG;

typedef  struct  tagNET_DVR_DATE_
{
    WORD         wYear;        //Äê
    BYTE        byMonth;        //ÔÂ    
    BYTE         byDay;        //ÈÕ                        
}NET_DVR_DATE,*LPNET_DVR_DATE;

typedef struct _NET_DVR_PPT_DETECT_CFG_
{
    DWORD    dwSize ;
    BYTE    byEnablePPTDetect; //ÊÇ·ñÆôÓÃPPT¼ì²â
    BYTE    byPptDetLevel; //ÁéÃô¶È
    BYTE    byEnablePartScreen; //ÊÇ·ñÅäÖÃ²¿·ÖÇøÓò
    BYTE    byRes1;
    WORD    wX; //ÇøÓò×ø±ê
    WORD    wY;
    WORD    wWidth;
    WORD    wHeight;
    BYTE    byRes[32];
}NET_DVR_PPT_DETECT_CFG,*LPNET_DVR_PPT_DETECT_CFG;

typedef struct _NET_DVR_PPT_CHANNEL_CFG_
{
    DWORD    dwSize ;
    BYTE    byChan[MAX_PPT_CHAN]; 
    BYTE    byRes[32];
}NET_DVR_PPT_CHANNEL_CFG,*LPNET_DVR_PPT_CHANNEL_CFG;

typedef struct tagNET_DVR_BACKUP_RECORD_INFO
{
    BYTE   byEnable;   //ÊÇ·ñÆôÓÃ
    BYTE   byRes[11];
    //±¸·ÝÂëÁ÷ÀàÐÍ£¬°´Î»±íÊ¾
    //&0x1-±íÊ¾Ö÷ÂëÁ÷ 
    //&0x2-±íÊ¾×ÓÂëÁ÷
    //&0x4-±íÊ¾ÂëÁ÷Èý
    DWORD  dwStreamType;  
}NET_DVR_BACKUP_RECORD_INFO, *LPNET_DVR_BACKUP_RECORD_INFO;

typedef struct tagNET_DVR_BACKUP_RECORD_PARAM
{
    DWORD     dwSize ;
    NET_DVR_BACKUP_RECORD_INFO   struChanBackUp[MAX_CHANNUM_V30/*64*/];  //ÐèÒª±¸·ÝµÄÍ¨µÀ,Êý×éÏÂ±ê¶ÔÓ¦ÏàÓ¦µÄÍ¨µÀºÅ
    NET_DVR_BACKUP_RECORD_INFO   struDirectedChanBackUp;  //µ¼²¥Í¨µÀ±¸·ÝÐÅÏ¢
    BYTE    byRes[256];      // ±£Áô×Ö½Ú 
}NET_DVR_BACKUP_RECORD_PARAM, *LPNET_DVR_BACKUP_RECORD_PARAM;

//ÊÒÄÚ»ú±àºÅ
typedef struct tagNET_DVR_INDOOR_UNIT_DEVICEID
{
    SHORT wFloorNumber;   //²ãºÅ
    WORD  wRoomNumber;    //·¿¼äºÅ
    WORD  wDevIndex;      //ÊÒÄÚ»ú±àºÅ£¬0-10
    BYTE  byRes[122];     //±£Áô
}NET_DVR_INDOOR_UNIT_DEVICEID,*LPNET_DVR_INDOOR_UNIT_DEVICEID;

//ÃÅ¿Ú»ú±àºÅ
typedef struct tagNET_DVR_OUTDOOR_UNIT_DEVICEID
{
    WORD wPeriod;  //ÆÚºÅ, ·¶Î§[0,9]
    WORD wBuildingNumber; //Â¥ºÅ
    WORD wUnitNumber;  //µ¥ÔªºÅ
    SHORT wFloorNumber;  //²ãºÅ
    WORD wDevIndex;  //ÃÅ¿Ú»úÐòºÅ£¬Ã¿Ò»²ãÖÐÃÅ¿Ú»úµÄÐòºÅÎ¨Ò»£¬´Ó0¿ªÊ¼
    BYTE byRes[118]; //±£Áô
}NET_DVR_OUTDOOR_UNIT_DEVICEID,*LPNET_DVR_OUTDOOR_UNIT_DEVICEID;

//Î§Ç½»ú±àºÅ
typedef struct tagNET_DVR_OUTDOOR_FENCE_DEVICEID
{
    WORD wPeriod;  //ÆÚºÅ, ·¶Î§[0,9]
    WORD wDevIndex;  //Î§Ç½»úÐòºÅ£¬Ã¿Ò»²ãÖÐÃÅ¿Ú»úµÄÐòºÅÎ¨Ò»£¬´Ó0¿ªÊ¼
    BYTE byRes[124]; //±£Áô
}NET_DVR_OUTDOOR_FENCE_DEVICEID,*LPNET_DVR_OUTDOOR_FENCE_DEVICEID;

//¹ÜÀí»ú±àºÅ
typedef struct tagNET_DVR_MANAGE_UNIT_DEVICEID
{
    WORD wPeriod; //ÆÚºÅ£¬·¶Î§[0,9]
    WORD wDevIndex;  //¹ÜÀí»úÐòºÅ£¬Ã¿Ò»ÆÚÖÐ¹ÜÀí»úµÄÐòºÅÎ¨Ò»,´Ó0¿ªÊ¼
    BYTE byRes[124]; //±£Áô
}NET_DVR_MANAGE_UNIT_DEVICEID,*LPNET_DVR_MANAGE_UNIT_DEVICEID;

//¿ÉÊÓ¶Ô½²Éè±¸±àºÅÁªºÏÌå
typedef union tagNET_DVR_VIDEO_INTERCOM_UNIT_DEVICEID_UNION
{   
    BYTE byLen[128] ; //ÁªºÏÌå´óÐ¡
    NET_DVR_INDOOR_UNIT_DEVICEID struIndoorUnit;   //ÊÒÄÚ»ú
    NET_DVR_OUTDOOR_UNIT_DEVICEID struOutdoorUnit; //ÃÅ¿Ú»ú
    NET_DVR_MANAGE_UNIT_DEVICEID struManageUnit; //¹ÜÀí»ú
    NET_DVR_OUTDOOR_FENCE_DEVICEID struFenceUnit; //Î§Ç½»ú
    NET_DVR_OUTDOOR_UNIT_DEVICEID  struVillaOutdoorUnit;  //±ðÊûÃÅ¿Ú»ú
}NET_DVR_VIDEO_INTERCOM_UNIT_DEVICEID_UNION,*LPNET_DVR_VIDEO_INTERCOM_UNIT_DEVICEID_UNION;

//Éè±¸±àºÅ²ÎÊý½á¹¹Ìå
typedef struct tagNET_DVR_VIDEO_INTERCOM_DEVICEID_CFG
{   
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    BYTE byUnitType;   //Éè±¸ÀàÐÍ£¬1-ÃÅ¿Ú»ú£¬2-¹ÜÀí»ú 4-Î§Ç½»ú,5-±ðÊûÃÅ¿Ú»ú£¬6-¶þ´ÎÈ·ÈÏ»ú
    BYTE byIsAutoReg;  //ÊÇ·ñ×Ô¶¯×¢²á£¬0-·ñ£¬1-ÊÇ
    BYTE byRes1[2];  //±£Áô
    NET_DVR_VIDEO_INTERCOM_UNIT_DEVICEID_UNION uVideoIntercomUnit; //È¡Öµ²Î¿¼byUnitType
    BYTE byRes2[128]; //±£Áô
}NET_DVR_VIDEO_INTERCOM_DEVICEID_CFG,*LPNET_DVR_VIDEO_INTERCOM_DEVICEID_CFG;

//È¨ÏÞÃÜÂëÀàÐÍ
typedef enum tagPRIVILEGE_PASSWORD_TYPE_ENUM
{    
    ENUM_PRIVILEGE_PASSWORD_ENGINEERING = 1, //¹¤³ÌÃÜÂë
        ENUM_PRIVILEGE_PASSWORD_SETUPALARM = 2, //²¼/³··ÀÃÜÂë
        ENUM_PRIVILEGE_PASSWORD_HOUSEHOLDER_UNLOCK  = 3, //»§Ö÷¿ªËøÃÜÂë
        ENUM_PRIVILEGE_PASSWORD_ANTI_HIJACKING  = 4, //·À½Ù³ÖÃÜÂë
}PRIVILEGE_PASSWORD_TYPE_ENUM;

//È¨ÏÞÃÜÂëÐÅÏ¢
typedef struct tagNET_DVR_PRIVILEGE_PASSWORD_CFG
{   
    DWORD  dwSize; //½á¹¹Ìå´óÐ¡
    BYTE   byPwdType; //ÃÜÂëÀàÐÍ£¬²Î¿¼PRIVILEGE_PASSWORD_TYPE_ENUM
    BYTE   byRes1[3];  //±£Áô
    BYTE   byOldPassword[PASSWD_LEN];  //¾ÉÃÜÂë
    BYTE   byNewPassword[PASSWD_LEN]; //ÐÂÃÜÂë
    BYTE   byRes2[128]; //±£Áô
}NET_DVR_PRIVILEGE_PASSWORD_CFG,*LPNET_DVR_PRIVILEGE_PASSWORD_CFG;


//ÊÒÄÚ»ú²Ù×÷Ê±¼äÅäÖÃ
typedef struct tagNET_DVR_INDOOR_UNIT_OPERATION_TIME_CFG
{
    DWORD dwMaxMonitoringTime; //×î´ó¼àÊÓÊ±¼ä£¬·¶Î§[10,60]Ãë
    DWORD dwMaxRingTime; //×î´óÕñÁåÊ±¼ä£¬·¶Î§[15,60]Ãë
    DWORD dwCallForwardingTime; //ºô½Ð×ªÒÆ³¬Ê±Ê±¼ä£¬·¶Î§[0,20]Ãë
    BYTE  byRes[116];//±£Áô
}NET_DVR_INDOOR_UNIT_OPERATION_TIME_CFG,*LPNET_DVR_INDOOR_UNIT_OPERATION_TIME_CFG;

//ÊÒÍâ»ú²Ù×÷Ê±¼äÅäÖÃ
typedef struct tagNET_DVR_OUTDOOR_UNIT_OPERATION_TIME_CFG
{
    DWORD dwMaxMessageTime; //×î´óÁôÑÔÊ±¼ä£¬·¶Î§[30,60]Ãë
    DWORD dwMaxTalkTime; //×î´óÍ¨»°Ê±¼ä£¬·¶Î§[90,120]Ãë
    BYTE   byRes[120]; //±£Áô
}NET_DVR_OUTDOOR_UNIT_OPERATION_TIME_CFG,*LPNET_DVR_OUTDOOR_UNIT_OPERATION_TIME_CFG;

//¹ÜÀí»ú²Ù×÷Ê±¼äÅäÖÃ
typedef struct tagNET_DVR_MANAGE_UNIT_OPERATION_TIME_CFG
{
    DWORD dwMaxMonitoringTime;  //×î´ó¼àÊÓÊ±¼ä£¬·¶Î§[10,60]Ãë
    DWORD dwMaxRingTime;        //×î´óÕñÁåÊ±¼ä£¬·¶Î§[15,60]Ãë
    DWORD dwMaxTalkTime;        //×î´óÍ¨»°Ê±¼ä£¬µ¥Î»s
    BYTE  byRes[116];           //±£Áô
}NET_DVR_MANAGE_UNIT_OPERATION_TIME_CFG,*LPNET_DVR_MANAGE_UNIT_OPERATION_TIME_CFG;

//¿ÉÊÓ¶Ô½²²Ù×÷Ê±¼äÁªºÏÌå
typedef union tagNET_DVR_VIDEO_INTERCOM_OPERATION_TIME_UNION
{   
    BYTE byLen[128]; //ÁªºÏÌå´óÐ¡
    NET_DVR_INDOOR_UNIT_OPERATION_TIME_CFG struIndoorUnit; //ÊÒÄÚ»ú
    NET_DVR_OUTDOOR_UNIT_OPERATION_TIME_CFG struOutdoorUnit; //ÃÅ¿Ú»ú/Î§Ç½»ú/±ðÊûÃÅ¿Ú»ú/¶þ´ÎÈ·ÈÏ»ú
    NET_DVR_MANAGE_UNIT_OPERATION_TIME_CFG struManageUnit; //¹ÜÀí»ú
}NET_DVR_VIDEO_INTERCOM_OPERATION_TIME_UNION,*LPNET_DVR_VIDEO_INTERCOM_OPERATION_TIME_UNION;

//¿ÉÊÓ¶Ô½²²Ù×÷Ê±¼äÅäÖÃ
typedef struct tagNET_DVR_VIDEO_INTERCOM_OPERATION_TIME_CFG
{   
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    BYTE byUnitType; //Éè±¸ÀàÐÍ£¬1-ÃÅ¿Ú»ú£¬2-¹ÜÀí»ú£¬3-ÊÒÄÚ»ú£¬4-Î§Ç½»ú£¬5-±ðÊûÃÅ¿Ú»ú£¬6-¶þ´ÎÈ·ÈÏ»ú
    BYTE byRes1[3];  //±£Áô
    NET_DVR_VIDEO_INTERCOM_OPERATION_TIME_UNION uVideoIntercomUnit; //È¡Öµ²Î¿¼byUnitType
    BYTE byRes2[128]; //±£Áô
}NET_DVR_VIDEO_INTERCOM_OPERATION_TIME_CFG,*LPNET_DVR_VIDEO_INTERCOM_OPERATION_TIME_CFG;

//ÊÒÄÚ»ú¹ØÁªµÄÍøÂçÉè±¸
typedef struct tagNET_DVR_INDOOR_UNIT_RELATEDEV
{
    NET_DVR_IPADDR struOutdoorUnit; //Ö÷ÃÅ¿Ú»úIP
    NET_DVR_IPADDR struManageUnit;  //¹ÜÀí»úIP
    NET_DVR_IPADDR struSIPServer;    //SIP·þÎñÆ÷IP
    NET_DVR_IPADDR struAgainUnit;   //¶þ´ÎÈ·ÈÏ»úIP
    BYTE             byOutDoorType;  //Ö÷ÃÅ¿Ú»úÀàÐÍ£¬0±£Áô£¬1-Ö÷µ¥ÔªÃÅ¿Ú»ú£¬2-Ö÷±ðÊûÃÅ¿Ú»ú
    BYTE             byOutInConnectMode;  //ÃÅ¿Ú»úÓëÊÒÄÚ·Ö»ú×éÍøÄ£Ê½£º1-ÃÅ¿Ú»úÓëÊÒÄÚ·Ö»úÍ¬Ò»¾ÖÓòÍø,2-ÃÅ¿Ú»úÓëÊÒÄÚ·Ö»ú²»Í¬¾ÖÓòÍø£»
    BYTE             byIndoorConnectMode;  //ÊÒÄÚÖ÷»úÓëÊÒÄÚ·Ö»ú×éÍøÄ£Ê½£º1-Í¨¹ýÎÞÏßÍø¿¨¡¢2-Í¨¹ýÓÐÏßÍø¿¨£»
    BYTE           byRes1;
    NET_DVR_IPADDR struIndoorUnit; //ÊÒÄÚÖ÷»úIP
    BYTE           byRes[300];       //±£Áô
}NET_DVR_INDOOR_UNIT_RELATEDEV,*LPNET_DVR_INDOOR_UNIT_RELATEDEV;

//ÃÅ¿Ú»úÏà¹ØÁªµÄÍøÂçÉè±¸
typedef struct tagNET_DVR_OUTDOOR_UNIT_RELATEDEV
{   
    NET_DVR_IPADDR struMainOutdoorUnit; //Ö÷ÃÅ¿Ú»úIP£¬¸±ÃÅ¿Ú»úÊ±ÓÐÐ§
    NET_DVR_IPADDR struManageUnit;   //¹ÜÀí»úIP
    NET_DVR_IPADDR struSIPServer;     //SIP·þÎñÆ÷IP£¬¸±ÃÅ¿Ú»úÊ±ÎÞÐ§
    BYTE           byRes[592];       //±£Áô
}NET_DVR_OUTDOOR_UNIT_RELATEDEV,*LPNET_DVR_OUTDOOR_UNIT_RELATEDEV;

//¶þ´ÎÈ·ÈÏ»úÏà¹ØÁªµÄÍøÂçÉè±¸
typedef struct tagNET_DVR_AGAIN_RELATEDEV
{   
    NET_DVR_IPADDR   struSIPServer;       //SIP·þÎñÆ÷IP
    NET_DVR_IPADDR   struCenterAddr;      //ÖÐÐÄÆ½Ì¨IP
    WORD             wCenterPort;         //ÖÐÐÄÆ½Ì¨¶Ë¿Ú
    BYTE             byRes1[2];
    NET_DVR_IPADDR   struIndoorUnit; //ÊÒÄÚÖ÷»úIP
    BYTE             byRes[588];//±£Áô
}NET_DVR_AGAIN_RELATEDEV,*LPNET_DVR_AGAIN_RELATEDEV;


//¹ÜÀí»úÏà¹ØÁªµÄÍøÂçÉè±¸
typedef struct tagNET_DVR_MANAGE_UNIT_RELATEDEV
{
    NET_DVR_IPADDR  struSIPServer;     //SIP·þÎñÆ÷IP
    BYTE   byRes[880];       //±£Áô
}NET_DVR_MANAGE_UNIT_RELATEDEV,*LPNET_DVR_MANAGE_UNIT_RELATEDEV;


//¿ÉÊÓ¶Ô½²¹ØÁªÍøÂçÉè±¸²ÎÊý½á¹¹Ìå
typedef union tagNET_DVR_VIDEO_INTERCOM_UNIT_RELATEDEV_UNION
{   
    DWORD dwRes[256] ; //ÁªºÏÌå´óÐ¡
    NET_DVR_INDOOR_UNIT_RELATEDEV struIndoorUnit;   //ÊÒÄÚ»ú
    NET_DVR_OUTDOOR_UNIT_RELATEDEV struMainOutdoorUnit; //ÃÅ¿Ú»ú/Î§Ç½»ú
    NET_DVR_MANAGE_UNIT_RELATEDEV struManageUnit; //¹ÜÀí»ú
    NET_DVR_OUTDOOR_UNIT_RELATEDEV  struVillaUnit;      //±ðÊûÃÅ¿Ú»ú
    NET_DVR_AGAIN_RELATEDEV           struAgainUnit;      //¶þ´ÎÈ·ÈÏ»ú
}NET_DVR_VIDEO_INTERCOM_UNIT_RELATEDEV_UNION,*LPNET_DVR_VIDEO_INTERCOM_UNIT_RELATEDEV_UNION;

//¹ØÁªÍøÂçÉè±¸²ÎÊý½á¹¹Ìå
typedef struct tagNET_DVR_VIDEO_INTERCOM_RELATEDEV_CFG
{   
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    BYTE byUnitType; //Éè±¸ÀàÐÍ£¬1-ÃÅ¿Ú»ú£¬2-¹ÜÀí»ú£¬3-ÊÒÄÚ»ú£¬4-Î§Ç½»ú£¬5-±ðÊûÃÅ¿Ú»ú£¬6-¶þ´ÎÈ·ÈÏ»ú
    BYTE byRes1[3];  //±£Áô
    NET_DVR_VIDEO_INTERCOM_UNIT_RELATEDEV_UNION uVideoIntercomUnit; //È¡Öµ²Î¿¼byUnitType
    BYTE byRes2[128]; //±£Áô
}NET_DVR_VIDEO_INTERCOM_RELATEDEV_CFG,*LPNET_DVR_VIDEO_INTERCOM_RELATEDEV_CFG;

typedef struct tagNET_DVR_CONTROL_GATEWAY
{
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    DWORD dwGatewayIndex; //ÃÅ½ûÐòºÅ£¬´Ó1¿ªÊ¼
    BYTE   byCommand; //²Ù×÷ÃüÁî£¬0-¹Ø±Õ£¬1-´ò¿ª
    BYTE   byLockType; //ËøÀàÐÍ£¬0-ÆÕÍ¨£¨ÒÔÇ°Ä¬ÈÏ¶¼Îª0£©,1-ÖÇÄÜËø
    WORD	wLockID; //ËøID£¬´Ó1¿ªÊ¼
    BYTE   byControlSrc[NAME_LEN]; //²Ù×÷·¢ÆðÔ´ÐÅÏ¢
    BYTE   byControlType; //¿ªËøÀàÐÍ£¬1-¼àÊÓ£¬2-Í¨»°
    BYTE  byRes3[3];
    BYTE  byPassword[PASSWD_LEN];       //ËøÃÜÂë£¬µ±byLockTypeÎªÖÇÄÜËøÊ±ÓÐÐ§
    BYTE  byRes2[108]; //±£Áô
}NET_DVR_CONTROL_GATEWAY,*LPNET_DVR_CONTROL_GATEWAY;


//¹«¸æÍ¼Æ¬ÐÅÏ¢½á¹¹Ìå
typedef struct tagNET_DVR_NOTICE_PIC
{
    BYTE*  pPicData; //Í¼Æ¬Ö¸Õë
    DWORD dwPicDataLen; //Í¼Æ¬Êý¾Ý³¤¶È
    BYTE   byRes[32]; //±£Áô
}NET_DVR_NOTICE_PIC,*LPNET_DVR_NOTICE_PIC;

//¹«¸æÊý¾Ý
typedef struct tagNET_DVR_NOTICE_DATA
{
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    NET_DVR_TIME_EX struTime; //¹«¸æÊ±¼ä
    BYTE   byNoticeNumber[MAX_NOTICE_NUMBER_LEN]; //¹«¸æ±àºÅ
    BYTE   byNoticeTheme[MAX_NOTICE_THEME_LEN];//¹«¸æÖ÷Ìâ
    BYTE   byNoticeDetail[MAX_NOTICE_DETAIL_LEN]; //¹«¸æÏêÇé
    BYTE   byLevel; //¹«¸æµÈ¼¶£¬1-¹ã¸æÀàÐÅÏ¢£»2-ÎïÒµÐÅÏ¢£»3-±¨¾¯ÀàÐÅÏ¢;4-Í¨ÖªÀàÐÅÏ¢
    BYTE   byPicNum; //¹«¸æÍ¼Æ¬ÊýÁ¿
    BYTE   byRes1[2]; //±£Áô    
    NET_DVR_NOTICE_PIC struNoticePic[MAX_NOTICE_PIC_NUM]; //¹«¸æÍ¼Æ¬
    BYTE   byRes2[128]; //±£Áô
}NET_DVR_NOTICE_DATA,*LPNET_DVR_NOTICE_DATA;

//²Ù×÷È¨ÏÞÑéÖ¤²ÎÊý
typedef struct tagNET_DVR_OPERATION_AUTH
{
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    BYTE   byPassword[PASSWD_LEN]; //ÑéÖ¤ÃÜÂë
    BYTE   byRes[128]; //±£Áô
}NET_DVR_OPERATION_AUTH,*LPNET_DVR_OPERATION_AUTH;

//¿ªËøÀàÐÍ
typedef enum tagUNLOCK_TYPE_ENUM
{    
    ENUM_UNLOCK_PASSWORD = 1, //ÃÜÂë¿ªËø
        ENUM_UNLOCK_HIJACKING  = 2, //½Ù³Ö¿ªËø
        ENUM_UNLOCK_CARD = 3, //Ë¢¿¨¿ªËø
        ENUM_UNLOCK_HOUSEHOLDER  = 4, //»§Ö÷¿ªËø
        ENUM_UNLOCK_CENTER_PLATFORM = 5 //ÖÐÐÄÆ½Ì¨¿ªËø
}UNLOCK_TYPE_ENUM;


//·ÀÇøÀàÐÍ£¬ºÍ²úÆ·ÏßÈ·ÈÏ£¬´Ë¶¨ÒåÃ»ÓÐÊ¹ÓÃ£¬Ê¹ÓÃµÄÊÇDETECTOR_TYPE
// typedef enum tagALARM_ZONE_TYPE_ENUM
// {    
//     ENUM_ALARM_ZONE_SMOKE = 1, //ÑÌ¸Ð
//         ENUM_ALARM_ZONE_GAS  = 2,  //ÃºÆø
//         ENUM_ALARM_ZONE_INFRARED = 3, //ºìÍâ
//         ENUM_ALARM_ZONE_MAGNETIC  = 4, //ÃÅ´Å
//         ENUM_ALARM_ZONE_MANUAL = 5 //ÊÖ¶¯
// }ALARM_ZONE_TYPE_ENUM;

//¿ªËø¼ÇÂ¼
typedef struct tagNET_DVR_UNLOCK_RECORD_INFO
{
    BYTE   byUnlockType; //¿ªËø·½Ê½£¬²Î¿¼UNLOCK_TYPE_ENUM
    BYTE   byRes1[3]; //±£Áô
    BYTE   byControlSrc[NAME_LEN]; //²Ù×÷·¢ÆðÔ´ÐÅÏ¢£¬Ë¢¿¨¿ªËøÊ±Îª¿¨ºÅ£¬ÆäÓàÇé¿öÏÂÎªÉè±¸±àºÅ
    DWORD  dwPicDataLen; //Í¼Æ¬Êý¾Ý³¤¶È
    BYTE*  pImage; //Í¼Æ¬Ö¸Õë
    BYTE   byRes[212];  //±£Áô
}NET_DVR_UNLOCK_RECORD_INFO,*LPNET_DVR_UNLOCK_RECORD_INFO;

//¹«¸æÐÅÏ¢ÔÄ¶Á»ØÖ´
typedef struct tagNET_DVR_NOTICEDATA_RECEIPT_INFO
{
    BYTE   byNoticeNumber[MAX_NOTICE_NUMBER_LEN]; //¹«¸æ±àºÅ
    BYTE   byRes[224];  //±£Áô
}NET_DVR_NOTICEDATA_RECEIPT_INFO,*LPNET_DVR_NOTICEDATA_RECEIPT_INFO;


//¿ÉÊÓ¶Ô½²ÊÂ¼þ¼ÇÂ¼ÐÅÏ¢ÁªºÏÌå
typedef union tagNET_DVR_VIDEO_INTERCOM_EVENT_INFO_UINON
{
    BYTE byLen[256]; //ÁªºÏÌå´óÐ¡
    NET_DVR_UNLOCK_RECORD_INFO struUnlockRecord; //¿ªËø¼ÇÂ¼
    NET_DVR_NOTICEDATA_RECEIPT_INFO struNoticedataReceipt; //¹«¸æÐÅÏ¢ÔÄ¶Á»ØÖ´
}NET_DVR_VIDEO_INTERCOM_EVENT_INFO_UINON,*LPNET_DVR_VIDEO_INTERCOM_EVENT_INFO_UINON;


//¿ÉÊÓ¶Ô½²ÊÂ¼þ¼ÇÂ¼
typedef struct tagNET_DVR_VIDEO_INTERCOM_EVENT
{
    DWORD dwSize; //½á¹¹Ìå´óÐ¡
    NET_DVR_TIME_EX struTime; //Ê±¼ä
    BYTE   byDevNumber[MAX_DEV_NUMBER_LEN]; //Éè±¸±àºÅ
    BYTE   byEventType; //ÊÂ¼þÐÅÏ¢ÀàÐÍ£¬1-¿ªËø¼ÇÂ¼£¬2-¹«¸æÐÅÏ¢ÔÄ¶Á»ØÖ´
    BYTE   byRes1[3]; //±£Áô
    NET_DVR_VIDEO_INTERCOM_EVENT_INFO_UINON uEventInfo; //ÊÂ¼þÐÅÏ¢£¬¾ßÌåÄÚÈÝ²Î¿¼byEventTypeÈ¡Öµ
    BYTE  byRes2[256]; //±£Áô
}NET_DVR_VIDEO_INTERCOM_EVENT,*LPNET_DVR_VIDEO_INTERCOM_EVENT;


//·ÀÇø±¨¾¯ÐÅÏ¢
typedef struct tagNET_DVR_ZONE_ALARM_INFO
{
    BYTE   byZoneName[NAME_LEN]; //·ÀÇøÃû³Æ
    DWORD  dwZonendex; //·ÀÇøºÅ
    BYTE   byZoneType; //·ÀÇøÀàÐÍ£¬²Î¿¼DETECTOR_TYPE
    BYTE   byRes[219];  //±£Áô
}NET_DVR_ZONE_ALARM_INFO,*LPNET_DVR_ZONE_ALARM_INFO;

typedef union tagNET_DVR_VIDEO_INTERCOM_ALARM_INFO_UNION
{
    BYTE byLen[256]; //ÁªºÏÌå´óÐ¡
    NET_DVR_ZONE_ALARM_INFO struZoneAlarm; //·ÀÇø±¨¾¯
}NET_DVR_VIDEO_INTERCOM_ALARM_INFO_UNION,*LPNET_DVR_VIDEO_INTERCOM_ALARM_INFO_UNION;


//¿ÉÊÓ¶Ô½²±¨¾¯ÐÅÏ¢ÁªºÏÌå
typedef struct tagNET_DVR_VIDEO_INTERCOM_ALARM
{
    DWORD dwSize;  //½á¹¹Ìå´óÐ¡
    NET_DVR_TIME_EX struTime; //±¨¾¯Ê±¼ä
    BYTE  byDevNumber[MAX_DEV_NUMBER_LEN]; //Éè±¸±àºÅ
    BYTE  byAlarmType; //±¨¾¯ÀàÐÍ£¬1-·ÀÇø±¨¾¯£¬2-·À²ð±¨¾¯£¬3-½Ù³Ö±¨¾¯£¬4-¶à´ÎÃÜÂë¿ªËøÊ§°Ü±¨¾¯,5-ÃÅÃ»¿ª£¬6-ÃÅÃ»¹Ø 7-SOS ¡¢8-Í¨»°¶Ô½²£¬9-ÖÇÄÜËø½Ù³ÖÖ¸ÎÆ±¨¾¯£¬ 10-ÖÇÄÜËø½Ù³ÖÃÜÂë±¨¾¯£¬11-ÖÇÄÜËøÇËÃÅ±¨¾¯£¬12-ÖÇÄÜËøÃÅËøËø¶¨±¨¾¯£¬13-ÖÇÄÜËøµçÁ¿²»×ã±¨¾¯
    BYTE  byRes1[3]; //±£Áô
    NET_DVR_VIDEO_INTERCOM_ALARM_INFO_UNION uAlarmInfo; //±¨¾¯ÐÅÏ¢£¬¾ßÌåÄÚÈÝ²Î¿¼×Ö¶ÎbyAlarmTypeÈ¡Öµ
    BYTE  byRes2[256]; //±£Áô
}NET_DVR_VIDEO_INTERCOM_ALARM,*LPNET_DVR_VIDEO_INTERCOM_ALARM;

typedef struct tagNET_DVR_PEOPLE_REGION
{
    BYTE byID;//ÇøÓòID
    BYTE byNumber;//ÇøÓòÖÐµÄÈËÔ±ÊýÁ¿ 0-±íÊ¾ÇøÓòÖÐÃ»ÓÐÈËÔ±
    BYTE byDressType;//×Å×°ÀàÐÍ 0-Î´Öª£¬1-·¨ÅÛ¡¢2-»ÕÕÂ¡¢3-ÖÆ·þ
    BYTE byRes;
    NET_VCA_RECT  struRegion;
    DWORD  dwPicLen;//¼ì²âÍ¼Æ¬³¤¶È (0±íÊ¾Ã»ÓÐ³¤¶È)
    char*  pPicBuffer;//¾ßÌåµÄÍ¼Æ¬Êý¾Ý
    BYTE byRes1[24];//±£Áô(Ô¤ÁôºóÆÚÀ©Õ¹ÇøÓòÊôÐÔ)
}NET_DVR_PEOPLE_REGION,*LPNET_DVR_PEOPLE_REGION;

typedef struct tagNET_DVR_PEOPLE_DETECTION_RESULT
{
    DWORD     dwSize;
    DWORD     dwRelativeTime; //Ïà¶ÔÊ±±ê
    DWORD    dwAbsTime; //¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO  struDevInfo;//Ç°¶ËÉè±¸ÐÅÏ¢
    NET_DVR_PEOPLE_REGION  struPeopleRegion[MAX_PEOPLE_DETECTION_NUM/*8*/];
    /*ÈËÔ±¼ì²â±¨¾¯ÀàÐÍ
    £¨0-    Î´Öª£¬
    £¨1-    ÉóÑ¶ÊÒÄÚ´ò¼Ü¶·Å¹±¨¾¯
    £¨2-    ÉóÑ¶ÈËÔ±î§Ë¯¼ì²â±¨¾¯
    £¨3-    ±»ÉóÑ¶ÈËÔ±ÆðÉí¼ì²â±¨¾¯
    £¨4-    ÉóÅÐÈËÔ±¼ì²â£©
    */
    BYTE  byPeopleAlarmType; 
    BYTE  byRes[255];
}NET_DVR_PEOPLE_DETECTION_RESULT,*LPNET_DVR_PEOPLE_DETECTION_RESULT;

typedef    struct tagNET_DVR_SUPPLEMENTLIGHT
{
    BYTE        byEnable;//Ê¹ÄÜ 0-¹Ø£¬1-¿ª
    BYTE          byMode;//²¹¹âµÆÄ£Ê½ 0-×Ô¶¯£¬1-¶¨Ê±
    BYTE        byHighBeamBrightness;//Ô¶¹âµÆÁÁ¶È[0,10]
    BYTE        byLowBeamBrightness;//½ü¹âµÆÁÁ¶È[0,10]
    NET_DVR_SCHEDULE_DAYTIME  struSchedTime;//¶¨Ê±Ê±¼ä¶Î    
    WORD        wFilteringTime;//¹ýÂËÊ±¼ä(s)[0,120]
    BYTE        byRes[62];
}NET_DVR_SUPPLEMENTLIGHT,*LPNET_DVR_SUPPLEMENTLIGHT;

typedef    struct tagNET_DVR_EXTERNALDEVICE
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    NET_DVR_SUPPLEMENTLIGHT struSupplementLight;//²¹¹âµÆ½á¹¹ÐÅÏ¢        
    BYTE        byRes[512];
}NET_DVR_EXTERNALDEVICE,*LPNET_DVR_EXTERNALDEVICE;
typedef	struct tagNET_DVR_TEMPERATURE_TRIGGER_COND
{
    DWORD     dwSize;//½á¹¹Ìå´óÐ¡
    DWORD     dwChan;//Í¨µÀºÅ
    DWORD     dwPreset;//Ô¤ÖÃµãºÅ
    BYTE      byRes[256];
}NET_DVR_TEMPERATURE_TRIGGER_COND, *LPNET_DVR_TEMPERATURE_TRIGGER_COND;
//(Çò»úÖ§³Ö£¬Èí¼þÊµÏÖ£¬²¹¹âµÆÊÇÉè¼ÆÔÚÉè±¸ÄÚ²¿µÄ)
typedef    struct tagNET_DVR_BUILTIN_SUPPLEMENTLIGHT
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE          byMode;//²¹¹âµÆÄ£Ê½ 0-¶¨Ê±£¬1-¿ªÆô£¬2-¹Ø±Õ£¬3-×Ô¶¯£¨·Ç¹âÃô£¬Ëã·¨»­ÃæÊ¶±ð£©
    BYTE        byBrightnessLimit;//ÁÁ¶ÈÏÞÖÆ[0,100]
    BYTE        byRes[6];
    NET_DVR_SCHEDULE_DAYTIME  struSchedTime;//¶¨Ê±Ê±¼ä¶Î    
    BYTE        byRes1[256];
}NET_DVR_BUILTIN_SUPPLEMENTLIGHT,*LPNET_DVR_BUILTIN_SUPPLEMENTLIGHT;
typedef struct tagNET_DVR_OIS_CFG
{
    DWORD		dwSize;//½á¹¹Ìå´óÐ¡
    BYTE		byMode;  //ÊÇ·ñ¹âÑ§·À¶¶£º0-¹Ø±Õ£¬1-ÆÕÍ¨£¬2-×¨¼Ò 
    BYTE      byOISLevel; //¹âÑ§·À¶¶µÈ¼¶£¬0-µÍ£¬1-ÖÐ£¬2-¸ß
    BYTE      byOISSensitivity;//¹âÑ§·À¶¶ÁéÃô¶È£¬0-µÍ£¬1-ÖÐ£¬2-¸ß
    BYTE		byRes[125];
}NET_DVR_OIS_CFG, *LPNET_DVR_OIS_CFG;

typedef struct tagNET_DVR_MACFILTER_CFG
{
    DWORD    dwSize;//½á¹¹Ìå´óÐ¡
    BYTE     byEnabled;  //ÊÇ·ñ¿ªÆôMACµØÖ·¹ýÂË£º0-·ñ£¬1-ÊÇ
    BYTE     byPermissionType; //MACµØÖ·¹ýÂËÀàÐÍ£¬0-½ûÖ¹£¬1-ÔÊÐí
    BYTE     byRes1[2];
    BYTE     szMacAddress[MAC_ADDRESS_NUM][MACADDR_LEN];
    BYTE     byRes[128];
}NET_DVR_MACFILTER_CFG, *LPNET_DVR_MACFILTER_CFG;

typedef	struct tagNET_DVR_EAGLEFOCUSING_SENCE
{
    BYTE    byRuleType;//¹æÔòÀàÐÍ£¬0-Ïß
    BYTE    byRes1[3];
    NET_VCA_POLYGON struRegion;// ÇøÓò·¶Î§
    BYTE    byRes[128];
}NET_DVR_EAGLEFOCUSING_SENCE, *LPNET_DVR_EAGLEFOCUSING_SENCE;

typedef struct tagNET_DVR_EAGLEFOCUSING_CALCFG
{
    DWORD   dwSize;
    BYTE    byEnabled;//ÊÇ·ñ¿ªÆô±ê¶¨£º0-ÖÐÖ¹±ê¶¨£¬1-¿ªÊ¼±ê¶¨£¨¸Ã½ÚµãÉèÖÃÊ±ÓÐÐ§£¬»ñÈ¡Ê±ÎÞÐ§£©
    BYTE    byRes1[3];
    NET_DVR_EAGLEFOCUSING_SENCE struEagleFoucsing[MAX_SENCE_NUM/*16*/];
    BYTE   byRes[512];
}NET_DVR_EAGLEFOCUSING_CALCFG, *LPNET_DVR_EAGLEFOCUSING_CALCFG;

typedef struct tagNET_DVR_EAGLEFOCUSING_CTRL
{
    DWORD    dwSize;
    BYTE     byEnable;//Ê¹ÄÜ£º0-¹Ø±ÕÓ¥ÊÓ¾Û½¹£¬1-¿ªÆôÓ¥ÊÓ¾Û½¹
    BYTE     byRes[511];
}NET_DVR_EAGLEFOCUSING_CTRL, *LPNET_DVR_EAGLEFOCUSING_CTRL;

typedef struct tagNET_DVR_SMARTCALIBRATION_REGION
{
    BYTE        byRuleID;//¹æÔò±àºÅ
    BYTE        byRes[3];
    NET_VCA_POLYGON struMaxTargetSize;//×î´óÄ¿±ê³ß´ç
    NET_VCA_POLYGON struMinTargetSize;//×îÐ¡Ä¿±ê³ß´ç
}NET_DVR_SMARTCALIBRATION_REGION, *LPNET_DVR_SMARTCALIBRATION_REGION;

#define RULE_REGION_MAX 128
typedef struct tagNET_DVR_SMARTCALIBRATION_CFG
{
    DWORD		dwSize;//½á¹¹Ìå´óÐ¡
    /* SmartType:
    0-linedetection,
    1-fielddetection,
    2-regionEntrance,
    3-regionExiting,
    4-loitering,
    5-rapidMove,
    6-parking,
    7-unattendedBaggage,
    8-attendedBaggage
    */
    BYTE		bySmartType;//ÖÇÄÜÀàÐÍ
    BYTE        byRes[3];
    NET_DVR_SMARTCALIBRATION_REGION strRegion[RULE_REGION_MAX/*128*/];
    BYTE		byRes1[128];
}NET_DVR_SMARTCALIBRATION_CFG, *LPNET_DVR_SMARTCALIBRATION_CFG;

typedef	struct tagNET_DVR_OSD_BATTERY_POWER_CFG
{
    DWORD dwSize;
    NET_VCA_POINT  struOSDBatteryPower;//¿ÍÁ÷Í³¼ÆÏÔÊ¾OSDÏÔÊ¾×óÉÏ½Ç×ø±ê
    BYTE   byOSDBatteryPower;//µç³ØµçÁ¿OSDµþ¼ÓÏÔÊ¾Ê¹ÄÜ,  0-·ñ£¬1-ÊÇ
    BYTE    byRes[63];
}NET_DVR_OSD_BATTERY_POWER_CFG, *LPNET_DVR_OSD_BATTERY_POWER_CFG;

#define CARD_PARAM_CARD_VALID       0x00000001  //¿¨ÊÇ·ñÓÐÐ§²ÎÊý
#define CARD_PARAM_VALID            0x00000002  //ÓÐÐ§ÆÚ²ÎÊý
#define CARD_PARAM_CARD_TYPE        0x00000004  //¿¨ÀàÐÍ²ÎÊý
#define CARD_PARAM_DOOR_RIGHT       0x00000008  //ÃÅÈ¨ÏÞ²ÎÊý
#define CARD_PARAM_LEADER_CARD      0x00000010  //Ê×¿¨²ÎÊý
#define CARD_PARAM_SWIPE_NUM        0x00000020  //×î´óË¢¿¨´ÎÊý²ÎÊý
#define CARD_PARAM_GROUP            0x00000040  //ËùÊôÈº×é²ÎÊý
#define CARD_PARAM_PASSWORD         0x00000080  //¿¨ÃÜÂë²ÎÊý
#define CARD_PARAM_RIGHT_PLAN       0x00000100  //¿¨È¨ÏÞ¼Æ»®²ÎÊý
#define CARD_PARAM_SWIPED_NUM       0x00000200  //ÒÑË¢¿¨´ÎÊý

typedef struct tagNET_DVR_VALID_PERIOD_CFG
{
    BYTE byEnable; //Ê¹ÄÜÓÐÐ§ÆÚ£¬0-²»Ê¹ÄÜ£¬1Ê¹ÄÜ
    BYTE byRes1[3];
    NET_DVR_TIME_EX struBeginTime; //ÓÐÐ§ÆÚÆðÊ¼Ê±¼ä
    NET_DVR_TIME_EX struEndTime; //ÓÐÐ§ÆÚ½áÊøÊ±¼ä
    BYTE byRes2[32];
}NET_DVR_VALID_PERIOD_CFG, *LPNET_DVR_VALID_PERIOD_CFG;

typedef struct tagNET_DVR_CARD_CFG
{
    DWORD dwSize;
    DWORD dwModifyParamType; 
    // ÐèÒªÐÞ¸ÄµÄ¿¨²ÎÊý£¬ÉèÖÃ¿¨²ÎÊýÊ±ÓÐÐ§£¬°´Î»±íÊ¾£¬Ã¿Î»´ú±íÒ»ÖÖ²ÎÊý£¬1ÎªÐèÒªÐÞ¸Ä£¬0Îª²»ÐÞ¸Ä
    // #define CARD_PARAM_CARD_VALID       0x00000001 //¿¨ÊÇ·ñÓÐÐ§²ÎÊý
    // #define CARD_PARAM_VALID            0x00000002  //ÓÐÐ§ÆÚ²ÎÊý
    // #define CARD_PARAM_CARD_TYPE        0x00000004  //¿¨ÀàÐÍ²ÎÊý
    // #define CARD_PARAM_DOOR_RIGHT       0x00000008  //ÃÅÈ¨ÏÞ²ÎÊý
    // #define CARD_PARAM_LEADER_CARD      0x00000010  //Ê×¿¨²ÎÊý
    // #define CARD_PARAM_SWIPE_NUM        0x00000020  //×î´óË¢¿¨´ÎÊý²ÎÊý
    // #define CARD_PARAM_GROUP            0x00000040  //ËùÊôÈº×é²ÎÊý
    // #define CARD_PARAM_PASSWORD         0x00000080  //¿¨ÃÜÂë²ÎÊý
    // #define CARD_PARAM_RIGHT_PLAN       0x00000100  //¿¨È¨ÏÞ¼Æ»®²ÎÊý
    // #define CARD_PARAM_SWIPED_NUM       0x00000200  //ÒÑË¢¿¨´ÎÊý
    BYTE byCardNo[ACS_CARD_NO_LEN]; //¿¨ºÅ
    BYTE byCardValid; //¿¨ÊÇ·ñÓÐÐ§£¬0-ÎÞÐ§£¬1-ÓÐÐ§£¨ÓÃÓÚÉ¾³ý¿¨£¬ÉèÖÃÊ±ÖÃÎª0½øÐÐÉ¾³ý£¬»ñÈ¡Ê±´Ë×Ö¶ÎÊ¼ÖÕÎª1£©
    BYTE byCardType; //¿¨ÀàÐÍ£¬1-ÆÕÍ¨¿¨£¬2-²Ð¼²ÈË¿¨£¬3-ºÚÃûµ¥¿¨£¬4-Ñ²¸ü¿¨£¬5-Ð²ÆÈ¿¨£¬6-³¬¼¶¿¨£¬7-À´±ö¿¨£¬8-½â³ý¿¨£¬Ä¬ÈÏÆÕÍ¨¿¨
    BYTE byLeaderCard; //ÊÇ·ñÎªÊ×¿¨£¬1-ÊÇ£¬0-·ñ
    BYTE byRes1;
    DWORD dwDoorRight; //ÃÅÈ¨ÏÞ£¬°´Î»±íÊ¾£¬1ÎªÓÐÈ¨ÏÞ£¬0ÎªÎÞÈ¨ÏÞ£¬´ÓµÍÎ»µ½¸ßÎ»±íÊ¾¶ÔÃÅ1-NÊÇ·ñÓÐÈ¨ÏÞ
    NET_DVR_VALID_PERIOD_CFG struValid; //ÓÐÐ§ÆÚ²ÎÊý
    DWORD dwBelongGroup; //ËùÊôÈº×é£¬°´Î»±íÊ¾£¬1-ÊôÓÚ£¬0-²»ÊôÓÚ£¬´ÓµÍÎ»µ½¸ßÎ»±íÊ¾ÊÇ·ñ´ÓÊôÈº×é1-N
    BYTE byCardPassword[CARD_PASSWORD_LEN]; //¿¨ÃÜÂë
    BYTE byCardRightPlan[MAX_DOOR_NUM][MAX_CARD_RIGHT_PLAN_NUM]; //¿¨È¨ÏÞ¼Æ»®£¬È¡ÖµÎª¼Æ»®Ä£°å±àºÅ£¬Í¬¸öÃÅ²»Í¬¼Æ»®Ä£°å²ÉÓÃÈ¨ÏÞ»òµÄ·½Ê½´¦Àí
    DWORD dwMaxSwipeTime; //×î´óË¢¿¨´ÎÊý£¬0ÎªÎÞ´ÎÊýÏÞÖÆ
    DWORD dwSwipeTime; //ÒÑË¢¿¨´ÎÊý
    WORD wRoomNumber;  //·¿¼äºÅ
    SHORT wFloorNumber;   //²ãºÅ
    BYTE byRes2[20];
}NET_DVR_CARD_CFG, *LPNET_DVR_CARD_CFG;

typedef struct _NET_DVR_CARD_CFG_COND
{
    DWORD dwSize;
    DWORD dwCardNum; //ÉèÖÃ»ò»ñÈ¡¿¨ÊýÁ¿£¬»ñÈ¡Ê±ÖÃÎª0xffffffff±íÊ¾»ñÈ¡ËùÓÐ¿¨ÐÅÏ¢
    BYTE  byCheckCardNo; //Éè±¸ÊÇ·ñ½øÐÐ¿¨ºÅÐ£Ñé£¬0-²»Ð£Ñé£¬1-Ð£Ñé
    BYTE  byRes[31];
}NET_DVR_CARD_CFG_COND, *LPNET_DVR_CARD_CFG_COND;

typedef struct _NET_DVR_CARD_CFG_SEND_DATA
{
    DWORD dwSize;
    BYTE byCardNo[ACS_CARD_NO_LEN]; //¿¨ºÅ
    BYTE byRes[16];
}NET_DVR_CARD_CFG_SEND_DATA, *LPNET_DVR_CARD_CFG_SEND_DATA;

typedef struct tagNET_DVR_CARD_USER_INFO_CFG  /*¶ÔÓ¦ÅäÖÃ½á¹¹Ìå*/
{
    DWORD dwSize;
    BYTE sUsername[NAME_LEN];                /* ÓÃ»§Ãû*/
    BYTE byRes2[256];
}NET_DVR_CARD_USER_INFO_CFG, *LPNET_DVR_CARD_USER_INFO_CFG;

#define ACS_PARAM_DOOR_STATUS_WEEK_PLAN        0x00000001 //ÃÅ×´Ì¬ÖÜ¼Æ»®²ÎÊý
#define ACS_PARAM_VERIFY_WEEK_PALN             0x00000002 //¶Á¿¨Æ÷ÖÜ¼Æ»®²ÎÊý
#define ACS_PARAM_CARD_RIGHT_WEEK_PLAN         0x00000004 //¿¨È¨ÏÞÖÜ¼Æ»®²ÎÊý
#define ACS_PARAM_DOOR_STATUS_HOLIDAY_PLAN     0x00000008 //ÃÅ×´Ì¬¼ÙÈÕ¼Æ»®²ÎÊý
#define ACS_PARAM_VERIFY_HOLIDAY_PALN          0x00000010 //¶Á¿¨Æ÷¼ÙÈÕ¼Æ»®²ÎÊý
#define ACS_PARAM_CARD_RIGHT_HOLIDAY_PLAN      0x00000020 //¿¨È¨ÏÞ¼ÙÈÕ¼Æ»®²ÎÊý
#define ACS_PARAM_DOOR_STATUS_HOLIDAY_GROUP    0x00000040 //ÃÅ×´Ì¬¼ÙÈÕ×é²ÎÊý
#define ACS_PARAM_VERIFY_HOLIDAY_GROUP         0x00000080 //¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼ÙÈÕ×é²ÎÊý
#define ACS_PARAM_CARD_RIGHT_HOLIDAY_GROUP     0x00000100 //¿¨È¨ÏÞ¼ÙÈÕ×é²ÎÊý
#define ACS_PARAM_DOOR_STATUS_PLAN_TEMPLATE    0x00000200 //ÃÅ×´Ì¬¼Æ»®Ä£°å²ÎÊý
#define ACS_PARAM_VERIFY_PALN_TEMPLATE         0x00000400 //¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼Æ»®Ä£°å²ÎÊý
#define ACS_PARAM_CARD_RIGHT_PALN_TEMPLATE     0x00000800 //¿¨È¨ÏÞ¼Æ»®Ä£°å²ÎÊý
#define ACS_PARAM_CARD                         0x00001000 //¿¨²ÎÊý
#define ACS_PARAM_GROUP                        0x00002000 //Èº×é²ÎÊý
#define ACS_PARAM_ANTI_SNEAK_CFG               0x00004000 //·´Ç±»Ø²ÎÊý
#define ACS_PAPAM_EVENT_CARD_LINKAGE           0x00008000 //ÊÂ¼þ¼°¿¨ºÅÁª¶¯²ÎÊý
#define ACS_PAPAM_CARD_PASSWD_CFG              0x00010000 //ÃÜÂë¿ªÃÅÊ¹ÄÜ²ÎÊý
#define ACS_PARAM_PERSON_STATISTICS_CFG           0x00020000 //ÈËÊýÍ³¼Æ²ÎÊý

typedef struct tagNET_DVR_ACS_PARAM_TYPE
{
    DWORD dwSize;
    DWORD dwParamType; //²ÎÊýÀàÐÍ£¬°´Î»±íÊ¾    
    //#define ACS_PARAM_DOOR_STATUS_WEEK_PLAN        0x00000001 //ÃÅ×´Ì¬ÖÜ¼Æ»®²ÎÊý
    //#define ACS_PARAM_VERIFY_WEEK_PALN             0x00000002 //¶Á¿¨Æ÷ÖÜ¼Æ»®²ÎÊý
    //#define ACS_PARAM_CARD_RIGHT_WEEK_PLAN         0x00000004 //¿¨È¨ÏÞÖÜ¼Æ»®²ÎÊý
    //#define ACS_PARAM_DOOR_STATUS_HOLIDAY_PLAN     0x00000008 //ÃÅ×´Ì¬¼ÙÈÕ¼Æ»®²ÎÊý
    //#define ACS_PARAM_VERIFY_HOLIDAY_PALN          0x00000010 //¶Á¿¨Æ÷¼ÙÈÕ¼Æ»®²ÎÊý
    //#define ACS_PARAM_CARD_RIGHT_HOLIDAY_PLAN      0x00000020 //¿¨È¨ÏÞ¼ÙÈÕ¼Æ»®²ÎÊý
    //#define ACS_PARAM_DOOR_STATUS_HOLIDAY_GROUP    0x00000040 //ÃÅ×´Ì¬¼ÙÈÕ×é²ÎÊý
    //#define ACS_PARAM_VERIFY_HOLIDAY_GROUP         0x00000080 //¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼ÙÈÕ×é²ÎÊý
    //#define ACS_PARAM_CARD_RIGHT_HOLIDAY_GROUP     0x00000100 //¿¨È¨ÏÞ¼ÙÈÕ×é²ÎÊý
    //#define ACS_PARAM_DOOR_STATUS_PLAN_TEMPLATE    0x00000200 //ÃÅ×´Ì¬¼Æ»®Ä£°å²ÎÊý
    //#define ACS_PARAM_VERIFY_PALN_TEMPLATE         0x00000400 //¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼Æ»®Ä£°å²ÎÊý
    //#define ACS_PARAM_CARD_RIGHT_PALN_TEMPLATE     0x00000800 //¿¨È¨ÏÞ¼Æ»®Ä£°å²ÎÊý
    //#define ACS_PARAM_CARD                         0x00001000 //¿¨²ÎÊý
    //#define ACS_PARAM_GROUP                        0x00002000 //Èº×é²ÎÊý
    //#define ACS_PARAM_ANTI_SNEAK_CFG                 0x00004000 //·´Ç±»Ø²ÎÊý
    //#define ACS_PAPAM_EVENT_CARD_LINKAGE           0x00008000 //ÊÂ¼þ¼°¿¨ºÅÁª¶¯²ÎÊý
    //#define ACS_PAPAM_CARD_PASSWD_CFG              0x00010000 //ÃÜÂë¿ªÃÅÊ¹ÄÜ²ÎÊý
    //#define ACS_PARAM_PERSON_STATISTICS_CFG           0x00020000 //ÈËÊýÍ³¼Æ²ÎÊý
    BYTE byRes[32];
}NET_DVR_ACS_PARAM_TYPE, *LPNET_DVR_ACS_PARAM_TYPE;

typedef struct tagNET_DVR_VIDEO_INTERCOM_IOIN_CFG
{
    DWORD   dwSize;                 // ½á¹¹Ìå´óÐ¡
    BYTE    byIOUseType;     //ÓÃÍ¾£¬0-½ûÓÃ£¬1-¿ªÃÅ°´Å¥£¬2-ÃÅ×´Ì¬£¬0xff-×Ô¶¨Òå
    BYTE    byRes[63];              // ±£Áô×Ö½Ú
}NET_DVR_VIDEO_INTERCOM_IOIN_CFG, *LPNET_DVR_VIDEO_INTERCOM_IOIN_CFG;

typedef struct tagNET_DVR_VIDEO_INTERCOM_IOOUT_CFG
{
    DWORD   dwSize;                 // ½á¹¹Ìå´óÐ¡
    BYTE    byIOUseType;     //ÓÃÍ¾£¬0-½ûÓÃ£¬1-µçËø£¬0xff-×Ô¶¨Òå
    BYTE    byRes[63];              // ±£Áô×Ö½Ú
}NET_DVR_VIDEO_INTERCOM_IOOUT_CFG, *LPNET_DVR_VIDEO_INTERCOM_IOOUT_CFG;

typedef struct tagNET_DVR_ELEVATORCONTROL_CFG
{
    DWORD   dwSize;                 // ½á¹¹Ìå´óÐ¡
    BYTE    byEnable;   //ÊÇ·ñÆôÓÃÌÝ¿Ø£¬0-·ñ£¬1-ÊÇ
    BYTE    byRes1;     //±£Áô
    BYTE    byInterfaceType; //½Ó¿ÚÀàÐÍ£¬0-ÎÞ£¬1-RS485,2-Íø¿Ú
    BYTE    byRS485Protocol; //RS485Ð­ÒéÀàÐÍ£¬0-Î´Öª£¬1-Ë½ÓÐ£¬0xff-×Ô¶¨Òå£¬µ±byInterfaceTypeÈ¡ÖµÎª1Ê±ÓÐÐ§
    BYTE    byNetworkType;  //Íø¿ÚÐ­ÒéÀàÐÍ£¬0-Î´Öª£¬1-Ë½ÓÐ£¬0xff-×Ô¶¨Òå£¬µ±byInterfaceTypeÈ¡ÖµÎª2Ê±ÓÐÐ§
    BYTE    byRes[63];              // ±£Áô×Ö½Ú
}NET_DVR_ELEVATORCONTROL_CFG, *LPNET_DVR_ELEVATORCONTROL_CFG;

typedef struct tagNET_DVR_ELEVATORCONTROL_CFG_V40
{
    DWORD   dwSize;                 // ½á¹¹Ìå´óÐ¡
    BYTE    byEnable;               //ÊÇ·ñÆôÓÃÌÝ¿Ø£¬0-·ñ£¬1-ÊÇ
    BYTE    byRes1;                 //±£Áô
    BYTE    byInterfaceType;        //½Ó¿ÚÀàÐÍ£¬0-ÎÞ£¬1-RS485,2-Íø¿Ú
    BYTE    byRS485Protocol;        //RS485Ð­ÒéÀàÐÍ£¬0-Î´Öª£¬1-Ë½ÓÐ£¬0xff-×Ô¶¨Òå£¬µ±byInterfaceTypeÈ¡ÖµÎª1Ê±ÓÐÐ§
    BYTE    byNetworkType;          //Íø¿ÚÐ­ÒéÀàÐÍ£¬0-Î´Öª£¬1-Ë½ÓÐ£¬0xff-×Ô¶¨Òå£¬µ±byInterfaceTypeÈ¡ÖµÎª2Ê±ÓÐÐ§
    BYTE    byRes2;                 //±£Áô
    WORD    wServerPort;            //ÌÝ¿Ø·þÎñÆ÷¶Ë¿ÚºÅ£¬µ±Íø¿¨Ð­ÒéÀàÐÍÎª1-Ë½ÓÐ Ê±ÓÐÐ§
    NET_DVR_IPADDR    struServerIP; //ÌÝ¿Ø·þÎñÆ÷IP£¬µ±Íø¿¨Ð­ÒéÀàÐÍÎª1-Ë½ÓÐ Ê±ÓÐÐ§
    BYTE    byRes[256];              // ±£Áô×Ö½Ú
}NET_DVR_ELEVATORCONTROL_CFG_V40, *LPNET_DVR_ELEVATORCONTROL_CFG_V40;

typedef struct tagNET_DVR_VIDEOINTERCOM_STREAM
{
    DWORD dwSize;
    BYTE  byVisDevID[MAX_NAMELEN]; // ¿ÉÊÓ¶Ô½²Éè±¸±àºÅ£¬¼´³¤ºÅ£¬Éè±¸ÀàÐÍÎªIPCÊ±È«²¿Îª0
    BYTE  byDeviceName[NAME_LEN];  //Éè±¸Ãû³Æ
    BYTE  bySourceType;            //ÊÓÆµÔ´ÀàÐÍ£¬0ÎÞÒâÒå£¬1-IPC¡¢2-DVR/DVS/NVR¡¢3-ÃÅ¿Ú»ú¡¢4-Î§Ç½»ú¡¢5-¶þ´ÎÈ·ÈÏ»ú
    BYTE  byRes[255];              //±£Áô
}NET_DVR_VIDEOINTERCOM_STREAM, LPNET_DVR_VIDEOINTERCOM_STREAM;

#define UNLOCK_PASSWORD_LEN                        8 //½â³ýÃÜÂë³¤¶È
typedef struct tagNET_DVR_DOOR_CFG
{
    DWORD dwSize;
    BYTE byDoorName[DOOR_NAME_LEN]; //ÃÅÃû³Æ
    BYTE byMagneticType; //ÃÅ´ÅÀàÐÍ£¬0-³£±Õ£¬1-³£¿ª
    BYTE byOpenButtonType; //¿ªÃÅ°´Å¥ÀàÐÍ£¬0-³£±Õ£¬1-³£¿ª
    BYTE byOpenDuration; //¿ªÃÅ³ÖÐøÊ±¼ä£¬1-255s
    BYTE byDisabledOpenDuration; //²Ð¼²ÈË¿¨¿ªÃÅ³ÖÐøÊ±¼ä£¬1-255s
    BYTE byMagneticAlarmTimeout; //ÃÅ´Å¼ì²â³¬Ê±±¨¾¯Ê±¼ä£¬0-255s£¬0±íÊ¾²»±¨¾¯
    BYTE byEnableDoorLock; //ÊÇ·ñÆôÓÃ±ÕÃÅ»ØËø£¬0-·ñ£¬1-ÊÇ
    BYTE byEnableLeaderCard; //ÊÇ·ñÆôÓÃÊ×¿¨³£¿ª¹¦ÄÜ£¬0-·ñ£¬1-ÊÇ
    BYTE byRes1;
    DWORD dwLeaderCardOpenDuration; //Ê×¿¨³£¿ª³ÖÐøÊ±¼ä£¬1-1440min
    BYTE byStressPassword[STRESS_PASSWORD_LEN]; //Ð²ÆÈÃÜÂë
    BYTE bySuperPassword[SUPER_PASSWORD_LEN]; //³¬¼¶ÃÜÂë
    BYTE byUnlockPassword[UNLOCK_PASSWORD_LEN];         //½â³ýÂë
    BYTE byRes2[56];
}NET_DVR_DOOR_CFG, *LPNET_DVR_DOOR_CFG;

typedef struct tagNET_DVR_VIS_DEV_INFO
{
    DWORD   dwSize;
    BYTE    szDevNumber[MAX_DEV_NUMBER_LEN];    //Éè±¸±àºÅ
    BYTE    byRes[64];                          //±£Áô
}NET_DVR_VIS_DEV_INFO,*LPNET_DVR_VIS_DEV_INFO;

typedef struct tagNET_DVR_VIS_REGISTER_INFO
{
    DWORD       dwSize;
    DWORD       dwID;                                  //ID
    BYTE        szDevNumber[MAX_DEV_NUMBER_LEN];    //Éè±¸±àºÅ
    BYTE        byMACAddr[MACADDR_LEN];             //macµØÖ·
    BYTE        byRes1[2];                           //±£Áô
    BYTE        sSerialNumber[SERIALNO_LEN];        //Éè±¸ÐòÁÐºÅ
    NET_DVR_IPADDR   struDevIP;                     //Éè±¸IPµØÖ·
    NET_DVR_TIME_EX struRegisterTime;                 //×¢²áÊ±¼ä
    BYTE        byRegisterType;                     //×¢²áÀàÐÍ£¬0-±£Áô¡¢1-ÃÅ¿Ú»ú£¬2-¹ÜÀí»ú¡¢3-ÊÒÄÚ»ú¡¢4-Î§Ç½»ú¡¢5-±ðÊûÃÅ¿Ú»ú¡¢6-¶þ´ÎÈ·ÈÏ»ú¡¢7-8700¿Í»§¶Ë¡¢8-4200¿Í»§¶Ë
    BYTE        byRes[127];                         //±£Áô
}NET_DVR_VIS_REGISTER_INFO,*LPNET_DVR_VIS_REGISTER_INFO;

typedef struct tagNET_DVR_CALLER_INFO
{
    DWORD dwSize;          //½á¹¹Ìå´óÐ¡
    WORD   wBuildingNo;    //Â¥ºÅ
    SHORT   wFloorNo;    //²ãºÅ
    BYTE   byZoneNo;        //ÆÚºÅ
    BYTE   byUnitNo;    //µ¥ÔªºÅ
    BYTE   byDevNo;    //Éè±¸±àºÅ
    BYTE    byDevType;   //Éè±¸ÀàÐÍ£¬1-ÃÅ¿Ú»ú£¬2-¹ÜÀí»ú£¬3-ÊÒÄÚ»ú£¬4-Î§Ç½»ú£¬5-±ðÊûÃÅ¿Ú»ú£¬6-¶þ´ÎÈ·ÈÏ»ú£¬7-8700¿Í»§¶Ë£¬8-4200¿Í»§¶Ë£¬9-APP
    BYTE    byRes[100];        //±£Áô
}NET_DVR_CALLER_INFO,*LPNET_DVR_CALLER_INFO;

typedef struct tagNET_DVR_CALL_STATUS
{
    DWORD dwSize;          //½á¹¹Ìå´óÐ¡
    BYTE   byCallStatus; //»ñÈ¡Í¨»°×´Ì¬£¬1-ÎÞºô½Ð¡¢2-ÏìÁå¡¢3-ÕýÔÚÍ¨»°
    BYTE   byRes[127];
}NET_DVR_CALL_STATUS, *LPNET_DVR_CALL_STATUS;

#define MAX_SERVER_DEVICE_NUMBER                  16  //×î´óÉè±¸ÊýÁ¿

typedef struct tagNET_DVR_SERVER_DEVICE_CFG
{
    BYTE    byDeviceName[NAME_LEN];   //Éè±¸Ãû³Æ
    BYTE       byDeviceType; ////Éè±¸ÀàÐÍ£¬1-ÃÅ¿Ú»ú£¬2-¹ÜÀí»ú£¬3-ÊÒÄÚ»ú
    BYTE       byDeviceID; //ÃÅ¿Ú»ú±àºÅ
    BYTE    byRes[6];        //±£Áô
}NET_DVR_SERVER_DEVICE_CFG,*LPNET_DVR_SERVER_DEVICE_CFG;

typedef struct tagNET_DVR_SERVER_DEVICE_INFO
{
    DWORD   dwSize;  //½á¹¹Ìå´óÐ¡
    DWORD     dwDeviceNum; //Éè±¸Êý
    NET_DVR_SERVER_DEVICE_CFG    struDeviceCfg[MAX_SERVER_DEVICE_NUMBER];   //Éè±¸ÐÅÏ¢
    BYTE    byRes[200];        //±£Áô
}NET_DVR_SERVER_DEVICE_INFO,*LPNET_DVR_SERVER_DEVICE_INFO;

typedef struct tagNET_DVR_VIDEO_CALL_PARAM
{
    DWORD    dwSize;
    DWORD   dwCmdType;      //ÐÅÁîÀàÐÍ  0-ÇëÇóºô½Ð£¬1-È¡Ïû±¾´Îºô½Ð£¬2-½ÓÌý±¾´Îºô½Ð 3-¾Ü¾ø±¾µØÀ´µçºô½Ð 4-±»½ÐÏìÁå³¬Ê± 5-½áÊø±¾´ÎÍ¨»°£¬6-Éè±¸ÕýÔÚÍ¨»°ÖÐ£¬7-¿Í»§¶ËÕýÔÚÍ¨»°ÖÐ£¬8ÊÒÄÚ»ú²»ÔÚÏß
    WORD wPeriod;  //ÆÚºÅ, ·¶Î§[0,9]
    WORD wBuildingNumber; //Â¥ºÅ
    WORD wUnitNumber;  //µ¥ÔªºÅ
    SHORT wFloorNumber;  //²ãºÅ
    WORD  wRoomNumber;    //·¿¼äºÅ
    BYTE    byRes[118];     //±£Áô
}NET_DVR_VIDEO_CALL_PARAM,*LPNET_DVR_VIDEO_CALL_PARAM;

#define MAX_SCREEN_ADDRESS_LEN 16 //ÌØÕ÷Âë×î´ó³¤¶È
#define MAX_DAY_TIME_POINT 8   //Ã¿Ìì×î´óÊ±¼äµã¸öÊý
#define MAX_TIME_POINT     16  //Ã¿Äê×î´óÊ±¼äµã¸öÊý

typedef struct tagNET_DVR_DEV_IP_INFO
{
    BYTE byUserName[NAME_LEN]; //ÓÃ»§Ãû
    BYTE byPassWord[PASSWD_LEN]; //ÃÜÂë
    NET_DVR_IPADDR struIPAddr; //IPµØÖ·
    WORD wPort; //¶Ë¿ÚºÅ
    BYTE byRes[24];    
}NET_DVR_DEV_IP_INFO, *LPNET_DVR_DEV_IP_INFO;

typedef union tagNET_DVR_SCREEN_BASE_INFO
{
    BYTE byScreenAddress[MAX_SCREEN_ADDRESS_LEN]; //ÆÁÄ»ÌØÕ÷Âë£¬Éè±¸Ìí¼Ó·½Ê½Îª0Ê±ÓÐÐ§
    NET_DVR_DEV_IP_INFO struIPInfo; //ÆÁÄ»ipµØÖ·ÐÅÏ¢
    BYTE byRes[100];
}NET_DVR_SCREEN_BASE_INFO,*LPNET_DVR_SCREEN_BASE_INFO;

typedef struct tagNET_DVR_SCREEN_INDEX_CFG
{
    DWORD dwSize;
    BYTE byEnbale; //Ê¹ÄÜ£¬0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE byDevAddType; //Éè±¸Ìí¼Ó·½Ê½£¬0-°´ÌØÕ÷Âë(·þÎñÆ÷ºÍÆÁÄ»Ê¹ÓÃ´®¿ÚÍ¨ÐÅ)£¬1-°´IPµØÖ·(·þÎñÆ÷ºÍÆÁÄ»Ê¹ÓÃÍøÂçÍ¨ÐÅ)
    BYTE byRes1[2];
    NET_DVR_SCREEN_BASE_INFO struScreenBaseInfo; //ÆÁÄ»Éè±¸»ù±¾ÐÅÏ¢
    BYTE byRes[32];
}NET_DVR_SCREEN_INDEX_CFG,*LPNET_DVR_SCREEN_INDEX_CFG;

//Ä£ÄâÒ£¿ØÆ÷²ÎÊý
typedef struct tagNET_DVR_SIMULATE_REMOTE_CTRL
{
    BYTE        byControlType;    //1-µçÔ´¿ª£¬2-µçÔ´¹Ø£¬3-ÐÅºÅÔ´£¬4-²Ëµ¥£¬5-È·¶¨£¬6-ÉÏ£¬7-ÏÂ£¬8-×ó£¬9-ÓÒ,  10-INFO, 11-·µ»ØÉÏÒ»²ã,12-Êý×Ö°´¼ü
    BYTE        byControlParam; //²Ù×÷²ÎÊý£¬²Ù×÷ÀàÐÍÎª12Ê±£¬±íÊ¾°´¼üÖµ(0-9)£¬ÆäËû²Ù×÷Ê±´Ë²ÎÊýÎÞÐ§
    BYTE        byRes[14];
}NET_DVR_SIMULATE_REMOTE_CTRL, *LPNET_DVR_SIMULATE_REMOTE_CTRL;

//ÆÁÄ»Î¬Ç½²ÎÊý
typedef struct tagNET_DVR_SCREEN_WALL_CTRL
{
    BYTE byEnable; //×´Ì¬¿ª¹Ø¡£0-Îª¹Ø±Õ£»1-Îª¿ªÆô
    BYTE byRes[15];
}NET_DVR_SCREEN_WALL_CTRL, *LPNET_DVR_SCREEN_WALL_CTRL;

//ÇøÓò·Å´ó»¹Ô­²ÎÊý
typedef struct tagNET_DVR_AREA_ZOOM_CFG
{
    BYTE byCmd;    //ÇøÓò·Å´ó»¹Ô­Ö¸Áî£¬1-·Å´ó£¬2-»¹Ô­
    BYTE byRes[3];
    NET_DVR_RECTCFG struArea; //ÐèÒª·Å´óµÄÇøÓò£¬ÒÔ1920*1920×÷ÎªÆÁÄ»×Ü´óÐ¡£¬»¹Ô­Ê±´Ë²ÎÊýÎÞÐ§
}NET_DVR_AREA_ZOOM_CFG, *LPNET_DVR_AREA_ZOOM_CFG;

typedef  union tagNET_DVR_SCREEN_CONTROL_PARAM
{
    NET_DVR_INPUT_INTERFACE_CTRL    struInputCtrl;
    NET_DVR_DISPLAY_COLOR_CTRL         struDisplayCtrl;
    NET_DVR_DISPLAY_POSITION_CTRL     struPositionCtrl;
    NET_DVR_SIMULATE_REMOTE_CTRL struSimulateRemoteCrtl; //Ä£ÄâÒ£¿Ø°´¼ü
    NET_DVR_SCREEN_WALL_CTRL struScreenWallCtrl; //ÆÁÄ»Î¬Ç½²ÎÊý  
    NET_DVR_AREA_ZOOM_CFG struZoomArea;  //ÇøÓò·Å´ó»¹Ô­²ÎÊý
    BYTE        byRes[16];
}NET_DVR_SCREEN_CONTROL_PARAM, *LPNET_DVR_SCREEN_CONTROL_PARAM;

typedef struct tagNET_DVR_SCREEN_CONTROL
{     
    DWORD     dwSize;             
    DWORD      dwCommand ;      /* ¿ØÖÆ·½·¨ 1-¿ª 2-¹Ø 3-ÆÁÄ»ÊäÈëÔ´Ñ¡Ôñ 4-ÏÔÊ¾µ¥ÔªÑÕÉ«¿ØÖÆ 5-ÏÔÊ¾µ¥ÔªÎ»ÖÃ¿ØÖÆ*/
    BYTE       byProtocol;      //´®¿ÚÐ­ÒéÀàÐÍ,1:LCD-S1,2:LCD-S2
    BYTE    byRes1[3];
    NET_DVR_SCREEN_CONTROL_PARAM    struControlParam;
    BYTE       byRes2[52];    
}NET_DVR_SCREEN_CONTROL, *LPNET_DVR_SCREEN_CONTROL;

typedef struct tagNET_DVR_SCREEN_CONTROL_V41
{     
    DWORD   dwSize;
    BYTE    bySerialNo;        //´®¿ÚºÅ
    BYTE    byRes[2];
    BYTE       byProtocol;    // ´®¿ÚÐ­ÒéÀàÐÍ 1-LCD-S1,2-LCD-S2,3-LCD-L1,4-LCD-DLP,5-LCD-S3,6-LCD-D20£¬7-LCD-L2,8-LCD-Z1£¬
    //9-LCD-D20/D,10-LCD-D20/S,11-LCD-D20/P,12-LCD-D20/T,13-LCD-D20/F,14-LCD-D20/DF,15-LCD-D20/FS,
    //16-LCD-D20/FP,17-LCD-D20/FT,18-LCD-D5022,19-LCD-D5032,20-LCD-D5042+,21-LCD-D20/Z  0xff-ÎÞÐ§£¬Ê¹ÓÃÔ¤ÏÈ°ó¶¨µÄÐ­ÒéÀàÐÍ 
    DWORD      dwCommand ;      /* ¿ØÖÆ·½·¨ 1-¿ª 2-¹Ø 3-ÆÁÄ»ÊäÈëÔ´Ñ¡Ôñ 4-ÏÔÊ¾µ¥ÔªÑÕÉ«¿ØÖÆ 5-ÏÔÊ¾µ¥ÔªÎ»ÖÃ¿ØÖÆ£¬6-Ä£ÄâÒ£¿Ø°´¼ü,7-ÏÔÊ¾ÆÁÄ»×´Ì¬,
    8-ÏÔÊ¾ÆÁÄ»ÌØÕ÷Âë£¨´ËÃüÁî¾ØÐÎÇøÓòÆðÊ¼×ø±êÉèÎª£¨0,0£©£¬¿í¸ß¾ùÉèÎª0xffffffff£©, 9-ÆÁÄ»Î¬Ç½,10-»Ö¸´ÆÁÄ»Ä¬ÈÏ²ÎÊý£¬11-ÏÔÊ¾IP£¨´ËÃüÁî¾ØÐÎÇøÓòÆðÊ¼×ø±êÉèÎª£¨0,0£©£¬¿í¸ß¾ùÉèÎª0xffffffff£©,12-ÆÁÄ»USBÉý¼¶ 13-ÇøÓò·Å´ó»¹Ô­*/
    NET_DVR_SCREEN_CONTROL_PARAM    struControlParam;
    BYTE    byWallNo;        // µçÊÓÇ½ºÅ
    BYTE   byRes1[3];
    NET_DVR_RECTCFG_EX struRect;//¸ù¾Ý×ø±ê½øÐÐ¼ÆËã£¬»ù×¼×ø±ê
    BYTE   byRes2[28];
}NET_DVR_SCREEN_CONTROL_V41, *LPNET_DVR_SCREEN_CONTROL_V41;

typedef struct tagNET_DVR_MSC_SPLICE_CFG
{
    DWORD dwSize;
    BYTE bySpliceNo; //Æ´½ÓÆÁºÅ
    BYTE byWallNo; //µçÊÓÇ½ºÅ
    BYTE byEnable; //ÊÇ·ñÊ¹ÄÜ£¬0-·ñ£¬1-ÊÇ
    BYTE byRes1[1];
    NET_DVR_RECTCFG_EX struRectCfg; //ÐèÒª½øÐÐÆ´½ÓµÄÇøÓò£¬»ñÈ¡µÄÊ±ºò´Ë²ÎÊýÌî0
    BYTE byRes2[32];
}NET_DVR_MSC_SPLICE_CFG,*LPNET_DVR_MSC_SPLICE_CFG;

typedef struct tagNET_DVR_MSC_SCREEN_INTERFACE_CFG
{
    DWORD dwSize;
    BYTE  byInterfaceType;    //ÊäÈëÔ´Ë÷Òý£¬¼ûÃ¶¾Ù INPUT_INTERFACE_TYPE
    BYTE  byNoSignalPic;        //ÎÞÐÅºÅ»­ÃæÄ£Ê½£¬1-À¶ÆÁ£¬2-ºÚÆÁ£¬3-LOGO»­Ãæ
    BYTE  byRes[30];       
}NET_DVR_MSC_SCREEN_INTERFACE_CFG,*LPNET_DVR_MSC_SCREEN_INTERFACE_CFG;

//±³¹â²ÎÊý
typedef struct tagNET_DVR_MSC_SCREEN_BACKLIGHT_CFG
{
    DWORD dwSize;
    BYTE byBacklight; //±³¹â£¬0-100
    BYTE byRes[15];
}NET_DVR_MSC_SCREEN_BACKLIGHT_CFG,*LPNET_DVR_MSC_SCREEN_BACKLIGHT_CFG;

//»­ÖÐ»­²ÎÊý
typedef struct tagNET_DVR_MSC_SCREEN_PIP_CFG
{
    DWORD dwSize;
    BYTE    byEnable;    //ÊÇ·ñÆôÓÃ»­ÖÐ»­ 0-²»ÆôÓÃ 1-ÆôÓÃ
    BYTE    bySubWindowSource;    //×Ó»­ÃæÐÅºÅÔ´£¬²Î¿¼Ã¶¾ÙINPUT_INTERFACE_TYPE
    BYTE    bySubWindowBorderColor;    //×Ó»­Ãæ±ß¿òÑÕÉ«£¬ 1-À¶É«£¬2-ºÚÉ«
    BYTE    byRes1;
    NET_DVR_RECTCFG_EX  struPosition;    //×Ó»­ÃæÎ»ÖÃ£¬ÆÁÄ»×Ü´óÐ¡Îª1920*1920
    BYTE    byRes2[16];
}NET_DVR_MSC_SCREEN_PIP_CFG,*LPNET_DVR_MSC_SCREEN_PIP_CFG;

typedef struct tagNET_DVR_SCREEN_WORK_STATE
{
    DWORD dwSize;
    BYTE           byFanStatus;//·çÉÈ×´Ì¬£¬0-¹Ø£¬1-¿ª
    BYTE           byFanExceptionStatus;    //·çÉÈÒì³£×´Ì¬£¬0-²»Ö§³Ö£¬1-Õý³££¬2-Òì³£
    BYTE           byRes1[2];
    DWORD          dwWorkingHours; //ÀÛ»ý¹¤×÷Ê±³¤£¬µ¥Î»£ºÐ¡Ê±
    BYTE           byVersion[VERSION_LEN];//Èí¼þ°æ±¾ºÅ
    int            iTemperature; //°å¿¨ÎÂ¶È£¬¾«È·µ½¸öÎ»£¬µ¥Î»£ºÉãÊÏ¶È
    BYTE             byTempState;     //°å¿¨ÎÂ¶È×´Ì¬£¬0-²»Ö§³Ö£¬1-Õý³££¬2-Òì³£
    BYTE           byRes[31];
}NET_DVR_SCREEN_WORK_STATE,*LPNET_DVR_SCREEN_WORK_STATE;

//¿ª»úlogo²ÎÊý
typedef struct tagNET_DVR_BOOT_LOGO_CFG
{
    DWORD dwSize;
    BYTE byEnable; //¿ª»úÊÇ·ñÏÔÊ¾logo,0-²»ÏÔÊ¾£¬1-ÏÔÊ¾
    BYTE byRes[31];    
}NET_DVR_BOOT_LOGO_CFG,*LPNET_DVR_BOOT_LOGO_CFG;
//ÒôÆµ²ÎÊý
typedef struct tagNET_DVR_LCD_AUDIO_CFG
{
    DWORD   dwSize;
    BYTE    byMute; //ÊÇ·ñ¾²Òô£¬0-·ñ£¬1-ÊÇ
    BYTE    byVolume; //ÒôÁ¿´óÐ¡£¬0-100
    char    byBalance; //ÉùµÀÆ½ºâ£¬-50-+50
    BYTE    byRes[33];
}NET_DVR_LCD_AUDIO_CFG, *LPNET_DVR_LCD_AUDIO_CFG;

//ÆÁÄ»²ÎÊýÁªºÏÌå
typedef union tagNET_DVR_MSC_SCREEN_PARAM
{
    NET_DVR_MSC_SCREEN_INTERFACE_CFG struInterfaceCfg; //ÊäÈëÔ´²ÎÊý
    NET_DVR_SCREEN_FAN_WORK_MODE_CFG struFanWorkMode; //·çÉÈ¹¤×÷Ä£Ê½²ÎÊý
    NET_DVR_SCREEN_VGA_CFG struVgaCfg; //VGAÐÅºÅ²ÎÊý
    NET_DVR_SCREEN_MENU_CFG struMenuCfg; //ÆÁÄ»²Ëµ¥²ÎÊý
    NET_DVR_VIDEO_OUT_CFG struOutEffectCfg; //ÏÔÊ¾Ð§¹û²ÎÊý
    NET_DVR_COLOR_TEMPERATURE_CFG struColorTemperatureCfg; //É«ÎÂ²ÎÊý
    NET_DVR_ADC_CFG struAdcCfg; //ADC²ÎÊý
    NET_DVR_SCREEN_EDGE_CFG struScreenEdgeCfg; //ÆÁÄ»±ßÔµ²ÎÊý
    NET_DVR_MSC_SCREEN_BACKLIGHT_CFG struBacklight; //±³¹â²ÎÊý
    NET_DVR_MSC_SCREEN_PIP_CFG struPicInPicCfg; //»­ÖÐ»­²ÎÊý
    NET_DVR_DEFOG_LCD struDefog; //È¥Îí²ÎÊý
    NET_DVR_SCREEN_WORK_STATE struWorkState; //ÆÁÄ»¹¤×÷×´Ì¬
    NET_DVR_BOOT_LOGO_CFG struBootLogoCfg; //¿ªÊ¼ÏÔÊ¾logo²ÎÊý
    NET_DVR_LCD_AUDIO_CFG struAudioCfg; //ÒôÆµ²ÎÊý
    BYTE byRes[256];
}NET_DVR_MSC_SCREEN_PARAM,*LPNET_DVR_MSC_SCREEN_PARAM;

typedef struct tagNET_DVR_MSC_SCREEN_PARAM_CFG
{
    DWORD dwSize;
    BYTE byParamType; //²ÎÊýÀàÐÍ£¬1-ÊäÈëÔ´²ÎÊý£¬2-·çÉÈ¹¤×÷Ä£Ê½²ÎÊý£¬3-VGAÐÅºÅ²ÎÊý£¬4-ÆÁÄ»²Ëµ¥²ÎÊý£¬5-ÏÔÊ¾Ð§¹û²ÎÊý£¬6-É«ÎÂ²ÎÊý£¬7-ADC²ÎÊý£¬8-ÆÁÄ»±ßÔµ²ÎÊý£¬9-±³¹â²ÎÊý£¬10-»­ÖÐ»­²ÎÊý£¬11-Í¸Îí²ÎÊý£¬12-ÆÁÄ»¹¤×÷×´Ì¬£¨Ö»ÄÜ»ñÈ¡£©£¬13-¿ª»úLOGOÊÇ·ñÏÔÊ¾²ÎÊý  14-ÒôÆµ²ÎÊý
    BYTE byRes1[3];
    NET_DVR_MSC_SCREEN_PARAM struParam; //ÆÁÄ»²ÎÊý
    BYTE byRes2[32];
}NET_DVR_MSC_SCREEN_PARAM_CFG,*LPNET_DVR_MSC_SCREEN_PARAM_CFG;

typedef struct tagNET_DVR_MSC_SCREEN_REMOTE_CFG
{
    DWORD dwSize;
    BYTE byWallNo; //µçÊÓÇ½ºÅ
    BYTE byRes1[3];
    NET_DVR_RECTCFG_EX struRectCfg; //ÆÁÄ»ÇøÓò
    NET_DVR_MSC_SCREEN_PARAM_CFG struScreenParam; //ÅäÖÃµÄÆÁÄ»²ÎÊý
    BYTE byRes2[32];
}NET_DVR_MSC_SCREEN_REMOTE_CFG,*LPNET_DVR_MSC_SCREEN_REMOTE_CFG;

typedef struct tagNET_DVR_MSC_SCREEN_PARAM_COND
{
    DWORD dwSize;
    BYTE byWallNo; //µçÊÓÇ½ºÅ
    BYTE byParamType; //²ÎÊýÀàÐÍ£¬1-ÊäÈëÔ´²ÎÊý£¬2-·çÉÈ¹¤×÷Ä£Ê½²ÎÊý£¬3-VGAÐÅºÅ²ÎÊý£¬4-ÆÁÄ»²Ëµ¥²ÎÊý£¬5-ÏÔÊ¾Ð§¹û²ÎÊý£¬6-É«ÎÂ²ÎÊý£¬7-ADC²ÎÊý£¬8-ÆÁÄ»±ßÔµ²ÎÊý£¬9-±³¹â²ÎÊý£¬10-»­ÖÐ»­²ÎÊý£¬11-Í¸Îí²ÎÊý£¬12-ÆÁÄ»¹¤×÷×´Ì¬£¨Ö»ÄÜ»ñÈ¡£©£¬13-¿ª»úLOGOÊÇ·ñÏÔÊ¾²ÎÊý 14-ÒôÆµ²ÎÊý
    BYTE byRes1[2];
    NET_DVR_RECTCFG_EX struRectCfg; //ÆÁÄ»ÇøÓò
    BYTE byRes2[32];
}NET_DVR_MSC_SCREEN_PARAM_COND,*LPNET_DVR_MSC_SCREEN_PARAM_COND;

typedef struct tagNET_DVR_SWITCH_DAY_TIME
{
    BYTE byEnable; //ÊÇ·ñÆôÓÃ¸ÃÊ±¼äµã,0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE bySwitchType; //¿ª¹Ø»úÀàÐÍ£¬0-¹Ø»ú£¬1-¿ª»ú
    BYTE byRes1[2];
    NET_DVR_DAYTIME struTimePoint; //¿ª¹Ø»úÊ±¼äµã
    BYTE byRes2[8];
}NET_DVR_SWITCH_DAY_TIME,*LPNET_DVR_SWITCH_DAY_TIME;

typedef struct tagNET_DVR_SWITCH_TIME_POINT
{
    BYTE byEnable; //ÊÇ·ñÆôÓÃ¸ÃÊ±¼äµã,0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE bySwitchType; //¿ª¹Ø»úÀàÐÍ£¬0-¹Ø»ú£¬1-¿ª»ú
    BYTE byRes1[2];
    NET_DVR_SYSTEM_TIME struTimePoint; //¿ª¹Ø»úÊ±¼äµã
    BYTE byRes2[16];
}NET_DVR_SWITCH_TIME_POINT,*LPNET_DVR_SWITCH_TIME_POINT;

typedef struct tagNET_DVR_TIME_SWITCH_CFG
{
    DWORD dwSize;
    NET_DVR_SWITCH_DAY_TIME struSwitchDayTime[MAX_DAYS][MAX_DAY_TIME_POINT]; //ÖÜ¿ª¹Ø»ú¼Æ»®
    NET_DVR_SWITCH_TIME_POINT struSwitchTimePoint[MAX_TIME_POINT]; //°´Ê±¼äµã¿ª¹Ø»ú²ÎÊý
    BYTE byRes[64];
}NET_DVR_TIME_SWITCH_CFG,*LPNET_DVR_TIME_SWITCH_CFG;

typedef struct tagNET_DVR_VIDEO_WALL_AREA
{
    DWORD dwSize;
    BYTE byWallNo; //µçÊÓÇ½ºÅ
    BYTE byRes1[3];
    NET_DVR_RECTCFG_EX struRect; //ÆÁÄ»·¶Î§
    BYTE byRes2[32];
}NET_DVR_VIDEO_WALL_AREA, *LPNET_DVR_VIDEO_WALL_AREA;

typedef struct tagNET_DVR_DELAY_TIME
{
    DWORD dwSize;
    DWORD dwDelayTime; //ÑÓÊ±Ê±¼ä£¬0-3000£¬µ¥Î»£ºms
    BYTE byRes[32];
}NET_DVR_DELAY_TIME,*LPNET_DVR_DELAY_TIME;

//Ë«Ä¿±ê¶¨ÀàÐÍ
typedef enum _BV_CALIBRATION_TYPE_ENUM_
{
    ENUM_BV_CALIBRATION_NONE    = 0, //Î´±ê¶¨
        ENUM_BV_CALIBRATION_DIRECT  = 1, //Ë«Ä¿Ö±½Ó±ê¶¨
        ENUM_BV_CALIBRATION_SAMPLE = 2, //Ë«Ä¿Ñù±¾±ê¶¨
} BV_CALIBRATION_TYPE_ENUM;


//Ñù±¾±ê¶¨µã
typedef struct tagNET_DVR_BV_SAMPLE_CALIB_POINT
{   
    BYTE  byCalibPtID;   //±ê¶¨µãID£¬·¶Î§[1,5]¡£±íÊ¾´ËµãÔÚË«Ä¿±ê¶¨¹ý³ÌÖÐµÄÐòºÅ
    BYTE  byRes1[3];     //±£Áô
    NET_VCA_POINT struPoint;  //±ê¶¨µã×ø±ê
    BYTE  byRes2[16];    //±£Áô
}NET_DVR_BV_SAMPLE_CALIB_POINT,*LPET_DVR_BV_SAMPLE_CALIB_POINT;

//¿ªÊ¼Ñù±¾±ê¶¨ÊäÈë²ÎÊý
typedef struct tagNET_DVR_BV_SAMPLE_CALIB_BEGIN_PARAM
{
    DWORD  dwCameraHeight;  //ÉãÏñ»ú¸ß¶È£¬µ¥Î»cm
    DWORD  dwHumanHeight;  //ÈËÌåÉí¸ß£¬µ¥Î»cm
    BYTE    byRes[248];      //±£Áô
}NET_DVR_BV_SAMPLE_CALIB_BEGIN_PARAM,*LPNET_DVR_BV_SAMPLE_CALIB_BEGIN_PARAM;

//ÉèÖÃÑù±¾±ê¶¨ÊäÈë²ÎÊý
typedef struct tagNET_DVR_BV_SAMPLE_CALIB_SET_PARAM
{
    NET_DVR_BV_SAMPLE_CALIB_POINT struCalibPoint; //±ê¶¨µã¡£¼´µ±ÈËÔ±±£³ÖÖ±Á¢ÐÐ×ß£¬ÈËÁ³³öÏÖÔÚÌØ¶¨»­ÃæÇøÓòÖÐÊ±£¬´Ëµã±íÊ¾¶ÔÏóÁ½ÑÛÁ¬ÏßµÄÖÐµã¡£
    BYTE byRes[228]; //±£Áô
}NET_DVR_BV_SAMPLE_CALIB_SET_PARAM,*LPNET_DVR_BV_SAMPLE_CALIB_SET_PARAM;

//½áÊøÑù±¾±ê¶¨ÊäÈë²ÎÊý
typedef struct tagNET_DVR_BV_SAMPLE_CALIB_END_PARAM
{
    BYTE byRes[256]; //±£Áô
}NET_DVR_BV_SAMPLE_CALIB_END_PARAM,*LPNET_DVR_BV_SAMPLE_CALIB_END_PARAM;

//Ñù±¾±ê¶¨ÊäÈë²ÎÊýÁªºÏÌå
typedef union tagNET_DVR_BV_SAMPLE_CALIB_PARAM_UNION
{   
    BYTE byRes[256]; //±£Áô
    NET_DVR_BV_SAMPLE_CALIB_BEGIN_PARAM struCalibBegin; //¿ªÊ¼±ê¶¨ÊäÈë²ÎÊý
    NET_DVR_BV_SAMPLE_CALIB_SET_PARAM struCalibSet; //ÉèÖÃ±ê¶¨ÊäÈë²ÎÊý
    NET_DVR_BV_SAMPLE_CALIB_END_PARAM struCalibEnd; //½áÊø±ê¶¨ÊäÈë²ÎÊý
}NET_DVR_BV_SAMPLE_CALIB_PARAM_UNION,*LPNET_DVR_BV_SAMPLE_CALIB_PARAM_UNION;

//Ñù±¾±ê¶¨ÃüÁîÃ¶¾Ù
typedef enum _BV_SAMPLE_CALIB_CMD_ENUM
{
    ENUM_BV_SAMPLE_CALIB_BEGIN    = 1,   //¿ªÊ¼±ê¶¨
        ENUM_BV_SAMPLE_CALIB_SETTING  = 2,   //ÉèÖÃ²ÎÊý
        ENUM_BV_SAMPLE_CALIB_END      = 3    //½áÊø±ê¶¨
}BV_SAMPLE_CALIB_CMD_ENUM;

//Ñù±¾±ê¶¨½á¹¹Ìå
typedef struct tagNET_DVR_BV_SAMPLE_CALIBRATION
{   
    DWORD   dwSize;     //½á¹¹Ìå´óÐ¡
    DWORD   dwChannel;  //Í¨µÀºÅ
    BYTE    byCommand; //±ê¶¨ÃüÁî£¬²Î¼ûBV_SAMPLE_CALIB_CMD _ENUM
    BYTE    byRes1[3];    //±£Áô
    NET_DVR_BV_SAMPLE_CALIB_PARAM_UNION uCalibParam; //±ê¶¨ÊäÈë²ÎÊý£¬È¡ÖµÒÀÀµÓÚ×Ö¶ÎbyCommand
    BYTE    byRes2[256] ;  //±£Áô
}NET_DVR_BV_SAMPLE_CALIBRATION,*LPNET_DVR_BV_SAMPLE_CALIBRATION;


//Ë«Ä¿Ñù±¾±ê¶¨ÐÅÏ¢
typedef struct tagNET_DVR_BV_SAMPLE_CALIB_CFG
{
    DWORD  dwSize;             //½á¹¹Ìå´óÐ¡
    DWORD  dwCameraHeight;    //ÉãÏñ»ú¸ß¶È£¬µ¥Î»cm
    float  fPitchAngle;   //ÉãÏñ»ú¸©ÊÓ½Ç¶È[0¡ã, 60¡ã],
    float  fInclineAngle; //ÉãÏñ»úÇãÐ±½Ç¶È[-20¡ã,20¡ã]
    NET_DVR_BV_SAMPLE_CALIB_POINT struCalibPoint[MAX_SAMPLE_NUM]; //±ê¶¨µã×é
    BYTE  byRes[256]; //±£Áô
}NET_DVR_BV_SAMPLE_CALIB_CFG,*LPNET_DVR_BV_SAMPLE_CALIB_CFG;

//Ë«Ä¿Í¼ÏñÐ£Õý²ÎÊý½á¹¹Ìå
typedef struct tagNET_DVR_BINOC_RECTIFY_PARAM
{   
    float   fCamInternalMatrix[3][3];  //Ïà»úÄÚ²Î¾ØÕó£¬°üÀ¨½¹¾à¼°Ö÷µã×ø±ê
    float   fDistCoeffs[8];            //¾µÍ·»û±äÏµÊý
    float   fRotateMatrix[3][3];       //Ð£ÕýºóµÄÐý×ª¾ØÕó
    float   fProjectMatrix[3][4];      //Ð£ÕýºóµÄÍ¶Ó°¾ØÕó
    BYTE    byRes[64];              //±£Áô
}NET_DVR_BINOC_RECTIFY_PARAM, *LPNET_DVR_BINOC_RECTIFY_PARAM;

//×óÓÒÏà»úÐ£Õý²ÎÊý
typedef struct _tagNET_DVR_BV_CORRECT_PARAM
{
    DWORD  dwSize;                       //½á¹¹´óÐ¡
    float      fReprojectMatrix[4][4];   //ÖØÍ¶Ó°¾ØÕó
    NET_DVR_BINOC_RECTIFY_PARAM  struLCamParam; //×óÏà»úÐ£Õý²ÎÊý
    NET_DVR_BINOC_RECTIFY_PARAM  struRCamParam; //ÓÒÏà»úÐ£Õý²ÎÊý
    BYTE    byLensType;             //¾µÍ·½¹¾àÀàÐÍ£¬0-Î´Öª,1-8mm,2-12mm,3-16mm,4-25mm,5-35mm,6-50mm,7-4mm,8-6mm
    BYTE    byRes[255];             //±£Áô
} NET_DVR_BV_CORRECT_PARAM,*LPNET_DVR_BV_CORRECT_PARAM;

//Êä³öÊÓÆµÀàÐÍ
typedef struct tagNET_DVR_OUTPUT_VIDEO_TYPE
{
    DWORD  dwSize;     //½á¹¹´óÐ¡
    BYTE   byType;     //Êä³öÊÓÆµÀàÐÍ£¬1-Æ´½ÓÍ¼£¬2-Éî¶ÈÍ¼
    BYTE   byRes[63];  //±£Áô
}NET_DVR_OUTPUT_VIDEO_TYPE,*LPNET_DVR_OUTPUT_VIDEO_TYPE;

#define MAX_CHECK_485CHAN        64    //485×Ô¼ìÉè±¸Í¨µÀºÅ¸öÊý

typedef struct tagNET_DVR_DEVICE_SELF_CHECK_STATE
{
    DWORD        dwSize;  
    DWORD        dwRS485Chan[MAX_CHECK_485CHAN];//RS485Í¨¶ÏÇé¿öÓÐÎÊÌâµÄÍ¨µÀºÅ£¬Öµ±íÊ¾Í¨µÀºÅ£¬Î»±íÊ¾²ÛÎ»ºÅ
    DWORD        dwSensorChan[4];//Ä£ÄâÁ¿ÎÞÐ§µÄÍ¨µÀºÅ£¬°´Î»±íÊ¾
       BYTE         byRes[32];      // ±£Áô×Ö½Ú 
}NET_DVR_DEVICE_SELF_CHECK_STATE, *LPNET_DVR_DEVICE_SELF_CHECK_STATE;

//ÉèÖÃÍêÈ«»ñÈ¡³ö³§Öµ
typedef struct tagNET_DVR_COMPLETE_RESTORE_INFO_
{
    DWORD   dwSize ; //½á¹¹Ìå³¤¶È
    DWORD   dwChannel; //Í¨µÀºÅ
    BYTE    byRes[64]; 
}NET_DVR_COMPLETE_RESTORE_INFO, *LPNET_DVR_COMPLETE_RESTORE_INFO;

typedef struct  tagNET_DVR_UPLOAD_PICTURE_INFO
{
    DWORD       dwSize;   
    DWORD        dwChannel;   //Í¼Æ¬¶ÔÓ¦µÄÍ¨µÀºÅ
    BYTE        byPictureType;//Í¼Æ¬¸ñÊ½,0-bmp£¬1-jpeg£¬2-PNG 3-SWF 4-GIF 
    BYTE         byRes1[3];  //±£Áô
    NET_DVR_TIME_V30 struTime;  //Í¼Æ¬Éú³ÉÊ±¼ä
    char*        sPictureBuffer;//Í¼Æ¬»º³åÇø
    DWORD        dwPictureLength;//Í¼Æ¬³¤¶È
    DWORD        dwPicMangeNo;  //Í¼Æ¬¹ÜÀíºÅ
    BYTE        sPicName[NAME_LEN];  //Í¼Æ¬Ãû³Æ
    BYTE        byRes[92];
}NET_DVR_UPLOAD_PICTURE_INFO,*LPNET_DVR_UPLOAD_PICTURE_INFO;

#define  MAX_UPLOADFILE_URL_LEN      240

typedef struct  tagNET_DVR_UPLOAD_FILE_RET
{
    BYTE  sUrl[MAX_UPLOADFILE_URL_LEN] ;   //url
    BYTE byRes[260];
} NET_DVR_UPLOAD_FILE_RET,*LPNET_DVR_UPLOAD_FILE_RET;

typedef struct tagNET_DVR_FACE_EXTRA_INFO
{
    NET_VCA_RECT struVcaRect[MAX_FACE_PIC_NUM];  //ÈËÁ³×ÓÍ¼×ø±êÐÅÏ¢
    BYTE     byRes[64];        
}NET_DVR_FACE_EXTRA_INFO, *LPNET_DVR_FACE_EXTRA_INFO;
typedef union tagNET_DVR_PIC_EXTRA_INFO_UNION
{
    BYTE   byUnionLen[544];   //ÁªºÏÌå³¤¶È£¬ÎÞÊµ¼ÊÒâÒå
    NET_DVR_FACE_EXTRA_INFO struFaceExtraInfo;   //ÈËÁ³Õì²âÐÅÏ¢
}NET_DVR_PIC_EXTRA_INFO_UNION, *LPNET_DVR_PIC_EXTRA_INFO_UNION;

typedef struct    tagNET_DVR_FIND_PICTURE_V40   //²éÕÒ½á¹û½á¹¹Ìå
{
    char    sFileName[PICTURE_NAME_LEN];//Í¼Æ¬Ãû
    NET_DVR_TIME struTime;//Í¼Æ¬µÄÊ±¼ä
    DWORD dwFileSize;//Í¼Æ¬µÄ´óÐ¡
    char    sCardNum[CARDNUM_LEN_V30];    //¿¨ºÅ
    BYTE   byPlateColor ;//²Î¿¼½á¹¹ VCA_PLATE_COLOR
    BYTE   byVehicleLogo;//²Î¿¼½á¹¹ VLR_VEHICLE_CLASS
    BYTE   byFileType ;  //ÎÄ¼þÀàÐÍ£¬ :0¶¨Ê±×¥Í¼1 ÒÆ¶¯Õì²â×¥Í¼ 2 ±¨¾¯×¥Í¼3  ±¨¾¯ | ÒÆ¶¯Õì²â×¥Í¼ 4 ±¨¾¯ & ÒÆ¶¯Õì²â×¥Í¼     6 ÊÖ¶¯×¥Í¼ ,9-ÖÇÄÜÍ¼Æ¬,10- PIR±¨¾¯£¬11- ÎÞÏß±¨¾¯£¬12- ºô¾È±¨¾¯,    0xa Ô¤ÀÀÊ±½ØÍ¼£¬0xd ÈËÁ³Õì²â, 0xe Ô½½çÕì²â£¬0xf ÈëÇÖÇøÓòÕì²â£¬0x10 ³¡¾°±ä¸üÕì²â, 0x11-Éè±¸±¾µØ»Ø·ÅÊ±½ØÍ¼, 0x12-ÖÇÄÜÕì²â
    BYTE   byRecogResult ;//Ê¶±ð½á¹û²Î¿¼½á¹¹VTR_RESULT
    char   sLicense[MAX_LICENSE_LEN/*16*/];    //³µÅÆºÅÂë
    BYTE   byEventSearchStatus; //Á¬ÐøÍ¼Æ¬±íÊ¾Í¬Ò»²éÕÒ½á¹ûµÄÊ±ºò£¬0-±íÊ¾ºóÃæÃ»ÓÐÍ¼Æ¬ÐÅÏ¢£¬1-±íÊ¾ºóÃæ»¹ÓÐÍ¼Æ¬ÐÅÏ¢¡£×Ü¹²Í¼Æ¬ÐÅÏ¢°üÀ¨×îºóÒ»ÕÅ×´Ì¬Îª0µÄÍ¼Æ¬¡£
    BYTE   byRes[75];        //  ±£Áô×Ö½Ú
    NET_DVR_PIC_EXTRA_INFO_UNION  uPicExtraInfo; //Í¼Æ¬¸½¼þÐÅÏ¢
}NET_DVR_FIND_PICTURE_V40,*LPNET_DVR_FIND_PICTURE_V40;

typedef struct tagNET_DVR_REGIONENTRANCE_REGION
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE bySensitivity;        //ÁéÃô¶È²ÎÊý£¬·¶Î§[1-100]
    BYTE byDetectionTarget;//¼ì²âÄ¿±ê:0-ËùÓÐÄ¿±ê£¬1-ÈË£¬2-³µ
    BYTE byRes[62];             //±£Áô
}NET_DVR_REGIONENTRANCE_REGION, *LPNET_DVR_REGIONENTRANCE_REGION;

typedef    struct tagNET_DVR_REGION_ENTRANCE_DETECTION
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE        byRes1[3];
    NET_DVR_REGIONENTRANCE_REGION    struRegion[MAX_REGION_NUM];
    BYTE        byRes2[128];
}NET_DVR_REGION_ENTRANCE_DETECTION,*LPNET_DVR_REGION_ENTRANCE_DETECTION;

typedef struct tagNET_DVR_SMART_REGION_COND
{
    DWORD dwSize; 
    DWORD dwChannel;        //Í¨µÀºÅ 
    DWORD dwRegion;         //ÇøÓòIDºÅ
}NET_DVR_SMART_REGION_COND, *LPNET_DVR_SMART_REGION_COND;

typedef struct tagNET_DVR_ENTRANCE_REGION
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE bySensitivity;        //ÁéÃô¶È²ÎÊý£¬·¶Î§[1-100]
    BYTE byRes[63];             //±£Áô
}NET_DVR_ENTRANCE_REGION, *LPNET_DVR_ENTRANCE_REGION;

typedef    struct tagNET_DVR_EVENT_TRIGGER
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    NET_DVR_HANDLEEXCEPTION_V41 struHandleException;     //Òì³£´¦Àí·½Ê½
    DWORD      dwRelRecordChan[MAX_CHANNUM_V40]; //Êµ¼Ê´¥·¢Â¼ÏñÍ¨µÀ£¬°´Öµ±íÊ¾£¬²ÉÓÃ½ô´ÕÐÍÅÅÁÐ£¬´ÓÏÂ±ê0¿ªÊ¼Ë³Ðò¶ÁÈ¡£¬ÖÐ¼äÓöµ½0xffffffffÔòºóÐøÎÞÐ§¡£ 
    NET_DVR_PRESETCHAN_INFO struPresetChanInfo[MAX_CHANNUM_V40]; //ÆôÓÃµÄÔ¤ÖÃµãÐÅÏ¢
    NET_DVR_CRUISECHAN_INFO struCruiseChanInfo[MAX_CHANNUM_V40]; //ÆôÓÃÑ²º½¹¦ÄÜÍ¨µÀµÄÐÅÏ¢
    NET_DVR_PTZTRACKCHAN_INFO struPtzTrackInfo[MAX_CHANNUM_V40]; //µ÷ÓÃÔÆÌ¨¹ì¼£µÄÍ¨µÀÐÅÏ¢
    BYTE        byRes2[256];
}NET_DVR_EVENT_TRIGGER,*LPNET_DVR_EVENT_TRIGGER;

typedef    struct tagNET_DVR_EVENT_SCHEDULE
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30]; /*²¼·ÀÊ±¼ä*/
    NET_DVR_SCHEDTIME struHolidayAlarmTime[MAX_TIMESEGMENT_V30]; /*¼ÙÈÕ²¼·ÀÊ±¼ä*/
    BYTE        byRes[128];
}NET_DVR_EVENT_SCHEDULE,*LPNET_DVR_EVENT_SCHEDULE;

typedef struct  tagNET_DVR_ANR_ARMING_HOST
{
    DWORD   dwSize;//sizeof(NET_DVR_ANR_ ARMING_HOST)
    NET_DVR_IPADDR struANRArmingHostIpAddr; //¶ÏÍøÐø´«µÄÖ÷»úIPµØÖ·
    WORD    wANRAlarmHostPort; //¶ÏÍøÐø´«µÄÖ÷»ú²¼·À¶Ë¿ÚºÅ
    BYTE     byANRAlarmType;//¶ÏÍøÐø´«Á¬½ÓÀàÐÍ£¬ 0-SDKË½ÓÐ¶ÏÍøÐø´«Á¬½Ó£¬1-ehome¶ÏÍøÐø´«Á¬½Ó
    BYTE     byRes[513];      //±£Áô×Ö½Ú
}NET_DVR_ANR_ARMING_HOST, *LPNET_DVR_ANR_ARMING_HOST;

typedef struct tagNET_DVR_REGIONEXITING_REGION
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE bySensitivity;        //ÁéÃô¶È²ÎÊý£¬·¶Î§[1-100]
    BYTE byDetectionTarget;//¼ì²âÄ¿±ê:0-ËùÓÐÄ¿±ê£¬1-ÈË£¬2-³µ
    BYTE byRes[62];             //±£Áô
}NET_DVR_REGIONEXITING_REGION, *LPNET_DVR_REGIONEXITING_REGION;

typedef    struct tagNET_DVR_REGION_EXITING_DETECTION
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE        byRes1[3];
    NET_DVR_REGIONEXITING_REGION    struRegion[MAX_REGION_NUM];
    BYTE        byRes2[128];
}NET_DVR_REGION_EXITING_DETECTION,*LPNET_DVR_REGION_EXITING_DETECTION;

typedef struct tagNET_DVR_LOITERING_REGION
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE bySensitivity;        //ÁéÃô¶È²ÎÊý£¬·¶Î§[1-100]
    BYTE byTimeThreshold; //Ê±¼äãÐÖµ£¬·¶Î§[0-10]£¬µ¥Î»£ºs
    BYTE byRes[62];             //±£Áô
}NET_DVR_LOITERING_REGION, *LPNET_DVR_LOITERING_REGION;

typedef    struct tagNET_DVR_LOITERING_DETECTION
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE        byRes1[3];
    NET_DVR_LOITERING_REGION    struRegion[MAX_REGION_NUM];
    BYTE        byRes2[128];
}NET_DVR_LOITERING_DETECTION,*LPNET_DVR_LOITERING_DETECTION;

typedef struct tagNET_DVR_GROUPDETECTION_REGION
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE byObjectOccup; //Õ¼±È£¬·¶Î§[1-100]
    BYTE byRes[63];             //±£Áô
}NET_DVR_GROUPDETECTION_REGION, *LPNET_DVR_GROUPDETECTION_REGION;
typedef struct tagNET_DVR_POS_HIDDEN_INFORMATION
{
    char szKeyWord[KEY_WORD_NUM/*3*/][KEY_WORD_LEN/*128*/];
    BYTE    byRes[128];
}NET_DVR_POS_HIDDEN_INFORMATION, *LPNET_DVR_POS_HIDDEN_INFORMATION;

typedef struct tagNET_DVR_HIDDEN_INFORMATION_CFG
{
    DWORD  dwSize;
    BYTE   byFuncType;//0-Pos¹¦ÄÜ
    BYTE   Res1[3];
    NET_DVR_POS_HIDDEN_INFORMATION struPosInfo;
    BYTE    byRes[1024];
}NET_DVR_HIDDEN_INFORMATION_CFG, *LPNET_DVR_HIDDEN_INFORMATION_CFG;

typedef    struct tagNET_DVR_GROUP_DETECTION
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE        byRes1[3];
    NET_DVR_GROUPDETECTION_REGION    struRegion[MAX_REGION_NUM];
    BYTE        byRes2[128];
}NET_DVR_GROUP_DETECTION,*LPNET_DVR_GROUP_DETECTION;

typedef struct tagNET_DVR_RAPIDMOVE_REGION
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE bySensitivity;        //ÁéÃô¶È²ÎÊý£¬·¶Î§[1-100]
    BYTE byDetectionTarget;//¼ì²âÄ¿±ê:0-ËùÓÐÄ¿±ê£¬1-ÈË£¬2-³µ
    BYTE byRes[62];             //±£Áô
}NET_DVR_RAPIDMOVE_REGION, *LPNET_DVR_RAPIDMOVE_REGION;

typedef    struct tagNET_DVR_RAPIDMOVE_DETECTION
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE        byRes1[3];
    NET_DVR_RAPIDMOVE_REGION    struRegion[MAX_REGION_NUM];
    BYTE        byRes2[128];
}NET_DVR_RAPIDMOVE_DETECTION,*LPNET_DVR_RAPIDMOVE_DETECTION;

typedef struct tagNET_DVR_PARKING_REGION
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE bySensitivity;        //ÁéÃô¶È²ÎÊý£¬·¶Î§[1-100]
    BYTE byTimeThreshold; //Ê±¼äãÐÖµ£¬·¶Î§[0-10]£¬µ¥Î»£ºs
    BYTE byRes[62];             //±£Áô
}NET_DVR_PARKING_REGION, *LPNET_DVR_PARKING_REGION;

typedef    struct tagNET_DVR_PARKING_DETECTION
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE        byRes1[3];
    NET_DVR_PARKING_REGION    struRegion[MAX_REGION_NUM];
    BYTE        byRes2[128];
}NET_DVR_PARKING_DETECTION,*LPNET_DVR_PARKING_DETECTION;

typedef struct tagNET_DVR_UNATTENDED_BAGGAGE_REGION
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE bySensitivity;        //ÁéÃô¶È²ÎÊý£¬·¶Î§[1-100]
    BYTE byTimeThreshold; //Ê±¼äãÐÖµ£¬·¶Î§[0-10]£¬µ¥Î»£ºs
    WORD wTimeThreshold;//Ê±¼äãÐÖµ£¬·¶Î§[5-3600], µ¥Î»£ºs
    BYTE byTimeThresholdMode;//(Ö»Ð´×Ö¶Î£¬ÓÃÓÚ¼æÈÝÇøÓò)0-×Ö¶ÎbyTimeThresholdÉúÐ§£¬1-×Ö¶ÎwTimeThresholdÉúÐ§
    BYTE byRes[59];             //±£ÁôÁô
}NET_DVR_UNATTENDED_BAGGAGE_REGION, *LPNET_DVR_UNATTENDED_BAGGAGE_REGION;

typedef    struct tagNET_DVR_UNATTENDED_BAGGAGE_DETECTION
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE        byRes1[3];
    NET_DVR_UNATTENDED_BAGGAGE_REGION    struRegion[MAX_REGION_NUM];
    BYTE        byRes2[128];
}NET_DVR_UNATTENDED_BAGGAGE_DETECTION,*LPNET_DVR_UNATTENDED_BAGGAGE_DETECTION;

typedef struct tagNET_DVR_ATTENDED_BAGGAGE_REGION
{
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE bySensitivity;        //ÁéÃô¶È²ÎÊý£¬·¶Î§[1-100]
    BYTE byTimeThreshold; //Ê±¼äãÐÖµ£¬·¶Î§[0-10]£¬µ¥Î»£ºs
    WORD wTimeThreshold;//Ê±¼äãÐÖµ£¬·¶Î§[5-3600], µ¥Î»£ºs
    BYTE byTimeThresholdMode;//(Ö»Ð´×Ö¶Î£¬ÓÃÓÚ¼æÈÝÇøÓò)0-×Ö¶ÎbyTimeThresholdÉúÐ§£¬1-×Ö¶ÎwTimeThresholdÉúÐ§
    BYTE byRes[59];             //±£Áô
}NET_DVR_ATTENDED_BAGGAGE_REGION, *LPNET_DVR_ATTENDED_BAGGAGE_REGION;

typedef    struct tagNET_DVR_ATTENDED_BAGGAGE_DETECTION
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE        byRes1[3];
    NET_DVR_ATTENDED_BAGGAGE_REGION    struRegion[MAX_REGION_NUM];
    BYTE        byRes2[128];
}NET_DVR_ATTENDED_BAGGAGE_DETECTION,*LPNET_DVR_ATTENDED_BAGGAGE_DETECTION;

typedef struct tagNET_DVR_REGION_CLIP_COND
{
    DWORD dwSize; 
    DWORD dwChannel;        //Í¨µÀºÅ 
    DWORD dwStreamType;     //ÂëÁ÷ÀàÐÍ£º0- Ö÷ÂëÁ÷£¬1- ×ÓÂëÁ÷£¬2- µÚÈýÂëÁ÷
    BYTE   byRes[8];
}NET_DVR_REGION_CLIP_COND, *LPNET_DVR_REGION_CLIP_COND;

typedef struct tagNET_DVR_REGION_CLIP_CFG
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE        byRes1[3];
    WORD      wResolutionWidth; //·Ö±æÂÊµÄ³¤
    WORD      wResolutionHeight; //·Ö±æÂÊµÄ¿í
    NET_VCA_POLYGON    struRegion[MAX_REGION_NUM];
    BYTE        byRes2[64];
}NET_DVR_REGION_CLIP_CFG, *LPNET_DVR_REGION_CLIP_CFG;

#define MAX_DIALNUM_LENGTH  32
typedef struct tagNET_DVR_WIRELESSDIAL_CFG
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñÆôÓÃÎÞÏß²¦ºÅ£º0-·ñ£¬1- ÊÇ
    BYTE       byDialMode; // 0-×Ô¶¯£¨Auto£©¡¢1-ÊÖ¶¯£¨Manual£©£¬Ä¬ÈÏ×Ô¶¯£¬ÊÖ¶¯Ä£Ê½ÏÂ¿ÉÉèÖÃ²¦ºÅ¼Æ»®¡¢ÏÂÏßÊ±¼ä¡¢ÊÖ¶¯²¦ºÅ
    BYTE       byNetworkMode; //0-×Ô¶¯£¬1-4GÓÅÏÈ£¬2-3GÓÅÏÈ£¬3-ÊÖ¶¯ÇÐ»»2G£¬4-ÊÖ¶¯ÇÐ»»3G£¬5-ÊÖ¶¯ÇÐ»»4G£¬6-ÓÐÏßÓÅÏÈ
    BYTE        byRes1;
    BYTE       byDialNum[MAX_DIALNUM_LENGTH]; //²¦ºÅºÅÂë
    BYTE       byUserName[NAME_LEN]; //ÓÃ»§Ãû
    BYTE       byPassword[NAME_LEN]; //ÃÜÂë
    BYTE       byAPNName[NAME_LEN];  //APN
    BYTE       byUIMCardNum[NAME_LEN];  //ÊÖ»úºÅÂë
    BYTE       byVerifProtocol;  // 0-×Ô¶¯£¨Auto£©£¬1-CHAP£¬2-PAP
    BYTE       byRes2;
    WORD      wMTU; //MTU
    DWORD      dwOffineTime;  //ÏÂÏßÊ±¼ä£¬30-65535£¬µ¥Î»Ãë£¬ÊÖ¶¯Ä£Ê½ÏÂÓÐÐ§
    BYTE        byRes3[64];
}NET_DVR_WIRELESSDIAL_CFG, *LPNET_DVR_WIRELESSDIAL_CFG;

typedef    struct tagNET_DVR_WIRELESSDIAL_SCHEDULE
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30]; /*²¼·ÀÊ±¼ä*/
    BYTE        byRes[160];
}NET_DVR_WIRELESSDIAL_SCHEDULE,*LPNET_DVR_WIRELESSDIAL_SCHEDULE;

#define MAX_LENGTH_32   32
typedef    struct tagNET_DVR_WIRELESSDIAL_STATUS
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byRealtimeMode[MAX_LENGTH_32]; //ÊµÊ±Ä£Ê½(CDMA 1x¡¢EVDO¡¢HYBRID¡¢GSM¡¢GPRS¡¢EDGE¡¢WCDMA¡¢HSDPA¡¢HSUPA¡¢HSPA¡¢TDSCDMA¡¢TD-LTE¡¢FDD-LTE)
    BYTE        byUIMStatus[MAX_LENGTH_32]; //UIM×´Ì¬(UNKNOWN,VALID,NOVALID,ROAM,NOEXIST)
    DWORD       dwSignalQuality; //ÐÅºÅÖÊÁ¿£¬1-100
    BYTE        byDialStatus[MAX_LENGTH_32]; //²¦ºÅ×´Ì¬Âë
    NET_DVR_IPADDR    struIpAddr;  //IPµØÖ·
    NET_DVR_IPADDR    struIPMask;  //ÑÚÂëµØÖ·
    NET_DVR_IPADDR    struGatewayIPMask;  //Íø¹ØµØÖ·
    NET_DVR_IPADDR    struDnsServerIpAddr; //DNSµØÖ·
    BYTE        byRes[256];    
}NET_DVR_WIRELESSDIAL_STATUS,*LPNET_DVR_WIRELESSDIAL_STATUS;

typedef    struct tagNET_DVR_WIRELESSDIAL_CONNECT
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    DWORD       dwInterface; //Íø¿¨±àºÅ£¬1,2¡­¡­
    BYTE        byEnableConnect; //ÊÇ·ñÁ¬Íø£¬0-¶ÏÍø£¬1-Á¬Íø
    BYTE        byRes[255];
}NET_DVR_WIRELESSDIAL_CONNECT_PARAM,*LPNET_DVR_WIRELESSDIAL_CONNECT_PARAM;


typedef    struct tagNET_DVR_LITESTORAGE
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE       byEnable; /*Ê¹ÄÜ 0-²»ÆôÓÃ,1-ÆôÓÃ*/
    BYTE       byStorageTime;/*´æ´¢Ê±¼ä 1-30 Ä¬ÈÏ7Ìì*/
    BYTE       byLevel; //µÈ¼¶²ÎÊý£¬0-ÎÞÐ§Öµ£¨±£Áô£©£¬1-µÍ£¬2-ÖÐ(Ä¬ÈÏ)£¬3-¸ß£»
    BYTE        byRes;
    float           fCapacity;//¿ÉÓÃSD¿¨Â¼Ïñ¿Õ¼ä£¬Ö»¶Á
    BYTE        byDefLowStorageTime;// µÍÄ£Ê½ÏÂÍÆ¼öÌìÊý Ö»¶Á
    BYTE        byDefMediumStorageTime; // ÖÐÄ£Ê½ÏÂÍÆ¼öÌìÊý Ö»¶Á
    BYTE        byDefHighStorageTime; // ¸ßÄ£Ê½ÏÂÍÆ¼öÌìÊý Ö»¶Á
    BYTE       byRes1[61];
}NET_DVR_LITESTORAGE,*LPNET_DVR_LITESTORAGE;

typedef struct tagNET_DVR_CALIBRATION
{
    DWORD            dwSize;//½á¹¹Ìå´óÐ¡
    NET_VCA_POLYGON  struRegion;//±ê¶¨ÇøÓò
    BYTE        byRes[64];
}NET_DVR_CALIBRATION,*LPNET_DVR_CALIBRATION;

typedef    struct    tagNET_DVR_STD_CONFIG
{
    void*        lpCondBuffer;        //[in]Ìõ¼þ²ÎÊý(½á¹¹Ìå¸ñÊ½),ÀýÈçÍ¨µÀºÅµÈ.¿ÉÒÔÎªNULL
    DWORD        dwCondSize;            //[in] lpCondBufferÖ¸ÏòµÄÄÚ´æ´óÐ¡
    void*        lpInBuffer;            //[in]ÊäÈë²ÎÊý(½á¹¹Ìå¸ñÊ½),ÉèÖÃÊ±²»ÎªNULL£¬»ñÈ¡Ê±ÎªNULL
    DWORD        dwInSize;            //[in] lpInBufferÖ¸ÏòµÄÄÚ´æ´óÐ¡
    void*        lpOutBuffer;        //[out]Êä³ö²ÎÊý(½á¹¹Ìå¸ñÊ½),»ñÈ¡Ê±²»ÎªNULL,ÉèÖÃÊ±ÎªNULL
    DWORD        dwOutSize;            //[in] lpOutBufferÖ¸ÏòµÄÄÚ´æ´óÐ¡
    void*        lpStatusBuffer;        //[out]·µ»ØµÄ×´Ì¬²ÎÊý(XML¸ñÊ½),»ñÈ¡³É¹¦Ê±²»»á¸³Öµ,Èç¹û²»ÐèÒª,¿ÉÒÔÖÃNULL
    DWORD        dwStatusSize;        //[in] lpStatusBufferÖ¸ÏòµÄÄÚ´æ´óÐ¡
    void*       lpXmlBuffer;    //[in/out]byDataType = 1Ê±ÓÐÐ§,xml¸ñÊ½Êý¾Ý
    DWORD       dwXmlSize;      //[in/out]lpXmlBufferÖ¸ÏòµÄÄÚ´æ´óÐ¡,»ñÈ¡Ê±Í¬Ê±×÷ÎªÊäÈëºÍÊä³ö²ÎÊý£¬»ñÈ¡³É¹¦ºó»áÐÞ¸Ä»áÊµ¼Ê³¤¶È£¬ÉèÖÃÊ±±íÊ¾Êµ¼Ê³¤¶È£¬¶ø²»ÊÇÕû¸öÄÚ´æ´óÐ¡
    BYTE        byDataType;     //[in]ÊäÈë/Êä³ö²ÎÊýÀàÐÍ,0-Ê¹ÓÃ½á¹¹ÌåÀàÐÍlpInBuffer/lpOutBufferÓÐÐ§,1-Ê¹ÓÃXMLÀàÐÍlpXmlBufferÓÐÐ§
    BYTE        byRes[23];
}NET_DVR_STD_CONFIG,*LPNET_DVR_STD_CONFIG;

typedef    struct    DWORDtagNET_DVR_STD_ABILITY
{
    void*        lpCondBuffer;    //[in]Ìõ¼þ²ÎÊý(Âë×Ö¸ñÊ½),ÀýÈçÍ¨µÀºÅµÈ.¿ÉÒÔÎªNULL
    DWORD        dwCondSize;        //[in] dwCondSizeÖ¸ÏòµÄÄÚ´æ´óÐ¡
    void*        lpOutBuffer;    //[out]Êä³ö²ÎÊý(XML¸ñÊ½),²»ÎªNULL
    DWORD        dwOutSize;        //[in] lpOutBufferÖ¸ÏòµÄÄÚ´æ´óÐ¡
    void*        lpStatusBuffer;    //[out]·µ»ØµÄ×´Ì¬²ÎÊý(XML¸ñÊ½),»ñÈ¡³É¹¦Ê±²»»á¸³Öµ,Èç¹û²»ÐèÒª,¿ÉÒÔÖÃNULL
    DWORD        dwStatusSize;    //[in] lpStatusBufferÖ¸ÏòµÄÄÚ´æ´óÐ¡
    DWORD        dwRetSize;        //[out]»ñÈ¡µ½µÄÊý¾Ý³¤¶È(lpOutBuffer»òÕßlpStatusBufferÖ¸ÏòµÄÊµ¼ÊÊý¾Ý³¤¶È)
    BYTE        byRes[32];        //±£Áô×Ö½Ú
}NET_DVR_STD_ABILITY,*LPNET_DVR_STD_ABILITY;

typedef struct tagNET_DVR_STD_CONTROL
{
    void*        lpCondBuffer;    //[in]Ìõ¼þ²ÎÊý(Âë×Ö¸ñÊ½),ÀýÈçÍ¨µÀºÅµÈ.¿ÉÒÔÎªNULL
    DWORD        dwCondSize;        //[in] dwCondSizeÖ¸ÏòµÄÄÚ´æ´óÐ¡
    void*        lpStatusBuffer;    //[out]·µ»ØµÄ×´Ì¬²ÎÊý(XML¸ñÊ½),»ñÈ¡³É¹¦Ê±²»»á¸³Öµ,Èç¹û²»ÐèÒª,¿ÉÒÔÖÃNULL
    DWORD        dwStatusSize;    //[in] lpStatusBufferÖ¸ÏòµÄÄÚ´æ´óÐ¡
    void*       lpXmlBuffer;    //[in/out]byDataType = 1Ê±ÓÐÐ§,xml¸ñÊ½Êý¾Ý
    DWORD       dwXmlSize;      //[in/out]lpXmlBufferÖ¸ÏòµÄÄÚ´æ´óÐ¡,»ñÈ¡Ê±Í¬Ê±×÷ÎªÊäÈëºÍÊä³ö²ÎÊý£¬»ñÈ¡³É¹¦ºó»áÐÞ¸Ä»áÊµ¼Ê³¤¶È£¬ÉèÖÃÊ±±íÊ¾Êµ¼Ê³¤¶È£¬¶ø²»ÊÇÕû¸öÄÚ´æ´óÐ¡
    BYTE        byDataType;     //[in]ÊäÈë/Êä³ö²ÎÊýÀàÐÍ,0-Ê¹ÓÃ½á¹¹ÌåÀàÐÍlpCondBufferÓÐÐ§,1-Ê¹ÓÃXMLÀàÐÍlpXmlBufferÓÐÐ§
    BYTE        byRes[55];
}NET_DVR_STD_CONTROL, *LPNET_DVR_STD_CONTROL;

typedef struct tagNET_DVR_XML_CONFIG_INPUT
{
    DWORD   dwSize;                        //½á¹¹Ìå´óÐ¡
    void*    lpRequestUrl;                //ÇëÇóÐÅÁî£¬×Ö·û´®¸ñÊ½
    DWORD    dwRequestUrlLen;            //ÇëÇóÐÅÁî³¤¶È£¬×Ö·û´®³¤¶È
    void*    lpInBuffer;                    //ÊäÈë²ÎÊý»º³åÇø£¬XML¸ñÊ½
    DWORD    dwInBufferSize;                //ÊäÈë²ÎÊý»º³åÇø´óÐ¡
    DWORD   dwRecvTimeOut;                //½ÓÊÕ³¬Ê±Ê±¼ä£¬µ¥Î»£ºms£¬Ìî0ÔòÊ¹ÓÃÄ¬ÈÏ³¬Ê±5s
    BYTE    byRes[32];
}NET_DVR_XML_CONFIG_INPUT, *LPNET_DVR_XML_CONFIG_INPUT;

typedef struct tagNET_DVR_XML_CONFIG_OUTPUT
{
    DWORD   dwSize;                        //½á¹¹Ìå´óÐ¡
    void*    lpOutBuffer;                //Êä³ö²ÎÊý»º³åÇø£¬XML¸ñÊ½
    DWORD    dwOutBufferSize;            //Êä³ö²ÎÊý»º³åÇø´óÐ¡(ÄÚ´æ´óÐ¡)
    DWORD   dwReturnedXMLSize;            //Êµ¼ÊÊä³öµÄXMLÄÚÈÝ´óÐ¡
    void*    lpStatusBuffer;                //·µ»ØµÄ×´Ì¬²ÎÊý(XML¸ñÊ½),»ñÈ¡ÃüÁî³É¹¦Ê±²»»á¸³Öµ,Èç¹û²»ÐèÒª,¿ÉÒÔÖÃNULL
    DWORD    dwStatusSize;                //×´Ì¬»º³åÇø´óÐ¡(ÄÚ´æ´óÐ¡)
    BYTE    byRes[32];
}NET_DVR_XML_CONFIG_OUTPUT, *LPNET_DVR_XML_CONFIG_OUTPUT;

typedef struct tagNET_DVR_SIMPLE_DAYTIME
{
    BYTE byHour; //Ê±
    BYTE byMinute; //·Ö
    BYTE bySecond; //Ãë
    BYTE byRes;
}NET_DVR_SIMPLE_DAYTIME, *LPNET_DVR_SIMPLE_DAYTIME;

typedef struct tagNET_DVR_TIME_SEGMENT
{
    NET_DVR_SIMPLE_DAYTIME struBeginTime; //¿ªÊ¼Ê±¼äµã
    NET_DVR_SIMPLE_DAYTIME struEndTime;   //½áÊøÊ±¼äµã
}NET_DVR_TIME_SEGMENT, *LPNET_DVR_TIME_SEGMENT;

typedef struct tagNET_DVR_SINGLE_PLAN_SEGMENT
{
    BYTE byEnable; //ÊÇ·ñÊ¹ÄÜ£¬1-Ê¹ÄÜ£¬0-²»Ê¹ÄÜ
    BYTE byDoorStatus; //ÃÅ×´Ì¬Ä£Ê½£¬0-ÎÞÐ§£¬1-³£¿ª×´Ì¬£¬2-³£±Õ×´Ì¬£¬3-ÆÕÍ¨×´Ì¬£¨ÃÅ×´Ì¬¼Æ»®Ê¹ÓÃ£©
    BYTE byVerifyMode; //ÑéÖ¤·½Ê½£¬0-ÎÞÐ§£¬1-Ë¢¿¨£¬2-Ë¢¿¨+ÃÜÂë(¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼Æ»®Ê¹ÓÃ)£¬3-Ë¢¿¨,4-Ë¢¿¨»òÃÜÂë(¶Á¿¨Æ÷ÑéÖ¤·½Ê½¼Æ»®Ê¹ÓÃ), 5-Ö¸ÎÆ£¬6-Ö¸ÎÆ+ÃÜÂë£¬7-Ö¸ÎÆ»òË¢¿¨£¬8-Ö¸ÎÆ+Ë¢¿¨£¬9-Ö¸ÎÆ+Ë¢¿¨+ÃÜÂë£¨ÎÞÏÈºóË³Ðò£©
    BYTE byRes[5];
    NET_DVR_TIME_SEGMENT struTimeSegment; //Ê±¼ä¶Î²ÎÊý
}NET_DVR_SINGLE_PLAN_SEGMENT, *LPNET_DVR_SINGLE_PLAN_SEGMENT;

typedef struct tagNET_DVR_WEEK_PLAN_CFG
{
    DWORD dwSize;
    BYTE byEnable;  //ÊÇ·ñÊ¹ÄÜ£¬1-Ê¹ÄÜ£¬0-²»Ê¹ÄÜ
    BYTE byRes1[3];
    NET_DVR_SINGLE_PLAN_SEGMENT struPlanCfg[MAX_DAYS][MAX_TIMESEGMENT_V30]; //ÖÜ¼Æ»®²ÎÊý
    BYTE byRes2[16];
}NET_DVR_WEEK_PLAN_CFG, *LPNET_DVR_WEEK_PLAN_CFG;

typedef struct tagNET_DVR_HOLIDAY_PLAN_CFG
{
    DWORD dwSize;
    BYTE byEnable; //ÊÇ·ñÊ¹ÄÜ£¬1-Ê¹ÄÜ£¬0-²»Ê¹ÄÜ
    BYTE byRes1[3];    
    NET_DVR_DATE struBeginDate; //¼ÙÈÕ¿ªÊ¼ÈÕÆÚ
    NET_DVR_DATE struEndDate; //¼ÙÈÕ½áÊøÈÕÆÚ
    NET_DVR_SINGLE_PLAN_SEGMENT struPlanCfg[MAX_TIMESEGMENT_V30]; //Ê±¼ä¶Î²ÎÊý
    BYTE byRes2[16];
}NET_DVR_HOLIDAY_PLAN_CFG, *LPNET_DVR_HOLIDAY_PLAN_CFG;

typedef struct tagNET_DVR_HOLIDAY_GROUP_CFG
{
    DWORD dwSize;
    BYTE byEnable; //ÊÇ·ñÆôÓÃ£¬1-ÆôÓÃ£¬0-²»ÆôÓÃ
    BYTE byRes1[3];
    BYTE byGroupName[HOLIDAY_GROUP_NAME_LEN]; //¼ÙÈÕ×éÃû³Æ
    DWORD dwHolidayPlanNo[MAX_HOLIDAY_PLAN_NUM]; //¼ÙÈÕ¼Æ»®±àºÅ£¬¾ÍÇ°Ìî³ä£¬Óö0ÎÞÐ§
    BYTE byRes2[32];
}NET_DVR_HOLIDAY_GROUP_CFG, *LPNET_DVR_HOLIDAY_GROUP_CFG;

typedef struct tagNET_DVR_PLAN_TEMPLATE
{
    DWORD dwSize;
    BYTE byEnable; //ÊÇ·ñÆôÓÃ£¬1-ÆôÓÃ£¬0-²»ÆôÓÃ
    BYTE byRes1[3];
    BYTE byTemplateName[TEMPLATE_NAME_LEN]; //Ä£°åÃû³Æ
    DWORD dwWeekPlanNo; //ÖÜ¼Æ»®±àºÅ£¬0ÎªÎÞÐ§
    DWORD dwHolidayGroupNo[MAX_HOLIDAY_GROUP_NUM]; //¼ÙÈÕ×é±àºÅ£¬¾ÍÇ°Ìî³ä£¬Óö0ÎÞÐ§
    BYTE byRes2[32];
}NET_DVR_PLAN_TEMPLATE, *LPNET_DVR_PLAN_TEMPLATE;


typedef struct tagNET_DVR_DOOR_STATUS_PLAN
{
    DWORD dwSize;
    DWORD dwTemplateNo; //¼Æ»®Ä£°å±àºÅ£¬Îª0±íÊ¾È¡Ïû¹ØÁª£¬»Ö¸´Ä¬ÈÏ×´Ì¬£¨ÆÕÍ¨×´Ì¬£©
    BYTE byRes[64];
}NET_DVR_DOOR_STATUS_PLAN, *LPNET_DVR_DOOR_STATUS_PLAN;

typedef struct tagNET_DVR_CARD_READER_PLAN
{
    DWORD dwSize;
    DWORD dwTemplateNo; //¼Æ»®Ä£°å±àºÅ£¬Îª0±íÊ¾È¡Ïû¹ØÁª£¬»Ö¸´Ä¬ÈÏ×´Ì¬£¨Ë¢¿¨¿ªÃÅ£©
    BYTE byRes[64];
}NET_DVR_CARD_READER_PLAN, *LPNET_DVR_CARD_READER_PLAN;

typedef struct _tagNET_DVR_GROUP_CFG
{
    DWORD dwSize;
    BYTE byEnable; //ÊÇ·ñÆôÓÃ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ    
    BYTE byRes1[3];
    NET_DVR_VALID_PERIOD_CFG struValidPeriodCfg; //Èº×éÓÐÐ§ÆÚ²ÎÊý
    BYTE byGroupName[GROUP_NAME_LEN]; //Èº×éÃû³Æ
    BYTE byRes2[32];
}NET_DVR_GROUP_CFG, *LPNET_DVR_GROUP_CFG;

typedef struct tagNET_DVR_GROUP_COMBINATION_INFO
{
    BYTE byEnable; //ÊÇ·ñÆôÓÃ¸ÃÈº×é×éºÏ    
    BYTE byMemberNum; //Ë¢¿¨³ÉÔ±ÊýÁ¿
    BYTE bySequenceNo; //Èº×éË¢¿¨´ÎÐòºÅ
    BYTE byRes;
    DWORD dwGroupNo;  //Èº×é±àºÅ,0xffffffff±íÊ¾Ô¶³Ì¿ªÃÅ£¬0xfffffffe±íÊ¾³¬¼¶ÃÜÂë
}NET_DVR_GROUP_COMBINATION_INFO, *LPNET_DVR_GROUP_COMBINATION_INFO;

typedef struct tagNET_DVR_MULTI_CARD_GROUP_CFG
{
    BYTE byEnable; //ÊÇ·ñÆôÓÃ¸Ã¶àÖØ¿¨×é²ÎÊý£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byEnableOfflineVerifyMode; //ÊÇ·ñÆôÓÃÖ÷»úÀëÏßÊ±ÑéÖ¤·½Ê½£¨³¬¼¶ÃÜÂë´úÌæÔ¶³Ì¿ªÃÅ£©
    BYTE byRes1[2];
    DWORD dwTemplateNo; //ÆôÓÃ¶àÖØ¿¨¹¦ÄÜµÄ¼Æ»®Ä£°å±àºÅ
    NET_DVR_GROUP_COMBINATION_INFO struGroupCombination[GROUP_COMBINATION_NUM]; //Èº×é×éºÏ²ÎÊý
}NET_DVR_MULTI_CARD_GROUP_CFG, *LPNET_DVR_MULTI_CARD_GROUP_CFG;

typedef struct tagNET_DVR_MULTI_CARD_CFG
{
    DWORD dwSize;
    BYTE byEnable; //ÊÇ·ñÆôÓÃ¶àÖØ¿¨¹¦ÄÜ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE bySwipeIntervalTimeout; //Ë¢¿¨¼ä¸ô³¬Ê±Ê±¼ä£¬1-255s£¬Ä¬ÈÏ10s    
    BYTE byRes1[2];
    NET_DVR_MULTI_CARD_GROUP_CFG struGroupCfg[MULTI_CARD_GROUP_NUM]; //Èº×éË¢¿¨²ÎÊý
    BYTE byRes2[32];    
}NET_DVR_MULTI_CARD_CFG, *LPNET_DVR_MULTI_CARD_CFG;

//2014-12-03  T1²âÊÔ×´Ì¬½á¹¹Ìå
typedef struct 
{
    DWORD  dwSize;//½á¹¹Ìå´óÐ¡
    WORD   wPort;  //¶Ë¿ÚºÅ
    //(Éè±¸Í¨¹ý¶Ë¿Ú¿ØÖÆ£¨¶Ë¿ÚºÅÉè±¸¶Ë¹Ì¶¨£¬ÉÏ²ã²»×öÅäÖÃ£©£¬¿ªÊ¼µ¥¶ÀsocketÁ¬½Ó£¬µ¥¶À½»»¥T1²âÊÔÄÚÈÝ£¬×ßXML¸ñÊ½)
    //0- ¹Ø±Õ(¹Ø±ÕÉè±¸µÄÁ¬½ÓÏß³Ì£¬ÊÍ·Å¶Ë¿Ú)£¬1- ¿ªÆô(Éè±¸ÄÚ²¿µ¥¶ÀÆðÁ¬½ÓÏß³Ì)
    BYTE   byPortState;  
    BYTE   byRes[61];     //±£Áô
}NET_DVR_T1TEST_PARAMCFG,*LPNET_DVR_T1TEST_PARAMCFG;

#define CARD_PARAM_CARD_VALID       0x00000001 //¿¨ÊÇ·ñÓÐÐ§²ÎÊý
#define CARD_PARAM_VALID            0x00000002  //ÓÐÐ§ÆÚ²ÎÊý
#define CARD_PARAM_CARD_TYPE        0x00000004  //¿¨ÀàÐÍ²ÎÊý
#define CARD_PARAM_DOOR_RIGHT       0x00000008  //ÃÅÈ¨ÏÞ²ÎÊý
#define CARD_PARAM_LEADER_CARD      0x00000010  //Ê×¿¨²ÎÊý
#define CARD_PARAM_SWIPE_NUM        0x00000020  //×î´óË¢¿¨´ÎÊý²ÎÊý
#define CARD_PARAM_GROUP            0x00000040  //ËùÊôÈº×é²ÎÊý
#define CARD_PARAM_PASSWORD         0x00000080  //¿¨ÃÜÂë²ÎÊý
#define CARD_PARAM_RIGHT_PLAN       0x00000100  //¿¨È¨ÏÞ¼Æ»®²ÎÊý
#define CARD_PARAM_SWIPED_NUM       0x00000200  //ÒÑË¢¿¨´ÎÊý

typedef struct tagNET_DVR_ANTI_SNEAK_CFG
{
    DWORD dwSize;
    BYTE byEnable; //Ê¹ÄÜ·´Ç±»Ø¹¦ÄÜ£¬1-Ê¹ÄÜ£¬0-²»Ê¹ÄÜ
    BYTE byRes1[3];
    DWORD dwStartCardReaderNo; //·´Ç±»ØÆðÊ¼¶Á¿¨Æ÷±àºÅ    
    BYTE byRes2[64];
}NET_DVR_ANTI_SNEAK_CFG, *LPNET_DVR_ANTI_SNEAK_CFG;

typedef struct tagNET_DVR_CARD_READER_ANTI_SNEAK_CFG
{
    DWORD dwSize;
    BYTE byEnable;  //ÊÇ·ñ¼ÓÈë·´Ç±»ØÂ·¾¶£¬1-¼ÓÈë£¬0-²»¼ÓÈë
    BYTE byRes1[3];
    DWORD dwFollowUpCardReader[MAX_SNEAK_PATH_NODE]; //ºóÐø¶Á¿¨Æ÷±àºÅ£¬Îª0±íÊ¾²»¹Ø×¢ÆðÊ¼¶Á¿¨Æ÷±àºÅ
    BYTE byRes2[32];
}NET_DVR_CARD_READER_ANTI_SNEAK_CFG, *LPNET_DVR_CARD_READER_ANTI_SNEAK_CFG;

typedef struct tagNET_DVR_PHONE_DOOR_RIGHT_CFG
{
    DWORD   dwSize;
    BYTE    byOpenRight[MAX_DOOR_NUM_256];         //°´Êý×é±íÊ¾,ÊÇ·ñÓÐ¿ªÃÅÈ¨ÏÞ£¬-ÎÞÈ¨ÏÞ£¬-ÓÐÈ¨ÏÞ
    BYTE    byCloseRight[MAX_DOOR_NUM_256];        //°´Êý×é±íÊ¾,ÊÇ·ñÓÐ¹ØÃÅÈ¨ÏÞ£¬-ÎÞÈ¨ÏÞ£¬-ÓÐÈ¨ÏÞ
    BYTE    byNormalOpenRight[MAX_DOOR_NUM_256];   //°´Êý×é±íÊ¾,ÊÇ·ñÓÐ³£¿ªÈ¨ÏÞ£¬-ÎÞÈ¨ÏÞ£¬-ÓÐÈ¨ÏÞ
    BYTE    byNormalCloseRight[MAX_DOOR_NUM_256];  //°´Êý×é±íÊ¾,ÊÇ·ñÓÐ³£±ÕÈ¨ÏÞ£¬-ÎÞÈ¨ÏÞ£¬-ÓÐÈ¨ÏÞ
    BYTE    byArmRight[MAX_ALARMHOST_ALARMIN_NUM]; //°´Êý×é±íÊ¾,ÊÇ·ñÓÐ²¼·ÀÈ¨ÏÞ£¬-ÎÞÈ¨ÏÞ£¬-ÓÐÈ¨ÏÞ
    BYTE    byDisarmRight[MAX_ALARMHOST_ALARMIN_NUM];  //°´Êý×é±íÊ¾,ÊÇ·ñÓÐ³··ÀÈ¨ÏÞ£¬-ÎÞÈ¨ÏÞ£¬-ÓÐÈ¨ÏÞ
    BYTE    byRes[256];                              //±£Áô
}NET_DVR_PHONE_DOOR_RIGHT_CFG,*LPNET_DVR_PHONE_DOOR_RIGHT_CFG;

typedef struct tagNET_DVR_MULTI_DOOR_INTERLOCK_CFG
{
    DWORD dwSize;
    BYTE byEnable; //ÊÇ·ñÆôÓÃ¶àÃÅ»¥Ëø¹¦ÄÜ£¬1-ÆôÓÃ£¬0-²»ÆôÓÃ
    BYTE byRes1[3];
    DWORD dwMultiDoorGroup[MAX_MULTI_DOOR_INTERLOCK_GROUP][MAX_INTER_LOCK_DOOR_NUM]; //¶àÃÅ»¥Ëø×é²ÎÊý£¬È¡ÖµÎªÃÅ±àºÅ
    BYTE byRes2[64];
}NET_DVR_MULTI_DOOR_INTERLOCK_CFG, *LPNET_DVR_MULTI_DOOR_INTERLOCK_CFG;

typedef struct tagNET_DVR_CARD_READER_CFG
{
    DWORD dwSize;
    BYTE byEnable; //ÊÇ·ñÊ¹ÄÜ£¬1-Ê¹ÄÜ£¬0-²»Ê¹ÄÜ
    BYTE byCardReaderType; //¶Á¿¨Æ÷ÀàÐÍ£¬1-DS-K110XM/MK/C/CK£¬2-DS-K192AM/AMP£¬3-DS-K192BM/BMP£¬4-DS-K182AM/AMP£¬5-DS-K182BM/BMP£¬6-DS-K182AMF/ACF£¬7-Î¤¸ù»ò485²»ÔÚÏß,8- DS-K1101M/MK£¬9- DS-K1101C/CK£¬10- DS-K1102M/MK/M-A
                            //11- DS-K1102C/CK£¬12- DS-K1103M/MK£¬13- DS-K1103C/CK£¬14- DS-K1104M/MK£¬15- DS-K1104C/CK£¬16- DS-K1102S/SK/S-A£¬17- DS-K1102G/GK£¬18- DS-K1100S-B£¬19- DS-K1102EM/EMK£¬20- DS-K1102E/EK£¬
                            //21- DS-K1200EF£¬22- DS-K1200MF£¬23- DS-K1200CF£¬24- DS-K1300EF£¬25- DS-K1300MF£¬26- DS-K1300CF£¬27- DS-K1105E£¬28- DS-K1105M£¬29- DS-K1105C£¬30- DS-K182AMF£¬31- DS-K196AMF£¬32-DS-K194AMP
                            //33-DS-K1T200EF/EF-C/MF/MF-C/CF/CF-C,34-DS-K1T300EF/EF-C/MF/MF-C/CF/CF-C£¬35-DS-K1T105E/E-C/M/M-C/C/C-C£¬36-DS-K1T803F/MF/SF/EF£¬37-DS-K1A801F/MF/SF/EF,38-DS-K1107M/MK,39-DS-K1107E/EK,
                            //40-DS-K1107S/SK,41-DS-K1108M/MK,42-DS-K1108E/EK,43-DS-K1108S/SK,44-DS-K1200F,45-DS-K1S110-I,46-DS-K1T200M-PG/PGC,47-DS-K1T200M-PZ/PZC,48-DS-K1109H
    BYTE byOkLedPolarity; //OK LED¼«ÐÔ£¬0-Òõ¼«£¬1-Ñô¼«
    BYTE byErrorLedPolarity; //Error LED¼«ÐÔ£¬0-Òõ¼«£¬1-Ñô¼«
    BYTE byBuzzerPolarity; //·äÃùÆ÷¼«ÐÔ£¬0-Òõ¼«£¬1-Ñô¼«
    BYTE bySwipeInterval; //ÖØ¸´Ë¢¿¨¼ä¸ôÊ±¼ä£¬µ¥Î»£ºÃë
    BYTE byPressTimeout;  //°´¼ü³¬Ê±Ê±¼ä£¬µ¥Î»£ºÃë
    BYTE byEnableFailAlarm; //ÊÇ·ñÆôÓÃ¶Á¿¨Ê§°Ü³¬´Î±¨¾¯£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byMaxReadCardFailNum; //×î´ó¶Á¿¨Ê§°Ü´ÎÊý
    BYTE byEnableTamperCheck;  //ÊÇ·ñÖ§³Ö·À²ð¼ì²â£¬0-disable £¬1-enable
    BYTE byOfflineCheckTime;  //µôÏß¼ì²âÊ±¼ä µ¥Î»Ãë
    BYTE byFingerPrintCheckLevel;   //Ö¸ÎÆÊ¶±ðµÈ¼¶£¬1-1/10ÎóÈÏÂÊ£¬2-1/100ÎóÈÏÂÊ£¬3-1/1000ÎóÈÏÂÊ£¬4-1/10000ÎóÈÏÂÊ£¬5-1/100000ÎóÈÏÂÊ£¬6-1/1000000ÎóÈÏÂÊ£¬7-1/10000000ÎóÈÏÂÊ£¬8-1/100000000ÎóÈÏÂÊ£¬9-3/100ÎóÈÏÂÊ£¬10-3/1000ÎóÈÏÂÊ£¬11-3/10000ÎóÈÏÂÊ£¬12-3/100000ÎóÈÏÂÊ£¬13-3/1000000ÎóÈÏÂÊ£¬14-3/10000000ÎóÈÏÂÊ£¬15-3/100000000ÎóÈÏÂÊ£¬16-Automatic Normal,17-Automatic Secure,18-Automatic More Secure
    BYTE byRes[24]; 
}NET_DVR_CARD_READER_CFG, *LPNET_DVR_CARD_READER_CFG;

typedef struct tagNET_DVR_ACS_WORK_STATUS
{
    DWORD dwSize;
    BYTE byDoorLockStatus[MAX_DOOR_NUM]; //ÃÅËø×´Ì¬£¬0-¹Ø£¬1-¿ª
    BYTE byDoorStatus[MAX_DOOR_NUM]; //ÃÅ×´Ì¬£¬1-ÐÝÃß£¬2-³£¿ª×´Ì¬£¬3-³£±Õ×´Ì¬£¬4-ÆÕÍ¨×´Ì¬
    BYTE byMagneticStatus[MAX_DOOR_NUM]; //ÃÅ´Å×´Ì¬£¬0-±ÕºÏ£¬1-¿ªÆô
    BYTE byCaseStatus[MAX_CASE_SENSOR_NUM]; ////ÊÂ¼þ´¥·¢Æ÷×´Ì¬£¬0-ÎÞÊäÈë£¬1-ÓÐÊäÈë
    WORD wBatteryVoltage; //Ðîµç³ØµçÑ¹Öµ£¬Êµ¼ÊÖµ³Ë10£¬µ¥Î»£º·üÌØ
    BYTE byBatteryLowVoltage; //Ðîµç³ØÊÇ·ñ´¦ÓÚµÍÑ¹×´Ì¬£¬0-·ñ£¬1-ÊÇ
    BYTE byPowerSupplyStatus; //Éè±¸¹©µç×´Ì¬£¬1-½»Á÷µç¹©µç£¬2-Ðîµç³Ø¹©µç
    BYTE byMultiDoorInterlockStatus; //¶àÃÅ»¥Ëø×´Ì¬£¬0-¹Ø±Õ£¬1-¿ªÆô
    BYTE byAntiSneakStatus; //·´Ç±»Ø×´Ì¬£¬0-¹Ø±Õ£¬1-¿ªÆô
    BYTE byHostAntiDismantleStatus; //Ö÷»ú·À²ð×´Ì¬£¬0-¹Ø±Õ£¬1-¿ªÆô
    BYTE byIndicatorLightStatus; //Ö¸Ê¾µÆ×´Ì¬£¬0-µôÏß£¬1-ÔÚÏß
    BYTE byCardReaderOnlineStatus[MAX_CARD_READER_NUM]; //¶Á¿¨Æ÷ÔÚÏß×´Ì¬£¬0-²»ÔÚÏß£¬1-ÔÚÏß
    BYTE byCardReaderAntiDismantleStatus[MAX_CARD_READER_NUM]; //¶Á¿¨Æ÷·À²ð×´Ì¬£¬0-¹Ø±Õ£¬1-¿ªÆô
    BYTE byCardReaderVerifyMode[MAX_CARD_READER_NUM]; //¶Á¿¨Æ÷µ±Ç°ÑéÖ¤·½Ê½£¬1-Ë¢¿¨£¬2-Ë¢¿¨+ÃÜÂë£¬3-Ë¢¿¨£¬4-Ë¢¿¨»òÃÜÂë
    BYTE bySetupAlarmStatus[MAX_ALARMHOST_ALARMIN_NUM];//±¨¾¯ÊäÈë¿Ú²¼·À×´Ì¬£¬0-¶ÔÓ¦±¨¾¯ÊäÈë¿Ú´¦ÓÚ³··À×´Ì¬£¬1-¶ÔÓ¦±¨¾¯ÊäÈë¿Ú´¦ÓÚ²¼·À×´Ì¬
    BYTE byAlarmInStatus[MAX_ALARMHOST_ALARMIN_NUM]; //±¨¾¯ÊäÈë¿Ú±¨¾¯×´Ì¬£¬0-¶ÔÓ¦±¨¾¯ÊäÈë¿Úµ±Ç°ÎÞ±¨¾¯£¬1-¶ÔÓ¦±¨¾¯ÊäÈë¿Úµ±Ç°ÓÐ±¨¾¯
    BYTE byAlarmOutStatus[MAX_ALARMHOST_ALARMOUT_NUM]; //±¨¾¯Êä³ö¿Ú×´Ì¬£¬0-¶ÔÓ¦±¨¾¯Êä³ö¿ÚÎÞ±¨¾¯£¬1-¶ÔÓ¦±¨¾¯Êä³ö¿ÚÓÐ±¨¾¯
    DWORD dwCardNum; //ÒÑÌí¼ÓµÄ¿¨ÊýÁ¿
    BYTE byRes2[32];
}NET_DVR_ACS_WORK_STATUS, *LPNET_DVR_ACS_WORK_STATUS;

typedef struct tagNET_DVR_CASE_SENSOR_CFG
{
    DWORD dwSize;
    BYTE  byHostBuzzer;  //´¥·¢Ö÷»ú·äÃùÆ÷£¬0-²»´¥·¢£¬1-´¥·¢
    BYTE  byRes1[3];
    BYTE  byCardReaderBuzzer[MAX_CARD_READER_NUM]; //´¥·¢¶Á¿¨Æ÷·äÃùÆ÷£¬1-´¥·¢£¬0-²»´¥·¢
    BYTE  byAssociateAlarmOut[MAX_ALARMHOST_ALARMOUT_NUM];  //¹ØÁª´¥·¢µÄ±¨¾¯Êä³ö£¬1-¹ØÁª£¬0-²»¹ØÁª
    BYTE  byDoorOpen[MAX_DOOR_NUM]; //¶ÔÃÅ1-N¹ØÁªÃÅ´ò¿ª£¬0-²»¹ØÁª£¬1-¹ØÁª£¨¼´´ò¿ª£©
    BYTE  byDoorClose[MAX_DOOR_NUM]; //¶ÔÃÅ1-N¹ØÁªÃÅ¹Ø±Õ£¬0-²»¹ØÁª£¬1-¹ØÁª£¨¼´¹Ø±Õ£©
    BYTE  byRes2[64];
}NET_DVR_CASE_SENSOR_CFG, *LPNET_DVR_CASE_SENSOR_CFG;

typedef enum _ENUM_UPGRADE_TYPE
{
    ENUM_UPGRADE_DVR = 0, //ÆÕÍ¨Éè±¸Éý¼¶
        ENUM_UPGRADE_ADAPTER = 1, //DVRÊÊÅäÆ÷Éý¼¶
        ENUM_UPGRADE_VCALIB = 2,  //ÖÇÄÜ¿âÉý¼¶
        ENUM_UPGRADE_OPTICAL = 3, //¹â¶Ë»úÉý¼¶
        ENUM_UPGRADE_ACS = 4, //ÃÅ½ûÏµÍ³Éý¼¶
        ENUM_UPGRADE_AUXILIARY_DEV = 5,//¸¨ÖúÉè±¸Éý¼¶
        ENUM_UPGRADE_LED = 6 //LED·¢ËÍ¿¨ºÍ½ÓÊÕ¿¨Éý¼¶
}ENUM_UPGRADE_TYPE;

typedef struct tagNET_DVR_ACS_EVENT_INFO
{
    DWORD dwSize;
    BYTE byCardNo[ACS_CARD_NO_LEN]; //¿¨ºÅ£¬Îª0ÎÞÐ§
    BYTE byCardType; //¿¨ÀàÐÍ£¬1-ÆÕÍ¨¿¨£¬2-²Ð¼²ÈË¿¨£¬3-ºÚÃûµ¥¿¨£¬4-Ñ²¸ü¿¨£¬5-Ð²ÆÈ¿¨£¬6-³¬¼¶¿¨£¬7-À´±ö¿¨£¬Îª0ÎÞÐ§
    BYTE byWhiteListNo; //°×Ãûµ¥µ¥ºÅ,1-8£¬Îª0ÎÞÐ§
    BYTE byReportChannel; //±¨¸æÉÏ´«Í¨µÀ£¬1-²¼·ÀÉÏ´«£¬2-ÖÐÐÄ×é1ÉÏ´«£¬3-ÖÐÐÄ×é2ÉÏ´«£¬Îª0ÎÞÐ§
    BYTE byCardReaderKind; //¶Á¿¨Æ÷ÊôÓÚÄÄÒ»Àà£¬0-ÎÞÐ§£¬1-IC¶Á¿¨Æ÷£¬2-Éí·ÝÖ¤¶Á¿¨Æ÷£¬3-¶þÎ¬Âë¶Á¿¨Æ÷,4-Ö¸ÎÆÍ·
    DWORD dwCardReaderNo; //¶Á¿¨Æ÷±àºÅ£¬Îª0ÎÞÐ§
    DWORD dwDoorNo; //ÃÅ±àºÅ£¬Îª0ÎÞÐ§
    DWORD dwVerifyNo; //¶àÖØ¿¨ÈÏÖ¤ÐòºÅ£¬Îª0ÎÞÐ§
    DWORD dwAlarmInNo;  //±¨¾¯ÊäÈëºÅ£¬Îª0ÎÞÐ§
    DWORD dwAlarmOutNo; //±¨¾¯Êä³öºÅ£¬Îª0ÎÞÐ§
    DWORD dwCaseSensorNo; //ÊÂ¼þ´¥·¢Æ÷±àºÅ
    DWORD dwRs485No;    //RS485Í¨µÀºÅ£¬Îª0ÎÞÐ§
	DWORD dwMultiCardGroupNo; //Èº×é±àºÅ
	WORD wAccessChannel;	//ÈËÔ±Í¨µÀºÅ
    BYTE  byDeviceNo;    //Éè±¸±àºÅ£¬Îª0ÎÞÐ§
    BYTE byRes1[1];
    DWORD dwEmployeeNo; //¹¤ºÅ£¬Îª0ÎÞÐ§
    BYTE  byRes[24];
}NET_DVR_ACS_EVENT_INFO, *LPNET_DVR_ACS_EVENT_INFO;

typedef struct tagNET_DVR_ACS_ALARM_INFO
{
    DWORD dwSize;
    DWORD dwMajor; //±¨¾¯Ö÷ÀàÐÍ£¬²Î¿¼ºê¶¨Òå
    DWORD dwMinor; //±¨¾¯´ÎÀàÐÍ£¬²Î¿¼ºê¶¨Òå
    NET_DVR_TIME struTime; //Ê±¼ä
    BYTE    sNetUser[MAX_NAMELEN] ;//ÍøÂç²Ù×÷µÄÓÃ»§Ãû
    NET_DVR_IPADDR    struRemoteHostAddr ;//Ô¶³ÌÖ÷»úµØÖ·
    NET_DVR_ACS_EVENT_INFO struAcsEventInfo; //ÏêÏ¸²ÎÊý
    DWORD dwPicDataLen;   //Í¼Æ¬Êý¾Ý´óÐ¡£¬²»Îª0ÊÇ±íÊ¾ºóÃæ´øÊý¾Ý
    char    *pPicData;
    BYTE byRes[24];
}NET_DVR_ACS_ALARM_INFO, *LPNET_DVR_ACS_ALARM_INFO;

#define JUDGE_MAX_VIDEOOUT_NUM 9

typedef struct tagNET_DVR_AUDIO_ACTIVATION_CFG 
{
    DWORD   dwSize;
    BYTE    byEnable;    //ÊÇ·ñÆôÓÃ
    BYTE    byRes1[3];
    DWORD   dwChanNo;    //ÓïÒô¼¤ÀøµÄÊÓÆµÍ¨µÀºÅ 
    BYTE    bySensitivity; //ÁéÃô¶È 1-100£¬ÁéÃô¶ÈÔ½¸ß£¬±íÊ¾½ÏµÍµÄÒôÁ¿¾ÍÄÜÊ¹ÄÜ¸ÃÒôÆµÊäÈë¼¤Àø¹¦ÄÜ£»ÁéÃô¶ÈÔ½µÍ£¬±íÊ¾ÐèÒª½Ï¸ßµÄÒôÁ¿²ÅÄÜÊ¹ÄÜ¸ÃÒôÆµÊäÈëµÄ¼¤Àø¹¦ÄÜ
    BYTE    byPriority;     //ÓÅÏÈ¼¶  0-ÓÅÏÈ¼¶0£¬1-ÓÅÏÈ¼¶1£¬ ÖµÔ½´ó¼¶±ðÔ½¸ß
    WORD    wDelayTime;  //ÓïÒô¼¤Àø½áÊø»­ÃæÇÐ»»ÑÓ³ÙÊ±¼ä£¬µ¥Î»s, ³¬Ê±ºó×Ô¶¯»Øµ½Ô¤ÖÃµã1¶ÔÓ¦µÄ»­Ãæ
    BYTE    byRes2;      //±£Áô
    BYTE    byEnablePreset; //ÊÇ·ñÆôÓÃÔ¤ÖÃµã
    WORD    wPreset;    //Ô¤ÖÃµã
    WORD    wBase;           /*»ù×¼µã±àºÅ*/
    BYTE    byRes3[2];
       BYTE    byVoChanNo[JUDGE_MAX_VIDEOOUT_NUM];          //ÓïÒô¼¤ÀøÊÇ·ñÊä³öµ½ÊÓÆµÊä³ö¿Ú¡£Öµ0±íÊ¾²»Êä³ö£¬1-±íÊ¾Êä³ö¡£ÏÂ±ê±íÊ¾Í¨µÀË³ÐòÈçÏÂ£º0-VGA1,1-VGA2, 2-VGA3,3-VGA4,4-VGA5~10,5-HDMI1,6-HDMI2
    BYTE    byRes[255]; //±£Áô
}NET_DVR_AUDIO_ACTIVATION_CFG,*LPNET_DVR_AUDIO_ACTIVATION_CFG;

typedef struct tagNET_DVR_INFRARED_OUTPUT_CTRL_CFG
{
    DWORD  dwSize;       //½á¹¹Ìå´óÐ¡
    BYTE   byIROutPort;   //ºìÍâÊä³öË÷Òý£¬1-ºìÍâÊä³ö¿Ú1£¬2-ºìÍâÊä³ö¿Ú2
    BYTE   byIRCmdIndex; //ºìÍâÑ§ÂëÃüÁî¶ÔÓ¦µÄË÷Òý£»
    BYTE   byRes[254]; //±£Áô
}NET_DVR_INFRARED_OUTPUT_CTRL_CFG, *LPNET_DVR_INFRARED_OUTPUT_CTRL_CFG;

#define  MAX_IR_CMD_NAME_LEN    32   //ºìÍâÊä³öÃüÁîÃû³Æ³¤¶È
#define  MAX_IR_CMD_NUM         32   //ºìÍâÃüÁî¸öÊý

typedef struct tagNET_DVR_INFRARED_CMD_INFO   //ºìÍâÃüÁîÃû³ÆÐÅÏ¢
{
    char   sCmdName[MAX_IR_CMD_NAME_LEN];  //ºìÍâÃüÁîÃû³Æ
    BYTE   byRes[8];         //±£Áô
} NET_DVR_INFRARED_CMD_INFO,*LPNET_DVR_INFRARED_CMD_INFO;


typedef struct tagNET_DVR_INFRARED_LEARN_CODE_CFG_
{
    DWORD  dwSize;  //½á¹¹Ìå´óÐ¡
    BYTE      sIROutName[MAX_IR_CMD_NAME_LEN];  //ºìÍâÊä³ö¿ÚÃû³Æ
    NET_DVR_INFRARED_CMD_INFO  struIRCmdInfo[MAX_IR_CMD_NUM];  //ºìÍâÃüÁî×ÓÐÅÏ¢
    BYTE   byRes[256];
} NET_DVR_INFRARED_CMD_NAME_CFG,*LPNET_DVR_INFRARED_CMD_NAME_CFG;

typedef enum tagIR_LEARN_SEND_DATA_TYPE_ENUM
{ 
    ENUM_SENDDATA = 0x0, //·¢ËÍÊý¾Ý
        ENUM_SEND_LEARN_IR_CMD_START,  //·¢ËÍºìÍâÑ§Âë
        ENUM_SEND_LEARN_IR_CMD_END   = 0x2  //ºìÍâÑ§Âë½áÊø 
}IR_LEARN_SEND_DATA_TYPE_ENUM;


typedef struct tagNET_DVR_INFRARED_LEARN_INFO
{
    DWORD dwSize;       //½á¹¹Ìå´óÐ¡
    BYTE  byIROutPort;  //ºìÍâÊä³öË÷Òý£¬1-ºìÍâÊä³ö¿Ú1£¬2-ºìÍâÊä³ö¿Ú2
    BYTE  byIRCmdIndex; //ºìÍâÑ§ÂëÃüÁî¶ÔÓ¦µÄË÷Òý 
    BYTE  byRes[30];    //±£Áô   
} NET_DVR_INFRARED_LEARN_INFO, *LPNET_DVR_INFRARED_LEARN_INFO;

typedef struct tagNET_DVR_INFRARED_LEARN_END
{
    DWORD  dwSize;       //½á¹¹Ìå´óÐ¡
    BYTE   bySaveLearnInfo;      //±£´æÑ§ÂëÐÅÏ¢£¬0-±£´æ£¬1-²»±£´æ
    BYTE   byRes[255];
} NET_DVR_INFRARED_LEARN_END,*LPNET_DVR_INFRARED_LEARN_END;

#define MAX_VIDEOIN_TYPE_NUM  10    //×î´óÖ§³ÖµÄÊÓÆµÊäÈëÔ´ÀàÐÍ

typedef struct tagNET_DVR_VIDEOIN_TYPE_INFO
{
    WORD  wInType;   //ÊäÈëÔ´ÀàÐÍ  0-SDI,1-VGA, 2-HDMI,3-IP,4-PIP
    WORD  wInNum;  //Ö§³ÖµÄÊäÈë¸öÊý
    WORD  wStartNo;  //ÊäÈë¶ÔÓ¦µÄÆðÊ¼ºÅ 
    BYTE   byRes[6];
}NET_DVR_VIDEOIN_TYPE_INFO, *LPNET_DVR_VIDEOIN_TYPE_INFO;

typedef  struct tagNET_DVR_TRIAL_SYSTEM_INFO
{
    DWORD dwSize ;    //½á¹¹Ìå´óÐ¡
    BYTE   byVideoInTypeNum ;   //ÊÓÆµÊäÈëÔ´ÀàÐÍ¸öÊý
    BYTE   byRes1[3];
    NET_DVR_VIDEOIN_TYPE_INFO struVideoIn[MAX_VIDEOIN_TYPE_NUM] ;  //ÊÓÆµÊäÈëÔ´
    BYTE   byRes[512 ] ;  //±£Áô
} NET_DVR_TRIAL_SYSTEM_INFO, *LPNET_DVR_TRIAL_SYSTEM_INFO;

typedef struct tagNET_DVR_CASE_INFO
{
    DWORD   dwSize;       //½á¹¹Ìå´óÐ¡
    BYTE    byCaseNo[CASE_NO_LEN];  //°¸¼þ±àºÅ
    BYTE    byCaseName[CASE_NAME_LEN]; //°¸¼þÃû³Æ£»
    BYTE    byLitigant1[LITIGANT_LEN]; //µ±ÊÂÈË1£»
    BYTE    byLitigant2[LITIGANT_LEN]; //µ±ÊÂÈË2£»
    BYTE    byChiefJudge[CHIEF_JUDGE_LEN];//ÉóÅÐ³¤
    BYTE    byCaseType; //°¸¼þÀàÐÍ£»1-ÐÌÊÂ°¸¼þ¡¢2-ÃñÊÂ°¸¼þ
    BYTE    byShowCaseInfoTime; /* °¸¼þÐÅÏ¢ÏÔÊ¾Ê±¼ä,µ¥Î»Ãë, È¡Öµ·¶Î§1~30*/ 
    BYTE    byRes[254]; //±£Áô
}NET_DVR_CASE_INFO, *LPNET_DVR_CASE_INFO;

#define     MICROPHONE_NUM            16
#define     FAN_NUM                8
#define     FPGA_NUM                8
#define     MAIN_BOARD                8
#define  LOCAL_INPUT_NUM        24
#define  LAMP_STATE_NAME        32
#define  LAMP_NAME                32
#define FILE_NAME_LEN            32
typedef  struct _NET_DVR_REMOTE_PLAY_
{
    DWORD    dwSize;            
    BYTE    byFileName[FILE_NAME_LEN];   //ÐèÒª²¥·ÅµÄÎÄ¼þÃû³Æ
    BYTE    byVideoOut[7];    //²¥·ÅÊä³ö¿Ú
    BYTE    byRes1[5];
    BYTE    byType;  // 0-ÎÞÒâÒå£¬1-¿ªÊ¼²¥·Å£¬2-Í£Ö¹²¥·Å
    BYTE      byRes[31];  //±£Áô
}NET_DVR_REMOTE_PLAY, *LPNET_DVR_REMOTE_PLAY;

typedef  struct _NET_DVR_TRIAL_MICROPHONE_STATUS
{
    DWORD     dwSize ;
    BYTE    byMicrophoneStatus [MICROPHONE_NUM];//Âó¿Ë·ç×´Ì¬ÏÂ±ê±íÊ¾Âó¿Ë·çºÅ0-¹©µç£¬1-²»¹©µç
    BYTE    byRes[32] ;  //±£Áô
}NET_DVR_TRIAL_MICROPHONE_STATUS, *LPNET_DVR_TRIAL_MICROPHONE_STATUS;

typedef  struct _NET_DVR_TRIAL_HOST_STATUS
{
    DWORD  dwSize ;
    DWORD  dwFanSpeed [FAN_NUM];//·çÉÈ×ªËÙ
    WORD   wMainBoardTemp[MAIN_BOARD]; //Ö÷°åÎÂ¶È
    BYTE   byFpgaTempWarn [FPGA_NUM];     //Êý×é0-Ö÷°åÎÂ¶ÈÔÝÎÞ±¨¾¯×´Ì¬£¬Êý×é1-FPGAÎÂ¶È±¨¾¯×´Ì¬Î»£¬1-´¦ÓÚ±¨¾¯×´Ì¬   0-´¦ÓÚÎÞ±¨¾¯×´Ì¬
    BYTE   byRes[32] ;  //±£Áô
}NET_DVR_TRIAL_HOST_STATUS, *LPNET_DVR_TRIAL_HOST_STATUS;

typedef  struct _NET_DVR_LOCAL_INPUT_INFO_
{
    DWORD      dwSize;
    BYTE      byChannelName[NAME_LEN] ;        //Í¨µÀÃû³Æ
    BYTE      byRes[32] ;  //±£Áô
}NET_DVR_LOCAL_INPUT_INFO, *LPNET_DVR_LOCAL_INPUT_INFO;

typedef struct tagNET_DVR_LAMP_STATUS
{
    BYTE     byEnable;  //ÊÇ·ñÆôÓÃ
    BYTE     byRes1[3];
    BYTE     byLampName[LAMP_NAME];   //Lamp Ãû³Æ£¬±¨¾¯Êä³ö3¡¢4¿ÚÎªLamp1¡£±¨¾¯5¡¢6Êä³ö¿ÚÎªlamp2¡£
    BYTE     byLampState1[LAMP_STATE_NAME];   //×´Ì¬1¶ÔÓ¦Ãû³Æ£¬ 
    BYTE     byLampState2[LAMP_STATE_NAME];   //×´Ì¬2¶ÔÓ¦Ãû³Æ
    BYTE     byLampState3[LAMP_STATE_NAME];   //×´Ì¬3¶ÔÓ¦Ãû³Æ
    BYTE     byRes[32];
}NET_DVR_LAMP_STATUS,*LPNET_DVR_LAMP_STATUS;

typedef  struct _NET_DVR_LAMP_OUT
{
    DWORD        dwSize;
    NET_DVR_LAMP_STATUS  struLampInfo[2]; //Êý×é0-±íÊ¾lamp1,Êý×é1±íÊölamp2
    BYTE  byRes[256];  //±£Áô
}NET_DVR_LAMP_OUT, *LPNET_DVR_LAMP_OUT;

typedef  struct _NET_DVR_LAMP_CONTROL
{
    DWORD     dwSize ;
    BYTE  byLampNo ; //Lamp±àºÅ£¬¶ÔÓ¦ÅäÖÃLampÊý×éÏÂ±ê
    BYTE  byLampStateNo ; //Lamp×´Ì¬±àºÅ 0-ÎÞÒâÒå£¬1-×´Ì¬1, 2-×´Ì¬2£¬ 3-×´Ì¬3  ¶ÔÓ¦LAMPÊä³ö¿ÚÅäÖÃ×´Ì¬
    BYTE  byRes[14] ;  //±£Áô
}NET_DVR_LAMP_CONTROL, *LPNET_DVR_LAMP_CONTROL;


//ÊµÊ±ÐÅÏ¢
typedef struct tagNET_DVR_TPS_PARAM
{
    BYTE                byStart;          // ¿ªÊ¼Âë
    BYTE                byCMD;         // ÃüÁîºÅ£¬01-½øÈëÖ¸Áî£¬02-Àë¿ªÖ¸Áî£¬03-Óµ¶Â×´Ì¬Ö¸Áî(Îª03Ê±£¬Ö»ÓÐbyLaneStateºÍbyQueueLenÓÐÐ§)
    BYTE                byRes[2];        // Ô¤Áô×Ö½Ú
    WORD                wDeviceID;      // Éè±¸ID
    WORD                wDataLen;       // Êý¾Ý³¤¶È
    BYTE                byLane;         // ¶ÔÓ¦³µµÀºÅ
    BYTE                bySpeed;        // ¶ÔÓ¦³µËÙ£¨KM/H£©
    BYTE                  byLaneState;     // ³µµÀ×´Ì¬£»0-ÎÞ×´Ì¬£¬1-³©Í¨£¬2-Óµ¼·£¬3-¶ÂÈû
    BYTE                  byQueueLen;       // ¶ÂÈû×´Ì¬ÏÂÅÅ¶Ó³¤¶È£¨±ÈÈç50Ã×£©
    BYTE                byRes1[24];        //±£Áô
}NET_DVR_TPS_PARAM, *LPNET_DVR_TPS_PARAM;

//TPSÊµÊ±¹ý³µÊý¾ÝÉÏ´«
typedef struct tagNET_DVR_TPS_REAL_TIME_INFO
{
    DWORD                 dwSize;          // ½á¹¹Ìå´óÐ¡
    DWORD                 dwChan ;//Í¨µÀºÅ
    NET_DVR_TIME_V30      struTime;    //¼ì²âÊ±¼ä
    NET_DVR_TPS_PARAM     struTPSRealTimeInfo;// ½»Í¨²ÎÊýÍ³¼ÆÐÅÏ¢
    BYTE                  byRes[24];      // ±£Áô
}NET_DVR_TPS_REAL_TIME_INFO, *LPNET_DVR_TPS_REAL_TIME_INFO;

//Í³¼ÆÐÅÏ¢
typedef struct tagNET_DVR_TPS_LANE_PARAM
{
    BYTE                  byLane;             // ¶ÔÓ¦³µµÀºÅ
    BYTE                  bySpeed;             // ³µµÀ¹ý³µÆ½¾ùËÙ¶È
    BYTE                  byRes[2];             // ±£Áô
    DWORD               dwLightVehicle;      // Ð¡ÐÍ³µÊýÁ¿
    DWORD               dwMidVehicle;        // ÖÐÐÍ³µÊýÁ¿
    DWORD               dwHeavyVehicle;      // ÖØÐÍ³µÊýÁ¿
    DWORD               dwTimeHeadway;      // ³µÍ·Ê±¾à£¬ÒÔÃë¼ÆËã
    DWORD               dwSpaceHeadway;     // ³µÍ·¼ä¾à£¬ÒÔÃ×À´¼ÆËã
    float               fSpaceOccupyRation; // ¿Õ¼äÕ¼ÓÐÂÊ£¬°Ù·Ö±È¼ÆËã,¸¡µãÊý*1000
    float               fTimeOccupyRation;  // Ê±¼äÕ¼ÓÐÂÊ£¬°Ù·Ö±È¼ÆËã,¸¡µãÊý*1000
    BYTE                byRes1[16];               // ±£Áô
}NET_DVR_TPS_LANE_PARAM, *LPNET_DVR_TPS_LANE_PARAM;

// ½»Í¨²ÎÊýÍ³¼ÆÐÅÏ¢
typedef struct tagNET_DVR_TPS_STATISTICS_PARAM
{
    BYTE                byStart;          // ¿ªÊ¼Âë
    BYTE                byCMD;         // ÃüÁîºÅ£¬ 08-¶¨Ê±³É×éÊý¾ÝÖ¸Áî
    BYTE                byRes[2];        // Ô¤Áô×Ö½Ú
    WORD                wDeviceID;      // Éè±¸ID
    WORD                wDataLen;       // Êý¾Ý³¤¶È
    BYTE                byTotalLaneNum;  // ÓÐÐ§³µµÀ×ÜÊý
    BYTE                byRes1[15];
    NET_DVR_TIME_V30    struStartTime;    //Í³¼Æ¿ªÊ¼Ê±¼ä
    DWORD                dwSamplePeriod;    //Í³¼ÆÊ±¼ä,µ¥Î»Ãë
    NET_DVR_TPS_LANE_PARAM  struLaneParam[MAX_TPS_RULE/*8*/];
}NET_DVR_TPS_STATISTICS_PARAM, *LPNET_DVR_TPS_STATISTICS_PARAM;

//TPSÍ³¼Æ¹ý³µÊý¾ÝÉÏ´«
typedef struct tagNET_DVR_TPS_STATISTICS_INFO
{
    DWORD                 dwSize;          // ½á¹¹Ìå´óÐ¡
    DWORD                 dwChan ;//Í¨µÀºÅ
    NET_DVR_TPS_STATISTICS_PARAM     struTPSStatisticsInfo;// ½»Í¨²ÎÊýÍ³¼ÆÐÅÏ¢
    BYTE                  byRes[128];      // ±£Áô
}NET_DVR_TPS_STATISTICS_INFO, *LPNET_DVR_TPS_STATISTICS_INFO;

#define     DPC_CORRECT                1    //Ð£Õý
#define     DPC_CORRECT_CANCEL         2    //È¡ÏûÐ£Õý
#define     DPC_CROSS_DISPALY_OPEN     3    //»µµã¼ì²âÊ®×Ö²æÏÔÊ¾¿ªÆô
#define     DPC_CROSS_DISPALY_CLOSE    4    //»µµã¼ì²âÊ®×Ö²æÏÔÊ¾¹Ø±Õ
#define     DPC_POINT                  5    //»µµãÐ£Õý×ø±ê
#define     DPC_UP                     6    //»µµãÐ£Õý×ø±êµãÏòÉÏÆ«ÒÆ
#define     DPC_DOWN                   7    //»µµãÐ£Õý×ø±êµãÏòÏÂÆ«ÒÆ
#define     DPC_RIGHT                  8    //»µµãÐ£Õý×ø±êµãÏòÓÒÆ«ÒÆ
#define     DPC_LEFT                   9    //»µµãÐ£Õý×ø±êµãÏò×óÆ«ÒÆ
#define     DPC_ALL_CORRECT            10   //ËùÓÐ»µµãÐ£Õý
#define     DPC_SAVE                   11   //»µµã±£´æ

typedef struct tagNET_DVR_DPC_PARAM
{
    DWORD   dwSize;
    DWORD   dwChannel; //Í¨µÀºÅ
    WORD    wCtrlType ;//²Î¿¼ºê¶¨Òå
    BYTE    byRes[2];
    NET_VCA_POINT struPoint; /*ÊäÈëµÄÍ¼ÏñÆ½Ãæ×ø±ê£¬¹éÒ»»¯µ½0-1*/
    BYTE    byRes1[64]; 
}NET_DVR_DPC_PARAM, *LPNET_DVR_DPC_PARAM;

//·Ç¾ùÔÈÐÔÐ£Õý(FFC)ÊÖ¶¯Ä£Ê½
typedef struct tagNET_DVR_FFC_MANUAL_INFO
{
    DWORD  dwSize;
    DWORD  dwChannel; //Í¨µÀºÅ
    BYTE   byRes[64]; 
}NET_DVR_FFC_MANUAL_INFO, *LPNET_DVR_FFC_MANUAL_INFO;

//·Ç¾ùÔÈÐÔÐ£Õý(FFC)±³¾°²¹³¥
typedef struct tagNET_DVR_FFC_BACKCOMP_INFO
{
    DWORD  dwSize;
    DWORD  dwChannel; //Í¨µÀºÅ
    BYTE   byRes[64]; 
}NET_DVR_FFC_BACKCOMP_INFO, *LPNET_DVR_FFC_BACKCOMP_INFO;

//´æ´¢·þÎñÆ÷¿ª¹Ø×´Ì¬
typedef struct tagNET_DVR_STORAGE_SERVER_SWITCH_CFG
{
    DWORD  dwSize;
    /*´æ´¢Í¼Æ¬¿ª¹Ø£»°´Î»±íÊ¾£¬0-¹Ø±Õ£¬1-¿ªÆô
    Êý×é0-ÒÆ¶¯Õì²â×¥Í¼(ÔÝ²»Ö§³Ö)
    Êý×é1-±¨¾¯×¥Í¼(ÔÝ²»Ö§³Ö)
    ¡­¡­
    */
    BYTE  byPicEnable[MAX_PIC_SWITCH_STORAGE_SERVER]; 
    /*´æ´¢¸½¼ÓÐÅÏ¢¿ª¹Ø£»°´Î»±íÊ¾£¬0-¹Ø±Õ£¬1-¿ªÆô
    Êý×é0-ÈÈ¶ÈÍ¼(ÔÝ²»Ö§³Ö)
    Êý×é1-¿ÍÁ÷Á¿(ÔÝ²»Ö§³Ö)
    ¡­¡­
    */       
    BYTE  byAddInfoEnable[MAX_INFO_SWITCH_STORAGE_SERVER]; 
    BYTE  byRes[324];
} NET_DVR_STORAGE_SERVER_SWITCH_CFG,
*LPNET_DVR_STORAGE_SERVER_SWITCH_CFG;

//Ç¿ÖÆÍ£Ö¹È¡Ö¤
typedef struct tagNET_DVR_FORCESTOP_FORENSICS_CFG
{
    DWORD  dwSize;
    DWORD  dwChannel; //Í¨µÀºÅ
    BYTE    byRes[64]; 
}NET_DVR_FORCESTOP_FORENSICS_CFG, *LPNET_DVR_FORCESTOP_FORENSICS_CFG;

typedef struct tagNET_DVR_DEC_VCA_ALARM
{
    DWORD dwSize;
    DWORD dwDisplayNo; //²úÉúÖÇÄÜ±¨¾¯µÄÏÔÊ¾Í¨µÀºÅ
    BYTE  bySubWinNo;  //²úÉúÖÇÄÜ±¨¾¯µÄ×Ó´°¿ÚºÅ
    BYTE  byRes1[3];
    NET_DVR_TIME_V30 struTime; //²úÉú±¨¾¯Ê±¼ä
    NET_DVR_PU_STREAM_CFG_V41 struSourceInfo; //ÂëÁ÷Ô´ÐÅÏ¢
    BYTE  *byAlarmPic; //±¨¾¯Í¼Æ¬»º³åÇø
    DWORD dwAlarmPicSize; //±¨¾¯Í¼Æ¬´óÐ¡£¬µ¥Î»£º×Ö½Ú
    BYTE  byRes2[64];
}NET_DVR_DEC_VCA_ALARM, *LPNET_DVR_DEC_VCA_ALARM;

typedef struct tagNET_DVR_DEC_VCA_ALARM_LOGO
{
    BYTE byEnableLogo;  //ÊÇ·ñµþ¼ÓÖÇÄÜ±¨¾¯logo£¬0-²»µþ¼Ó£¬·Ç0-µþ¼Ó
    BYTE byFlash;   //ÊÇ·ñÉÁË¸£¬0-²»ÉÁË¸£¬·Ç0-ÉÁË¸
    WORD wFlashTime; //ÉÁË¸Ê±¼ä£¬µ¥Î»£ºÃë£¬È¡Öµ·¶Î§´Ó½âÂëÆ÷ÄÜÁ¦¼¯»ñÈ¡ 
    DWORD dwLogoX;  //logo X×ø±ê£¬½âÂë´°¿Ú×Ü´óÐ¡£º1920*1920
    DWORD dwLogoY;  //logo Y×ø±ê
    BYTE byRes[32];
}NET_DVR_DEC_VCA_ALARM_LOGO, *LPNET_DVR_DEC_VCA_ALARM_LOGO;

typedef struct tagNET_DVR_DEC_VCA_ALARM_PIC
{
    BYTE byUploadPic; //ÖÇÄÜ±¨¾¯Ê±ÊÇ·ñÉÏ´«±¨¾¯Í¼Æ¬£¬0-²»ÉÏ´«£¬·Ç0-ÉÏ´«
    BYTE byOverlayTargetInfo; //±¨¾¯Í¼Æ¬ÊÇ·ñµþ¼ÓÄ¿±êÐÅÏ¢£¬0-²»µþ¼Ó£¬·Ç0-µþ¼Ó
    BYTE byOverlayRuleInfo; //±¨¾¯Í¼Æ¬ÊÇ·ñµþ¼ÓÖÇÄÜ¹æÔòÐÅÏ¢£¬0-²»µþ¼Ó£¬·Ç0-µþ¼Ó
    BYTE byPicQuality;            //Í¼Æ¬ÖÊÁ¿ÏµÊý 0-×îºÃ 1-½ÏºÃ 2-Ò»°ã
    /*Í¼Æ¬´óÐ¡ ¿ÉÒÔÍ¨¹ýÄÜÁ¦¼¯»ñÈ¡
    0-CIF£¬           1-QCIF£¬           2-D1£¬         3-UXGA(1600x1200), 4-SVGA(800x600),5-HD720p(1280x720)£¬
    6-VGA£¬           7-XVGA£¬           8-HD900p£¬     9-HD1080£¬     10-2560*1920£¬
    11-1600*304£¬     12-2048*1536£¬     13-2448*2048,  14-2448*1200£¬ 15-2448*800£¬
    16-XGA(1024*768), 17-SXGA(1280*1024),18-WD1(960*576/960*480),      19-1080i,      20-576*576£¬     
    21-1536*1536,     22-1920*1920,      23-320*240,    24-720*720,    25-1024*768,
    26-1280*1280,     27-1600*600,       28-2048*768,   0xff-Auto(Ê¹ÓÃµ±Ç°ÂëÁ÷·Ö±æÂÊ)*/
    BYTE byPicSize;
    BYTE byRes[27];
}NET_DVR_DEC_VCA_ALARM_PIC, *LPNET_DVR_DEC_VCA_ALARM_PIC;

typedef struct tagNET_DVR_DEC_VCA_ALARM_CFG
{
    DWORD dwSize;
    NET_DVR_DEC_VCA_ALARM_LOGO struAlarmLogo; //ÖÇÄÜ±¨¾¯logoµþ¼Ó²ÎÊý    
    NET_DVR_DEC_VCA_ALARM_PIC  struAlarmPic;  //ÖÇÄÜ±¨¾¯Í¼Æ¬²ÎÊý
    BYTE byRes[64];
}NET_DVR_VCA_ALARM_CFG, *LPNET_DVR_DEC_VCA_ALARM_CFG;

#define MAX_OSD_LEN                 64   //Êä³ö¿ÚOSD³¤¶È
typedef struct tagNET_DVR_OUTPUT_PIC_INFO
{
    DWORD  dwSize;
    BYTE   sPicName[NAME_LEN];//Í¼Æ¬Ãû³Æ
    BYTE   byUsed; //ÊÇ·ñÒÑ´æÔÚ£¬0-²»´æÔÚ£¬1-´æÔÚ
    BYTE   byRes[31];
}NET_DVR_OUTPUT_PIC_INFO,*LPNET_DVR_OUTPUT_PIC_INFO;

typedef struct tagNET_DVR_OUTPUT_PIC_CFG
{
    DWORD dwSize;
    DWORD  dwOutputPicNo;  //Í¼Æ¬ÐòºÅ
    BYTE   byEnable; //logoÊÇ·ñÏÔÊ¾£¬1-ÏÔÊ¾£¬0-Òþ²Ø
    BYTE   byRes1[3];    
    NET_DVR_RECTCFG_EX struRect;//logoÎ»ÖÃ£¬Êä³ö¿Ú·¶Î§×Ü´óÐ¡Îª1920*1920
    BYTE   byFlash;  //ÊÇ·ñÉÁË¸1-ÉÁË¸£¬0-²»ÉÁË¸
    BYTE   byTranslucent; //ÊÇ·ñ°ëÍ¸Ã÷1-°ëÍ¸Ã÷£¬0-²»°ëÍ¸Ã÷
    BYTE   byRes2[2];                //±£Áô
    DWORD  dwOutputPicWinNo; //Êä³ö¿ÚÍ¼Æ¬´°¿ÚºÅ£¨1×Ö½ÚÉè±¸ºÅ+1×Ö½ÚÊä³ö¿ÚºÅ+2×Ö½ÚÊä³ö¿ÚÍ¼Æ¬´°¿ÚºÅ£©,»ñÈ¡È«²¿Ê±ÓÐÐ§
    BYTE   byRes3[28];
}NET_DVR_OUTPUT_PIC_CFG,*LPNET_DVR_OUTPUT_PIC_CFG;

typedef struct tagNET_DVR_OUTPUT_OSD_CFG
{
    DWORD   dwSize;
    BYTE     byEnable; //OSDÊÇ·ñÏÔÊ¾£¬0-²»ÏÔÊ¾£¬1-ÏÔÊ¾
    BYTE     byFontSize; //×ÖÌå´óÐ¡£¬1-´ó£¬2-ÖÐ£¬3-Ð¡
    BYTE     byOSDColor; //OSDÑÕÉ«ÅäÖÃ£¬0-Ä¬ÈÏ£¬ 1-ºÚ£¬2-°×£¬3-ºì£¬4-ÂÌ£¬5-À¶
    BYTE     byRes1[1];    
    BYTE     byOsdContent[MAX_OSD_LEN]; //OSDÄÚÈÝ
    NET_DVR_RECTCFG_EX struRect;//OSDÎ»ÖÃ£¬Êä³ö¿Ú·¶Î§×Ü´óÐ¡Îª1920*1920
    DWORD dwOsdWinNo; //Êä³ö¿ÚOSD´°¿ÚºÅ£¨1×Ö½ÚÉè±¸ºÅ+1×Ö½ÚÊä³ö¿ÚºÅ+2×Ö½ÚOSD´°¿ÚºÅ£©£¬»ñÈ¡ËùÓÐÊ±ÓÐÐ§
    BYTE     byRes2[32];                //±£Áô
}NET_DVR_OUTPUT_OSD_CFG,*LPNET_DVR_OUTPUT_OSD_CFG;

typedef struct tagNET_DVR_CHAN_RELATION_RESOURCE
{
    DWORD dwSize;
    DWORD dwDisplayChan; //ÏÔÊ¾Í¨µÀºÅ£¨1×Ö½ÚÉè±¸ºÅ+1×Ö½Ú±£Áô+2×Ö½ÚÏÔÊ¾Í¨µÀºÅ£©
    BYTE  byRelateAudio; //ÊÇ·ñ¹ØÁª×Ó´°¿ÚÒôÆµ
    BYTE  byRes1[3];
    DWORD dwSubWinNo; //¹ØÁªÒôÆµµÄ×Ó´°¿ÚºÅ£¨1×Ö½ÚµçÊÓÇ½ºÅ+1×Ö½Ú×Ó´°¿ÚºÅ+2×Ö½Ú´°¿ÚºÅ£©
    DWORD dwChannel; //±àÂëÍ¨µÀºÅ£¬»ñÈ¡È«²¿Ê±ÓÐÐ§
    BYTE byRes2[32];
}NET_DVR_CHAN_RELATION_RESOURCE, *LPNET_DVR_CHAN_RELATION_RESOURCE;

typedef struct tagNET_DVR_ALARM_CHAN_ABLITITY
{
    DWORD    dwSize;
    BYTE    bySensorChan[64];//Ä£ÄâÁ¿Í¨µÀ ÏÂ±ê±íÊ¾Í¨µÀºÅ 0-±íÊ¾²»Ö§³Ö£¬1-±íÊ¾Ö§³Ö
    BYTE    byAlarmInChan[64];//±¨¾¯ÊäÈëÍ¨µÀ ÏÂ±ê±íÊ¾Í¨µÀºÅ 0-±íÊ¾²»Ö§³Ö£¬1-±íÊ¾Ö§³Ö
    BYTE    byAlarmOutChan[64];//±¨¾¯Êä³öÍ¨µÀ ÏÂ±ê±íÊ¾Í¨µÀºÅ 0-±íÊ¾²»Ö§³Ö£¬1-±íÊ¾Ö§³Ö
    BYTE    by485Chan[64];//485Í¨µÀ ÏÂ±ê±íÊ¾Í¨µÀºÅ 0-±íÊ¾²»Ö§³Ö£¬1-±íÊ¾Ö§³Ö
    BYTE    byRes[128];
}NET_DVR_ALARM_CHAN_ABLITITY, *LPNET_DVR_ALARM_CHAN_ABLITITY;

typedef struct
{
    DWORD    dwSize;
    BYTE    byOutScale[8];//ÏÂ±ê±íÊ¾Ö÷¸¨¿ÚºÅ£¬0-±íÊ¾²»Ö§³Ö£¬1-±íÊ¾12V£¬2-±íÊ¾24V
    BYTE    byRes[16];
}NET_DVR_OUT_SCALE_CFG, *LPNET_DVR_OUT_SCALE_CFG;

typedef    struct     tagNET_DVR_MONITOR_LOCATION_COND
{
    DWORD   dwSize; 
    DWORD   dwChan;
    /*
    0 ±íÊ¾¹ØÁª ×¥ÅÄMPRÄ£Ê½£¨¶àÖ¡´¥·¢×¥ÅÄ IPCÊ¹ÓÃ£©
    1 ±íÊ¾¹ØÁª ×¥ÅÄ HVT Ä£Ê½£¨»ì¿¨IPCÊ¹ÓÃ£©
    */
    BYTE    byRelateType;
    BYTE    byRes[63];        //±£Áô
}NET_DVR_MONITOR_LOCATION_COND, *LPNET_DVR_MONITOR_LOCATION_COND;

typedef    struct     tagNET_DVR_MONITOR_LOCATION_CFG
{
    DWORD   dwSize; 
    BYTE    byMonitoringSiteID[MAX_ID_LEN/*48*/];        //¼à²âµã±àºÅ
    BYTE    byDeviceID[MAX_ID_LEN/*48*/];                //Éè±¸±àºÅ
    BYTE    byDirectionNo;        //¼à²â·½Ïò±àºÅ,0-ÎÞ,1-ÉÏÐÐ,2-ÏÂÐÐ,3-Ë«Ïò,4-ÓÉ¶«ÏòÎ÷,5-ÓÉÄÏÏò±±,6-ÓÉÎ÷Ïò¶«,7-ÓÉ±±ÏòÄÏ,8-ÆäËû
    BYTE    byRes1[3];        //±£Áô
    BYTE    byMonitorInfo[MONITORSITE_ID_LEN/*48*/];      //¼à²âµãÐÅÏ¢ÃèÊö
    BYTE    byRes[128];        //±£Áô
}NET_DVR_MONITOR_LOCATION_CFG, *LPNET_DVR_MONITOR_LOCATION_CFG;

typedef struct tagNET_DVR_REMOTECONTROL_COND
{
    DWORD   dwSize;    //½á¹¹´óÐ¡
    DWORD   dwChannel; //Í¨µÀºÅ
    BYTE    byRes[64]; 
}NET_DVR_REMOTECONTROL_COND, *LPNET_DVR_REMOTECONTROL_COND;

typedef struct tagNET_DVR_REMOTECONTROL_STATUS_
{
    DWORD   dwSize;               //½á¹¹´óÐ¡
    BYTE    byAlarmStatus;//²¼·À×´Ì¬£¬0-±£Áô,1-³··À,2-²¼·À
    BYTE    byRes[3]; 
    WORD    wAlarmDealyTime;//²¼·ÀÑÓ³ÙÊ±¼ä£¬µ¥Î»s
    WORD    wDisAlarmDealyTime;//³··ÀÑÓ³ÙÊ±¼ä£¬µ¥Î»s
    BYTE    byRes1[64]; 
} NET_DVR_REMOTECONTROL_STATUS, *LPNET_DVR_REMOTECONTROL_STATUS;

typedef struct tagNET_DVR_SECURITY_CFG
{ 
    DWORD    dwSize;
    BYTE    byCommuMode;//Ë½ÓÐÐ­ÒéÍ¨ÐÅÄ£Ê½£¬0-¼æÈÝÄ£Ê½£¬1-°²È«Ä£Ê½
    BYTE    byRes1[2];
    BYTE    byWebAuthentication;    //webÈÏÖ¤ÅäÖÃ 0-digest¡¢1-basic;Ä¬ÈÏbasicÈÏÖ¤
    BYTE    byRtspAuthentication;   //rtspÈÏÖ¤ÅäÖÃ 0-disable¡¢1-basic;Ä¬ÈÏbasicÈÏÖ¤
    BYTE    byTelnetServer;         //telnetÉèÖÃ 0¡«½ûÓÃ£¬1¡«ÆôÓÃ
    BYTE    bySSHServer;            //SSHÉèÖÃ 0¡«½ûÓÃ(Ä¬ÈÏ)£¬1¡«ÆôÓÃ
    BYTE    byIllegalLoginLock;     //¿ªÆôµÇÂ½Ëø¶¨, 0-ÆôÓÃ£¨Ä¬ÈÏ£©£¬1-½ûÓÃ
    BYTE    byStreamEncryption;     //ÂëÁ÷¼ÓÃÜ 0-²»¼ÓÃÜ£¬1-¼ÓÃÜ
    BYTE    byAntiAttack;          //ÊÇ·ñ¿ªÆô·À¹¥»÷¹¦ÄÜ£¬0- ²»ÆôÓÃ£¬1-ÆôÓÃ(socketÑÓÊ±5s¹Ø±Õ)
    BYTE    byRes[26];
}NET_DVR_SECURITY_CFG,*LPNET_DVR_SECURITY_CFG;

typedef struct tagNET_DVR_PASSWORD_MANAGE_CFG
{
    DWORD    dwSize;
    BYTE     byRes[3];
    BYTE     byLockCount;      //¶ÔÓ¦ÓÃ»§Ãû»òIP±»¼¸´ÎÁ¬ÐøµÄ´íÎóÃÜÂëµÇÂ¼ºó£¬¶Ô¸ÃÓÃ»§½øÐÐËø¶¨£¬0-²»Ëø¶¨£¬ÆäËûÖµÎªËø¶¨µÄ´ÎÊý¡£ Ä¬ÈÏÎª0£¬ÀýÈç1±íÊ¾´íÎóµÇÂ¼1´ÎÒÔºó¾ÍËø¶¨¸ÃÓÃ»§Ãû¡£
    DWORD  dwLockTime;       //Ëø¶¨Ê±¼ä£¬±íÊ¾´íÎóºóËø¶¨µÄÊ±¼ä£¬µ¥Î»£ºÃë¡£²»ÄÜÎª0£¬byLockCount²»Îª0Ê±£¬dwLockTime²ÅÓÐÐ§
    BYTE     byRes1[128];        //4×Ö½Ú¶ÔÆë
} NET_DVR_PASSWORD_MANAGE_CFG,*LPNET_DVR_PASSWORD_MANAGE_CFG;


typedef struct tagNET_DVR_UNLOCK_INFO
{
    DWORD    dwSize;
    BYTE    byUnlockType;    //0-ÎÞÐ§£¬ 1-°´IP½âËø£¬2-½âËøËùÓÐIP
    BYTE    byIPVersion;    //1-IPV4£¬2-IPV6£¬µ±byUnlockTypeÎª1Ê±£¬¸Ã²ÎÊýÓÐÐ§
    BYTE    byRes1[2];
    NET_DVR_IPADDR struIPAddr;        //IPµØÖ·
    BYTE     byRes[64];
} NET_DVR_UNLOCK_INFO,*LPNET_DVR_UNLOCK_INFO;

typedef  struct  tagNET_DVR_LOCKED_INFO
{
    DWORD    dwSize;
    BYTE    byIPType;    //IPÀàÐÍ 0-ÎÞÐ§£¬1-IPV4£¬2-IPV6
    BYTE    byRes1[3];
    NET_DVR_IPADDR struIPAddress;
    BYTE    byRes[20];    
} NET_DVR_LOCKED_INFO,*LPNET_DVR_LOCKED_INFO;


typedef struct tagNET_DVR_VEHICLE_PARA
{
    BYTE  sLicense[MAX_LICENSE_LEN];
                            /*¹ú¼ÒË÷ÒýÖµ
                            0-Ëã·¨¿â²»Ö§³ÖÅÆÊ¶¹ú¼Ò£¬1-½Ý¿Ë¹²ºÍ¹ú(CZ - Czech Republic)£¬2-·¨¹ú(FRA - France)£¬
                            3-µÂ¹ú(DE - Germany),4-Î÷°àÑÀ(E - Spain), 5-Òâ´óÀû(IT - Italy)£¬6-ºÉÀ¼(NL - Netherlands)£¬7-²¨À¼(PL - Poland)£¬8-Ë¹Âå·¥¿Ë(SVK - Slovakia), 9-°×¶íÂÞË¹(BY - Belorussia), 10-Ä¦¶û¶àÍß(MDA - Moldova)£¬11-¶íÂÞË¹(RU - Russia)£¬12-ÎÚ¿ËÀ¼(UA - Ukraine), 0xfe-ÎÞ·¨Ê¶±ð    
    */
    BYTE  byCountry;                   // ¹ú¼ÒË÷ÒýÖµ

    BYTE  byRes[239];
}NET_DVR_VEHICLE_PARA, *LPNET_DVR_VEHICLE_PARA;

typedef struct tagNET_DVR_FACE_PIC_DATA_INFO
{
    DWORD              dwImageLen;   //Í¼Æ¬´óÐ¡
    NET_VCA_RECT       struVcaRect;  //×ÓÍ¼ÔÚ´óÍ¼ÖÐµÄ×ø±êÎ»ÖÃ£¬¹éÒ»»¯×ø±ê
    DWORD              dwFaceScore;  //ÏàËÆ¶È£¬È¡Öµ·¶Î§0-100
    BYTE                byRes[228];
    BYTE               *pImage;  //ÆäÖÐÍ¼Æ¬ÒªÇóÎªjpg¸ñÊ½
}NET_DVR_FACE_PIC_DATA_INFO, *LPNET_DVR_FACE_PIC_DATA_INFO;

typedef struct  tagNET_DVR_BEHAVIOUR_COND
{
    DWORD dwSearchType;   //ËÑË÷ÀàÐÍ
    //&0x1 - ´©Ô½¾¯½äÏß
    //&0x2 - ÇøÓòÈëÇÖ
    //&0x4 - ÎïÆ·ÒÅÁô
    //&0x8 - ÎïÆ·ÄÃÈ¡
    //&0x10 - ½øÈëÇøÓò
    //&0x20 - Àë¿ªÇøÓò
    //&0x40 - ·Ç·¨Í£³µ
    //&0x80 - ÅÇ»²
    //&0x100 -ÈËÔ±¾Û¼¯
    //&0x200 - ¿ìËÙÒÆ¶¯        
    BYTE byRes[252];  //±£Áô
}NET_DVR_BEHAVIOUR_COND, *LPNET_DVR_BEHAVIOUR_COND;


typedef union tagNET_DVR_SMARTSEARCH_PIC_UNION
{  
    BYTE                byLen[256];  //ÁªºÏÌå³¤¶È
    NET_DVR_VEHICLE_PARA     struVehiclePara; //³µÁ¾¼ì²âÐÅÏ¢
    NET_VCA_HUMAN_FEATURE    struHumaFeature; //ÈËÁ³ÊôÐÔ
    NET_DVR_FACE_PIC_DATA_INFO   struHumaPic;     //¸ù¾ÝÈËÁ³×ÓÍ¼ÐÅÏ¢²éÑ¯£¨ÓÃÓÚÔ¶³ÌÍ¼Æ¬µÄÒÔÍ¼Ë÷Í¼¹¦ÄÜ£©  
    NET_DVR_BEHAVIOUR_COND   struBehaviourCond;  //ÐÐÎª·ÖÎöËÑË÷Ìõ¼þ      
}NET_DVR_SMARTSEARCH_PIC_UNION,*LPNET_DVR_SMARTSEARCH_PIC_UNION;

typedef struct tagNET_DVR_SMART_SEARCH_PIC_PARA  //ÖÇÄÜÍ¼Æ¬ËÑË÷½á¹¹Ìå size 344
{
    DWORD                dwChanNo;               //Í¨µÀºÅ
    DWORD                byStreamID[STREAM_ID_LEN] ;   //Á÷IDÐÅÏ¢£¬ÓëdwChanNoÏà±È£¬ÓÅÏÈ¼¶½Ï¸ß£¬¼´µ±byStreamID²»Îª¿ÕÊ±£¬ÔòÊ¹ÓÃÁ÷ID£¬Îª¿ÕµÄÇé¿öÏÂÊ¹ÓÃdwChanNo×Ö¶Î
    NET_DVR_TIME_EX         struStartTime;               //Â¼Ïñ¿ªÊ¼µÄÊ±¼ä
    NET_DVR_TIME_EX         struEndTime;            //Â¼ÏñÍ£Ö¹µÄÊ±¼ä
    WORD                wSearchType;            //ÖÇÄÜ²éÕÒÀàÐÍ  0-³µÁ¾¼ìË÷ £¬1-ÈËÁ³ÊôÐÔ£¬ 2-ÒÔÍ¼Ë÷Í¼ £¬3-ÐÐÎª·ÖÎö
    BYTE               byRes1[2];
    NET_DVR_SMARTSEARCH_PIC_UNION   uSmartSearchCond;  //ÖÇÄÜ²éÕÒÌõ¼þ
    BYTE               byRes[64];
}NET_DVR_SMART_SEARCH_PIC_PARA, *LPNET_DVR_SMART_SEARCH_PIC_PARA;

//ÈËÌåÌØÕ÷Ê¶±ð½á¹û
typedef struct tagNET_DVR_FACE_SUB_PIC_INFO
{
    DWORD          dwSimilarity;   //ÏàËÆ¶È 0-100
    NET_VCA_RECT   struVcaRect;    //ÈËÁ³ÇøÓò£¬¹éÒ»»¯×ø±ê
    BYTE           byRes2[236];   //±£Áô
}NET_DVR_FACE_SUB_PIC_INFO ,*LPNET_DVR_FACE_SUB_PIC_INFO;


typedef struct tagNET_DVR_BEHAVIOR_INFO
{
    NET_VCA_RECT struVcaRect;
    BYTE         byRes2[240];   //±£Áô
}NET_DVR_BEHAVIOR_INFO ,*LPNET_DVR_BEHAVIOR_INFO;

typedef union tagNET_DVR_PIC_FEATURE_UNION
{  
    BYTE                         byLen[256];         //ÁªºÏÌå³¤¶È
    NET_DVR_PLATE_INFO              struPlateInfo;      //³µÁ¾¼ìË÷ÐÅÏ¢
    NET_DVR_FACE_SUB_PIC_INFO       struFaceSubInfo;    //ÈËÁ³×ÓÍ¼ÐÅÏ¢
    NET_DVR_BEHAVIOR_INFO           struBehavior;       //ÐÐÎª·ÖÎö¶ÔÓ¦µÄ×ÓÍ¼ÐÅÏ¢
}NET_DVR_PIC_FEATURE_UNION,*LPNET_DVR_PIC_FEATURE_UNION;

typedef struct tagNET_DVR_SMART_SEARCH_PIC_RET
{
    char                sFileName[PICTURE_NAME_LEN];//ÎÄ¼þÃû
    NET_DVR_TIME_EX     struTime;                      //Í¼Æ¬µÄ×¥Í¼Ê±¼ä
    DWORD   dwFileSize;                 //ÎÄ¼þµÄ´óÐ¡
    WORD    wPicType;                  //Í¼Æ¬ÀàÐÍ  0-³µÁ¾¼ìË÷ £¬1-ÈËÁ³ÊôÐÔ£¬ 2-ÒÔÍ¼Ë÷Í¼ £¬3-´©Ô½¾¯½äÏß£¬4-ÇøÓòÈëÇÖ£¬ 5-ÎïÆ·ÒÅÁô£¬ 6-ÎïÆ·ÄÃÈ¡£¬ 7-½øÈëÇøÓò£¬ 8-Àë¿ªÇøÓò£¬ 9-·Ç·¨Í£³µ£¬10-ÅÇ»²£¬11-ÈËÔ±¾Û¼¯£¬12-¿ìËÙÒÆ¶¯
    BYTE    byRes1[2];                  //±£Áô
    NET_DVR_PIC_FEATURE_UNION   uPicFeature;  //Í¼Æ¬ÊôÐÔ
    BYTE    byRes[32];
}NET_DVR_SMART_SEARCH_PIC_RET, *LPNET_DVR_SMART_SEARCH_PIC_RET; 

typedef struct tagNET_DVR_T1TEST_SEND_DATA_BUZZER
{
    BYTE  byHearSound;   //ÊÇ·ñÌýµ½ÉùÒô 0-Î´Ìýµ½£¬1-Ìýµ½
    BYTE  byRes[31];     //±£Áô
}NET_DVR_T1TEST_SEND_DATA_BUZZER,*LPNET_DVR_T1TEST_SEND_DATA_BUZZER;


typedef union NET_DVR_T1TEST_DATA_UNION
{
    BYTE  byUnionLen[32];
    NET_DVR_T1TEST_SEND_DATA_BUZZER struBuzzer;  //·äÃùÆ÷
    NET_DVR_TIME_V30  struCurTime;   //µ±Ç°PC»úÊ±¼ä
}NET_DVR_T1TEST_DATA_UNION,*LPNET_DVR_T1TEST_DATA_UNION;


typedef struct tagNET_DVR_T1TEST_SEND_DATA
{
    DWORD     dwSize;     //½á¹¹Ìå´óÐ¡
    BYTE  byDataType;  //Êý¾ÝÀàÐÍ 0-·äÃùÆ÷£¬1-pc±¾µØÊ±¼ä
    BYTE  byRes1[3];
    NET_DVR_T1TEST_DATA_UNION uSendData;  //·¢ËÍµÄÊý¾ÝÄÚÈÝ
    BYTE  byRes[64];
}NET_DVR_T1TEST_SEND_DATA,*LPNET_DVR_T1TEST_SEND_DATA;

typedef struct tagNET_DVR_PIC_MODEL_CFG  //Í¼Ïñ½¨Ä£²ÎÊýÅäÖÃ
{
    DWORD       dwSize;    //½á¹¹Ìå´óÐ¡
    BYTE         byEnable;     //ÊÇ·ñÆôÓÃ
    BYTE         byRes[63];
}NET_DVR_PIC_MODEL_CFG, *LPNET_DVR_PIC_MODEL_CFG;

typedef struct  tagNET_DVR_MOUSE_EVENT_PARAM  //Êó±êÐÅÏ¢ÅäÖÃ
{
    DWORD           dwSize;   //½á¹¹Ìå´óÐ¡
    BYTE            byMouseEvent;  //Êó±êÊÂ¼þÀàÐÍ£¬ 0-Êó±ê×ó¼üµ¥»÷£¬1-Êó±ê×ó¼üË«»÷£¬2-Êó±êÓÒ¼ü£¬3-¹öÂÖÉÏ¹ö£¬4-¹öÂÖÏÂ¹ö
    BYTE            byRes1[3];    //±£Áô
    NET_VCA_POINT   struPoint;    //Êó±êµãÎ»ÖÃ×ø±ê£¬¹éÒ»»¯´¦Àí
    BYTE            byRes[64];    //±£Áô
}NET_DVR_MOUSE_EVENT_PARAM, *LPNET_DVR_MOUSE_EVENT_PARAM;

typedef struct tagNET_DVR_AUTO_LIMIT_WAVE_CFG
{
    BYTE  byFBCEnable;         //FBC¿ª¹Ø 0-²»¿ªÆô£¬1-¿ªÆô
    BYTE  byMode;              //Ä£Ê½, 0-¿ìËÙ, 1-ÆÕÍ¨,2-ÂýËÙ
    BYTE  byFilterQValue;      //×ÔÊÊÓ¦ÂË²¨Æ÷QÖµ£¬µ¥Î»Oct, 0-1/40,1-1/10, Ä¬ÈÏÖµÎª1/40 Oct
    BYTE  byStaticFilterNum;   //¾²Ì¬ÂË²¨Æ÷ÊýÁ¿£¬È¡Öµ·¶Î§0-12  
    BYTE  byRes[16];
}NET_DVR_AUTO_LIMIT_WAVE_CFG,*LPNET_DVR_AUTO_LIMIT_WAVE_CFG;

typedef struct tagNET_DVR_MIX_AUDIOIN_CFG
{
    DWORD  dwSize;  //½á¹¹Ìå´óÐ¡
    DWORD  dwHighPassFilter;         //¸ßÍ¨ÂË²¨Æ÷ È¡Öµ·¶Î§ 0-127, ¾ßÌåË÷Òý´ú±íº¬ÒåÒÔÄÜÁ¦¼¯Îª×¼
    DWORD  dwNoiseMargin;            //ÔëÉùÃÅÏÞ£¬È¡Öµ·¶Î§ 0-127, ¾ßÌåË÷Òý´ú±íº¬ÒåÒÔÄÜÁ¦¼¯Îª×¼
    NET_DVR_AUTO_LIMIT_WAVE_CFG  struLimitWave;  //×Ô¶¯ÏÞ²¨¿ØÖÆ²ÎÊý£¬µ±ÒôÆµÊäÈëÔ´ÎªmacInÊ±ÓÐÐ§
    BYTE   byRes[64];
}NET_DVR_MIX_AUDIOIN_CFG,*LPNET_DVR_MIX_AUDIOIN_CFG;

typedef struct tagNET_DVR_MIX_AUDIOOUT_CFG
{
    DWORD   dwSize;  //½á¹¹Ìå´óÐ¡
    BYTE    byModulatorEnbale;  //ÊÇ·ñÆôÓÃÏàÎ»µ÷ÖÆÆ÷
    BYTE    byPostFilter;       //Post Filter¿ª¹Ø£¬0-¹Ø±Õ£¬1-¿ªÆô£¬Ä¬ÈÏ¿ªÆô
    BYTE    byLimitPressure;    //Êä³öÑ¹ÏÞ¿ª¹Ø 0-¹Ø±Õ£¬1-¿ªÆô£¬Ä¬ÈÏ¿ªÆô
    BYTE    byRes1;             //±£Áô 
    WORD    wModulatorValue;    //ÏàÎ»µ÷ÖÆÁ¿ È¡Öµ·¶Î§ 0-127, ¾ßÌåË÷Òý´ú±íº¬ÒåÒÔÄÜÁ¦¼¯Îª×¼£¬Ä¬ÈÏ10
    WORD    wTriggerTime;       //Ñ¹ÏÞ´¥·¢Ê±¼ä£¬È¡Öµ·¶Î§ 0-127, ¾ßÌåË÷Òý´ú±íº¬ÒåÒÔÄÜÁ¦¼¯Îª×¼
    WORD    wFreeTime;          //Ñ¹ÏÞÊÍ·ÅÊ±¼ä£¬È¡Öµ·¶Î§ 0-127, ¾ßÌåË÷Òý´ú±íº¬ÒåÒÔÄÜÁ¦¼¯Îª×¼
    BYTE    byCompressThreshold; //Ñ¹ËõÃÅÏÞ 0-1X,1-2X,2-4X,3-8X  X±íÊ¾±¶£¬±ÈÈç2X±íÊ¾2±¶
    BYTE    byCompressMode;     //Ñ¹Ëõ·½Ê½£¬0-Ó²Ñ¹Ëõ£¬1-ÈíÑ¹Ëõ£¬Ä¬ÈÏÎªÓ²Ñ¹Ëõ
    BYTE    byCompressRate;    //Ñ¹ËõÂÊ 
    BYTE    byRecoveryGain;    //»Ø¸´ÔöÒæ 0-1X,1-2X,2-4X,3-8X
    BYTE    byOutputGain;      //Êä³öÔöÒæ 0 ~100£¨¸ºÖµ£©
    BYTE    byRes[61];
}NET_DVR_MIX_AUDIOOUT_CFG,*LPNET_DVR_MIX_AUDIOOUT_CFG;

#define MAX_AUDIOOUT_PRO_TYPE                8    //ÒôÆµÊä³ö´¦Àí·½Ê½
typedef struct tagNET_DVR_VOLUME_CFG
{
    DWORD    dwSize;  //½á¹¹Ìå´óÐ¡
    WORD    wVolume[MAX_AUDIOOUT_PRO_TYPE];      //ÒôÁ¿´óÐ¡ È¡Öµ·¶Î§ 0-127, ¾ßÌåË÷Òý´ú±íº¬ÒåÒÔÄÜÁ¦¼¯Îª×¼
    BYTE    byPhantomPowerSupply;    //ÊÇ·ñÊ¹ÓÃ»ÃÏóµçÔ´¹©µç(ÒôÆµÊäÈëÍ¨µÀÎªMICÊ±ÓÐÐ§)£¬0-ÎÞÒâÒå£¬1-²»¹©µç£¬2-¹©µç
    BYTE    byEnableAEC;    //ÊÇ·ñÆôÓÃÈ«¾ÖµÄ»ØÉùÏû³ý,0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE    byRes1[2];
    BYTE    byEnableFBC[MAX_AUDIOOUT_PRO_TYPE];    //ÊÇ·ñÆôÓÃFBC(Ð¥½ÐÒÖÖÆ),0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE    byRes[20];     //±£Áô
}NET_DVR_VOLUME_CFG,*LPNET_DVR_VOLUME_CFG;

typedef struct tagNET_DVR_VIDEOOUT_RESOLUTION_CFG  //ÊÓÆµÊä³ö¿Ú·Ö±æÂÊÅäÖÃ
{
    DWORD       dwSize;    //½á¹¹Ìå´óÐ¡
    BYTE         byResolution;     //·Ö±æÂÊ 0-1024x768, 1-1280x720,  2-1280x1024,  3-1680x1050, 4-1920x1080
    BYTE         byRes[63];
}NET_DVR_VIDEOOUT_RESOLUTION_CFG, *LPNET_DVR_VIDEOOUT_RESOLUTION_CFG;

typedef struct tagNET_DVR_ADDR_DOMAIN_INFO
{
    BYTE   szDomainAddr[MAX_DOMAIN_NAME];  /* Ö÷»úIPµØÖ·»òÕßÓòÃû,ÐèÒªÉè±¸½âÎö,½âÎö·½Ê½ÎªÓÐ×ÖÄ¸´æÔÚÇÒÓÐ'.'ÔòÈÏÎªÊÇÓòÃû,·ñÔòÎªIPµØÖ·  */
    WORD   wPort;
    BYTE   byRes[2];
}NET_DVR_ADDR_DOMAIN_INFO,*LPNET_DVR_ADDR_DOMAIN_INFO;

#define MAX_CENTERNUM_V40     6    //±¨¾¯ÖÐÐÄµØÖ·¸öÊý

//±¨¾¯ÖÐÐÄÍøÂçÅäÖÃ
typedef struct tagNET_DVR_ALARMCENTER_NETCFG
{
    DWORD    dwSize;
    BYTE    byAuxiliaryAlarmAddr[MAX_DOMAIN_NAME];  /* ¸¨±¨¾¯Ö÷»úIPµØÖ·»òÕßÓòÃû,ÐèÒªÉè±¸½âÎö,½âÎö·½Ê½ÎªÓÐ×ÖÄ¸´æÔÚÇÒÓÐ¡¯.¡¯ÔòÈÏÎªÊÇÓòÃû,·ñÔòÎªIPµØÖ· */
    WORD    wAuxiliaryAlarmPort;     /* ¸¨±¨¾¯Ö÷»ú¶Ë¿ÚºÅ */
    NET_DVR_ADDR_DOMAIN_INFO struHostAddr[MAX_CENTERNUM_V40]; //±¨¾¯ÖÐÐÄµØÖ·ÐÅÏ¢
    BYTE    byRes[172];
}NET_DVR_ALARMCENTER_NETCFG, *LPNET_DVR_ALARMCENTER_NETCFG;

//À×´ïµ÷ÊÔ±¨¾¯ÉÏ´« ×¥ÅÄ»ú4.0ÐÂÔö
typedef struct tagNET_DVR_ALARM_RADARINFO
{
    DWORD             dwSize;
    DWORD             dwRadarTriggerTimeSecond;//À×´ï´¥·¢Ê±¼ä£¬Ãë
    DWORD             dwRadarTriggerTimeMSecond;//À×´ï´¥·¢Ê±¼ä£¬ºÁÃë
    DWORD             dwVedioTriggerTimeSecond;//ÊÓÆµ´¥·¢Ê±¼ä£¬Ãë
    DWORD             dwVedioTriggerTimeMSecond;//ÊÓÆµ´¥·¢Ê±¼ä£¬ºÁÃë
    DWORD             dwVedioRadarDiffTimeMSecond;//À×´ïÊÓÆµ´¥·¢Ê±¼ä²î£¬ºÁÃë
    DWORD             dwRadarSpeed;//À×´ïËÙ¶È
    BYTE              byRes[16];
} NET_DVR_ALARM_RADARINFO, *LPNET_DVR_ALARM_RADARINFO;

#define MAX_FINGER_PRINT_LEN            768  //×î´óÖ¸ÎÆ³¤¶È
typedef struct tagNET_DVR_FINGER_PRINT_CFG
{
    DWORD       dwSize;
    BYTE  byCardNo[ACS_CARD_NO_LEN]; //Ö¸ÎÆ¹ØÁªµÄ¿¨ºÅ 
    DWORD dwFingerPrintLen;     //Ö¸ÎÆÊý¾Ý³¤¶È
    BYTE  byEnableCardReader[MAX_CARD_READER_NUM_512];  //ÐèÒªÏÂ·¢Ö¸ÎÆµÄ¶Á¿¨Æ÷£¬°´Êý×é±íÊ¾£¬0-²»ÏÂ·¢¸Ã¶Á¿¨Æ÷£¬1-ÏÂ·¢µ½¸Ã¶Á¿¨Æ÷
    BYTE  byFingerPrintID;     //Ö¸ÎÆ±àºÅ£¬ÓÐÐ§Öµ·¶Î§Îª1-10
    BYTE  byFingerType;       //Ö¸ÎÆÀàÐÍ  0-ÆÕÍ¨Ö¸ÎÆ£¬1-Ð²ÆÈÖ¸ÎÆ
    BYTE  byRes1[30];
    BYTE  byFingerData[MAX_FINGER_PRINT_LEN];        //Ö¸ÎÆÊý¾ÝÄÚÈÝ
    BYTE  byRes[64];
}NET_DVR_FINGER_PRINT_CFG,*LPNET_DVR_FINGER_PRINT_CFG;

typedef struct tagNET_DVR_FINGER_PRINT_STATUS
{
    DWORD       dwSize;
    BYTE  byCardNo[ACS_CARD_NO_LEN]; //Ö¸ÎÆ¹ØÁªµÄ¿¨ºÅ
    BYTE  byCardReaderRecvStatus[MAX_CARD_READER_NUM_512];  //Ö¸ÎÆ¶Á¿¨Æ÷×´Ì¬£¬°´×Ö½Ú±íÊ¾£¬0-Ê§°Ü£¬1-³É¹¦£¬2-¸ÃÖ¸ÎÆÄ£×é²»ÔÚÏß£¬3-ÖØÊÔ»òÖ¸ÎÆÖÊÁ¿²î£¬4-ÄÚ´æÒÑÂú£¬5-ÒÑ´æÔÚ¸ÃÖ¸ÎÆ£¬6-ÒÑ´æÔÚ¸ÃÖ¸ÎÆID£¬7-·Ç·¨Ö¸ÎÆID£¬8-¸ÃÖ¸ÎÆÄ£×éÎÞÐèÅäÖÃ
    BYTE  byFingerPrintID;     //Ö¸ÎÆ±àºÅ£¬ÓÐÐ§Öµ·¶Î§Îª1-10
    BYTE  byFingerType;       //Ö¸ÎÆÀàÐÍ  0-ÆÕÍ¨Ö¸ÎÆ£¬1-Ð²ÆÈÖ¸ÎÆ
    BYTE  byTotalStatus;  //ÏÂ·¢×ÜµÄ×´Ì¬£¬0-µ±Ç°Ö¸ÎÆÎ´ÏÂÍêËùÓÐ¶Á¿¨Æ÷£¬1-ÒÑÏÂÍêËùÓÐ¶Á¿¨Æ÷(ÕâÀïµÄËùÓÐÖ¸µÄÊÇÃÅ½ûÖ÷»úÍùËùÓÐµÄ¶Á¿¨Æ÷ÏÂ·¢ÁË£¬²»¹Ü³É¹¦Óë·ñ)
    BYTE  byRes1;
    BYTE  byErrorMsg[ERROR_MSG_LEN]; //ÏÂ·¢´íÎóÐÅÏ¢£¬µ±byCardReaderRecvStatusÎª5Ê±£¬±íÊ¾ÒÑ´æÔÚÖ¸ÎÆ¶ÔÓ¦µÄ¿¨ºÅ
    DWORD dwCardReaderNo;  //ÎÆ¶Á¿¨Æ÷±àºÅ£¬¿ÉÓÃÓÚÏÂ·¢´íÎó·µ»Ø
    BYTE  byRes[24];
}NET_DVR_FINGER_PRINT_STATUS,*LPNET_DVR_FINGER_PRINT_STATUS;


typedef struct tagNET_DVR_FINGER_PRINT_INFO_COND
{
    DWORD       dwSize;
    BYTE  byCardNo[ACS_CARD_NO_LEN]; //Ö¸ÎÆ¹ØÁªµÄ¿¨ºÅ
    BYTE  byEnableCardReader[MAX_CARD_READER_NUM_512];  //Ö¸ÎÆµÄ¶Á¿¨Æ÷ÐÅÏ¢£¬°´Êý×é±íÊ¾
    DWORD dwFingerPrintNum; //ÉèÖÃ»ò»ñÈ¡¿¨ÊýÁ¿£¬»ñÈ¡Ê±ÖÃÎª0xffffffff±íÊ¾»ñÈ¡ËùÓÐ¿¨ÐÅÏ¢
    BYTE  byFingerPrintID;     //Ö¸ÎÆ±àºÅ£¬ÓÐÐ§Öµ·¶Î§Îª-10   0xff±íÊ¾¸Ã¿¨ËùÓÐÖ¸ÎÆ
    BYTE  byCallbackMode;     //Éè±¸»Øµ÷·½Ê½£¬0-Éè±¸ËùÓÐ¶Á¿¨Æ÷ÏÂÍêÁË·¶Î§£¬1-ÔÚÊ±¼ä¶ÎÄÚÏÂÁË²¿·ÖÒ²·µ»Ø
    BYTE  byRes1[26];          //±£Áô
}NET_DVR_FINGER_PRINT_INFO_COND,*LPNET_DVR_FINGER_PRINT_INFO_COND;

typedef struct tagNET_DVR_FINGER_PRINT_BYCARD
{
    BYTE  byCardNo[ACS_CARD_NO_LEN]; //Ö¸ÎÆ¹ØÁªµÄ¿¨ºÅ 
    BYTE  byEnableCardReader[MAX_CARD_READER_NUM_512];  //Ö¸ÎÆµÄ¶Á¿¨Æ÷ÐÅÏ¢£¬°´Êý×é±íÊ¾
    BYTE  byFingerPrintID[MAX_FINGER_PRINT_NUM/*10*/];        //ÐèÒª»ñÈ¡µÄÖ¸ÎÆÐÅÏ¢£¬°´Êý×éÏÂ±ê£¬Öµ±íÊ¾0-²»É¾³ý£¬1-É¾³ý¸ÃÖ¸ÎÆ
    BYTE  byRes1[34];          //±£Áô
}NET_DVR_FINGER_PRINT_BYCARD,*LPNET_DVR_FINGER_PRINT_BYCARD;

typedef struct tagNET_DVR_FINGER_PRINT_BYREADER
{
    DWORD dwCardReaderNo;  //°´Öµ±íÊ¾£¬Ö¸ÎÆ¶Á¿¨Æ÷±àºÅ
    BYTE  byClearAllCard;  //ÊÇ·ñÉ¾³ýËùÓÐ¿¨µÄÖ¸ÎÆÐÅÏ¢£¬0-°´¿¨ºÅÉ¾³ýÖ¸ÎÆÐÅÏ¢£¬1-É¾³ýËùÓÐ¿¨µÄÖ¸ÎÆÐÅÏ¢
    BYTE  byRes1[3];       //±£Áô
    BYTE  byCardNo[ACS_CARD_NO_LEN]; //Ö¸ÎÆ¹ØÁªµÄ¿¨ºÅ 
    BYTE  byRes[548];          //±£Áô
}NET_DVR_FINGER_PRINT_BYREADER,*LPNET_DVR_FINGER_PRINT_BYREADER;

typedef union tagNET_DVR_DEL_FINGER_PRINT_MODE
{
    BYTE   uLen[588];   //ÁªºÏÌå³¤¶È
    NET_DVR_FINGER_PRINT_BYCARD       struByCard;     //°´¿¨ºÅµÄ·½Ê½É¾³ý
    NET_DVR_FINGER_PRINT_BYREADER     struByReader;   //°´¶Á¿¨Æ÷µÄ·½Ê½É¾³ý
}NET_DVR_DEL_FINGER_PRINT_MODE,*LPNET_DVR_DEL_FINGER_PRINT_MODE;

typedef struct tagNET_DVR_FINGER_PRINT_INFO_CTRL
{
    DWORD       dwSize;
    BYTE  byMode;          //É¾³ý·½Ê½£¬0-°´¿¨ºÅ·½Ê½É¾³ý£¬1-°´¶Á¿¨Æ÷É¾³ý
    BYTE  byRes1[3];       //±£Áô
    NET_DVR_DEL_FINGER_PRINT_MODE struProcessMode;  //´¦Àí·½Ê½
    BYTE  byRes[64];          //±£Áô
}NET_DVR_FINGER_PRINT_INFO_CTRL,*LPNET_DVR_FINGER_PRINT_INFO_CTRL;

typedef enum _ACS_DEV_SUBEVENT_ENUM_
{
    EVENT_ACS_HOST_ANTI_DISMANTLE = 0,      //Ö÷»ú·À²ð±¨¾¯
    EVENT_ACS_OFFLINE_ECENT_NEARLY_FULL,    //ÀëÏßÊÂ¼þÂú90%±¨¾¯
    EVENT_ACS_NET_BROKEN,                   //ÍøÂç¶Ï¿ª
    EVENT_ACS_NET_RESUME ,                  //ÍøÂç»Ö¸´
    EVENT_ACS_LOW_BATTERY,                  //Ðîµç³ØµçÑ¹µÍ
    EVENT_ACS_BATTERY_RESUME,               //Ðîµç³ØµçÑ¹»Ö¸´Õý³£
    EVENT_ACS_AC_OFF,                       //½»Á÷µç¶Ïµç
    EVENT_ACS_AC_RESUME,                    //½»Á÷µç»Ö¸´
    EVENT_ACS_SD_CARD_FULL,                 //SD¿¨´æ´¢Âú±¨¾¯
    EVENT_ACS_LINKAGE_CAPTURE_PIC           //Áª¶¯×¥ÅÄÊÂ¼þ±¨¾¯
}ACS_DEV_SUBEVENT_ENUM;

typedef enum _ACS_ALARM_SUBEVENT_ENUM_
{
    EVENT_ACS_ALARMIN_SHORT_CIRCUIT = 0,    //·ÀÇø¶ÌÂ·±¨¾¯
    EVENT_ACS_ALARMIN_BROKEN_CIRCUIT,       //·ÀÇø¶ÏÂ·±¨¾¯
    EVENT_ACS_ALARMIN_EXCEPTION,            //·ÀÇøÒì³£±¨¾¯
    EVENT_ACS_ALARMIN_RESUME,               //·ÀÇø±¨¾¯»Ö¸´
    EVENT_ACS_CASE_SENSOR_ALARM,            //ÊÂ¼þÊäÈë±¨¾¯
    EVENT_ACS_CASE_SENSOR_RESUME            //ÊÂ¼þÊäÈë»Ö¸´
}ACS_ALARM_SUBEVENT_ENUM;

typedef enum _ACS_DOOR_SUBEVENT_ENUM_
{
    EVENT_ACS_LEADER_CARD_OPEN_BEGIN  = 0,        //Ê×¿¨¿ªÃÅ¿ªÊ¼
    EVENT_ACS_LEADER_CARD_OPEN_END,             //Ê×¿¨¿ªÃÅ½áÊø
    EVENT_ACS_ALWAYS_OPEN_BEGIN ,               //³£¿ª×´Ì¬¿ªÊ¼
    EVENT_ACS_ALWAYS_OPEN_END,                  //³£¿ª×´Ì¬½áÊø
    EVENT_ACS_ALWAYS_CLOSE_BEGIN,               //³£¹Ø×´Ì¬¿ªÊ¼
    EVENT_ACS_ALWAYS_CLOSE_END,                 //³£¹Ø×´Ì¬½áÊø
    EVENT_ACS_LOCK_OPEN,                        //ÃÅËø´ò¿ª
    EVENT_ACS_LOCK_CLOSE,                       //ÃÅËø¹Ø±Õ
    EVENT_ACS_DOOR_BUTTON_PRESS,                //¿ªÃÅ°´Å¥°´ÏÂ
    EVENT_ACS_DOOR_BUTTON_RELEASE,              //¿ªÃÅ°´Å¥·Å¿ª
    EVENT_ACS_DOOR_OPEN_NORMAL,                 //Õý³£¿ªÃÅ£¨ÃÅ´Å£©
    EVENT_ACS_DOOR_CLOSE_NORMAL ,               //Õý³£¹ØÃÅ£¨ÃÅ´Å£©
    EVENT_ACS_DOOR_OPEN_ABNORMAL,               //ÃÅÒì³£´ò¿ª£¨ÃÅ´Å£©
    EVENT_ACS_DOOR_OPEN_TIMEOUT,                //ÃÅ´ò¿ª³¬Ê±£¨ÃÅ´Å£©
    EVENT_ACS_REMOTE_OPEN_DOOR,                 //Ô¶³Ì¿ªÃÅ
    EVENT_ACS_REMOTE_CLOSE_DOOR,                //Ô¶³Ì¹ØÃÅ
    EVENT_ACS_REMOTE_ALWAYS_OPEN,               //Ô¶³Ì³£¿ª
    EVENT_ACS_REMOTE_ALWAYS_CLOSE,              //Ô¶³Ì³£¹Ø
    EVENT_ACS_NOT_BELONG_MULTI_GROUP,                   //¿¨²»ÊôÓÚ¶àÖØÈÏÖ¤Èº×é
    EVENT_ACS_INVALID_MULTI_VERIFY_PERIOD,              //¿¨²»ÔÚ¶àÖØÈÏÖ¤Ê±¼ä¶ÎÄÚ
    EVENT_ACS_MULTI_VERIFY_SUPER_RIGHT_FAIL,            //¶àÖØÈÏÖ¤Ä£Ê½³¬¼¶ÃÜÂëÈÏÖ¤Ê§°Ü
    EVENT_ACS_MULTI_VERIFY_REMOTE_RIGHT_FAIL,           //¶àÖØÈÏÖ¤Ä£Ê½Ô¶³ÌÈÏÖ¤Ê§°Ü
    EVENT_ACS_MULTI_VERIFY_SUCCESS,                     //¶àÖØÈÏÖ¤³É¹¦
    EVENT_ACS_MULTI_VERIFY_NEED_REMOTE_OPEN,            //¶àÖØ¶àÖØÈÏÖ¤ÐèÒªÔ¶³Ì¿ªÃÅ
    EVENT_ACS_MULTI_VERIFY_SUPERPASSWD_VERIFY_SUCCESS,  //¶àÖØÈÏÖ¤³¬¼¶ÃÜÂëÈÏÖ¤³É¹¦ÊÂ¼þ
    EVENT_ACS_MULTI_VERIFY_REPEAT_VERIFY_FAIL,          //¶àÖØÈÏÖ¤ÖØ¸´ÈÏÖ¤Ê§°Ü
    EVENT_ACS_MULTI_VERIFY_TIMEOUT,                     //¶àÖØÈÏÖ¤³¬Ê±Ê§°Ü
    EVENT_ACS_REMOTE_CAPTURE_PIC,                       //Ô¶³Ì×¥ÅÄ
	EVENT_ACS_DOORBELL_RINGING,                          //ÃÅÁåÏì
	EVENT_ACS_SECURITY_MODULE_DESMANTLE_ALARM,       //ÃÅ¿Ø°²È«Ä£¿é·À²ð±¨¾¯
    EVENT_ACS_CALL_CENTER                            //ºô½ÐÖÐÐÄÊÂ¼þ
}ACS_DOOR_SUBEVENT_ENUM;

typedef enum _ACS_CARD_READER_SUBEVENT_ENUM_
{
    EVENT_ACS_STRESS_ALARM = 0,                            //Ð²ÆÈ±¨¾¯
    EVENT_ACS_CARD_READER_DESMANTLE_ALARM,              //¶Á¿¨Æ÷·À²ð±¨¾¯
    EVENT_ACS_LEGAL_CARD_PASS,                          //ºÏ·¨¿¨ÈÏÖ¤Í¨¹ý
    EVENT_ACS_CARD_AND_PSW_PASS,                        //Ë¢¿¨¼ÓÃÜÂëÈÏÖ¤Í¨¹ý
    EVENT_ACS_CARD_AND_PSW_FAIL,                        //Ë¢¿¨¼ÓÃÜÂëÈÏÖ¤Ê§°Ü
    EVENT_ACS_CARD_AND_PSW_TIMEOUT,                     //Ë¢¿¨¼ÓÃÜÂëÈÏÖ¤³¬Ê±
    EVENT_ACS_CARD_MAX_AUTHENTICATE_FAIL,               //¶Á¿¨Æ÷ÈÏÖ¤Ê§°Ü³¬´Î
    EVENT_ACS_CARD_NO_RIGHT,                            //¿¨Î´·ÖÅäÈ¨ÏÞ
    EVENT_ACS_CARD_INVALID_PERIOD,                      //¿¨µ±Ç°Ê±¶ÎÎÞÐ§
    EVENT_ACS_CARD_OUT_OF_DATE,                         //¿¨ºÅ¹ýÆÚ
    EVENT_ACS_INVALID_CARD,                             //ÎÞ´Ë¿¨ºÅ
    EVENT_ACS_ANTI_SNEAK_FAIL,                          //·´Ç±»ØÈÏÖ¤Ê§°Ü
    EVENT_ACS_INTERLOCK_DOOR_NOT_CLOSE,                 //»¥ËøÃÅÎ´¹Ø±Õ
    EVENT_ACS_FINGERPRINT_COMPARE_PASS,                 //Ö¸ÎÆ±È¶ÔÍ¨¹ý
    EVENT_ACS_FINGERPRINT_COMPARE_FAIL,                 //Ö¸ÎÆ±È¶ÔÊ§°Ü
    EVENT_ACS_CARD_FINGERPRINT_VERIFY_PASS,             //Ë¢¿¨¼ÓÖ¸ÎÆÈÏÖ¤Í¨¹ý
    EVENT_ACS_CARD_FINGERPRINT_VERIFY_FAIL,             //Ë¢¿¨¼ÓÖ¸ÎÆÈÏÖ¤Ê§°Ü
    EVENT_ACS_CARD_FINGERPRINT_VERIFY_TIMEOUT,          //Ë¢¿¨¼ÓÖ¸ÎÆÈÏÖ¤³¬Ê±
    EVENT_ACS_CARD_FINGERPRINT_PASSWD_VERIFY_PASS,      //Ë¢¿¨¼ÓÖ¸ÎÆ¼ÓÃÜÂëÈÏÖ¤Í¨¹ý
    EVENT_ACS_CARD_FINGERPRINT_PASSWD_VERIFY_FAIL,      //Ë¢¿¨¼ÓÖ¸ÎÆ¼ÓÃÜÂëÈÏÖ¤Ê§°Ü
    EVENT_ACS_CARD_FINGERPRINT_PASSWD_VERIFY_TIMEOUT,   //Ë¢¿¨¼ÓÖ¸ÎÆ¼ÓÃÜÂëÈÏÖ¤³¬Ê±
    EVENT_ACS_FINGERPRINT_PASSWD_VERIFY_PASS,           //Ö¸ÎÆ¼ÓÃÜÂëÈÏÖ¤Í¨¹ý
    EVENT_ACS_FINGERPRINT_PASSWD_VERIFY_FAIL,           //Ö¸ÎÆ¼ÓÃÜÂëÈÏÖ¤Ê§°Ü
    EVENT_ACS_FINGERPRINT_PASSWD_VERIFY_TIMEOUT,        //Ö¸ÎÆ¼ÓÃÜÂëÈÏÖ¤³¬Ê±
    EVENT_ACS_FINGERPRINT_INEXISTENCE                   //Ö¸ÎÆ²»´æÔÚ
}ACS_CARD_READER_SUBEVENT_ENUM;

typedef struct tagNET_DVR_EVENT_LINKAGE_INFO
{
    WORD          wMainEventType;                     //ÊÂ¼þÖ÷ÀàÐÍ£¬0-Éè±¸ÊÂ¼þ£¬1-±¨¾¯ÊäÈëÊÂ¼þ£¬2-ÃÅÊÂ¼þ£¬3-¶Á¿¨Æ÷ÊÂ¼þ
    WORD          wSubEventType;                      //ÊÂ¼þ´ÎÀàÐÍ
    BYTE          byRes[28];
}NET_DVR_EVENT_LINKAGE_INFO,*LPNET_DVR_EVENT_LINKAGE_INFO;

typedef  union tagNET_DVR_EVETN_CARD_LINKAGE_UNION
{
    BYTE                           byCardNo[ACS_CARD_NO_LEN];          //¿¨ºÅ
    NET_DVR_EVENT_LINKAGE_INFO  struEventLinkage;                   //ÊÂ¼þÁª¶¯Ê±²ÎÊý
}NET_DVR_EVETN_CARD_LINKAGE_UNION,*LPNET_DVR_EVETN_CARD_LINKAGE_UNION;

typedef struct tagNET_DVR_EVENT_CARD_LINKAGE_CFG
{
    DWORD            dwSize;    //½á¹¹Ìå´óÐ¡
    BYTE              byProMode;                          //Áª¶¯·½Ê½£¬0-ÊÂ¼þ£¬1-¿¨ºÅ   
    BYTE            byRes1[3];
    DWORD           dwEventSourceID;                    //ÊÂ¼þÔ´ID£¬µ±Ö÷ÀàÐÍÎªÉè±¸ÊÂ¼þÊ±ÎÞÐ§£¬ µ±Ö÷ÀàÐÍÊÇÃÅÊÂ¼þÊ±ÎªÃÅ±àºÅ;µ±Ö÷ÀàÐÍÎª¶Á¿¨Æ÷ÊÂ¼þÊ±£¬Îª¶Á¿¨Æ÷ID;µ±Îª±¨¾¯ÊäÈëÊÂ¼þÊ±Îª·ÀÇø±¨¾¯ÊäÈëID»òÊÂ¼þ±¨¾¯ÊäÈëID
    NET_DVR_EVETN_CARD_LINKAGE_UNION     uLinkageInfo;  //Áª¶¯·½Ê½²ÎÊý
    BYTE           byAlarmout[MAX_ALARMHOST_ALARMOUT_NUM];            //¹ØÁªµÄ±¨¾¯Êä³öºÅ£¬°´Êý×é±íÊ¾£¬Îª0±íÊ¾²»¹ØÁª£¬Îª1±íÊ¾¹ØÁª
    BYTE           byRes2[32];                         //±£Áô
    BYTE           byOpenDoor[MAX_DOOR_NUM_256];     //°´Êý×é±íÊ¾,ÊÇ·ñÁª¶¯¿ªÃÅ£¬0-²»Áª¶¯£¬1-Áª¶¯
    BYTE           byCloseDoor[MAX_DOOR_NUM_256];    //°´Êý×é±íÊ¾,ÊÇ·ñÁª¶¯¹ØÃÅ£¬0-²»Áª¶¯£¬1-Áª¶¯
    BYTE           byNormalOpen[MAX_DOOR_NUM_256];   //°´Êý×é±íÊ¾,ÊÇ·ñÁª¶¯³£¿ª£¬0-²»Áª¶¯£¬1-Áª¶¯
    BYTE           byNormalClose[MAX_DOOR_NUM_256];  //°´Êý×é±íÊ¾,ÊÇ·ñÁª¶¯³£¹Ø£¬0-²»Áª¶¯£¬1-Áª¶¯
    BYTE           byMainDevBuzzer;                    //Ö÷»ú·äÃùÆ÷   0-²»Áª¶¯£¬1-Áª¶¯Êä³ö
    BYTE           byCapturePic;                           //ÊÇ·ñÁª¶¯×¥ÅÄ£¬0-²»Áª¶¯×¥ÅÄ£¬1-Áª¶¯×¥ÅÄ
    BYTE           byRecordVideo;                          //ÊÇ·ñÁª¶¯Â¼Ïñ£¬0-²»Áª¶¯Â¼Ïñ£¬1-Áª¶¯Â¼Ïñ
    BYTE           byRes3[29];                         //±£Áô
    BYTE           byReaderBuzzer[MAX_CARD_READER_NUM_512]; //Áª¶¯¶Á¿¨Æ÷·äÃùÆ÷£¬°´Êý×é±íÊ¾£¬0-²»Áª¶¯£¬1-Áª¶¯
    BYTE           byRes[128];                           //±£Áô
}NET_DVR_EVENT_CARD_LINKAGE_CFG,*LPNET_DVR_EVENT_CARD_LINKAGE_CFG;

typedef struct tagNET_DVR_ANTI_SNEAK_HOST_INFO
{
    NET_DVR_ADDRESS   struDVRIP;     //Ö÷»úIPµØÖ·
    BYTE   byIsStartAddr; //ÊÇ·ñÎª¿ªÊ¼µØÖ·£¬0-·ñ£¬1-ÊÇ
    BYTE   byHostNo;      //Ö÷»ú±àºÅ£¬1-8£¬Ö÷ÒªÓÃÓÚ¶Á¿¨Æ÷Ë³ÐòÉèÖÃ
    BYTE   byRes[34];     //±£Áô
}NET_DVR_ANTI_SNEAK_HOST_INFO,*LPNET_DVR_ANTI_SNEAK_HOST_INFO;

typedef struct tagNET_DVR_ANTI_SNEAK_HOST_READER_INFO
{
    BYTE  byAntiSnealHostNo;   //·´Ç±»ØÖ÷»ú±àºÅ
    BYTE  byRes[5];           //±£Áô
    WORD wFollowUpCardReader; //¸Ã·´Ç±»ØÖ÷»úÏÂµÄ¶Á¿¨Æ÷±àºÅ
}NET_DVR_ANTI_SNEAK_HOST_READER_INFO, *LPNET_DVR_ANTI_SNEAK_HOST_READER_INFO;

typedef struct tagNET_DVR_ANTI_SNEAK_MULTI_HOST_CFG
{
    DWORD       dwSize;
    BYTE byEnable; //ÊÇ·ñ¼ÓÈë·´Ç±»ØÂ·¾¶£¬1-¼ÓÈë£¬0-²»¼ÓÈë
    BYTE byRes1[3];
    NET_DVR_ANTI_SNEAK_HOST_INFO struSneakHost[MAX_SNEAK_PATH_NODE]; //ºóÐøÖ÷»úµØÖ·ÐÅÏ¢
    NET_DVR_ANTI_SNEAK_HOST_READER_INFO struStartReader;  //ÆðÊ¼¶Á¿¨Æ÷±àºÅ µ±¸ÃÄÚÈÝÈ«Îª0Ê±£¬±íÊ¾²»¹Ø×¢´ÓÄÄ¸ö¶Á¿¨Æ÷¿ªÊ¼
    BYTE byRes2[128];
}NET_DVR_ANTI_SNEAK_MULTI_HOST_CFG, *LPNET_DVR_ANTI_SNEAK_MULTI_HOST_CFG;

typedef struct tagNET_DVR_ANTI_SNEAK_READER_CFG
{
    BYTE         byEnable;             //ÊÇ·ñ¼ÓÈë·´Ç±»ØÂ·¾¶£¬1-¼ÓÈë£¬0-²»¼ÓÈë
    BYTE          byAntiSnealHostNo;   //·´Ç±»ØÖ÷»ú±àºÅ
    WORD         wReaderID;              //¶Á¿¨Æ÷ID
    NET_DVR_ANTI_SNEAK_HOST_READER_INFO struSneakReaderInfo[MAX_SNEAK_PATH_NODE]; //ºóÐøÖ÷»ú¶Á¿¨Æ÷±àºÅ
    BYTE byRes2[8];
}NET_DVR_ANTI_SNEAK_READER_CFG, *LPNET_DVR_ANTI_SNEAK_READER_CFG;

typedef struct tagNET_DVR_ANTI_SNEAK_MULTI_HOST_READERS_CFG
{
    DWORD           dwSize;
    NET_DVR_ANTI_SNEAK_READER_CFG struReaderCfg[MAX_READER_ROUTE_NUM];  //¶Á¿¨Æ÷ÐÅÏ¢
    BYTE            byRes[128];
}NET_DVR_ANTI_SNEAK_MULTI_HOST_READERS_CFG, *LPNET_DVR_ANTI_SNEAK_MULTI_HOST_READERS_CFG;

typedef struct tagNET_DVR_ACS_CFG
{
    DWORD           dwSize;            //½á¹¹Ìå´óÐ¡
    BYTE            byRS485Backup;  //ÊÇ·ñÆôÓÃÏÂÐÐRS485Í¨ÐÅ±¸·Ý¹¦ÄÜ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE            byShowCapPic;    //ÊÇ·ñÏÔÊ¾×¥ÅÄÍ¼Æ¬£¬ 0-²»ÏÔÊ¾£¬1-ÏÔÊ¾
    BYTE            byShowCardNo;    //ÊÇ·ñÏÔÊ¾¿¨ºÅ£¬0-²»ÏÔÊ¾£¬1-ÏÔÊ¾
    BYTE            byShowUserInfo;  //ÊÇ·ñÏÔÊ¾ÓÃ»§ÐÅÏ¢£¬0-²»ÏÔÊ¾£¬1-ÏÔÊ¾
    BYTE            byOverlayUserInfo;//ÊÇ·ñµþ¼ÓÓÃ»§ÐÅÏ¢£¬0-²»µþ¼Ó£¬1-µþ¼Ó
    BYTE            byVoicePrompt;  //ÊÇ·ñÆôÓÃÓïÒôÌáÊ¾£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE             byUploadCapPic;     //Áª¶¯×¥ÅÄÊÇ·ñÉÏ´«Í¼Æ¬£¬0-²»ÉÏ´«£¬1-ÉÏ´«
    BYTE             bySaveCapPic;    //ÊÇ·ñ±£´æ×¥ÅÄÍ¼Æ¬£¬0-²»±£´æ£¬1-±£´æ
    BYTE            byInputCardNo;  //ÊÇ·ñÊÇ·ñÔÊÐí°´¼üÊäÈë¿¨ºÅ£¬0-²»ÔÊÐí£¬1-ÔÊÐí
    BYTE byRes[503];
}NET_DVR_ACS_CFG, *LPNET_DVR_ACS_CFG;

typedef struct tagNET_DVR_PLATFORM_VERIFY_CFG
{
    DWORD       dwSize;
    DWORD        dwDoorNo; //ÃÅ±àºÅ
    BYTE        byResultType; //ÈÏÖ¤½á¹ûÀàÐÍ£¬0£º·Ç·¨£¬1£ººÏ·¨
    BYTE        byRes1[3];
    BYTE        byScreenDisplay[MAX_SCREEN_DISPLAY_LEN]; //LEDÆÁÄ»ÏÔÊ¾£¬ÓÃÓÚÏÔÊ¾ÈÏÖ¤Ïà¹ØÐÅÏ¢
    BYTE        byRes[300];                  // ±£Áô×Ö½Ú
}NET_DVR_PLATFORM_VERIFY_CFG, *LPNET_DVR_PLATFORM_VERIFY_CFG;

typedef struct tagNET_DVR_PERSON_STATISTICS_CFG
{
    DWORD dwSize;
    BYTE byEnableStatistics;  //ÊÇ·ñ¿ªÆôÈËÊýÍ³¼Æ£¬0£º²»¿ªÆô£»1£º¿ªÆô£»
    BYTE byEnableOfflineStatistics;  //ÊÇ·ñ¿ªÆôÀëÏßÈËÊýÍ³¼Æ£¬0£º²»¿ªÆô£»1£º¿ªÆô£»
    BYTE byRes[606];
}NET_DVR_PERSON_STATISTICS_CFG, *LPNET_DVR_PERSON_STATISTICS_CFG;

typedef struct tagNET_DVR_ACS_SCREEN_DISPLAY_CFG
{
    DWORD dwSize;
    DWORD dwFontSize;  //×ÖÌå´óÐ¡£¬[1,10]£»
    DWORD dwRowSpacing;  //ÐÐ¼ä¾à£¬µ¥Î»£ºÏñËØµã£»
    DWORD dwColumnSpacing;  //ÁÐ¼ä¾à£¬µ¥Î»£ºÏñËØµã£»
    DWORD dwFirstRowPosition;  //ÆðÊ¼ÐÐÎ»ÖÃÔÚÆÁÄ»ÄÄÒ»¸ö·Ö¿é£¬0£º0¡¢ 1£º1/8:¡¢ 2£º2/8¡¢ 3£º3/8¡¢ 4£º4/8¡¢ 5£º5/8¡¢ 6£º6/8:¡¢ 7£º7/8£»
    BYTE byDegree;  //×Ö·ûÏÔÊ¾·½Ïò½Ç¶È£¬0-0¶È£¨Õý³££©£¬1-90¶È£¨²à×Å£©£»
    BYTE byScreenType;  //ÆÁÄ»ÀàÐÍ£¬0-DC48270RS043_01T£¬1-DC80480B070_03T£»
    BYTE byRes[306];
}NET_DVR_ACS_SCREEN_DISPLAY_CFG, *LPNET_DVR_ACS_SCREEN_DISPLAY_CFG;

typedef struct tagNET_DVR_GATE_TIME_CFG
{
    DWORD dwSize;
    DWORD dwHoldOnALarmTime;  //ÑÓÐø±¨¾¯Æ÷·äÃùÊ±¼ä£¬µ¥Î»ms
    DWORD dwHoldOnGateOpenTime;  //Õ¢ÃÅÊÕµ½¹Ø±ÕÃüÁîÇ°¼ÌÐø±£³Ö´ò¿ª×´Ì¬Ê±¼ä£¬µ¥Î»ms
    DWORD dwPostponeIntrusionAlarmTime;  //ÍÆ³Ù´¥·¢´³ÈëÆÛÆ­ÐÐÎª±¨¾¯Ê±¼ä£¬µ¥Î»ms
    DWORD dwNoLaneAccessTimeLimitTime;  //Í¨µÀÊÕµ½ÓÐÐ§Í¨ÐÐÈÏÖ¤ÐÅºÅ£¬µ«ÎÞÈËÍ¨ÐÐ³¬Ê±±¨¾¯Ê±¼ä£¬µ¥Î»s
    DWORD dwSafetyZoneStayTime;  //Í¨µÀÊÕµ½ÓÐÐ§Í¨ÐÐÈÏÖ¤ÐÅºÅ£¬³Ë¿Íµ½´ï°²È«ÇøºóÖÍÁôÍ¨µÀ³¬Ê±±¨¾¯Ê±¼ä£¬µ¥Î»s
    BYTE byRes[300];
}NET_DVR_GATE_TIME_CFG, *LPNET_DVR_GATE_TIME_CFG;


typedef struct tagNET_DVR_CARD_PASSWD_CFG
{
    DWORD dwSize; 
    BYTE byCardNo[ACS_CARD_NO_LEN]; //¿¨ºÅ
    BYTE byCardPassword[CARD_PASSWORD_LEN]; //¿¨ÃÜÂë
    DWORD dwErrorCode; //»ñÈ¡¿¨ÃÜÂë¿ªÃÅÊ¹ÄÜÅäÖÃ·µ»ØµÄ´íÎóÂë£¬³É¹¦Îª0£¬Ê§°Ü·µ»Ø´íÎóÂë
    BYTE byCardValid; //¿¨ÊÇ·ñÓÐÐ§£¬0-ÎÞÐ§£¬1-ÓÐÐ§£¨ÓÃÓÚÉ¾³ý¿¨£¬ÉèÖÃÊ±ÖÃÎª0½øÐÐÉ¾³ý£¬»ñÈ¡Ê±´Ë×Ö¶ÎÊ¼ÖÕÎª1£©
    BYTE byRes2[23];
}NET_DVR_CARD_PASSWD_CFG, *LPNET_DVR_CARD_PASSWD_CFG;

typedef struct tagNET_DVR_CARD_PASSWD_STATUS
{
    DWORD dwSize; 
    BYTE byCardNo[ACS_CARD_NO_LEN]; //¿¨ºÅ
    DWORD dwErrorCode; //·¢ËÍ¿¨ÃÜÂë¿ªÃÅÊ¹ÄÜÅäÖÃ·µ»ØµÄ´íÎóÂë£¬³É¹¦Îª0£¬Ê§°Ü·µ»Ø´íÎóÂë 
    BYTE byRes2[24];
}NET_DVR_CARD_PASSWD_STATUS, *LPNET_DVR_CARD_PASSWD_STATUS;

//Ìõ¼þ½á¹¹
typedef struct tagNET_DVR_VEHICLE_RECOG_COND
{
    DWORD  dwSize;
    DWORD  dwChannel;
    BYTE   byRes[64];
} NET_DVR_VEHICLE_RECOG_COND, *LPNET_DVR_VEHICLE_RECOG_COND;

//²ÎÊý½á¹¹
typedef struct tagNET_DVR_VEHICLE_RECOG_CFG
{
    DWORD  dwSize;
    //Êý¾ÝÁ÷Ë®ºÅ ºÍ£¨ÉÏ´«Êý¾ÝNET_DVR_VEHICLE_RECOG_RESULTÖÐµÄ×Ö¶ÎsDataIndex¶ÔÓ¦£©
    char   sDataIndex[DATA_INDEX_LEN];
    //ÈÎÎñ´¦ÀíºÅ ºÍ (ÉÏ´«Êý¾ÝNET_DVR_VEHICLE_RECOG_RESULTÖÐµÄ×Ö¶ÎdwTaskNo¶ÔÓ¦)
    WORD  wTaskNo;
    BYTE  byRes1[2];
    NET_VCA_RECT  struPlateRect;//³µÅÆÎ»ÖÃ
    char  sLicense[MAX_LICENSE_LEN/*16*/];//³µÅÆºÅÂë
    /*
    ³µÁ¾Í¼Æ¬¶þ´ÎÊ¶±ð²Ù×÷
    bit0-³µÅÆÊ¶±ð£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£» 
    bit1-³µÁ¾ÀàÐÍÊ¶±ð£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit2-³µÉíÑÕÉ«Ê¶±ð£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit3-³µÁ¾Æ·ÅÆÊ¶±ð£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit4-ÕÚµ²°åÊ¶±ð(Ö÷¼ÝÊ»)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit5-°²È«´øÊ¶±ð(Ö÷¼ÝÊ»)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit6-ÕÚµ²°åÊ¶±ð(¸±¼ÝÊ»)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit7-°²È«´øÊ¶±ð(¸±¼ÝÊ»)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit8-³µÁ¾Í¼Æ¬µþ¼ÓÊ¹ÄÜ£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit9-ÉÏ´«³µÁ¾Í¼Æ¬Ê¹ÄÜ(Í¨¹ýSDK)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit10-ÉÏ´«³µÁ¾Í¼Æ¬Ê¹ÄÜ(Í¨¹ýURL)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit11-»Æ±ê³µ£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit12-´òÊÖ»ú£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    */
    DWORD  dwRecogOperate;
    /*
    ³µÁ¾Í¼Æ¬Êý¾ÝÉÏ´«
    bit0-³µÅÆÍ¼Æ¬£º0-²»ÉÏ´«£¬1-ÉÏ´«£» 
    bit1-³µÁ¾Í¼Æ¬£º0-²»ÉÏ´«£¬1-ÉÏ´«£»
    bit2-ÈËÁ³×ÓÍ¼(Ö÷¼ÝÊ»)£º0-²»ÉÏ´«£¬1-ÉÏ´«£»
    bit3-ÈËÁ³×ÓÍ¼(¸±¼ÝÊ»)£º0-²»ÉÏ´«£¬1-ÉÏ´«£»
    bit4-°²È«´ø×ÓÍ¼(Ö÷¼ÝÊ»)£º0-²»ÉÏ´«£¬1-ÉÏ´«£»
    bit5-°²È«´ø×ÓÍ¼(¸±¼ÝÊ»)£º0-²»ÉÏ´«£¬1-ÉÏ´«£»
    */
    DWORD  dwDataUploadType;
    BYTE   byRes[131];
    BYTE   byPicDataType;//Í¼Æ¬Êý¾ÝÀàÐÍ£¬0-Í¼Æ¬Êý¾Ý£¬1-URL
    //Í¼Æ¬Êý¾Ý
    //µ±byPicDataType == 0µÄÊ±ºò£¬¸Ã×Ö¶ÎÄÚµÄÊý¾ÝÎÞÐ§£¬Í¼Æ¬Êý¾ÝÔÚ½á¹¹ÌåºóÃæ
    //µ±byPicDataType == 1µÄÊ±ºò£¬ÊÇÖ¸¶¨µÄÍ¼Æ¬µÄURLÐÅÏ¢
    char  sPicDataPath[256];
}NET_DVR_VEHICLE_RECOG_CFG, *LPNET_DVR_VEHICLE_RECOG_CFG;

//Ìõ¼þ½á¹¹
typedef struct tagNET_DVR_VEHICLE_RECOG_TASK_COND
{
    DWORD  dwSize;
    DWORD  dwChannel; //Í¨µÀºÅ
    char   sDataIndex[DATA_INDEX_LEN];//Êý¾ÝÁ÷Ë®ºÅ    È«0µÄÊ±ºò±íÊ¾»ñÈ¡È«²¿ 
    WORD  wTaskNo;//ÈÎÎñ´¦ÀíºÅ         ÖµÎª0µÄÊ±ºò±íÊ¾È«²¿ÈÎÎñ
                  /*
                  ÈÎÎñ×´Ì¬
                  bit0-Íê³É×´Ì¬µÄÈÎÎñ£º0-²»²éÑ¯£¬1-²éÑ¯£»
                  bit1-Ö´ÐÐÖÐµÄÈÎÎñ£º0-²»²éÑ¯£¬1-²éÑ¯£»
                  bit2-µÈ´ýÖÐµÄÈÎÎñ£º0-²»²éÑ¯£¬1-²éÑ¯£»
    */
    BYTE   byTask;
    BYTE   byRes[125];
}NET_DVR_VEHICLE_RECOG_TASK_COND, *LPNET_DVR_VEHICLE_RECOG_TASK_COND;

//²ÎÊý½á¹¹
typedef struct tagNET_DVR_VEHICLE_RECOG_TASK_INFO
{
    DWORD  dwSize;
    DWORD  dwChannel; //Í¨µÀºÅ
    char   sDataIndex[DATA_INDEX_LEN];//Êý¾ÝÁ÷Ë®ºÅ
    WORD  wTaskNo;//ÈÎÎñ´¦ÀíºÅ
    WORD  wTaskProgress;//ÈÎÎñÖ´ÐÐ½ø¶È£¨Êµ¼Ê½ø¶È*1000£©
    BYTE   byTaskState;//ÈÎÎñ×´Ì¬£¬0-µÈ´ýÖÐ£¬1-Ö´ÐÐÖÐ£¬2-Íê³É
    BYTE   byRes1[3];
    /*
    ³µÁ¾Í¼Æ¬¶þ´ÎÊ¶±ð²Ù×÷
    bit0-³µÅÆÊ¶±ð£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£» 
    bit1-³µÁ¾ÀàÐÍÊ¶±ð£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit2-³µÉíÑÕÉ«Ê¶±ð£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit3-³µÁ¾Æ·ÅÆÊ¶±ð£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit4-ÕÚµ²°åÊ¶±ð(Ö÷¼ÝÊ»)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit5-°²È«´øÊ¶±ð(Ö÷¼ÝÊ»)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit6-ÕÚµ²°åÊ¶±ð(¸±¼ÝÊ»)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit7-°²È«´øÊ¶±ð(¸±¼ÝÊ»)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit8-³µÁ¾Í¼Æ¬µþ¼ÓÊ¹ÄÜ£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit9-ÉÏ´«³µÁ¾Í¼Æ¬Ê¹ÄÜ(Í¨¹ýSDK)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit10-ÉÏ´«³µÁ¾Í¼Æ¬Ê¹ÄÜ(Í¨¹ýURL)£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit11-»Æ±ê³µ£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    bit12-´òÊÖ»ú£º0-²»ÆôÓÃÊ¶±ð£¬1-ÆôÓÃÊ¶±ð£»
    
    */
    DWORD  dwRecogOperate;
    BYTE   byRes[128];
}NET_DVR_VEHICLE_RECOG_TASK_INFO, *LPNET_DVR_VEHICLE_RECOG_TASK_INFO;

typedef struct tagNET_DVR_VEHICLE_RECOG_RESULT
{
    DWORD dwSize;   //½á¹¹
    //Êý¾ÝÁ÷Ë®ºÅ ºÍ£¨ÉÏ´«Êý¾ÝINTER_VEHICLE_RECOG_CONDÖÐµÄ×Ö¶ÎsDataIndex¶ÔÓ¦£©
    char   sDataIndex[DATA_INDEX_LEN];
    //ÈÎÎñ´¦ÀíºÅ ºÍ (ÉÏ´«Êý¾ÝINTER_DVR_SETUPALARM_PARAMÖÐµÄ×Ö¶ÎdwTaskNo¶ÔÓ¦ Í¬Ê± ÏÂ·¢ÈÎÎñ½á¹¹ INTER_VEHICLE_RECOG_CONDÖÐµÄ×Ö¶ÎdwTaskNo¶ÔÓ¦)
    WORD  wTaskNo; 
    BYTE   byRes[2];
    NET_VCA_RECT  struPlateRect;//³µÅÆÎ»ÖÃ
    char  sLicense[MAX_LICENSE_LEN/*16*/];//³µÅÆºÅÂë
    BYTE  byVehicleType;    //³µÁ¾ÀàÐÍ£¬²Î¿¼VTR_RESULT
    BYTE  byColorDepth;     //³µÉíÑÕÉ«ÉîÇ³£¬²Î¿¼ 0-ÉîÉ«£¬1-Ç³É«
    BYTE  byColor;         //³µÉíÑÕÉ«,  ²Î¿¼VCR_CLR_CLASS
    BYTE  byVehicleLogoRecog; //³µÁ¾Ö÷Æ·ÅÆ
    BYTE  byVehicleSubLogoRecog; //³µÁ¾×ÓÆ·ÅÆ
    BYTE  byPilotSafebelt;//0-±íÊ¾Î´Öª,1-²»Ïµ°²È«´ø,2-Ïµ°²È«´ø
    BYTE  byCopilotSafebelt;//0-±íÊ¾Î´Öª,1-²»Ïµ°²È«´ø,2-Ïµ°²È«´ø
    BYTE  byPilotSunVisor;//0-±íÊ¾Î´Öª,1-²»´ò¿ªÕÚÑô°å,2-´ò¿ªÕÚÑô°å
    BYTE  byCopilotSunVisor;//0-±íÊ¾Î´Öª, 1-²»´ò¿ªÕÚÑô°å,2-´ò¿ªÕÚÑô°å
    BYTE  byVehicleModel;// ²Î¿¼ÎÄµµ  ³µÁ¾×ÓÆ·ÅÆÄê¿î
    WORD  wVehicleLogoRecog;  //³µÁ¾Ö÷Æ·ÅÆ£¬²Î¿¼"³µÁ¾Ö÷Æ·ÅÆ.xlsx" 
    BYTE  byRes1[251];
    // 0-Êý¾ÝÖ±½ÓÉÏ´«; 1-ÔÆ´æ´¢·þÎñÆ÷URLÔ­ÏÈµÄÍ¼Æ¬Êý¾Ý±ä³ÉURLÊý¾Ý£¬Í¼Æ¬³¤¶È±ä³ÉURL³¤¶È
    BYTE  byDataType;
    /*
    ÉÏ´«Í¼Æ¬ÀàÐÍÐÅÏ¢:
    bit0-³µÁ¾Í¼£º0-²»ÉÏ´«£¬1-ÉÏ´«£» 
    bit1-³µÅÆÍ¼£º0-²»ÉÏ´«£¬1-ÉÏ´«£»
    bit2-ÈËÁ³×ÓÍ¼(Ö÷¼ÝÊ»)£º0-²»ÉÏ´«£¬1-ÉÏ´«£»
    bit3-ÈËÁ³×ÓÍ¼(¸±¼ÝÊ»)£º0-²»ÉÏ´«£¬1-ÉÏ´«£»
    bit4-°²È«´øÊ¶±ð(Ö÷¼ÝÊ»)£º0-²»ÉÏ´«£¬1-ÉÏ´«£»
    bit5-°²È«´øÊ¶±ð(¸±¼ÝÊ»)£º0-²»ÉÏ´«£¬1-ÉÏ´«£»
    */
    DWORD  dwPicType; //0:ÎÞÍ¼Æ¬ÐÅÏ¢;: ³µÁ¾Í¼;:³µÅÆÍ¼;
    BYTE    *pVehicleBuffer;    //³µÁ¾Í¼Æ¬Êý¾ÝÖ¸Õë
    DWORD  dwVehicleBufferLen ;// ³µÁ¾Í¼Æ¬Êý¾Ý³¤¶È
    BYTE    *pPlateBuffer;    //³µÅÆÍ¼Æ¬Êý¾ÝÖ¸Õë
    DWORD  dwPlateBufferLen ;// ³µÅÆÍ¼Æ¬Êý¾Ý³¤¶È
    BYTE    *pPilotFaceBuffer;    //ÈËÁ³×ÓÍ¼(Ö÷¼ÝÊ»)Í¼Æ¬Êý¾ÝÖ¸Õë
    DWORD  dwPilotFaceBufferLen ;// ÈËÁ³×ÓÍ¼(Ö÷¼ÝÊ»)Í¼Æ¬Êý¾Ý³¤¶È
    BYTE    *pCopilotFaceBuffer;    //ÈËÁ³×ÓÍ¼(¸±¼ÝÊ»)Í¼Æ¬Êý¾ÝÖ¸Õë
    DWORD  dwCopilotFaceBufferLen ;// ÈËÁ³×ÓÍ¼(¸±¼ÝÊ»)Í¼Æ¬Êý¾Ý³¤¶È
    BYTE    *pPilotSafebeltBuffer;    //°²È«´øÊ¶±ð(Ö÷¼ÝÊ»)Í¼Æ¬Êý¾ÝÖ¸Õë
    DWORD  dwPilotSafebeltBufferLen ;// °²È«´øÊ¶±ð(Ö÷¼ÝÊ»)Í¼Æ¬Êý¾Ý³¤¶È
    BYTE    *pCopilotSafebeltBuffer;// °²È«´øÊ¶±ð(¸±¼ÝÊ»)Í¼Æ¬Êý¾ÝÖ¸Õë
    DWORD  dwCopilotSafebeltBufferLen ;// °²È«´øÊ¶±ð(¸±¼ÝÊ»)Í¼Æ¬Êý¾Ý³¤¶È
    NET_VCA_RECT  struVehicleRect ;//³µÉí¾ØÐÎ×ø±ê
    NET_VCA_RECT  struPilotRect ;//Ö÷¼ÝÊ»¾ØÐÎ×ø±ê
    NET_VCA_RECT  struCopilotRect ;//¸±¼ÝÊ»¾ØÐÎ×ø±ê
    BYTE   Res2[80] ;
}NET_DVR_VEHICLE_RECOG_RESULT, *LPNET_DVR_VEHICLE_RECOG_RESULT;

#define MAX_ZONE_LINKAGE_CHAN_NUM    4    /* ·ÀÇø¹ØÁª×î´óÍ¨µÀÊý*/

typedef struct tagNET_DVR_CENTER_SERVER_CFG_
{
    DWORD                    dwSize;
    BYTE    byAddressType;    //0 - ipv4/ipv6µØÖ·£¬1 - ÓòÃû
    BYTE    byRes1;
    WORD    wServerPort;                //·þÎñÆ÷¶Ë¿Ú
    union
    {
        struct
        {
            BYTE            szDomain[MAX_DOMAIN_NAME];
            BYTE            byRes2[80];
        }struDomain;                    //·þÎñÆ÷ÓòÃû
        struct
        {
            NET_DVR_IPADDR    struIp;
        }struAddrIP;                    //IPµØÖ·
    }unionServer;//Ê¹ÓÃÁªºÏÌå½á¹¹£¬Í¨¹ýbyAddressType×Ö¶Î±íÊ¾ÊÇIPµØÖ·»¹ÊÇÓòÃû
    WORD                    wInterval;    //±¨¾¯¼ä¸ôÊ±¼ä,0-30s
    BYTE                    byRes3[514];
}NET_DVR_CENTER_SERVER_CFG,*LPNET_DVR_CENTER_SERVER_CFG;

typedef struct tagNET_DVR_SINGLE_CHANNEL_LINKAGE_CFG_
{
    BYTE    byDDNSType;        //ÓòÃû·þÎñÆ÷ÀàÐÍ£º0 - ÎÞÐ§£¬1 - IPServer(Ë½ÓÐDNS)£¬2 - hiDDNS
    BYTE    byRes1;
    WORD    wDDNSPort;                        //ÓòÃû·þÎñÆ÷¶Ë¿ÚºÅ
    BYTE    byServerAddr[MAX_DOMAIN_NAME];    //ÓòÃû·þÎñÆ÷µØÖ·
    BYTE    byDevName[MAX_DOMAIN_NAME];            //Éè±¸Ãû³Æ
    BYTE    byDevSerialNum[SERIALNO_LEN];    //Éè±¸ÐòÁÐºÅ
    BYTE    byAddressType;    //0 - ipv4/ipv6µØÖ·£¬1 - ÓòÃû
    BYTE    byRes2;
    WORD    wDevPort;        //Éè±¸¶Ë¿ÚºÅ    
    union
    {
        struct
        {
            BYTE            szDomain[MAX_DOMAIN_NAME];
            BYTE            byRes2[80];
        }struDomain;                                    //ÓòÃû
        struct
        {
            NET_DVR_IPADDR    struIp;
        }struAddrIP;                                    //IPµØÖ·
    }unionDevAddr;//Ê¹ÓÃÁªºÏÌå½á¹¹£¬Í¨¹ýbyAddressType×Ö¶Î±íÊ¾ÊÇIPµØÖ·»¹ÊÇÓòÃû
    BYTE    sUserName[NAME_LEN/*32*/];    //ÓÃ»§Ãû
    BYTE    sPassword[PASSWD_LEN/*16*/];//ÃÜÂë
    DWORD    dwChannel;                    //Áª¶¯Í¨µÀºÅ
    BYTE    byRes3[32];
}NET_DVR_SINGLE_CHANNEL_LINKAGE_CFG,*LPNET_DVR_SINGLE_CHANNEL_LINKAGE_CFG;

typedef struct tagNET_DVR_REGION_CHANNEL_LINKAGE_CFG_
{
    DWORD    dwSize;
    NET_DVR_SINGLE_CHANNEL_LINKAGE_CFG struLinkChannels[MAX_ZONE_LINKAGE_CHAN_NUM];    // Ã¿¸ö·ÀÇø¿ÉÒÔ¹ØÁªËÄ¸öÊÓÆµÍ¨µÀ
    BYTE    byRes[64];
}NET_DVR_ZONE_CHANNEL_LINKAGE_CFG,*LPNET_DVR_ZONE_CHANNEL_LINKAGE_CFG;

typedef struct tagNET_DVR_LCD_ALARM
{
    DWORD dwSize;
    DWORD dwScreenID;    //ÆÁÄ»Ë÷ÒýºÅ
    BYTE byOnOffLine;    //ÆÁÄ»ÊÇ·ñÔÚÏß£¬0-ÀëÏß£¬1-ÔÚÏß£¬µ±ÆÁÄ»ÀëÏßÊ±£¬±¾½á¹¹ºóÐø²ÎÊýÎÞÐ§
    BYTE byTempState;    //°å¿¨ÎÂ¶È×´Ì¬£¬0-Õý³££¬1-Òì³£
    BYTE byFanState;        //·çÉÈ×´Ì¬£¬0-¹Ø£¬1-¿ª
    BYTE byFanException;    //·çÉÈÒì³£×´Ì¬£¬0-²»Ö§³Ö 1-Õý³££¬2-Òì³£
    BYTE byTemperature;    //ÆÁÄ»°å¿¨ÎÂ¶È£¬µ¥Î»£ºÉãÊÏ¶È
    BYTE byRes[27];
}NET_DVR_LCD_ALARM, *LPNET_DVR_LCD_ALARM;

//´«¸ÐÆ÷ÉÏ´«ÐÅÏ¢
typedef struct tagNET_DVR_SENSOR_INFO_UPLOAD
{
    DWORD   dwSize;
    NET_DVR_TIME_V30  struTime;
    char    szSensorName[MAX_SENSORNAME_LEN]; //´«¸ÐÆ÷Ãû³Æ
    char    szSensorChan[MAX_SENSORCHAN_LEN]; //´«¸ÐÆ÷Í¨µÀ
    BYTE    byReboot; //Ö®Ç°ÊÇ·ñÖØÆô¹ý£¨Ò»°ãÊÇÖØÆôµÄºóµÄµÚÒ»ÌõÊý¾Ý´øÓÐÕâ¸ö±êÖ¾£©0-±íÊ¾Ã»ÓÐÖØÆô£¬1-ÓÐ¹ýÖØÆô
    BYTE    byPowerSupply;//ÊÇ·ñÕý³£¹©µç 0-²»ÔÚ¹©µç£¬1-ÕýÔÚ¹©µç
    BYTE    byStatusType;//Éè±¸×´Ì¬:0:Õý³£¡¢1£ºÒì³£¡¢2¡¢±¨¾¯
    BYTE    bySensorType;//²Î¿¼´«¸ÐÆ÷Ã¶¾ÙÀàÐÍSENSOR_TYPE
    float      fVoltageValue;//µçÑ¹Öµ£» ¾«È·µ½0.001
    float    fCurrentValue;//µçÁ÷Öµ£»¾«È·µ½0.001
    float   fActualValue;//Ä£ÄâÐÅºÅ×ª»»ºóµÄÊýÖµ£»¾«È·µ½0.001
    char    szDescription[MAX_DESCRIPTION_LEN /* 32*/]; //ÃèÊöÐÅÏ¢;µ±Éè±¸×´Ì¬£¨byStatusType£©Îª·Ç0Ê±ÉúÐ§¡£
    BYTE    byRes1[128];
}NET_DVR_SENSOR_INFO_UPLOAD,*LPNET_DVR_SENSOR_INFO_UPLOAD;

//×¥ÅÄÍ¼Æ¬ÉÏ´«
typedef struct tagNET_DVR_CAPTURE_UPLOAD
{
    DWORD dwSize; 
    NET_DVR_TIME_V30  struTime;
    DWORD    dwChannel;//Í¨µÀºÅ
    char    szDevName[MAX_DEVNAME_LEN_EX];
    DWORD   dwPicLen;//Í¼Æ¬³¤¶È
    BYTE    *pBuffer;    //Í¼Æ¬Êý¾ÝÖ¸Õë
    BYTE    byRes[124];
}NET_DVR_CAPTURE_UPLOAD,*LPNET_DVR_CAPTURE_UPLOAD;

#define MAX_MASK_AREA_NUM                   8   //ÂíÈü¿ËÇøÓò¸öÊý

typedef struct tagNET_DVR_AREA_MASK_CFG  //ÇøÓòÂíÈü¿Ë
{
    DWORD  dwSize;  //½á¹¹Ìå´óÐ¡
    BYTE   byEnable;//ÊÇ·ñÆôÓÃÂíÈü¿Ë   0-·ñ£¬1-ÊÇ
    BYTE   byMaskThick;  //ÂíÈü¿Ëºñ¶È 0-±¡Âë£¬1-ÖÐÂë£¬2-ºñÂë£¬±¡ÂëµÄÇø¿é´óÐ¡Îª8*8£¬ÖÐÂë16*16£¬ºñÂë32*32¡£Ä¬ÈÏÎªÖÐÂë
    BYTE   byRes1[2];
    NET_VCA_RECT  struRegion[MAX_MASK_AREA_NUM];//ÂíÈü¿ËÇøÓò·¶Î§
    BYTE   byRes[64];
}NET_DVR_AREA_MASK_CFG, *LPNET_DVR_AREA_MASK_CFG;

typedef struct tagNET_DVR_AUDIO_DIACRITICAL_CFG  //ÒôÆµ±äÒô
{
    DWORD  dwSize;  //½á¹¹Ìå´óÐ¡
    BYTE   byEnable;  //ÊÇ·ñÆôÓÃ±äÒô 0-²»ÆôÓÃ£¬1-ÆôÓÃ
    char    byBassValue;   //¸ßµÍÒôÖµ£¬·¶Î§Îª-12-12 ÖµÔ½´óÉùÒôÔ½Ï¸£¬·´Ö®Ô½Ð¡£¬0-±íÊ¾²»±äÒô
    BYTE   byRes[62];
}NET_DVR_AUDIO_DIACRITICAL_CFG, *LPNET_DVR_AUDIO_DIACRITICAL_CFG;

typedef struct tagNET_DVR_WIFI_DHCP_ADDR_CFG  //wifiÄ£Ê½ÏÂDHCP·¶Î§ÅäÖÃ
{
    DWORD       dwSize;
    NET_DVR_IPADDR   struStartAddr;   //¿ªÊ¼IPµØÖ·
    NET_DVR_IPADDR   struEndAddr;     //½áÊøIPµØÖ·
    BYTE        byRes[256];
}NET_DVR_WIFI_DHCP_ADDR_CFG, *LPNET_DVR_WIFI_DHCP_ADDR_CFG;


typedef struct tagNET_DVR_WIFI_CLIENT_INFO  //ÒôÆµ±äÒô
{
    DWORD       dwSize;
    NET_DVR_IPADDR       struAddress;  //IPµØÖ·
    BYTE        byMACAddr [MACADDR_LEN];
    WORD        wConnSpeed;    //Á¬½ÓËÙ¶È µ¥Î»KB
    BYTE        byRSSIValue;         //½ÓÊÕµ½µÄÐÅºÅÇ¿¶È£¬È¡ÖµÎª¸ºÖµ£¬´«ÊäÊ±²»´ø¸³Öµ£¬·¶Î§Îª0~-110dbm,ÖµÔ½´ó£¬´ú±íÐÅºÅÔ½Ç¿
    BYTE        byRes1;         //±£Áô
    WORD        wBandwidth;     //ÍøÂç´ø¿í  µ¥Î»KB 
    BYTE        byRes[32];
}NET_DVR_WIFI_CLIENT_INFO, *LPNET_DVR_WIFI_CLIENT_INFO;

typedef struct tagNET_DVR_MULTISTREAM_RELATION_CHAN_CFG  //¶àÂëÁ÷¹ØÁªÍ¨µÀ
{
    DWORD       dwSize;              //½á¹¹Ìå´óÐ¡
    DWORD       dwChannel;           //¹ØÁªµÄ±àÂëÍ¨µÀºÅ
    BYTE        byRes[64];
}NET_DVR_MULTISTREAM_RELATION_CHAN_CFG, *LPNET_DVR_MULTISTREAM_RELATION_CHAN_CFG;

typedef struct  
{
    BYTE byPort;   //¶Ë¿Ú
    BYTE byMasterSlaveProperty;   //¶Ë¿ÚÖ÷´ÓÊôÐÔ  1-Ö÷  2-´Ó
    BYTE byPortEthernetType;  //¶Ë¿ÚÀàÐÍ£¬1-°ÙÕ×¶Ë¿Ú£¬2-Ç§Õ×¶Ë¿Ú
    BYTE byRes[9]; 
}NET_DVR_RING_PORT_PROPERTY, *LPNET_DVR_RING_PORT_PROPERTY;
typedef struct  
{
    DWORD   dwSize; 
    BYTE     byEnable;     //ÊÇ·ñÆôÓÃ£¬ 0-²»ÆôÓÃ£¬ !0-ÆôÓÃ
    BYTE     byProtoType;  //Ð­ÒéÀàÐÍ£¬ 1-¹â¶Ë»ú×éÍøÐ­Òé(Ë½ÓÐ)£¬2-×ÛºÏÆ½Ì¨×éÍøÐ­Òé£¨Ë½ÓÐ£©£¬3-G8032Ð­Òé£¨¹«ÓÐ£©
    BYTE   byBandWidth;   //»·Íø´ø¿íÀàÐÍ£¬1-°ÙÕ×£¬2-Ç§Õ×
    BYTE     byRes1;        //±£Áô×Ö¶Î
    NET_DVR_RING_PORT_PROPERTY struRingPort[PER_RING_PORT_NUM];  //»·Íø¶Ë¿Ú
    BYTE      byRes2[60];    //±£Áô×Ö¶Î
}NET_DVR_NS_RING_CFG,  *LPNET_DVR_NS_RING_CFG;
typedef struct  //
{
    DWORD   dwSize;   //½á¹¹Ìå´óÐ¡
    BYTE     byStatus;              //»·Íø×´Ì¬£¬1-Õý³£ 2-¶Ï¿ª
    BYTE     byMasterSlaveProperty ; //¹âÏË°åÖ÷´ÓÊôÐÔ 1-Ö÷  2-´Ó
    BYTE     byRes[62];            //±£Áô×Ö¶Î
} NET_DVR_NS_RING_STATUS, *LPNET_DVR_NS_RING_STATUS;

//»ðµã¼ì²â±¨¾¯
typedef struct tagNET_DVR_FIREDETECTION_ALARM
{
    DWORD   dwSize; //½á¹¹´óÐ¡
    DWORD     dwRelativeTime; //Ïà¶ÔÊ±±ê
    DWORD    dwAbsTime; //¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO  struDevInfo;   //Ç°¶ËÉè±¸ÐÅÏ¢
    WORD    wPanPos;
    WORD    wTiltPos;
    WORD    wZoomPos;
    BYTE    byRes1[2];
    DWORD   dwPicDataLen;//±¨¾¯×¥ÅÄÍ¼Æ¬³¤¶È
    BYTE    *pBuffer;    //Êý¾ÝÖ¸Õë
    NET_VCA_RECT struRect;//»ðµã¿ò 
    NET_VCA_POINT struPoint ;//»ðµã¿òÄÚ×î¸ßÎÂ¶Èµã×ø±ê
    WORD    wFireMaxTemperature ;//»ðµã×î¸ßÎÂ¶È[300¡æ~4000¡æ]
    WORD    wTargetDistance ;//Ä¿±ê¾àÀë[100m ~ 10000m]
    BYTE    byRes[96];
} NET_DVR_FIREDETECTION_ALARM,*LPNET_DVR_FIREDETECTION_ALARM;

//»ðµã¼ì²âÅäÖÃ
typedef    struct tagNET_DVR_FIREDETECTION_CFG
{
    DWORD    dwSize;//½á¹¹Ìå´óÐ¡
    BYTE    byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE    bySensitivity; //¼ì²âÁéÃô¶È: 1~100Ä¬ÈÏ5s
    BYTE    byFireComfirmTime;//·¢ÏÖ»ðµãµÈ´ýÊ±¼ä: 0-120Ãë Ä¬ÈÏ5s
    BYTE    byFireRegionOverlay;//ÂëÁ÷µþ¼Ó»ðµã¿ò: 0- ·ñ£¬1- ÊÇ
    BYTE    byRes[128];
}NET_DVR_FIREDETECTION_CFG,*LPNET_DVR_FIREDETECTION_CFG;

#define MAX_PLAYLIST_NUM        50          //×î´ó²¥·ÅÁÐ±íÊýÄ¿ 
#define MAX_PLAYPLAN_NUM        50          //×î´ó²¥·Å¼Æ»®ÊýÄ¿ 

#define MAX_LEN_256                     256 
#define MAX_GROUP_RECORD_NUM            10      //×î´ó¼ÇÂ¼¸öÊý
typedef struct tagNET_DVR_AREA_MONITOR_COND
{
    DWORD  dwSize; 
    DWORD  dwAreaID;   //ÇøÓòID
    DWORD  dwMonitorID;  //µ±Ç°¿ªÊ¼»ñÈ¡µÄ¼à¿Øµã±àºÅ£¬´Ó1¿ªÊ¼
    BYTE   byIsNeedGroup;  //ÊÇ·ñ²éÑ¯¹ØÁª·Ö×éÐÅÏ¢
    BYTE   byRes [127];
}NET_DVR_AREA_MONITOR_COND,*LPNET_DVR_AREA_MONITOR_COND;

typedef struct tagNET_DVR_DEL_MONITOR_COND
{
    DWORD  dwSize;  
    BYTE  byDelType;     //É¾³ýÀàÐÍ£¬0-É¾³ýÖ¸¶¨ÇøÓòµÄËùÓÐ¼à¿Øµã£¬1-É¾³ýÖ¸¶¨ÇøÓòµÄÖ¸¶¨¼à¿Øµã
    DWORD  dwAreaID;   //ÇøÓòID
    DWORD  dwMonitorID;   //¼à¿ØµãID£¨µ±byDelTypeÎª0Ê±ÎÞÐ§£¬µ±byDelTypeÎª1Ê±ÓÐÐ§£©£¬´Ó1¿ªÊ¼
    BYTE   byRes[64];
}NET_DVR_DEL_MONITOR_COND,*LPNET_DVR_DEL_MONITOR_COND;

typedef struct tagNET_DVR_BLACKLIST_ALARM_COND
{
    DWORD       dwSize;         //½á¹¹Ìå´óÐ¡
    BYTE        byType;         //ºÚ°×Ãûµ¥±êÖ¾£º- È«²¿£¬- °×Ãûµ¥£¬- ºÚÃûµ¥
    BYTE        byRes1[3];      //±£Áô
    DWORD       dwFaceID;       //ÈËÁ³Ãûµ¥ID
    DWORD       dwMaxSnapNum;   //×î´ó×¥ÅÄÕÅÊý£¬0-±íÊ¾²»ÏÞÖÆ
    BYTE        byRes[256];
}NET_DVR_BLACKLIST_ALARM_COND, *LPNET_DVR_BLACKLIST_ALARM_COND;

typedef struct tagNET_DVR_STORAGE_RESOURCE_COND
{
    DWORD      dwSize;         //½á¹¹Ìå´óÐ¡
    DWORD        dwStorageID;    //´Óµ±Ç°±àºÅ¿ªÊ¼»ñÈ¡Ê£Óà×ÊÔ´£¬´Ó1¿ªÊ¼
    BYTE        byRes[64];
}NET_DVR_STORAGE_RESOURCE_COND, *LPNET_DVR_STORAGE_RESOURCE_COND;

typedef struct tagNET_DVR_BLACKLIST_ALARM_RECORD
{
    DWORD          dwSize;   //½á¹¹Ìå´óÐ¡
    DWORD            dwSnapFacePicID;    //×¥ÅÄÈËÁ³ID
    DWORD            dwRegisterID;        //Ãûµ¥×¢²áIDºÅ£¨Ö»¶Á£©
    DWORD            dwGroupNo;            //·Ö×éºÅ
    BYTE            byRes[128];
}NET_DVR_BLACKLIST_ALARM_RECORD, *LPNET_DVR_BLACKLIST_ALARM_RECORD;

typedef struct tagNET_DVR_BLACKLIST_GROUP_INFO  //Ãûµ¥·Ö×éÐÅÏ¢
{
    DWORD          dwSize;   //½á¹¹Ìå´óÐ¡
    DWORD          dwGroupID; //·Ö×é±àºÅ£¨»ñÈ¡Ê±ÓÐÐ§£¬Ìí¼ÓÊ±ÎÞÐ§£©£¬´Ó1¿ªÊ¼
    DWORD            dwGroupNo;            //Ãûµ¥·Ö×éºÅ
    BYTE            byGroupType;        //·Ö×éÀàÐÍ£¬0-ºÚÃûµ¥·Ö×é£¬1-°×Ãûµ¥·Ö×é
    BYTE            byRes1;
    WORD            wThreshold;            //±¨¾¯ãÐÖµ£¬È¡Öµ·¶Î§Îª0-1000
    DWORD            dwListNum;            //·Ö×éÃûµ¥Êý
    BYTE            szGroupName[NAME_LEN];  //·Ö×éÃû³Æ
    BYTE            szRemark[MAX_LEN_256];
    BYTE            byStorageAddr[MAX_DOMAIN_NAME];  //´æ´¢IPµØÖ·ÐÅÏ¢
    WORD            wStoragePort;            //´æ´¢IP¶ÔÓ¦µÄ¶Ë¿ÚºÅ
    BYTE            byRes[126];
}NET_DVR_BLACKLIST_GROUP_INFO, *LPNET_DVR_BLACKLIST_GROUP_INFO;


typedef struct tagNET_DVR_SINGLE_BLACKLIST_GROUP_RECORD  
{
    DWORD          dwSize;   //½á¹¹Ìå´óÐ¡
    DWORD            dwGroupRecordID;            //·Ö×é¼ÇÂ¼ID£¬ÐÞ¸ÄºÍ²éÑ¯Ê±ÓÐÐ§£¬Ôö¼ÓÊ±ÎÞÐ§£¬´Ó1¿ªÊ¼
    DWORD            dwGroupNo;            //Ãûµ¥·Ö×éºÅ
    DWORD            dwFaceDBID;            //ÈËÁ³¿âID
    DWORD            dwFaceRecordID;        //ÈËÁ³¼ÇÂ¼ID
    BYTE            byAlarmLevel;        //±¨¾¯µÈ¼¶£¬0-high,1-medium,2-low
    BYTE            byRes1[3];            //±£Áô
    NET_DVR_ADDR_DOMAIN_INFO struStorageAddr;   //´æ´¢IPµØÖ·ÐÅÏ¢
    BYTE            byRes[256];
}NET_DVR_SINGLE_BLACKLIST_GROUP_RECORD,*LPNET_DVR_SINGLE_BLACKLIST_GROUP_RECORD;

typedef struct tagNET_DVR_BLACKLIST_GROUP_RECORD_COND
{
    DWORD          dwSize;   //½á¹¹Ìå´óÐ¡
    DWORD            dwRecordID;                //´Óµ±Ç°±àºÅ¿ªÊ¼»ñÈ¡£¬´Ó1¿ªÊ¼
    BYTE            byRes[64];
}NET_DVR_BLACKLIST_GROUP_RECORD_COND, *LPNET_DVR_BLACKLIST_GROUP_RECORD_COND;

typedef struct tagNET_DVR_BLACKLIST_GROUP_RECORD_CFG  //Ãûµ¥·Ö×é¼ÇÂ¼ÐÅÏ¢
{
    DWORD          dwSize;   //½á¹¹Ìå´óÐ¡
    DWORD            dwRecordNum;            //¼ÇÂ¼×Ü¸öÊý
    NET_DVR_SINGLE_BLACKLIST_GROUP_RECORD struRecord[MAX_GROUP_RECORD_NUM]; //¼ÇÂ¼²ÎÊý
    BYTE            byRes[256];
}NET_DVR_BLACKLIST_GROUP_RECORD_CFG,*LPNET_DVR_BLACKLIST_GROUP_RECORD_CFG;

typedef struct tagNET_DVR_BLACKLIST_GROUP_CFG  //Ãûµ¥·Ö×é¼ÇÂ¼ÐÅÏ¢
{
    DWORD          dwSize;   //½á¹¹Ìå´óÐ¡
    DWORD            dwGroupNum;            //·Ö×é×Ü¸öÊý
    NET_DVR_BLACKLIST_GROUP_INFO struGroup[MAX_GROUP_RECORD_NUM]; //¼ÇÂ¼²ÎÊý
    BYTE            byRes[256];
}NET_DVR_BLACKLIST_GROUP_CFG,*LPNET_DVR_BLACKLIST_GROUP_CFG;

typedef struct tagNET_DVR_BLACKLIST_GROUP_COND
{
    DWORD        dwSize;   //½á¹¹Ìå´óÐ¡
    DWORD            dwGroupID;                //´Óµ±Ç°±àºÅ¿ªÊ¼»ñÈ¡£¬´Ó1¿ªÊ¼
    BYTE            byRes[64];
}NET_DVR_BLACKLIST_GROUP_COND, *LPNET_DVR_BLACKLIST_GROUP_COND;



typedef  struct  tagNET_DVR_SENSOR_VALUE
{
    float   fMinValue; //×îÐ¡Öµ£»¾«È·µ½0.001£¬ÈôÎª0xfffffffff±íÊ¾²éÑ¯ËùÓÐ
    float   fMaxValue; //×î´óÖµ£»¾«È·µ½0.001£¬ÈôÎª0xfffffffff±íÊ¾²éÑ¯ËùÓÐ
    BYTE    byRes[8];
}NET_DVR_SENSOR_VALUE, *LPNET_DVR_SENSOR_VALUE;

typedef  struct  tagNET_DVR_HISTORICAL_QUERY_PARAM //ÀúÊ·Êý¾Ý²éÑ¯Ìõ¼þ×Ó½á¹¹
{
    NET_DVR_TIME_V30 struStartTime;//¿ªÊ¼Ê±¼ä  
    NET_DVR_TIME_V30 struEndTime;//½áÊøÊ±¼ä
    NET_DVR_SENSOR_VALUE struVoltageValue; //µçÑ¹²ÎÊý; µ¥Î»·üÌØ 
    NET_DVR_SENSOR_VALUE struCurrentValue; //µçÁ÷²ÎÊý; µ¥Î»ºÁ°²
    NET_DVR_SENSOR_VALUE struTemperatureValue;//ÎÂ¶È²ÎÊý£¬µ¥Î»ÉãÊÏ¶È
    NET_DVR_SENSOR_VALUE struHumidityValue;//Êª¶È²ÎÊý
    BYTE   bySwitchStatus;//Í¨µç×´Ì¬£¬ 0~Î´Í¨µç£¬1~Í¨µç£¬0xff²éÑ¯ËùÓÐ
    BYTE   bySensorStatus; //´«¸ÐÆ÷×´Ì¬£» 0-Õý³£¡¢1-Òì³£¡¢2-±¨¾¯£»0xff²éÑ¯ËùÓÐ
    BYTE   byRes[66];
}NET_DVR_HISTORICAL_QUERY_PARAM, *LPNET_DVR_HISTORICAL_QUERY_PARAM;

typedef  struct  tagNET_DVR_SENSOR_COND //Ìõ¼þ½á¹¹
{
    DWORD  dwSize; 
    BYTE   byQueryType; //²éÑ¯·½Ê½£»0~ÊµÊ±Êý¾Ý²éÑ¯£¬1~ÀúÊ·Êý¾Ý²éÑ¯
    BYTE   byDeviceType; //Éè±¸ÀàÐÍ;0~Î´Öª,1~Ä£ÄâÁ¿´«¸ÐÆ÷, 2~ÉÏµç¶Ë×Ó,3~ÉÏµç²å×ù£¬0xff±íÊ¾²éÑ¯ËùÓÐ
    BYTE   byDeviceID; //Éè±¸ID£»Analog(Ä£ÄâÁ¿´«¸ÐÆ÷)·¶Î§£º1-8¡¢Terminal(ÉÏµç¶Ë×Ó)·¶Î§£º1-4¡¢Socket(ÉÏµç²å×ù)·¶Î§£º1-2£¬0xff±íÊ¾²éÑ¯ËùÓÐ
    BYTE   byRes1;
    // INTER_HISTORICAL_QUERY_PARAM×Ó½á¹¹£¬ÔÚbyQueryTypeÎª1Ê±ÉúÐ§
    NET_DVR_HISTORICAL_QUERY_PARAM struHistoricalQueryParam; //ÀúÊ·Êý¾Ý²éÑ¯²ÎÊý
    BYTE   byRes[64];
}NET_DVR_SENSOR_COND,*LPNET_DVR_SENSOR_COND;

typedef  struct  tagNET_DVR_SENSOR_CFG//ÅäÖÃ½á¹¹
{
    DWORD  dwSize; 
    BYTE   byEnable; //µ±Ç°²éÑ¯µÄ´«¸ÐÆ÷ÊÇ·ñÊ¹ÄÜ£¬0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ£»
    BYTE   byDeviceType; //Éè±¸ÀàÐÍ;0~Î´Öª,1~Ä£ÄâÁ¿´«¸ÐÆ÷, 2~ÉÏµç¶Ë×Ó,3~ÉÏµç²å×ù
    BYTE   byDeviceID; //Éè±¸ID£»Analog(Ä£ÄâÁ¿´«¸ÐÆ÷)·¶Î§£º1-8¡¢Terminal(ÉÏµç¶Ë×Ó)·¶Î§£º1-4¡¢Socket(ÉÏµç²å×ù)·¶Î§£º1-2
    BYTE   byRes1;
    NET_DVR_TIME_V30 struTime;//Ê±¼ä 
    BYTE   byIsFirst; //ÊÇ·ñÊÇÆô¶¯ºóµÚÒ»ÌõÊý¾Ý(¼ì²âÊÇ·ñÓÐÖØÆô)£¬0-·ñ, 1-ÊÇ£»
    BYTE   byIsSwitchOn; //ÊÇ·ñÍ¨µç£¬0-·ñ, 1-ÊÇ£»
    BYTE   bySensorStatus; //´«¸ÐÆ÷×´Ì¬£» 0-Õý³£¡¢1-Òì³£¡¢2-±¨¾¯£»
    BYTE   bySensorType; //´«¸ÐÆ÷ÀàÐÍ£» 0-Î´Öª¡¢1-ÎÂ¶È¡¢2-Êª¶È£»
    float  fVoltage; //µçÑ¹£»µ¥Î»·üÌØ£¬¾«È·µ½0.001¡£ÈôÎª0xff±íÊ¾ÎÞÐ§Öµ
    float  fCurrent; //µçÁ÷£»µ¥Î»ºÁ°²£¬¾«È·µ½0.001¡£ÈôÎª0xff±íÊ¾ÎÞÐ§Öµ
    float  fTemperatureValue;//ÎÂ¶ÈÖµ£»µ¥Î»ÉãÊÏ¶È£¬¾«È·µ½0.001¡£ÈôÎª0xff±íÊ¾ÎÞÐ§Öµ
    float  fHumidityValue;//Êª¶ÈÖµ£¬¾«È·µ½0.001¡£ÈôÎª0xff±íÊ¾ÎÞÐ§Öµ
    BYTE   bySensorName[SENSORNAME_LEN/*32*/]; //´«¸ÐÆ÷Ãû³Æ
    BYTE   byDescription[MAX_SENSORDESCR_LEN/*64*/]; //´«¸ÐÆ÷Êý¾ÝµÄÃèÊöÐÅÏ¢£¬statusTypeÎªÕý³£Ê±£¬description¿ÉÒÔÎª¿Õ
    BYTE   byRes[256];
}NET_DVR_SENSOR_CFG,*LPNET_DVR_SENSOR_CFG;

typedef    struct tagNET_DVR_SENSOR_SWITCH_COND
{
    DWORD     dwSize;//½á¹¹Ìå´óÐ¡
    BYTE     byDeviceType; //Éè±¸ÀàÐÍ;0~Î´Öª, 1~ÉÏµç¶Ë×ÓTerminal,2~ÉÏµç²å×ùSocket
    BYTE     byDeviceID; //Éè±¸ID£»Terminal(ÉÏµç¶Ë×Ó)·¶Î§£º1-4¡¢Socket(ÉÏµç²å×ù)·¶Î§£º1-2
    BYTE     bySwitch; //¿ª¹Ø£¬0-¶Ïµç, 1-ÉÏµç£¬2-ÖØÆô
    BYTE     byRes[125];
}NET_DVR_SENSOR_SWITCH_COND,*LPNET_DVR_SENSOR_SWITCH_COND;

typedef struct tagNET_DVR_GB28181_SERVICE_CFG
{
    DWORD  dwSize;     //½á¹¹Ìå´óÐ¡
    BYTE   byServerID[DEV_ID_LEN];  //SIP·þÎñÆ÷ID£»
    WORD   wPort;      //SIP·þÎñÆ÷¶Ë¿ÚºÅ
    BYTE   byRes1[2];  //±£Áô
    BYTE   byAuthPasswd[PASSWD_LEN];
    DWORD  dwRegisterValid;           //´æ»îÆÚÖÜÆÚ£¬µ¥Î»£ºÃë£¬Ä¬ÈÏ£º3600 
    BYTE   byMaxHeartbeatTimeOut;    //×î´óÐÄÌø³¬Ê±´ÎÊý£¬Ä¬ÈÏ£º3´Î
    BYTE   byAutoAddIpc;            //ÊÇ·ñÆôÓÃ×Ô¶¯Ìí¼Óipc,0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE   byAuthPasswdEx[MAX_PASSWD_LEN_EX];   //ÃÜÂëÀ©Õ¹Îª64Î»£¬ÉèÖÃÊ±£¬byAuthPasswdExÎª·Ç¿Õ£¬´Ë²ÎÊýÓÐÐ§£¬byAuthPasswdÎÞÐ§£¬»ñÈ¡Ê±£¬byAuthPasswdExºÍbyAuthPasswd¶¼·µ»Ø
    BYTE   byRes[190];                //±£Áô
}NET_DVR_GB28181_SERVICE_CFG,*LPNET_DVR_GB28181_SERVICE_CFG;
typedef    struct    tagNET_DVR_ACTIVATECFG
{
    DWORD   dwSize;    //½á¹¹Ìå´óÐ¡
    BYTE    sPassword[PASSWD_LEN];    //³õÊ¼ÃÜÂë
    BYTE    byRes[108];
}NET_DVR_ACTIVATECFG,*LPNET_DVR_ACTIVATECFG;

typedef struct tagNET_DVR_IPDEVICE_ACTIVATE_CFG
{
    DWORD       dwSize;    //½á¹¹Ìå´óÐ¡
    BYTE        byMode;    //0-°´Í¨µÀ¼¤»î£¬1-°´µØÖ·¼¤»î
    BYTE        bySelfDefinePassword;//ÊÇ·ñ×Ô¶¨ÒåÃÜÂë,0-·ñ,1-ÊÇ
    BYTE        sPassword[PASSWD_LEN];//×Ô¶¨ÒåÃÜÂë
    BYTE        sUserName[NAME_LEN];//ÓÃ»§Ãû
    BYTE        byRes[78];
    union
    {
        BYTE        byLen[512];//union´óÐ¡
        struct
        {
            DWORD       dwChannelNo;//Í¨µÀºÅ
            BYTE        byRes[508];
        }struChannelInfo;//Í¨µÀÐÅÏ¢
        struct
        {
            NET_DVR_IPADDR   struIp;//IPµØÖ·
            WORD    wPort;//¶Ë¿ÚºÅ
            BYTE    sProtocolDesc[DESC_LEN];//Ð­ÒéÀàÐÍ
            BYTE    byMacAddr[MACADDR_LEN];//macµØÖ·
            BYTE    byRes[344];
        }struAddrInfo;//IPµØÖ·£¬À´×ÔNET_DVR_SADPINFO
    }unActivateDeviceInfo;//Ê¹ÓÃÁªºÏÌå½á¹¹£¬Í¨¹ýbyMode×Ö¶Î±íÊ¾ÊÇ°´Í¨µÀ»¹ÊÇ°´µØÖ·
}NET_DVR_IPDEVICE_ACTIVATE_CFG,*LPNET_DVR_IPDEVICE_ACTIVATE_CFG;

typedef struct tagNET_DVR_DIGITAL_CHANNEL_SECURITY_STATUS_
{
    DWORD  dwSize;
    BYTE   byDigitalChanPasswordStatus[MAX_CHANNUM_V30*4];//0-±£Áô,1-IPCÎ´¼¤»î£¬2-·çÏÕÃÜÂë£¬3-ÃÜÂëÇ¿¶ÈÈõ£¬4-ÃÜÂëÇ¿¶ÈÖÐ£¬5-ÃÜÂëÇ¿¶ÈÇ¿;byDigitalChanPasswordStatus[0]±íÊ¾µÚÒ»¸öÊý×ÖÍ¨µÀ
    BYTE   byRes[1140];
}NET_DVR_DIGITAL_CHANNEL_SECURITY_STATUS, *LPNET_DVR_DIGITAL_CHANNEL_SECURITY_STATUS;

typedef struct tagNET_DVR_CAMERACHAN_SERIALCFG
{  
    DWORD    dwSize;
    DWORD   dwBaudRate;  //²¨ÌØÂÊ(bps)£¬0-50£¬1-75£¬2-110£¬3-150£¬4-300£¬5-600£¬6-1200£¬7-2400£¬8-4800£¬9-9600£¬10-19200£¬11-38400£¬12-57600£¬13-76800£¬14-115.2k
    BYTE    byDataBit; //Êý¾ÝÓÐ¼¸Î»£º0-5Î»£¬1-6Î»£¬2-7Î»£¬3-8Î»
    BYTE    byStopBit;  //Í£Ö¹Î»£º0-1Î»£¬1-2Î»
    BYTE    byParity;  //ÊÇ·ñÐ£Ñé£º0-ÎÞÐ£Ñé£¬1-ÆæÐ£Ñé£¬2-Å¼Ð£Ñé
    BYTE    byFlowcontrol;// ÊÇ·ñÁ÷¿Ø£º0-ÎÞ£¬1-ÈíÁ÷¿Ø,2-Ó²Á÷¿Ø
    WORD    wPTZProtocol;  //¿ØÇòÐ­ÒéÀàÐÍ£¬Ë÷ÒýÖµ
    BYTE    byRes1[6];
    DWORD   dwSerialPort; //´®¿ÚºÅ,×î¸ßÎ»Îª0£¬±íÊ¾Ç°Ãæ°å´®¿Ú£¬×î¸ßÎ»Îª1£¬±íÊ¾ºóÃæ°å´®¿Ú
    BYTE    bySerialAddress; //´®¿ÚµØÖ·0~255
    BYTE    byRes[15];
}NET_DVR_CAMERACHAN_SERIALCFG, *LPNET_DVR_CAMERACHAN_SERIALCFG;

#define MAX_MATRIX_SUBBOARD_NUM      16   //×ÛºÏÆ½Ì¨×î´ó×Ó°åÊý
#define MAX_BOARD_SUBSYSTEM_NUM      12   //Ã¿¸ö×Ó°å×î´óÏµÍ³Êý
typedef  struct  tagNET_DVR_SUBSYSTEM_STATUS
{
    /*×ÓÏµÍ³ÀàÐÍ£¬1-½âÂëÓÃ×ÓÏµÍ³£¬2-±àÂëÓÃ×ÓÏµÍ³£¬3-¼¶ÁªÊä³ö×ÓÏµÍ³£¬4-¼¶ÁªÊäÈë×ÓÏµÍ³£¬5-Âë·ÖÆ÷×ÓÏµÍ³£¬6-±¨¾¯Ö÷»ú×ÓÏµÍ³£¬7-ÖÇÄÜ×ÓÏµÍ³£¬8-Fpga½âÂë×ÓÏµÍ³£¬9-Fpga×ÓÏµÍ³£¬10-×ªÂë×ÓÏµÍ³£¬
    11-X86·þÎñÆ÷×ÓÏµÍ³£¬12-³¬¸ßÇåÊäÈë×ÓÏµÍ³£¬13-X86ÖÐÐÄ·þÎñ°å£¬ 14- X86ÒµÎñ·þÎñ°å £¬15-¶àÏà»úÆ´½Ó×ÓÏµÍ³£¬16-ÍøÂç¹âÏË½»»»×ÓÏµÍ³£¬17-X86Æ´½Ó×ÓÏµÍ³£¬18-ÆÕÍ¨Æ´½Ó×ÓÏµÍ³0-NULL*/
    BYTE    bySubSystemType;
    BYTE    bySubSystemNo;   //×ÓÏµÍ³ºÅ£¬¼´ËùÔÚ×Ó°åÉÏµÄ±àºÅ 
    BYTE    byOnlineStatus;  //ÍøÂçÁ¬½Ó×´Ì¬£¬ 1-ÔÚÏß 2-²»ÔÚÏß
    BYTE    byRes[49]; 
}NET_DVR_SUBSYSTEM_STATUS, *LPNET_DVR_SUBSYSTEM_STATUS; 
typedef  struct  tagNET_DVR_MATRIX_SUBBOARD
{
    BYTE  byBoardNo;                //×Ó°åºÅ
    BYTE  byPcieConnectStatus;        //pcieÁ¬½Ó×´Ì¬£¬ 1-Á¬½Ó 2-¶Ï¿ª
    BYTE  byRes[2]; 
    DWORD dwHardwareVersion;       //×Ó°åÓ²¼þ°æ±¾
    DWORD dwPcieBandwidth ;        //pcie Link ´ø¿í  
    DWORD dwTemperature ;          //×Ó°åÎÂ¶È  µ¥Î»£ºÉãÊÏ¶È
    NET_DVR_SUBSYSTEM_STATUS    struSubsystemStatus[MAX_BOARD_SUBSYSTEM_NUM]; //×ÓÏµÍ³×´Ì¬
    BYTE  byRes2[16]; 
}NET_DVR_MATRIX_SUBBOARD, *LPNET_DVR_MATRIX_SUBBOARD; 
typedef struct  tagNET_DVR_MATRIX_STATUS
{
    DWORD dwSize;
    BYTE  byMainFrameType;   //»úÏäÀàÐÍ  1-18U»úÏä(V1.0) 2-18U»úÏä 3-14U»úÏä 4-11U»úÏä 5-8U»úÏä 6-7U»úÏä  7-5U»úÏä
    BYTE  bySoltNum;   //²ÛÎ»Êý
    BYTE  byBoardNum;   //×Ó°åÊý
    BYTE  byRes;
    NET_DVR_MATRIX_SUBBOARD struMatrixSubboard [MAX_MATRIX_SUBBOARD_NUM]; 
    BYTE  byRes2[48];
}NET_DVR_MATRIX_STATUS,*LPNET_DVR_MATRIX_STATUS;
typedef struct tagNET_DVR_FUSION_SCALE
{
    DWORD dwSize;
    WORD wWidth;  //Í¼ÏñÈÚºÏ¿í(ºáÏòÍ¼ÏñÊýÄ¿)
    WORD wHeight; //Í¼ÏñÈÚºÏ¸ß(×ÝÏòÍ¼ÏñÊýÄ¿)
    BYTE byRes[32];
}NET_DVR_FUSION_SCALE, *LPNET_DVR_FUSION_SCALE;

typedef struct tagNET_DVR_FUSION_CFG
{
    DWORD dwSize;
    BYTE byFusion;  //ÊÇ·ñÈÚºÏ£¬0-Î´ÈÚºÏ»òÈ¡ÏûÈÚºÏ£¬·Ç0-ÈÚºÏ
    BYTE byUseHistoryMap; //ÊÇ·ñÊ¹ÓÃÀúÊ·ÈÚºÏÓ³Éä±í£¬0-²»Ê¹ÓÃ£¬·Ç0-Ê¹ÓÃ
    BYTE byRes[30]; 
}NET_DVR_FUSION_CFG, *LPNET_DVR_FUSION_CFG;

typedef struct tagNET_DVR_MULTIFUNCTION_SERIALCFG
{
    DWORD dwSize ;
    BYTE  byVariable ;  //´®¿ÚÊÇ·ñ¿É±ä£¬1-²»¿É±ä  2-¿É±ä £¨Ö»»ñÈ¡£©
    BYTE  bySerialWorkMode;   //¹¤×÷Ä£Ê½£¬1-RS485, 2-RS232£¨Ö»ÔÚ¿É±äÇé¿öÏÂ£¬ÐÞ¸Ä¹¤×÷Ä£Ê½£©
    BYTE  byFunType;   //´®¿Ú¹¦ÄÜ£¬ 1-¼üÅÌ¿ØÖÆ£¬2-ÆÁÄ»¿ØÖÆ£¬3-Í¸Ã÷Í¨µÀÄ£Ê½ 4-PTZ¿ØÖÆ  5-¾ØÕó¿ØÖÆ 6-¿ØÖÆÌ¨
    BYTE byDataBit;// Êý¾ÝÎ» 0£­5Î»£¬1£­6Î»£¬2£­7Î»£¬3£­8Î»;
    BYTE byStopBit;// Í£Ö¹Î» 0£­1Î»£¬1£­2Î»;
    BYTE byParity;// Ð£Ñé 0£­ÎÞÐ£Ñé£¬1£­ÆæÐ£Ñé£¬2£­Å¼Ð£Ñé;
    BYTE byFlowcontrol;// 0£­ÎÞ£¬1£­ÈíÁ÷¿Ø,2-Ó²Á÷¿Ø
    BYTE byRes1 ;   
    DWORD dwBaudRate;//²¨ÌØÂÊ0£­50£¬1£­75£¬2£­110£¬3£­150£¬4£­300£¬5£­600£¬6£­1200£¬7£­2400£¬8£­4800£¬9£­9600£¬10£­19200£¬ 11£­38400£¬12£­57600£¬13£­76800£¬14£­115.2k;   
    WORD wProtocol;   //´®¿ÚÐ­Òé  ²»Í¬´®¿Ú¹¦ÄÜ¶ÔÓ¦´®¿ÚÐ­Òé²»Ò»Ñù
    BYTE byRes[34];
}NET_DVR_MULTIFUNCTION_SERIALCFG, *LPNET_DVR_MULTIFUNCTION_SERIALCFG;

typedef struct tagNET_DVR_PTZ_3D_SPEED_CONTROL
{
    DWORD  dwSize;
    DWORD  dwChannel;  //Í¨µÀºÅ
    BYTE    byPSpeed;  // XÖá¿ØÖÆËÙ¶È  £¨È¡Öµ1£­64£©
    BYTE    byTSpeed;  // YÖá¿ØÖÆËÙ¶È   £¨È¡Öµ1£­64£©
    BYTE    byZSpeed;  // ZËÙ¶È
    BYTE    byPDirect; // P·½Ïò£¬ 1-×ó£¬ 2-ÓÒ
    BYTE    byTDirect; // T·½Ïò£¬ 1-ÉÏ£¬ 2-ÏÂ
    BYTE    byZDirect;  //Z·½Ïò£¬  1-ZOOM+,  2-ZOOM-
    BYTE    byRes[18];  //±£Áô×Ö½Ú
}NET_DVR_PTZ_3D_SPEED_CONTROL, *LPNET_DVR_PTZ_3D_SPEED_CONTROL; 

//SensorÐÅÏ¢
typedef struct tagNET_DVR_SENSOR_PARAM
{
    BYTE        bySensorType;//SensorType:0-CCD,1-CMOS
    BYTE        byRes[31];
    float       fHorWidth;//Ë®Æ½¿í¶È ¾«È·µ½Ð¡ÊýµãºóÁ½Î» *10000
    float       fVerWidth;//´¹Ö±¿í¶È ¾«È·µ½Ð¡ÊýµãºóÁ½Î» *10000
    float       fFold;//zoom=1Ã»±äÊ±µÄ½¹¾à ¾«È·µ½Ð¡ÊýµãºóÁ½Î» *100
}NET_DVR_SENSOR_PARAM,*LPNET_DVR_SENSOR_PARAM;

typedef struct tagNET_DVR_LLI_PARAM
{
    float fSec;//Ãë[0.000000,60.000000]
    BYTE byDegree;//¶È:Î³¶È[0,90] ¾­¶È[0,180]
    BYTE byMinute;//·Ö[0,59]
    BYTE byRes[6];
}NET_DVR_LLI_PARAM, *LPNET_DVR_LLI_PARAM;

//Çò»úÎ»ÖÃÐÅÏ¢
typedef struct
{
    float   fPanPos;//Ë®Æ½²ÎÊý£¬¾«È·µ½Ð¡Êýµãºó1Î»
    float   fTiltPos;//´¹Ö±²ÎÊý£¬¾«È·µ½Ð¡Êýµãºó1Î»
    float   fZoomPos;//±ä±¶²ÎÊý£¬¾«È·µ½Ð¡Êýµãºó1Î»
    BYTE    byRes[16] ;
}NET_DVR_PTZPOS_PARAM, *LPNET_DVR_PTZPOS_PARAM;

//GISÐÅÏ¢ÉÏ´«
typedef struct tagNET_DVR_GIS_UPLOADINFO
{
    DWORD   dwSize;//½á¹¹Ìå´óÐ¡
    DWORD     dwRelativeTime; //Ïà¶ÔÊ±±ê
    DWORD    dwAbsTime; //¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO    struDevInfo;//Ç°¶ËÉè±¸
    float   fAzimuth;//µç×ÓÂÞÅÌµÄ·½Î»ÐÅÏ¢£»·½Î»½Ç[0.00¡ã,360.00¡ã)
    BYTE    byLatitudeType ;//Î³¶ÈÀàÐÍ£¬0-±±Î³£¬1-ÄÏÎ³
    BYTE    byLongitudeType ;// ¾­¶ÈÀàÐÍ£¬0-¶«¶È£¬1-Î÷¶È
    BYTE    byRes1[2] ;
    NET_DVR_LLI_PARAM    struLatitude;     /*Î³¶È*/
    NET_DVR_LLI_PARAM    struLongitude;   /*¾­¶È*/
    float   fHorizontalValue;//Ë®Æ½ÊÓ³¡½Ç£¬¾«È·µ½Ð¡ÊýµãºóÃæÁ½Î»
    float   fVerticalValue;//´¹Ö±ÊÓ³¡½Ç£¬¾«È·µ½Ð¡ÊýµãºóÃæÁ½Î»
    float   fVisibleRadius;//µ±Ç°¿ÉÊÓ°ë¾¶£¬¾«È·µ½Ð¡ÊýµãºóÃæÁ½Î»
    float   fMaxViewRadius;//×î´ó¿ÉÊÓ°ë¾¶£¬¾«È·µ½Ð¡ÊýµãºóÃæ0Î»£¨Ô¤Áô´¦Àí£©
    NET_DVR_SENSOR_PARAM  struSensorParam;//SensorÐÅÏ¢
    NET_DVR_PTZPOS_PARAM  struPtzPos; //ptz×ø±ê
    BYTE  byRes[256];
}NET_DVR_GIS_UPLOADINFO,*LPNET_DVR_GIS_UPLOADINFO;

//·ÀÆÆ»µ±¨¾¯ÐÅÏ¢ÉÏ´«
typedef struct  tagNET_DVR_VANDALPROOF_ALARM
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    DWORD         dwRelativeTime; //Ïà¶ÔÊ±±ê
    DWORD        dwAbsTime; //¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO    struDevInfo;//Ç°¶ËÉè±¸
    BYTE  byRes[256];
}NET_DVR_VANDALPROOF_ALARM,*LPNET_DVR_VANDALPROOF_ALARM;

//¼¯ÖÐ²¼¿Ø²ÎÊýÅäÖÃ
typedef    struct tagNET_DVR_CENTRALIZEDCTRL_CFG
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnable;//0-½áÊø£¬1-¿ªÊ¼
    BYTE        byLatitudeType ;//Î³¶ÈÀàÐÍ£¬0-±±Î³£¬1-ÄÏÎ³
    BYTE        byLongitudeType ;// ¾­¶ÈÀàÐÍ£¬0-¶«¾­£¬1-Î÷¾­
    BYTE        byRes1;
    NET_DVR_LLI_PARAM    struLatitude;     /*Î³¶È*/
    NET_DVR_LLI_PARAM    struLongitude; /*¾­¶È*/
    DWORD       dwTimeOut;//³¬Ê±Ê±¼ä [60s, 6*60*60s]
    BYTE        byControlType;//¼¯ÖÐ²¼¿Ø·½Ê½ 0-Ç¿ÖÆ²¼¿Ø£¬1-·ÇÇ¿ÖÆ²¼¿Ø
    BYTE        byRes[127];
}NET_DVR_CENTRALIZEDCTRL_CFG,*LPNET_DVR_CENTRALIZEDCTRL_CFG;

//Çò»úµÄGISÐÅÏ¢Êý¾Ý
typedef struct tagNET_DVR_GIS_INFO
{
    DWORD  dwSize;//½á¹¹Ìå´óÐ¡
    float  fAzimuth;//µç×ÓÂÞÅÌµÄ·½Î»ÐÅÏ¢£»·½Î»½Ç[0.00¡ã,360.00¡ã)
    float  fHorizontalValue;//Ë®Æ½ÊÓ³¡½Ç£¬¾«È·µ½Ð¡ÊýµãºóÃæÁ½Î»
    float  fVerticalValue;//´¹Ö±ÊÓ³¡½Ç£¬¾«È·µ½Ð¡ÊýµãºóÃæÁ½Î»
    float  fVisibleRadius;//µ±Ç°¿ÉÊÓ°ë¾¶£¬¾«È·µ½Ð¡ÊýµãºóÃæÁ½Î»
    float  fMaxViewRadius;//×î´ó¿ÉÊÓ°ë¾¶£¬¾«È·µ½Ð¡ÊýµãºóÃæ0Î»£¨Ô¤Áô´¦Àí£©
    BYTE   byLatitudeType ;//Î³¶ÈÀàÐÍ£¬0-±±Î³£¬1-ÄÏÎ³
    BYTE   byLongitudeType ;// ¾­¶ÈÀàÐÍ£¬0-¶«¾­£¬1-Î÷¾­
    BYTE   byRes1[2] ;
    NET_DVR_LLI_PARAM     struLatitude;     /*Î³¶È*/
    NET_DVR_LLI_PARAM    struLongitude; /*¾­¶È*/
    NET_DVR_PTZPOS_PARAM struPtzPos; //ptz×ø±ê
    NET_DVR_SENSOR_PARAM struSensorParam;//SensorÐÅÏ¢
    BYTE  byRes[256];
}NET_DVR_GIS_INFO,*LPNET_DVR_GIS_INFO;

//×ÓÂÞÅÌ¹ØÁª·ÀÆÆ»µ²ÎÊý
typedef    struct tagNET_DVR_VANDALPROOFALARM_CFG
{
    DWORD    dwSize;//½á¹¹Ìå´óÐ¡
    BYTE    bySensitivity;//ÁéÃô¶È[1,100] (Ö§³ÖÁéÃô¶ÈÅäÖÃ£¬ÁéÃô¶ÈÖµ´ó£¬Ô½ÈÝÒ×´¥·¢£¬ÖµÔ½Ð¡£¬Ô½ÄÑ´¥·¢)
    BYTE    byUploadEnabled;//ÆôÓÃ·ÀÆÆ»µ±¨¾¯ÉÏ´«Ê¹ÄÜ 0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE    byVoiceWarningEnabled;//ÆôÓÃ·ÀÆÆ»µ±¨¾¯ÓïÒôÌáÊ¾Ê¹ÄÜ 0-²»ÆôÓÃ£¬1-ÆôÓÃ 
    BYTE    byEnable;// ÆôÓÃ¼ì²â·ÀÆÆ»µ±¨¾¯ 0-¹Ø±Õ£¬1-¿ªÊ¼
    BYTE    byRes[124];
}NET_DVR_VANDALPROOFALARM_CFG,*LPNET_DVR_VANDALPROOFALARM_CFG;

typedef    struct tagNET_DVR_AZIMUTHINFO
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    float       fDegree;//·½Î»½Ç¶ÈÊý(¾«È·µ½Ð¡ÊýµãºóÁ½Î»)
    BYTE        byAzimuth; //·½Î»½ÇÐÅÏ¢ 0-¶«±±,1-Î÷±±,2-¶«ÄÏ,3-Î÷ÄÏ,4-¶«,5-Î÷,6-ÄÏ,7-±±
    BYTE        byRes[127];
}NET_DVR_AZIMUTHINFO,*LPNET_DVR_AZIMUTHINFO;

//µç×ÓÂÞÅÌ½ÃÕý¡¢Ö¸ÏòÕý±±¿ØÖÆÌõ¼þ½á¹¹
typedef    struct tagNET_DVR_COMPASS_COND
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    DWORD        dwChannel;//Í¨µÀºÅ
    BYTE        byRes[128];
}NET_DVR_COMPASS_COND,*LPNET_DVR_COMPASS_COND;

typedef    struct tagNET_DVR_POSITION_CFG
{
    DWORD     dwSize;//½á¹¹Ìå´óÐ¡
    BYTE     bySoftWorkMode;//¹¤×÷Ä£Ê½ 0-×Ô¶¯£¬1-ÊÖ¶¯
    BYTE     byRes[127];
}NET_DVR_POSITION_CFG,*LPNET_DVR_POSITION_CFG;

typedef    struct tagNET_DVR_STREAMING_COND
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    DWORD        dwChannel;//Í¨µÀºÅ
    BYTE        byStreamType;//ÂëÁ÷ÀàÐÍ0-Ö÷ÂëÁ÷£¬1-×ÓÂëÁ÷£¬2-ÂëÁ÷3
    BYTE        byRes[127];
}NET_DVR_STREAMING_COND,*LPNET_DVR_STREAMING_COND;

//ÎÀÐÇ¶¨Î»²ÎÊýÅäÖÃ
typedef    struct tagNET_DVR_SATELLITETIME_CFG
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnable;//ÎÀÐÇ¶¨Î»Ð£Ê±Ê¹ÄÜ 0-²»¿ªÆô£¬1-¿ªÆô
    BYTE        byRes;
    WORD        wTimeInterval;//Ð£Ê±Ê±¼ä¼ä¸ô(s)
    BYTE        byRes1[124];
}NET_DVR_SATELLITETIME_CFG,*LPNET_DVR_SATELLITETIME_CFG;

#define MAX_SIGNAL_JOINT_NUM       64  //×î´óµÄÆ´½Ó¹æÄ£
typedef struct tagNET_DVR_SIGNAL_JOINT_CFG
{
    DWORD    dwSize;
    BYTE  sCamName[NAME_LEN] ;  //Æ´½ÓºóÐÅºÅÔ´Ãû³Æ
    BYTE  byEnable;               //Ê¹ÄÜ£¬0-²»Ê¹ÄÜ  !0-Ê¹ÄÜ
    BYTE  byCamMode ;            //Æ´½ÓºóÐÅºÅÔ´ÀàÐÍ£¬NET_DVR_CAM_JOINT
    BYTE  byRows ;               //Æ´½ÓÐÐÊý
    BYTE  byColumns ;            //Æ´½ÓÁÐÊý
    DWORD dwSignalNo[MAX_SIGNAL_JOINT_NUM]; //ÐÅºÅÔ´ºÅ,Ç°byRows* byColumnsÏîÓÐÐ§
    DWORD dwJointNo;           //Æ´½Ó±àºÅ£¨»ñÈ¡ÓÐÐ§£©
    DWORD dwSignalNoJoint;      //Æ´½ÓºóµÄÐÅºÅÔ´ºÅ£¨»ñÈ¡ÓÐÐ§£©
    BYTE  byRes[64];
} NET_DVR_SIGNAL_JOINT_CFG, *LPNET_DVR_SIGNAL_JOINT_CFG;

typedef struct  tagNET_DVR_SIGNAL_CUTPARAM
{
    DWORD    dwSize;
    DWORD    dwSignalNo;     //ÐÅºÅÔ´ºÅ 
    DWORD     dwCutTop;      //ÉÏ·½²Ã¼ôÏñËØÖµ,0´ú±í»¹Ô­
    DWORD      dwCutBottom;   //ÏÂ·½²Ã¼ôÏñËØÖµ,0´ú±í»¹Ô­
    DWORD      dwCutLeft;     //×ó±ß²Ã¼ôÏñËØÖµ,0´ú±í»¹Ô­
    DWORD      dwCutRight;    //ÓÒ±ß²Ã¼ôÏñËØÖµ,0´ú±í»¹Ô­
    BYTE     byRes2[32];  
} NET_DVR_SIGNAL_CUTPARAM, *LPNET_DVR_SIGNAL_CUTPARAM; 

typedef struct tagNET_DVR_WALL_RELATION_CFG 
{
    DWORD dwSize; 
    BYTE  byEnable;           //¹ØÁª£¬ 0-²»¹ØÁª !0-¹ØÁª
    BYTE  byRealWallNo ;      //ÎïÀíÇ½ºÅ
    BYTE  byRes[14] ; 
}NET_DVR_WALL_RELATION_CFG, *LPNET_DVR_WALL_RELATION_CFG;


typedef struct tagNET_DVR_INPUTSTREAMCFG_V40
{
    DWORD        dwSize ;
    BYTE        byValid ;     //
    BYTE        byCamMode ;//¼ûNET_DVR_CAM_MODE
    WORD        wInputNo ; //ÐÅºÅÔ´ÐòºÅ
    BYTE        sCamName[NAME_LEN] ;
    NET_DVR_VIDEOEFFECT     struVideoEffect ;//ÊÓÆµ²ÎÊý
    NET_DVR_PU_STREAM_CFG    struPuStream ;    //ipÊäÈëÊ±Ê¹ÓÃ
    WORD        wBoardNum ;      //ÐÅºÅÔ´ËùÔÚµÄ°å¿¨ºÅ£¬Ö»ÄÜ»ñÈ¡
    WORD        wInputIdxOnBoard ; //ÐÅºÅÔ´ÔÚ°å¿¨ÉÏµÄÎ»ÖÃ£¬Ö»ÄÜ»ñÈ¡
    DWORD    dwResolution ;//·Ö±æÂÊ
    BYTE    byVideoFormat ;//ÊÓÆµÖÆÊ½£¬¼ûVIDEO_STANDARD
    BYTE    byStatus;    //ÐÅºÅÔ´×´Ì¬£¬0-×Ö¶ÎÎÞÐ§ 1-ÓÐÐÅºÅ 2-ÎÞÐÅºÅ 3-Òì³£ 
    BYTE    sGroupName[NAME_LEN/*32*/];    //ÍøÂçÐÅºÅÔ´·Ö×é ×éÃû
    BYTE    byJointMatrix ;            //¹ØÁª¾ØÕó£¬0-²»¹ØÁª  1-¹ØÁª£¬µ±ÊäÈëÐÅºÅÔ´ÎªNET_DVR_CAM_BNC£¬NET_DVR_CAM_VGA£¬NET_DVR_CAM_DVI£¬NET_DVR_CAM_HDMI,ÖÐµÄÒ»ÖÖÊ±£¬¸Ã²ÎÊýÓÐÐ§¡£
    BYTE    byJointNo ;         //Æ´½ÓÐÅºÅÔ´µÄÆ´½Ó±àºÅ(Ö»ÄÜ»ñÈ¡)
    BYTE    byColorMode;      //É«²ÊÄ£Ê½£¬ 0-×Ô¶¨Òå 1-ÈñÀû 2-ÆÕÍ¨ 3-ÈáºÍ£¬µ±Îª×Ô¶¨ÒåÊ±£¬Ê¹ÓÃstruVideoEffectÉèÖÃ
    BYTE    byScreenServer; //¹ØÁªÆÁÄ»·þÎñÆ÷£¬0-²»Áª£¬1-¹ØÁª
    BYTE   byRes1[2];
    DWORD	dwInputSignalNo; //ÊäÈëÐÅºÅÔ´±àºÅ£¨ÐÂ£©
    BYTE	byRes[120];
}NET_DVR_INPUTSTREAMCFG_V40, *LPNET_DVR_INPUTSTREAMCFG_V40 ;

typedef struct  tagNET_DVR_INPUTSTREAM_PTZCFG_PARAM 
{
    DWORD    dwSize;
    WORD     wPTZProtocol;  //¿ØÇòÐ­ÒéÀàÐÍ£¬Ë÷ÒýÖµ 
    BYTE     byRes[34];    
}NET_DVR_INPUTSTREAM_PTZCFG_PARAM, *LPNET_DVR_INPUTSTREAM_PTZCFG_PARAM; 

//³µÁ¾³ÆÖØ
typedef struct  tagNET_DVR_VEHICLE_WEIGHT_RESULT_
{
    BYTE      byIsOverWeight;         //ÊÇ·ñ³¬ÏÞ
    BYTE      byAxleNum;            //ÖáÊý
    BYTE      byRes[2];               //Ô¤Áô 
    float     fOverWeight;          //³¬ÏÞÖØÁ¿(¶Ö)£¬Êµ¼ÊÖµÀ©´ó1000±¶´«Êä£¨Êµ¼ÊÖµ¾«È·µ½Ð¡ÊýµãºóÈýÎ»£©
    float     fWeight;              //³µÉíÖØÁ¿(¶Ö)£¬Êµ¼ÊÖµÀ©´ó1000±¶´«Êä£¨Êµ¼ÊÖµ¾«È·µ½Ð¡ÊýµãºóÈýÎ»£©
    float     fLimitWeight;         //ÏÞÖÆÖØÁ¿(¶Ö)£¬Êµ¼ÊÖµÀ©´ó1000±¶´«Êä£¨Êµ¼ÊÖµ¾«È·µ½Ð¡ÊýµãºóÈýÎ»£©
    float     fAxleLen;             //Öá¾à(Ã×)£¬Êµ¼ÊÖµÀ©´ó100±¶´«Êä£¨Êµ¼ÊÖµ¾«È·µ½Ð¡ÊýµãºóÁ½Î»£©
    char      sDevDescInfo[MAX_DEVDESC_LEN/*64*/]; //Éè±¸ÃèÊöÐÅÏ¢
    BYTE      byRes2[64];            //Ô¤Áô
}NET_DVR_VEHICLE_WEIGHT_RESULT, *LPNET_DVR_VEHICLE_WEIGHT_RESULT;

// ³µÅÆ¼ì²â½á¹û
typedef struct tagNET_DVR_PLATE_RESULT_V50
{
    DWORD   dwSize;        //½á¹¹³¤¶È
    DWORD   dwMatchNo;        //Æ¥ÅäÐòºÅ,ÓÉ(³µÁ¾ÐòºÅ,Êý¾ÝÀàÐÍ,³µµÀºÅ)×é³ÉÆ¥ÅäÂë
    BYTE    byGroupNum;    //Í¼Æ¬×éÊýÁ¿£¨Ò»Á¾¹ý³µÏà»ú¶à´Î×¥ÅÄµÄÊýÁ¿£¬´ú±íÒ»×éÍ¼Æ¬µÄ×ÜÊý£¬ÓÃÓÚÑÓÊ±Æ¥ÅäÊý¾Ý£©
    BYTE    byPicNo;        //Á¬ÅÄµÄÍ¼Æ¬ÐòºÅ£¨½ÓÊÕµ½Í¼Æ¬×éÊýÁ¿ºó£¬±íÊ¾½ÓÊÕÍê³É;½ÓÊÕ³¬Ê±²»×ãÍ¼Æ¬×éÊýÁ¿Ê±£¬¸ù¾ÝÐèÒª±£Áô»òÉ¾³ý£©
    BYTE    bySecondCam;    //ÊÇ·ñµÚ¶þÏà»ú×¥ÅÄ£¨ÈçÔ¶½ü¾°×¥ÅÄµÄÔ¶¾°Ïà»ú£¬»òÇ°ºó×¥ÅÄµÄºóÏà»ú£¬ÌØÊâÏîÄ¿ÖÐ»áÓÃµ½£©
    BYTE    byFeaturePicNo; //´³ºìµÆµç¾¯£¬È¡µÚ¼¸ÕÅÍ¼×÷ÎªÌØÐ´Í¼,0xff-±íÊ¾²»È¡
    BYTE    byDriveChan;        //´¥·¢³µµÀºÅ
    BYTE    byVehicleType;     //³µÁ¾ÀàÐÍ£¬²Î¿¼VTR_RESULT
    BYTE    byDetSceneID;//¼ì²â³¡¾°ºÅ[1,4], IPCÄ¬ÈÏÊÇ0
    BYTE    byVehicleAttribute;// 0-ÎÞ¸½¼ÓÊôÐÔ,1-»Æ±ê³µ(ºá·ù),2-Î£ÏÕÆ·³µÁ¾
    WORD    wIllegalType;       //Î¥ÕÂÀàÐÍ²ÉÓÃ¹ú±ê¶¨Òå
    BYTE    byIllegalSubType[8];   //Î¥ÕÂ×ÓÀàÐÍ
    BYTE    byPostPicNo;    //Î¥ÕÂÊ±È¡µÚ¼¸ÕÅÍ¼Æ¬×÷Îª¿¨¿ÚÍ¼,0xff-±íÊ¾²»È¡
    BYTE    byChanIndex;        //Í¨µÀºÅ£¨±£Áô£©
    WORD    wSpeedLimit;        //ÏÞËÙÉÏÏÞ£¨³¬ËÙÊ±ÓÐÐ§£©
    BYTE    byRes2[2];
    NET_DVR_PLATE_INFO  struPlateInfo;     //³µÅÆÐÅÏ¢½á¹¹
    NET_DVR_VEHICLE_INFO struVehicleInfo;    //³µÁ¾ÐÅÏ¢
    BYTE    byMonitoringSiteID[48];        //¼à²âµã±àºÅ
    BYTE    byDeviceID[48];                //Éè±¸±àºÅ
    BYTE    byDir;            //¼à²â·½Ïò£¬1-ÉÏÐÐ£¬2-ÏÂÐÐ£¬3-Ë«Ïò£¬4-ÓÉ¶«ÏòÎ÷£¬5-ÓÉÄÏÏò±±,6-ÓÉÎ÷Ïò¶«£¬7-ÓÉ±±ÏòÄÏ£¬8-ÆäËü
    BYTE    byDetectType;    //¼ì²â·½Ê½,1-µØ¸Ð´¥·¢£¬2-ÊÓÆµ´¥·¢£¬3-¶àÖ¡Ê¶±ð£¬4-À×´ï´¥·¢
    //¹ØÁª³µµÀ·½ÏòÀàÐÍ£¬²Î¿¼ITC_RELA_LANE_DIRECTION_TYPE
    //¸Ã²ÎÊýÎª³µµÀ·½Ïò²ÎÊý£¬Óë¹ØÁª³µµÀºÅ¶ÔÓ¦£¬È·±£³µµÀÎ¨Ò»ÐÔ¡£
    BYTE    byRelaLaneDirectionType;
    BYTE    byRes3; //±£Áô
    //µ±wIllegalType²ÎÊýÎª¿ÕÊ±£¬Ê¹ÓÃ¸Ã²ÎÊý¡£ÈôwIllegalType²ÎÊýÎªÓÐÖµÊ±£¬ÒÔwIllegalType²ÎÊýÎª×¼£¬¸Ã²ÎÊýÎÞÐ§¡£
    DWORD   dwCustomIllegalType; //Î¥ÕÂÀàÐÍ¶¨Òå(ÓÃ»§×Ô¶¨Òå)
    BYTE    byRes4[9]; //±£Áô
    BYTE    byPilotSafebelt;//0-±íÊ¾Î´Öª,1-Ïµ°²È«´ø,2-²»Ïµ°²È«´ø
    BYTE    byCopilotSafebelt;//0-±íÊ¾Î´Öª,1-Ïµ°²È«´ø,2-²»Ïµ°²È«´ø
    BYTE    byPilotSunVisor;//0-±íÊ¾Î´Öª,1-²»´ò¿ªÕÚÑô°å,2-´ò¿ªÕÚÑô°å
    BYTE    byCopilotSunVisor;//0-±íÊ¾Î´Öª, 1-²»´ò¿ªÕÚÑô°å,2-´ò¿ªÕÚÑô°å
    BYTE    byPilotCall;// 0-±íÊ¾Î´Öª, 1-²»´òµç»°,2-´òµç»°
    //0-¿ªÕ¢£¬1-Î´¿ªÕ¢ (×¨ÓÃÓÚÀúÊ·Êý¾ÝÖÐÏà»ú¸ù¾ÝºÚ°×Ãûµ¥Æ¥Åäºó£¬ÊÇ·ñ¿ªÕ¢³É¹¦µÄ±êÖ¾)
    BYTE    byBarrierGateCtrlType; 
    BYTE    byAlarmDataType;//0-ÊµÊ±Êý¾Ý£¬1-ÀúÊ·Êý¾Ý
    NET_DVR_TIME_V30  struSnapFirstPicTime;//¶ËµãÊ±¼ä(ms)£¨×¥ÅÄµÚÒ»ÕÅÍ¼Æ¬µÄÊ±¼ä£©
    DWORD   dwIllegalTime;//Î¥·¨³ÖÐøÊ±¼ä£¨ms£© = ×¥ÅÄ×îºóÒ»ÕÅÍ¼Æ¬µÄÊ±¼ä - ×¥ÅÄµÚÒ»ÕÅÍ¼Æ¬µÄÊ±¼ä
    DWORD   dwPicNum;        //Í¼Æ¬ÊýÁ¿£¨ÓëpicGroupNum²»Í¬£¬´ú±í±¾ÌõÐÅÏ¢¸½´øµÄÍ¼Æ¬ÊýÁ¿£¬Í¼Æ¬ÐÅÏ¢ÓÉstruVehicleInfoEx¶¨Òå    
    NET_ITS_PICTURE_INFO struPicInfo[6];         //Í¼Æ¬ÐÅÏ¢,µ¥ÕÅ»Øµ÷£¬×î¶à6ÕÅÍ¼£¬ÓÉÐòºÅÇø·Ö
    NET_DVR_VEHICLE_WEIGHT_RESULT struWeightResult; //³µÁ¾³ÆÖØ
    BYTE     byRes[256]; //Ô¤Áô
}NET_DVR_PLATE_RESULT_V50, *LPNET_DVR_PLATE_RESULT_V50;

typedef struct _NET_DVR_NORMAL_SCHEDTIME_
{
    NET_DVR_SCHEDTIME struTime;
    BYTE byAlarmType;//0-Íâ³ö²¼·À£¬1-ÁôÊØ²¼·À£¬2-¼´Ê±²¼·À
    BYTE byRes[3];
}NET_DVR_NORMAL_SCHEDTIME,*LPNET_DVR_NORMAL_SCHEDTIME;

typedef struct tagNET_DVR_SUBSYSTEM_ALARM
{
    DWORD dwSize;
    NET_DVR_NORMAL_SCHEDTIME struNormalSchedtime[MAX_DAYS][MAX_TIMESEGMENT_V30];
    //ÈÕ³£¼Æ»®²¼·ÀÊ±¼ä¶Î
    BYTE byNormalSchedTimeOn; //ÈÕ³£¼Æ»®ÊÇ·ñÆôÓÃ
    BYTE byMandatoryAlarm;//0-·ÇÇ¿ÖÆ²¼·À£¬1-Ç¿ÖÆ²¼·À Ö¸µ±·ÀÇøÓÐÎÊÌâÊÇÊÇ·ñÎªÅÔÂ·²¼·À
    BYTE byRes[254];
}NET_DVR_SUBSYSTEM_ALARM,*LPNET_DVR_SUBSYSTEM_ALARM;


#define MAX_WHITELIST_PHONE_NUM      16

typedef struct _NET_DVR_ALARM_PHONECFG
{
    DWORD    dwSize; 
    BYTE    byEnable;//ÊÇ·ñÆôÓÃ 0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE    byRes1[3];
    BYTE    byPhoneNumber[MAX_PHONE_NUM/*32*/];
    DWORD    dwArmRight; //²¼·ÀÈ¨ÏÞ£¬°´Î»£¬bit0Îª1±íÊ¾¶Ô×ÓÏµÍ³1ÓÐ²¼·ÀÈ¨ÏÞ£¬ÒÀ´ËÀàÍÆ
    DWORD    dwDisArmRight; //³··ÀÈ¨ÏÞ£¬°´Î»£¬bit0Îª1±íÊ¾¶Ô×ÓÏµÍ³1ÓÐ³··ÀÈ¨ÏÞ£¬ÒÀ´ËÀàÍÆ
    DWORD    dwClearAlarmRight; //Ïû¾¯È¨ÏÞ£¬°´Î»£¬bit0Îª1±íÊ¾¶Ô×ÓÏµÍ³1ÓÐÏû¾¯È¨ÏÞ£¬ÒÀ´ËÀàÍÆ
    BYTE    byZoneReport[MAX_ALARMHOST_ALARMIN_NUM/*512*/]; //·ÀÇø±¨¸æÀàÐÍ£¬0-²»ÉÏ´«£¬1-ÉÏ´« 
    DWORD    dwNonZoneReport; //·Ç·ÀÇø±¨¾¯±¨¸æ bit0-Èí·ÀÇø±¨¸æ bit1-ÏµÍ³×´Ì¬±¨¸æ bit2-È¡Ïû±¨¸æ bit3-²âÊÔ±¨¸æ         bit4-²¼·À±¨¸æ bit5-³··À±¨¸æ bit6-Ð®³Ö±¨¸æ bit7-±¨¾¯»Ö¸´±¨¸æ bit8-ÅÔÂ·±¨¸æ bit9-ÅÔÂ·»Ö¸´±¨¸æ¡£
    BYTE    byIntervalTime; //0-0s,1-10s,2-30s,3-1min,4-5min,5-10min,6-×Ô¶¨Òå£¨1~5999s£©
    BYTE    byRes2;
    WORD    wDefineIntervalTime; //µ±byIntervalTimeÎª6Ê±ÓÐÐ§£¬×Ô¶¨ÒåÊ±¼ä£¨1~5999s£©
    BYTE    byRes3[128];
}NET_DVR_ALARM_PHONECFG, *LPNET_DVR_ALARM_PHONECFG;

typedef struct tagNET_DVR_MODULE_INFO
{
    DWORD    dwSize;
    BYTE    byModuleType;            //Íâ½Ó´¥·¢Æ÷ÀàÐÍ£¬1-¼üÅÌ£¬2-´¥·¢Æ÷£¬3-·ÀÇø
    BYTE    byKeyBoardType;            //1-LCD,2-LED
    BYTE    byTriggerType;            // 1-±¾µØ´¥·¢Æ÷£¬ 2-4Â·´¥·¢Æ÷£¬3-8Â·´¥·¢Æ÷£¬4-µ¥·ÀÇø´¥·¢Æ÷£¬5-32Â·´¥·¢Æ÷
    BYTE    byZoneType;                //·ÀÇøÀàÐÍ£¬1-±¾µØ·ÀÇø£¬2-µ¥·ÀÇø£¬3-Ë«·ÀÇø£¬4-8·ÀÇø£¬5-8Â·Ä£ÄâÁ¿·ÀÇø, 6-µ¥·ÀÇø´¥·¢Æ÷
    WORD    wModuleAddress;            //Íâ½Ó´¥·¢Æ÷µØÖ·£¬À©Õ¹Ä£¿é´Ó0~255£¬0xFFFF±íÊ¾ÎÞÐ§
    BYTE    byRes2[2];                //±£Áô
    char    sModelInfo[32];            //Ä£¿éÐÅÏ¢
    char    sDeviceVersionInfo[32];    //°æ±¾ÐÅÏ¢
    BYTE    byRes[128];                //±£Áô
}NET_DVR_MODULE_INFO,*LPNET_DVR_MODULE_INFO;

typedef struct tagNET_DVR_ONE_OUTPUT_SCHEDULE_RULE_V40
{
    BYTE                       byEnable;// 0- ·ñ£¬1- ÊÇ
    BYTE                       byRes1[3];
    NET_DVR_SCHEDDATE          struDate;
    NET_DVR_OUTPUT_SCHEDULE    struOutputSchedule[MAX_TIMESEGMENT_V30/*8*/];
    BYTE                       byTriggerIndex[MAX_ALARMHOST_ALARMOUT_NUM];//ÏÂ±ê±íÊ¾´¥·¢Æ÷ºÅ£¬Öµ0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE                       byRes2[64];
}NET_DVR_ONE_OUTPUT_SCHEDULE_RULE_V40,*LPNET_DVR_ONE_OUTPUT_SCHEDULE_RULE_V40;
//Ê±¿ØÊä³ö¹æÔò²ÎÊý
typedef struct tagNET_DVR_OUTPUT_SCHEDULE_RULECFG_V40
{   
    DWORD  dwSize; //½á¹¹Ìå´óÐ¡
    NET_DVR_ONE_OUTPUT_SCHEDULE_RULE_V40 struOutputRule[MAX_RULE_NUM/*8*/]; //×î¶àÖ§³Ö8¸öÈÕÆÚÇø¶ÎµÄ¹æÔòÅäÖÃ£¬¶ÔÓÚ¶¨Ê±¿ª/¹Ø´¥·¢Æ÷Ö»ÐèÒªÊ¹ÓÃÒ»¸öÈÕÆÚÇø¶Î¾Í¿ÉÒÔÁË
    BYTE   byRes[64];  //±£Áô
}NET_DVR_OUTPUT_SCHEDULE_RULECFG_V40,*LPNET_DVR_OUTPUT_SCHEDULE_RULECFG_V40;

//µ¥¸öÊ±¿ØÊä³ö¹æÔòÅäÖÃ
typedef struct tagNET_DVR_ONE_OUTPUT_SCH_RULECFG_V40
{
    DWORD        dwSize; 
    NET_DVR_ONE_OUTPUT_SCHEDULE_RULE_V40 struOutputRule;
    BYTE        byRes[256];  //±£Áô
}NET_DVR_ONE_OUTPUT_SCH_RULECFG_V40,*LPNET_DVR_ONE_OUTPUT_SCH_RULECFG_V40;

typedef struct tagNET_DVR_ALARM_CAPTRUE_CFG
{
    DWORD        dwSize;
    BYTE        byBeforeAlarmPic;    //¶ÔÓ¦·Ö±æÂÊÏÂ¿ÉÉèÖÃ±¨¾¯Ç°Í¼Æ¬×î´óÊý4CIF£º10ÕÅ£¬2CIF£º20ÕÅ£¬CIF£º40ÕÅ£¬QCIF£º80ÕÅ£»WD1:10ÕÅ,XVGA:10ÕÅ,720P:10ÕÅ,1080P:10ÕÅ
    BYTE        byAfterAlarmPic;    //¶ÔÓ¦·Ö±æÂÊÏÂ¿ÉÉèÖÃ±¨¾¯ºóÍ¼Æ¬×î´óÊý 4CIF£º10ÕÅ£¬2CIF£º20ÕÅ£¬CIF£º40ÕÅ£¬QCIF£º80ÕÅ£»WD1:10ÕÅ,XVGA:10ÕÅ,720P:10ÕÅ,1080P:10ÕÅ
    WORD          wInterval; //¼ä¸ôÊ±¼ä µ¥Î»s
    BYTE        byResolution;    //Í¼Æ¬·Ö±æÂÊ1-CIF£¬2-2CIF£¬3-4CIF£¬4-QCIF£¬5-WD1£¬6-VGA,7-XVGA£¬8-720P£¬9-1080P
    BYTE           byRes[63];          // ±£Áô×Ö½Ú
}NET_DVR_ALARM_CAPTRUE_CFG, *LPNET_DVR_ALARM_CAPTRUE_CFG;

#define PRIOR_SCHEDTIME            30

typedef struct _NET_DVR_PRIOR_SCHEDTIME_
{
    DWORD dwSize;
    NET_DVR_SCHEDDATE struData;
    NET_DVR_NORMAL_SCHEDTIME struOneDayTime[8];
    BYTE    byEnable; //ÊÇ·ñÆôÓÃ 0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byRes1[3];
    BYTE bySubSystem[32];//×ÓÏµÍ³£¬ÏÂ±ê±íÊ¾×ÓÏµÍ³ºÅ 0-²»Ö§³Ö£¬1-Ö§³Ö
    BYTE byMandatoryAlarm;//0-·ÇÇ¿ÖÆ²¼·À£¬1-Ç¿ÖÆ²¼·À Ö¸µ±·ÀÇøÓÐÎÊÌâÊÇÊÇ·ñÎªÅÔÂ·²¼·À
    BYTE byRes[63];
}NET_DVR_PRIOR_SCHEDTIME,*LPNET_DVR_PRIOR_SCHEDTIME;

typedef struct tagNET_DVR_TAMPER_ALARMIN_PARAM
{
    DWORD   dwSize;
    BYTE    byTamperType;     // 0-ÎÞ,1-³£¿ª£¬2-³£±Õ
    BYTE    byUploadAlarmRecoveryReport;    //ÊÇ·ñÉÏ´«·ÀÇø±¨¾¯»Ö¸´±¨¸æ£¬0-²»ÉÏ´«£¬1-ÉÏ´« 
    BYTE    byRes1[2];
    BYTE    byAssociateAlarmOut[MAX_ALARMHOST_ALARMOUT_NUM];  //·ÀÇø¹ØÁª´¥·¢Æ÷    BYTE            byAssociateSirenOut[8];        //¾¯ºÅÊä³ö Êý×é0 ±íÊ¾¾¯ºÅ1 ÖµÎª1±íÊ¾Êä³ö 0 ±íÊ¾²»Êä³ö 
    BYTE    byAssociateSirenOut[8];        //¾¯ºÅÊä³ö Êý×é0 ±íÊ¾¾¯ºÅ1 ÖµÎª1±íÊ¾Êä³ö 0 ±íÊ¾²»Êä³ö 
    BYTE    byTamperResistor;    //·À²ðµç×è£¬µ¥Î»Ç§Å· £¬ 0-ÎÞÐ§ 1-2.2 £¬2--3.3, 3-4.7 £¬4-5.6 £¬ 5-8.2 £¬0xff-×Ô¶¨Òå
    BYTE    byRes2[3];
    float    fTamperResistorManual;/*·À²ðÊÖ¶¯µç×è£¬1.0-10.0£¬¾«È·µ½Ð¡ÊýµãºóÒ»Î»£¬µ¥Î»Ç§Å·£¬byTamperResistorÎª0xffÊ±ÓÐÐ§*/
    BYTE    byRes3[36];            // ±£Áô×Ö½Ú
}NET_DVR_TAMPER_ALARMIN_PARAM, *LPNET_DVR_TAMPER_ALARMIN_PARAM;


typedef struct tagNET_DVR_REMOTECONTROLLER_PERMISSION_CFG
{
    DWORD    dwSize;
    BYTE    byEnable;
    BYTE    byRes1;
    WORD    wRemoteCtrllerID;//Ò£¿ØÆ÷ºÅ ´Ó1¿ªÊ¼
    BYTE    sDevSn[16];/*²úÆ·ÐòÁÐºÅ*/
    BYTE    byArmRight;            /*0-ÎÞ²¼·ÀÈ¨ÏÞ£¬1-ÓÐ²¼·ÀÈ¨ÏÞ*/
    BYTE    byDisArmRight;        /*0-ÎÞ³··ÀÈ¨ÏÞ£¬1-ÓÐ³··ÀÈ¨ÏÞ*/
    BYTE    byArmReportRight;    /*0-ÎÞ´«²¼·À±¨¸æÈ¨ÏÞ£¬1-ÓÐ´«²¼·À±¨¸æÈ¨ÏÞ*/
    BYTE    byDisArmReportRight;/*0-ÎÞÉÏ´«³··À±¨¸æÈ¨ÏÞ£¬1-ÓÐÉÏ´«³··À±¨¸æÈ¨ÏÞ*/
    BYTE    byClearAlarmRight;    /*0-ÎÞÏû¾¯È¨ÏÞ£¬1-ÓÐÏû¾¯È¨ÏÞ*/
    BYTE    bySubSystemID;       /* Éè±¸(Ò£¿ØÆ÷)×ÓÏµÍ³ºÅ,1~8 */
    BYTE    byKeyboardAddr;      /* ½ÓÊÕ¼üÅÌµÄµØÖ·,ÔÚÅä¶ÔÊ±ÉèÖÃ */    
    BYTE    byRes2[65];
}NET_DVR_REMOTECONTROLLER_PERMISSION_CFG, *LPNET_DVR_REMOTECONTROLLER_PERMISSION_CFG;


typedef struct tagNET_DVR_KEYBOARD_CFG
{
    DWORD    dwSize;
    BYTE    byEnableLock;        //ÊÇ·ñÆôÓÃ¼üÅÌËø¶¨,0--²»ÆôÓÃ, 1--ÆôÓÃ
    BYTE    byErrorTimes;        //ÊäÈë¼üÅÌÓÃ»§ÃÜÂë´íÎó´ÎÊý£¨Ëø¶¨¼üÅÌ£©
    WORD    wLockTime;            //Ëø¶¨¼üÅÌÊ±¼ä£¬µ¥Î»Ãë
    BYTE    byRes[128];
}NET_DVR_KEYBOARD_CFG, *LPNET_DVR_KEYBOARD_CFG;


typedef struct tagNET_DVR_ALARMHOST_WIRELESS_BUSINESS_COND
{
    DWORD    dwSize;
    BYTE    byCommOperatorNum[NAME_LEN/*32*/];//Í¨ÐÅÔËÓªÉÌºÅÂë
    BYTE    byQueryCode[16];//ÒµÎñ²éÑ¯´úÂë
    BYTE    byBusinessType;//ÒµÎñÀàÐÍ 0-»°·Ñ£¬1-Á÷Á¿
    BYTE    byRes[35];
}NET_DVR_ALARMHOST_WIRELESS_BUSINESS_COND, *LPNET_DVR_ALARMHOST_WIRELESS_BUSINESS_COND;

typedef struct tagNET_DVR_ALARMHOST_WIRELESS_BUSINESS_INFO
{
    DWORD    dwSize;
    BYTE    by3GBusiness[1024];//3GÒµÎñÍ¨¹ý¶ÌÐÅ²éÑ¯
    BYTE    byRes[32];
}NET_DVR_ALARMHOST_WIRELESS_BUSINESS_INFO, *LPNET_DVR_ALARMHOST_WIRELESS_BUSINESS_INFO;

typedef struct tagNET_DVR_PREVIEW_DELAY_CFG
{
    DWORD    dwSize;
    WORD    wdelayTime;//ÑÓ³ÙÔ¤ÀÀÊ±¼ä£¬µ¥Î»£ºÃë
    BYTE    byRes[130];
}NET_DVR_PREVIEW_DELAY_CFG, *LPNET_DVR_PREVIEW_DELAY_CFG;

typedef struct tagNET_DVR_AUXILIARY_DEV_UPGRADE_PARAM
{
    DWORD	dwSize;
	DWORD	dwDevNo;	//Éè±¸ºÅ
	BYTE	byDevType;	//Éý¼¶Éè±¸ÀàÐÍ 0-¼üÅÌ,1-»úÐ¾,2-ÍøÂçÄ£¿é,3-Â·ÓÉÆ÷
    BYTE	byRes[131];
}NET_DVR_AUXILIARY_DEV_UPGRADE_PARAM,*LPNET_DVR_AUXILIARY_DEV_UPGRADE_PARAM;

typedef struct tagNET_DVR_CALL_ROOM_CFG
{
    DWORD    dwSize;
    SHORT   nFloorNumber;    //²ãºÅ
    WORD    wRoomNumber;    //·¿¼äºÅ
    BYTE    byManageCenter;    //ÊÇ·ñºô½Ð¹ÜÀíÖÐÐÄ
    BYTE    byRes[127];
}NET_DVR_CALL_ROOM_CFG,*LPNET_DVR_CALL_ROOM_CFG;

typedef struct tagNET_DVR_VIDEO_CALL_COND
{
    DWORD    dwSize;
    BYTE    byRes[128];
}NET_DVR_VIDEO_CALL_COND,*LPNET_DVR_VIDEO_CALL_COND;

//ÉóÑ¶°¸¼þÐÅÏ¢
typedef struct tagNET_DVR_INQUEST_CASE_INFO
{
    DWORD    dwSize;
    BYTE    sCaseNo[INQUEST_CASE_NO_LEN];        //°¸¼þ±àºÅ
    BYTE    sCaseName[INQUEST_CASE_NAME_LEN];    //°¸¼þÃû³Æ£»
    BYTE    sCustomInfo1[CUSTOM_INFO_LEN];        //×Ô¶¨ÒåÐÅÏ¢1£»
    BYTE    sCustomInfo2[CUSTOM_INFO_LEN];        //×Ô¶¨ÒåÐÅÏ¢2£»
    BYTE    sCustomInfo3[CUSTOM_INFO_LEN];        //×Ô¶¨ÒåÐÅÏ¢3
    BYTE    byShowCaseInfoTime; /* °¸¼þÐÅÏ¢ÏÔÊ¾Ê±¼ä,µ¥Î»Ãë, È¡Öµ·¶Î§1~60Ãë*/
    BYTE    byShowCaseInfo;    //°¸¼þ¿ªÊ¼ÊÇ·ñÏÔÊ¾°¸¼þÐÅÏ¢£¬0-²»ÏÔÊ¾£¬1-ÏÔÊ¾
    BYTE    byPosition;        //°¸¼þÏÔÊ¾Î»ÖÃ£¬0-×óÉÏ£¬1-×óÏÂ
    BYTE    byRes[257]; //±£Áô
}NET_DVR_INQUEST_CASE_INFO, *LPNET_DVR_INQUEST_CASE_INFO;

typedef struct tagNET_DVR_CASE_INFO_CTRL_PARA
{
    DWORD    dwSize;
    DWORD    dwChannel;//ÉóÑ¶Í¨µÀºÅ
    BYTE    byShowCaseInfoTime;    //ÏÔÊ¾³ÖÐøÊ±¼ä
    BYTE    byRes[131];
}NET_DVR_CASE_INFO_CTRL_PARAM, *LPNET_DVR_CASE_INFO_CTRL_PARA;

typedef struct tagNET_DVR_INQUEST_USER_RIGHT_CFG
{
    DWORD    dwSize;
    /*Êý×é0: ÉóÑ¶¼ÇÂ¼É¾³ýÈ¨ÏÞ*/
    BYTE    byLocalRight[MAX_RIGHT];    /* ±¾µØÈ¨ÏÞ */
    /*Êý×é0: Ô¶³ÌÒôÆµÔ¤ÀÀÈ¨ÏÞ*/
    BYTE    byRemoteRight[MAX_RIGHT];/* Ô¶³ÌÈ¨ÏÞ */ 
    BYTE    byNetAudioRight[MAX_CHANNUM_V40];    /* Ô¶³ÌÒôÆµÔ¤ÀÀÈ¨ÏÞ£¬Êý×éÏÂ±ê±íÊ¾Í¨µÀ£¬Öµ±íÊ¾ÓÐÎÞÈ¨ÏÞ£¬0-ÎÞÈ¨ÏÞ£¬1-ÓÐÈ¨ÏÞ*/
    BYTE    byRes[512*9];         //±£Áô9ÖÖÈ¨ÏÞ¿ÉÀ©Õ¹
}NET_DVR_INQUEST_USER_RIGHT_CFG, *LPNET_DVR_INQUEST_USER_RIGHT_CFG;

typedef struct tagNET_DVR_INQUEST_MIX_AUDIOIN_CFG
{
    DWORD    dwSize;
    BYTE    byEnable;    //ÊÇ·ñÆôÓÃ»ìÒô£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE    byRes1[3];    //±£Áô
    DWORD    dwMixCnt;  /*»ìÒôµÄÍ¨µÀÊý*/
    BYTE    bySrcChan[MAX_MIX_CHAN_NUM];    /*Êý×éÏÂ±ê±íÊ¾»ìÒôÍ¨µÀºÅ£¨Ä£ÄâÍ¨µÀ¡¢IPÍ¨µÀ£©,ÊýÖµ0±íÊ¾²»»ì£¬ÊýÖµ1±íÊ¾»ìÈë*/
    BYTE    byLineIn[MAX_LINE_IN_CHAN_NUM];    /*Êý×éÏÂ±ê±íÊ¾»ìÈëLine InÍ¨µÀºÅ,ÊýÖµ0±íÊ¾²»»ì£¬ÊýÖµ1±íÊ¾»ìÈë*/
    BYTE    byMic[MAX_MIC_CHAN_NUM];        /*Êý×éÏÂ±ê±íÊ¾»ìÈëMicÍ¨µÀºÅ,ÊýÖµ0±íÊ¾²»»ì£¬ÊýÖµ1±íÊ¾»ìÈë*/
    BYTE    byMixAudioDelay;    //»ìÒôÑÓ³Ù£¬µ¥Î»£ºÖ¡£¬·¶Î§0-63
    BYTE    byRes2[127];    //±£Áô
}NET_DVR_INQUEST_MIX_AUDIOIN_CFG, *LPNET_DVR_INQUEST_MIX_AUDIOIN_CFG;

typedef struct tagNET_DVR_FACECAPTURE_STATISTICS_COND
{
    DWORD  dwSize;
    DWORD  dwChannel; //Í¨µÀºÅ
    NET_DVR_TIME_EX struStartTime; //¿ªÊ¼Ê±¼ä
    BYTE   byReportType; //Í³¼Æ±¨±íÀàÐÍ£º1-ÈÕ±¨±í£¬2-ÖÜ±¨±í£¬3-ÔÂ±¨±í£¬4-Äê±¨±í
    BYTE   byStatType; //Êý¾ÝÀàÐÍÍ³¼Æ£ºBit0-ÄêÁä¶Î£¬Bit1-ÐÔ±ð£¬Bit2-ÈËÊý
    BYTE   byEnableProgramStatistics; //ÊÇ·ñ°´½ÚÄ¿Í³¼Æ£¬0-·ñ£¬1-ÊÇ
    BYTE   byRes1;
    DWORD  dwPlayScheduleNo; //°´½ÚÄ¿Í³¼ÆÊ±¹ØÁªµÄÈÕ³ÌºÅ
    BYTE   byRes[120];
}NET_DVR_FACECAPTURE_STATISTICS_COND,*LPNET_DVR_FACECAPTURE_STATISTICS_COND;

typedef struct tagNET_DVR_AGEGROUP_PARAM_
{
    DWORD   dwTeenage;//ÉÙÄê£¨ÈËÊý£©
    DWORD    dwYouth;//ÇàÄê£¨ÈËÊý£©
    DWORD    dwMidLife;//ÖÐÄê£¨ÈËÊý£©
    DWORD    dwElderly;//ÀÏÄê£¨ÈËÊý£©
    BYTE   byRes[64];
}NET_DVR_AGEGROUP_PARAM,*LPNET_DVR_AGEGROUP_PARAM;

typedef struct tagNET_DVR_SEXGROUP_PARAM_
{
    DWORD   dwMale;//ÄÐ£¨ÈËÊý£©
    DWORD    dwFemale;//Å®£¨ÈËÊý£©
    BYTE   byRes[64];
}NET_DVR_SEXGROUP_PARAM,*LPNET_DVR_SEXGROUP_PARAM;

typedef struct tagNET_DVR_FACECAPTURE_STATISTICS_RESULT_
{
    DWORD dwSize;
    NET_DVR_TIME_EX   struStartTime;/*¼ä¸ô¿ªÊ¼Ê±¼ä*/
    NET_DVR_TIME_EX   struEndTime;/*¼ä¸ô½áÊøÊ±¼ä*/
    BYTE   byStatType;//Êý¾ÝÀàÐÍÍ³¼Æ£ºBit0-ÄêÁä¶ÎÓÐÐ§£¬Bit1-ÐÔ±ðÓÐÐ§£¬Bit2-ÈËÊýÓÐÐ§
    BYTE   byRes[7];
    DWORD  dwPeopleNum;//ÈËÊýÍ³¼Æ
    NET_DVR_AGEGROUP_PARAM  struAgeGroupParam;//ÄêÁä¶ÎÈËÊýÍ³¼Æ
    NET_DVR_SEXGROUP_PARAM  struSexGroupParam;//ÐÔ±ðÈËÊýÍ³¼Æ
    NET_DVR_PROGRAM_INFO struProgramInfo;        //½ÚÄ¿ÐÅÏ¢
    BYTE   byRes1[76];
}NET_DVR_FACECAPTURE_STATISTICS_RESULT,*LPNET_DVR_FACECAPTURE_STATISTICS_RESULT;

//»ñÈ¡½»Í¨Êý¾ÝÌõ¼þ½á¹¹ 
typedef struct tagNET_DVR_TRAFFIC_DATA_QUERY_COND_
{
    DWORD  dwSize;
    /*
    Bit0-Í¨µÀÓÐÐ§ 
    Bit1-Ê±¼äÓÐÐ§
    Bit2-³µÅÆºÅÓÐÐ§
    Bit3-³µÅÆÀàÐÍÓÐÐ§
    Bit4-³µÅÆÑÕÉ«ÓÐÐ§
    Bit5-³µÉíÑÕÉ«ÓÐÐ§
    Bit6-³µÁ¾ÀàÐÍÓÐÐ§
    Bit7-³µÁ¾Æ·ÅÆÓÐÐ§
    Bit8-³µµÀºÅÓÐÐ§
    Bit9-¼à²â·½ÏòÓÐÐ§
    Bit10-×îµÍËÙ¶ÈÓÐÐ§
    Bit11-×î¸ßËÙ¶ÈÓÐÐ§
    Bit12-Êý¾ÝÀàÐÍÓÐÐ§
    Bit13-²¼¿Ø·½Ê½ÀàÐÍÓÐÐ§
    Bit14-Î¥·¨È¡Ö¤ÓÐÐ§
    Bit15-ÊÂ¼þÀàÐÍÓÐÐ§
    Bit16-È¡Ö¤ÀàÐÍÓÐÐ§
    */
    DWORD  dwQueryCond;//²éÑ¯Ìõ¼þ 0±íÊ¾ÎÞÐ§£¬1±íÊ¾ÓÐÐ§
    DWORD  dwChannel;//Ä¬ÈÏÊÇ1£¨[1~32]£¬bit0±íÊ¾Í¨µÀ1£¬ÒÀ´ÎÀàÍÆbit31±íÊ¾Í¨µÀ32£©
    NET_DVR_TIME_V30 struStartTime;//¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30 struEndTime;//½áÊøÊ±¼ä
    char  sLicense[MAX_LICENSE_LEN/*16*/];//(Éè±¸Ö§³ÖÄ£ºý²éÑ¯, GB2312±àÂë)
    /*
    Bit0-Î´Öª£¨ÆäËû£©
    Bit1-±ê×¼ÃñÓÃ³µÓë¾ü³µ 
    Bit2-02Ê½ÃñÓÃ³µÅÆ     
    Bit3-Îä¾¯³µ           
    Bit4-¾¯³µ             
    Bit5-ÃñÓÃ³µË«ÐÐÎ²ÅÆ   
    Bit6-Ê¹¹Ý³µÅÆ         
    Bit7-Å©ÓÃ³µ           
    Bit8-Ä¦ÍÐ³µ    
    */
    DWORD  dwPlateType;//³µÅÆÀàÐÍ£¨Ö§³Ö°´Î»±íÊ¾£¬¿ÉÒÔ¸´Ñ¡£©
    /*
    Bit0-Î´Öª£¨ÆäËû£©
    Bit1-»ÆÉ«
    Bit2-°×É«
    Bit3-ºÚÉ«
    Bit4-ÂÌÉ«
    Bit5-À¶É«    
    */
    DWORD  dwPlateColor;//³µÅÆÑÕÉ«£¨Ö§³Ö°´Î»±íÊ¾£¬¿ÉÒÔ¸´Ñ¡£©
    /*
    Bit0-Î´Öª£¨ÆäËû£©
    Bit1-°×É«
    Bit2-ÒøÉ«
    Bit3-»ÒÉ«
    Bit4-ºÚÉ«
    Bit5-ºìÉ«
    Bit6-ÉîÀ¶É«    
    Bit7-À¶É«
    Bit8-»ÆÉ«
    Bit9-ÂÌÉ«
    Bit10-×ØÉ«
    Bit11-·ÛÉ«
    Bit12-×ÏÉ«    
    Bit13-Éî»ÒÉ«    
    */
    DWORD  dwVehicleColor;//³µÉíÑÕÉ«£¨Ö§³Ö°´Î»±íÊ¾£¬¿ÉÒÔ¸´Ñ¡£©
    /*
    Bit0-Î´Öª£¨ÆäËû£©
    Bit1-¿Í³µ
    Bit2-´ó»õ³µ
    Bit3-½Î³µ
    Bit4-Ãæ°ü³µ
    Bit5-Ð¡»õ³µ
    Bit6-ÐÐÈË
    Bit7-¶þÂÖ³µ
    Bit8-ÈýÂÖ³µ
    Bit9-SUV/MPV
    Bit10-ÖÐÐÍ¿Í³µ
    */
    DWORD  dwVehicleType;//³µÁ¾ÀàÐÍ£¨Ö§³Ö°´Î»±íÊ¾£¬¿ÉÒÔ¸´Ñ¡£©
     /**
    Bit0-ÆäËû£¨±£Áô£©
    Bit1-µÍËÙ
    Bit2-³¬ËÙ
    Bit3-ÄæÐÐ
    Bit4-´³ºìµÆ
    Bit5-Ñ¹³µµÀÏß
    Bit6-²»°´µ¼Ïò
    Bit7-Â·¿ÚÖÍÁô
    Bit8-»úÕ¼·Ç
    Bit9-Î¥·¨±äµÀ
    Bit10-²»°´³µµÀ
    Bit11-Î¥·´½ûÁî
    Bit12-Â·¿ÚÍ£³µ
    Bit13-ÂÌµÆÍ£³µ
    Bit14-Î´ÀñÈÃÐÐÈË
    Bit15-Î¥ÕÂÍ£³µ
    Bit16-Î¥ÕÂµôÍ·
    Bit17-Õ¼ÓÃÓ¦¼±³µµÀ
    Bit18-Î´Ïµ°²È«´ø 
    */
    DWORD dwIllegalType;
    /**
    Bit0-ÆäËû£¨±£Áô£©
    Bit1-Óµ¶Â
    Bit2-Í£³µ
    Bit3-ÄæÐÐ
    Bit4-ÐÐÈË
    Bit5-Å×È÷Îï
    Bit6-ÑÌÎí
    Bit7-Ñ¹Ïß
    Bit8-ºÚÃûµ¥
    Bit9-³¬ËÙ
    Bit10-±äµÀ
    Bit11-µôÍ·
    Bit12-»úÕ¼·Ç
    Bit13-¼ÓÈû 
    */
    DWORD dwEventType;
    /**
    Bit0-ÆäËû£¨±£Áô£©
    Bit1-³ÇÊÐ¹«Â·Î¥·¨Í£³µ
    Bit2-¸ßËÙ¹«Â·Î¥·¨Í£³µ
    Bit3-Ñ¹Ïß
    Bit4-ÄæÐÐ
    Bit5-Î¥·¨±äµÀ
    Bit6-»úÕ¼·Ç
    */
    DWORD  dwForensiceType;
    WORD   wVehicleLogoRecog;  //³µÁ¾Ö÷Æ·ÅÆ£¬²Î¿¼"³µÁ¾Ö÷Æ·ÅÆ.xlsx" £¨½öµ¥Ñ¡£©
    BYTE   byLaneNo;//³µµÀºÅ£¨0~255,0ºÅ³µµÀ ±íÊ¾ ³µµÀºÅÎ´Öª£©
    BYTE   byDirection;//¼à²â·½Ïò£¬1-ÉÏÐÐ£¬2-ÏÂÐÐ£¬3-Ë«Ïò£¬4-ÓÉ¶«ÏòÎ÷£¬5-ÓÉÄÏÏò±±,6-ÓÉÎ÷Ïò¶«£¬7-ÓÉ±±ÏòÄÏ    
    WORD   wMinSpeed;//×îµÍËÙ¶È£¨0~999£©µ¥Î»km/h
    WORD   wMaxSpeed;//×î¸ßËÙ¶È£¨0~999£©µ¥Î»km/h
    BYTE   byDataType;//Êý¾ÝÀàÐÍ 0-¿¨¿ÚÊý¾Ý£¬1-Î¥·¨Êý¾Ý£¬2-½»Í¨ÊÂ¼þ£¬3-È¡Ö¤Êý¾Ý £¨½öµ¥Ñ¡£©
    BYTE   byExecuteCtrl;//²¼¿Ø 0-°×Ãûµ¥£¬1-ºÚÃûµ¥£¬0xff-ÆäËû
    BYTE   byRes[254];
}NET_DVR_TRAFFIC_DATA_QUERY_COND,*LPNET_DVR_TRAFFIC_DATA_QUERY_COND;

//½»Í¨Í¼Æ¬²ÎÊý×Ó½á¹¹
typedef struct tagNET_DVR_TRAFFIC_PICTURE_PARAM_
{
    NET_DVR_TIME_V30     struRelativeTime; //×¥ÅÄÏà¶ÔÊ±±ê
    NET_DVR_TIME_V30    struAbsTime;  //×¥ÅÄ¾ø¶ÔÊ±±ê
    char szPicName[PICTURE_NAME_LEN/*64*/];
    BYTE  byPicType;//Í¼Æ¬ÀàÐÍ 0-³µÅÆÍ¼£¬1-×¥ÅÄÔ­Í¼£¬2-ºÏ³ÉÍ¼£¬3-ÌØÐ´Í¼
    BYTE  byRes[63];
}NET_DVR_TRAFFIC_PICTURE_PARAM,*LPNET_DVR_TRAFFIC_PICTURE_PARAM;

//½»Í¨Êý¾Ý½á¹¹Ìå
typedef struct tagNET_DVR_TRAFFIC_DATA_QUERY_RESULT_
{
    DWORD  dwSize;
    DWORD  dwChannel;//Ä¬ÈÏÊÇ1£¨[1~32]£©
    char  sLicense[MAX_LICENSE_LEN/*16*/];
    /*
    Bit0-Î´Öª£¨ÆäËû£©
    Bit1-±ê×¼ÃñÓÃ³µÓë¾ü³µ 
    Bit2-02Ê½ÃñÓÃ³µÅÆ     
    Bit3-Îä¾¯³µ           
    Bit4-¾¯³µ             
    Bit5-ÃñÓÃ³µË«ÐÐÎ²ÅÆ   
    Bit6-Ê¹¹Ý³µÅÆ         
    Bit7-Å©ÓÃ³µ           
    Bit8-Ä¦ÍÐ³µ    
    */
    DWORD  dwPlateType;//³µÅÆÀàÐÍ
    /*
    Bit0-Î´Öª£¨ÆäËû£©
    Bit1-»ÆÉ«
    Bit2-°×É«
    Bit3-ºÚÉ«
    Bit4-ÂÌÉ«
    Bit5-À¶É«    
    */
    DWORD  dwPlateColor;//³µÅÆÑÕÉ«
    /*
    Bit0-Î´Öª£¨ÆäËû£©
    Bit1-°×É«
    Bit2-ÒøÉ«
    Bit3-»ÒÉ«
    Bit4-ºÚÉ«
    Bit5-ºìÉ«
    Bit6-ÉîÀ¶É«    
    Bit7-À¶É«
    Bit8-»ÆÉ«
    Bit9-ÂÌÉ«
    Bit10-×ØÉ«
    Bit11-·ÛÉ«
    Bit12-×ÏÉ«    
    Bit13-Éî»ÒÉ«    
    */
    DWORD  dwVehicleColor;//³µÉíÑÕÉ«
    /*
    Bit0-Î´Öª£¨ÆäËû£©
    Bit1-¿Í³µ
    Bit2-´ó»õ³µ
    Bit3-½Î³µ
    Bit4-Ãæ°ü³µ
    Bit5-Ð¡»õ³µ
    Bit6-ÐÐÈË
    Bit7-¶þÂÖ³µ
    Bit8-ÈýÂÖ³µ
    */
    DWORD  dwVehicleType;//³µÁ¾ÀàÐÍ
    /**
    Bit0-ÆäËû£¨±£Áô£©
    Bit1-µÍËÙ
    Bit2-³¬ËÙ
    Bit3-ÄæÐÐ
    Bit4-´³ºìµÆ
    Bit5-Ñ¹³µµÀÏß
    Bit6-²»°´µ¼Ïò
    Bit7-Â·¿ÚÖÍÁô
    Bit8-»úÕ¼·Ç
    Bit9-Î¥·¨±äµÀ
    Bit10-²»°´³µµÀ
    Bit11-Î¥·´½ûÁî
    Bit12-Â·¿ÚÍ£³µ
    Bit13-ÂÌµÆÍ£³µ
    Bit14-Î´ÀñÈÃÐÐÈË
    Bit15-Î¥ÕÂÍ£³µ
    Bit16-Î¥ÕÂµôÍ·
    Bit17-Õ¼ÓÃÓ¦¼±³µµÀ
    Bit18-Î´Ïµ°²È«´ø 
    */
    DWORD dwIllegalType;
    /**
    Bit0-ÆäËû£¨±£Áô£©
    Bit1-Óµ¶Â
    Bit2-Í£³µ
    Bit3-ÄæÐÐ
    Bit4-ÐÐÈË
    Bit5-Å×È÷Îï
    Bit6-ÑÌÎí
    Bit7-Ñ¹Ïß
    Bit8-ºÚÃûµ¥
    Bit9-³¬ËÙ
    Bit10-±äµÀ
    Bit11-µôÍ·
    Bit12-»úÕ¼·Ç
    Bit13-¼ÓÈû 
    */
    DWORD dwEventType;
    /**
    Bit0-ÆäËû£¨±£Áô£©
    Bit1-³ÇÊÐ¹«Â·Î¥·¨Í£³µ
    Bit2-¸ßËÙ¹«Â·Î¥·¨Í£³µ
    Bit3-Ñ¹Ïß
    Bit4-ÄæÐÐ
    Bit5-Î¥·¨±äµÀ
    Bit6-»úÕ¼·Ç
    */
    DWORD dwForensiceType;
    WORD  wVehicleLogoRecog;  //³µÁ¾Ö÷Æ·ÅÆ£¬²Î¿¼"³µÁ¾Ö÷Æ·ÅÆ.xlsx" 
    BYTE  byLaneNo;//³µµÀºÅ£¨0~255,0ºÅ³µµÀ ±íÊ¾ ³µµÀºÅÎ´Öª£©
    BYTE  byDirection;//¼à²â·½Ïò£¬1-ÉÏÐÐ£¬2-ÏÂÐÐ£¬3-Ë«Ïò£¬4-ÓÉ¶«ÏòÎ÷£¬5-ÓÉÄÏÏò±±,6-ÓÉÎ÷Ïò¶«£¬7-ÓÉ±±ÏòÄÏ    
    WORD  wSpeed;//ËÙ¶È£¨0~999£©µ¥Î»km/h
    BYTE  byDataType;//Êý¾ÝÀàÐÍ: 0-¿¨¿Ú 1-Î¥·¨ 2-ÊÂ¼þ 3-È¡Ö¤
    BYTE  byRes[253];
    NET_DVR_TRAFFIC_PICTURE_PARAM struTrafficPic[MAX_TRAFFIC_PICTURE_NUM/*8*/];
}NET_DVR_TRAFFIC_DATA_QUERY_RESULT,*LPNET_DVR_TRAFFIC_DATA_QUERY_RESULT;

//³¤Á¬½Ó»ñÈ¡½»Í¨Á÷Á¿Ìõ¼þ½á¹¹
typedef struct tagNET_DVR_TRAFFIC_FLOW_QUERY_COND_
{
    DWORD  dwSize;
    /**
    Bit0-Í¨µÀÓÐÐ§
    Bit1-Ê±¼äÓÐÐ§
    Bit2-³µµÀºÅÓÐÐ§
    */
    DWORD  dwQueryCond;//²éÑ¯Ìõ¼þ 0-ÎÞÌõ¼þ
    DWORD  dwChannel;//Ä¬ÈÏÊÇ1£¨[1~32]£¬bit0±íÊ¾Í¨µÀ1£¬ÒÀ´ÎÀàÍÆbit31±íÊ¾Í¨µÀ32£©
    DWORD  dwResChan[10];//Ô¤Áô¿ÉÀ©Õ¹µÄÍ¨µÀºÅ
    NET_DVR_TIME_V30 struStartTime;//¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30 struEndTime;//½áÊøÊ±¼ä
    BYTE   byLaneNo;//³µµÀºÅ£¨0~255,0ºÅ³µµÀ ±íÊ¾ ³µµÀºÅÎ´Öª£©
    BYTE   byRes[255];
}NET_DVR_TRAFFIC_FLOW_QUERY_COND,*LPNET_DVR_TRAFFIC_FLOW_QUERY_COND;

//³¤Á¬½Ó»ñÈ¡½»Í¨Á÷Á¿½á¹¹
typedef struct tagNET_DVR_TRAFFIC_FLOW_QUERY_RESULT_
{
    DWORD  dwSize;
    NET_DVR_TIME_V30 struStartTime;//¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30 struEndTime;//½áÊøÊ±¼ä
    DWORD  dwChannel;//Ä¬ÈÏÊÇ1£¨[1~32]£©
    DWORD  dwFlow;//³µÁ÷Á¿
    BYTE   byLaneNo;//³µµÀºÅ£¨0~255,0ºÅ³µµÀ ±íÊ¾ ³µµÀºÅÎ´Öª£©    
    BYTE   byRes[511];
}NET_DVR_TRAFFIC_FLOW_QUERY_RESULT,*LPNET_DVR_TRAFFIC_FLOW_QUERY_RESULT;

//Í¼Æ¬²ÎÊý
typedef struct tagNET_DVR_PIC_INFO
{
    BYTE   byPicType;        //Í¼Æ¬ÀàÐÍ£¬0-jpg
    BYTE   byRes1[3];        //±£Áô
    DWORD  dwPicWidth;       //Í¼Æ¬¿í¶È
    DWORD  dwPicHeight;      //Í¼Æ¬¸ß¶È
    DWORD  dwPicDataLen;     //Í¼Æ¬Êý¾Ý´óÐ¡
    char*  byPicDataBuff;    //Í¼Æ¬Êý¾Ý»º³åÇø
    BYTE   byRes2[32];       //±£Áô
}NET_DVR_PIC_INFO,*LPNET_DVR_PIC_INFO;

typedef struct tagNET_DVR_VCA_RULE_COLOR_CFG
{
    DWORD       dwSize;//½á¹¹Ìå´óÐ¡
    BYTE       byEnable;       //¹æÔòÊÇ·ñÆôÓÃ£¬ 0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE       byRuleID;       //¹ØÁªµÄ¹æÔòID
    BYTE       byColorBlockNo;  //ÑÕÉ«¿éÐòºÅ£¬´Ó1¿ªÊ¼
    BYTE       byRes1;      //±£Áô
    NET_DVR_PIC_INFO  struPicInfo;  //Í¼Æ¬ÑÕÉ«ÐÅÏ¢
    BYTE     byRes[64];
}NET_DVR_VCA_RULE_COLOR_CFG,*LPNET_DVR_VCA_RULE_COLOR_CFG;

typedef struct tagNET_DVR_VCA_RULE_COLOR_COND
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    DWORD     dwChannel;     //Í¨µÀºÅ
    BYTE        byRuleID;       //¹ØÁªµÄ¹æÔòID  0±íÊ¾²»¹ØÁª
    BYTE        byRes[127];
}NET_DVR_VCA_RULE_COLOR_COND,*LPNET_DVR_VCA_RULE_COLOR_COND;

//LLDP²ÎÊý
typedef struct tagNET_DVR_LLDP_PORT_CFG
{
    BYTE byCardNo;      //¿¨ºÅ
    BYTE byPortNo;      //¶Ë¿ÚºÅ
    BYTE byEnabledTx;   //Ê¹ÄÜ·¢ËÍlldp°ü£¬0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE byEnabledRx;   //Ê¹ÄÜ½ÓÊÕlldp°ü£¬0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE byRes[12];
}NET_DVR_LLDP_PORT_CFG, *LPNET_DVR_LLDP_PORT_CFG;

typedef struct tagNET_DVR_LLDP_CFG
{
    DWORD dwSize;
    BYTE  byEnabled;    //Ê¹ÄÜLLDP¹¦ÄÜ£¬0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE  byRes1[3];
    DWORD dwHoldTime;   //±£³ÖÊ±¼ä£¬µ¥Î»£ºÃë
    DWORD dwReiniTime;  //ÖØÐÂ³õÊ¼»¯Ê±¼ä£¬µ¥Î»£ºÃë
    DWORD dwPacketTime; //´ò°üÊ±¼ä£¬µ¥Î»£ºÃë
    NET_DVR_LLDP_PORT_CFG struLLDPPortCfg[MAX_PORT_NUM]; //¸÷¶Ë¿ÚLLDP²ÎÊý
    BYTE  byRes2[32];
}NET_DVR_LLDP_CFG, *LPNET_DVR_LLDP_CFG;

//¹âÏËÊÕ·¢Æ÷»ù±¾ÐÅÏ¢
typedef struct tagNET_DVR_CARD_PORT_INFO
{
    DWORD dwPortNo;              //¶Ë¿ÚºÅ£¬0-ÎÞÐ§
    BYTE  byPortName[NAME_LEN];  //¶Ë¿ÚÃû
    BYTE  byWorkMode;            //¹¤×÷Ä£Ê½£¬1-ACCESS£¬2-TRUNK£¬3-HYPRID
    BYTE  byBandWidth;           //´ø¿í£¬1-100M£¬2-1G£¬3-10G
    BYTE  byPortType;            //¶Ë¿ÚÀàÐÍ£¬1-µç¿Ú£¬2-¹â¿Ú£¬3-¹âµç¸´ÓÃ¿Ú
    BYTE  byRes[13];
}NET_DVR_CARD_PORT_INFO, *LPNET_DVR_CARD_PORT_INFO;

typedef struct tagNET_DVR_NETMGR_CARD_INFO
{
    BYTE  byTypeName[NAME_LEN];      //ÐÍºÅÃû³Æ
    BYTE  bySerialNo[SERIALNO_LEN];  //ÐòÁÐºÅ
    BYTE  bySoftwareVersion[VERSION_LEN]; //Èí¼þ°æ±¾
    NET_DVR_IPADDR struIPAddr;           //IPµØÖ·
    DWORD dwSlotNo;    //Íø¹Ü¿¨²ÛÎ»ºÅ£¨Ö÷²ÛÎ»£©
    BYTE  byStructureType;           //½á¹¹ÀàÐÍ£¬1-2U£¬2-4U
    BYTE  byRes1[3];
    NET_DVR_CARD_PORT_INFO struNetPortInfo[MAX_SINGLE_CARD_PORT_NO]; //¸÷Íø¿ÚÐÅÏ¢
    BYTE  byRes2[32];    
}NET_DVR_NETMGR_CARD_INFO, *LPNET_DVR_NETMGR_CARD_INFO;

typedef struct tagNET_DVR_FUNC_CARD_INFO
{
    DWORD dwCardNo;                 //¿¨ºÅ£¬´Ó1¿ªÊ¼
    BYTE  byTypeName[NAME_LEN];     //ÐÍºÅÃû³Æ
    BYTE  bySerialNo[SERIALNO_LEN]; //ÐòÁÐºÅ
    BYTE  bySoftwareVersion[VERSION_LEN]; //Èí¼þ°æ±¾
    DWORD dwMainSlot;               //Ö÷²ÛÎ»£¬´Ó1¿ªÊ¼
    BYTE  byStructureType;          //½á¹¹ÀàÐÍ£¬1-2U£¬2-4U
    BYTE  byRes1[3];
    NET_DVR_CARD_PORT_INFO struFuncPortInfo[MAX_SINGLE_CARD_PORT_NO]; //¸÷¶Ë¿Ú²ÎÊý
    BYTE  byRes2[32];
}NET_DVR_FUNC_CARD_INFO, *LPNET_DVR_FUNC_CARD_INFO;

typedef struct tagNET_DVR_FIBER_CONVERT_BASIC
{
    DWORD dwSize;
    BYTE  byPowerType;                                       //µçÔ´ÀàÐÍ£¬1-µ¥µçÔ´£¬2-Ë«µçÔ´
    BYTE  byRes1[3];
    DWORD dwSlotNum;                                             //Íø¹Ü¿¨²ÛÎ»ºÅ£¨Ö÷²ÛÎ»£©
    NET_DVR_NETMGR_CARD_INFO struNetCardInfo;                     //Íø¹Ü¿¨ÐÅÏ¢
    NET_DVR_FUNC_CARD_INFO   struFuncCardInfo[MAX_FUNC_CARD_NUM]; //¹¦ÄÜ¿¨ÐÅÏ¢
    BYTE  byRes2[64];
}NET_DVR_FIBER_CONVERT_BASIC, *LPNET_DVR_FIBER_CONVERT_BASIC;

//¹âÏËÊÕ·¢Æ÷¹¤×÷×´Ì¬ÐÅÏ¢
typedef struct tagNET_DVR_CARD_PORT_STATE
{
    BYTE  byValid;                 //ÊÇ·ñÓÐÐ§£¬0-ÎÞÐ§£¬1-ÓÐÐ§
    BYTE  byPortType;            //¶Ë¿ÚÀàÐÍ£¬1-µç¿Ú£¬2-¹â¿Ú£¬3-¹âµç¸´ÓÃ¿Ú
    BYTE  byLinkState;           //Á¬½Ó×´Ì¬£¬0-Î´Á¬½Ó£¬1-ÒÑÁ¬½Ó
    BYTE  byRes1;
    DWORD dwSendBytes;           //·¢ËÍµÄ×Ö½ÚÊý
    DWORD dwRecvBytes;           //½ÓÊÕÊý¾Ý°üÊý
    DWORD dwRecvLostPackets;     //½ÓÊÕ¶ª°üÊý
    DWORD dwRecvCrcErrPackets;   //½ÓÊÕCRCÐ£Ñé´íÎó°üÊý
    DWORD dwRecvFragmentPackets; //½ÓÊÕËéÆ¬¡¢³åÍ»¼°¹ý¶Ì×Ö½Ú°üÊý£¨°ü³¤¶È¾ùÐ¡ÓÚ64×Ö½Ú£©
    BYTE  byRes2[16];
}NET_DVR_CARD_PORT_STATE, *LPNET_DVR_CARD_PORT_STATE;

typedef struct tagNET_DVR_NET_CARD_STATE
{
    NET_DVR_CARD_PORT_STATE struNetPortState[MAX_SINGLE_CARD_PORT_NO];    //¸÷¶Ë¿Ú×´Ì¬    
    BYTE byRes[64];
}NET_DVR_NET_CARD_STATE, *LPNET_DVR_NET_CARD_STATE;

typedef struct tagNET_DVR_FUNC_CARD_STATE
{
    BYTE  byEnabled;    //´Ë½á¹¹ÊÇ·ñÓÐÐ§£¬0-ÎÞÐ§£¬1-ÓÐÐ§
    BYTE  byRes1[3];
    DWORD dwCardNo; //¿¨ºÅ
    NET_DVR_CARD_PORT_STATE struFuncCardPortState[MAX_SINGLE_CARD_PORT_NO];
    BYTE  byRes[32];    
}NET_DVR_FUNC_CARD_STATE, *LPNET_DVR_FUNC_CARD_STATE;

typedef struct tagNET_DVR_FIBER_CONVERT_STATE
{
    DWORD dwSize;
    NET_DVR_NET_CARD_STATE struNetCardState;                      //Íø¹Ü¿¨×´Ì¬
    NET_DVR_FUNC_CARD_STATE struFuncCardState[MAX_FUNC_CARD_NUM]; //¹¦ÄÜ¿¨×´Ì¬
    BYTE  byRes[32];
}NET_DVR_FIBER_CONVERT_STATE, *LPNET_DVR_FIBER_CONVERT_STATE;

//¹âÏËÊÕ·¢Æ÷ÍØÆËÐÅÏ¢
typedef struct tagNET_DVR_FC_PORT_TOPOLOGY
{
    DWORD dwPortNo;                 //¶Ë¿ÚºÅ£¬0-ÎÞÐ§£¬·Ç0Îª¹¦ÄÜ¿¨¶Ë¿ÚºÅ
    BYTE  byPortType;               //¶Ë¿ÚÀàÐÍ£¬1-µç¿Ú£¬2-¹â¿Ú£¬3-¹âµç¸´ÓÃ¿Ú
    BYTE  byLocalWorkMode;          //±¾µØ¹¤×÷Ä£Ê½£¬1-ACCESS£¬2-TRUNK£¬3-HYPRID
    BYTE  byLocalBandWidth;         //±¾µØ´ø¿í£¬1-100M£¬2-1G£¬3-10G
    BYTE  byRes1[1];
    BYTE  byPeerTypeName[NAME_LEN]; //¶Ô¶ËÉè±¸ÀàÐÍÃû³Æ
    BYTE  byPeerMac[MACADDR_LEN];   //¶Ô¶ËMACµØÖ·
    DWORD dwPeerPortNo;             //¶Ô¶Ë¶Ë¿ÚºÅ
    BYTE  byPeerWorkMode;           //¶Ô¶Ë¹¤×÷Ä£Ê½£¬1-ACCESS£¬2-TRUNK£¬3-HYPRID
    BYTE  byPeerBandWidth;          //¶Ô¶Ë´ø¿í£¬1-100M£¬2-1G£¬3-10G
    BYTE  byRes2[30];
}NET_DVR_FC_PORT_TOPOLOGY, *LPNET_DVR_FC_PORT_TOPOLOGY;

typedef struct tagNET_DVR_FC_CARD_TOPOLOGY
{
    BYTE  byEnable;                    //´Ë½á¹¹ÌåÊÇ·ñÓÐÐ§£¬0-ÎÞÐ§£¬·Ç0-ÓÐÐ§
    BYTE  byRes1[3];
    DWORD dwCardNo;                 //¿¨ºÅ£¬0-Íø¹Ü¿¨£¬´óÓÚ0-¹¦ÄÜ¿¨
    DWORD dwSlotNum;                //¿¨Õ¼ÓÃµÄ²ÛÎ»Êý
    BYTE  byTypeName[NAME_LEN];        //¿¨ÀàÐÍÃû³Æ
    BYTE  byLocalMac[MACADDR_LEN];  //±¾µØMACµØÖ·
    NET_DVR_FC_PORT_TOPOLOGY struFCPortTopology[MAX_SINGLE_CARD_PORT_NO]; //¸÷¶Ë¿ÚÍØÆËÐÅÏ¢
    BYTE  byRes[32];
}NET_DVR_FC_CARD_TOPOLOGY, *LPNET_DVR_FC_CARD_TOPOLOGY;

typedef struct tagNET_DVR_FIBER_CONVERT_TOPOLOGY
{
    DWORD dwSize;
    NET_DVR_FC_CARD_TOPOLOGY struFCCardTopology[MAX_FC_CARD_NUM]; //¸÷¿¨ÍØÆËÐÅÏ¢
    BYTE byRes[64];
}NET_DVR_FIBER_CONVERT_TOPOLOGY, *LPNET_DVR_FIBER_CONVERT_TOPOLOGY;

//¹âÏËÊÕ·¢Æ÷¶Ë¿Ú×¢ÊÍÐÅÏ¢
typedef struct tagNET_DVR_FC_COND
{
    DWORD dwSize;
    DWORD dwSlotNo; //²ÛÎ»ºÅ
    DWORD dwPortNo; //¶Ë¿ÚºÅ
    BYTE  byRes[32];
}NET_DVR_FC_COND, *LPNET_DVR_FC_COND;

typedef struct tagNET_DVR_FC_PORT_REMARKS
{
    DWORD dwSize;
    BYTE  byLocalRemarks[MAX_REMARKS_LEN]; //±¾µØ¶Ë¿Ú×¢ÊÍÐÅÏ¢
    BYTE  byPeerRemarks[MAX_REMARKS_LEN]; //¶Ô¶Ë¶Ë¿Ú×¢ÊÍÐÅÏ¢
    BYTE  byRes[32];
}NET_DVR_FC_PORT_REMARKS, *LPNET_DVR_FC_PORT_REMARKS;

typedef enum _EN_FIBER_CONVERT_ALARM
{
    FC_OPTICAL_PORT_LOST = 1,
    FC_ELECTRICAL_PORT_LOST,
    FC_FUNC_CARD_LOST,
}EN_FIBER_CONVERT_ALARM;

typedef enum _EN_FIBER_CONVERT_NOTIFICATION
{
    FC_OPTICAL_PORT_CONNECTED = 1,
    FC_ELECTRICAL_PORT_CONNECTED,
    FC_FUNC_CARD_INSERT,
}EN_FIBER_CONVERT_NOTIFICATION;

typedef struct tagNET_DVR_FIBER_CONVERT_ALARM
{
    DWORD dwSize;
    DWORD dwEventType;  //ÊÂ¼þÀàÐÍ£¬1-¸æ¾¯£¬2-Í¨Öª
    DWORD dwEvent;      //¾ßÌåÊÂ¼þ,¸æ¾¯Ê±²Î¿¼Ã¶¾ÙEN_FIBER_CONVERT_ALARM,Í¨ÖªÊ±²Î¿¼Ã¶¾ÙEN_FIBER_CONVERT_NOTIFICATION
    BYTE bySlotNum;     //²ÛÎ»ºÅ
    BYTE byCardType;    //¿¨ÀàÐÍ£¬1-ÍøÂç¿¨£¬2-¹¦ÄÜ¿¨
    BYTE byPortNo;      //½Ó¿ÚË÷Òý£¬´Ó1¿ªÊ¼
    BYTE byRes1[33];    
}NET_DVR_FIBER_CONVERT_ALARM, *LPNET_DVR_FIBER_CONVERT_ALARM;

typedef struct tagNET_DVR_SWITCH_LAMP_CFG
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE       byEnable;       //¹æÔòÊÇ·ñÆôÓÃ£¬ 0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE       byTriggerMode; // 1-³ÖÐø´¥·¢£¬2-µ¥´Î´¥·¢
    BYTE       byUploadPic;   //0-²»ÉÏ´«Í¼Æ¬£¬1-ÉÏ´«Í¼Æ¬
    BYTE       byRes1;        //±£Áô
    DWORD      dwTimeInterval; //³ÖÐø´¥·¢±¨¾¯Ê±¼ä¼ä¸ô£¬·¶Î§[0,3600]£¬µ¥Î»£ºÃë
    NET_DVR_HANDLEEXCEPTION_V30 struHandleType;//´¦Àí·½Ê½
    BYTE       byRelRecordChan[MAX_IVMS_IP_CHANNEL];    //±¨¾¯´¥·¢µÄÂ¼ÏóÍ¨µÀ£º1±íÊ¾´¥·¢¸ÃÍ¨µÀ£»0±íÊ¾²»´¥·¢
    NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];//¼ì²âÊ±¼ä
    BYTE       byRes[256];
}NET_DVR_SWITCH_LAMP_CFG,*LPNET_DVR_SWITCH_LAMP_CFG;

typedef struct tagNET_DVR_SWITCH_LAMP_ALARM
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    NET_VCA_DEV_INFO    struDevInfo;        //Éè±¸ÐÅÏ¢
    NET_DVR_TIME_EX     struTime;           //±¨¾¯Ê±¼ä
    BYTE                byLampStatus;       //¿ª¹ØµÆ×´Ì¬£¬0-ÒÑ¹Ø±Õ  1-ÒÑ´ò¿ª
    BYTE                byRes1[3];          //±£Áô
    DWORD               dwPicDataLen;       //Í¼Æ¬Êý¾Ý³¤¶È£¬·Ç0±íÊ¾ÓÐÍ¼Æ¬ÉÏ´«
    char*               pPicData;           //Í¼Æ¬Êý¾Ý
    BYTE                byRes[64];
}NET_DVR_SWITCH_LAMP_ALARM,*LPNET_DVR_SWITCH_LAMP_ALARM;

//·À»¤²Õ¼¶ÁªÅäÖÃ
typedef struct tagNET_DVR_RS485_CASCADE_CFG
{
    DWORD    dwSize; 
    BYTE    byDevAddr;    //Éè±¸µØÖ·£¬0-Ö÷»ú£¬1-15Îª´Ó»ú
    BYTE    byRes[131];
}NET_DVR_RS485_CASCADE_CFG,*LPNET_DVR_RS485_CASCADE_CFG;

//Ë½ÓÐ¹Ø¼üÐÅÏ¢ÉÏ´«ÅäÖÃ
typedef struct tagNET_DVR_PRIVATE_PROTOCOL_CFG
{
    DWORD          dwSize;   
    NET_DVR_IPADDR     struIP; //ÏûÏ¢ÉÏ´«µÄIPµØÖ·
    WORD          wPort;//ÏûÏ¢ÉÏ´«µÄ¶Ë¿ÚºÅ
    BYTE         byRes[2];
    DWORD        dwInterval;//ÏûÏ¢ÉÏ´«¼ä¸ô(0-ÎÞÊ±¼ä¼ä¸ôÏÞÖÆ£¬ÒÔÉè±¸Îª×¼; >=0,ÒÔÃëÎªµ¥Î»µÄÊ±¼ä¼ä¸ô)
    BYTE         byServerType;//·þÎñÀàÐÍ 0-ÎÞ£¬1-¹«°²
    BYTE         byEcryptedSMSEnable;//0-²»¼ÓÃÜ£¬1-¼ÓÃÜ
    BYTE         byAlgorithm;//¼ÓÃÜËã·¨£¬0-ÎÞ£¬1-RSA
    BYTE         byAcauisitionMode;//²É¼¯Ä£Ê½£¬0-»ù±¾ÐÅÏ¢£¬1-ÐéÄâÉí·ÝÐÅÏ¢£¬2-»ù±¾ÐÅÏ¢+ÐéÄâÉí·ÝÐÅÏ¢
    DWORD        dwDistanceLimit;//¾àÀëÏÞÖÆ£¬µ¥Î»£ºm
    BYTE         byRes1[216];
    char         szIndexCode[MAX_INDEX_CODE_LEN];
    DWORD        dwSecretKeyLen;//ÃØÔ¿³¤¶È
    char         szSecretKey[MAX_SECRETKEY_LEN/*512*/];//ÃØÔ¿
}NET_DVR_PRIVATE_PROTOCOL_CFG,*LPNET_DVR_PRIVATE_PROTOCOL_CFG;

//µ÷ÊÔÃüÁî
typedef struct tagNET_DVR_DEBUG_CMD
{
    DWORD     dwSize;
    char  szDebugCMD[MAX_DEBUGCMD_LEN/*1024*/];
    BYTE  byRes[400];
}NET_DVR_DEBUG_CMD,*LPNET_DVR_DEBUG_CMD;

//µ÷ÊÔÐÅÏ¢
typedef struct tagNET_DVR_DEBUG_INFO
{
    DWORD     dwSize;
    char  szDebugInfo[MAX_DEBUGINFO_LEN/*1400*/];
    BYTE  byRes[32];
}NET_DVR_DEBUG_INFO,*LPNET_DVR_DEBUG_INFO;



#define MAX_SSID_LEN    32   //SSIDºÅ³¤¶È
#define MAX_WS_PASSWD_LEN    64   //ÃÜÂë³¤¶È
typedef    struct tagNET_DVR_WIRELESSSERVER
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byWLanShare;//WLanÈÈµãÊ¹ÄÜ 0-¹Ø±Õ£¬1-Ê¹ÄÜ
    BYTE        byBroadcastSSID;//SSID¹ã²¥Ê¹ÄÜ 0-¹Ø±Õ£¬1-Ê¹ÄÜ
    BYTE        bySecurityMode;//°²È«Ä£Ê½ 0- not-encrypted£¬1-WPA£¬2-WPA2(ÔÝÊ±Ö»Ö§³Ö2)
    BYTE        byAlgorithmType; //¼ÓÃÜÄ£Ê½ 1-TKIP£¬2-AES
    char        szSSID[MAX_SSID_LEN/*32*/];//SSIDºÅÐÅÏ¢
    char        szPassWord[MAX_WS_PASSWD_LEN/*64*/];
    BYTE        byDefaultPassword;//ÊÇ·ñÊÇÄ¬ÈÏÃÜÂë 0-·ñ£¬1-ÊÇ
    BYTE        byRes[255];
}NET_DVR_WIRELESSSERVER,*LPNET_DVR_WIRELESSSERVER;

typedef    struct tagNET_DVR_CONNECTDEV_COND
{
    DWORD       dwSize;
    DWORD        dwChannel;
    BYTE        byRes[128];
}NET_DVR_CONNECTDEV_COND,*LPNET_DVR_CONNECTDEV_COND;

typedef    struct tagNET_DVR_CONNECTDEV_CFG
{
    DWORD       dwSize;
    BYTE        byID;//ÐòÁÐºÅ
    BYTE        byRes[1];
    BYTE        byMACAddr[MACADDR_LEN/*6*/];    // ÎïÀíµØÖ·
    NET_DVR_IPADDR    struDVRIP;//Éè±¸IP
    NET_DVR_TIME  struConnectTime;//½ÓÈëÊ±¼ä
    BYTE        byRes1[256];
}NET_DVR_CONNECTDEV_CFG,*LPNET_DVR_CONNECTDEV_CFG;

typedef struct tagNET_DVR_GIS_SERVER_INFO
{
    BYTE  byUserName[NAME_LEN];
    BYTE  byPassword[PASSWD_LEN];
    NET_DVR_IPADDR struServerIP;     //GIS·þÎñÆ÷IPµØÖ·
    WORD  wPort;    //GIS·þÎñÆ÷¶Ë¿Ú
    BYTE  byRes[30];
}NET_DVR_GIS_SERVER_INFO, *LPNET_DVR_GIS_SERVER_INFO;

typedef struct tagNET_DVR_BASEMAP_CONTROL_CFG_V40
{
    DWORD dwSize;
    BYTE  byEnable;        //ÊÇ·ñÏÔÊ¾£¬1-ÏÔÊ¾£¬0-Òþ²Ø    
    BYTE  byBaseMapType;    //µ×Í¼ÀàÐÍ£¬1-Í¼Æ¬µ×Í¼£¬2-³¬¸ßÇåÊäÈëµ×Í¼£¬3-GISµ×Í¼
    BYTE  byRes1[2];
    DWORD dwBaseMapNo;     //µ×Í¼ºÅ£»µ×Í¼ÀàÐÍÎª1Ê±£¬´Ë²ÎÊýÎªÍ¼Æ¬ÐòºÅ£¬µ×Í¼ÀàÐÍÎª2Ê±´Ë²ÎÊýÎª³¬¸ßÇåÊäÈë×ÓÏµÍ³ÊäÈë¿ÚºÅ£¨1×Ö½Ú¾ØÕóºÅ+1×Ö½Ú×Ó°åºÅ+1×Ö½ÚÊäÈë¿ÚºÅ+1×Ö½Ú±£Áô£©
    NET_DVR_GIS_SERVER_INFO struGisServer;    //GIS·þÎñÆ÷ÐÅÏ¢,µ±µ×Í¼ÀàÐÍÎªGISµ×Í¼Ê±ÓÐÐ§
    BYTE  byRes2[64];
}NET_DVR_BASEMAP_CONTROL_CFG_V40,*LPNET_DVR_BASEMAP_CONTROL_CFG_V40;

typedef struct tagNET_DVR_VIDEO_IMG_DB_CFG
{    
    DWORD        dwSize;                   //NET_DVR_VIDEO_IMG_DB_CFG½á¹¹Ìå´óÐ¡
    INT64       i64Capacity;             //ÊÓÍ¼¿â×ÜÈÝÁ¿£¬µÍÎ»£¬µ¥Î»£ºMB
    INT64        i64UsedSpace;            //Ö»¶Á£¬ÒÑÓÃ¿Õ¼ä£¬µÍÎ»£¬µ¥Î»£ºMB
    INT64        i64AvailableSpace;        //Ö»¶Á£¬¿ÉÓÃ¿Õ¼ä£¬µÍÎ»£¬µ¥Î»£ºMB
    BYTE          byRes[256];                //±£Áô
}NET_DVR_VIDEO_IMG_DB_CFG, *LPNET_DVR_VIDEO_IMG_DB_CFG;

typedef struct tagNET_DVR_FILE_QUERY_INFO
{    
    DWORD        dwSize;                   //NET_DVR_FILE_QUERY_INFO½á¹¹Ìå´óÐ¡
    INT64       i64FileLen;             //ÎÄ¼þ´óÐ¡
    BYTE          byRes[256];                //±£Áô
}NET_DVR_FILE_QUERY_INFO, *LPNET_DVR_FILE_QUERY_INFO;

typedef struct tagNET_DVR_FILE_INFO_IN
{
    char        szFileID[MAX_FILE_ID_LEN];        //ÉÏ´«Ö®ºó£¬Éè±¸·ÖÅäµÄÎÄ¼þID
    BYTE        byRes[256];
}NET_DVR_FILE_INFO_IN, *LPNET_DVR_FILE_INFO_IN;

typedef struct tagNET_DOWNLOAD_CB_INFO
{
    DWORD     dwType;            //ÀàÐÍ, 0-Êý¾ÝÐÅÏ¢,1-µ¥¸öÍ¼Æ¬ÐÅÏ¢(ÔÆ´æ´¢ÅúÁ¿ÏÂÔØ),2-Í¼Æ¬×ÜÌåÐÅÏ¢(ÔÆ´æ´¢ÅúÁ¿ÏÂÔØ)
    BYTE    *pData;            //Êý¾ÝÖ¸Õë
    DWORD   dwDataLen;        //Êý¾Ý³¤¶È
    void*   pFileInfo;        //ÎÄ¼þÐÅÏ¢½á¹¹Ìå(ÔÆ´æ´¢ÅúÁ¿ÏÂÔØÊ±ÓÐÐ§)
    DWORD   dwFileInfoLen;    //ÎÄ¼þÐÅÏ¢½á¹¹Ìå³¤¶È(ÔÆ´æ´¢ÅúÁ¿ÏÂÔØÊ±ÓÐÐ§)
    BYTE    byRes[120];        //±£Áô
}NET_DOWNLOAD_CB_INFO, *LPNET_DOWNLOAD_CB_INFO;

typedef BOOL (*DOWNLOAD_DATA_CB)( LONG lHandle, NET_DOWNLOAD_CB_INFO *pCBInfo, void *pUserData);

typedef struct tagNET_DVR_DOWNLOAD_CB_PARAM
{
    DOWNLOAD_DATA_CB     fnDownloadDataCB;    //ÏÂÔØÊý¾Ý»Øµ÷º¯Êý
    void                 *pUserData;            //ÓÃ»§²ÎÊý, ÔÚfnPreviewDataCB»Øµ÷³öÀ´
    INT64                i64Offset;        //ÏÂÔØÎÄ¼þµÄÆ«ÒÆÁ¿£¬ÓÃÓÚ¶ÏµãÐø´«
    BYTE                   byRes[256];
}NET_DVR_DOWNLOAD_CB_PARAM, *LPNET_DVR_DOWNLOAD_CB_PARAM;

typedef struct tagNET_DVR_UPLOAD_DB_IN
{
    INT64    i64FileLen;             //ÉÏ´«ÐÂÎÄ¼þ£¬ÐèÒª¸ø³öÎÄ¼þ³¤¶È£¬ÎÄ¼þÐø´«¿ÉÒÔ²»¸ø
    BYTE    byContinueUpload;     //0-ÐÂÎÄ¼þÉÏ´«£¬1-ÀÏÎÄ¼þÐø´«£¬ÎÄ¼þÃû±ØÐë¸ø³ö
    BYTE       byRes[255];
}NET_DVR_UPLOAD_DB_IN, *LPNET_DVR_UPLOAD_DB_IN;


typedef struct tagNET_DVR_UPLOAD_DB_OUT
{
    char    szFileID[MAX_FILE_ID_LEN];        //ÉÏ´«Ö®ºó£¬Éè±¸·ÖÅäµÄÎÄ¼þID
    BYTE    byRes[256];
}NET_DVR_UPLOAD_DB_OUT, *LPNET_DVR_UPLOAD_DB_OUT;

typedef struct tagNET_DVR_SEND_PARAM_IN
{
    BYTE    *pSendData;                //·¢ËÍµÄ»º³åÇø
    DWORD    dwSendDataLen;            //·¢ËÍÊý¾Ý³¤¶È
    NET_DVR_TIME_V30    struTime;   //Í¼Æ¬Ê±¼ä
    BYTE    byPicType;                //Í¼Æ¬¸ñÊ½,1-jpg,2-bmp,3-png,4-SWF,5-GIF
    BYTE    byRes1[3];
    DWORD   dwPicMangeNo;           //Í¼Æ¬¹ÜÀíºÅ
    BYTE    sPicName[NAME_LEN];     //Í¼Æ¬Ãû³Æ
    DWORD   dwPicDisplayTime;       //Í¼Æ¬²¥·ÅÊ±³¤£¬µ¥Î»Ãë
    BYTE    byRes[200];
}NET_DVR_SEND_PARAM_IN, *LPNET_DVR_SEND_PARAM_IN;


typedef struct tagNET_DVR_DOWNLOAD_QOS
{
    DWORD    dwMaxSpeed;            //Á÷¿Ø×î´óËÙ¶È£¬µ¥Î»kbps
    BYTE    byRes[256];
}NET_DVR_DOWNLOAD_QOS, *LPNET_DVR_DOWNLOAD_QOS;



//µçÓ°Ä£Ê½²ÎÊý
typedef struct tagNET_DVR_FILM_MODE_CFG
{
    DWORD    dwSize;          //½á¹¹Ìå´óÐ¡
    BYTE     byScreenType;     //»­ÃæÀàÐÍ£¬0-µ¥»­Ãæ£¬1-Á½»­Ãæ£¬2-»­ÖÐ»­
    BYTE     byRes[255];    //±£Áô
}NET_DVR_FILM_MODE_CFG, *LPNET_DVR_FILM_MODE_CFG;

//µ¼²¥²ßÂÔÅäÖÃ
typedef struct tagNET_DVR_DIRECTED_STRATEGY_CFG
{
    DWORD    dwSize;  //½á¹¹Ìå´óÐ¡
    BYTE     byDirectedStrategyType; //µ¼²¥²ßÂÔÀàÐÍ£¬0-³£Ì¬µ¼²¥²ßÂÔ£¬1-¾«Æ·µ¼²¥²ßÂÔ
    BYTE     byRes[255];     //±£Áô
}NET_DVR_DIRECTED_STRATEGY_CFG, *LPNET_DVR_DIRECTED_STRATEGY_CFG;

//±ß¿ò×Ó½á¹¹
typedef struct NET_DVR_FRAME
{
    BYTE     byFrameWide; /*±ß¿ò¿í¶ÈºÏ·¨È¡Öµ·¶Î§Îª[0,14]£¬²¢ÇÒÖ»ÄÜÈ¡Å¼ÊýÖµ*/
    BYTE     byRed;  /*±ß¿òÑÕÉ«ÎªRGB Ä£Ê½£¬R£¬G£¬B£¬·Ö±ð¶ÔÓ¦Î»ÓÚÈçÏÂ*/
    BYTE     byGreen;
    BYTE     byBlue;
    BYTE     byRes[256];
}NET_DVR_FRAME, *LPNET_DVR_FRAME;

//ÅäÖÃ»­Ãæ±ß¿ò
typedef struct tagNET_DVR_FRAME_CFG
{
    DWORD           dwSize;          //½á¹¹Ìå´óÐ¡
    NET_DVR_FRAME    struTopFrame;    //ÉÏ±ß¿ò
    NET_DVR_FRAME    struBottomFrame;//ÏÂ±ß¿ò
    NET_DVR_FRAME    struLeftFrame;    //×ó±ß¿ò
    NET_DVR_FRAME    struRightFrame;    //ÓÒ±ß¿ò
    BYTE            byFrameEnable;  //µþ¼Ó±ß¿ò0-²»µþ¼Ó1-µþ¼Ó±ß¿ò
    BYTE            byRes[256];     //±£Áô
}NET_DVR_FRAME_CFG, *LPNET_DVR_FRAME_CFG;

//ÅäÖÃ»­Ãæ±ß¿òÌõ¼þ
typedef struct tagNET_DVR_FRAME_COND
{
    DWORD           dwSize;
    DWORD           dwPicNo;//»­Ãæ±àºÅ
    BYTE            byRes[256];
}NET_DVR_FRAME_COND, *LPNET_DVR_FRAME_COND;

//ÒôÆµÓÅ»¯²ÎÊý
typedef struct tagNET_DVR_AUDIO_EFFECTIVE_CFG
{
    DWORD       dwSize;          //½á¹¹Ìå´óÐ¡
    DWORD       dwCheckDelay;    //¼ì²âÊ±ÑÓ£¬µ¥Î»s£¬0±íÊ¾²»×Ô¶¯ÓÅ»¯
    BYTE        byThreshold;     //ãÐÖµ[0,100]
    BYTE        byVolumePercent;//ÒôÁ¿ [0,100]
    BYTE        byPriority;     //µÈ¼¶£¬[0£¬100]
    BYTE        byRes[301];
}NET_DVR_AUDIO_EFFECTIVE_CFG, *LPNET_DVR_AUDIO_EFFECTIVE_CFG;

//Â¼ÖÆÊÓÆµ²ÎÊý
typedef struct tagNET_DVR_RECORD_VIDEO_CFG
{
    DWORD       dwSize;              //½á¹¹Ìå´óÐ¡
    BYTE        byExportType;         //ãÐÖµ0-MP4 1-AVI
    BYTE        byRes[255];          //±£Áô×Ö½Ú 
} NET_DVR_RECORD_VIDEO_CFG, *LPNET_DVR_RECORD_VIDEO_CFG;

//RTMP Cond
typedef struct tagNET_DVR_RTMP_COND
{
    DWORD            dwSize;
    DWORD            dwChannel;
    BYTE             byStreamType;  //ÂëÁ÷ÀàÐÍ£¬1-Ö÷ÂëÁ÷£¬2-×ÓÂëÁ÷£¬3-ÂëÁ÷Èý
    BYTE             byRes[303];
}NET_DVR_RTMP_COND, *LPNET_DVR_RTMP_COND;

//RTMP Cfg
typedef struct tagNET_DVR_RTMP_CFG
{
    DWORD       dwSize;                          //½á¹¹Ìå´óÐ¡
    BYTE        byEnable;                        //ÊÇ·ñÆôÓÃRTMP£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE         byRes1[3];
    DWORD       dwPacketLen;                     //RTMP°ü³¤
    char        szURL[RTMP_URL_LEN];            //RTMP URL
    BYTE         byRes[256];                      //±£Áô×Ö½Ú 
}NET_DVR_RTMP_CFG, *LPNET_DVR_RTMP_CFG;

//ÎÄ¼þ·¢²¼
typedef  struct  tagNET_DVR_RECORDING_PUBLISH_FILE_CFG
{
    DWORD   dwSize;                         //½á¹¹Ìå´óÐ¡
    BYTE    byFileID[MAX_ID_LEN_128/*128*/];  //·¢²¼ÎÄ¼þID
    NET_DVR_TIME_EX  struStartTime;  //¿Î³Ì¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_EX  struEndTime;   //¿Î³Ì½áÊøÊ±¼ä
    BYTE    byCmdType;  //·¢²¼ÃüÁîÀàÐÍ  1--¿ªÊ¼·¢²¼ 2--È¡Ïû·¢²¼
    BYTE   byRes[255];
}NET_DVR_RECORDING_PUBLISH_FILE_CFG, *LPNET_DVR_RECORDING_PUBLISH_FILE_CFG;

//ÎÄ¼þ·¢²¼½ø¶ÈÌõ¼þ
typedef struct tagNET_DVR_PUBLISH_PROGRESS_COND
{
    DWORD            dwSize;
    DWORD            dwChannel;
    BYTE             byFileID[MAX_ID_LEN_128/*128*/];  //·¢²¼ÎÄ¼þID
    BYTE             byRes[256];
}NET_DVR_PUBLISH_PROGRESS_COND, *LPNET_DVR_PUBLISH_PROGRESS_COND;

//ÎÄ¼þ·¢²¼½ø¶È²ÎÊý
typedef struct tagNET_DVR_PUBLISH_PROGRESS_CFG
{
    DWORD    dwSize;          //½á¹¹Ìå´óÐ¡
    BYTE     byPublishPercent;     //·¢²¼°Ù·Ö±È 0-100
    BYTE     byPublishStatus;     //·¢²¼×´Ì¬  0-·¢²¼³É¹¦ 1--ÕýÔÚ·¢²¼ 2--µÈ´ý·¢²¼ 3-Á¬²»ÉÏFTP  4--Ã»ÓÐÕÒµ½´ËÎÄ¼þ 5--·¢²¼Ê§°Ü£¨ÆäËû´íÎó£©
    BYTE     byRes[302];
}NET_DVR_PUBLISH_PROGRESS_CFG, *LPNET_DVR_PUBLISH_PROGRESS_CFG;

//É¾³ýÊÓÍ¼¿âÖÐµÄÎÄ¼þ
typedef  struct  tagNET_DVR_BACKGROUND_PIC_COND
{
    DWORD    dwSize;  
    char     szFileID[MAX_ID_LEN_128/*128*/];        //ÉÏ´«Ö®ºó£¬Éè±¸·ÖÅäµÄÎÄ¼þID, Ö¸±³¾°Í¼Æ¬Ãû
    BYTE     byRes[256];
}NET_DVR_BACKGROUND_PIC_COND, *LPNET_DVR_BACKGROUND_PIC_COND;

//²éÑ¯±³¾°Í¼Æ¬ÎÄ¼þ
typedef struct tagNET_DVR_BACKGROUND_PIC_CFG
{
    DWORD    dwSize;                         //½á¹¹Ìå´óÐ¡
    DWORD     dwPicSize;  //±³¾°Í¼Æ¬´óÐ¡
    DWORD     dwPicType;   //Í¼Æ¬ÀàÐÍ£¬YUV:0 JPEG:1
    WORD     wPicWidth;   //Í¼Æ¬¿í
    WORD     wPicHeight;    //Í¼Æ¬¸ß
    BYTE          byPicName[MAX_PIC_NAME_LEN/*128*/];   //Í¼Æ¬Ãû³Æ
    BYTE         byRes[128];
}NET_DVR_BACKGROUND_PIC_CFG,*LPNET_DVR_BACKGROUND_PIC_CFG;

typedef struct tagNET_DVR_BACKGROUND_PIC_INFO
{
    DWORD   dwSize;                              //½á¹¹Ìå´óÐ¡
    BYTE    byEnable;             //ÊÇ·ñÆôÓÃ±³¾°Í¼Æ¬µþ¼Ó£¬0-·ñ£¬1-ÊÇ
    BYTE    byRes1[3];
    BYTE    byPicID[MAX_ID_LEN_128/*128*/];
    BYTE    byRes[300];         //±£Áô
}NET_DVR_BACKGROUND_PIC_INFO,*LPNET_DVR_BACKGROUND_PIC_INFO;


//ÉÏ´«±³¾°Í¼Æ¬ÎÄ¼þ
typedef struct tagNET_DVR_BACKGROUND_PIC_PRARAM
{
    DWORD       dwSize;
    DWORD        dwChannel; //µ¼²¥Í¨µÀ
    DWORD        dwPicSize;  //±³¾°Í¼Æ¬´óÐ¡
    WORD        wPicWidth;   //Í¼Æ¬¿í
    WORD           wPicHeight;    //Í¼Æ¬¸ß
    char          szPicName[MAX_PIC_NAME_LEN/*128*/];   //Í¼Æ¬Ãû³Æ
    BYTE        byPicType;   //Í¼Æ¬ÀàÐÍ£¬YUV:0 JPEG:1
    BYTE        byRes[303];
}NET_DVR_BACKGROUND_PIC_PRARAM,*LPNET_DVR_BACKGROUND_PIC_PRARAM;

//µÍ¹¦ºÄÅäÖÃ
typedef    struct tagNET_DVR_LOWPOWER
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE          byMode;//²¹¹âµÆÄ£Ê½ 0-ÊÖ¶¯£¬1-¶¨Ê±
    BYTE        byEnabled;//ÊÖ¶¯Ä£Ê½ÏÂµÄÊ¹ÄÜ¿ª¹Ø 0-¹Ø±Õ£¬1-¿ªÆô
    BYTE        byRes[6];
    NET_DVR_SCHEDULE_DAYTIME  struSchedTime;//¶¨Ê±Ê±¼ä¶Î    
    BYTE        byRes1[256];
}NET_DVR_LOWPOWER,*LPNET_DVR_LOWPOWER;

typedef struct tagNET_DVR_POINT
{
    DWORD dwX;    //XÖá×ø±ê
    DWORD dwY;    //Y×ø±ê
}NET_DVR_POINT, *LPNET_DVR_POINT;

//±ä±¶Áª¶¯ÅäÖÃ
typedef    struct tagNET_DVR_ZOOMLINKAGE
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE          byEnable;//Ê¹ÄÜ 0-¹Ø£¬1-¿ª
    BYTE       byRes[255];
}NET_DVR_ZOOMLINKAGE,*LPNET_DVR_ZOOMLINKAGE;

typedef struct tagNET_DVR_ONLINEUPGRADE_STATUS
{
    DWORD   dwSize;
    BYTE    byUpgradeStatus;//0-Î´¿ªÊ¼Éý¼¶,1-ÕýÔÚÉý¼¶,2-Éý¼¶³É¹¦,3-°üÓïÑÔ²»Æ¥Åä,4-Ð´falshÊ§°Ü,5-°üÀàÐÍ²»Æ¥Åä,6-°ü°æ±¾²»Æ¥Åä,7-ÍøÂç²»¿É´ï,8-Éý¼¶·þÎñÆ÷³ö´í,
                            //9-¶ÁÈ¡Éý¼¶°üÎÄ¼þ³ö´í,10-Ã»ÓÐÕÒµ½Éý¼¶ÎÄ¼þ,11-Éý¼¶ÎÄ¼þÓÐ´í,12-Éè±¸ÄÚ´æ²»×ã,0xff-Î´Öª´íÎó
    BYTE    byProgress; //Éý¼¶½ø¶È,0~100
    BYTE    byRes[250];
}NET_DVR_ONLINEUPGRADE_STATUS,*LPNET_DVR_ONLINEUPGRADE_STATUS;

typedef    struct tagNET_DVR_FIRMWARECODE_COND
{
    DWORD  dwSize;
    DWORD  dwStartIndex;    //ÆðÊ¼Ë÷ÒýºÅ
    DWORD  dwMaxNum;    //µ¥´Î×î´ó¸öÊý£¬32
    BYTE   byRes[52];
}NET_DVR_FIRMWARECODE_COND,*LPNET_DVR_FIRMWARECODE_COND;

typedef    struct    tagNET_DVR_FIRMWARECODE
{
    WORD  wIndex;
    WORD  wCodeLen;    //Ê¶±ðÂë³¤¶È£¬ÉÏ²ãÓ¦ÓÃ¿ª·¢µÄÊ±ºò×öÒ»¸öÅÐ¶Ï£¬Èç¹û±¾×Ö¶Î´óÓÚ128£¬Çë±¨´í£¬ÌáÊ¾ÓÃ»§¸üÐÂ¹¤¾ß/¿Í»§¶Ë°æ±¾
    BYTE  byCode[MAX_IDCODE_LEN];//Ê¶±ðÂë
    BYTE  byVersion[MAX_VERSIIN_LEN];//°æ±¾
    BYTE  byRes[12];
}NET_DVR_FIRMWARECODE,*LPNET_DVR_FIRMWARECODE;

typedef    struct    tagNET_DVR_FIRMWARECODE_LIST
{
    DWORD  dwSize;
    DWORD  dwValidCodeNum;    //ÓÐÐ§¸öÊý
    NET_DVR_FIRMWARECODE  struCode[MAX_IDCODE_NUM];
    BYTE   byRes[64];
}NET_DVR_FIRMWARECODE_LIST,*LPNET_DVR_FIRMWARECODE_LIST;

typedef struct tagNET_DVR_ONLINEUPGRADE_SERVER 
{
    DWORD  dwSize;
    BYTE   byConnectStatus;    //0-Î´Á¬½Ó,1-ÒÑÁ¬½Ó
    BYTE   byRes[1019];
}NET_DVR_ONLINEUPGRADE_SERVER,*LPNET_DVR_ONLINEUPGRADE_SERVER;

typedef struct tagNET_DVR_ONLINEUPGRADE_VERSION_COND
{
    DWORD  dwSize;
    BYTE   byCheckFromSvr; //ÊÇ·ñÐèÒª´Ó·þÎñÆ÷¼ì²â£¬0-²»ÐèÒª£¬½ö·µ»ØÉè±¸ÖÜÆÚÐÔ¼ì²éµÄ½á¹û;1-ÐèÒª£¬Éè±¸»á¼´Ê±Á¬½Ó·þÎñÆ÷¼ì²âÊÇ·ñÓÐÐÂ°æ±¾
    BYTE   byRes[59];
}NET_DVR_ONLINEUPGRADE_VERSION_COND,*LPNET_DVR_ONLINEUPGRADE_VERSION_COND;

typedef struct tagNET_DVR_ONLINEUPGRADE_VERSION_RET
{
    DWORD  dwSize;
    BYTE   byNewVersionAvailable;  //ÊÇ·ñÓÐÐÂ°æ±¾,0-·ñ,1-ÊÇ
    BYTE   byNewVersion[MAX_VERSIIN_LEN];  //ÐÂ°æ±¾µÄ°æ±¾ºÅ
    BYTE   byChangeLog[SDK_LEN_2048];  //ÐÂ°æ±¾¸üÐÂµÄÄÚÈÝ
    BYTE   byRes[971];
}NET_DVR_ONLINEUPGRADE_VERSION_RET,*LPNET_DVR_ONLINEUPGRADE_VERSION_RET;

typedef struct tagNET_DVR_RECOMMEN_VERSION_COND
{
    DWORD  dwSize;
    BYTE   byFirmwareCode[MAX_IDCODE_LEN]; 
    BYTE   byFirmwareVersion[MAX_VERSIIN_LEN];
    BYTE   byRes[60];
}NET_DVR_RECOMMEN_VERSION_COND,*LPNET_DVR_RECOMMEN_VERSION_COND;

typedef struct tagNET_DVR_RECOMMEN_VERSION_RET
{
    DWORD  dwSize;
    BYTE   byRecommenUpgrade;  //ÍÆ¼öÉý¼¶,0-·ñ,1-ÊÇ
    BYTE   byRes[123];
}NET_DVR_RECOMMEN_VERSION_RET,*LPNET_DVR_RECOMMEN_VERSION_RET;

//ÎÂÊª¶ÈÅäÖÃ
typedef    struct tagNET_DVR_THSCREEN
{
    DWORD  dwSize;//½á¹¹Ìå´óÐ¡
    BYTE   byEnable;//ÆôÓÃ¶¨Ê±Ê¹ÄÜ
    BYTE   byTHOSDDisplay;//ÎÂÊª¶ÈÏÔÊ¾OSDÏÔÊ¾ÊÇ·ñÆôÓÃ,  0-·ñ£¬1-ÊÇ
    BYTE   byRes[2]; // ±£Áô×Ö½Ú
    NET_VCA_POINT   struTHOSDPoint;//ÎÂÊª¶ÈÏÔÊ¾OSDÏÔÊ¾×óÉÏ½Ç×ø±ê
    BYTE   byTimingMode;//Ð£Ê±Ä£Ê½ 0-ÊÖ¶¯£¬1-×Ô¶¯
    BYTE   byRes1;
    WORD   wInterval;//Ð£Ê±¶¨Ê±Ä£Ê½ÏÂ£¬¼ä¸ôÊ±¼äÉèÖÃ[1,10080]m
    BYTE   byRes2[254];
}NET_DVR_THSCREEN,*LPNET_DVR_THSCREEN;

typedef    struct tagNET_DVR_SENSOR_ADJUSTMENT
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE     byType;//µ÷ÕûÄ£Ê½£º0-ÉÏÏÂ£¬1-×óÓÒ£¬2-Ðý×ª£¬3-Í¼ÏñÊÓ³¡½Ç
    BYTE     bySensorNo;//Sensor ºÅ[1,8]
    BYTE     byRes[2];
    int     iAdjustMentRange;//µ÷Õû·ù¶È [-100,100] Ðý×ªµÄÊ±ºò[-30,30] Í¼ÏñÊÓ³¡½Ç[-10,10]
    BYTE     byRes1[128];
}NET_DVR_SENSOR_ADJUSTMENT,*LPNET_DVR_SENSOR_ADJUSTMENT;

typedef    struct tagNET_DVR_SENSOR_ADJUSTMENT_INFO
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    int      iPan;//×óÓÒÖµ
    int      iTilt;//ÉÏÏÂÖµ
    int      iRotation;//Ðý×ªÖµ
    int      iFieldAngle;//Í¼ÏñÊÓ³¡½ÇÖµ
    BYTE     byRes[128];
}NET_DVR_SENSOR_ADJUSTMENT_INFO,*LPNET_DVR_SENSOR_ADJUSTMENT_INFO;

typedef    struct tagNET_DVR_SENSOR_RESET
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE     bySensorNo;//SensorºÅ[1,8];µ±Sensor NoÎª0µÄÊ±ºò£¬±íÊ¾È«²¿Çå³ý£»ÆäËûÇé¿öÏÂ±íÊ¾µ¥¸öÇå³ý
    BYTE     byRes[127];
}NET_DVR_SENSOR_RESET,*LPNET_DVR_SENSOR_RESET;

typedef    struct tagNET_DVR_PANORAMAIMAGE
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE     byFusionMode;//Ä£Ê½£º0-Ô­Ê¼Í¼Ïñ£¬1-È«¾°Í¼Ïñ
    BYTE     byRes[127];
}NET_DVR_PANORAMAIMAGE,*LPNET_DVR_PANORAMAIMAGE;

typedef struct tagNET_DVR_RELOCATE_INFO
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byTakeOverAddr[MAX_DOMAIN_NAME/*64*/];     //½Ó¹ÜÉè±¸µÄµØÖ· 
    WORD        wPort ;                 //Éè±¸¶Ë¿ÚºÅ
    BYTE        byRes[254] ;            //±£Áô
}NET_DVR_RELOCATE_INFO, *LPNET_DVR_RELOCATE_INFO;

typedef struct tagNET_DVR_CONFERENCE_REGION
{
    DWORD dwSize;
    BYTE byEnabled;        //ÊÇ·ñÆôÓÃ»áÒéÇøÓò£¬0-·ñ£¬1-ÊÇ
    BYTE byRes1[3];
    NET_DVR_POINT struRegion[RECT_POINT_NUM];    //»áÒéÇøÓò£¬¾ØÐÎ£¬ÆðÊ¼µãÎª×óÏÂ½Ç£¬Ë³Ê±Õë·½Ïò
    DWORD dwOutputWidth;    //µ¥Êä³ö¿Ú»ù×¼¿í£¬Ö»ÄÜ»ñÈ¡
    DWORD dwOutputHeight;    //µ¥Êä³ö¿Ú»ù×¼¸ß£¬Ö»ÄÜ»ñÈ¡
    BYTE byRes2[32];
}NET_DVR_CONFERENCE_REGION, *LPNET_DVR_CONFERENCE_REGION;

typedef struct tagNET_DVR_TERMINAL_CALL_CFG
{
    DWORD dwSize;
    BYTE  byAnswerType; //»áÒéºô½ÐÏìÓ¦·½Ê½£¬1-×Ô¶¯½ÓÌý£¬2-×Ô¶¯¾Ü½Ó£¬3-ÊÖ¶¯½ÓÌý
    BYTE  byProtocolType;    //Ê¹ÓÃµÄÐ­ÒéÀàÐÍ£¬1-SIP£¬2-H232
    BYTE  byRes[30];
}NET_DVR_TERMINAL_CALL_CFG, *LPNET_DVR_TERMINAL_CALL_CFG;

typedef struct tagNET_DVR_TERMINAL_CALL_INFO
{
    BYTE byTermianlURL[MAX_URL_LEN];
    BYTE byRes[128];
}NET_DVR_TERMINAL_CALL_INFO, *LPNET_DVR_TERMINAL_CALL_INFO;

typedef struct tagNET_DVR_TERMINAL_AUDIO_CTRL
{
    BYTE byMute;     //ÊÇ·ñ¾²Òô£¬0-·ñ£¬1-ÊÇ
    BYTE byVolume;   //ÒôÁ¿£¬·Ç¾²ÒôÊ±ÓÐÐ§£¬1-100
    BYTE byAudioInputDisabled;  //½ûÖ¹ÒôÆµÊäÈë£¬0-ÔÊÐíÒôÆµÊäÈë£¬1-½ûÖ¹ÒôÆµÊäÈë
    BYTE byAudioInputVolume;    //ÒôÆµÊäÈëÒôÁ¿£¬ÔÊÐíÒôÆµÊäÈëÊ±ÓÐÐ§£¬1-100
    BYTE byRes[636];
}NET_DVR_TERMINAL_AUDIO_CTRL, *LPNET_DVR_TERMINAL_AUDIO_CTRL;

typedef union tagNET_DVR_TERMINAL_DETAIL_CTRL_PARAM
{
    BYTE byRes[640];
    NET_DVR_TERMINAL_CALL_INFO struCallInfo;
    NET_DVR_TERMINAL_AUDIO_CTRL struAudioCtrl;
}NET_DVR_TERMINAL_DETAIL_CTRL_PARAM, *LPNET_DVR_TERMINAL_DETAIL_CTRL_PARAM;

typedef struct tagNET_DVR_TERMINAL_CTRL_PARAM
{
    DWORD dwSize;
    BYTE byOperateType;	//²Ù×÷ÀàÐÍ£¬1-½ÓÌý£¬2-¾Ü½Ó£¬3-ºô½Ð£¬4-ÒôÆµµ÷½Ú£¬5-¹Ò¶Ï£¬6-Ë«Á÷¿ª£¬7-Ë«Á÷¹Ø
    BYTE byRes1[3];
    NET_DVR_TERMINAL_DETAIL_CTRL_PARAM struCtrlParam;   //¾ßÌå¿ØÖÆ²ÎÊý
    BYTE byRes2[32];
}NET_DVR_TERMINAL_CTRL_PARAM, *LPNET_DVR_TERMINAL_CTRL_PARAM;

typedef struct tagNET_DVR_CALL_QUERY_COND
{
    DWORD dwSize;
    BYTE bySearchID[MAX_SEARCH_ID_LEN]; //ËÑË÷±êÊ¶·û
    NET_DVR_TIME struStartTime; //ËÑË÷ÆðÊ¼Ê±¼ä
    NET_DVR_TIME struEndTime;   //ËÑË÷½áÊøÊ±¼ä
    BYTE byCallType;    //ºô½ÐÀàÐÍ£¬1-ÒÑ½Ó£¬2-Î´½Ó£¬3-ÒÑ²¦£¬4-ËùÓÐÀàÐÍ
    BYTE byRes1[3];
    DWORD dwMaxResults; //±¾´Î²éÕÒ×î¶à·µ»Ø¸öÊý
    DWORD dwSearchPos;  //²éÕÒÆðÊ¼Ë÷Òý
    BYTE byRes2[32];
}NET_DVR_CALL_QUERY_COND, *LPNET_DVR_CALL_QUERY_COND;

typedef struct tagNET_DVR_CALL_QUERY_SINGLE
{
    DWORD dwSize;
    BYTE byCallType;    //ºô½ÐÀàÐÍ£¬1-ÒÑ½Ó£¬2-Î´½Ó£¬3-ÒÑ²¦
    BYTE byRes1[3];
    BYTE byTerminalName[TERMINAL_NAME_LEN]; //ÖÕ¶ËÃû
    BYTE byAddressURL[MAX_URL_LEN]; //¶Ô¶ËURLµØÖ·
    NET_DVR_TIME struStartTime; //ºô½Ð¿ªÊ¼Ê±¼ä
    NET_DVR_TIME struEndTime;   //ºô½Ð½áÊøÊ±¼ä
    BYTE byRes2[32];
}NET_DVR_CALL_QUERY_SINGLE, *LPNET_DVR_CALL_QUERY_SINGLE;


typedef enum tagCALL_QUERY_RESULT_STATUS
{
    CALL_QUERY_RESULT_OK = 0,     //³É¹¦²éÑ¯ËùÓÐ
    CALL_QUERY_RESULT_FAIL,       //²éÑ¯Ê§°Ü£¬Î´Öª´íÎó
    CALL_QUERY_RESULT_MORE,     //³É¹¦²éÑ¯ »¹ÓÐ¸ü¶àÃ»ÓÐ·µ»Ø
    CALL_QUERY_RESULT_NOMATCH,  //Ã»ÓÐ²éÑ¯µ½Æ¥ÅäµÄ
    CALL_QUERY_RESULT_PARAMERROR,  //²éÑ¯Ìõ¼þ²ÎÊý´íÎó
    CALL_QUERY_RESULT_INVALIDTIME,   //²éÑ¯Ìõ¼þÊ±¼äÎÞÐ§
    CALL_QUERY_RESULT_TIMEOUT,   //²éÑ¯³¬Ê±
}CALL_QUERY_RESULT_STATUS;

typedef struct tagNET_DVR_CALL_QUERY_RESULT
{
    DWORD dwSize;
    BYTE bySearchID[MAX_SEARCH_ID_LEN]; //ËÑË÷±êÊ¶·û
    BYTE   byStatus;  //²éÑ¯×´Ì¬  ²Î¿¼CALL_QUERY_RESULT_STATUS½á¹¹Ìå
    BYTE   byRes[3];  //±£Áô 
    DWORD dwCount; //Êµ¼Ê²éÑ¯µ½µÄ½á¹û¸öÊý
    BYTE *pResults; //½á¹ûÄÚÈÝ£¬dwCount¸öNET_DVR_CALL_QUERY_SINGLE,ÐèÒªµ÷ÓÃÕßÔ¤ÏÈ·ÖÆÁºÃÄÚ´æ
    BYTE byRes2[32];
}NET_DVR_CALL_QUERY_RESULT, *LPNET_DVR_CALL_QUERY_RESULT;

typedef struct tagNET_DVR_CONFERENCE_CALL_INFO
{
    BYTE byConferenceID[MAX_ID_LEN]; //»áÒéID
    BYTE byConferenceName[NAME_LEN];    //»áÒéÃû³Æ     
    NET_DVR_TIME struStartTime;        //»áÒé¿ªÊ¼Ê±¼ä
    NET_DVR_TIME struEndTime;        //»áÒé½áÊøÊ±¼ä
    BYTE byRes[512];
}NET_DVR_CONFERENCE_CALL_INFO, *LPNET_DVR_CONFERENCE_CALL_INFO;

typedef union tagNET_DVR_CALL_INFO
{
    BYTE byRes[640];
    NET_DVR_TERMINAL_CALL_INFO struTerminalCallInfo;  //ÖÕ¶Ëµã¶Ôµãºô½ÐÐÅÏ¢
    NET_DVR_CONFERENCE_CALL_INFO struConferenceCallInfo;  //»áÒéºô½ÐÐÅÏ¢
}NET_DVR_CALL_INFO, *LPNET_DVR_CALL_INFO;

typedef struct tagNET_DVR_CONFERENCE_CALL_ALARM
{
    DWORD dwSize;
    BYTE  byAlarmType;              //±¨¾¯ÀàÐÍ£¬1-»áÒéºô½Ð£¬ 2-ºô½Ð×´Ì¬ÇÐ»»£¬3-ÖÕ¶ËÌáÎÊ
    BYTE  byCallType;               //ºô½ÐÀàÐÍ£¬±¨¾¯ÀàÐÍÎª1Ê±ÓÐÐ§£¬1-ÖÕ¶Ëµã¶Ôµãºô½Ð£¬2-»áÒéºô½Ð
    BYTE  byAutoAnswer;                //ÊÇ·ñÒÑ×Ô¶¯½ÓÌý£¬0-·ñ£¬1-ÊÇ
    BYTE  byCallStatusSwitch;       //ºô½Ð×´Ì¬ÇÐ»»ÀàÐÍ£¬µ±±¨¾¯ÀàÐÍÎª2Ê±ÓÐÐ§£¬1-¿ªÊ¼ºô½Ð£¬2-ºô½Ð³É¹¦£¬3-ºô½Ð½áÊø£¬4-¶Ô¶Ë¹Ò¶Ï
    NET_DVR_CALL_INFO struCallInfo; //ºô½ÐÐÅÏ¢
    BYTE  byRes2[32];    
}NET_DVR_CONFERENCE_CALL_ALARM, *LPNET_DVR_CONFERENCE_CALL_ALARM;

typedef struct tagNET_DVR_TERMINAL_INPUT_CFG
{
    DWORD dwSize;
    DWORD dwInputNo;    //×÷ÎªÊÓÆµ»áÒéÊäÈëµÄÊäÈë¿Ú±àºÅ
    BYTE  byRes[32];
}NET_DVR_TERMINAL_INPUT_CFG, *LPNET_DVR_TERMINAL_INPUT_CFG;

typedef struct tagNET_DVR_AUDIO_STATUS
{
    BYTE byMute;    //ÊÇ·ñ¾²Òô£¬0-·ñ£¬1-ÊÇ
    BYTE byVolume;  //»áÒéÒôÁ¿£¬1-100£¬·Ç¾²ÒôÊ±ÓÐÐ§
    BYTE byAudioInputDisabled;  //½ûÓÃÒôÆµÊäÈë£¬0-·ñ£¬1-ÊÇ
    BYTE byAudioInputVolume; //ÒôÆµÊäÈëÒôÁ¿£¬1-100£¬ÔÊÐíÒôÆµÊäÈëÊ±ÓÐÐ§
    BYTE byRes[32];
}NET_DVR_AUDIO_STATUS, *LPNET_DVR_AUDIO_STATUS;

typedef struct tagNET_DVR_TERMINAL_CONFERENCE_STATUS
{
    DWORD dwSize;
    BYTE byConferenceState; //»áÒé×´Ì¬£¬0-¿ÕÏÐ£¬1-Ã¦Âµ£¨»áÒéÖÐ£©£¬2-ºô½ÐÖÐ£¬3-±»ºô½ÐÖÐ
    BYTE byConferenceType;  //»áÒéÀàÐÍ£¬1-µã¶Ôµã£¬2-MCU·¢Æð»áÒé
	BYTE byDualStreamEnabled;	//ÊÇ·ñ¿ªÆôË«Á÷£¬0-Î´¿ªÆô£¬1-¿ªÆô
	BYTE byRes1[1];
    DWORD dwInputNo;   //Ê¹ÓÃµÄÒôÆµÊäÈë¿ÚºÅ
    NET_DVR_CALL_INFO struCallInfo; //»áÒéÐÅÏ¢
    NET_DVR_AUDIO_STATUS struAudioStatus;   //ÒôÆµÏà¹Ø×´Ì¬
    BYTE byRes2[32];
}NET_DVR_TERMINAL_CONFERENCE_STATUS, *LPNET_DVR_TERMINAL_CONFERENCE_STATUS;

//ÖÕ¶Ë×¢²áGKÐÅÏ¢
typedef struct tagNET_DVR_TERMINAL_GK_CFG
{
    DWORD dwSize;
    BYTE  byEnable; //ÊÇ·ñÆôÓÃ
    BYTE  byRegisterState;    //×¢²á×´Ì¬£¬0-Î´×¢²á£¬1-ÒÑ×¢²á£¬Ö»¶Á
    BYTE  byRes1[2];
    NET_DVR_IPADDR struGKIP; //GK IP
    WORD wGKPort; //GK¶Ë¿ÚºÅ
    BYTE byRes2[2];
    BYTE byRegisterName[REGISTER_NAME_LEN]; //ÖÕ¶Ë×¢²áµ½GKµÄÃû×Ö
	BYTE byPassword[PASSWD_LEN];	//ÖÕ¶Ë×¢²áµ½GKµÄÃÜÂë
	BYTE byRes3[16];
}NET_DVR_TERMINAL_GK_CFG, *LPNET_DVR_TERMINAL_GK_CFG;

//½âÂëÆ÷ÂþÓÎ¿ª¹Ø²ÎÊý
typedef struct tagNET_DVR_WIN_ROAM_SWITCH_CFG
{
    DWORD dwSize;
    BYTE  byEnableRoam;    //ÊÇ·ñÔÊÐí´°¿ÚÂþÓÎ£¬0-·ñ£¬·Ç0-ÊÇ
    BYTE  byRes[31];
}NET_DVR_WIN_ROAM_SWITCH_CFG,*LPNET_DVR_WIN_ROAM_SWITCH_CFG;

typedef struct tagNET_DVR_LED_OUTPUT_CFG
{
    DWORD dwSize;
    BYTE byEnableZoom;  //ÊÇ·ñËõ·Å£¬0-·ñ£¬1-ÊÇ
    BYTE byAutoCutBlackEdge;  //ÊÇ·ñ×Ô¶¯²Ã¼ôºÚ±ß£¬0-·ñ£¬1-ÊÇ
    BYTE byRes1[2];
    WORD wLEDWidth;     //·Ö±æÂÊ¿í
    WORD wLEDHeight;    //·Ö±æÂÊ¸ß
    DWORD dwRefreshRate;    //Ë¢ÐÂÆµÂÊ
    DWORD dwInputNO;    //¹ØÁªµÄÊäÈëÍ¨µÀºÅ
    BYTE byRes2[32];
}NET_DVR_LED_OUTPUT_CFG, *LPNET_DVR_LED_OUTPUT_CFG;

typedef struct tagNET_DVR_LED_OUTPUT_PORT_CFG
{
    DWORD dwSize;
    BYTE  byEnabled;    //ÊÇ·ñÊ¹ÄÜ£¬0-·ñ£¬1-ÊÇ
    BYTE  byRes1[3];
    DWORD dwPortNum;    //°üº¬µÄ¶Ë¿Ú¸öÊý
    DWORD dwPortNo[MAX_OUTPUT_PORT_NUM];     //°üº¬µÄ¶Ë¿ÚºÅ
    BYTE  byRes2[64];
}NET_DVR_LED_OUTPUT_PORT_CFG, *LPNET_DVR_LED_OUTPUT_PORT_CFG;

typedef struct tagNET_DVR_LINE_COLUMN_INFO
{
    WORD wLine;   //ÐÐºÅ
    WORD wColumn; //ÁÐºÅ
}NET_DVR_LINE_COLUMN_INFO, *LPNET_DVR_LINE_COLUMN_INFO;

typedef struct tagNET_DVR_LED_DISPLAY_AREA
{
    DWORD dwSize;
    NET_DVR_LINE_COLUMN_INFO struLCInfo;  //ÏÔÊ¾ÇøÓòµÄÆðÊ¼Î»ÖÃ(½ÓÊÕ¿¨ÐÐÁÐºÅ)
    WORD    wWidth;     //ºáÏò½ÓÊÕ¿¨Êý
    WORD    wHeight;    //ÊúÏò½ÓÊÕ¿¨Êý
    WORD     wRecvCardWidth;   //½ÓÊÕ¿¨¿í¶È´óÐ¡£¬Îª0ÔòÊ¹ÓÃ¶Ë¿Ú²ÎÊýÖÐ½ÓÊÕ¿¨´óÐ¡²ÎÊý
    WORD    wRecvCardHeigt;   //½ÓÊÕ¿¨¸ß¶È´óÐ¡£¬Îª0ÔòÊ¹ÓÃ¶Ë¿Ú²ÎÊýÖÐ½ÓÊÕ¿¨´óÐ¡²ÎÊý
    BYTE    byRes[32];
}NET_DVR_LED_DISPLAY_AREA, *LPNET_DVR_LED_DISPLAY_AREA;

typedef struct tagNET_DVR_LED_RECV_CARD_INFO
{
    NET_DVR_LINE_COLUMN_INFO struPos; //½ÓÊÕ¿¨Î»ÖÃ
    WORD wRecvCardWidth;   //½ÓÊÕ¿¨¿í¶È´óÐ¡
    WORD wRecvCardHeigt;   //½ÓÊÕ¿¨¸ß¶È´óÐ¡
}NET_DVR_LED_RECV_CARD_INFO, *LPNET_DVR_LED_RECV_CARD_INFO;

typedef struct tagNET_DVR_LED_PORT_BACKUP
{
    BYTE byEnabled;    //ÊÇ·ñÆôÓÃ¶Ë¿Ú±¸·Ý£¬0-·ñ£¬1-ÊÇ
    BYTE byPortMode; //¶Ë¿ÚÄ£Ê½£¬1-Ö÷¿Ú£¬2-±¸·Ý¿Ú
    BYTE byRes1[2];
    DWORD dwPairPort; //Åä¶Ô¶Ë¿ÚºÅ£¬µ±¶Ë¿ÚÎªÖ÷¿ÚÊ±£¬´Ë²ÎÊýÎª±¸·Ý¿Ú¶Ë¿ÚºÅ£¬µ±¶Ë¿ÚÎª±¸·Ý¿ÚÊ±£¬´Ë²ÎÊýÎªÖ÷¿Ú¶Ë¿ÚºÅ
    BYTE byRes2[16];
}NET_DVR_LED_PORT_BACKUP, *LPNET_DVR_LED_PORT_BACKUP;

typedef struct tagNET_DVR_LED_PORT_CFG
{
    DWORD dwSize;
    BYTE byEnabled; //ÊÇ·ñÆôÓÃ¸Ã¶Ë¿Ú£¬0-·ñ£¬1-ÊÇ
    BYTE byRes1[3];
    NET_DVR_LED_PORT_BACKUP struLedPortBackup;    //¶Ë¿Ú±¸·Ý²ÎÊý
    DWORD dwRecvCardNum;   //±¾¶Ë¿ÚÁ¬½ÓµÄ½ÓÊÕ¿¨Êý
    NET_DVR_LED_RECV_CARD_INFO struRecvCard[MAX_SINGLE_PORT_RECVCARD_NUM];   //¸÷½ÓÊÕ¿¨µÄÐÅÏ¢
    DWORD dwPortNo; //¶Ë¿ÚºÅ£¬»ñÈ¡ËùÓÐ¶Ë¿Ú²ÎÊýÊ±ÓÐÐ§
    BYTE byRes2[64];
}NET_DVR_LED_PORT_CFG, *LPNET_DVR_LED_PORT_CFG;

typedef struct tagNET_DVR_LED_DISPLAY_CFG
{
    DWORD dwSize;
    NET_DVR_COLOR_TEMPERATURE_CFG struColorTemp;    //É«ÎÂ²ÎÊý
    NET_DVR_VIDEO_OUT_CFG struVoutCfg;        //ÏÔÊ¾Ð§¹û²ÎÊý
    BYTE byRes[32];
}NET_DVR_LED_DISPLAY_CFG, *LPNET_DVR_LED_DISPLAY_CFG;

typedef struct tagNET_DVR_LED_TEST_SIGNAL_CFG
{
    DWORD dwSize;
    BYTE byEnabled;        //ÊÇ·ñÆôÓÃ²âÊÔÐÅºÅ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE bySignalType;    //²âÊÔÐÅºÅÀàÐÍ£¬1-²ÊÌõ£¬2-²¨ÎÆ£¬3-¸ñ×´²ÊÌõ£¬4-·½¸ñ£¬5-Ë®Æ½ºÍ´¹Ö±»Ò½×ÁªºÏÌå£¬6-ÆåÅÌ£¬0xff-×Ô¶¨ÒåÑÕÉ«
    BYTE byRes1[2];
    NET_DVR_RGB_COLOR struSignalColor;    //²âÊÔÐÅºÅÑÕÉ«£¬²âÊÔÐÅºÅÀàÐÍÎª0xffÊ±ÓÐÐ§
    BYTE byRes[32];
}NET_DVR_LED_TEST_SIGNAL_CFG, *LPNET_DVR_LED_TEST_SIGNAL_CFG;

typedef struct tagNET_DVR_LED_NOSIGNAL_CFG
{
    DWORD dwSize;
    BYTE byNoSignalMode;    //ÎÞÐÅºÅÏÔÊ¾Ä£Ê½£¬1-ºÚÆÁ£¬2-ÏÔÊ¾³§¼ÒLOGO£¬3-ÏÔÊ¾×Ô¶¨ÒåÍ¼Æ¬
    BYTE byRes[63];
}NET_DVR_LED_NOSIGNAL_CFG, *LPNET_DVR_LED_NOSIGNAL_CFG;

typedef struct tagNET_DVR_LED_INPUT_CFG
{
    DWORD dwSize;
    DWORD dwResolutionWidth;    //ÊäÈë·Ö±æÂÊ¿í£¬Ö»¶Á
    DWORD dwResolutionHeight;    //ÊäÈë·Ö±æÂÊ¸ß£¬Ö»¶Á
    DWORD dwRefreshRate;        //ÊäÈëÐÅºÅË¢ÐÂÆµÂÊ£¬Ö»¶Á
    NET_DVR_SCREEN_VGA_CFG struVgaCfg;    //VGAÐÅºÅµ÷Õû²ÎÊý£¬VGAÊäÈëÊ±¿Éµ÷
    BYTE  byRes[32];
}NET_DVR_LED_INPUT_CFG, *LPNET_DVR_LED_INPUT_CFG;

typedef struct tagNET_DVR_LED_RECV_CARD_CFG_COND
{
    DWORD dwSize;
    DWORD dwOutputNo;    //Êä³ö±àºÅ
    NET_DVR_LINE_COLUMN_INFO struPosStart; //½ÓÊÕ¿¨ÆðÊ¼Î»ÖÃ
    NET_DVR_LINE_COLUMN_INFO struPosEnd;   //½ÓÊÕ¿¨½áÊøÎ»ÖÃ
    BYTE byRes[32];
}NET_DVR_LED_RECV_CARD_CFG_COND, *LPNET_DVR_LED_RECV_CARD_CFG_COND;

typedef struct tagNET_DVR_LED_GAMMA_CFG
{
    DWORD dwSize;
    WORD wGammaValue[MAX_GAMMA_X_VALUE];    //GAMMA±íYÈ¡Öµ£¬Ã¿¸öÔªËØÈ¡Öµ0-65535
    BYTE byRes[128];
}NET_DVR_LED_GAMMA_CFG, *LPNET_DVR_LED_GAMMA_CFG;

typedef struct tagNET_DVR_LED_CLOCK_CFG
{
    DWORD dwDclkRate;    //´«ÊäÊ±ÖÓdclkÆµÂÊ£¬Êµ¼ÊÖµ³Ë10£¬µ¥Î»£ºMHz£¬Êµ¼ÊÖµ·¶Î§1.0-31.3
    DWORD dwGclkRate;    //Ë¢ÐÂÊ±ÖÓgclkÆµÂÊ£¬Êµ¼ÊÖµ³Ë10£¬µ¥Î»£ºMHz£¬Êµ¼ÊÖµ·¶Î§1.0-31.3
    DWORD dwGclkCountNum;    //300ns gclk¼ÆÊýÖµ
    BYTE  byDclkDutyRatio;    //dclkÊ±ÖÓÕ¼¿Õ±È£¬È¡Öµ£º25£¬50£¬75
    BYTE  byDclkPhase;    //dclkÏàÎ»£¬È¡Öµ£º0,1,2,3
    BYTE  byGclkNum;    //Ë¢ÐÂ1ÐÐÐèÒªµÄÓÐÐ§gclk¸öÊý£¬0-255
    BYTE  byRes[17];
}NET_DVR_LED_CLOCK_CFG, *LPNET_DVR_LED_CLOCK_CFG;

typedef struct tagNET_DVR_LED_RECV_CFG
{
    DWORD dwSize;
    NET_DVR_LED_CLOCK_CFG struClockCfg;    //Ê±ÖÓÏà¹Ø²ÎÊý
    BYTE byGrayLevel;    //»Ò¶ÈµÈ¼¶£¬È¡Öµ13£¬14
    BYTE byRefreshRate;    //Ë¢ÐÂ±¶ÂÊ£¬È¡Öµ1-6
    BYTE byLineScanNum;    //ÐÐÉ¨Êý£¬0-255
    BYTE byRefreshCompleteGrayNum; //Ë¢ÐÂÍêÕû»Ò½×Êý£¬0-255
    DWORD dwHBlank;        //ÐÐÏûÒþÊ±¼ä£¬µ¥Î»£ºgclkÊ±ÖÓ¸öÊý£¬È¡Öµ1-65535
    DWORD dwAfterglowCtrl;    //ÓàêÍ¿ØÖÆ½áÊøÊ±¼ä£¬µ¥Î»£ºgclkÊ±ÖÓ¸öÊý£¬È¡Öµ1-65535
    DWORD dwLineFeedTime;    //»»ÐÐÊ±¼ä£¬µ¥Î»£ºgclkÊ±ÖÓ¸öÊý£¬È¡Öµ1-65535
    BYTE byRes[128];
}NET_DVR_LED_RECV_CFG, *LPNET_DVR_LED_RECV_CFG;

typedef struct tagNET_DVR_LED_REGISTOR_VALUE
{
    BYTE byChip1High;        //Ð¾Æ¬1¸ß×Ö½Ú
    BYTE byChip1Low;        //Ð¾Æ¬1µÍ×Ö½Ú
    BYTE byChip2High;        //Ð¾Æ¬2¸ß×Ö½Ú
    BYTE byChip2Low;        //Ð¾Æ¬2µÍ×Ö½Ú
    BYTE byChip3High;        //Ð¾Æ¬3¸ß×Ö½Ú
    BYTE byChip3Low;        //Ð¾Æ¬3µÍ×Ö½Ú
    BYTE byRes[10];
}NET_DVR_LED_REGISTOR_VALUE, *LPNET_DVR_LED_REGISTOR_VALUE;

typedef struct tagNET_DVR_LED_RECV_REGISTOR
{
    BYTE byEliminateGhostShadowLevel;    //ÏÂ¹íÓ°Ïû³ýµÈ¼¶£¬0-5
    BYTE byEliminateShadowy;            //µÚÒ»É¨Æ«°µÏû³ýµÈ¼¶£¬0-15
    BYTE byGrayEqualize1;                //µÍ»ÒÆ«É«²¹³¥1£¬0-3
    BYTE byGrayEqualize2;                //µÍ»ÒÆ«É«²¹³¥2£¬0-15
    BYTE byEnableGrayUniformity;        //µÍ»Ò¾ùÔÈÐÔÌáÉýÊÇ·ñ¿ªÆô£¬0-¹Ø£¬1-¿ª
    BYTE byDisableHGrayStripes;            //µÍ»ÒºáÌõÎÆÏû³ýÊÇ·ñ¿ªÆô£¬0-¹Ø£¬1-¿ª
    BYTE byGhostShadowEnhancedMode1;    //ÏÂ¹íÓ°Ïû³ýÔöÇ¿Ä£Ê½1ÊÇ·ñ¿ªÆô£¬0-¹Ø£¬1-¿ª
    BYTE byGhostShadowEnhancedMode2;    //ÏÂ¹íÓ°Ïû³ýÔöÇ¿Ä£Ê½2ÊÇ·ñ¿ªÆô£¬0-¹Ø£¬1-¿ª
    BYTE byClearBadPoint;                //È¥³ý»µµãÊ¹ÄÜ£¬0-·ÇÊ¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE byEnableSelfDefineRegistor;    //ÊÇ·ñÆôÓÃ×Ô¶¨Òå¼Ä´æÆ÷Öµ£¬0-·ñ£¬1-ÊÇ
    BYTE byRes1[2];
    NET_DVR_LED_REGISTOR_VALUE struRegistorValue;    //×Ô¶¨Òå¼Ä´æÆ÷²ÎÊý    
    BYTE byRes[32];
}NET_DVR_LED_RECV_REGISTOR, *LPNET_DVR_LED_RECV_REGISTOR;

typedef struct tagNET_DVR_LED_RECV_ADVANCED_CFG
{
    DWORD dwSize;
    NET_DVR_LED_RECV_REGISTOR struFirstRegistor;    //µÚÒ»×é½ÓÊÕ¿¨¸ß¼¶²ÎÊý£¬×Ô¶¨Òå¼Ä´æÆ÷ÖµÎªºìÐ¾Æ¬¼Ä´æÆ÷Öµ
    NET_DVR_LED_RECV_REGISTOR struSecondRegistor;    //µÚ¶þ×é½ÓÊÕ¿¨¸ß¼¶²ÎÊý£¬×Ô¶¨Òå¼Ä´æÆ÷ÖµÎªÂÌÐ¾Æ¬¼Ä´æÆ÷Öµ
    NET_DVR_LED_RECV_REGISTOR struThirdRegistor;    //µÚÈý×é½ÓÊÕ¿¨¸ß¼¶²ÎÊý£¬×Ô¶¨Òå¼Ä´æÆ÷ÖµÎªÀ¶Ð¾Æ¬¼Ä´æÆ÷Öµ
    BYTE byRes2[64];
}NET_DVR_LED_RECV_ADVANCED_CFG,*LPNET_DVR_LED_RECV_ADVANCED_CFG;

typedef struct tagNET_DVR_LED_CHECK_COND
{
    DWORD dwSize;
    DWORD dwOutputNo;   //ÊäÈë±àºÅ
    BYTE  byRes[32];
}NET_DVR_LED_CHECK_COND, *LPNET_DVR_LED_CHECK_COND;

//²éÑ¯·½Ê½
enum  ADDR_QUERY_TYPE
{
    QUERYSVR_BY_COUNTRYID = 0,    //°´¹ú¼Ò±àºÅ²éÑ¯·þÎñÆ÷µØÖ·
    QUERYSVR_BY_SERVERTYPE = 1, //±£Áô
    QUERYDEV_BY_NICKNAME_DDNS = 2, //°´êÇ³Æ´ÓhiDDNSÉÏ²éÑ¯Éè±¸ÐÅÏ¢
    QUERYDEV_BY_SERIAL_DDNS = 3,    //°´ÐòÁÐºÅ´ÓhiDDNSÉÏ²éÑ¯Éè±¸ÐÅÏ¢
    CHECKDEV_BY_NICKNAME_DDNS = 4,//°´êÇ³Æ´ÓhiDDNSÕï¶ÏÉè±¸ÐÅÏ¢
    CHECKDEV_BY_SERIAL_DDNS = 5,    //°´ÐòÁÐºÅ´ÓhiDDNSÕï¶ÏÉè±¸ÐÅÏ¢
    QUERYDEV_BY_NICKNAME_IPSERVER = 6, //°´êÇ³Æ´ÓIPServerÉÏ²éÑ¯Éè±¸ÐÅÏ¢
    QUERYDEV_BY_SERIAL_IPSERVER = 7    //°´êÇ³Æ´ÓIPServerÉÏ²éÑ¯Éè±¸ÐÅÏ¢
};
#define    CLIENT_VERSION_LEN    64
//°´¹ú¼Ò±àºÅ²éÑ¯µÄÌõ¼þ½á¹¹Ìå
typedef struct tagNET_DVR_QUERY_COUNTRYID_COND
{
    WORD    wCountryID;    //¹ú¼Ò±àºÅ,È¡ÖµÏê¼û¸½¼þÒ»
    char    szSvrAddr[MAX_DOMAIN_NAME];//·þÎñÆ÷µØÖ·,±íÊ¾È¥ÄÄ¸ö·þÎñÆ÷ÉÏ²éÑ¯Ä¿±ê·þÎñÆ÷µÄÐÅÏ¢
    char    szClientVersion[CLIENT_VERSION_LEN];//¿Í»§¶Ë°æ±¾ÐÅÏ¢,ÀýÈç:iVMS4500 V4.0.0.0 build20150112
    BYTE    byRes[382];
}NET_DVR_QUERY_COUNTRYID_COND,*LPNET_DVR_QUERY_COUNTRYID_COND;

//°´¹ú¼Ò±àºÅ²éÑ¯µÄ·µ»Ø½á¹¹Ìå
typedef struct tagNET_DVR_QUERY_COUNTRYID_RET
{
    char    szResolveSvrAddr[MAX_DOMAIN_NAME];//½âÎö·þÎñÆ÷µØÖ·(¼´Éè±¸×¢²á·þÎñÆ÷)
    char    szAlarmSvrAddr[MAX_DOMAIN_NAME];//±¨¾¯·þÎñÆ÷µØÖ·
    BYTE    byRes[1024];
}NET_DVR_QUERY_COUNTRYID_RET,*LPNET_DVR_QUERY_COUNTRYID_RET;

//°´·þÎñÆ÷ÀàÐÍ²éÑ¯µÄÌõ¼þ½á¹¹Ìå
typedef struct tagNET_DVR_QUERY_SERVERTYPE_COND
{
    WORD    wSvrType;    //·þÎñÆ÷ÀàÐÍ, 6-ÊÖ»úÍÆËÍ·þÎñÆ÷
    char    szSvrAddr[MAX_DOMAIN_NAME];//·þÎñÆ÷µØÖ·,±íÊ¾È¥ÄÄ¸ö·þÎñÆ÷ÉÏ²éÑ¯Ä¿±ê·þÎñÆ÷µÄÐÅÏ¢
    char    szClientVersion[CLIENT_VERSION_LEN];//¿Í»§¶Ë°æ±¾ÐÅÏ¢
    BYTE    byRes[382];
}NET_DVR_QUERY_SERVERTYPE_COND, *LPNET_DVR_QUERY_SERVERTYPE_COND;

//°´·þÎñÆ÷ÀàÐÍ²éÑ¯µÄ·µ»Ø½á¹¹Ìå
typedef struct tagNET_DVR_QUERY_SERVERTYPE_RET
{
    char    szSvrAddr[MAX_DOMAIN_NAME];    //·þÎñÆ÷µØÖ·
    WORD    wSvrPort;    //·þÎñÆ÷¶Ë¿Ú
    BYTE    byRes[446];
}NET_DVR_QUERY_SERVERTYPE_RET, *LPNET_DVR_QUERY_SERVERTYPE_RET;

//´ÓhiDDNSÉÏ²éÑ¯»òÕï¶ÏµÄÌõ¼þ½á¹¹Ìå
typedef struct tagNET_DVR_QUERY_DDNS_COND
{
    char    szResolveSvrAddr[MAX_DOMAIN_NAME];//½âÎö·þÎñÆ÷µØÖ·
    char    szDevNickName[MAX_DOMAIN_NAME];    //Éè±¸ÔÚ½âÎö·þÎñÆ÷ÉÏµÄ±ðÃû
    char    szDevSerial[SERIALNO_LEN];    //Éè±¸ÐòÁÐºÅ
    char    szClientVersion[CLIENT_VERSION_LEN];//¿Í»§¶Ë°æ±¾ÐÅÏ¢,ÀýÈç:iVMS4500 V4.0.0.0 build20150112
    BYTE    byRes[272];        //±£Áô
}NET_DVR_QUERY_DDNS_COND,*LPNET_DVR_QUERY_DDNS_COND;
#define SDK_MAX_IP_LEN 48
//´ÓhiDDNSÉÏ²éÑ¯·µ»ØµÄ½á¹¹Ìå
typedef struct tagNET_DVR_QUERY_DDNS_RET
{
    char    szDevIP[SDK_MAX_IP_LEN];    //Éè±¸IPµØÖ·
    WORD    wCmdPort;        //¿ØÖÆ¶Ë¿Ú£¨SDKÁ¬½Ó¶Ë¿Ú£©
    WORD    wHttpPort;        //http¶Ë¿Ú
    BYTE    byRes[460];
}NET_DVR_QUERY_DDNS_RET,*LPNET_DVR_QUERY_DDNS_RET;

//´ÓhiDDNSÉÏÕï¶Ï·µ»ØµÄ½á¹¹Ìå
typedef struct tagNET_DVR_CHECK_DDNS_RET
{
    BYTE    byDevStatus;        //Éè±¸×´Ì¬,0-Õý³£,1-ÕÒ²»µ½,2-Éè±¸²»ÔÚÏß,3-Éè±¸²»ÔÚµ±Ç°ÇøÓò
    BYTE    byRes1;
    NET_DVR_QUERY_DDNS_RET    struQueryRet;    //µØÖ·ÐÅÏ¢
    WORD    wRegionID;        //µ±Ç°Éè±¸×¢²áÇøÓò±àºÅ[1ÃÀ¹ú,2ÄÏÃÀ,3ÑÇÌ«,4ÖÐ¹ú,5Å·ÖÞ,6ÆäËü] 
    BYTE    byRes2[508];
}NET_DVR_CHECK_DDNS_RET,*LPNET_DVR_CHECK_DDNS_RET;

//´ÓIPServerÉÏ²éÑ¯µÄÌõ¼þ½á¹¹Ìå
typedef struct tagNET_DVR_QUERY_IPSERVER_COND
{
    char    szResolveSvrAddr[MAX_DOMAIN_NAME];//½âÎö·þÎñÆ÷µØÖ·
    WORD    wResolveSvrPort;    //½âÎö·þÎñÆ÷¶Ë¿Ú
    char    szDevNickName[MAX_DOMAIN_NAME];    //Éè±¸ÔÚ½âÎö·þÎñÆ÷ÉÏµÄ±ðÃû
    char    szDevSerial[SERIALNO_LEN];    //Éè±¸ÐòÁÐºÅ
    BYTE    byRes[334];        //±£Áô
}NET_DVR_QUERY_IPSERVER_COND,*LPNET_DVR_QUERY_IPSERVER_COND;

//´ÓIPServerÉÏ²éÑ¯·µ»ØµÄ½á¹¹Ìå
typedef struct tagNET_DVR_QUERY_IPSERVER_RET
{
    char    szDevIP[SDK_MAX_IP_LEN];    //Éè±¸IPµØÖ·
    WORD    wCmdPort;        //¿ØÖÆ¶Ë¿Ú£¨SDKÁ¬½Ó¶Ë¿Ú£©
    BYTE    byRes[462];
}NET_DVR_QUERY_IPSERVER_RET,*LPNET_DVR_QUERY_IPSERVER_RET;

typedef struct tagNET_DVR_CURRENT_VALID_PORT
{
    DWORD  dwSize;
    WORD   wHTTPPort;
    BYTE   byRes[122];
}NET_DVR_CURRENT_VALID_PORT,*LPNET_DVR_CURRENT_VALID_PORT;

typedef struct tagNET_DVR_AUDIO_CHANNEL
{
    DWORD  dwChannelNum;                //Í¨µÀºÅ
    BYTE   byres[32];                    //±£Áô
}NET_DVR_AUDIO_CHANNEL, *LPNET_DVR_AUDIO_CHANNEL;

//ÂëÁ÷¼ÓÃÜÌõ¼þ½á¹¹
typedef    struct tagNET_DVR_STREAMENCRYPTION_COND
{
    DWORD    dwSize;  //½á¹¹Ìå´óÐ¡
    DWORD   dwChan;  //Ô¤ÀÀÍ¨µÀºÅ
    BYTE    byRes[128];
}NET_DVR_STREAMENCRYPTION_COND, *LPNET_DVR_STREAMENCRYPTION_COND;

//ÂëÁ÷¼ÓÃÜÐÅÏ¢½á¹¹
typedef    struct tagNET_DVR_STREAMENCRYPTION_CFG
{
    DWORD    dwSize;    //½á¹¹Ìå´óÐ¡
    BYTE    byEnable;  //ÆôÓÃÂëÁ÷¼ÓÃÜ£¬0~¹Ø±Õ£¬1~¿ªÆô
    BYTE    byRes[255];
}NET_DVR_STREAMENCRYPTION_CFG, *LPNET_DVR_STREAMENCRYPTION_CFG;

//Ð£×¼µÄGPS¾­Î³¶È²ÎÊý
typedef    struct tagNET_DVR_REVISE_GPS_CFG
{
     DWORD    dwSize;    //½á¹¹Ìå´óÐ¡
     BYTE   byLatitudeType ;//Î³¶ÈÀàÐÍ£¬0-±±Î³£¬1-ÄÏÎ³
     BYTE   byLongitudeType ;// ¾­¶ÈÀàÐÍ£¬0-¶«¶È£¬1-Î÷¶È
     BYTE   byMode ;//Ä£Ê½ 0-Ä¬ÈÏ£¬1-×Ô¶¯£¬2-ÊÖ¶¯
     BYTE    byRes;
     NET_DVR_LLI_PARAM    struLatitude;     /*Î³¶È*/
     NET_DVR_LLI_PARAM    struLongitude; /*¾­¶È*/
     BYTE    byRes1[300];
}NET_DVR_REVISE_GPS_CFG, *LPNET_DVR_REVISE_GPS_CFG;

typedef    struct tagNET_DVR_PDC_RECOMMEND
{
    DWORD         dwSize;
    WORD        wWidth;//ÍÆ¼ö¿í¶ÈÖµ[0, 1000]
    BYTE        byRes[126];
}NET_DVR_PDC_RECOMMEND,*LPNET_DVR_PDC_RECOMMEND;

typedef    struct tagNET_DVR_FLASHSTORAGE_REMOVE
{
    DWORD         dwSize;
    DWORD       dwChannel;
    BYTE        byPDCRemoveEnable;//Çå³ý¿ÍÁ÷Êý¾ÝÊ¹ÄÜ 0-²»Çå³ý£¬1-Çå³ý
    BYTE        byRes[127];
}NET_DVR_FLASHSTORAGE_REMOVE,*LPNET_DVR_FLASHSTORAGE_REMOVE;

/********************************DS-TME4XX¿ØÖÆ»ú¿ª·¢ Begin****************************/
typedef struct tagNET_DVR_PARKING_CARD
{
    DWORD  dwSize;
    DWORD  dwChannel;//Ä¬ÈÏÊÇ1£¨ºóÐø¼æÈÝ¶àÍ¨µÀÉè±¸£©
    char  szCardNo[MAX_CARDNO_LEN/*48*/];//¿¨ºÅ
    BYTE  byCardType;//¿¨Æ¬ÀàÐÍ 0-ÁÙÊ±¿¨£¬1-¹Ì¶¨¿¨
    BYTE  byCardStatus;//¿¨Æ¬×´Ì¬ 0-Õý³££¬1-¹ÒÊ§£¬2-×¢Ïú
    BYTE  byChargeRuleID;//ÊÕ·Ñ¹æÔòID
    BYTE  byDelete;//ÊÇ·ñÉ¾³ý 0-²»É¾³ý£¬1-É¾³ý
    NET_DVR_TIME_V30 struStartTime;//ÓÐÐ§¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30 struEndTime;//ÓÐÐ§½áÊøÊ±¼ä
    BYTE  byRes[128];
}NET_DVR_PARKING_CARD,*LPNET_DVR_PARKING_CARD;

//³öÈë¿Ú¿¨Æ¬ÐÅÏ¢ÉÏ´«
typedef struct tagNET_DVR_GATE_CARDINFO
{
    DWORD     dwSize;
    NET_VCA_DEV_INFO struDevInfo;
    DWORD dwRelativeTime; //Ïà¶ÔÊ±±ê
    DWORD dwAbsTime; //¾ø¶ÔÊ±±ê
    char    szCardNo[MAX_CARDNO_LEN/*48*/];//¿¨ºÅ
    char    szPassVehicleID[MAX_VEHICLE_ID_LEN];//Î¨Ò»±êÊ¶
    char    szInVehicleID[MAX_VEHICLE_ID_LEN];//³ö¿ÚÊ±µÄÈë¿ÚÎ¨Ò»±êÊ¶
    NET_DVR_TIME_V30  struSwipeTime;//Ë¢¿¨Ê±¼ä
    NET_DVR_TIME_V30  struCardTime;//¿¨Æ¬´æµÄÊ±¼ä£¬¼´Èë³¡Ê±Ð´ÈëµÄÊ±¼ä£¬Ö»¶Ô³ö¿ÚÆ±ÏäÓÐÓÃ£¬0±íÊ¾ÎÞÈë³¡Ê±¼ä
    BYTE    byLetPass;//³öÈë¿Ú·ÅÐÐ·½Ê½ 0-²»·ÅÐÐ(µ±CardType == Ö½Æ±)ÐèÒªÊÕ·Ñ£¬1-·ÅÐÐ£¬2-ÖÐÐÄÊÕ·Ñ·ÅÐÐ
    BYTE     byCardType;//¿¨ÀàÐÍ 0-¹Ì¶¨¿¨£¬1-ÁÙÊ±¿¨£¬2-Ö½Æ±
    BYTE    byRes[126];
}NET_DVR_GATE_CARDINFO, *LPNET_DVR_GATE_CARDINFO;

//³öÈë¿Ú¸¶·ÑÐÅÏ¢ÉÏ´«(COMM_GATE_CHARGEINFO_UPLOAD)
typedef struct tagNET_DVR_GATE_CHARGEINFO
{
    DWORD dwSize;
    NET_VCA_DEV_INFO struDevInfo;
    DWORD dwRelativeTime; //Ïà¶ÔÊ±±ê
    DWORD dwAbsTime; //¾ø¶ÔÊ±±ê
    char  sLicense[MAX_LICENSE_LEN];        //³µÅÆ
    char  szCardNo[48];
    NET_DVR_TIME_V30 struEntranceTime;
    NET_DVR_TIME_V30 struDepartureTime;
    char  szDepartureID[32];  //³ö³¡Î¨Ò»¹ý³µ±êÊ¾
    char  szEntranceID[32];  //Èë³¡Î¨Ò»¹ý³µ±êÊ¾
    DWORD dwTotalCost;   //Êµ¼ÊÊÕ·Ñ½ð¶î*100
    char  szOperateName[32]; //ÍÑ»úÏÂÎª"offline"
    BYTE  byChargeRuleId; //ÊÕ·Ñ¹æÔòcenterId
    BYTE  byVehicleType;//³µÁ¾ÀàÐÍ£¬0-ÆäËû³µÁ¾£¬1-Ð¡ÐÍ³µ£¬2-´óÐÍ³µ
    BYTE  byRes[127];//Ô¤Áô
}NET_DVR_GATE_CHARGEINFO,*LPNET_DVR_GATE_CHARGEINFO;

//Í£³µ³¡Í£³µ¿¨¿ØÖÆ½á¹¹Ìå
typedef struct tagNET_DVR_PARKING_CARD_CTRL_PARAM
{
    DWORD  dwSize;
    DWORD  dwChannel; //Í¨µÀºÅ
    BYTE  byCardType;//¿¨Æ¬ÀàÐÍ 0-ÁÙÊ±¿¨
    BYTE  byDeleteALL;//ÊÇ·ñÈ«²¿É¾³ý 0-²»É¾³ý£¬1-É¾³ý
    BYTE  byRes[62];
}NET_DVR_PARKING_CARD_CTRL_PARAM,*LPNET_DVR_PARKING_CARD_CTRL_PARAM;

//TME³µÁ¾×¥Í¼ÉÏ´«
typedef struct tagNET_DVR_TME_VEHICLE_RESULT_
{
    DWORD   dwSize;
    WORD    wLaneid; //³µµÀºÅ1¡«32£¨Ë÷Òý³µµÀºÅ£¬¿ÉÒÔÌøÔ¾£©
    BYTE    byCamLaneId; //¶ÔÓ¦Ïà»ú³µµÀºÅ1¡«16£¨Ïà»úÅäÖÃµÄ³µµÀºÅ£¬¿ÉÒÔÌøÔ¾£¬¿ÉÒÔÏàÍ¬£©
    BYTE    byRes1; //±£Áô
    DWORD   dwChanIndex; //Í¨µÀºÅ
    NET_DVR_PLATE_INFO  struPlateInfo; //³µÅÆÐÅÏ¢½á¹¹
    NET_DVR_VEHICLE_INFO struVehicleInfo; //³µÁ¾ÐÅÏ¢
    BYTE    byMonitoringSiteID[48]; //¼à²âµã±àºÅ
    BYTE    byDeviceID[48]; //Éè±¸±àºÅ
    BYTE    byDir;     //¼à²â·½Ïò£¬0-ÆäËü 1 Èë³¡£¬2 ³ö³¡ 
    BYTE    byRes2; 
    WORD    wBackList; //±ê¼ÇÎªÊÇ·ñ±¨¾¯Êý¾Ý 0 ±íÊ¾ÎªÕý³£¹ý³µÊý¾Ý  1 ±íÊ¾ºÚÃûµ¥
    DWORD   dwPicNum; //Í¼Æ¬ÊýÁ¿£¨ÓëpicGroupNum²»Í¬£¬´ú±í±¾ÌõÐÅÏ¢¸½´øµÄÍ¼Æ¬ÊýÁ¿£¬Í¼Æ¬ÐÅÏ¢ÓÉstruVehicleInfoEx¶¨Òå 
    NET_ITS_PICTURE_INFO struPicInfo[4];  //Í¼Æ¬ÐÅÏ¢,ÔÝ¶¨×î¶à4ÕÅÍ¼
    BYTE    byPassVehicleID[32];    //³µÁ¾Î¨Ò»ID 
    BYTE    byCardNo[48]; // ¿¨ºÅ
    BYTE    bySwipeTime[32];//Ôö¼ÓË¢¿¨Ê±¼ä  Ê±¼ä¸ñÊ½Îªyyyymmddhh24missfff
    DWORD   dwCharge;      //ÊÕ·Ñ½ð¶î £¨·Ö£©
    BYTE    byHistory;     //ÊÇ·ñÊÇÀúÊ·Êý¾Ý  0-·ñ  1-ÊÇ
    BYTE    byLetPass;     //ÊÇ·ñÒÑ·ÅÐÐ£¬0-Î´·ÅÐÐ£¬1-·ÅÐÐ  2-Î´Öª
    BYTE    byRes3[186];
} NET_DVR_TME_VEHICLE_RESULT, *LPNET_DVR_TME_VEHICLE_RESULT;

//³µÁ¾ÐÅÏ¢Í¬²½
typedef struct tagNET_DVR_PARKING_VEHICLE
{
    DWORD   dwSize;
    DWORD   dwChannel;//Ä¬ÈÏÊÇ1£¨ºóÐø¼æÈÝ¶àÍ¨µÀÉè±¸£©
    char    szLicense[MAX_LICENSE_LEN/*16*/];//³µÅÆºÅÂë
    char    szRelateCardNo[MAX_CARDNO_LEN/*48*/];//¹ØÁª¿¨ºÅ
    NET_DVR_TIME_V30 struStartTime;//ÓÐÐ§¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30 struEndTime;//ÓÐÐ§½áÊøÊ±¼ä
    BYTE    byVehicleType;//³µÁ¾ÀàÐÍ£º0-ÆäËû³µÁ¾£¬1-Ð¡ÐÍ³µ£¬2-´óÐÍ³µ
    BYTE    byPlateColor;//³µÅÆÑÕÉ«£¬²Î¿¼ VCA_PLATE_COLOR
    BYTE    byRes[126];
}NET_DVR_PARKING_VEHICLE,*LPNET_DVR_PARKING_VEHICLE;

//½É·Ñ½ð¶îÐÅÏ¢
typedef    struct tagNET_DVR_CHARGEACCOUNT_CFG
{
    DWORD   dwSize;//½á¹¹Ìå´óÐ¡
    float   fAccount;//Êµ¼ÊÊÕ·Ñ½ð¶î
    BYTE    byRes[128];
}NET_DVR_CHARGEACCOUNT_CFG,*LPNET_DVR_CHARGEACCOUNT_CFG;

//Í£³µ³¡Æ±Ïä´ÓÊôÉè±¸¶à½Ç¶È²ÎÊýÅäÖÃ
typedef    struct tagNET_DVR_PXMULTICTRL_CFG
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    DWORD        dwMultiChansWaitTime;//¶à½Ç¶È×¥ÅÄÆ¥ÅäÊ±¼ä£¨1~300s£©
    BYTE         byMultiChansCapEnabled;//ÊÇ·ñÆôÓÃ¶à½Ç¶È×¥ÅÄ 0-·ñ£¬1-ÊÇ
    BYTE        byRes[127];
}NET_DVR_PXMULTICTRL_CFG,*LPNET_DVR_PXMULTICTRL_CFG;

//Í£³µ³¡Æ±ÏäÍÑ»úÏÂ²ÎÊýÅäÖÃ
typedef    struct tagNET_DVR_PXOFFLINE_CFG
{
    DWORD   dwSize;//½á¹¹Ìå´óÐ¡
    BYTE    byEnabled;//ÊÇ·ñÆôÓÃÆ±ÏäÍÑ»úÄ£Ê½£º0-²»ÆôÓÃ 1-ÆôÓÃ
    BYTE    byChargeEnabled;//ÊÇ·ñÍÑ»úÊÕ·Ñ 0-·ñ£¬1-ÊÇ
    BYTE    byAlarmEnabled;//ÊÇ·ñÆôÓÃÍÑ»ú±¨¾¯ 0-·ñ£¬1-ÊÇ
    BYTE    byRecordSource;//¼ÇÂ¼²úÉúÒÀ¾Ý 0-ÅÆÊ¶ 1-¶Á¿¨
    DWORD   dwTimeWait;//Æ±Ïä½øÈëÍÑ»úÄ£Ê½Ç°µÄµÈ´ýÊ±¼ä£¨1-300Ãë£©
    /**
     realeaseMode&(0x1<<0) ¹Ì¶¨³µ·ÅÐÐ
     realeaseMode&(0x1<<1) ¹Ì¶¨¿¨·ÅÐÐ
     realeaseMode&(0x1<<2) ÁÙÊ±³µ·ÅÐÐ
     realeaseMode&(0x1<<3) ÁÙÊ±¿¨·ÅÐÐ
     realeaseMode&(0x1<<4) ÎÞ³µÅÆ·ÅÐÐ
     realeaseMode&(0x1<<5) ¹Ì¶¨³µÈôÃâ·ÑÔò×Ô¶¯·ÅÐÐ
     realeaseMode&(0x1<<6) ÁÙÊ±³µÈôÃâ·ÑÔò×Ô¶¯·ÅÐÐ 
    */
    DWORD   dwRealeaseMode; //·ÅÐÐ·½Ê½£¬°´Î»±íÊ¾
    BYTE    byVehCardmatch;//³µ¿¨Ò»ÖÂ  0-·ñ£¬1-ÊÇ
    BYTE    bySingleInSingleOut;//µ¥½øµ¥³ö 0-·ñ£¬1-ÊÇ
    BYTE    byRes[126];
}NET_DVR_PXOFFLINE_CFG,*LPNET_DVR_PXOFFLINE_CFG;

typedef    struct tagNET_DVR_PARKINGSAPCE_CFG
{
    DWORD    dwSize;//½á¹¹Ìå´óÐ¡
    DWORD     dwTotalParkingLot;//×ÜÍ£³µÎ»Êý
    DWORD    dwCurrParkingLot;//µ±Ç°Ê£ÓàÍ£³µÎ»Êý
    BYTE    byRes[128];
}NET_DVR_PARKINGSAPCE_CFG,*LPNET_DVR_PARKINGSAPCE_CFG;

typedef    struct tagNET_DVR_PAPERCHARGEINFO_CFG
{
    DWORD   dwSize;//½á¹¹Ìå´óÐ¡
    char    szBarCode[LEN_16];//ÌõÐÎÂë£¨16Î»×Ö·û´®£©
    char    szLicense[MAX_LICENSE_LEN]; //³µÅÆºÅÂë
    char    szVehicleInTime[LEN_32];//Èë³¡Ê±¼ä£¨32Î»×Ö·û´® YYYY-MM-DD HH:MM:SS£©
    char    szPaymentTime[LEN_32];//½É·ÑÊ±¼ä£¨32Î»×Ö·û´® YYYY-MM-DD HH:MM:SS£©
    float   fPaymentAmount;//½É·Ñ½ð¶î
    DWORD   dwPaymentOutFailureTime;//½É·Ñ³ö³¡Ê§Ð§Ê±¼ä£¨DWORD£©
    BYTE    byVehicleOutEnabled; //ÊÇ·ñ³ö³¡: 0- ·ñ£¬1- ÊÇ
    BYTE    byRes[128];
}NET_DVR_PAPERCHARGEINFO_CFG,*LPNET_DVR_PAPERCHARGEINFO_CFG;

//Í£³µ³¡Æ±Ïä²ÎÊý
typedef    struct tagNET_DVR_ILLEGALCARDFILTERING_CFG
{
    DWORD   dwSize;//½á¹¹Ìå´óÐ¡
    char    sLEDDefaultInfo[MAX_LED_INFO_LEN/*512*/]; // LEDÄ¬ÈÏÏÔÊ¾ÄÚÈÝ
    BYTE    byillegalCardFilteringEnabled;//ÆôÓÃ·Ç·¨¿¨¹ýÂË,0~²»ÆôÓÃ£¬1~ÆôÓÃ
    BYTE    bySendCardSensingCoilEnabled;//·¢¿¨»úÊÇ·ñ¹ØÁªµØ¸ÐÏßÈ¦
    BYTE    byWiegendSensingCoilEnabled;//Ô¶¾àÀë¿¨ÊÇ·ñ¹ØÁªµØ¸ÐÏßÈ¦
    BYTE    byGateSwitchEnabled; //ÊÇ·ñÓÐµÀÕ¢¿ª¹ØÐÅÏ¢
    BYTE    byVerifyKeyWriteCardEnabled;//ÊÇ·ñÑéÖ¤ÃÜÔ¿ºÍÐ´¿¨
    BYTE    byNoplateTakeCardEnabled;// ÊÇ·ñÆôÓÃÎÞ³µÅÆÈ¡Æ¾¾Ý·ÅÐÐ
    BYTE    byRes[126];
}NET_DVR_ILLEGALCARDFILTERING_CFG,*LPNET_DVR_ILLEGALCARDFILTERING_CFG;


//Í£³µ³¡³öÈë¿Ú³µ¿¨ÊÕ·Ñ¹æÔò¹æÔòÌõ¼þ½á¹¹
typedef struct tagNET_DVR_TME_CHARGERULE_COND
{
    DWORD   dwSize; 
    DWORD   dwChannel;  //Í¨µÀºÅ 
    char    szCardNo[32];//¿¨ºÅ
    BYTE    byRes[128];
}NET_DVR_TME_CHARGERULE_COND, *LPNET_DVR_TME_CHARGERULE_COND;

//LEDÆÁÄ»ÏÔÊ¾²ÎÊý
typedef    struct tagNET_DVR_LEDDISPLAY_CFG
{
    DWORD   dwSize;//½á¹¹Ìå´óÐ¡
    char    sDisplayInfo[MAX_LED_INFO_LEN/*512*/]; // LEDÏÔÊ¾ÄÚÈÝ
    BYTE    byDisplayMode;//ÏÔÊ¾·½Ê½:0~×óÒÆ,1~ÓÒÒÆ,2~Á¢¼´ÏÔÊ¾
    BYTE    bySpeedType;//ËÙ¶ÈÀàÐÍ:0~¿ì,1~ÖÐ,2~Âý
    BYTE    byRes1[2];
    DWORD   dwShowTime;//ÏÔÊ¾Ê±³¤£¬1~60Ãë
    BYTE    byRes[128];
}NET_DVR_LEDDISPLAY_CFG,*LPNET_DVR_LEDDISPLAY_CFG;

//ÓïÒô²¥±¨¿ØÖÆ²ÎÊý
typedef    struct tagNET_DVR_VOICEBROADCAST_CFG
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    char        sInfo[MAX_VOICE_INFO_LEN/*128*/]; //ÓïÒô²¥±¨ÄÚÈÝ
    BYTE        byRes[128];
}NET_DVR_VOICEBROADCAST_CFG,*LPNET_DVR_VOICEBROADCAST_CFG;

//Ö½Æ±´òÓ¡¸ñÊ½²ÎÊý
typedef    struct tagNET_DVR_PAPERPRINTFORMAT_CFG
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    char        sTitleInfo[MAX_LITLE_INFO_LEN/*64*/]; //Ö½Æ±±êÌâÄÚÈÝ
    char        sCustomInfo[MAX_CUSTOM_INFO_LEN/*64*/]; //Ö½Æ±×Ô¶¨ÒåÐÅÏ¢ÄÚÈÝ
    char        sPhoneNum[MAX_PHONE_NUM_LEN/*16*/];//ÁªÏµµç»°
    BYTE        byPrintInTimeEnabled; //ÊÇ·ñ´òÓ¡Èë³¡Ê±¼ä
    BYTE        byRes[127];
}NET_DVR_PAPERPRINTFORMAT_CFG,*LPNET_DVR_PAPERPRINTFORMAT_CFG;


//ÖÇÄÜËøÕ¢Ê±¼ä¶Î
typedef    struct tagNET_DVR_LOCKGATE_TIME_CFG
{
    char        sBeginTime[LEN_32];//¿ªÊ¼Ê±¼ä£¨32Î»×Ö·û´® HH:MM:SS£©    
    char        sEndTime[LEN_32];//½áÊøÊ±¼ä£¨32Î»×Ö·û´® HH:MM:SS£©
    BYTE        byRes[64];
}NET_DVR_LOCKGATE_TIME_CFG,*LPNET_DVR_LOCKGATE_TIME_CFG;

//ÖÇÄÜËøÕ¢²ÎÊý
typedef    struct tagNET_DVR_LOCKGATE_CFG
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    NET_DVR_LOCKGATE_TIME_CFG struTime[LOCKGATE_TIME_NUM]; //ÖÇÄÜËøÕ¢Ê±¼ä¶Î
    BYTE        byRes[128];
}NET_DVR_LOCKGATE_CFG,*LPNET_DVR_LOCKGATE_CFG;

//Êý¾ÝÍ¬²½×´Ì¬
typedef struct NET_DVR_PARKING_DATASTATE_INFO
{
    DWORD   dwSize;
    char    szAppSerialNum [MAX_APP_SERIALNUM_LEN/*32*/];//Ó¦ÓÃÐòÁÐºÅ, ´ú±íµ±Ç°ËùÁ¬½ÓµÄÓ¦ÓÃ
    DWORD   dwParkingNum; //µ±Ç°Í£³µ³¡ºÅ
    DWORD   dwUpdataSerialNum; //¸üÐÂÐòÁÐºÅ; ´ú±í×îºó¸üÐÂµÄÐòÁÐºÅ¡£
    BYTE    byRes[256];
} NET_DVR_PARKING_DATASTATE_INFO,*LPNET_DVR_PARKING_DATASTATE_INFO;

//Áª¶¯EPTZ²ÎÊý
typedef    struct tagNET_DVR_EPTZ_CFG
{
    DWORD dwSize;
    BYTE    byEnableEPTZ;        //ÊÇ·ñÆôÓÃEPTZ, 0-²»ÆôÓÃ£¬1 -ÆôÓÃ
    BYTE    byRes[503];
}NET_DVR_EPTZ_CFG, *LPNET_DVR_EPTZ_CFG;

//ÖÐÐÄµã²ÎÊý
typedef    struct tagNET_DVR_CENTER_POINT_CFG
{
    DWORD dwSize;
    NET_VCA_POLYGON struRegion;//ÇøÓò·¶Î§
    BYTE    byRes[512];
}NET_DVR_CENTER_POINT_CFG, *LPNET_DVR_CENTER_POINT_CFG;

/********************************DS-TME4XX¿ØÖÆ»ú¿ª·¢ End****************************/

/********************************IPC FF³µÅÆ Start****************************/
typedef struct tagNET_DVR_FTPUPLOAD_PARAM
{
    char szRuleTypeItem[MAX_SINGLE_FTPPICNAME_LEN/*20*/];
    char szCameraName[MAX_CAMNAME_LEN/*32*/];
    BYTE byRes[64];
}NET_DVR_FTPUPLOAD_PARAM, *LPNET_DVR_FTPUPLOAD_PARAM;

//char szRuleTypeItem[MAX_SINGLE_FTPPICNAME_LEN/*20*/];
//ÀïÃæÄÚÈÝÊÇ¹Ì¶¨×Ö·û´®  capture_time,plate_No,alarm_type,camera_name
//Êý×éÏÂ±ê±íÊ¾ÏÈºóË³Ðò

//char szCameraName[MAX_CAMNAME_LEN/*32*/];
//ÒÀÀµÓÚszRuleTypeItemÖÐ×Ö¶Î±íÊ¾ÄÚÈÝÎª camera_name µÄÇé¿ö

typedef struct tagNET_DVR_FTPUPLOADCFG
{
    DWORD dwSize;
    BYTE byEventType; //ÊÂ¼þÀàÐÍ£¬0-Ä¬ÈÏ£¬1-³µÁ¾¼ì²â
    BYTE byMode; //Í¼Æ¬ÃüÃûÄ£Ê½£¬0-Ä¬ÈÏ£¬1-×Ô¶¨Òå
    BYTE byRes[62];
    NET_DVR_FTPUPLOAD_PARAM  struCustomVehicle[MAX_FTPNAME_NUM/*12*/];
    BYTE byRes1[1024] ;
}NET_DVR_FTPUPLOADCFG, *LPNET_DVR_FTPUPLOADCFG;

/********************************IPC FF³µÅÆ End****************************/

//ÐÅÏ¢·¢²¼ÖÕ¶ËÉý¼¶
typedef struct tagNET_DVR_PUBLISH_UPGRADE_COND
{
    DWORD dwSize;
    DWORD dwUpgradeType;    //Éý¼¶ÀàÐÍ£¬1-°´ÖÕ¶ËÉý¼¶£¬2-°´ÖÕ¶Ë×éÉý¼¶
    DWORD dwTerminalNum;    //Éý¼¶µÄÖÕ¶Ë¸ñÊ½£¬°´ÖÕ¶ËÉý¼¶Ê±ÓÐÐ§
    DWORD *pTerminalNo;     //ÐèÒªÉý¼¶µÄÖÕ¶ËºÅ£¬°´ÖÕ¶ËÉý¼¶Ê±ÓÐÐ§
    DWORD dwGroupNo;        //ÖÕ¶Ë×éºÅ£¬°´ÖÕ¶Ë×éÉý¼¶Ê±ÓÐÐ§
    BYTE  byRes[32];
}NET_DVR_PUBLISH_UPGRADE_COND, *LPNET_DVR_PUBLISH_UPGRADE_COND;
//WEP¼ÓÃÜÃÜÔ¿
typedef struct tagNET_DVR_WEP_KEY_CFG
{
    char   csWEPKey[WEP_KEY_MAX_SIZE/*32*/];//¼ÓÃÜÃÜÔ¿£¬ 
    BYTE    byRes[64];
}NET_DVR_WEP_KEY_CFG, *LPNET_DVR_WEP_KEY_CFG;

typedef struct tagNET_DVR_SUB_UPGRADE_PROGRESS
{
    DWORD dwTerminalNo; //ÖÕ¶ËºÅ
    DWORD dwProgress;   //ÖÕ¶ËÉý¼¶½ø¶È£¬0-100£¬101±íÊ¾´ËÖÕ¶ËÉý¼¶³öÏÖÒì³£
}NET_DVR_SUB_UPGRADE_PROGRESS, *LPNET_DVR_SUB_UPGRADE_PROGRESS;

typedef struct tagNET_DVR_UPGRADE_PROGRESS_RESULT
{
    DWORD  dwSize;
    DWORD  dwMainProgress;      //Ö÷½ø¶È£¬0-100
    DWORD  dwSubProgressNum;    //×Ó½ø¶È¸öÊý
    LPNET_DVR_SUB_UPGRADE_PROGRESS  lpStruSubProgress; //¸÷ÖÕ¶ËÉý¼¶µÄ×Ó½ø¶È£¬dwSubProgressNum¸öNET_DVR_SUB_UPGRADE_PROGRESSÄÚÈÝ
    BYTE   byRes[32];
}NET_DVR_UPGRADE_PROGRESS_RESULT, *LPNET_DVR_UPGRADE_PROGRESS_RESULT;

//ÐÅÏ¢·¢²¼·þÎñÆ÷ÈÕ³Ì·¢²¼½ø¶È
typedef struct tagNET_DVR_SCHEDULE_PROGRESS_COND
{
    DWORD dwSize;
    DWORD dwScheduleNo;     //ÈÕ³ÌºÅ
    BYTE  byProgressType;   //»ñÈ¡µÄ½ø¶ÈÀàÐÍ£¬1-°´×é»ñÈ¡½ø¶È£¬2-°´ÖÕ¶Ë»ñÈ¡½ø¶È
    BYTE  byRes1[3];
    DWORD dwGroupNo;        //ÖÕ¶Ë×éºÅ£¬½ø¶ÈÀàÐÍÎª1Ê±ÓÐÐ§
    DWORD dwTerminalNo;     //ÖÕ¶ËºÅ£¬½ø¶ÈÀàÐÍÎª2Ê±ÓÐÐ§
    BYTE  byRes2[32];
}NET_DVR_SCHEDULE_PROGRESS_COND, *LPNET_DVR_SCHEDULE_PROGRESS_COND;

typedef struct tagNET_DVR_SUB_SCHEDULE_PROGRESS
{
    DWORD dwTerminalNo; //ÖÕ¶ËºÅ
    DWORD dwProgress;   //ÖÕ¶ËÈÕ³Ì·¢²¼½ø¶È£¬0-100£¬101±íÊ¾´ËÖÕ¶ËÈÕ³Ì·¢²¼³öÏÖÒì³£,102±íÊ¾´ËÖÕ¶Ë´æ´¢¿Õ¼ä²»×ã
}NET_DVR_SUB_SCHEDULE_PROGRESS, *LPNET_DVR_SUB_SCHEDULE_PROGRESS;

typedef struct tagNET_DVR_SCHEDULE_PROGRESS_RESULT
{
    DWORD  dwSize;
    DWORD  dwMainProgress;      //Ö÷½ø¶È£¬0-100£¬°´×é»ñÈ¡½ø¶ÈÊ±ÎªÕû×éÈÕ³Ì·¢²¼½ø¶È£¬°´ÖÕ¶Ë»ñÈ¡½ø¶ÈÊ±Îªµ¥¸öÖÕ¶ËÈÕ³Ì·¢²¼½ø¶È
    DWORD  dwSubProgressNum;    //×Ó½ø¶È¸öÊý£¬°´×é»ñÈ¡Ê±ÓÐÐ§£¬±íÊ¾×éÏÂ¸÷ÖÕ¶Ë½ø¶È¸öÊý
    LPNET_DVR_SUB_SCHEDULE_PROGRESS  lpStruSubProgress; //¸÷ÖÕ¶ËÈÕ³Ì·¢²¼µÄ×Ó½ø¶È£¬°´×é»ñÈ¡Ê±ÓÐÐ§£¬dwSubProgressNum¸öNET_DVR_SUB_SCHEDULE_PROGRESSÄÚÈÝ
    BYTE   byRes[32];
}NET_DVR_SCHEDULE_PROGRESS_RESULT, *LPNET_DVR_SCHEDULE_PROGRESS_RESULT;



//WEP²ÎÊý
typedef struct tagNET_DVR_WEP_CFG
{
    BYTE   byAuthenticationType;//Éí·ÝÑéÖ¤ÀàÐÍ£»0~¿ªÆôÑéÖ¤£»1~¹²ÏíÃÜÔ¿£»2~×Ô¶¯ÑéÖ¤
    BYTE   byDefaultTransmitKeyIndex;//Ä¬ÈÏ´«ÊäÃÜÔ¿¸öÊý£¬1~4¸ö¡£¶ÔÓ¦µ½struEncryptionKeyCfg¼ÓÃÜÃÜÔ¿µÄ¸öÊý¡£
    /*
    µ±Îª64Î»ÃÜÔ¿Ê±£¬ASCIIÂëÃÜÔ¿×Ö·û³¤¶ÈÎª5¸ö¡£
    µ±Îª128Î»ÃÜÔ¿Ê±£¬ASCIIÂëÃÜÔ¿×Ö·û³¤¶ÈÎª13¸ö¡£
    */
    BYTE   byWepKeyLenType;//ÃÜÔ¿ÀàÐÍ£»0~   64Î»ÃÜÔ¿£¬1~  128Î»ÃÜÔ¿¡£
    BYTE   byKeyType;// ÃÜÔ¿ÀàÐÍ£»0~   ASCIIÂë£¬1~  16½øÖÆ¡£
    NET_DVR_WEP_KEY_CFG struWEPKeyCfg[WEP_KEY_MAX_NUM/*4*/];// WEP¼ÓÃÜÃÜÔ¿£¬×î´óÖ§³Ö4¸ö¡£
    BYTE   byRes[128];
}NET_DVR_WEP_CFG, *LPNET_DVR_WEP_CFG;

//WPA²ÎÊý
typedef struct tagNET_DVR_WPA_CFG
{
    BYTE   byAlgorithmType; //Ëã·¨ÀàÐÍ£»0~TKIP, 1~AES, 2~TKIP/AES
    BYTE   byWPAKeyLen;// WPA¹²ÏíÃÜÔ¿³¤¶È£¬Çø¼äÎª8~63£¬¶ÔÓ¦µ½csSharedKey²ÎÊýµÄ×Ö·û³¤¶È
    BYTE   byDefaultPassword;//ÊÇ·ñÆôÓÃÄ¬ÈÏWPAÃÜÔ¿
    BYTE   byRes1;
    char   csSharedKey[WPA_KEY_MAX_SIZE/*64*/];//WPA¹²ÏíÃÜÔ¿,Îª8-63¸öASCII×Ö·û
    BYTE   byRes[128];
}NET_DVR_WPA_CFG, *LPNET_DVR_WPA_CFG;


typedef struct tagNET_DVR_WIRELESS_SECURITY_CFG
{
    BYTE   bySecurityMode; //°²È«Ä£Ê½£»0~½ûÓÃ,1~WEP,2~WPA-personal, 3~WPA2-personal
    NET_DVR_WEP_CFG  struWEPCfg; //µ±°²È«Ä£Ê½Ñ¡ÔñÎªWEPÊ±ÉúÐ§¡£
    NET_DVR_WPA_CFG  struWPACfg; //µ±°²È«Ä£Ê½Ñ¡ÔñÎªWPA-personal¡¢WPA2-personalÊ±ÉúÐ§¡£
    BYTE    byRes[256];
} NET_DVR_WIRELESS_SECURITY_CFG,*LPNET_DVR_WIRELESS_SECURITY_CFG;

//wifiÈÈµã²ÎÊýÅäÖÃ(ÍêÕû°æ)
typedef struct tagNET_DVR_WIRELESSSERVER_FULLVERSION_CFG
{
    DWORD    dwSize;//½á¹¹Ìå´óÐ¡
    BYTE    byWifiAPEnabled;  //ÊÇ·ñÆôÓÃÎÞÏßAP£º0-·ñ£¬1- ÊÇ
    BYTE    byBroadcastEnabled; // ÊÇ·ñÆôÓÃ¹ã²¥£¬0-·ñ£¬1-ÊÇ
    BYTE    byWlanShareEnabled; //ÊÇ·ñÆôÓÃ¹²Ïí£¬0-·ñ£¬1-ÊÇ
    BYTE    byDHCPEnabled; //ÊÇ·ñÆôÓÃDHCP£¬0-·ñ£¬1-ÊÇ
    BYTE    bySSID[IW_ESSID_MAX_SIZE]; //SSID
    BYTE    byRes1[11];
    BYTE    byIPType; //IPµØÖ·ÀàÐÍ£¬0-IPv4,1-IPv6
    NET_DVR_IPADDR    struIPAddr;  //IPµØÖ·
    NET_DVR_IPADDR    struIPMask;  //ÑÚÂëµØÖ·
    NET_DVR_IPADDR    struGatewayIPMask;  //Íø¹ØµØÖ·
    NET_DVR_IPADDR    struStartIPAddrPool;  //IP¶ÎÆðÊ¼µØÖ·
    NET_DVR_IPADDR    struEndIPAddrPool;  // IP¶Î½áÊøµØÖ·
    NET_DVR_IPADDR    struDNSServerIpAddr[MAX_DNS_SERVER_NUM]; //DNSµØÖ·
    NET_DVR_WIRELESS_SECURITY_CFG struWirelessSecurityCfg;//ÎÞÏß°²È«¼ÓÃÜ²ÎÊý
    BYTE    byRes[256];
}NET_DVR_WIRELESSSERVER_FULLVERSION_CFG, *LPNET_DVR_WIRELESSSERVER_FULLVERSION_CFG;

typedef struct tagNET_DVR_OPTICAL_DEV_CHAN_INFO
{
    DWORD dwChannel;    //Í¨µÀºÅ£¬0ÎªÎÞÐ§
    BYTE byChannelName[NAME_LEN];
    BYTE bySignal;  //ÊÇ·ñÓÐÐÅºÅ£¬0-ÎÞ£¬1-ÓÐ£¬Ö»¶Á
    BYTE bySignalType;  //ÐÅºÅÔ´ÀàÐÍ£¬1-±êÇå£¬2-¸ßÇå£¬ÓÐÐÅºÅÊ±ÓÐÐ§£¬Ö»¶Á
    BYTE byRes[10];
}NET_DVR_OPTICAL_DEV_CHAN_INFO, *LPNET_DVR_OPTICAL_DEV_CHAN_INFO;

typedef struct tagNET_DVR_OPTICAL_DEV_NODE
{
    BYTE  byValid;    //ÊÇ·ñÓÐÐ§£¬0-ÎÞÐ§£¬1-ÓÐÐ§
    BYTE  byRes1[3];
    DWORD dwDevNo;    //¹â¶Ë»úºÅ
    BYTE  byDevName[NAME_LEN];   //½Úµã¹â¶Ë»úÃû³Æ
    BYTE  byDevID[MAX_ID_LEN];   //¹â¶Ë»úÎïÀíID£¬Éè±¸Î¨Ò»±êÊ¶£¬Ö»¶Á
    NET_DVR_OPTICAL_DEV_CHAN_INFO struChannel[MAX_CHANNUM];
    BYTE  byRes2[32];
}NET_DVR_OPTICAL_DEV_NODE, *LPNET_DVR_OPTICAL_DEV_NODE;

#define MAX_OPTICAL_DEV_NODE 32     //×î¶à½Úµã¹â¶Ë»úÊý

typedef struct tagNET_DVR_OPTICAL_PORT_INFO
{
    DWORD dwSize;
    BYTE  byValid;   //ÊÇ·ñÓÐÐÅºÅ½ÓÈë£¬0-ÎÞ£¬1-ÓÐ£¬Ö»¶Á
    BYTE  byLinkType;    //Á´Â·ÀàÐÍ£¬1-»·Íø£¬2-Á´Íø£¬Ö»¶Á
    BYTE  byPortWorkMode;    //¶Ë¿Ú¹¤×÷Ä£Ê½£¬0-ÎÞÐ§£¬1-Ö÷¿Ú£¬2-¸¨¿Ú£¬µ±Á´Â·ÀàÐÍÎª»·ÍøÊ±ÓÐÐ§£¬Ö»¶Á
    BYTE  byRes1[1];
    DWORD dwPairPort;    //Åä¶Ô¹â¿ÚºÅ£¬Á´Â·ÀàÐÍÎª»·ÍøÊ±ÓÐÐ§£¬Ö÷¿ÚÊ±´Ë²ÎÊýÎª¸¨¿ÚºÅ£¬¸¨¿ÚÊ±£¬´Ë²ÎÊýÎªÖ÷¿ÚºÅ
    NET_DVR_OPTICAL_DEV_NODE struDevInfo[MAX_OPTICAL_DEV_NODE]; //½Úµã¹â¶Ë»úÉè±¸ÐÅÏ¢
    BYTE  byRes2[32];
}NET_DVR_OPTICAL_PORT_INFO, *LPNET_DVR_OPTICAL_PORT_INFO;

typedef struct tagNET_DVR_OPTICAL_CHAN_RELATE_CFG
{
    DWORD dwSize;
    BYTE  byEnable;    //ÊÇ·ñ¹ØÁª¹â¶Ë»úÊäÈë£¬0-·ñ£¬·Ç0-ÊÇ
    BYTE  byRes1[3];
    DWORD dwDevNo;    //¹â¶Ë»úºÅ
    DWORD dwOpticalPort;  //¹â¿ÚºÅ
    BYTE  byDevID[MAX_ID_LEN];   //¹â¶Ë»úÎïÀíID
    DWORD dwInputChanNo;  //¹â¶Ë»úÊäÈëÍ¨µÀºÅ
    BYTE  byRes2[64];
}NET_DVR_OPTICAL_CHAN_RELATE_CFG, *LPNET_DVR_OPTICAL_CHAN_RELATE_CFG;

typedef  struct tagNET_DVR_START_FILE_TO_CLOUD_COND
{
    DWORD    dwSize; 
    BYTE    aCameraID[MAX_CAMERAID_LEN];    //±àÂëÆ÷ID
    DWORD      dwPoolID;    //´æ´¢³ØID
    DWORD      dwRepPoolID;    //ÈßÓà³ØID
    WORD      wReplication;    //ÈßÓà·ÝÊý
    BYTE       byRes [178];
}NET_DVR_START_FILE_TO_CLOUD_COND,*LPNET_DVR_START_FILE_TO_CLOUD_COND;

typedef  struct     tagNET_DVR_START_PICTURE_FROM_CLOUD_COND
{
    DWORD       dwSize;
    BYTE        aCameraID[MAX_CAMERAID_LEN];    //±àÂëÆ÷ID
    NET_DVR_TIME_V30    struBeginTime;    //¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30    struEndTime;        //½áÊøÊ±¼ä
    DWORD   dwPicType;        //Í¼Æ¬ÀàÐÍ£¬°´Î»±íÊ¾
    //bit0-JPG
    //bit1-BMP
    //bit2-PNG
    BYTE    byRes1[3];
    BYTE    byZoomType;    //0-²»Ëõ·Å,1-°´±ÈÀý,2-°´´óÐ¡,3-°´·Ö±æÂÊ
    union
    {
        BYTE    uLen[32];
        struct
        {
            BYTE        byScale;         //1~99
        }struScale;
        struct
        {
            BYTE        byQuality;    //1~99
        }struQuality;
        struct
        {
            DWORD       dwWidth;    
            DWORD       dwHeight;
        }struResolution; //Ä¿±ê·Ö±æÂÊ
    }uZoomParam;
    DOWNLOAD_DATA_CB    fnDownloadFileCallBack;    //Êý¾Ý»Øµ÷º¯Êý
    void*   pUser;    //ÓÃ»§Êý¾ÝÖ¸Õë
    BYTE    byRes [372];
}NET_DVR_START_PICTURE_FROM_CLOUD_COND,*LPNET_DVR_START_PICTURE_FROM_CLOUD_COND;

typedef     struct    tagNET_DVR_START_PICTURE_FROM_CLOUD_RET
{
    DWORD       dwSize;
    DWORD       dwFileCount;    //ÎÄ¼þÊýÁ¿
    BYTE        byRes[120];
}NET_DVR_START_PICTURE_FROM_CLOUD_RET,*LPNET_DVR_START_PICTURE_FROM_CLOUD_RET;

typedef  struct 
{
    DWORD       dwSize;
    NET_DVR_TIME_V30    struTime;    //Í¼Æ¬Ê±¼ä
    DWORD       dwPicLen;    //Í¼Æ¬³¤¶È
    BYTE        byPicType;    //Í¼Æ¬¸ñÊ½,1-jpg,2-bmp,3-png
    BYTE        byRes[107];
}NET_DVR_PICTURE_FROM_CLOUD_RET,*LPNET_DVR_PICTURE_FROM_CLOUD_RET;

typedef struct tagNET_DVR_ACS_EXTERNAL_DEV_CFG
{
    DWORD dwSize;
    BYTE byIDCardUpMode;  //Éí·ÝÖ¤ÐÅÏ¢ÉÏ±¨£¬0£ºÉÏ´«18Î»Éí·ÝÖ¤ºÅ£»1£ºÉÏ´«È«²¿ÐÅÏ¢
    BYTE byRes1;
    BYTE byCardVerifyMode; //Ë¢¿¨ÈÏÖ¤Ä£Ê½£¬0£ºÔ¶³ÌÖÐÐÄÈÏÖ¤£»1£º¿Í»§¶ËÆ½Ì¨ÈÏÖ¤
    BYTE byACSDevType; //Éè±¸ÐÍºÅ£¬1£ºÉí·ÝÖ¤¶Á¿¨Æ÷£¬2£ºIC¶Á¿¨Æ÷£¬3£º¶þÎ¬Âë¶Á¿¨Æ÷£¬4£ºÖ¸ÎÆ¶Á¿¨Æ÷£¬5£º×Ö·ûÆÁ+¶þÎ¬Âë¶Á¿¨Æ÷£¬6£ºÊÕ¿¨Æ÷£¬7£º×Ö·ûÆÁ£¬8£ºÖ¸ÎÆÍ·£¬9£ºÓïÒôÄ£¿é£»
    BYTE byDoorMode; //ÃÅ³öÈëÀàÐÍ£¬0£º½øÃÅ£¬1£º³öÃÅ£»
    BYTE byRes2;
    WORD wDevDetailType; //ÍâÉèµÄ¾ßÌåÉè±¸ÐÍºÅ£¬1-iDR210£¬2-IDM10£»
    BYTE byRes[300];
}NET_DVR_ACS_EXTERNAL_DEV_CFG, *LPNET_DVR_ACS_EXTERNAL_DEV_CFG;

typedef struct tagNET_DVR_PERSONNEL_CHANNEL_CFG
{
    DWORD dwSize;
    BYTE byInMode;            //½øÃÅÄ£Ê½£¬0ÊÜ¿Ø£»1½ûÖ¹£»2×ÔÓÉ£»
    BYTE byOutMode;         //³öÃÅÄ£Ê½£¬0ÊÜ¿Ø£»1½ûÖ¹£»2×ÔÓÉ£»
    BYTE byWorkMode;        //¹¤×÷Ä£Ê½£¬0½ô¼±£»1Î¬»¤£»2³£±Õ£»3³£¿ª£» 
    BYTE byRes[301];
}NET_DVR_PERSONNEL_CHANNEL_CFG, *LPNET_DVR_PERSONNEL_CHANNEL_CFG;

#define MAX_ID_NUM_LEN                  32  //×î´óÉí·ÝÖ¤ºÅ³¤¶È
#define MAX_ID_NAME_LEN                 128   //×î´óÐÕÃû³¤¶È
#define MAX_ID_ADDR_LEN                 280   //×î´ó×¡Ö·³¤¶È
#define MAX_ID_ISSUING_AUTHORITY_LEN    128 //×î´óÇ©·¢»ú¹Ø³¤¶È

//Éí·ÝÖ¤ÐÅÏ¢
typedef struct tagNET_DVR_ID_CARD_INFO
{
    DWORD  dwSize;        //½á¹¹³¤¶È
    BYTE  byName[MAX_ID_NAME_LEN];   //ÐÕÃû
    NET_DVR_DATE struBirth; //³öÉúÈÕÆÚ
    BYTE byAddr[MAX_ID_ADDR_LEN];  //×¡Ö·
    BYTE byIDNum[MAX_ID_NUM_LEN];   //Éí·ÝÖ¤ºÅÂë
    BYTE byIssuingAuthority[MAX_ID_ISSUING_AUTHORITY_LEN];  //Ç©·¢»ú¹Ø
    NET_DVR_DATE struStartDate;  //ÓÐÐ§¿ªÊ¼ÈÕÆÚ
    NET_DVR_DATE struEndDate;  //ÓÐÐ§½ØÖ¹ÈÕÆÚ
    BYTE byTermOfValidity;  //ÊÇ·ñ³¤ÆÚÓÐÐ§£¬ 0-·ñ£¬1-ÊÇ£¨ÓÐÐ§½ØÖ¹ÈÕÆÚÎÞÐ§£©
    BYTE   bySex;  //ÐÔ±ð£¬1-ÄÐ£¬2-Å®
    BYTE  byNation;    //Ãñ×å£¬1-"ºº"£¬2-"ÃÉ¹Å"£¬3-"»Ø",4-"²Ø",5-"Î¬Îá¶û",6-"Ãç",7-"ÒÍ",8-"×³",9-"²¼ÒÀ",10-"³¯ÏÊ",
    //11-"Âú",12-"¶±",13-"Ñþ",14-"°×",15-"ÍÁ¼Ò",16-"¹þÄá",17-"¹þÈø¿Ë",18-"´ö",19-"Àè",20-"ÀüËÛ",
    //21-"Øô",22-"î´",23-"¸ßÉ½",24-"À­ìï",25-"Ë®",26-"¶«Ïç",27-"ÄÉÎ÷",28-"¾°ÆÄ",29-"¿Â¶û¿Ë×Î",30-"ÍÁ",
    //31-"´ïÎÓ¶û",32-"ØïÀÐ",33-"Ç¼",34-"²¼ÀÊ",35-"ÈöÀ­",36-"Ã«ÄÏ",37-"ØîÀÐ",38-"Îý²®",39-"°¢²ý",40-"ÆÕÃ×",
    //41-"Ëþ¼ª¿Ë",42-"Å­",43-"ÎÚ×Î±ð¿Ë",44-"¶íÂÞË¹",45-"¶õÎÂ¿Ë",46-"µÂ°º",47-"±£°²",48-"Ô£¹Ì",49-"¾©",50-"ËþËþ¶û",
    //51-"¶ÀÁú",52-"¶õÂ×´º",53-"ºÕÕÜ",54-"ÃÅ°Í",55-"çó°Í",56-"»ùÅµ"
    BYTE byRes[101];
}NET_DVR_ID_CARD_INFO, *LPNET_DVR_ID_CARD_INFO;

//Éí·ÝÖ¤ÐÅÏ¢±¨¾¯
typedef struct tagNET_DVR_ID_CARD_INFO_ALARM
{
    DWORD  dwSize;        //½á¹¹³¤¶È
    NET_DVR_ID_CARD_INFO    struIDCardCfg ;//Éí·ÝÖ¤ÐÅÏ¢
    DWORD dwMajor; //±¨¾¯Ö÷ÀàÐÍ£¬²Î¿¼ºê¶¨Òå
    DWORD dwMinor; //±¨¾¯´ÎÀàÐÍ£¬²Î¿¼ºê¶¨Òå
    NET_DVR_TIME_V30  struSwipeTime; //Ê±¼ä
    BYTE    byNetUser[MAX_NAMELEN] ;//ÍøÂç²Ù×÷µÄÓÃ»§Ãû
    NET_DVR_IPADDR    struRemoteHostAddr ;//Ô¶³ÌÖ÷»úµØÖ·
    DWORD dwCardReaderNo; //¶Á¿¨Æ÷±àºÅ£¬Îª0ÎÞÐ§
    DWORD dwDoorNo; //ÃÅ±àºÅ£¬Îª0ÎÞÐ§
    DWORD dwPicDataLen;   //Í¼Æ¬Êý¾Ý´óÐ¡£¬²»Îª0ÊÇ±íÊ¾ºóÃæ´øÊý¾Ý
    char    *pPicData;
    BYTE byCardType; //¿¨ÀàÐÍ£¬1-ÆÕÍ¨¿¨£¬2-²Ð¼²ÈË¿¨£¬3-ºÚÃûµ¥¿¨£¬4-Ñ²¸ü¿¨£¬5-Ð²ÆÈ¿¨£¬6-³¬¼¶¿¨£¬7-À´±ö¿¨£¬8-½â³ý¿¨£¬Îª0ÎÞÐ§
    BYTE byRes[207];
}NET_DVR_ID_CARD_INFO_ALARM, *LPNET_DVR_ID_CARD_INFO_ALARM;

typedef struct tagNET_DVR_PASSNUM_INFO_ALARM
{
    DWORD  dwSize;        //½á¹¹³¤¶È
    DWORD  dwAccessChannel;    //ÈËÔ±Í¨µÀºÅ
    NET_DVR_TIME_V30  struSwipeTime; //Ê±¼ä
    BYTE    byNetUser[MAX_NAMELEN] ;//ÍøÂç²Ù×÷µÄÓÃ»§Ãû
    NET_DVR_IPADDR    struRemoteHostAddr ;//Ô¶³ÌÖ÷»úµØÖ·
    DWORD    dwEntryTimes;    //ÈËÔ±Èë´ÎÊý£»
    DWORD    dwExitTimes;        //ÈËÔ±³ö´ÎÊý£»
    DWORD    dwTotalTimes;        //ÈËÔ±³öÈë×Ü´ÎÊý£» 
    BYTE byRes[300];
}NET_DVR_PASSNUM_INFO_ALARM, *LPNET_DVR_PASSNUM_INFO_ALARM;
typedef struct tagNET_DVR_UPLOAD_VIDEO_INFO
{
    DWORD   dwSize;
    DWORD   dwVideoMangeNo;  //ÊÓÆµ¹ÜÀíºÅ
    BYTE    byVideoType;  //ÊÓÆµ¸ñÊ½ 0-AVI 1-WMV 2-MP4 3-FLV 3-VOD 4-MKV 5-RMVB 
    BYTE    byRes1[3];  //±£Áô
    BYTE    sVideoName[NAME_LEN];  //ÊÓÆµÃû³Æ 
    NET_DVR_TIME_V30 struTime;  //Í¼Æ¬ÉÏ´«Ê±¼ä
    BYTE     byRes[132];
} NET_DVR_UPLOAD_VIDEO_INFO, *LPNET_DVR_UPLOAD_VIDEO_INFO;

typedef struct tagNET_DVR_DEVICE_FILE_INFO
{
    DWORD   dwSize;
    BYTE    sFileName[NAME_LEN];  //ÎÄ¼þÃû³Æ
    DWORD    dwManageNo;     //(Ö»ÄÜ»ñÈ¡)
    NET_DVR_TIME_EX  struTime;    //ÎÄµµÉÏ´«Ê±¼ä 
    BYTE    byUsed;          //ÊÇ·ñÒÑ´æÔÚ£¬0-²»´æÔÚ£¬1-´æÔÚ £¨Ö»ÄÜ»ñÈ¡£©
    BYTE    byRes[127];
} NET_DVR_DEVICE_FILE_INFO, *LPNET_DVR_DEVICE_FILE_INFO;

typedef struct  tagNET_DVR_PLAY_ITEM
{
    DWORD    dwSize;
    BYTE    byItemType;  //²¥·ÅÏîÀàÐÍ£¬1-Í¼Æ¬ 2-ÊÓÆµ 3-²¥·ÅÁÐ±í 
    BYTE    byRes[3];    //±£Áô
    DWORD    dwPlayManageNo;   //²¥·Å¹ÜÀíºÅ
    DWORD    dwPlayPicTime; //²¥·ÅÍ¼Æ¬Ê±¼ä£¬µ¥Î»Ãë, (ÀàÐÍÎªÍ¼Æ¬ÓÐÐ§) 
    BYTE    byRes2[64]; 
} NET_DVR_PLAY_ITEM, *LPNET_DVR_PLAY_ITEM; 

typedef struct tagNET_DVR_DEVICE_PLAYLIST
{
    DWORD    dwSize;
    BYTE    byEnable;  //ÊÇ·ñÓÐÐ§£¬ 0-ÎÞÐ§  !0-ÓÐÐ§
    BYTE    byPlayType;  //²¥·ÅÄ£Ê½£¬1-Ñ­»·²¥·Å
    BYTE    byVaildItemNum;    //ÓÐÐ§²¥·ÅÏîÊýÁ¿
    BYTE    byRes[1]; 
    NET_DVR_PLAY_ITEM struPlayItem[PLAYLIST_ITEM_NUM]; //²¥·ÅÏî£¬Ç°byVaildItemNumÓÐÐ§
    BYTE     byPlaylistName[PLAYLIST_NAME_LEN];  //²¥·ÅÁÐ±íÃû³Æ   
    DWORD   dwPlaylistNo;    //²¥·ÅÁÐ±íºÅ£¨»ñÈ¡ÓÐÐ§£©
    BYTE     byRes2[128];
} NET_DVR_DEVICE_PLAYLIST, *LPNET_DVR_DEVICE_PLAYLIST;
typedef struct tagNET_DVR_PLAYLIST_ITEM_CTRL
{
    DWORD    dwSize;   
    BYTE    byCtrlType;  //²Ù×÷ÀàÐÍ£¬ 1-Ìí¼Ó²¥·ÅÏî  2-É¾³ý²¥·ÅÏî  3-ÒÆ¶¯²¥·ÅÏîÎ»ÖÃ
    BYTE    byPlayIndex;  //²¥·ÅÐòºÅ£¬ ´Ó1¿ªÊ¼
    NET_DVR_PLAY_ITEM struPlayItem;    //²¥·ÅÏî
    BYTE   byNewPlayIndex;   //ÐÂ²¥·ÅÐòºÅ£¬0ÎÞÐ§
    BYTE   byRes[63]; 
}NET_DVR_PLAYLIST_ITEM_CTRL, *LPNET_DVR_PLAYLIST_ITEM_CTRL; 
typedef struct tagNET_DVR_PLAN_ITEM
{
    NET_DVR_PLAY_ITEM struPlanPlayItem;       //²¥·ÅÏî    
    NET_DVR_TIME_SEGMENT struTimeSegment;     //Ê±¼ä¶Î²ÎÊý
    BYTE  byRes[16]; 
} NET_DVR_PLAN_ITEM, *LPNET_DVR_PLAN_ITEM;

typedef struct tagNET_DVR_PLAYPLAN_CFG
{
    DWORD    dwSize;   
    BYTE    byEnable;  //ÊÇ·ñÊ¹ÄÜ,  0-²»Ê¹ÄÜ !0-Ê¹ÄÜ
    BYTE    byPlanMode;   //¼Æ»®Ä£Ê½£¬1-ÖÜ¼Æ»®  2-ÈÕ¼Æ»®
    BYTE    byRes[2];
    NET_DVR_PLAN_ITEM struPlanItem[MAX_DAYS][MAX_TIMESEGMENT_V30];
    DWORD    dwPlayPlanNo;   //²¥·Å¼Æ»®ºÅ£¨»ñÈ¡Ê±ÓÐÐ§£©
    BYTE    byPlayPlanName[NAME_LEN]; //²¥·Å¼Æ»®Ãû³Æ
    BYTE    byRes2[32];
} NET_DVR_PLAYPLAN_CFG, *LPNET_DVR_PLAYPLAN_CFG;
typedef struct tagNET_DVR_WINDOW_PLAYPLAN_CFG
{
    DWORD dwSize;
    BYTE byEnable;    //ÊÇ·ñÆôÓÃ²¥·Å¼Æ»®£¬ 0-²»ÆôÓÃ !0-ÆôÓÃ
    BYTE byRes[3];
    DWORD dwPlayPlanNo;   //²¥·Å¼Æ»®ºÅ
    BYTE byRes2[32]; 
} NET_DVR_WINDOW_PLAYPLAN_CFG, *LPNET_DVR_WINDOW_PLAYPLAN_CFG; 
typedef struct tagNET_DVR_DEV_PLAYCTRL
{
    DWORD   dwSize;
    BYTE    byControlType;  //¿ØÖÆÀàÐÍ£¬1-ÒôÆµ¿ª£¬2-ÒôÆµ¹Ø£¬3-Í£Ö¹²¥·Å£¬4-ÔÝÍ£²¥·Å£¬»Ö¸´²¥·Å 
    BYTE    byRes[131];
} NET_DVR_DEV_PLAYCTRL, *LPNET_DVR_DEV_PLAYCTRL;

typedef union tagNET_DVR_PLAYITEM_INFO
{
    struct   //µ¥¶À²¥·Å
    {
        DWORD  dwPlayItem;   //²¥·ÅÏî
        BYTE    byPlayItemName[NAME_LEN]; //²¥·ÅÏîÃû³Æ
        BYTE    byRes2[8]; 
    } struPlayItem;    
    struct  //²¥·ÅÁÐ±í
    {
        DWORD  dwPlaylistNo;  //²¥·ÅÁÐ±íºÅ
        BYTE    byPlaylistName[NAME_LEN]; //²¥·ÅÁÐ±íÃû³Æ
        WORD   wPlayIndex;    //²¥·ÅÎ»ÖÃ
        BYTE    byPlayType;    //²¥·ÅÁÐ±íÖÐÕýÔÚ²¥·ÅÀàÐÍ 1-Í¼Æ¬ 2-ÊÓÆµ  
        BYTE    byRes[3];      
        DWORD  dwPlayItem;   //²¥·ÅÏî    
        BYTE    byPlayItemName[NAME_LEN]; //²¥·ÅÏîÃû³Æ
        BYTE    byRes2[16];
    } struPlaylistItem;
    struct  //²¥·Å¼Æ»®Ïî
    {
        DWORD  dwPlayPlanNo;  //²¥·Å¼Æ»®ºÅ 
        NET_DVR_TIME_SEGMENT struTime;      //ÕýÔÚ²¥·ÅÊ±¼ä¶Î
        BYTE    byPlayType;  //²¥·Å¼Æ»®ÕýÔÚ²¥·ÅÀàÐÍ  1-Í¼Æ¬ 2-ÊÓÆµ 3-²¥·ÅÁÐ±í
        BYTE    byRes[3]; 
        DWORD  dwPlaylistNo;  //²¥·ÅÁÐ±íºÅ
        BYTE    byPlaylistName[NAME_LEN]; //²¥·ÅÁÐ±íÃû³Æ
        DWORD  dwPlayItem;   //²¥·ÅÏî
        BYTE    byPlayItemName[NAME_LEN]; //²¥·ÅÏîÃû³Æ
        WORD   wPlayIndex;    //²¥·ÅÎ»ÖÃ
        BYTE    byRes2[18];       
    } struPlayPlanItem;
}NET_DVR_PLAYITEM_INFO, *LPNET_DVR_PLAYITEM_INFO; 
typedef struct tagNET_DVR_PLAYING_INFO
{
    DWORD    dwSize;
    BYTE    byPlayWay;   //²¥·Å·½Ê½£¬ 1-µ¥Ïî²¥·Å  2-²¥·ÅÁÐ±í  3-²¥·Å¼Æ»® 4-¶¯Ì¬½âÂë 5-½ô¼±²å²¥
    BYTE    byCurPlayType; //ÕýÔÚ²¥·ÅËØ²ÄÀàÐÍ£¬ 1-Í¼Æ¬ 2-ÊÓÆµ£¬¶¯Ì¬½âÂëºÍ½ô¼±²å²¥Ê±ÎÞÐ§
    BYTE    byPlayState;    //²¥·Å×´Ì¬£¬1-ÕýÔÚ²¥·Å£¬2-²¥·ÅÍ£Ö¹£¬3-²¥·ÅÔÝÍ£
    BYTE    byAudioState;    //ÒôÆµ¿ª¹Ø×´Ì¬£¬0-¹Ø£¬1-¿ª
    NET_DVR_PLAYITEM_INFO  struPlayItemInfo;  //²¥·ÅÏîÐÅÏ¢
    BYTE    byRes2[16];
} NET_DVR_PLAYING_INFO, *LPNET_DVR_PLAYING_INFO;

typedef struct tagNET_DVR_ONLINEUSER_COND //Ìõ¼þ½á¹¹
{
    DWORD   dwSize; 
    DWORD  dwChannel;//Í¨µÀºÅ£¨Ç°¶ËÄ¬ÈÏÊÇ1£©
    BYTE   byRes [128];
}NET_DVR_ONLINEUSER_COND,*LPNET_DVR_ONLINEUSER_COND;

typedef struct tagNET_DVR_ONLINEUSER_CFG //ÅäÖÃ½á¹¹
{
    DWORD   dwSize; 
    BYTE   byID;//ÓÃ»§ÐòÁÐºÅ
    BYTE   byUserType;//ÓÃ»§ÀàÐÍ 0-ÆÕÍ¨ÓÃ»§£¬1-²Ù×÷Ô±£¬2-³¬¼¶ÓÃ»§
    BYTE   byDataType;//Êý¾Ý×´Ì¬ÀàÐÍ:0-¼ì²âÖÐ£¬1-¿ªÊ¼£¬2-½áÊø
    BYTE   byRes;
    NET_DVR_IPADDR  struIpAddr;//IPµØÖ·    
    NET_DVR_TIME_V30  struLoginTime;//µÇÂ½Ê±¼ä
    char   szUserName[NAME_LEN/*32*/];//ÓÃ»§Ãû
    BYTE   byRes1[128];
}NET_DVR_ONLINEUSER_CFG,*LPNET_DVR_ONLINEUSER_CFG;

//´æ´¢½¡¿µ×´Ì¬
typedef    struct tagNET_DVR_STORAGE_DETECTION
{
    DWORD    dwSize;//½á¹¹Ìå´óÐ¡
    BYTE    byHealthState;//½¡¿µ×´Ì¬0-Á¼ºÃ£¬1-²î£¬2-Ëð»µ£¬3-Î´Öª
    BYTE    bySDCardState;//SDcard×´Ì¬ 0-µôÏß£¬1-ÉÏÏß,2-Î´Öª,3-ÒÑËø¶¨
    WORD    wAbnormalPowerLoss;//Òì³£µôµçÊý
    WORD    wBadBlocks;//»µ¿éÊý
    BYTE    byRemainingLife; //SD¿¨Ê£ÓàÊÙÃü; 0~100%
    BYTE    byRes[125];
}NET_DVR_STORAGE_DETECTION,*LPNET_DVR_STORAGE_DETECTION;

//´æ´¢ÖÇÄÜ¼ì²â±¨¾¯ÉÏ´«
typedef struct tagNET_DVR_STORAGE_DETECTION_ALARM
{
    DWORD   dwSize;
    DWORD     dwRelativeTime; //Ïà¶ÔÊ±±ê
    DWORD    dwAbsTime; //¾ø¶ÔÊ±±ê
    NET_VCA_DEV_INFO  struDevInfo;   //Ç°¶ËÉè±¸ÐÅÏ¢
    DWORD   dwCardID;   //¿¨ID
    WORD    wAbnormalPowerLoss;//Òì³£µôµçÊý
    WORD    wBadBlocks;//»µ¿éÊý
    BYTE    byHealthState;//½¡¿µ×´Ì¬0-Á¼ºÃ£¬1-²î£¬2-Ëð»µ£¬3-Î´Öª
    BYTE    byRes1[3];
    float   fResidualLife; //SD¿¨ Ô¤¼ÆÊ£ÓàÊÙÃü
    BYTE    byRes[118];
}NET_DVR_STORAGE_DETECTION_ALARM,*LPNET_DVR_STORAGE_DETECTION_ALARM;


//´æ´¢Õì²âµÄ¶ÁÐ´ËøÅäÖÃ
typedef    struct tagNET_DVR_STORAGE_RWLOCK
{
    DWORD   dwSize;//½á¹¹Ìå´óÐ¡
    BYTE    byEnabled;//Ê¹ÄÜ 0-¹Ø±Õ£¬1-¿ªÆô
    BYTE    byRes[3];
    char    szPassWD[PASSWD_LEN/*16*/]; //¶ÁÐ´ËøÐÂÃÜÂë
    char    szOriginalPassWD[PASSWD_LEN/*16*/]; //Ô­Ê¼ÃÜÂë
    BYTE    byRes1[128];
}NET_DVR_STORAGE_RWLOCK,*LPNET_DVR_STORAGE_RWLOCK;

//´æ´¢Õì²âµÄ½âËøÅäÖÃ
typedef    struct tagNET_DVR_STORAGE_UNLOCK
{
    DWORD   dwSize;//½á¹¹Ìå´óÐ¡
    char    szPassWD[PASSWD_LEN/*16*/]; //ÃÜÂë
    BYTE    byRes1[128];
}NET_DVR_STORAGE_UNLOCK,*LPNET_DVR_STORAGE_UNLOCK;


typedef    struct tagNET_DVR_PTZTRACKSTATUS
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE          byID;//Áª¶¯Éè±¸µÄID (×Ö¶ÎbyLinkageType·Ç0µÄÊ±ºòÉúÐ§)
    BYTE      byLinkageType;//Áª¶¯¶¯×÷0-²»Áª¶¯£¬1-Áª¶¯Çò»úÉè±¸¸ú×Ù
    BYTE      byRes[254];
}NET_DVR_PTZTRACKSTATUS,*LPNET_DVR_PTZTRACKSTATUS;

#define MAX_PROXY_COUNT 32

typedef struct tagNET_DVR_SOCKS_PROXY_PARA
{
    BYTE  byIP[129];  //´úÀí·þÎñÆ÷µØÖ·
    BYTE  byAuthType; //ÈÏÖ¤·½Ê½£¬ÔÝÊ±ÏÈ²»Ê¹ÓÃ¸Ã×Ö¶Î 
    WORD  wPort;      //´úÀí·þÎñÆ÷¶Ë¿Ú
    BYTE  byRes2[64]; //Èç¹ûÒªÊ¹ÓÃÈÏÖ¤·½Ê½£¬±ØÈ»ÐèÒªÒ»Ð©±£Áô×Ö½Ú£¬ÏÈÁôÒ»Ð©
}NET_DVR_SOCKS_PROXY_PARA, *LPNET_DVR_SOCKS_PROXY_PARA;

typedef struct tagNET_DVR_SOCKS_PROXYS
{
    NET_DVR_SOCKS_PROXY_PARA struProxy[MAX_PROXY_COUNT];
}NET_DVR_SOCKS_PROXYS, *LPNET_DVR_SOCKS_PROXYS;

typedef struct tagNET_DVR_GET_FIGURE_COND
{
    DWORD                     dwLength;         //½á¹¹³¤¶È
    DWORD                    dwChannel;         //Í¨µÀ
    NET_DVR_TIME_V30        struTimePoint;    //Ê±¼äµã
    BYTE                      byRes[64];
}NET_DVR_GET_FIGURE_COND, *LPNET_DVR_GET_FIGURE_COND;

typedef struct tagNET_DVR_FIGURE_INFO
{
    DWORD   dwPicLen;     //Í¼Æ¬³¤¶È
    char     *pPicBuf;     //Í¼Æ¬Êý¾Ý
}NET_DVR_FIGURE_INFO, *LPNET_DVR_FIGURE_INFO;

//ÊÖ¶¯²â¾à²ÎÊý
typedef    struct tagNET_DVR_MANUALRANGING_CFG
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñ¿ªÆôÊÖ¶¯²â¾à£º0- ·ñ£¬1- ÊÇ
    BYTE        byRes[127];
}NET_DVR_MANUALRANGING_CFG,*LPNET_DVR_MANUALRANGING_CFG;

typedef struct tagNET_DVR_VIDEO_INTERCOM_ALARM_CFG
{
    DWORD           dwSize;            //½á¹¹Ìå´óÐ¡
    BYTE           byDoorNotCloseAlarm;   //ÊÇ·ñÉÏ´«ÃÅÎ´¹Ø±¨¾¯£¬0-²»ÉÏ´«£¬1-ÉÏ´«
    BYTE            byRes[603];         //±£Áô
}NET_DVR_VIDEO_INTERCOM_ALARM_CFG, *LPNET_DVR_VIDEO_INTERCOM_ALARM_CFG;

typedef struct tagNET_DVR_PACKET_INFO_EX
{
    WORD     wWidth;         //width
    WORD     wHeight;        //height
    DWORD    dwTimeStamp;    //lower time stamp
    DWORD    dwTimeStampHigh;//higher time stamp 
    DWORD    dwYear;            //year
    DWORD    dwMonth;         //month
    DWORD    dwDay;           //day
    DWORD    dwHour;          //hour
    DWORD    dwMinute;        //minute
    DWORD    dwSecond;        //second
    DWORD    dwMillisecond;   //millisecond
    DWORD    dwFrameNum;     //frame num
    DWORD    dwFrameRate;    //frame rate,µ±Ö¡ÂÊÐ¡ÓÚ0Ê±£¬0x80000002:±íÊ¾1/2Ö¡ÂÊ£¬Í¬Àí¿ÉÍÆ0x80000010Îª1/16Ö¡ÂÊ
    DWORD    dwFlag;         //flag EÖ¡±ê¼Ç
    DWORD    dwFilePos;      //file pos
    DWORD     dwPacketType;    //Packet type:0 -file head£¬1 -video I frame£¬2- video B frame£¬ 3- video P frame£¬ 10- audio packet£¬ 11- private packet
    DWORD     dwPacketSize;   //packet size
    unsigned char*    pPacketBuffer;  //packet buffer
    BYTE     byRes1[4];
    DWORD    dwPacketMode;   //´ò°ü·½Ê½:0-±£Áô£¬1-FU_A´ò°ü·½Ê½
    BYTE     byRes2[16];
    DWORD    dwReserved[6];    //reserved[0] ±íÊ¾Ë½ÓÐÊý¾ÝÀàÐÍ 
    //reserved[1] ±íÊ¾Ë½ÓÐÂãÊý¾ÝµØÖ·¸ßÎ»
    //reserved[2] ±íÊ¾Ë½ÓÐÂãÊý¾ÝµØÖ·µÍÎ»
    //reserved[3] ±íÊ¾Ë½ÓÐÂãÊý¾Ý³¤¶È
    //reserved[4] Ë½ÓÐÖ¡/°üµÄÊ±¼ä¼ä¸ô\Ê±¼ä´Á
    //reserved[5].Ò»bitÎ»±ê¼ÇÊÇ·ñÎªÉîPÖ¡£¬ÉîP£º1£¬²»ÎªÉîP£º0;     lizhonghu 20150203
}NET_DVR_PACKET_INFO_EX, *LPNET_DVR_PACKET_INFO_EX;

typedef BOOL (* DEV_WORK_STATE_CB)(void* pUserdata, int iUserID, LPNET_DVR_WORKSTATE_V40 lpWorkState);

typedef struct tagNetDVRCheckDevState
{
    DWORD                dwTimeout;      //¶¨Ê±¼ì²âÉè±¸¹¤×÷×´Ì¬£¬µ¥Î»ms£¬Îª0Ê±£¬±íÊ¾Ê¹ÓÃÄ¬ÈÏÖµ(30000)¡£×îÐ¡ÖµÎª1000
    DEV_WORK_STATE_CB    fnStateCB;
    void*                pUserData;
    BYTE                byRes[60];
}NET_DVR_CHECK_DEV_STATE,*LPNET_DVR_CHECK_DEV_STATE;

#define COURSE_NAME_LEN_128                128    //¿Î³ÌÃû³Æ
#define INSTRUCTOR_NAME_LEN_64            64    //ÊÚ¿Î½ÌÊ¦
#define MAX_UUID_LEN            64    //ÊÖ¶¯¿Î³ÌUUID

//»ñÈ¡Ìõ¼þ½á¹¹Ìå
typedef    struct tagNET_DVR_COURSE_LIST_COND
{
    DWORD                    dwSize;
    NET_DVR_TIME_V30        struStartTime;   //¿Î³Ì¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30        struEndTime;   //¿Î³Ì½áÊøÊ±¼ä
    BYTE                       byCourseName[COURSE_NAME_LEN_128];  //¿Î³ÌÃû³Æ
    BYTE                       byInstructorName[INSTRUCTOR_NAME_LEN_64]; //ÊÚ¿ÎÀÏÊ¦
    BYTE                   byCourseType; //¿Î±íÀàÐÍ£¬0-È«²¿£¬1-ÊÖ¶¯
    BYTE                    byRes[603];
}NET_DVR_COURSE_LIST_COND,*LPNET_DVR_COURSE_LIST_COND;

typedef struct  tagNET_DVR_COURSE_CFG
{
    DWORD            dwSize;
    NET_DVR_TIME_V30        struStartTime;   //¿Î³Ì¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30        struEndTime;   //¿Î³Ì¿ªÊ¼Ê±¼ä
    BYTE            byCourseName[COURSE_NAME_LEN_128];
    BYTE            byInstructorName[INSTRUCTOR_NAME_LEN_64];
    BYTE            byCourseDescription[COURSE_DESCRIPTION_LEN /*256*/];
    BYTE            byRecUUID[MAX_UUID_LEN/*64*/];  //ÊÖ¶¯¿Î±íUUID
    BYTE           byCourseType;//¿Î±íÀàÐÍ£¬0-È«²¿£¬1-ÊÖ¶¯¿Î±í
    BYTE            byRes[303];
}NET_DVR_COURSE_CFG, *LPNET_DVR_COURSE_CFG;

typedef struct tagNET_DVR_RECORD_STATUS
{
    DWORD       dwSize;              //½á¹¹Ìå´óÐ¡
    BYTE        byRecUUID[MAX_UUID_LEN/*64*/];  //ÊÖ¶¯¿Î±íUUID
    BYTE        byRecordStatus;         //Â¼²¥×´Ì¬£¬0-ÔÝÍ££¬1-ÆÁ±Î,2-ÕýÔÚÂ¼Ïñ£¬3-¿ÕÏÐ
    BYTE     byRes[603];              //±£Áô×Ö½Ú 
}NET_DVR_RECORD_STATUS, *LPNET_DVR_RECORD_STATUS;

typedef struct tagNET_DVR_MANUAL_CURRICULUM_CFG
{
    DWORD       dwSize;              //½á¹¹Ìå´óÐ¡
    BYTE        byRecUUID[MAX_UUID_LEN/*64*/];  //ÊÖ¶¯¿Î±íUUID
    BYTE           byCourseName[COURSE_NAME_LEN_128];  //¿Î³ÌÃû³Æ
    BYTE           byInstructorName[INSTRUCTOR_NAME_LEN_64]; //ÊÚ¿ÎÀÏÊ¦
    BYTE        byCourseDescription[COURSE_DESCRIPTION_LEN /*256*/];
    BYTE        byCmdType;            //ÃüÁî£¬0-¿ªÊ¼Â¼Ïñ 1-½áÊø 2-ÔÝÍ£ 3-¼ÌÐø,4-¿ªÊ¼ÆÁ±Î£¬5-½áÊøÆÁ±Î
    BYTE         byRes[303];              //±£Áô×Ö½Ú
}NET_DVR_MANUAL_CURRICULUM_CFG, *LPNET_DVR_MANUAL_CURRICULUM_CFG;

typedef struct tagNET_DVR_IMAGE_DIFF_DETECTION_CFG
{
    DWORD       dwSize;              //½á¹¹Ìå´óÐ¡
    NET_VCA_POLYGON struRegion;    //ÇøÓò·¶Î§
    BYTE       byEnabled;    //ÊÇ·ñÆôÓÃ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE        byThreshold;             //ãÐÖµ[0,100]
    BYTE         bySensitivity;        //ÁéÃô¶È [0,100]
    BYTE     byRes[301];              //±£Áô×Ö½Ú 
}NET_DVR_IMAGE_DIFF_DETECTION_CFG, *LPNET_DVR_IMAGE_DIFF_DETECTION_CFG;

typedef struct tagNET_DVR_RECORDING_PUBLISH_FILE_COND
{
    DWORD            dwSize;
    DWORD            dwChannel;
    BYTE             byFileID[MAX_ID_LEN_128/*128*/];  //·¢²¼ÎÄ¼þID
    BYTE             byRes[300];
}NET_DVR_RECORDING_PUBLISH_FILE_COND, *LPNET_DVR_RECORDING_PUBLISH_FILE_COND;

typedef struct tagNET_DVR_RECORDING_PUBLISH_FILE_INFO
{
    DWORD            dwSize;
    NET_DVR_TIME_V30        struStartTime;   //¿Î³Ì¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30        struEndTime;   //¿Î³Ì¿ªÊ¼Ê±¼ä
    BYTE            byCourseName[COURSE_NAME_LEN_128];
    BYTE            byInstructorName[INSTRUCTOR_NAME_LEN_64];
    BYTE            byCourseDescription[COURSE_DESCRIPTION_LEN /*256*/];
    BYTE     byRes[300];              //±£Áô×Ö½Ú 
}NET_DVR_RECORDING_PUBLISH_FILE_INFO, *LPNET_DVR_RECORDING_PUBLISH_FILE_INFO;

//ÆÁÄ»¿ØÖÆ
typedef struct tagNET_DVR_SCREEN_POINT
{
    WORD wX; //X×ø±ê
    WORD wY; //Y×ø±ê
}NET_DVR_SCREEN_POINT,*LPNET_DVR_SCREEN_POINT;

typedef struct tagNET_DVR_MOUSE_PARAM
{
    BYTE byMouseEvent;                   //Êó±êÊÂ¼þ£¬1-Êó±ê×ó¼ü°´ÏÂ£¬2-Êó±ê×ó¼üËÉ¿ª£¬3-Êó±êÓÒ¼ü°´ÏÂ£¬4-Êó±êÓÒ¼üËÉ¿ª£¬
                                         //5-Êó±êÒÆ¶¯£¬6-Êó±ê×ó¼üµ¥»÷£¬7-Êó±ê×ó¼üË«»÷£¬8-Êó±êÓÒ¼üµ¥»÷£¬9-¹öÂÖ°´ÏÂ£¬
                                         //10-¹öÂÖËÉ¿ª£¬11-¹öÂÖÏòÏÂ£¬12-¹öÂÖÏòÉÏ
    BYTE byRes1[3];
    NET_DVR_SCREEN_POINT struMousePoint; //Êó±ê×ø±êÐÅÏ¢
    BYTE byRes2[8];
}NET_DVR_MOUSE_PARAM, *LPNET_DVR_MOUSE_PARAM;

typedef struct tagNET_DVR_MARK_PARAM
{
       BYTE byMarkEvent;           //±ê×¢ÊÂ¼þ£¬1-Õý³£±ê×¢£¬2-±ê×¢½áÊø
    BYTE byMarkTool;           //±ê×¢¹¤¾ß£¬0-ÎÞÐ§£¬1-»­±Ê£¬2-ÏðÆ¤²Á£¬±ê×¢ÊÂ¼þÎª1Ê±ÓÐÐ§
    BYTE byLineWidth;          //ÏßÌõ´ÖÏ¸£¬0-ÎÞÐ§£¬1-Ï¸£¬2-ÖÐ£¬3-´Ö£¬±ê×¢ÊÂ¼þÎª1Ê±ÓÐÐ§
    BYTE byMouseEvent;         //Êó±êÊÂ¼þ£¬±ê×¢ÊÂ¼þÎª1Ê±ÓÐÐ§£¬0-ÎÞÐ§£¬1-Êó±ê×ó¼ü°´ÏÂ£¬2-Êó±ê×ó¼üËÉ¿ª£¬3-Êó±êÒÆ¶¯
    NET_DVR_RGB_COLOR struColor;    //±ê×¢ÑÕÉ«£¬±ê×¢¹¤¾ßÎª»­±ÊÊ±ÓÐÐ§
    NET_DVR_SCREEN_POINT struPoint; //±ê×¢×ø±êÐÅÏ¢
    BYTE byRes[4];
}NET_DVR_MARK_PARAM, *LPNET_DVR_MARK_PARAM;

typedef struct tagNET_DVR_KEYBOARD_PARM
{
    DWORD dwKeyValue; //·ûºÅÊ¹ÓÃASCII±íÖÐµÄÖµ£¬ÌØÊâ°´¼ü´ýÈ·¶¨
    BYTE  byRes[12];
}NET_DVR_KEYBOARD_PARAM, *LPNET_DVR_KEYBOARD_PARAM;

typedef struct tagNET_DVR_PPT_PARAM
{
    BYTE  byPPTAction;              //PPT¶¯×÷£¬1-´ò¿ª·ÅÓ³£¬2-Í£Ö¹·ÅÓ³£¬3-ÉÏÒ»¸ö¶¯»­£¬4-ÏÂÒ»¸ö¶¯»­£¬
                                    //5-ÉÏÒ»Ò³£¬6-ÏÂÒ»Ò³£¬7-Ìøµ½XÒ³£¬8-¼¤¹â±Ê¿ª£¬9-¼¤¹â±Ê¹Ø£¬10-¼¤¹â±ÊÒÆ¶¯
    BYTE  byRes1[3];
    NET_DVR_SCREEN_POINT struPoint; //¼¤¹â±Ê×ø±êÐÅÏ¢£¬PPT¶¯×÷Îª10Ê±ÓÐÐ§
    DWORD dwPPTNo;                  //PPTÒ³ÂëÊý£¬PPT¶¯×÷Îª7Ê±ÓÐÐ§
    BYTE  byRes2[4];
}NET_DVR_PPT_PARAM, *LPNET_DVR_PPT_PARAM;

typedef struct tagNET_DVR_REMOTE_CTRL_PARAM
{
    BYTE byRemoteCtrlCmd;   //Ô¶³Ì¿ØÖÆÃüÁî£¬1-ÇÐ»»ÖÃ¶¥´°¿Ú£¬2-¹Ø±ÕÆÁÄ»µ±Ç°´°¿Ú£¬3-´ò¿ªÎÄ¼þ£¬4-¹Ø±ÕÎÄ¼þ£¬5-É¾³ýÎÄ¼þ£¬6-¹Ø»ú
    BYTE byRes1[3];
    DWORD dwCtrlParam;    //²Ù×÷²ÎÊý£¬´ò¿ª¹Ø±ÕÎÄ¼þÊ±ÎªÎÄ¼þË÷ÒýºÅ
    BYTE byRes2[8];
}NET_DVR_REMOTE_CTRL_PARAM, *LPNET_DVR_REMOTE_CTRL_PARAM;

typedef struct tagNET_DVR_SPOTLIGHT_PARAM
{
    BYTE  byCmd;                    //¾Û¹âµÆÃüÁî£¬0-¹Ø±Õ¾Û¹âµÆ£¬1-¿ªÆô¾Û¹âµÆ£¬2-¾Û¹âµÆÎ»ÖÃÒÆ¶¯
    BYTE  byRes1[3];
    NET_DVR_SCREEN_POINT struPoint; //¾Û¹âµÆÖÐÐÄµã×ø±ê£¬¾Û¹âµÆÎ»ÖÃÒÆ¶¯Ê±ÓÐÐ§
    DWORD dwRadius;                 //¾Û¹âµÆ°ë¾¶
    BYTE  byRes2[4];
} NET_DVR_SPOTLIGHT_PARAM, *LPNET_DVR_SPOTLIGHT_PARAM;

typedef struct tagNET_DVR_TOUCHPAD_PARAM
{
    BYTE byMouseEvent;  //Êó±êÊÂ¼þ£¬1-Êó±ê×ó¼ü°´ÏÂ£¬2-Êó±ê×ó¼üËÉ¿ª£¬3-Êó±êÓÒ¼ü°´ÏÂ£¬4-Êó±êÓÒ¼üËÉ¿ª£¬
                        //5-Êó±êÒÆ¶¯£¬6-Êó±ê×ó¼üµ¥»÷£¬7-Êó±ê×ó¼üË«»÷£¬8-Êó±êÓÒ¼üµ¥»÷£¬9-¹öÂÖ°´ÏÂ£¬
                        //10-¹öÂÖËÉ¿ª£¬11-¹öÂÖÏòÏÂ£¬12-¹öÂÖÏòÉÏ
    BYTE byRes1[3];
    int iXDisplacement; //XÖáÎ»ÒÆ£¬ÕýÊý±íÊ¾ÏòÓÒÒÆ¶¯£¬¸ºÊý±íÊ¾Ïò×óÒÆ¶¯£¬Êó±êÒÆ¶¯Ê±ÓÐÐ§
    int iYDisplacement; //YÖáÎ»ÒÆ£¬ÕýÊý±íÊ¾ÏòÉÏÒÆ¶¯£¬¸ºÊý±íÊ¾ÏòÏÂÒÆ¶¯£¬Êó±êÒÆ¶¯Ê±ÓÐÐ§
    BYTE byRes2[4];
}NET_DVR_TOUCHPAD_PARAM, *LPNET_DVR_TOUCHPAD_PARAM;

typedef struct tagNET_DVR_MEDIA_LIST_PARAM
{
    BYTE byOperateCmd;     //²Ù×÷ÃüÁî£¬1-ÏÔÊ¾Í¼Æ¬ËØ²Ä£¬2-ÏÔÊ¾ÊÓÆµËØ²Ä£¬3-ÏÔÊ¾pptËØ²Ä£¬4-¹Ø±Õ¶àÃ½ÌåÎÄ¼þ¼Ð
    BYTE byRes[15];
}NET_DVR_MEDIA_LIST_PARAM, *LPNET_DVR_MEDIA_LIST_PARAM;

typedef union tagNET_DVR_SCREEN_CTRL_PARAM
{
    NET_DVR_MOUSE_PARAM struMouseParam;             //Êó±ê²ÎÊý£¬ÃüÁîÀàÐÍÎª1Ê±ÓÐÐ§
    NET_DVR_MARK_PARAM struMarkParam;               //±ê×¢²ÎÊý£¬ÃüÁîÀàÐÍÎª2Ê±ÓÐÐ§
    NET_DVR_KEYBOARD_PARAM struKeyboardInfo;        //¼üÅÌ²ÎÊý£¬ÃüÁîÀàÐÍÎª3Ê±ÓÐÐ§
    NET_DVR_PPT_PARAM struPPTParam;                 //PPT²ÎÊý£¬ÃüÁîÀàÐÍÎª4Ê±ÓÐÐ§
    NET_DVR_REMOTE_CTRL_PARAM struRemoteCtrlParam;  //Ô¶³Ì²Ù×÷²ÎÊý£¬ÃüÁîÀàÐÍÎª5Ê±ÓÐÐ§
    NET_DVR_SPOTLIGHT_PARAM struSpotLight;          //¾Û¹âµÆ²ÎÊý£¬ÃüÁîÀàÐÍÎª6Ê±ÓÐÐ§
    NET_DVR_TOUCHPAD_PARAM struTouchPadParam;        //´¥Ãþ°å²ÎÊý£¬ÃüÁî²ÎÊýÎª7Ê±ÓÐÐ§
    NET_DVR_MEDIA_LIST_PARAM struMediaListParam;    //¶àÃ½Ìå²ÎÊý£¬ÃüÁîÀàÐÍÎª8Ê±ÓÐÐ§
    BYTE byRes[16];
}NET_DVR_SCREEN_CTRL_PARAM, *LPNET_DVR_SCREEN_CTRL_PARAM;

typedef struct tagNET_DVR_SCREEN_CTRL_CMD
{
    DWORD dwSize;
    BYTE  byCmdType;                               //ÃüÁîÀàÐÍ£¬1-Êó±ê£¬2-±ê×¢£¬3-¼üÅÌ£¬4-PPT£¬5-Ô¶³Ì²Ù×÷£¬6-¾Û¹âµÆ£¬7-´¥¿Ø°å£¬8-ÏÔÊ¾¶àÃ½Ìå²ÄÁÏ
    BYTE  byRes1[3];
    NET_DVR_SCREEN_CTRL_PARAM struScreenCtrlParam; //ÆÁÄ»¿ØÖÆ²ÎÊý
}NET_DVR_SCREEN_CTRL_CMD, *LPNET_DVR_SCREEN_CTRL_CMD;

typedef struct tagNET_DVR_FILE_RESPONSE_PARAM
{
    BYTE byFileState;       //ÎÄ¼þ²Ù×÷×´Ì¬£¬1-ÎÄ¼þË÷Òý²»´æÔÚ
    BYTE byRes1[3];
    DWORD dwErrorFileIndex; //ÎÄ¼þ²Ù×÷µÄÎÄ¼þË÷ÒýÖµ
    BYTE byRes2[24];
} NET_DVR_FILE_RESPONSE_PARAM, *LPNET_DVR_FILE_RESPONSE_PARAM;

typedef struct tagNET_DVR_PPT_RESPONSE_PARAM
{
    BYTE  byCurrentState;   //µ±Ç°PPT×´Ì¬£¬1-ÕýÔÚ·ÅÓ³£¬2-·ÅÓ³Í£Ö¹£¬3-PPTÒÑ¹Ø±Õ£¬4-pptÊÜ±£»¤»òÉú²úÔ¤ÀÀÍ¼Ê§°Ü£¬5-»ñÈ¡Ò³ÂëÊ§°Ü£¬6-pptÄÚÈÝÎª¿Õ£¬7-ËõÂÔÍ¼Éú³ÉÊ§°Ü£¬8-ËõÂÔÍ¼Éú³É³É¹¦
    BYTE  byRes1[3];
    DWORD dwCurrentPage;    //PPTµÄÒ³Êý£¬PPT×´Ì¬Îª1,7,8Ê±ÓÐÐ§
    DWORD dwFileIndex;        //PPTÎÄ¼þË÷ÒýÖµ
    DWORD dwTotalPageNum;    //PPT×ÜÒ³Êý£¬PPT×´Ì¬Îª5Ê±ÓÐÐ§
    BYTE  byRes2[16];
}NET_DVR_PPT_RESPONSE_PARAM, *LPNET_DVR_PPT_RESPONSE_PARAM;

typedef union tagNET_DVR_SCREEN_RESPONSE_PARAM
{
    BYTE byRes[32];
    NET_DVR_PPT_RESPONSE_PARAM  struPPTParam;  //PPT²ÎÊý
    NET_DVR_FILE_RESPONSE_PARAM    struFileParam; //ÎÄ¼þ²Ù×÷ÏìÓ¦²ÎÊý
}NET_DVR_SCREEN_RESPONSE_PARAM,*LPNET_DVR_SCREEN_RESPONSE_PARAM;

typedef struct tagNET_DVR_SCREEN_RESPONSE_CMD
{
    DWORD dwSize;
    BYTE  byResponseCmd; //ÆÁÄ»ÏìÓ¦ÃüÁîÀàÐÍ£¬1-PPT£¬2-ÎÄ¼þ²Ù×÷
    BYTE  byRes1[3];
    NET_DVR_SCREEN_RESPONSE_PARAM struResonseParam; //ÆÁÄ»ÏìÓ¦²ÎÊý
    BYTE  byRes2[16];
}NET_DVR_SCREEN_RESPONSE_CMD, *LPNET_DVR_SCREEN_RESPONSE_CMD;

typedef struct tagNET_DVR_SCREEN_FILE_COND
{
    DWORD dwSize;
    BYTE  byFileType; //ÎÄ¼þÀàÐÍ£¬1-Í¼Æ¬£¬2-ÊÓÆµ£¬3-ppt£¬0xff-ËùÓÐÎÄ¼þÀàÐÍ
    BYTE  byRes[127];
}NET_DVR_SCREEN_FILE_COND, *LPNET_DVR_SCREEN_FILE_COND;

typedef struct tagNET_DVR_SCREEN_FILE_INFO
{
    DWORD dwSize;
    DWORD dwFileIndex;     //ÎÄ¼þË÷Òý£¬È«¾ÖÎ¨Ò»
    BYTE  byFileType;      //ÎÄ¼þÀàÐÍ£¬1-Í¼Æ¬£¬2-ÊÓÆµ£¬3-ppt
    BYTE  byPictureFormat; //Í¼Æ¬¸ñÊ½£¬ÎÄ¼þÀàÐÍÎªÍ¼Æ¬Ê±ÓÐÐ§£¬1-bmp,2-jpeg,3-png,4-swf,5-gif 
    BYTE  byVideoFormat;   //ÊÓÆµ¸ñÊ½£¬ÎÄ¼þÀàÐÍÎªÊÓÆµÊ±ÓÐÐ§£¬1-avi,2-wmv,3-mp4,4-flv,5-vod,6-mkv,7-rmvb
    BYTE  byRes1;
    BYTE  byFileName[MAX_FILE_PATH_LEN]; //ÆÁÄ»ÎÄ¼þÃû
    DWORD dwFileSize;     //ÎÄ¼þ´óÐ¡£¬µ¥Î»£º×Ö½Ú
    DWORD dwPPTPage;      //pptÒ³ÂëÖµ£¬½öµ±»ñÈ¡ÒÑ´ò¿ªµÄPPTÎÄ¼þÐÅÏ¢Ê±ÓÐÐ§
    BYTE  byRes2[64];
}NET_DVR_SCREEN_FILE_INFO, *LPNET_DVR_SCREEN_FILE_INFO;

typedef struct tagNET_DVR_SCREEN_CONFIG
{
    DWORD dwSize;
    BYTE  byVolume;             //ÒôÁ¿£¬0-100
    BYTE  byContrast;           //¶Ô±È¶È£¬0-100
    BYTE  byBrightness;         //ÁÁ¶È£¬0-100
    BYTE  byScreenShowEnabled;  //¿ªÆôÆÁÄ»ÏÔÊ¾£¬0-¹Ø£¬·Ç0-¿ª
    BYTE  byScreenLocked;       //Ëø¶¨ÆÁÄ»£¬0-½âËø£¬·Ç0-Ëø¶¨
    BYTE  byBlackScreenEnabled; //ÆÁÄ»ºÚÆÁ£¬0-È¡ÏûºÚÆÁ£¬·Ç0-ºÚÆÁ
    BYTE  byRes[30];
}NET_DVR_SCREEN_CONFIG, *LPNET_DVR_SCREEN_CONFIG;

typedef struct tagNET_DVR_SCREEM_FILE_UPLOAD_PARAM
{
    DWORD dwSize;
    BYTE  byFileType;      //ÎÄ¼þÀàÐÍ£¬1-Í¼Æ¬£¬2-ÊÓÆµ£¬3-ppt
    BYTE  byPictureFormat; //Í¼Æ¬¸ñÊ½£¬0-bmp 1-JPEG£¬2-PNG 3-SWF 4-GIF£¬ÎÄ¼þÀàÐÍÎª1Ê±ÓÐÐ§
    BYTE  byVideoFormat;   //ÊÓÆµ¸ñÊ½£¬0-AVI 1-WMV 2-MP4 3-FLV 3-VOD 4-MKV 5-RMVB£¬ÎÄ¼þÀàÐÍÎª2Ê±ÓÐÐ§
    BYTE  byRes1;
    BYTE  byFileName[MAX_FILE_PATH_LEN]; //ÎÄ¼þÃû³Æ
    BYTE  byRes2[64];
}NET_DVR_SCREEM_FILE_UPLOAD_PARAM, *LPNET_DVR_SCREEM_FILE_UPLOAD_PARAM;

typedef struct tagNET_DVR_SCREEM_FILE_DOWNLOAD_PARAM
{
    DWORD dwSize;
    DWORD dwFileIndex;  //ÎÄ¼þË÷Òý
    DWORD dwPPTPageNo;  //ÏÂÔØPPTÒ³ÃæÍ¼Æ¬Ê±ÓÐÐ§£¬Îª0±íÊ¾ÏÂÔØPPT±¾Éí£¬ÆäËûÖµ±íÊ¾PPTÒ³ÂëÖµ
    BYTE  byRes2[64];
}NET_DVR_SCREEM_FILE_DOWNLOAD_PARAM, *LPNET_DVR_SCREEM_FILE_DOWNLOAD_PARAM;

typedef enum _EN_SWITCH_CONVERT_ALARM
{
    SC_OPTICAL_PORT_LOST = 1,
    SC_NETWORK_PORT_LOST,
}EN_SWITCH_CONVERT_ALARM;
//ÓïÒô²ÎÊýÅäÖÃ
typedef    struct tagNET_DVR_TMEVOICE_CFG
{
    DWORD      dwSize;//½á¹¹Ìå´óÐ¡
    BYTE       byVoiceSpeed;//ÓïËÙ 0~100
    BYTE       byVoicePitch; //Óïµ÷ 0~100
    BYTE       byVoiceVolum; //ÒôÁ¿0~100
    BYTE       byRes1;
    /*ÉùÒôÖÖÀà£»
    3  = Xiaoyan (female, Chinese) 
    51 = Jiu Xu (male, Chinese) 
    52 = Duo Xu (male, Chinese) 
    53 = Xiaoping (female, Chinese)
    54 = Donald Duck (male, Chinese)
    55 = Baby Xu (child, Chinese)
    */
    DWORD     dwVoiceRole; //ÉùÒôÖÖÀà
    char      sInfo[MAX_TMEVOICE_LEN/*64*/]; //ÓïÒô²¥±¨ÄÚÈÝ£¨³öÈë¿ÚÑ¹ÏßÈ¦²¥±¨µÄÓïÒôÄÚÈÝ£©
    BYTE      byRes[128];
}NET_DVR_TMEVOICE_CFG,*LPNET_DVR_TMEVOICE_CFG;

typedef enum _EN_SWICH_CONVERT_NOTIFICATION
{
    SC_OPTICAL_PORT_CONNECTED = 1,
    SC_NETWORK_PORT_CONNECTED,
}EN_SWITCH_CONVERT_NOTIFICATION;

typedef struct tagNET_DVR_SWITCH_CONVERT_ALARM
{
    DWORD dwSize;
    BYTE  byPortNo;    //½Ó¿ÚË÷Òý£¬´Ó1¿ªÊ¼
    BYTE  byRes1[3];
    DWORD dwEventType; //ÊÂ¼þÀàÐÍ£¬1-¸æ¾¯£¬2-Í¨Öª
    DWORD dwEvent;     //¾ßÌåÊÂ¼þ£¬¸æ¾¯Ê±²Î¿¼Ã¶¾ÙEN_SWITCH_CONVERT_ALARM£¬Í¨ÖªÊ±²Î¿¼Ã¶¾ÙEN_SWITCH_CONVERT_NOTIFICATION
    BYTE  byRes2[32];    
}NET_DVR_SWITCH_CONVERT_ALARM, *LPNET_DVR_SWITCH_CONVERT_ALARM;

//ÊäÈë°å²ÎÊýÅäÖÃ
typedef struct tagNET_DVR_INPUT_BOARD_CFG
{
    DWORD    dwSize;
    DWORD    dwSlotNo;           //ÊäÈë°å²ÛÎ»ºÅ
    BYTE    byFullFrameEnable;  //ÊÇ·ñ¿ªÆôÈ«Ö¡ÂÊ³©ÏÔ£¬0-²»¿ªÆô£¬1-¿ªÆô
    BYTE    byRes[3];           //ËÄ×Ö½Ú¶ÔÆë
    BYTE    byRes1[64];         //±£Áô
}NET_DVR_INPUT_BOARD_CFG, *LPNET_DVR_INPUT_BOARD_CFG;

typedef struct tagNET_DVR_INPUT_BOARD_CFG_LIST
{
    DWORD    dwSize;
    NET_DVR_INPUT_BOARD_CFG struBoardList[MAX_NUM_INPUT_BOARD]; //ÊäÈë°åÅäÖÃÐÅÏ¢ÁÐ±í
}NET_DVR_INPUT_BOARD_CFG_LIST, *LPNET_DVR_INPUT_BOARD_CFG_LIST;

/******************************°²È«·À·¶ÊÓÆµ¼à¿ØÁªÍøÐÅÏ¢°²È« begin******************************************/
//»ñÈ¡¼ÓÃÜÉè±¸ÐÅÏ¢Ìõ¼þ½á¹¹Ìå
typedef struct _NET_DVR_ENCRYPT_DEVICE_COND
{
    DWORD  dwSize;     //½á¹¹Ìå´óÐ¡
    DWORD  dwChannel;     //Í¨µÀºÅ
    BYTE   byAlgorithm; //¼ÓÃÜËã·¨£¬0-±£Áô£¬1-RSA,2-SM2
    BYTE   byModelLen; //Ä£³¤£¬0-±£Áô£¬1-1024Î»,2-2048Î»,3-256Î»
    BYTE   byCERTSaveLocation; //Ö¤Êé±£´æÎ»ÖÃ£¬¸ù¾ÝÉè±¸·µ»ØµÄÄÜÁ¦¼¯À´Ñ¡Ôñ£¬0-±£Áô£¬1-¼ÓÃÜÐ¾Æ¬ÖÐ(Í¨¹ýUSB²åÈëÉè±¸),2-Éè±¸ÖÐ
    BYTE   byRes[29];
}NET_DVR_ENCRYPT_DEVICE_COND, *LPNET_DVR_ENCRYPT_DEVICE_COND;
//»ñÈ¡¼ÓÃÜÉè±¸ÐÅÏ¢½á¹¹Ìå
typedef struct _NET_DVR_ENCRYPT_DEVICE_INFO
{
    DWORD  dwSize;     //½á¹¹Ìå´óÐ¡
    BYTE   byAlgorithm; //¼ÓÃÜËã·¨£¬0-±£Áô£¬1-RSA,2-SM2
    BYTE   byModelLen; //Ä£³¤£¬0-±£Áô£¬1-1024Î»,2-2048Î»,3-256Î»
    BYTE   byRes1[30];  //±£Áô
    DWORD  dwPublicKeyLen;        //¹«Ô¿³¤¶È
    char   szPublicKey[MAX_PUBLIC_KEY_LEN];       //¹«Ô¿ 
    char   szChipSerialNumber[CHIP_SERIALNO_LEN];   //Ð¾Æ¬ÐòÁÐºÅ
    char   szDeviceID[ENCRYPT_DEV_ID_LEN];     //Éè±¸ID
    BYTE   byRes2[128];
}NET_DVR_ENCRYPT_DEVICE_INFO, *LPNET_DVR_ENCRYPT_DEVICE_INFO;
//¼ÓÃÜÖ¤Êé²ÎÊý½á¹¹Ìå
typedef struct _NET_DVR_ENCRYPT_CERT_PARAM
{
    DWORD dwSize;
    WORD wCertType; //Ö¤ÊéÀàÐÍ£¬0-CA¸ùÖ¤Êé£¬1-Ç©ÃûÖ¤Êé,3-¼ÓÃÜÖ¤Êé£¬4- SM2¼ÓÃÜÃÜÔ¿¶Ô
    BYTE byRes1[2]; //±£Áô
    DWORD dwCertLen; //Ö¤Êé³¤¶È
    BYTE  byRes2[32]; 
    char* pCertBuf;  //Ö¤Êé»º³åÇø
}NET_DVR_ENCRYPT_CERT_PARAM, *LPNET_DVR_ENCRYPT_CERT_PARAM;
/******************************°²È«·À·¶ÊÓÆµ¼à¿ØÁªÍøÐÅÏ¢°²È« end******************************************/
#define MAX_RING_NAME_LEN_128                128    //ÁåÒôÃû³Æ³¤¶È
typedef struct tagNET_DVR_RING_UPLOAD_CFG
{
    DWORD        dwSize;
    DWORD        dwRingID; //ÁåÒôÐòºÅ£¬[1,8]
    BYTE     byRingName[MAX_RING_NAME_LEN_128/*128*/];   //ÁåÒôÃû³Æ
    DWORD     dwRingSize;   //ÎÄ¼þ´óÐ¡
    BYTE        byRingType;   //ÁåÒôÀàÐÍ£¬0-wav
    BYTE        byRes[363];
}NET_DVR_RING_UPLOAD_CFG,*LPNET_DVR_RING_UPLOAD_CFG;

typedef struct tagNET_DVR_RING_SEARCH_COND
{
    DWORD        dwSize;
    DWORD        dwRingID; //ÁåÒôÐòºÅ£¬Éµ¹ÏÊ½²éÕÒ£¬²»ÉèÖÃ´Ë²ÎÊý£¨ÉèÎª0£©±íÊ¾ÎÞÊÓÐòºÅ²éÕÒ
    BYTE        byRes[300];
}NET_DVR_RING_SEARCH_COND,*LPNET_DVR_RING_SEARCH_COND;

typedef struct tagNET_DVR_RING_SEARCH_CFG
{
    DWORD        dwSize;
    DWORD        dwRingID; //ÁåÒôÐòºÅ£¬[1,8]
    BYTE     byRingName[MAX_RING_NAME_LEN_128/*128*/];   //ÁåÒôÃû³Æ
    DWORD     dwRingSize;   //ÎÄ¼þ´óÐ¡
    BYTE        byRingType;   //ÁåÒôÀàÐÍ£¬0-wav
    BYTE        byRes[303];
}NET_DVR_RING_SEARCH_CFG,*LPNET_DVR_RING_SEARCH_CFG;

//±¨¾¯¿ØÖÆ
typedef struct tagNET_DVR_ALARMCTRL_CFG
{
    DWORD   dwSize;
    BYTE    byListenPicUploadEnabled;//¼àÌýÍ¼Æ¬ÉÏ´«Ê¹ÄÜ
    BYTE    byRes [259];
}NET_DVR_ALARMCTRL_CFG,*LPNET_DVR_ALARMCTRL_CFG;

//À×´ï²âËÙÅäÖÃ
typedef struct tagNET_DVR_POSTRADARSPEED_CFG
{
    DWORD   dwSize;//½á¹¹Ìå´óÐ¡
    BYTE    byLaneType; //µÀÂ·ÀàÐÍ£»0~Î´ÅäÖÃ,1~¸ßËÙ¹«Â·,2~³ÇÊÐ¿ìËÙÂ·,0xff~ÆäËûµÀÂ·
    BYTE    byRes1[3];
    DWORD   dwInterval; //³¬ËÙ×¥ÅÄ¼ä¸ô£¬µ¥Î»£ºms
    DWORD   dwSignSpeed;//±êÖ¾ÏÞËÙ(Ð¡³µ)£¬µ¥Î»km/h
    DWORD   dwSpeedLimit;//ÏÞËÙÖµ(Ð¡³µ)£¬µ¥Î»km/h
    DWORD   dwBigCarSignSpeed;//±êÖ¾ÏÞËÙ(´ó³µ)£¬µ¥Î»km/h
    DWORD   dwBigCarSpeedLimit;//ÏÞËÙÖµ£¨´ó³µ£©£¬µ¥Î»km/h
    DWORD   dwLowSpeedLimit;// Ð¡³µÏÞµÍËÙ£¬µ¥Î»km/h
    DWORD   dwBigCarLowSpeedLimit;// ´ó³µÏÞµÍËÙ£¬µ¥Î»km/h
    BYTE    byCheckPostEnabled; //ÆôÓÃ¿¨¿Ú×¥ÅÄ
    BYTE    byOverSpeedEnabled; //ÆôÓÃ³¬ËÙ×¥ÅÄ
    BYTE    byRes[246];
}NET_DVR_POSTRADARSPEED_CFG, *LPNET_DVR_POSTRADARSPEED_CFG;

//À×´ï²ÎÊýÅäÖÃ
typedef struct tagNET_DVR_POSTRADARPARAM_CFG
{
    DWORD   dwSize;//½á¹¹Ìå´óÐ¡
    BYTE    bySoftWareVersion[32];//Èí¼þ°æ±¾ºÅ Ö»¶Á²ÎÊý
    BYTE    byID; //´®¿ÚºÅ
    BYTE    byWorkMode; //¹¤×÷Ä£Ê½£¬0~³ÖÐø,1~´¥Í·,2~´¥Î²,3~Ñ²Âß³µ´¥Î²,4~Ë«´¥,0xff~ÆäËû
    BYTE    bySpeedType; //ËÙ¶È¸ñÊ½£¬0~µ¥×Ö½Ú,1~Ë«×Ö½Ú,2~ËÄ×Ö½Ú,0xff~ÆäËû
    BYTE    byDirectionFilter; //·½Ïò¹ýÂË£¬0~²»¹ýÂË,1~Êä³öÀ´Ïò,2~Êä³öÈ¥Ïò
    DWORD   dwAngleCorrect;//½Ç¶ÈÐÞÕý[0,70]
    DWORD   dwSensitivity;// ÁéÃô¶È[11,240]
    DWORD   dwSpeedLowLimit;// ²âËÙÏÂÏÞ[1,150km/h]
    DWORD   dwTrigDistance;// ´¥·¢¾àÀë[0,40m]
    BYTE    byRes[256];
}NET_DVR_POSTRADARPARAM_CFG, *LPNET_DVR_POSTRADARPARAM_CFG;

typedef struct tagNET_DVR_CLOUD_URL_COND
{
    DWORD   dwSize;
    BYTE    byType;     //ÔÆÀàÐÍ0-±£Áô£¬1- OneDrive  2-GoogleDrive 3-DropBox
    BYTE    byRes[63];
}NET_DVR_CLOUD_URL_COND, *LPNET_DVR_CLOUD_URL_COND;

typedef struct tagNET_DVR_CLOUD_URL
{
    DWORD   dwSize;
    char    szURL[256]; //ÔÆ´æ´¢URL
    BYTE    byRes[256];
}NET_DVR_CLOUD_URL, *LPNET_DVR_CLOUD_URL;

typedef struct tagNET_DVR_CLOUD_CFG
{
    DWORD    dwSize;
    BYTE    byEnable;    //0-²»¿ªÆô£¬1-¿ªÆô
    BYTE    byType;        //ÔÆÀàÐÍ0-±£Áô£¬1- OneDrive  2-GoogleDrive 3-DropBox
    BYTE    byStatus;    //×´Ì¬£¬Ö»¶Á 0-±£Áô 1-ÔÚÏß 2-²»ÔÚÏß
    BYTE    byRes1;
    char    szAuthCode[CODE_LEN]; //ÊÚÈ¨Âë
    char    szAlias[ALIAS_LEN];    //±ðÃû£¬Ö»¶Á
    INT64    i64TotalCapability;            //×ÜÈÝÁ¿£¬Ö»¶Á£¬µ¥Î»£ºMB
    INT64    i64UsedSpace;                //ÒÑÓÃÈÝÁ¿£¬Ö»¶Á£¬µ¥Î»£ºMB
    BYTE    byRes2[256];
}NET_DVR_CLOUD_CFG, *LPNET_DVR_CLOUD_CFG;

typedef struct tagNET_DVR_CLOUD_UPLOADSTRATEGY_COND
{
    DWORD    dwSize;
    DWORD    dwChannel;    //Í¨µÀºÅ
    BYTE    byRes[254];    //Îª½«À´Ê¹ÓÃÁ÷ID×ö±£Áô
}NET_DVR_CLOUD_UPLOADSTRATEGY_COND, *LPNET_DVR_CLOUD_UPLOADSTRATEGY_COND;

typedef struct tagNET_DVR_CLOUD_UPLOADSTRATEGY
{
    DWORD      dwSize;
    BYTE    byStrategyType;    //²ßÂÔÀàÐÍ0-ÎÞÒâÒå£¬1-Â¼Ïñ£¬2-Í¼Æ¬
    BYTE    byRes1[3];
    DWORD    dwRecordType;    //²ßÂÔÀàÐÍbyStrategyType Îª1Ê±ÓÐÐ§£¬°´Î»±íÊ¾
    /*0x00: ÎÞÒâÒå*/
    /*0x01: È«²¿ÊÂ¼þ*/
    /*0x02: ÒÆ¶¯Õì²â*/
    /*0x04: ÐÅºÅÁ¿±¨¾¯ÀàÐÍ*/
    /*0x08: ÖÇÄÜÀàÐÍ*/
    BYTE    byRes[256];
}NET_DVR_CLOUD_UPLOADSTRATEGY, *LPNET_DVR_CLOUD_UPLOADSTRATEGY;

//Â¼ÏñÍêÕûÐÔ¼ì²éÌõ¼þ²ÎÊý
typedef  struct tagNET_DVR_RECORD_CHECK_COND
{
    DWORD    dwSize;
    NET_DVR_STREAM_INFO    struStreamInfo;
    BYTE   byCheckType;        //¼ì²â·½Ê½,0--Â¼ÏñÊÇ·ñÍêÕû,1--Â¼ÏñÊÇ·ñÍêÕû&È±Ê§Â¼ÏñµÄÆðÖ¹Ê±¼ä
    BYTE   byRes1[3];
    NET_DVR_TIME_EX struBeginTime;    //¼ì²âÂ¼ÏñµÄ¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_EX struEndTime;    //¼ì²âÂ¼ÏñµÄ½áÊøÊ±¼ä
    BYTE   byRes[128];
}NET_DVR_RECORD_CHECK_COND, *LPNET_DVR_RECORD_CHECK_COND;

//Â¼ÏñÍêÕûÐÔ¼ì²é½á¹û
typedef  struct tagNET_DVR_RECORD_CHECK_RET
{
    DWORD    dwSize; 
    BYTE   byRecordNotComplete;    //Â¼ÏñÊÇ·ñÍêÕû£¬0--ÍêÕû,1--²»ÍêÕû
    BYTE   byRes1[3];
    NET_DVR_TIME_EX struBeginTime;    //È±Ê§Â¼ÏñµÄ¿ªÊ¼Ê±¼ä£¬byCheckType¡¢byRecordNotCompleteÖµ¶¼Îª1Ê±ÓÐÐ§
    NET_DVR_TIME_EX struEndTime;    //È±Ê§Â¼ÏñµÄ½áÊøÊ±¼ä£¬byCheckType¡¢byRecordNotCompleteÖµ¶¼Îª1Ê±ÓÐÐ§
    BYTE   byRes[128];
}NET_DVR_RECORD_CHECK_RET, *LPNET_DVR_RECORD_CHECK_RET;

//Ìí¼ÓÊÖ¶¯»Ø´«ÈÎÎñÌõ¼þ
typedef  struct tagNET_DVR_ADD_RECORD_PASSBACK_MANUAL_COND
{
    DWORD    dwSize;
    NET_DVR_STREAM_INFO    struStreamInfo;
    BYTE   byRes[128];
}NET_DVR_ADD_RECORD_PASSBACK_MANUAL_COND, *LPNET_DVR_ADD_RECORD_PASSBACK_MANUAL_COND;

//Ìí¼ÓÊÖ¶¯»Ø´«ÈÎÎñ²ÎÊý
typedef  struct tagNET_DVR_ADD_RECORD_PASSBACK_MANUAL_CFG
{
    DWORD    dwSize;
    NET_DVR_TIME_EX struBeginTime;    //»Ø´«µÄÂ¼Ïñ¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_EX struEndTime;    //»Ø´«µÄÂ¼Ïñ½áÊøÊ±¼ä
    BYTE   byRes[128];
}NET_DVR_ADD_RECORD_PASSBACK_MANUAL_CFG, *LPNET_DVR_ADD_RECORD_PASSBACK_MANUAL_CFG;

//»ñÈ¡ËùÓÐÊÖ¶¯»Ø´«ÈÎÎñÌõ¼þ²ÎÊý
typedef struct tagNET_DVR_RECORD_PASSBACK_MANUAL_COND
{
	DWORD	dwSize;
	BYTE	byType;     //»ñÈ¡·½Ê½,0--»ñÈ¡È«²¿Ê£ÓàÈÎÎñ£¬1--¸ù¾ÝÁ÷ID»ñÈ¡Ê£ÓàÈÎÎñ, 2--»ñÈ¡È«²¿ÈÎÎñ£¬3--¸ù¾ÝÁ÷ID»ñÈ¡ÈÎÎñ
    BYTE    byTimeSegmentQuety; //ÊÇ·ñÆôÓÃÊ±¼ä·¶Î§²éÑ¯£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
	BYTE    byRes1[2];  //±£Áô
	NET_DVR_STREAM_INFO	struStreamInfo; //Á÷idÐÅÏ¢£¨72×Ö½Ú£©£¬¸ù¾ÝÁ÷ID»ñÈ¡Ê£ÓàÈÎÎñÊ±ÓÐÐ§
    NET_DVR_TIME_EX struBeginTime;      //²éÑ¯¿ªÊ¼Ê±¼ä£¬byTimeSegmentQuetyÆôÓÃÊ±ÓÐÐ§
    NET_DVR_TIME_EX struEndTime;        //²éÑ¯½áÊøÊ±¼ä£¬byTimeSegmentQuetyÆôÓÃÊ±ÓÐÐ§
	BYTE    byRes[112]; //±£Áô
}NET_DVR_RECORD_PASSBACK_MANUAL_COND, *LPNET_DVR_RECORD_PASSBACK_MANUAL_COND;

//»ñÈ¡ËùÓÐÊÖ¶¯»Ø´«ÈÎÎñ²ÎÊý
typedef struct tagNET_DVR_RECORD_PASSBACK_MANUAL_TASK_RET
{
	DWORD		dwSize;
	NET_DVR_STREAM_INFO	struStreamInfo;	//Á÷idÐÅÏ¢£¨72×Ö½Ú£©£¬¸ù¾ÝÁ÷ID»ñÈ¡Ê£ÓàÈÎÎñÊ±ÓÐÐ§
	DWORD		dwTaskID;		//ÈÎÎñID
	NET_DVR_TIME_EX	struStartTime;  //»Ø´«µÄÂ¼Ïñ¿ªÊ¼Ê±¼ä
	NET_DVR_TIME_EX	struStopTime;   //»Ø´«µÄÂ¼Ïñ½áÊøÊ±¼ä
	BYTE		byTaskStatus;	//ÈÎÎñ×´Ì¬£¬0--Î´Ö´ÐÐ£¬1--ÔÝÍ£ÖÐ£¬2--ÒÑÖ´ÐÐ, 3--»Ø´«ÖÐ, 4--»Ø´«Ê§°Ü
	BYTE		byRes1[3];
	NET_DVR_TIME_EX	struExecuteStartTime;//ÈÎÎñÊµ¼ÊÖ´ÐÐ¿ªÊ¼Ê±¼ä£¬byTaskStatusÎª1ºÍ2ÓÐÐ§
	NET_DVR_TIME_EX	struExecuteStopTime;//ÈÎÎñÊµ¼ÊÖ´ÐÐ½áÊøÊ±¼ä£¬byTaskStatusÎª2ÓÐÐ§
	BYTE		byRes[128];		//±£Áô
}NET_DVR_RECORD_PASSBACK_MANUAL_TASK_RET, *LPNET_DVR_RECORD_PASSBACK_MANUAL_TASK_RET;

//¿ØÖÆÊÖ¶¯»Ø´«ÈÎÎñ²ÎÊý
typedef struct tagNET_DVR_RECORD_PASSBACK_MANUAL_CTRL
{
    DWORD    dwSize;
    BYTE    byControlType;    //¿ØÖÆ·½Ê½,0--ÔÝÍ£ËùÓÐÊÖ¶¯ÈÎÎñ£¬1--»Ö¸´ËùÓÐÊÖ¶¯ÈÎÎñ
    BYTE    byRes[131];        //±£Áô
}NET_DVR_RECORD_PASSBACK_MANUAL_CTRL, *LPNET_DVR_RECORD_PASSBACK_MANUAL_CTRL;

//É¾³ýÊÖ¶¯»Ø´«ÈÎÎñÌõ¼þ
typedef struct tagNET_DVR_DEL_RECORD_PASSBACK_MANUAL_COND
{
    DWORD    dwSize;
    BYTE    byDelType;    //É¾³ý·½Ê½,0--¸ù¾ÝÈÎÎñIDÉ¾³ý£¬1--¸ù¾ÝÁ÷IDÉ¾³ýÈÎÎñ£¬2--É¾³ýÈ«²¿ÈÎÎñ
    BYTE    byRes[131];    //±£Áô
}NET_DVR_DEL_RECORD_PASSBACK_MANUAL_COND, *LPNET_DVR_DEL_RECORD_PASSBACK_MANUAL_COND;

//É¾³ýÊÖ¶¯»Ø´«ÈÎÎñ²ÎÊý
typedef struct tagNET_DVR_DEL_RECORD_PASSBACK_MANUAL_CFG
{
    DWORD    dwSize;
    DWORD    dwTaskID;    //ÊÖ¶¯»Ø´«ÈÎÎñID£¬¸ù¾ÝÈÎÎñIDÉ¾³ýÈÎÎñÊ±ÓÐÐ§
    NET_DVR_STREAM_INFO    struStreamInfo;    //Á÷idÐÅÏ¢£¨72×Ö½Ú£©£¬¸ù¾ÝÁ÷IDÉ¾³ýÈÎÎñÊ±ÓÐÐ§
    BYTE    byRes[128];    //±£Áô
}NET_DVR_DEL_RECORD_PASSBACK_MANUAL_CFG, *LPNET_DVR_DEL_RECORD_PASSBACK_MANUAL_CFG;

typedef struct tagNET_DVR_PASSBACK_DAY
{
    BYTE    byAllDay;    //ÊÇ·ñÆôÓÃÈ«Ìì»Ø´«
    BYTE    byRes[3];    //±£Áô
}NET_DVR_PASSBACK_DAY, *LPNET_DVR_PASSBACK_DAY;

typedef struct tagNET_DVR_PASSBACK_SCHED
{
    NET_DVR_SCHEDTIME    struPassBackTime;    //»Ø´«ÈÎÎñÊ±¼ä¶Î£¬¿ªÊ¼Ê±¼ä-½áÊøÊ±¼ä
    BYTE        byRes[4];        //±£Áô
}NET_DVR_PASSBACK_SCHED, *LPNET_DVR_PASSBACK_SCHED;

//Â¼Ïñ»Ø´«¼Æ»®²ÎÊý
typedef struct tagNET_DVR_RECORD_PASSBACK_SCH_CFG_
{
    DWORD    dwSize;
    BYTE    byEnable;        //ÊÇ·ñÆôÓÃ£¬0--²»ÆôÓÃ£¬1--ÆôÓÃ
    BYTE    byPassBackWeek;    //ÊÇ·ñ°´ÖÜ»Ø´«£¬0--·ñ£¬1--ÊÇ£¬ÖµÎª1Ê±struPassBackDay¡¢struPassBackSchedÎÞÐ§
    BYTE    byRes1[2];            //±£Áô
    NET_DVR_PASSBACK_DAY    struPassBackDay[MAX_DAYS];  //È«Ìì»Ø´«¼Æ»®
    NET_DVR_PASSBACK_SCHED    struPassBackSched[MAX_DAYS][MAX_TIMESEGMENT_V30];    //Ê±¼ä¶Î»Ø´«¼Æ»®
    BYTE   byRes[128];        //±£Áô
}NET_DVR_RECORD_PASSBACK_SCH_CFG, *LPNET_DVR_RECORD_PASSBACK_SCH_CFG;

//Â¼Ïñ¾í²ÎÊý
typedef struct tagNET_DVR_DEV_STORAGE_CFG
{
    DWORD    dwSize;
    DWORD    dwCapacityTotal;        //Éè±¸´æ´¢(CVR±íÊ¾Â¼Ïñ¾í)×ÜÈÝÁ¿(Ö»¶Á)£¬µ¥Î»MB
    DWORD    dwFreeSpaceTotal;        //Éè±¸´æ´¢(CVR±íÊ¾Â¼Ïñ¾í)Ê£Óà×Ü¿Õ¼ä(Ö»¶Á)£¬µ¥Î»MB
    DWORD    dwLockedRecordSpace;    //Éè±¸ÒÑ¼ÓËøÂ¼Ïñ´æ´¢(CVR±íÊ¾Â¼Ïñ¾í)×ÜÈÝÁ¿(Ö»¶Á)£¬µ¥Î»MB
    DWORD    dwUnLockedSpace;        //Éè±¸Î´¼ÓËø´æ´¢(CVR±íÊ¾Â¼Ïñ¾í)×ÜÈÝÁ¿(Ö»¶Á),°üº¬Î´¼ÓËøÂ¼ÏñºÍÊ£Óà´æ´¢¿Õ¼ä£¬µ¥Î»MB
    BYTE    byRes[512];                //±£Áô
}NET_DVR_DEV_STORAGE_CFG, *LPNET_DVR_DEV_STORAGE_CFG;

//Éè±¸Á¬½ÓµÄÓÃ»§²ÎÊý
typedef struct tagNET_DVR_ONLINE_USER_INFO_
{
    DWORD    dwSize;
    WORD    wOnlineUserCount;    //µÇÂ¼Éè±¸µÄÓÃ»§Êý
    BYTE   byRes[514];    //±£Áô
}NET_DVR_ONLINE_USER_INFO, *LPNET_DVR_ONLINE_USER_INFO;

//²éÑ¯Â¼Ïñ×Ü´óÐ¡Ìõ¼þ²ÎÊý
typedef struct tagNET_DVR_RECORD_SEGMENT_COND_
{
    DWORD        dwSize;
    NET_DVR_STREAM_INFO    struStreanInfo;
    NET_DVR_TIME_EX    struStartTime;  //¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_EX    struStopTime;    //½áÊøÊ±¼ä
    BYTE        byRes[256];        //±£Áô
}NET_DVR_RECORD_SEGMENT_COND, *LPNET_DVR_RECORD_SEGMENT_COND;

//²éÑ¯Â¼Ïñ×Ü´óÐ¡·µ»Ø²ÎÊý
typedef struct tagNET_DVR_RECORD_SEGMENT_RET_
{
    DWORD    dwSize;
    DWORD    dwRecordTotalSize;    //Â¼Ïñ×Ü´óÐ¡£¬µ¥Î»MB
    BYTE    byRes[256];        //±£Áô
}NET_DVR_RECORD_SEGMENT_RET, *LPNET_DVR_RECORD_SEGMENT_RET;
typedef struct tagNET_DVR_ACCESSORY_CARD_INFO
{
    DWORD   dwSize;
    BYTE    szAccessoryCardInfo[MAX_ACCESSORY_CARD/*256*/];//Åä¼þ°å(ÖÇÄÜ°åºÍÆ´¿Ø°å)ÐÍºÅÐÅÏ¢
    BYTE    byRes[512];
}NET_DVR_ACCESSORY_CARD_INFO, *LPNET_DVR_ACCESSORY_CARD_INFO;
//²éÑ¯ÐÅÏ¢Ìõ¼þ½á¹¹Ìå
typedef struct tagNET_DVR_SEARCH_INFO_COND
{
    DWORD                   dwSize;
    BYTE                    byCommand;    //²éÑ¯Ìõ¼þ£¬0-¸öÈË£¬1-ËùÓÐ
    BYTE                    byRes1[3];
    DWORD                   dwEmployeeNo; //¹¤ºÅ£¨²éÑ¯Ìõ¼þÅäÖÃÎª0-¸öÈËÊ±ÓÐÐ§£©
    BYTE                    byName[NAME_LEN];   //ÐÕÃû£¨²éÑ¯Ìõ¼þÅäÖÃÎª0-¸öÈËÊ±ÓÐÐ§£©
    NET_DVR_TIME_V30        struStartTime;      //¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30        struEndTime;        //½áÊøÊ±¼ä
    BYTE                    byRes[128];	        //±£Áô
}NET_DVR_SEARCH_INFO_COND, *LPNET_DVR_SEARCH_INFO_COND;

//»ñÈ¡ÅÅ°àÐÅÏ¢
typedef struct tagNET_DVR_SCHEDULE_CHOICE
{
    BYTE                    byScheduleType;	    //°à´ÎÀàÐÍ£¬0-²»ÅÅ°à¡¢1-ÆÕÍ¨°à¡¢2-¹¤Ê±°à
    BYTE                    byScheduleNo;       //°à´Î±àºÅ
    BYTE                    byRes[14];          //±£Áô
}NET_DVR_SCHEDULE_CHOICE, *LPNET_DVR_SCHEDULE_CHOICE;
//  B20 V1.5
typedef struct tagNET_DVR_DISPINPUT_CFG
{
    DWORD  dwSize;
    DWORD  dwDispInputNo; //ÏÔÊ¾ÊäÈëºÅ
    DWORD  dwEDIDFileNo; //¹ØÁªµÄEDIDÎÄ¼þ±àºÅ
    BYTE   byRes[32];
}NET_DVR_DISPINPUT_CFG, *LPNET_DVR_DISPINPUT_CFG;

//ÅÅ°à¼Æ»®½á¹¹Ìå
typedef struct tagNET_DVR_SCHEDULE_PLAN
{
    DWORD                   dwSize;
    BYTE                    bySchedulePlanNo;   //ÅÅ°à¼Æ»®±àºÅ,ÆðÊ¼·¶Î§¸ù¾ÝÄÜÁ¦¼¯·µ»Ø
    BYTE                    bySchedulePlanType; //ÅÅ°à¼Æ»®ÀàÐÍ£¬0-¸öÈË¡¢1-²¿ÃÅ
    BYTE                    byEnable;           //Ê¹ÄÜ
    BYTE                    byRes1;
    NET_DVR_SCHEDULE_CHOICE struScheduleChoice[DAYS_A_WEEK];  //°à´ÎÑ¡Ôñ
    NET_DVR_TIME_V30        struStartTime;      //¿ªÊ¼Ê±¼ä
    NET_DVR_TIME_V30        struEndTime;        //½áÊøÊ±¼ä
    BYTE                    byHolidayNo;        //¼ÙÈÕ×é±àºÅ
    BYTE                    byRes[63];          //±£Áô
}NET_DVR_SCHEDULE_PLAN, *LPNET_DVR_SCHEDULE_PLAN;
typedef struct tagNET_DVR_DISPINPUT_CFG_LIST
{
    DWORD  dwSize;
    DWORD  dwDispInputNum; //·µ»ØµÄNET_DVR_DISPINPUT_CFG½á¹¹µÄ¸öÊý
    LPNET_DVR_DISPINPUT_CFG lpstruBuffer; //»º³åÇøÖ¸Õë
    DWORD  dwBufferSize; //»º³åÇø´óÐ¡
    BYTE   byRes[32];
}NET_DVR_DISPINPUT_CFG_LIST, *LPNET_DVR_DISPINPUT_CFG_LIST;

//»ñÈ¡ÅÅ°àÐÅÏ¢
typedef struct tagNET_DVR_SCHEDULE_INFO_CFG
{
    DWORD                  dwSize;
    DWORD                  dwEmployeeNo;        //¹¤ºÅ
    BYTE                   byName[NAME_LEN];    //ÐÕÃû
    BYTE                   byDepartmentName[NAME_LEN];   //²¿ÃÅÃû³Æ
    NET_DVR_SCHEDULE_PLAN  struSchedulePlan;    //ÅÅ°à¼Æ»®
    BYTE                   byRes[128];          //±£Áô
}NET_DVR_SCHEDULE_INFO_CFG, *LPNET_DVR_SCHEDULE_INFO_CFG;

//»ñÈ¡¿¼ÇÚ»ã×ÜÐÅÏ¢
typedef struct tagNET_DVR_ATTENDANCE_SUMMARY_CFG
{
    DWORD                 dwSize;
    DWORD                 dwEmployeeNo; //¹¤ºÅ
    BYTE                  byName[NAME_LEN];  //ÐÕÃû
    BYTE                  byDepartmentName[NAME_LEN];  //²¿ÃÅÃû³Æ
    DWORD                 dwWorkStandard;    //±ê×¼¹¤×÷Ê±¼ä£¨·ÖÖÓ£©
    DWORD                 dwWorkActual; //Êµ¼Ê¹¤×÷Ê±¼ä£¨·ÖÖÓ£©
    DWORD                 dwLateTimes;  //³Ùµ½´ÎÊý
    DWORD                 dwLateMinutes;//³Ùµ½ÀÛ¼ÆÊ±¼ä£¨·ÖÖÓ£©
    DWORD                 dwLeaveEarlyTimes;    //ÔçÍË´ÎÊý
    DWORD                 dwLeaveEarlyMinutes;  //ÔçÍËÀÛ¼ÆÊ±¼ä£¨·ÖÖÓ£©
    DWORD                 dwOvertimeStandard;   //±ê×¼¼Ó°àÊ±¼ä£¨·ÖÖÓ£©
    DWORD                 dwOvertimeActual;     //Êµ¼Ê¼Ó°àÊ±¼ä£¨·ÖÖÓ£©
    DWORD                 dwAttendanceStandard; //±ê×¼³öÇÚÌìÊý£¨Ìì£©
    DWORD                 dwAttendanceActual;   //Êµ¼Ê³öÇÚÌìÊý£¨Ìì£©
    DWORD                 dwAbsentDays;         //¿õ¹¤ÌìÊý£¨Ìì£©
    BYTE                  byRes[128];           //±£Áô
}NET_DVR_ATTENDANCE_SUMMARY_CFG, *LPNET_DVR_ATTENDANCE_SUMMARY_CFG;

//»ñÈ¡¿¼ÇÚ¼ÇÂ¼ÐÅÏ¢
typedef struct tagNET_DVR_ATTENDANCE_RECORD_CFG
{
    DWORD                 dwSize;
    DWORD                 dwEmployeeNo; //¹¤ºÅ
    BYTE                  byName[NAME_LEN];     //ÐÕÃû
    BYTE                  byDepartmentName[NAME_LEN];  //²¿ÃÅÃû³Æ
    NET_DVR_TIME_V30      struAttendanceTime;   //¿¼ÇÚÊ±¼ä
    BYTE                  byRes[128];   //±£Áô
}NET_DVR_ATTENDANCE_RECORD_CFG, *LPNET_DVR_ATTENDANCE_RECORD_CFG;

//¿¼ÇÚÊ±¼ä¶ÎÐÅÏ¢
typedef struct tagNET_DVR_ATTENDANCE_TIME
{
    NET_DVR_TIME_V30      struOnDutyTime;   //ÉÏ°àÊ±¼ä
    NET_DVR_TIME_V30      struOffDutyTime;  //ÏÂ°àÊ±¼ä
}NET_DVR_ATTENDANCE_TIME, *LPNET_DVR_ATTENDANCE_TIME;

//»ñÈ¡Òì³£Í³¼ÆÐÅÏ¢
typedef struct tagNET_DVR_ABNORMAL_CFG
{
    DWORD                 dwSize;
    DWORD                 dwEmployeeNo;     //¹¤ºÅ
    BYTE                  byName[NAME_LEN]; //ÐÕÃû
    BYTE                  byDepartmentName[NAME_LEN];  //²¿ÃÅÃû³Æ
    NET_DVR_ATTENDANCE_TIME struAttendanceTime[ABNORMAL_INFO_NUM]; //Òì³£Ê±¼ä¶Î
    DWORD                 dwLateMinutes;    //³Ùµ½Ê±¼ä£¨·ÖÖÓ£©
    DWORD                 dwLeaveEarlyMinutes; //ÔçÍËÊ±¼ä£¨·ÖÖÓ£©
    DWORD                 dwAbsenceMinutes; //È±ÇÚÊ±¼ä£¨·ÖÖÓ£©
    DWORD                 dwTotalMinutes;   //ºÏ¼ÆÊ±¼ä£¨·ÖÖÓ£©
    BYTE                  byRes[128];     //±£Áô
}NET_DVR_ABNORMAL_CFG, *LPNET_DVR_ABNORMAL_CFG;

typedef struct tagNET_DVR_CARD_CFG_V50
{
    DWORD dwSize;
    DWORD dwModifyParamType;
    // ÐèÒªÐÞ¸ÄµÄ¿¨²ÎÊý£¬ÉèÖÃ¿¨²ÎÊýÊ±ÓÐÐ§£¬°´Î»±íÊ¾£¬Ã¿Î»´ú±íÒ»ÖÖ²ÎÊý£¬1ÎªÐèÒªÐÞ¸Ä£¬0Îª²»ÐÞ¸Ä
    // #define CARD_PARAM_CARD_VALID       0x00000001 //¿¨ÊÇ·ñÓÐÐ§²ÎÊý
    // #define CARD_PARAM_VALID            0x00000002  //ÓÐÐ§ÆÚ²ÎÊý
    // #define CARD_PARAM_CARD_TYPE        0x00000004  //¿¨ÀàÐÍ²ÎÊý
    // #define CARD_PARAM_DOOR_RIGHT       0x00000008  //ÃÅÈ¨ÏÞ²ÎÊý
    // #define CARD_PARAM_LEADER_CARD      0x00000010  //Ê×¿¨²ÎÊý
    // #define CARD_PARAM_SWIPE_NUM        0x00000020  //×î´óË¢¿¨´ÎÊý²ÎÊý
    // #define CARD_PARAM_GROUP            0x00000040  //ËùÊôÈº×é²ÎÊý
    // #define CARD_PARAM_PASSWORD         0x00000080  //¿¨ÃÜÂë²ÎÊý
    // #define CARD_PARAM_RIGHT_PLAN       0x00000100  //¿¨È¨ÏÞ¼Æ»®²ÎÊý
    // #define CARD_PARAM_SWIPED_NUM       0x00000200  //ÒÑË¢¿¨´ÎÊý
    BYTE byCardNo[ACS_CARD_NO_LEN]; //¿¨ºÅ
    BYTE byCardValid; //¿¨ÊÇ·ñÓÐÐ§£¬0-ÎÞÐ§£¬1-ÓÐÐ§£¨ÓÃÓÚÉ¾³ý¿¨£¬ÉèÖÃÊ±ÖÃÎª0½øÐÐÉ¾³ý£¬»ñÈ¡Ê±´Ë×Ö¶ÎÊ¼ÖÕÎª1£©
    BYTE byCardType; //¿¨ÀàÐÍ£¬1-ÆÕÍ¨¿¨£¬2-²Ð¼²ÈË¿¨£¬3-ºÚÃûµ¥¿¨£¬4-Ñ²¸ü¿¨£¬5-Ð²ÆÈ¿¨£¬6-³¬¼¶¿¨£¬7-À´±ö¿¨£¬8-½â³ý¿¨£¬Ä¬ÈÏÆÕÍ¨¿¨
    BYTE byLeaderCard; //ÊÇ·ñÎªÊ×¿¨£¬1-ÊÇ£¬0-·ñ
    BYTE byRes1;
    BYTE byDoorRight[MAX_DOOR_NUM_256]; //ÃÅÈ¨ÏÞ£¬°´Î»±íÊ¾£¬1ÎªÓÐÈ¨ÏÞ£¬0ÎªÎÞÈ¨ÏÞ£¬´ÓµÍÎ»µ½¸ßÎ»±íÊ¾¶ÔÃÅ1-NÊÇ·ñÓÐÈ¨ÏÞ
    NET_DVR_VALID_PERIOD_CFG struValid; //ÓÐÐ§ÆÚ²ÎÊý
    BYTE  byBelongGroup[MAX_GROUP_NUM_128]; //ËùÊôÈº×é£¬°´×Ö½Ú±íÊ¾£¬1-ÊôÓÚ£¬0-²»ÊôÓÚ
    BYTE byCardPassword[CARD_PASSWORD_LEN]; //¿¨ÃÜÂë
    WORD wCardRightPlan[MAX_DOOR_NUM_256][MAX_CARD_RIGHT_PLAN_NUM]; //¿¨È¨ÏÞ¼Æ»®£¬È¡ÖµÎª¼Æ»®Ä£°å±àºÅ£¬Í¬¸öÃÅ²»Í¬¼Æ»®Ä£°å²ÉÓÃÈ¨ÏÞ»òµÄ·½Ê½´¦Àí
    DWORD dwMaxSwipeTime; //×î´óË¢¿¨´ÎÊý£¬0ÎªÎÞ´ÎÊýÏÞÖÆ
    DWORD dwSwipeTime; //ÒÑË¢¿¨´ÎÊý
    WORD wRoomNumber;  //·¿¼äºÅ
    SHORT wFloorNumber;   //²ãºÅ
    DWORD dwEmployeeNo;   //¹¤ºÅ
    BYTE byName[NAME_LEN];   //ÐÕÃû
    WORD wDepartmentNo;   //²¿ÃÅ±àºÅ
    WORD wSchedulePlanNo;   //ÅÅ°à¼Æ»®±àºÅ
    BYTE bySchedulePlanType;  //ÅÅ°à¼Æ»®ÀàÐÍ£º0-ÎÞÒâÒå¡¢1-¸öÈË¡¢2-²¿ÃÅ
    BYTE byRes2[119];
}NET_DVR_CARD_CFG_V50, *LPNET_DVR_CARD_CFG_V50;

typedef  struct tagNET_DVR_CAPTURE_FINGERPRINT_COND
{
    DWORD  dwSize;
    BYTE   byFingerPrintPicType;    //Í¼Æ¬ÀàÐÍ£º0-ÎÞÒâÒå
    BYTE   byRes[127];
}NET_DVR_CAPTURE_FINGERPRINT_COND, *LPNET_DVR_CAPTURE_FINGERPRINT_COND;

typedef  struct tagNET_DVR_CAPTURE_FINGERPRINT_CFG
{
    DWORD dwSize;
    DWORD dwFingerPrintDataSize;    //Ö¸ÎÆÊý¾Ý´óÐ¡
    BYTE  byFingerData[MAX_FINGER_PRINT_LEN];        //Ö¸ÎÆÊý¾ÝÄÚÈÝ
    DWORD dwFingerPrintPicSize;    //Ö¸ÎÆÍ¼Æ¬´óÐ¡£¬µÈÓÚ0Ê±£¬´ú±íÎÞÖ¸ÎÆÍ¼Æ¬Êý¾Ý
    char* pFingerPrintPicBuffer;       //Ö¸ÎÆÍ¼Æ¬»º´æ
    BYTE  byRes[64];
}NET_DVR_CAPTURE_FINGERPRINT_CFG, *LPNET_DVR_CAPTURE_FINGERPRINT_CFG;

//²éÑ¯ÊÖ¶¯»Ø´«ÈÎÎñ¿ÉÖ´ÐÐÐÔÌõ¼þ²ÎÊý
typedef struct tagNET_DVR_REC_PASSBACK_MANUAL_EXECUTABLE_SEND
{
    DWORD   dwSize;
    NET_DVR_STREAM_INFO struStreamInfo; //Á÷idÐÅÏ¢£¨72×Ö½Ú£©
    BYTE    byRes[128];                 //±£Áô
}NET_DVR_REC_PASSBACK_MANUAL_EXECUTABLE_SEND, *LPNET_DVR_REC_PASSBACK_MANUAL_EXECUTABLE_SEND;

//²éÑ¯ÊÖ¶¯»Ø´«ÈÎÎñ¿ÉÖ´ÐÐÐÔÌõ¼þ²ÎÊý
typedef struct tagNET_DVR_REC_PASSBACK_MANUAL_EXECUTABLE_RET
{
    DWORD   dwSize;
    NET_DVR_STREAM_INFO struStreamInfo; //Á÷idÐÅÏ¢£¨72×Ö½Ú£©
    BYTE    byExecutable;           //0-²»¿ÉÁ¢¼´»Ø´«£¬1-¿ÉÁ¢¼´Ö´ÐÐ»Ø´«
    BYTE    byUnexecutableReason;   //²»¿ÉÁ¢¼´»Ø´«Ô­Òò, 0-ÐèÒªÅÅ¶Ó£¬1-±àÂëÆ÷ÎÞÁ¬½Ó£¬2-Á÷ID²»´æÔÚ£¬3-CVRÒì³££¬4-ÎÞÊäÈëÊÓÆµ, 5-±àÂëÆ÷ÓÃ»§Ãû»òÃÜÂë´í, 6-Ç°¶ËÉè±¸²»¼æÈÝ, 7-ÆäËûÔ­Òò
    BYTE    byRes[254];             //±£Áô
}NET_DVR_REC_PASSBACK_MANUAL_EXECUTABLE_RET, *LPNET_DVR_REC_PASSBACK_MANUAL_EXECUTABLE_RET;

typedef struct tagNET_DVR_STREAM_MEDIA_CFG
{
    DWORD   dwSize;
    BYTE    sUrl[MAX_URL_LEN];
    BYTE    byRes[512]; //±£Áô
}NET_DVR_STREAM_MEDIA_CFG, *LPNET_DVR_STREAM_MEDIA_CFG;

//´¬Ö»¼ì²âµ¥¸öÇøÓòÅäÖÃ
typedef struct tagNET_DVR_SHIPSDETECTION_REGION_CFG
{

    BYTE    byRuleID;
    BYTE    byEnable;     //Ê¹ÄÜ
    BYTE    bySensitivity;  //ÁéÃô¶È²ÎÊý£¬·¶Î§[1,100]
    BYTE    byFrameOverlayEnabled;//ÊÓÆµÊÇ·ñµþ¼Ó¼ì²â¿ò
    BYTE   byRes[36];
    NET_ITC_POLYGON struPolygon; //´¥·¢ÇøÓò
    NET_VCA_LINE struTriggerLine;  //´¥·¢Ïß
}NET_DVR_SHIPSDETECTION_REGION_CFG, *LPNET_DVR_SHIPSDETECTION_REGION_CFG;

typedef struct tagNET_DVR_SHIPSDETECTION_CFG
{
    DWORD dwSize;
    BYTE    byEnable;//Ê¹ÄÜ
    BYTE   byRes1[3];
    float    fLookDownUpAngle;//Éè±¸¸©Ñö½Ç¶È£¬¾«È·µ½Ð¡ÊýµãºóÒ»Î»
    float    fHorizontalHeight;//Éè±¸Ë®Æ½¸ß¶È£¬¾«È·µ½Ð¡ÊýµãºóÒ»Î»
    NET_DVR_SHIPSDETECTION_REGION_CFG struShipsDetectionRegion[MAX_SHIPSDETE_REGION_NUM];//´¬Ö»¼ì²âµ¥¸öÇøÓòÅäÖÃ
    BYTE   byRes[256];
}NET_DVR_SHIPSDETECTION_CFG, *LPNET_DVR_SHIPSDETECTION_CFG;


typedef    struct tagNET_DVR_THERMOMETRY_BASICPARAM
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE        byStreamOverlay; //ÂëÁ÷µþ¼ÓÎÂ¶ÈÐÅÏ¢£º0- ·ñ£¬1- ÊÇ
    BYTE         byPictureOverlay;//×¥Í¼µþ¼ÓÎÂ¶ÈÐÅÏ¢£º0- ·ñ£¬1- ÊÇ
    BYTE        byThermometryRange;//²âÎÂ·¶Î§: 0-Ä¬ÈÏÖµ,1-(-20~150),2-(0~550)£¨ÕâÀïÒÔÉãÊÏ¶ÈÎªµ¥Î»¼ÆËã£©
    BYTE        byThermometryUnit;//²âÎÂµ¥Î»: 0-ÉãÊÏ¶È£¨¡æ£©£¬1-»ªÊÏ¶È£¨¨H£©£¬2-¿ª¶ûÎÄ(K)¡£
    BYTE        byRes[127];
}NET_DVR_THERMOMETRY_BASICPARAM, *LPNET_DVR_THERMOMETRY_BASICPARAM;

typedef    struct tagNET_DVR_THERMOMETRY_COND
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    DWORD        dwChannel;
    WORD        wPresetNo;//0-±£Áô
    BYTE        byRes[62];
}NET_DVR_THERMOMETRY_COND, *LPNET_DVR_THERMOMETRY_COND;

typedef    struct tagNET_DVR_THERMOMETRY_PRESETINFO_PARAM
{
    BYTE    byEnabled;  //ÊÇ·ñÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    BYTE    byRuleID;//¹æÔòID 0-±íÊ¾ÎÞÐ§£¬´Ó1¿ªÊ¼ £¨listÄÚ²¿ÅÐ¶ÏÊý¾ÝÓÐÐ§ÐÔ£©
    WORD    wDistance;//¾àÀë(m)[0, 10000]
    float   fEmissivity;//·¢ÉäÂÊ(·¢ÉäÂÊ ¾«È·µ½Ð¡ÊýµãºóÁ½Î»)[0.01, 1.00](¼´£ºÎïÌåÏòÍâ·øÉäÄÜÁ¿µÄ±¾Áì)
    BYTE    byRes[3];
    BYTE    byReflectiveEnabled;//·´ÉäÎÂ¶ÈÊ¹ÄÜ£º0- ·ñ£¬1- ÊÇ
    float   fReflectiveTemperature;//·´ÉäÎÂ¶È ¾«È·µ½Ð¡ÊýºóÒ»Î»
    char    szRuleName[NAME_LEN/*32*/];//¹æÔòÃû³Æ    
    BYTE    byRes1[63];
    BYTE    byRuleCalibType;//¹æÔò±ê¶¨ÀàÐÍ 0-µã£¬1-¿ò£¬2-Ïß
    NET_VCA_POINT struPoint;//µã²âÎÂ×ø±ê£¨µ±¹æÔò±ê¶¨ÀàÐÍÎª"µã"µÄÊ±ºòÉúÐ§£©
    NET_VCA_POLYGON struRegion;//ÇøÓò¡¢Ïß£¨µ±¹æÔò±ê¶¨ÀàÐÍÎª"¿ò"»òÕß"Ïß"µÄÊ±ºòÉúÐ§£©
}NET_DVR_THERMOMETRY_PRESETINFO_PARAM, *LPNET_DVR_THERMOMETRY_PRESETINFO_PARAM;


typedef    struct tagNET_DVR_THERMOMETRY_PRESETINFO
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    WORD        wPresetNo;//0-±£Áô
    BYTE        byRes[2];
    NET_DVR_THERMOMETRY_PRESETINFO_PARAM struPresetInfo[MAX_THERMOMETRY_REGION_NUM/*40*/];
}NET_DVR_THERMOMETRY_PRESETINFO, *LPNET_DVR_THERMOMETRY_PRESETINFO;

typedef    struct tagNET_DVR_THERMOMETRY_ALARMRULE_PARAM
{
    BYTE      byEnable;
    BYTE      byRuleID;//¹æÔòID
    BYTE      byRule;//±¨¾¯ÎÂ¶È±È½Ï·½Ê½ 0-¸ßÎÂ´óÓÚ,1-¸ßÎÂÐ¡ÓÚ,2-µÍÎÂ´óÓÚ,3-µÍÎÂÐ¡ÓÚ,4-Æ½¾ùÎÂ´óÓÚ,5-Æ½¾ùÎÂÐ¡ÓÚ,6-ÎÂ²î´óÓÚ,7-ÎÂ²îÐ¡ÓÚ    
    BYTE      byRes;
    char      szRuleName[NAME_LEN];//¹æÔòÃû³Æ
    float      fAlert;//Ô¤¾¯ÎÂ¶È
    float      fAlarm;//±¨¾¯ÎÂ¶È
    float      fThreshold;//ÃÅÏÞÎÂ¶È
    BYTE      byRes1[64];
}NET_DVR_THERMOMETRY_ALARMRULE_PARAM, *LPNET_DVR_THERMOMETRY_ALARMRULE_PARAM;

typedef    struct tagNET_DVR_THERMOMETRY_ALARMRULE
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    NET_DVR_THERMOMETRY_ALARMRULE_PARAM  struThermometryAlarmRuleParam[THERMOMETRY_ALARMRULE_NUM];
    BYTE        byRes[128];
}NET_DVR_THERMOMETRY_ALARMRULE, *LPNET_DVR_THERMOMETRY_ALARMRULE;


typedef    struct tagNET_DVR_THERMOMETRY_DIFFCOMPARISON_PARAM
{
    BYTE       byEnable;
    BYTE       byRuleID;//¹æÔòID,0-±íÊ¾ÎÞÐ§£¬·¶Î§Öµ´Ó1¿ªÊ¼
    BYTE       byAlarmID1;
    BYTE       byAlarmID2;
    BYTE       byRule;//±¨¾¯ÎÂ¶È±È½Ï·½Ê½0-¸ßÎÂ´óÓÚ,1-¸ßÎÂÐ¡ÓÚ,2-µÍÎÂ´óÓÚ,3-µÍÎÂÐ¡ÓÚ,4-Æ½¾ùÎÂ´óÓÚ,5-Æ½¾ùÎÂÐ¡ÓÚ,6-ÎÂ²î´óÓÚ,7-ÎÂ²îÐ¡ÓÚ
    BYTE       byRes[3];
    float      fTemperatureDiff;//ÎÂ²îÖµ
    BYTE       byRes1[32];
}NET_DVR_THERMOMETRY_DIFFCOMPARISON_PARAM, *LPNET_DVR_THERMOMETRY_DIFFCOMPARISON_PARAM;

typedef    struct tagNET_DVR_THERMOMETRY_DIFFCOMPARISON
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    NET_DVR_THERMOMETRY_DIFFCOMPARISON_PARAM  struDiffComparison[MAX_THERMOMETRY_DIFFCOMPARISON_NUM/*8*/];
    BYTE        byRes[64];
}NET_DVR_THERMOMETRY_DIFFCOMPARISON, *LPNET_DVR_THERMOMETRY_DIFFCOMPARISON;


//ÊµÊ±ÎÂ¶È¼ì²âÌõ¼þ½á¹¹
typedef struct tagNET_DVR_REALTIME_THERMOMETRY_COND
{
    DWORD        dwSize;
    DWORD        dwChan;
    BYTE        byRes[64]; //±£Áô
}NET_DVR_REALTIME_THERMOMETRY_COND, *LPNET_DVR_REALTIME_THERMOMETRY_COND;

typedef struct tagNET_DVR_POINT_THERM_CFG
{
    float        fTemperature;//µ±Ç°ÎÂ¶È
    NET_VCA_POINT struPoint;//µã²âÎÂ×ø±ê£¨µ±¹æÔò±ê¶¨ÀàÐÍÎªµãµÄÊ±ºòÉúÐ§£©
    BYTE    byRes[120];
}NET_DVR_POINT_THERM_CFG, *LPNET_DVR_POINT_THERM_CFG;

typedef struct tagNET_DVR_LINEPOLYGON_THERM_CFG
{
    float       fMaxTemperature;//×î¸ßÎÂ
    float        fMinTemperature;//×îµÍÎÂ
    float       fAverageTemperature;//Æ½¾ùÎÂ
    float        fTemperatureDiff;//ÎÂ²î
    NET_VCA_POLYGON struRegion;//ÇøÓò£¨µ±¹æÔò±ê¶¨ÀàÐÍÎª¿ò/ÏßµÄÊ±ºòÉúÐ§£©
    BYTE    byRes[32];
}NET_DVR_LINEPOLYGON_THERM_CFG, *LPNET_DVR_LINEPOLYGON_THERM_CFG;

typedef struct tagNET_DVR_THERMOMETRY_UPLOAD
{
    DWORD       dwSize;
    DWORD       dwRelativeTime;     // Ïà¶ÔÊ±±ê
    DWORD       dwAbsTime;            // ¾ø¶ÔÊ±±ê
    char        szRuleName[NAME_LEN/*32*/];//¹æÔòÃû³Æ
    BYTE        byRuleID;//¹æÔòIDºÅ
    BYTE        byRuleCalibType;//¹æÔò±ê¶¨ÀàÐÍ 0-µã£¬1-¿ò£¬2-Ïß
    WORD        wPresetNo; //Ô¤ÖÃµãºÅ
    NET_DVR_POINT_THERM_CFG struPointThermCfg;
    NET_DVR_LINEPOLYGON_THERM_CFG struLinePolygonThermCfg;
    BYTE        byThermometryUnit;//²âÎÂµ¥Î»: 0-ÉãÊÏ¶È£¨¡æ£©£¬1-»ªÊÏ¶È£¨¨H£©£¬2-¿ª¶ûÎÄ(K)
    BYTE        byDataType;//Êý¾Ý×´Ì¬ÀàÐÍ:0-¼ì²âÖÐ£¬1-¿ªÊ¼£¬2-½áÊø
    BYTE        byRes[126];
}NET_DVR_THERMOMETRY_UPLOAD, *LPNET_DVR_THERMOMETRY_UPLOAD;

//ÎÂ¶È±¨¾¯£¨¼ì²âÎÂ¶ÈºÍÅäÖÃÎÂ¶È±È½Ï±¨¾¯£©
typedef struct tagNET_DVR_THERMOMETRY_ALARM
{
    DWORD   dwSize;
    DWORD   dwChannel;//Í¨µÀºÅ
    BYTE    byRuleID;//¹æÔòID
    BYTE    byThermometryUnit;//²âÎÂµ¥Î»: 0-ÉãÊÏ¶È£¨¡æ£©£¬1-»ªÊÏ¶È£¨¨H£©£¬2-¿ª¶ûÎÄ(K)
    WORD    wPresetNo; //Ô¤ÖÃµãºÅ
    NET_PTZ_INFO  struPtzInfo;//ptz×ø±êÐÅÏ¢
    BYTE    byAlarmLevel;//0-Ô¤¾¯ 1-±¨¾¯
    BYTE    byAlarmType;/*±¨¾¯ÀàÐÍ 0-×î¸ßÎÂ¶È 1-×îµÍÎÂ¶È 2-Æ½¾ùÎÂ¶È 3-ÎÂ²î*/
    BYTE    byAlarmRule;//0-´óÓÚ£¬1-Ð¡ÓÚ
    BYTE    byRuleCalibType;//¹æÔò±ê¶¨ÀàÐÍ 0-µã£¬1-¿ò£¬2Ïß
    NET_VCA_POINT struPoint;//µã²âÎÂ×ø±ê£¨µ±¹æÔò±ê¶¨ÀàÐÍÎªµãµÄÊ±ºòÉúÐ§£©
    NET_VCA_POLYGON struRegion;//ÇøÓò£¨µ±¹æÔò±ê¶¨ÀàÐÍÎª¿òµÄÊ±ºòÉúÐ§£©
    float   fRuleTemperature;/*ÅäÖÃ¹æÔòÎÂ¶È,¾«È·µ½Ð¡ÊýµãºóÒ»Î»(-40-1000),£¨¸¡µãÊý+100£© */
    float   fCurrTemperature;/*µ±Ç°ÎÂ¶È,¾«È·µ½Ð¡ÊýµãºóÒ»Î»(-40-1000),£¨¸¡µãÊý+100£© */
    DWORD   dwPicLen;//¿É¼û¹âÍ¼Æ¬³¤¶È
    DWORD   dwThermalPicLen;//ÈÈ³ÉÏñÍ¼Æ¬³¤¶È
    DWORD   dwThermalInfoLen;//ÈÈ³ÉÏñ¸½¼ÓÐÅÏ¢³¤¶È
    char*   pPicBuff; ///¿É¼û¹âÍ¼Æ¬Ö¸Õë
    char*   pThermalPicBuff;// ÈÈ³ÉÏñÍ¼Æ¬Ö¸Õë
    char*   pThermalInfoBuff; //ÈÈ³ÉÏñ¸½¼ÓÐÅÏ¢Ö¸Õë
    NET_VCA_POINT struHighestPoint;//Ïß¡¢¿ò²âÎÂ×î¸ßÎÂ¶ÈÎ»ÖÃ×ø±ê£¨µ±¹æÔò±ê¶¨ÀàÐÍÎªÏß¡¢¿òµÄÊ±ºòÉúÐ§£©
    BYTE    byRes[60];
}NET_DVR_THERMOMETRY_ALARM, *LPNET_DVR_THERMOMETRY_ALARM;


//ÎÂ²î±¨¾¯
typedef struct tagNET_DVR_THERMOMETRY_DIFF_ALARM
{
    DWORD   dwSize;
    DWORD   dwChannel;//Í¨µÀºÅ
    BYTE    byAlarmID1;//¹æÔòAlarmID1
    BYTE    byAlarmID2;//¹æÔòAlarmID2
    WORD    wPresetNo; //Ô¤ÖÃµãºÅ
    BYTE    byAlarmLevel;//0-Ô¤¾¯ 1-±¨¾¯
    BYTE    byAlarmType;/*±¨¾¯ÀàÐÍ 0-×î¸ßÎÂ¶È 1-×îµÍÎÂ¶È 2-Æ½¾ùÎÂ¶È*/
    BYTE    byAlarmRule;//0-´óÓÚ£¬1-Ð¡ÓÚ
    BYTE    byRuleCalibType;//¹æÔò±ê¶¨ÀàÐÍ 0-µã£¬1-¿ò£¬2Ïß
    NET_VCA_POINT struPoint[2];//µã²âÎÂ×ø±ê£¨µ±¹æÔò±ê¶¨ÀàÐÍÎªµãµÄÊ±ºòÉúÐ§£©Êý×éÏÂ±ê0´ú±í×ÅAlarmID1£¬Êý×éÏÂ±ê1´ú±í×ÅAlarmID2.
    NET_VCA_POLYGON struRegion[2];//ÇøÓò£¨µ±¹æÔò±ê¶¨ÀàÐÍÎª¿òµÄÊ±ºòÉúÐ§£©Êý×éÏÂ±ê0´ú±í×ÅAlarmID1£¬Êý×éÏÂ±ê1´ú±í×ÅAlarmID2.
    float   fRuleTemperatureDiff;/*ÅäÖÃ¹æÔòÎÂ²î,¾«È·µ½Ð¡ÊýµãºóÒ»Î»(-40-1000),£¨¸¡µãÊý+100£©*/
    float   fCurTemperatureDiff;/*µ±Ç°ÎÂ²î,¾«È·µ½Ð¡ÊýµãºóÒ»Î»(-40-1000),£¨¸¡µãÊý+100£© */
    NET_PTZ_INFO  struPtzInfo;//ptz×ø±êÐÅÏ¢
    DWORD   dwPicLen;//¿É¼û¹âÍ¼Æ¬³¤¶È
    DWORD   dwThermalPicLen;//ÈÈ³ÉÏñÍ¼Æ¬³¤¶È
    DWORD   dwThermalInfoLen;//ÈÈ³ÉÏñ¸½¼ÓÐÅÏ¢³¤¶È
    char*   pPicBuff; ///¿É¼û¹âÍ¼Æ¬Ö¸Õë
    char*   pThermalPicBuff;// ÈÈ³ÉÏñÍ¼Æ¬Ö¸Õë
    char*   pThermalInfoBuff; //ÈÈ³ÉÏñ¸½¼ÓÐÅÏ¢Ö¸Õë
    BYTE    byThermometryUnit;//²âÎÂµ¥Î»: 0-ÉãÊÏ¶È£¨¡æ£©£¬1-»ªÊÏ¶È£¨¨H£©£¬2-¿ª¶ûÎÄ(K)
    BYTE    byRes[63];
}NET_DVR_THERMOMETRY_DIFF_ALARM, *LPNET_DVR_THERMOMETRY_DIFF_ALARM;

typedef  struct  //Ìõ¼þ½á¹¹
{
    DWORD   dwSize;
    DWORD  dwChannel;//Í¨µÀºÅ£¨Ç°¶ËÄ¬ÈÏÊÇ1£©
    BYTE   byRes[128];
}NET_DVR_SHIPSCOUNT_COND, *LPNET_DVR_SHIPSCOUNT_COND;


//»ñÈ¡´¬Ö»¼ÆÊýÐÅÏ¢½á¹¹
typedef struct tagNET_DVR_SHIPSCOUNT_CFG
{
    DWORD dwSize;
    DWORD dwUpShipsCount; //ÉÏÐÐ´¬Ö»Êý
    DWORD dwDownShipsCount; //ÏÂÐÐ´¬Ö»Êý
    DWORD dwLeftShipsCount; //×óÐÐ´¬Ö»Êý
    DWORD dwRightShipsCount; //ÓÒÐÐ´¬Ö»Êý
    DWORD dwTotalCount;//´¬Ö»×Ü¼ÆÊý
    DWORD dwRelativeTime; //Éè±¸²à¼ÆÊý¿ªÊ¼¼ÆÊýµÄÏà¶ÔÊ±±ê
    DWORD dwAbsTime; //Éè±¸²à¼ÆÊý¿ªÊ¼¼ÆÊýµÄ¾ø¶ÔÊ±±ê
    BYTE   byDataType;//Êý¾Ý×´Ì¬ÀàÐÍ:0-¼ì²âÖÐ£¬1-¿ªÊ¼£¬2-½áÊø
    BYTE   byRes[255];
}NET_DVR_SHIPSCOUNT_CFG, *LPNET_DVR_SHIPSCOUNT_CFG;

//´¬Ö»ÐÅÏ¢
typedef struct tagNET_DVR_SHIPSINFO
{
    float     fShipsLength; //´¬Ö»³¤¶È£»1~1000.0m£¬¾«È·µ½Ð¡ÊýµãºóÒ»Î»
    float     fShipsHeight; //´¬Ö»¸ß¶È£»1~1000.0m£¬¾«È·µ½Ð¡ÊýµãºóÒ»Î»
    float     fShipsWidth;  //´¬Ö»¿í¶È£»1~1000.0m£¬¾«È·µ½Ð¡ÊýµãºóÒ»Î»
    float     fShipsSpeed;  //´¬Ö»ËÙ¶È£»1~1000.0m/s£¬¾«È·µ½Ð¡ÊýµãºóÒ»Î»
    BYTE      byShipsDirection;//´¬Ö»·½Ïò£»0~up,1~down,2~left,3~right
    BYTE      byShipsDetState;//´¬Ö»¼ì²â×´Ì¬£»0~Õý¿çÔ½¼ì²âÏß£¬1~´¬Í·¼ì²â£¬2~´¬Î²¼ì²â
    BYTE      byRes[62];
    NET_VCA_POLYGON  struShipsRect; //´¬Ö»ÇøÓò£¬¹éÒ»»¯Öµ£¬Ïà¶ÔÓÚ´óÍ¼£¨¿É¼û¹âÍ¼¡¢ÈÈ³ÉÏñÍ¼)µÄ·Ö±æÂÊ
} NET_DVR_SHIPSINFO, *LPNET_DVR_SHIPSINFO;

//´¬Ö»¼ì²â±¨¾¯ÉÏ´«
typedef struct tagNET_DVR_SHIPSDETECTION_ALARM
{
    DWORD   dwSize;
    NET_VCA_DEV_INFO  struDevInfo;   //Éè±¸ÐÅÏ¢
    DWORD   dwRelativeTime; //Ïà¶ÔÊ±±ê
    DWORD   dwAbsTime; //¾ø¶ÔÊ±±ê
    BYTE    byShipsNum; //´¬Ö»Êý£»(Õý¿çÔ½¼ì²âÏßµÄ´¬Ö»Êý)
    BYTE    byShipsNumHead;//´¬Ö»Êý£»(´¬Í·¼ì²â´¬Ö»Êý)
    BYTE    byShipsNumEnd; //´¬Ö»Êý£»(´¬Î²¼ì²â´¬Ö»Êý)
    BYTE    byRes1;
    NET_DVR_SHIPSINFO struShipInfo[MAX_SHIPS_NUM/*20*/];//´¬Ö»ÐÅÏ¢£»×î´óÖ§³Ö20ËÒ
    DWORD   dwPicLen;//¿É¼û¹âÍ¼Æ¬³¤¶È
    DWORD   dwThermalPicLen;//ÈÈ³ÉÏñÍ¼Æ¬³¤¶È
    BYTE*   pPicBuffer;    //¿É¼û¹âÍ¼Æ¬Êý¾ÝÖ¸Õë
    BYTE*   pThermalPicBuffer;    //ÈÈ³ÉÏñÍ¼Æ¬Êý¾ÝÖ¸Õë
    BYTE    byRes[256];
}NET_DVR_SHIPSDETECTION_ALARM, *LPNET_DVR_SHIPSDETECTION_ALARM;

typedef struct tagNET_DVR_BAREDATAOVERLAY_CFG
{
    DWORD   dwSize;
    BYTE    byEnable;//Ê¹ÄÜ
    BYTE    byIntervalTime;// ÉÏ´«µÄÊ±¼ä¼ä¸ô¿ÉÅäÖÃ£º1 2 3 4 5.µ¥Î»ÎªÃë£¬Ä¬ÈÏÎª3Ãë
    BYTE    byRes[258];
}NET_DVR_BAREDATAOVERLAY_CFG, *LPNET_DVR_BAREDATAOVERLAY_CFG;

//²âÎÂÁª¶¯Ìõ¼þ½á¹¹
typedef    struct tagNET_DVR_THERMOMETRY_TRIGGER_COND
{
	DWORD    dwSize;//½á¹¹Ìå´óÐ¡
	DWORD    dwChan;//Í¨µÀºÅ
	DWORD    dwPreset;//Ô¤ÖÃµãºÅ£¨Ä¿Ç°²»Ö§³Ö,ÎÞÐè¸³Öµ£©
	BYTE     byRes[256];
}NET_DVR_THERMOMETRY_TRIGGER_COND, *LPNET_DVR_THERMOMETRY_TRIGGER_COND;

//ÊÖ¶¯³ý±ù
typedef    struct tagNET_DVR_MANUALDEICING_CFG
{
    DWORD        dwSize;//½á¹¹Ìå´óÐ¡
    BYTE        byEnabled; //ÊÇ·ñÆôÓÃÊÖ¶¯³ý±ù £¬0~¹Ø±Õ£¬1~ÆôÓÃ
    BYTE        byRes[127];
}NET_DVR_MANUALDEICING_CFG, *LPNET_DVR_MANUALDEICING_CFG;

//Ð¡¼ä¾àLED¿ØÖÆÆ÷
typedef struct tagNET_DVR_INPUT_SOURCE_TEXT_COND
{
    DWORD    dwSize;
    DWORD    dwInputSourceNo;    //ÊäÈëÔ´±àºÅ
    DWORD    dwTextNo;        //ÎÄ±¾±àºÅ
    BYTE    byRes[32];
}NET_DVR_INPUT_SOURCE_TEXT_COND, *LPNET_DVR_INPUT_SOURCE_TEXT_COND;

typedef struct tagNET_DVR_INPUT_SOURCE_TEXT
{
    DWORD        dwSize;
    DWORD        dwTextNo;            //ÎÄ±¾±àºÅ
    BYTE        byEnable;            //ÊÇ·ñÊ¹ÄÜ£¬0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE        byFontSize;            //×ÖÌå´óÐ¡
    BYTE        byBkGroudMode;        //±³¾°Ä£Ê½£¬1-Í¸Ã÷£¬2-¸²¸Ç
    BYTE        byRes[1];
    DWORD        dwXPosition;            //×Ö·ûÏÔÊ¾Î»ÖÃµÄ×óÉÏ½ÇX×ø±ê£¬ÊäÈëÔ´Ïà¶Ô×ø±ê
    DWORD        dwYPosition;            //×Ö·ûÏÔÊ¾Î»ÖÃµÄ×óÉÏ½ÇY×ø±ê£¬ÊäÈëÔ´Ïà¶Ô×ø±ê
    NET_DVR_RGB_COLOR struForegroudColor;    //×Ö·ûÇ°¾°É«
    NET_DVR_RGB_COLOR struBackgroudColor; //×Ö·û±³¾°É«
    BYTE        byTextContent[MAX_LEN_TEXT_CONTENT];    //×Ö·ûÄÚÈÝ
    BYTE        byRes1[64];
}NET_DVR_INPUT_SOURCE_TEXT, *LPNET_DVR_INPUT_SOURCE_TEXT;

typedef struct tagNET_DVR_INPUT_SOURCE_TEXT_LIST
{
    DWORD    dwSize;
    NET_DVR_INPUT_SOURCE_TEXT struTextList[MAX_NUM_INPUT_SOURCE_TEXT]; //ÎÄ±¾ÁÐ±í
    BYTE    byRes[64];
}NET_DVR_INPUT_SOURCE_TEXT_LIST, *LPNET_DVR_INPUT_SOURCE_TEXT_LIST;

typedef struct  tagNET_DVR_INPUT_SOURCE_RESOLUTION
{
    DWORD  dwSize;
    DWORD  dwInputSignalNo;  //ÊäÈëÔ´±àºÅ
    BYTE  byEnabled;  //×Ô¶¨Òå·Ö±æÂÊÊÇ·ñÊ¹ÄÜ
    BYTE  byRes;
    WORD  wImageWidth;     //Í¼Ïñ¿í¶È
    WORD  wImageHeight;  //Í¼Ïñ¸ß¶È
    WORD  wRefreshRate;     //Ë¢ÐÂÆµÂÊ
    BYTE    byColorDepth;  //ÑÕÉ«Éî¶È£¬32Î»¡¢16Î»¡¢8Î»ÈýÖÖ¿ÉÑ¡
    BYTE    byScanType;  //É¨ÃèÀàÐÍ£¬1-ÖðÐÐÉ¨Ãè£¬2-¼ä¸ôÉ¨Ãè
    BYTE    byRes1[62];
}NET_DVR_INPUT_SOURCE_RESOLUTION, *LPNET_DVR_INPUT_SOURCE_RESOLUTION;

typedef struct tagNET_DVR_INPUT_SOURCE_RESOLUTION_LIST
{
    DWORD dwSize;
    DWORD dwInputSignalCnt; //Éè±¸ÊäÈëÐÅºÅÔ´ÊýÁ¿
    LPNET_DVR_INPUT_SOURCE_RESOLUTION lpstruBuffer; //»º³åÇøÖ¸Õë
    DWORD dwBufferSize; //»º³åÇø´óÐ¡
    BYTE  byRes[32];
}NET_DVR_INPUT_SOURCE_RESOLUTION_LIST, *LPNET_DVR_INPUT_SOURCE_RESOLUTION_LIST;

typedef struct tagNET_DVR_LED_AREA_COND
{
    DWORD dwSize;
    DWORD dwVideoWallNo; //µçÊÓÇ½±àºÅ
    DWORD dwLEDAreaNo; //LEDÇøÓò±àºÅ
    BYTE   byRes[32];
}NET_DVR_LED_AREA_COND, *LPNET_DVR_LED_AREA_COND;

typedef struct tagNET_DVR_LED_AREA_INFO
{
    DWORD dwSize;
    DWORD dwLEDAreaNo; //LEDÇøÓò±àºÅ
    NET_DVR_RECTCFG_EX struRect; //¾ØÐÎÇøÓò
    DWORD dwaOutputNo[MAX_NUM_OUTPUT_CHANNEL]; //Êä³ö¿ÚÁÐ±í
    BYTE   byRes[32];
}NET_DVR_LED_AREA_INFO, *LPNET_DVR_LED_AREA_INFO;

typedef struct tagNET_DVR_LED_AREA_INFO_LIST
{
    DWORD dwSize;
    DWORD dwLEDAreaNum; //LEDÇøÓòÊýÁ¿
    LPNET_DVR_LED_AREA_INFO lpstruBuffer; //»º³åÇøÖ¸Õë
    DWORD dwBufferSize; //»º³åÇø´óÐ¡
    BYTE   byRes[32];
}NET_DVR_LED_AREA_INFO_LIST, *LPNET_DVR_LED_AREA_INFO_LIST;

//ºô½ÐµÈ´ý²ÎÊý
typedef struct tagNET_DVR_CALL_WAITTING_CFG
{
    DWORD   dwSize;    //½á¹¹Ìå´óÐ¡
    BYTE    byEnable;    //ÊÇ·ñÆôÓÃºô½ÐµÈ´ý, 0--²»ÆôÓÃ£¬1--ÆôÓÃ
    BYTE    byRes1;
    WORD    wWaitTime;//ºô½ÐµÈ´ýÊ±¼ä£¬µ¥Î»Ãë
    BYTE    byRes[512];
}NET_DVR_CALL_WAITTING_CFG, *LPNET_DVR_CALL_WAITTING_CFG;

//¾¯µÆ²ÎÊý
typedef struct tagNET_DVR_ALARM_LAMP_CFG
{
    DWORD   dwSize;    //½á¹¹Ìå´óÐ¡
    BYTE    byEnable;    //ÊÇ·ñÆôÓÃ¾¯µÆ¶¨Ê±ÉÁË¸, 0--²»ÆôÓÃ£¬1--ÆôÓÃ
    BYTE    byRes1;
    WORD   wFlashDuration;//¾¯µÆ¶¨Ê±ÉÁË¸³ÖÐøÊ±¼ä£¬µ¥Î»Ãë
    WORD   wFlashIntervalTime;//¾¯µÆÉÁË¸¼ä¸ôÊ±¼ä£¬µ¥Î»Ãë
    BYTE    byRes[510];
}NET_DVR_ALARM_LAMP_CFG, *LPNET_DVR_ALARM_LAMP_CFG;

//ÓïÒôÌáÊ¾²ÎÊý
typedef struct tagNET_DVR_VOICE_PROMPTION_CFG
{
    DWORD   dwSize;    //½á¹¹Ìå´óÐ¡
    BYTE    byEnable;    //ÊÇ·ñÆôÓÃÓïÒôÌáÊ¾, 0--²»ÆôÓÃ£¬1--ÆôÓÃ
    BYTE    byRes1[3];
    BYTE    byCenterBusyFile[NAME_LEN];//ÖÐÐÄ·±Ã¦ÌáÊ¾ÓïÒôÎÄ¼þÃû
    BYTE    byRefusedFile[NAME_LEN];//¾Ü¾øÌáÊ¾ÓïÒôÎÄ¼þÃû
    BYTE    byHangUpFile[NAME_LEN];//¶Ô½²½áÊøÌáÊ¾ÓïÒôÎÄ¼þÃû
    BYTE    byCallWaittingFile[NAME_LEN];//ºô½ÐµÈºòÒôÎÄ¼þÃû
    BYTE    byRes[512];
}NET_DVR_VOICE_PROMPTION_CFG, *LPNET_DVR_VOICE_PROMPTION_CFG;

//½ô¼±±¨¾¯´¦Àí
typedef struct tagNET_DVR_EMERGENCE_ALARM_RSP_CTRL_CFG
{
    DWORD   dwSize;        //½á¹¹Ìå´óÐ¡
    BYTE    byCommand;    //¿ØÖÆÃüÁî£¬0--centerbusy£¬1--refuse
    BYTE    byRes[511];
}NET_DVR_EMERGENCE_ALARM_RSP_CTRL_CFG, *LPNET_DVR_EMERGENCE_ALARM_RSP_CTRL_CFG;

///////////*ÍøÂç²ÎÊýÅäÖÃ_V50/////////////
typedef struct _tagNET_DVR_ALARMHOST_NETPARAM_V50
{
    DWORD     dwSize;
    NET_DVR_IPADDR  struIP;
    WORD     wPort;
    BYTE    byAddressType;    //0 - ÎÞÒâÒå, 1 - ipv4/ipv6µØÖ·£¬2 - ÓòÃû
    BYTE    byEnable; //Ê¹ÄÜ£¬0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE    byDomainName[MAX_DOMAIN_NAME/*64*/]; //ÓòÃû£¬GPRS²ÎÊýÅäÖÃ¡¢ÍøÂç²ÎÊýÅäÖÃÊ±¸Ã×Ö¶Î¾ùÓÐÐ§
    BYTE    byReportProtocol;        //1-private 2-NAL2300
    BYTE    byDevID[ACCOUNTNUM_LEN_32/*32*/]; //Ð­ÒéÎªNAL2300Ê±ÓÐÐ§
    BYTE    byRes2[64]; //GPRSµÄÓòÃû½âÎöÊÇÔÚ¹Ì¶¨µÄ·þÎñÆ÷ÉÏ½øÐÐµÄ£¬ËùÒÔ²»ÐèÒª¸ø½âÎö·þÎñÆ÷µÄÐÅÏ¢Ô¤ÁôÒ»Ð©×Ö¶Î
} NET_DVR_ALARMHOST_NETPARAM_V50, *LPNET_DVR_ALARMHOST_NETPARAM_V50;

typedef struct _tagNET_DVR_ALARMHOST_NETCFG_V50
{
    DWORD dwSize;
    NET_DVR_ALARMHOST_NETPARAM_V50   struNetCenter[MAX_CENTERNUM];
    BYTE        byRes1[128];
} NET_DVR_ALARMHOST_NETCFG_V50, *LPNET_DVR_ALARMHOST_NETCFG_V50;
//Ä¿±ê·â×°¸ñÊ½ÀàÐÍ
typedef enum tagSTREAM_TYPE{
    STREAM_PS = 0x1,   //PSÎÄ¼þ²ã£¬Ö÷ÒªÓÃÓÚ´æ´¢£¬Ò²¿ÉÓÃÓÚ´«Êä
    STREAM_3GPP = 0x2,   //3GPPÎÄ¼þ²ã£¬ÓÃÓÚ´æ´¢
}STREAM_TYPE;
typedef enum tagNET_SDK_INIT_CFG_TYPE
{
	NET_SDK_INIT_CFG_TYPE_CHECK_MODULE_COM = 0, //Ôö¼Ó¶Ô±ØÐë¿âµÄ¼ì²é
    NET_SDK_INIT_CFG_ABILITY = 1   //sdkÖ§³ÖµÄÒµÎñµÄÄÜÁ¦¼¯
}NET_SDK_INIT_CFG_TYPE;

typedef struct tagNET_DVR_INIT_CHECK_MODULE_COM
{
    BYTE byEnable; //ÆôÓÃ±ØÐë¿â¼ì²é»úÖÆ 0-²»ÆôÓÃ£¬1-ÆôÓÃ
    BYTE byRes[255];
}NET_DVR_INIT_CHECK_MODULE_COM, *LPNET_DVR_INIT_CHECK_MODULE_COM;
//SDKÖ§³ÖµÄ×î´óÂ·ÊýÄÜÁ¦¼¯
typedef enum _INIT_CFG_MAX_NUM
{
    INIT_CFG_NUM_2048 = 2048,   // 2048Â·
    INIT_CFG_NUM_5120 = 5120,   //5120Â·
    INIT_CFG_NUM_10240 = 10240,   // 10240Â·
    INIT_CFG_NUM_15360 = 15360,   // 15360Â·
    INIT_CFG_NUM_20480 = 20480,   // 20480Â·
}INIT_CFG_MAX_NUM;

typedef struct tagNET_DVR_INIT_CFG_ABILITY
{
    INIT_CFG_MAX_NUM    enumMaxLoginUsersNum;                //×î¶àÔÊÐíµÄ×¢²áÓÃ»§¸öÊý¡£
    INIT_CFG_MAX_NUM   enumMaxAlarmNum;                      //×î´óµÄ¸æ¾¯Â·Êý
    BYTE    byRes[64];
}NET_DVR_INIT_CFG_ABILITY, *LPNET_DVR_INIT_CFG_ABILITY;
typedef struct tagNET_DVR_SDKMEMPOOL_CFG
{
    BYTE byRes[256];
}NET_DVR_SDKMEMPOOL_CFG, *LPNET_DVR_SDKMEMPOOL_CFG;


typedef struct tagNET_DVR_RES_INFO
{
    DWORD dwImageWidth; //Í¼Ïñ¿í¶È
    DWORD dwImageHeight; //Í¼Ïñ¸ß¶È
}NET_DVR_RES_INFO, *LPNET_DVR_RES_INFO;

typedef struct tagNET_DVR_VS_INPUT_CHAN_INIT
{
    DWORD dwSize;
    DWORD dwVSInputChan; //ÐéÄâÆÁÊäÈëÍ¨µÀºÅ
    DWORD dwResNums; //·Ö±æÂÊµÄ¸öÊý
    NET_DVR_RES_INFO struResList[MAX_RES_NUM_ONE_VS_INPUT_CHAN]; //·Ö±æÂÊÁÐ±í
    BYTE byRes[32];
}NET_DVR_VS_INPUT_CHAN_INIT, *LPNET_DVR_VS_INPUT_CHAN_INIT;

typedef struct tagNET_DVR_VS_INPUT_CHAN_INIT_LIST
{
    DWORD dwSize;
    NET_DVR_VS_INPUT_CHAN_INIT struChanList[MAX_VS_INPUT_CHAN_NUM]; //Í¨µÀÁÐ±í
    BYTE byRes[32];
}NET_DVR_VS_INPUT_CHAN_INIT_LIST, *LPNET_DVR_VS_INPUT_CHAN_INIT_LIST;

typedef struct  tagNET_DVR_VS_INPUT_CHAN_CFG
{
    DWORD dwSize;
    DWORD dwVSInputChan; //ÐéÄâÆÁÊäÈëÍ¨µÀºÅ
    NET_DVR_RES_INFO struResolutin; //·Ö±æÂÊ
    BYTE byDispUrl[MAX_URL_LEN]; //ÏÔÊ¾URL
    BYTE byRes[64];
}NET_DVR_VS_INPUT_CHAN_CFG, *LPNET_DVR_VS_INPUT_CHAN_CFG;

typedef struct tagNET_DVR_EDID_FILE_INFO
{
    DWORD   dwSize;
    DWORD   dwEDIDFileNo; //EDIDÎÄ¼þ±àºÅ£¬´Ó1¿ªÊ¼
    BYTE    byFileName[FILE_NAME_LEN]; //EDIDÎÄ¼þÃû³Æ
    BYTE    byRes[32];
}NET_DVR_EDID_FILE_INFO, *LPNET_DVR_EDID_FILE_INFO;

typedef struct tagNET_DVR_EDID_FILE_INFO_LIST
{
    DWORD   dwSize;
    DWORD   dwEDIDFileNum; //·µ»ØµÄNET_DVR_EDID_FILE_INFO¸öÊý
    LPNET_DVR_EDID_FILE_INFO lpstruBuffer; //»º³åÇøÖ¸Õë
    DWORD   dwBufferSize; //»º³åÇø´óÐ¡
    BYTE    byRes[32];
}NET_DVR_EDID_FILE_INFO_LIST, *LPNET_DVR_EDID_FILE_INFO_LIST;

//×Ó´°¿Ú½âÂëOSD
typedef struct tagNET_DVR_OSD_INFO
{
    BYTE byEnabled;  //ÊÇ·ñÊ¹ÄÜ£¬0-²»Ê¹ÄÜ£¬1-Ê¹ÄÜ
    BYTE byEnabledFlash;  //ÊÇ·ñÉÁË¸£¬0-²»ÉÁË¸£¬1-ÉÁË¸
    BYTE byFontSize;  //×ÖÌå´óÐ¡£¬1-´ó£¬2-ÖÐ£¬3-Ð¡
    BYTE byTransparent;  //Í¸Ã÷¶È£¬È¡Öµ·¶Î§0-100
    NET_DVR_RGB_COLOR struColor;  //×ÖÌåÑÕÉ«
    WORD wCoordinateX;  //OSD×óÉÏ½ÇX×ø±ê
    WORD wCoordinateY;  //OSD×óÉÏ½ÇY×ø±ê
    BYTE byContent[MAX_LEN_OSD_CONTENT];  //OSDÐÅÏ¢
    BYTE byRes[32];
}NET_DVR_OSD_INFO, *LPNET_DVR_OSD_INFO;

typedef struct tagNET_DVR_SUBWND_DECODE_OSD
{
    DWORD dwSize;
    DWORD dwSubWndNo;  //×Ó´°¿ÚºÅ£¨4×Ö½Ú×éºÏ·½Ê½£©
    DWORD dwOSDNums;  //¸Ã×Ó´°¿ÚÅäÖÃµÄOSDÐÅÏ¢µÄ¸öÊý
    NET_DVR_OSD_INFO struOSDList[MAX_NUM_OSD_ONE_SUBWND];  //OSDÐÅÏ¢ÁÐ±í
    BYTE byRes[32];
}NET_DVR_SUBWND_DECODE_OSD, *LPNET_DVR_SUBWND_DECODE_OSD;

typedef struct tagNET_DVR_SUBWND_DECODE_OSD_LIST
{
    DWORD dwSize;
    NET_DVR_SUBWND_DECODE_OSD struSubWndList[MAX_NUM_SPLIT_WND];  //ËùÓÐ×Ó´°¿ÚµÄ½âÂëOSD
    BYTE byRes[32];
}NET_DVR_SUBWND_DECODE_OSD_LIST, *LPNET_DVR_SUBWND_DECODE_OSD_LIST;

//ÈÈ³ÉÏñÖÇÄÜ»¥³âÅäÖÃ²ÎÊý
typedef	struct tagNET_DVR_THERMINTELL_PARAM
{
    DWORD   dwSize;//½á¹¹Ìå´óÐ¡
    BYTE    byIntellType;  //ÖÇÄÜ¹¦ÄÜ×ÊÔ´ÅäÖÃÀàÐÍ,0~²âÎÂ+ÐÐÎª·ÖÎö(Ä¬ÈÏ)£¬1~´¬Ö»¼ì²â£¬2~»ðµã¼ì²â
    BYTE    byRes[127];
}NET_DVR_THERMINTELL_PARAM, *LPNET_DVR_THERMINTELL_PARAM;


/********************************SDK½Ó¿Úº¯ÊýÉùÃ÷*********************************/
NET_DVR_API BOOL __stdcall NET_DVR_Init();
NET_DVR_API BOOL __stdcall NET_DVR_Cleanup();

//NET_DVR_SetDVRMessageµÄÀ©Õ¹
#ifdef _WIN32
NET_DVR_API BOOL __stdcall NET_DVR_SetDVRMessage(UINT nMessage,HWND hWnd);
NET_DVR_API BOOL __stdcall NET_DVR_SetExceptionCallBack_V30(UINT nMessage, HWND hWnd, void (CALLBACK* fExceptionCallBack)(DWORD dwType, LONG lUserID, LONG lHandle, void *pUser), void *pUser);
#elif defined(__linux__) || defined(__APPLE__)
NET_DVR_API BOOL __stdcall NET_DVR_SetExceptionCallBack_V30(UINT reserved1, void* reserved2, void (CALLBACK* fExceptionCallBack)(DWORD dwType, LONG lUserID, LONG lHandle, void *pUser), void *pUser);
/*Linux×¨ÓÐ */
#if defined(__linux__)
NET_DVR_API BOOL NET_DVR_DrawAreaInit(INITINFO InitInfo, DWORD iUseSDL = 1);
NET_DVR_API BOOL NET_DVR_DrawAreaRelease();
#endif
#endif

NET_DVR_API BOOL __stdcall NET_DVR_SetDVRMessCallBack(BOOL (CALLBACK *fMessCallBack)(LONG lCommand,char *sDVRIP,char *pBuf,DWORD dwBufLen));
NET_DVR_API BOOL __stdcall NET_DVR_SetDVRMessCallBack_EX(BOOL (CALLBACK *fMessCallBack_EX)(LONG lCommand,LONG lUserID,char *pBuf,DWORD dwBufLen));
NET_DVR_API BOOL __stdcall NET_DVR_SetDVRMessCallBack_NEW(BOOL (CALLBACK *fMessCallBack_NEW)(LONG lCommand,char *sDVRIP,char *pBuf,DWORD dwBufLen, WORD dwLinkDVRPort));
NET_DVR_API BOOL __stdcall NET_DVR_SetDVRMessageCallBack(BOOL (CALLBACK *fMessageCallBack)(LONG lCommand,char *sDVRIP,char *pBuf,DWORD dwBufLen, DWORD dwUser), DWORD dwUser);
typedef void (CALLBACK *MSGCallBack)(LONG lCommand, NET_DVR_ALARMER *pAlarmer, char *pAlarmInfo, DWORD dwBufLen, void* pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetDVRMessageCallBack_V30(MSGCallBack fMessageCallBack, void* pUser);
typedef BOOL (CALLBACK *MSGCallBack_V31)(LONG lCommand, NET_DVR_ALARMER *pAlarmer, char *pAlarmInfo, DWORD dwBufLen, void* pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetDVRMessageCallBack_V31(MSGCallBack_V31 fMessageCallBack, void* pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetDVRMessageCallBack_V50(int iIndex, MSGCallBack fMessageCallBack, void* pUser);

NET_DVR_API BOOL __stdcall NET_DVR_SetConnectTime(DWORD dwWaitTime = 3000, DWORD dwTryTimes = 3);
NET_DVR_API BOOL __stdcall NET_DVR_SetReconnect(DWORD dwInterval = 30000, BOOL bEnableRecon = TRUE);
NET_DVR_API DWORD __stdcall NET_DVR_GetSDKVersion();
NET_DVR_API DWORD __stdcall NET_DVR_GetSDKBuildVersion();
NET_DVR_API int __stdcall NET_DVR_IsSupport();
NET_DVR_API BOOL __stdcall NET_DVR_StartListen(char *sLocalIP,WORD wLocalPort);
NET_DVR_API BOOL __stdcall NET_DVR_StopListen();

NET_DVR_API LONG __stdcall NET_DVR_StartListen_V30(char *sLocalIP, WORD wLocalPort, MSGCallBack DataCallback, void* pUserData = NULL);
NET_DVR_API BOOL __stdcall NET_DVR_StopListen_V30(LONG lListenHandle);
NET_DVR_API LONG __stdcall NET_DVR_Login(char *sDVRIP,WORD wDVRPort,char *sUserName,char *sPassword,LPNET_DVR_DEVICEINFO lpDeviceInfo);
NET_DVR_API LONG __stdcall NET_DVR_Login_V30(char *sDVRIP, WORD wDVRPort, char *sUserName, char *sPassword, LPNET_DVR_DEVICEINFO_V30 lpDeviceInfo);

NET_DVR_API LONG __stdcall NET_DVR_Login_V40(LPNET_DVR_USER_LOGIN_INFO pLoginInfo,LPNET_DVR_DEVICEINFO_V40 lpDeviceInfo);
NET_DVR_API BOOL __stdcall NET_DVR_Login_Check(char *sDVRIP, WORD wDVRPort, char *sUserName, char *sPassword, LPNET_DVR_DEVICEINFO_V30 lpDeviceInfo);
NET_DVR_API BOOL __stdcall NET_DVR_Logout(LONG lUserID);
NET_DVR_API BOOL __stdcall NET_DVR_Logout_V30(LONG lUserID);
NET_DVR_API DWORD __stdcall NET_DVR_GetLastError();
NET_DVR_API char* __stdcall NET_DVR_GetErrorMsg(LONG *pErrorNo = NULL);
NET_DVR_API BOOL __stdcall NET_DVR_SetShowMode(DWORD dwShowType,COLORREF colorKey);
NET_DVR_API BOOL __stdcall NET_DVR_GetDVRIPByResolveSvr(char *sServerIP, WORD wServerPort, BYTE *sDVRName,WORD wDVRNameLen,BYTE *sDVRSerialNumber,WORD wDVRSerialLen,char* sGetIP);
NET_DVR_API BOOL  __stdcall NET_DVR_GetDVRIPByResolveSvr_EX(char *sServerIP, WORD wServerPort, BYTE *sDVRName, WORD wDVRNameLen, BYTE *sDVRSerialNumber, WORD wDVRSerialLen, char* sGetIP, DWORD *dwPort);

//Ô¤ÀÀÏà¹Ø½Ó¿Ú
NET_DVR_API LONG __stdcall NET_DVR_PlayDirect(char *sDVRIP, char *sUserName, char *sPassword, \
                                              LPNET_DVR_CLIENTINFO lpClientInfo, void(CALLBACK *fRealDataCallBack_V30) (LONG lRealHandle, DWORD dwDataType, BYTE *pBuffer, DWORD dwBufSize, void* pUser) = NULL, void* pUser = NULL, BOOL bBlocked = FALSE);
NET_DVR_API LONG __stdcall NET_DVR_RealPlay(LONG lUserID,LPNET_DVR_CLIENTINFO lpClientInfo);
NET_DVR_API LONG __stdcall NET_DVR_RealPlay_V30(LONG lUserID, LPNET_DVR_CLIENTINFO lpClientInfo, void(CALLBACK *fRealDataCallBack_V30) (LONG lRealHandle, DWORD dwDataType, BYTE *pBuffer, DWORD dwBufSize, void* pUser) = NULL, void* pUser = NULL, BOOL bBlocked = FALSE);
NET_DVR_API BOOL __stdcall NET_DVR_StopRealPlay(LONG lRealHandle);
NET_DVR_API BOOL __stdcall NET_DVR_StopPlayDirect(LONG lRealHandle);
NET_DVR_API BOOL __stdcall NET_DVR_RigisterDrawFun(LONG lRealHandle,void (CALLBACK* fDrawFun)(LONG lRealHandle,HDC hDc,DWORD dwUser),DWORD dwUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetPlayerBufNumber(LONG lRealHandle,DWORD dwBufNum);
NET_DVR_API BOOL __stdcall NET_DVR_ThrowBFrame(LONG lRealHandle,DWORD dwNum);
NET_DVR_API BOOL __stdcall NET_DVR_SetAudioMode(DWORD dwMode);
NET_DVR_API BOOL __stdcall NET_DVR_OpenSound(LONG lRealHandle);
NET_DVR_API BOOL __stdcall NET_DVR_CloseSound();
NET_DVR_API BOOL __stdcall NET_DVR_OpenSoundShare(LONG lRealHandle);
NET_DVR_API BOOL __stdcall NET_DVR_CloseSoundShare(LONG lRealHandle);
NET_DVR_API BOOL __stdcall NET_DVR_Volume(LONG lRealHandle,WORD wVolume);
NET_DVR_API BOOL __stdcall NET_DVR_SaveRealData(LONG lRealHandle,char *sFileName);
NET_DVR_API BOOL __stdcall NET_DVR_StopSaveRealData(LONG lRealHandle);
NET_DVR_API BOOL __stdcall NET_DVR_SetRealDataCallBack(LONG lRealHandle,void(CALLBACK *fRealDataCallBack) (LONG lRealHandle, DWORD dwDataType, BYTE *pBuffer,DWORD dwBufSize,DWORD dwUser),DWORD dwUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetStandardDataCallBack(LONG lRealHandle,void(CALLBACK *fStdDataCallBack) (LONG lRealHandle, DWORD dwDataType, BYTE *pBuffer,DWORD dwBufSize,DWORD dwUser),DWORD dwUser);
NET_DVR_API BOOL __stdcall NET_DVR_CapturePicture(LONG lRealHandle,char *sPicFileName);//bmp
NET_DVR_API BOOL __stdcall NET_DVR_SetCapturePictureMode(DWORD dwCaptureMode);

//¶¯Ì¬Éú³ÉIÖ¡
NET_DVR_API BOOL __stdcall NET_DVR_MakeKeyFrame(LONG lUserID, LONG lChannel);//Ö÷ÂëÁ÷
NET_DVR_API BOOL __stdcall NET_DVR_MakeKeyFrameSub(LONG lUserID, LONG lChannel);//×ÓÂëÁ÷

//ÔÆÌ¨¿ØÖÆÏà¹Ø½Ó¿Ú
NET_DVR_API BOOL __stdcall NET_DVR_PTZControl(LONG lRealHandle,DWORD dwPTZCommand,DWORD dwStop);
NET_DVR_API BOOL __stdcall NET_DVR_PTZControl_Other(LONG lUserID,LONG lChannel,DWORD dwPTZCommand,DWORD dwStop);
NET_DVR_API BOOL __stdcall NET_DVR_TransPTZ(LONG lRealHandle,char *pPTZCodeBuf,DWORD dwBufSize);
NET_DVR_API BOOL __stdcall NET_DVR_TransPTZ_Other(LONG lUserID,LONG lChannel,char *pPTZCodeBuf,DWORD dwBufSize);
NET_DVR_API BOOL __stdcall NET_DVR_PTZPreset(LONG lRealHandle,DWORD dwPTZPresetCmd,DWORD dwPresetIndex);
NET_DVR_API BOOL __stdcall NET_DVR_PTZPreset_Other(LONG lUserID,LONG lChannel,DWORD dwPTZPresetCmd,DWORD dwPresetIndex);
NET_DVR_API BOOL __stdcall NET_DVR_TransPTZ_EX(LONG lRealHandle,char *pPTZCodeBuf,DWORD dwBufSize);
NET_DVR_API BOOL __stdcall NET_DVR_PTZControl_EX(LONG lRealHandle,DWORD dwPTZCommand,DWORD dwStop);
NET_DVR_API BOOL __stdcall NET_DVR_PTZPreset_EX(LONG lRealHandle,DWORD dwPTZPresetCmd,DWORD dwPresetIndex);
NET_DVR_API BOOL __stdcall NET_DVR_PTZCruise(LONG lRealHandle,DWORD dwPTZCruiseCmd,BYTE byCruiseRoute, BYTE byCruisePoint, WORD wInput);
NET_DVR_API BOOL __stdcall NET_DVR_PTZCruise_Other(LONG lUserID,LONG lChannel,DWORD dwPTZCruiseCmd,BYTE byCruiseRoute, BYTE byCruisePoint, WORD wInput);
NET_DVR_API BOOL __stdcall NET_DVR_PTZCruise_EX(LONG lRealHandle,DWORD dwPTZCruiseCmd,BYTE byCruiseRoute, BYTE byCruisePoint, WORD wInput);
NET_DVR_API BOOL __stdcall NET_DVR_PTZTrack(LONG lRealHandle, DWORD dwPTZTrackCmd);
NET_DVR_API BOOL __stdcall NET_DVR_PTZTrack_Other(LONG lUserID, LONG lChannel, DWORD dwPTZTrackCmd);
NET_DVR_API BOOL __stdcall NET_DVR_PTZTrack_EX(LONG lRealHandle, DWORD dwPTZTrackCmd);
NET_DVR_API BOOL __stdcall NET_DVR_PTZControlWithSpeed(LONG lRealHandle, DWORD dwPTZCommand, DWORD dwStop, DWORD dwSpeed);
NET_DVR_API BOOL __stdcall NET_DVR_PTZControlWithSpeed_Other(LONG lUserID, LONG lChannel, DWORD dwPTZCommand, DWORD dwStop, DWORD dwSpeed);
NET_DVR_API BOOL __stdcall NET_DVR_PTZControlWithSpeed_EX(LONG lRealHandle, DWORD dwPTZCommand, DWORD dwStop, DWORD dwSpeed);
NET_DVR_API BOOL __stdcall NET_DVR_GetPTZCruise(LONG lUserID,LONG lChannel,LONG lCruiseRoute, LPNET_DVR_CRUISE_RET lpCruiseRet);


//ÎÄ¼þ²éÕÒÓë»Ø·Å
NET_DVR_API LONG __stdcall NET_DVR_FindFile(LONG lUserID,LONG lChannel,DWORD dwFileType, LPNET_DVR_TIME lpStartTime, LPNET_DVR_TIME lpStopTime);
NET_DVR_API LONG __stdcall NET_DVR_FindNextFile(LONG lFindHandle,LPNET_DVR_FIND_DATA lpFindData);
NET_DVR_API BOOL __stdcall NET_DVR_FindClose(LONG lFindHandle);
NET_DVR_API LONG __stdcall NET_DVR_FindNextFile_V30(LONG lFindHandle, LPNET_DVR_FINDDATA_V30 lpFindData);
NET_DVR_API LONG __stdcall NET_DVR_FindNextFile_V40(LONG lFindHandle, LPNET_DVR_FINDDATA_V40 lpFindData);
NET_DVR_API LONG __stdcall NET_DVR_FindFile_V30(LONG lUserID, LPNET_DVR_FILECOND pFindCond);
NET_DVR_API BOOL __stdcall NET_DVR_FindClose_V30(LONG lFindHandle);

NET_DVR_API BOOL __stdcall NET_DVR_LockFileByName(LONG lUserID, char *sLockFileName);
NET_DVR_API BOOL __stdcall NET_DVR_UnlockFileByName(LONG lUserID, char *sUnlockFileName);
NET_DVR_API BOOL __stdcall NET_DVR_LockFileByNameV40(LONG lUserID, BOOL bLock, const NET_DVR_LOCK_FILE_BY_NAME_PARA *lpLockFilePara);
NET_DVR_API LONG __stdcall NET_DVR_PlayBackByName(LONG lUserID,char *sPlayBackFileName, HWND hWnd);
NET_DVR_API LONG __stdcall NET_DVR_PlayBackByTime(LONG lUserID,LONG lChannel, LPNET_DVR_TIME lpStartTime, LPNET_DVR_TIME lpStopTime, HWND hWnd);
NET_DVR_API LONG __stdcall NET_DVR_PlayBackReverseByName(LONG lUserID, char *sPlayBackFileName, HWND hWnd);

NET_DVR_API BOOL __stdcall NET_DVR_PlayBackControl(LONG lPlayHandle,DWORD dwControlCode,DWORD dwInValue,DWORD *LPOutValue);
NET_DVR_API BOOL __stdcall NET_DVR_StopPlayBack(LONG lPlayHandle);
NET_DVR_API BOOL __stdcall NET_DVR_SetPlayDataCallBack(LONG lPlayHandle,void(CALLBACK *fPlayDataCallBack) (LONG lPlayHandle, DWORD dwDataType, BYTE *pBuffer,DWORD dwBufSize,DWORD dwUser),DWORD dwUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetPlayBackESCallBack(LONG lPlayHandle, void (CALLBACK *fPlayESCallBack)(LONG lPlayHandle, NET_DVR_PACKET_INFO_EX *struPackInfo,  void* pUser), void* pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetPlayDataCallBack_V40(LONG lPlayHandle,void(CALLBACK *fPlayDataCallBack_V40) (LONG lPlayHandle, DWORD dwDataType, BYTE *pBuffer,DWORD dwBufSize,void *pUser),void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_PlayBackSaveData(LONG lPlayHandle,char *sFileName);
NET_DVR_API BOOL __stdcall NET_DVR_StopPlayBackSave(LONG lPlayHandle);
NET_DVR_API BOOL __stdcall NET_DVR_GetPlayBackOsdTime(LONG lPlayHandle, LPNET_DVR_TIME lpOsdTime);
NET_DVR_API BOOL __stdcall NET_DVR_PlayBackCaptureFile(LONG lPlayHandle,char *sFileName);
NET_DVR_API LONG __stdcall NET_DVR_GetFileByName(LONG lUserID,char *sDVRFileName,char *sSavedFileName);
NET_DVR_API LONG __stdcall NET_DVR_GetFileByTime(LONG lUserID,LONG lChannel, LPNET_DVR_TIME lpStartTime, LPNET_DVR_TIME lpStopTime, char *sSavedFileName);
NET_DVR_API BOOL __stdcall NET_DVR_StopGetFile(LONG lFileHandle);
NET_DVR_API int __stdcall NET_DVR_GetDownloadPos(LONG lFileHandle);
NET_DVR_API int    __stdcall NET_DVR_GetPlayBackPos(LONG lPlayHandle);

//Éý¼¶
NET_DVR_API LONG __stdcall NET_DVR_AdapterUpgrade(LONG lUserID, char *sFileName);
NET_DVR_API LONG __stdcall NET_DVR_Upgrade(LONG lUserID, char *sFileName);
NET_DVR_API LONG __stdcall NET_DVR_VcalibUpgrade(LONG lUserID, LONG lChannel, char const *sFileName);
NET_DVR_API int __stdcall NET_DVR_GetUpgradeState(LONG lUpgradeHandle);
NET_DVR_API int __stdcall NET_DVR_GetUpgradeProgress(LONG lUpgradeHandle);
NET_DVR_API BOOL __stdcall NET_DVR_CloseUpgradeHandle(LONG lUpgradeHandle);
NET_DVR_API BOOL __stdcall NET_DVR_SetNetworkEnvironment(DWORD dwEnvironmentLevel);
//Ô¶³Ì¸ñÊ½»¯Ó²ÅÌ
NET_DVR_API LONG __stdcall NET_DVR_FormatDisk(LONG lUserID,LONG lDiskNumber);
NET_DVR_API BOOL __stdcall NET_DVR_GetFormatProgress(LONG lFormatHandle, LONG *pCurrentFormatDisk,LONG *pCurrentDiskPos,LONG *pFormatStatic);
NET_DVR_API BOOL __stdcall NET_DVR_CloseFormatHandle(LONG lFormatHandle);
//±¨¾¯
NET_DVR_API LONG __stdcall NET_DVR_SetupAlarmChan(LONG lUserID);
NET_DVR_API BOOL __stdcall NET_DVR_CloseAlarmChan(LONG lAlarmHandle);
NET_DVR_API LONG __stdcall NET_DVR_SetupAlarmChan_V30(LONG lUserID);
NET_DVR_API BOOL __stdcall NET_DVR_CloseAlarmChan_V30(LONG lAlarmHandle);
//ÓïÒô¶Ô½²
NET_DVR_API LONG __stdcall NET_DVR_StartVoiceCom(LONG lUserID, void(CALLBACK *fVoiceDataCallBack)(LONG lVoiceComHandle, char *pRecvDataBuffer, DWORD dwBufSize, BYTE byAudioFlag, DWORD dwUser), DWORD dwUser);
NET_DVR_API LONG __stdcall NET_DVR_StartVoiceCom_V30(LONG lUserID, DWORD dwVoiceChan, BOOL bNeedCBNoEncData, void(CALLBACK *fVoiceDataCallBack)(LONG lVoiceComHandle, char *pRecvDataBuffer, DWORD dwBufSize, BYTE byAudioFlag, void* pUser), void* pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetVoiceComClientVolume(LONG lVoiceComHandle, WORD wVolume);
NET_DVR_API BOOL __stdcall NET_DVR_StopVoiceCom(LONG lVoiceComHandle);
//ÓïÒô×ª·¢
NET_DVR_API LONG __stdcall NET_DVR_StartVoiceCom_MR(LONG lUserID, void(CALLBACK *fVoiceDataCallBack)(LONG lVoiceComHandle, char *pRecvDataBuffer, DWORD dwBufSize, BYTE byAudioFlag, DWORD dwUser), DWORD dwUser);
NET_DVR_API LONG __stdcall NET_DVR_StartVoiceCom_MR_V30(LONG lUserID, DWORD dwVoiceChan, void(CALLBACK *fVoiceDataCallBack)(LONG lVoiceComHandle, char *pRecvDataBuffer, DWORD dwBufSize, BYTE byAudioFlag, void* pUser), void* pUser);
NET_DVR_API BOOL __stdcall NET_DVR_VoiceComSendData(LONG lVoiceComHandle, char *pSendBuf, DWORD dwBufSize);
NET_DVR_API BOOL __stdcall NET_DVR_GetCurrentAudioCompress(LONG lUserID, LPNET_DVR_COMPRESSION_AUDIO lpCompressAudio);
NET_DVR_API BOOL __stdcall NET_DVR_GetCurrentAudioCompress_V50(LONG lUserID, LPNET_DVR_AUDIO_CHANNEL lpAudioChannel, LPNET_DVR_COMPRESSION_AUDIO lpCompressAudio);
//ÓïÒô¹ã²¥
NET_DVR_API BOOL __stdcall NET_DVR_ClientAudioStart();
NET_DVR_API BOOL __stdcall NET_DVR_ClientAudioStart_V30(void(CALLBACK *fVoiceDataCallBack)(char *pRecvDataBuffer, DWORD dwBufSize, void * pUser), void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_ClientAudioStop();
NET_DVR_API BOOL __stdcall NET_DVR_AddDVR(LONG lUserID);
NET_DVR_API LONG __stdcall NET_DVR_AddDVR_V30(LONG lUserID, DWORD dwVoiceChan);
NET_DVR_API BOOL __stdcall NET_DVR_DelDVR(LONG lUserID);
NET_DVR_API BOOL __stdcall NET_DVR_DelDVR_V30(LONG lVoiceHandle);
//Í¸Ã÷Í¨µÀÉèÖÃ
NET_DVR_API LONG __stdcall NET_DVR_SerialStart(LONG lUserID,LONG lSerialPort,void(CALLBACK *fSerialDataCallBack)(LONG lSerialHandle,char *pRecvDataBuffer,DWORD dwBufSize,DWORD dwUser),DWORD dwUser);
//485×÷ÎªÍ¸Ã÷Í¨µÀÊ±£¬ÐèÒªÖ¸Ã÷Í¨µÀºÅ£¬ÒòÎª²»Í¬Í¨µÀºÅ485µÄÉèÖÃ¿ÉÒÔ²»Í¬(±ÈÈç²¨ÌØÂÊ)
NET_DVR_API LONG __stdcall NET_DVR_SerialStart_V40(LONG lUserID,void* lpInBuffer, LONG dwInBufferSize, void(CALLBACK *fSerialDataCallBack)(LONG lSerialHandle, LONG lCHannel, char *pRecvDataBuffer, DWORD dwBufSize, void* pUser), void* pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SerialSend(LONG lSerialHandle, LONG lChannel, char *pSendBuf,DWORD dwBufSize);
NET_DVR_API BOOL __stdcall NET_DVR_SerialStop(LONG lSerialHandle);
NET_DVR_API BOOL __stdcall NET_DVR_SendTo232Port(LONG lUserID, char *pSendBuf, DWORD dwBufSize);
NET_DVR_API BOOL __stdcall NET_DVR_SendToSerialPort(LONG lUserID, DWORD dwSerialPort, DWORD dwSerialIndex, char *pSendBuf, DWORD dwBufSize);

//½âÂë nBitrate = 16000
NET_DVR_API void* __stdcall NET_DVR_InitG722Decoder(int nBitrate = 16000);
NET_DVR_API void __stdcall NET_DVR_ReleaseG722Decoder(void *pDecHandle);
NET_DVR_API BOOL __stdcall NET_DVR_DecodeG722Frame(void *pDecHandle, BYTE* pInBuffer, BYTE* pOutBuffer);
//±àÂë
NET_DVR_API void* __stdcall NET_DVR_InitG722Encoder();
NET_DVR_API BOOL __stdcall NET_DVR_EncodeG722Frame(void *pEncodeHandle,BYTE* pInBuffer, BYTE* pOutBuffer);
NET_DVR_API void __stdcall NET_DVR_ReleaseG722Encoder(void *pEncodeHandle);

//½âÂë
NET_DVR_API void* __stdcall NET_DVR_InitG726Decoder(void** pDecMoudle);
NET_DVR_API void __stdcall NET_DVR_ReleaseG726Decoder(void *pDecHandle);
NET_DVR_API BOOL __stdcall NET_DVR_DecodeG726Frame(void *pDecMoudle, BYTE* pInBuffer, BYTE* pOutBuffer, BYTE byReset);
//±àÂë
NET_DVR_API void* __stdcall NET_DVR_InitG726Encoder(void** pEncMoudle);
NET_DVR_API BOOL __stdcall NET_DVR_EncodeG726Frame(void *pEncMoudle,BYTE* pInBuffer, BYTE* pOutBuffer, BYTE byReset);
NET_DVR_API void __stdcall NET_DVR_ReleaseG726Encoder(void *pEncHandle);
//Ô¶³Ì¿ØÖÆ±¾µØÏÔÊ¾
NET_DVR_API BOOL __stdcall NET_DVR_ClickKey(LONG lUserID, LONG lKeyIndex);
//Ô¶³Ì¿ØÖÆÉè±¸¶ËÊÖ¶¯Â¼Ïñ
NET_DVR_API BOOL __stdcall NET_DVR_StartDVRRecord(LONG lUserID,LONG lChannel,LONG lRecordType);
NET_DVR_API BOOL __stdcall NET_DVR_StopDVRRecord(LONG lUserID,LONG lChannel);
//½âÂë¿¨
NET_DVR_API BOOL __stdcall NET_DVR_InitDevice_Card(long *pDeviceTotalChan);
NET_DVR_API BOOL __stdcall NET_DVR_ReleaseDevice_Card();
NET_DVR_API BOOL __stdcall NET_DVR_InitDDraw_Card(HWND hParent,COLORREF colorKey);
NET_DVR_API BOOL __stdcall NET_DVR_ReleaseDDraw_Card();
NET_DVR_API LONG __stdcall NET_DVR_RealPlay_Card(LONG lUserID,LPNET_DVR_CARDINFO lpCardInfo,long lChannelNum);
NET_DVR_API BOOL __stdcall NET_DVR_ResetPara_Card(LONG lRealHandle,LPNET_DVR_DISPLAY_PARA lpDisplayPara);
NET_DVR_API BOOL __stdcall NET_DVR_RefreshSurface_Card();
NET_DVR_API BOOL __stdcall NET_DVR_ClearSurface_Card();
NET_DVR_API BOOL __stdcall NET_DVR_RestoreSurface_Card();
NET_DVR_API BOOL __stdcall NET_DVR_OpenSound_Card(LONG lRealHandle);
NET_DVR_API BOOL __stdcall NET_DVR_CloseSound_Card(LONG lRealHandle);
NET_DVR_API BOOL __stdcall NET_DVR_SetVolume_Card(LONG lRealHandle,WORD wVolume);
NET_DVR_API BOOL __stdcall NET_DVR_AudioPreview_Card(LONG lRealHandle,BOOL bEnable);
NET_DVR_API LONG __stdcall NET_DVR_GetCardLastError_Card();
NET_DVR_API HANDLE __stdcall NET_DVR_GetChanHandle_Card(LONG lRealHandle);
NET_DVR_API BOOL __stdcall NET_DVR_CapturePicture_Card(LONG lRealHandle, char *sPicFileName);
NET_DVR_API BOOL __stdcall NET_DVR_GetSerialNum_Card(long lChannelNum,DWORD *pDeviceSerialNo);
NET_DVR_API LONG __stdcall NET_DVR_FindDVRLog(LONG lUserID, LONG lSelectMode, DWORD dwMajorType,DWORD dwMinorType, LPNET_DVR_TIME lpStartTime, LPNET_DVR_TIME lpStopTime);
NET_DVR_API LONG __stdcall NET_DVR_FindNextLog(LONG lLogHandle, LPNET_DVR_LOG lpLogData);
NET_DVR_API BOOL __stdcall NET_DVR_FindLogClose(LONG lLogHandle);
NET_DVR_API LONG __stdcall NET_DVR_FindDVRLog_V30(LONG lUserID, LONG lSelectMode, DWORD dwMajorType,DWORD dwMinorType, LPNET_DVR_TIME lpStartTime, LPNET_DVR_TIME lpStopTime, BOOL bOnlySmart = FALSE);
NET_DVR_API LONG __stdcall NET_DVR_FindNextLog_V30(LONG lLogHandle, LPNET_DVR_LOG_V30 lpLogData);
NET_DVR_API BOOL __stdcall NET_DVR_FindLogClose_V30(LONG lLogHandle);
NET_DVR_API LONG __stdcall NET_DVR_FindAlarmHostLog(LONG lUserID, LONG lSelectMode, NET_DVR_ALARMHOST_SEARCH_LOG_PARAM *lpSearchParam);
NET_DVR_API LONG __stdcall NET_DVR_FindNextAlarmHostLog(LONG lFindHandle, NET_DVR_ALARMHOST_LOG_RET *lpFindData);
NET_DVR_API BOOL __stdcall NET_DVR_FindAlarmHostLogClose(LONG lFindHandle);
NET_DVR_API LONG __stdcall NET_DVR_FindFileByCard(LONG lUserID,LONG lChannel,DWORD dwFileType, int nFindType, BYTE *sCardNumber, LPNET_DVR_TIME lpStartTime, LPNET_DVR_TIME lpStopTime);
NET_DVR_API void* __stdcall NET_DVR_InitG722Encoder();
NET_DVR_API BOOL __stdcall NET_DVR_EncodeG722Frame(void *pEncodeHandle,BYTE* pInBuffer, BYTE* pOutBuffer);
NET_DVR_API void __stdcall NET_DVR_ReleaseG722Encoder(void *pEncodeHandle);
NET_DVR_API BOOL __stdcall NET_DVR_CaptureJPEGPicture(LONG lUserID, LONG lChannel, LPNET_DVR_JPEGPARA lpJpegPara, char *sPicFileName);
NET_DVR_API BOOL __stdcall NET_DVR_CaptureJPEGPicture_NEW(LONG lUserID, LONG lChannel, LPNET_DVR_JPEGPARA lpJpegPara, char *sJpegPicBuffer, DWORD dwPicSize,  LPDWORD lpSizeReturned);
NET_DVR_API int __stdcall NET_DVR_GetRealPlayerIndex(LONG lRealHandle);
NET_DVR_API int __stdcall NET_DVR_GetPlayBackPlayerIndex(LONG lPlayHandle);
NET_DVR_API BOOL __stdcall NET_DVR_SetScaleCFG(LONG lUserID, DWORD dwScale);
NET_DVR_API BOOL __stdcall NET_DVR_GetScaleCFG(LONG lUserID, DWORD *lpOutScale);
NET_DVR_API BOOL __stdcall NET_DVR_SetScaleCFG_V30(LONG lUserID, LPNET_DVR_SCALECFG pScalecfg);
NET_DVR_API BOOL __stdcall NET_DVR_GetScaleCFG_V30(LONG lUserID, LPNET_DVR_SCALECFG pScalecfg);
NET_DVR_API BOOL __stdcall NET_DVR_SetATMPortCFG(LONG lUserID, WORD wATMPort);
NET_DVR_API BOOL __stdcall NET_DVR_GetATMPortCFG(LONG lUserID, WORD *LPOutATMPort);
NET_DVR_API BOOL __stdcall NET_DVR_InitDDrawDevice();
NET_DVR_API BOOL __stdcall NET_DVR_ReleaseDDrawDevice();
NET_DVR_API LONG __stdcall NET_DVR_GetDDrawDeviceTotalNums();
NET_DVR_API BOOL __stdcall NET_DVR_SetDDrawDevice(LONG lPlayPort, DWORD nDeviceNum);

NET_DVR_API BOOL __stdcall NET_DVR_PTZSelZoomIn(LONG lRealHandle, LPNET_DVR_POINT_FRAME pStruPointFrame);
NET_DVR_API BOOL __stdcall NET_DVR_PTZSelZoomIn_EX(LONG lUserID, LONG lChannel, LPNET_DVR_POINT_FRAME pStruPointFrame);
NET_DVR_API BOOL __stdcall NET_DVR_StartDecode(LONG lUserID, LONG lChannel, LPNET_DVR_DECODERINFO lpDecoderinfo);
NET_DVR_API BOOL __stdcall NET_DVR_StopDecode(LONG lUserID, LONG lChannel);
NET_DVR_API BOOL __stdcall NET_DVR_GetDecoderState(LONG lUserID, LONG lChannel, LPNET_DVR_DECODERSTATE lpDecoderState);
NET_DVR_API BOOL __stdcall NET_DVR_SetDecInfo(LONG lUserID, LONG lChannel, LPNET_DVR_DECCFG lpDecoderinfo);
NET_DVR_API BOOL __stdcall NET_DVR_GetDecInfo(LONG lUserID, LONG lChannel, LPNET_DVR_DECCFG lpDecoderinfo);
NET_DVR_API BOOL __stdcall NET_DVR_SetDecTransPort(LONG lUserID, LPNET_DVR_PORTCFG lpTransPort);
NET_DVR_API BOOL __stdcall NET_DVR_GetDecTransPort(LONG lUserID, LPNET_DVR_PORTCFG lpTransPort);
NET_DVR_API BOOL __stdcall NET_DVR_DecPlayBackCtrl(LONG lUserID, LONG lChannel, DWORD dwControlCode, DWORD dwInValue,DWORD *LPOutValue, LPNET_DVR_PLAYREMOTEFILE lpRemoteFileInfo);
NET_DVR_API BOOL __stdcall NET_DVR_StartDecSpecialCon(LONG lUserID, LONG lChannel, LPNET_DVR_DECCHANINFO lpDecChanInfo);
NET_DVR_API BOOL __stdcall NET_DVR_StopDecSpecialCon(LONG lUserID, LONG lChannel, LPNET_DVR_DECCHANINFO lpDecChanInfo);
NET_DVR_API BOOL __stdcall NET_DVR_DecCtrlDec(LONG lUserID, LONG lChannel, DWORD dwControlCode);
NET_DVR_API BOOL __stdcall NET_DVR_DecCtrlScreen(LONG lUserID, LONG lChannel, DWORD dwControl);
NET_DVR_API BOOL __stdcall NET_DVR_GetDecCurLinkStatus(LONG lUserID, LONG lChannel, LPNET_DVR_DECSTATUS lpDecStatus);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixStartDynamic(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_DYNAMIC_DEC lpDynamicInfo);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixStopDynamic(LONG lUserID, DWORD dwDecChanNum); 
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetDecChanInfo(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_DEC_CHAN_INFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetLoopDecChanInfo(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_LOOP_DECINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetLoopDecChanInfo(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_LOOP_DECINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetLoopDecChanEnable(LONG lUserID, DWORD dwDecChanNum, DWORD dwEnable);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetLoopDecChanEnable(LONG lUserID, DWORD dwDecChanNum, LPDWORD lpdwEnable);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetLoopDecEnable(LONG lUserID, LPDWORD lpdwEnable);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetDecChanEnable(LONG lUserID, DWORD dwDecChanNum, DWORD dwEnable);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetDecChanEnable(LONG lUserID, DWORD dwDecChanNum, LPDWORD lpdwEnable);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetDecChanStatus(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_DEC_CHAN_STATUS lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetVideoStandard(LONG lUserID, DWORD dwDecChanNum, LPDWORD lpdwVideoStandard);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetVideoStandard(LONG lUserID, DWORD dwDecChanNum, DWORD dwVideoStandard);

//2007-12-22 Ôö¼ÓÖ§³Ö½Ó¿Ú 
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetTranInfo(LONG lUserID, LPNET_DVR_MATRIX_TRAN_CHAN_CONFIG lpTranInfo);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetTranInfo(LONG lUserID, LPNET_DVR_MATRIX_TRAN_CHAN_CONFIG lpTranInfo);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetRemotePlay(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_DEC_REMOTE_PLAY lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetRemotePlayControl(LONG lUserID, DWORD dwDecChanNum, DWORD dwControlCode, DWORD dwInValue, DWORD *LPOutValue);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetRemotePlayStatus(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_DEC_REMOTE_PLAY_STATUS lpOuter);
//2009-4-13 ÐÂÔö
NET_DVR_API BOOL __stdcall NET_DVR_MatrixStartDynamic_V30(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_PU_STREAM_CFG lpDynamicInfo);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetLoopDecChanInfo_V30(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_LOOP_DECINFO_V30 lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetLoopDecChanInfo_V30(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_LOOP_DECINFO_V30 lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetDecChanInfo_V30(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_DEC_CHAN_INFO_V30 lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetTranInfo_V30(LONG lUserID, LPNET_DVR_MATRIX_TRAN_CHAN_CONFIG_V30 lpTranInfo);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetTranInfo_V30(LONG lUserID, LPNET_DVR_MATRIX_TRAN_CHAN_CONFIG_V30 lpTranInfo);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetDisplayCfg(LONG lUserID, DWORD dwDispChanNum, LPNET_DVR_VGA_DISP_CHAN_CFG lpDisplayCfg);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetDisplayCfg(LONG lUserID, DWORD dwDispChanNum, LPNET_DVR_VGA_DISP_CHAN_CFG lpDisplayCfg);

NET_DVR_API LONG __stdcall NET_DVR_MatrixStartPassiveDecode(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_PASSIVEMODE lpPassiveMode /*, void(CALLBACK *fPassiveDataCallBack)(LONG lPassiveHandle, char * pSendBuf, DWORD dwBufSize, DWORD dwStatus, DWORD dwUser), DWORD dwUser*/);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSendData(LONG lPassiveHandle, char *pSendBuf, DWORD dwBufSize);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixStopPassiveDecode(LONG lPassiveHandle);
NET_DVR_API BOOL __stdcall NET_DVR_UploadLogo(LONG lUserID, DWORD dwDispChanNum, LPNET_DVR_DISP_LOGOCFG lpDispLogoCfg, char *sLogoBuffer);
#define    NET_DVR_SHOWLOGO            1        /*ÏÔÊ¾LOGO*/
#define    NET_DVR_HIDELOGO            2        /*Òþ²ØLOGO*/  
NET_DVR_API BOOL __stdcall NET_DVR_LogoSwitch(LONG lUserID, DWORD dwDecChan, DWORD dwLogoSwitch);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetDeviceStatus(LONG lUserID,  LPNET_DVR_DECODER_WORK_STATUS lpDecoderCfg);

#define    DISP_CMD_ENLARGE_WINDOW                1    /*ÏÔÊ¾Í¨µÀ·Å´óÄ³¸ö´°¿Ú*/
#define    DISP_CMD_RENEW_WINDOW                2    /*ÏÔÊ¾Í¨µÀ´°¿Ú»¹Ô­*/
#define    DISP_CMD_OPENAUDIO                    3    /*ÏÔÊ¾Í¨µÀ´ò¿ªÒôÆµ*/
#define    DISP_CMD_CLOSEAUDIO                    4    /*ÏÔÊ¾Í¨µÀ¹Ø±ÕÒôÆµ*/

NET_DVR_API BOOL __stdcall NET_DVR_MatrixDiaplayControl(LONG lUserID, DWORD dwDispChanNum, DWORD dwDispChanCmd, DWORD dwCmdParam);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixPassiveDecodeControl(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_PASSIVEDECODE_CONTROL lpInter);
NET_DVR_API LONG __stdcall NET_DVR_MatrixGetPassiveDecodeStatus(LONG lPassiveHandle);

NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetDecChanCfg(LONG lUserID, DWORD dwDecChan, LPNET_DVR_MATRIX_DECCHAN_CONTROL lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetDecChanCfg(LONG lUserID, DWORD dwDecChan, LPNET_DVR_MATRIX_DECCHAN_CONTROL lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_RefreshPlay(LONG lPlayHandle);
//»Ö¸´Ä¬ÈÏÖµ
NET_DVR_API BOOL __stdcall NET_DVR_RestoreConfig(LONG lUserID);
//±£´æ²ÎÊý
NET_DVR_API BOOL __stdcall NET_DVR_SaveConfig(LONG lUserID);
//ÖØÆô
NET_DVR_API BOOL __stdcall NET_DVR_RebootDVR(LONG lUserID);
//¹Ø±ÕDVR
NET_DVR_API BOOL __stdcall NET_DVR_ShutDownDVR(LONG lUserID);

//²ÎÊýÅäÖÃ begin
NET_DVR_API BOOL __stdcall NET_DVR_GetDVRConfig(LONG lUserID, DWORD dwCommand,LONG lChannel, LPVOID lpOutBuffer, DWORD dwOutBufferSize, LPDWORD lpBytesReturned);
NET_DVR_API BOOL __stdcall NET_DVR_SetDVRConfig(LONG lUserID, DWORD dwCommand,LONG lChannel, LPVOID lpInBuffer, DWORD dwInBufferSize);
NET_DVR_API BOOL __stdcall NET_DVR_GetDVRWorkState_V30(LONG lUserID, LPNET_DVR_WORKSTATE_V30 lpWorkState);
NET_DVR_API BOOL __stdcall NET_DVR_GetDVRWorkState(LONG lUserID, LPNET_DVR_WORKSTATE lpWorkState);
NET_DVR_API BOOL __stdcall NET_DVR_SetVideoEffect(LONG lUserID, LONG lChannel, DWORD dwBrightValue, DWORD dwContrastValue, DWORD dwSaturationValue, DWORD dwHueValue);
NET_DVR_API BOOL __stdcall NET_DVR_GetVideoEffect(LONG lUserID, LONG lChannel, DWORD *pBrightValue, DWORD *pContrastValue, DWORD *pSaturationValue, DWORD *pHueValue);
NET_DVR_API BOOL __stdcall NET_DVR_ClientGetframeformat(LONG lUserID, LPNET_DVR_FRAMEFORMAT lpFrameFormat);
NET_DVR_API BOOL __stdcall NET_DVR_ClientSetframeformat(LONG lUserID, LPNET_DVR_FRAMEFORMAT lpFrameFormat);
NET_DVR_API BOOL __stdcall NET_DVR_GetAtmFrameFormat_V30(LONG lUserID, LONG lAtmChannel, LPNET_DVR_ATM_FRAMEFORMAT_V30 lpFrameFormat);
NET_DVR_API BOOL __stdcall NET_DVR_SetAtmFrameFormat_V30(LONG lUserID, LONG lAtmChannel, LPNET_DVR_ATM_FRAMEFORMAT_V30 lpFrameFormat);
NET_DVR_API BOOL __stdcall NET_DVR_GetAtmProtocol(LONG lUserID, LPNET_DVR_ATM_PROTOCOL lpAtmProtocol);
NET_DVR_API BOOL __stdcall NET_DVR_GetAlarmOut_V30(LONG lUserID, LPNET_DVR_ALARMOUTSTATUS_V30 lpAlarmOutState);
NET_DVR_API BOOL __stdcall NET_DVR_GetAlarmOut(LONG lUserID, LPNET_DVR_ALARMOUTSTATUS lpAlarmOutState);
NET_DVR_API BOOL __stdcall NET_DVR_SetAlarmOut(LONG lUserID, LONG lAlarmOutPort,LONG lAlarmOutStatic);

//ÊÓÆµ²ÎÊýµ÷½Ú
NET_DVR_API BOOL __stdcall NET_DVR_ClientSetVideoEffect(LONG lRealHandle,DWORD dwBrightValue,DWORD dwContrastValue, DWORD dwSaturationValue,DWORD dwHueValue);
NET_DVR_API BOOL __stdcall NET_DVR_ClientGetVideoEffect(LONG lRealHandle,DWORD *pBrightValue,DWORD *pContrastValue, DWORD *pSaturationValue,DWORD *pHueValue);

//ÅäÖÃÎÄ¼þ
NET_DVR_API BOOL __stdcall NET_DVR_GetConfigFile(LONG lUserID, char *sFileName);
NET_DVR_API BOOL __stdcall NET_DVR_SetConfigFile(LONG lUserID, char *sFileName);
NET_DVR_API BOOL __stdcall NET_DVR_GetConfigFile_V30(LONG lUserID, char *sOutBuffer, DWORD dwOutSize, DWORD *pReturnSize);

NET_DVR_API BOOL __stdcall NET_DVR_GetConfigFile_EX(LONG lUserID, char *sOutBuffer, DWORD dwOutSize);
NET_DVR_API BOOL __stdcall NET_DVR_SetConfigFile_EX(LONG lUserID, char *sInBuffer, DWORD dwInSize);

//ÆôÓÃÈÕÖ¾ÎÄ¼þÐ´Èë½Ó¿Ú
NET_DVR_API BOOL __stdcall NET_DVR_SetLogToFile(DWORD nLogLevel = 0, char * strLogDir = NULL, BOOL bAutoDel = TRUE);
NET_DVR_API BOOL __stdcall NET_DVR_GetSDKState(LPNET_DVR_SDKSTATE pSDKState);
NET_DVR_API BOOL __stdcall NET_DVR_GetSDKAbility(LPNET_DVR_SDKABL pSDKAbl);
NET_DVR_API BOOL __stdcall NET_DVR_GetPTZProtocol(LONG lUserID, NET_DVR_PTZCFG *pPtzcfg);
//Ç°Ãæ°åËø¶¨
NET_DVR_API BOOL __stdcall NET_DVR_LockPanel(LONG lUserID);
NET_DVR_API BOOL __stdcall NET_DVR_UnLockPanel(LONG lUserID);

NET_DVR_API BOOL __stdcall NET_DVR_SetRtspConfig(LONG lUserID, DWORD dwCommand, LPNET_DVR_RTSPCFG lpInBuffer, DWORD dwInBufferSize);
NET_DVR_API BOOL __stdcall NET_DVR_GetRtspConfig(LONG lUserID, DWORD dwCommand, LPNET_DVR_RTSPCFG lpOutBuffer, DWORD dwOutBufferSize);

//ÄÜÁ¦¼¯»ñÈ¡
NET_DVR_API BOOL __stdcall NET_DVR_GetDeviceAbility(LONG lUserID, DWORD dwAbilityType, char* pInBuf, DWORD dwInLength, char* pOutBuf, DWORD dwOutLength);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetSubSystemInfo(LONG lUserID, LPNET_DVR_ALLSUBSYSTEMINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetSubSystemInfo(LONG lUserID, LPNET_DVR_ALLSUBSYSTEMINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetCodeSplitter(LONG lUserID, DWORD dwCodeChan, LPNET_DVR_CODESPLITTERINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetCodeSplitter(LONG lUserID, DWORD dwCodeChan, LPNET_DVR_CODESPLITTERINFO lpInter);

//ÖÇÄÜ
//ÉèÖÃ/»ñÈ¡²ÎÊý¹Ø¼ü×Ö
NET_DVR_API BOOL __stdcall NET_DVR_SetBehaviorParamKey(LONG lUserID, LONG lChannel, DWORD dwParameterKey,int nValue);
NET_DVR_API BOOL __stdcall NET_DVR_GetBehaviorParamKey(LONG lUserID, LONG lChannel, DWORD dwParameterKey,int *pValue);

//»ñÈ¡/ÉèÖÃÐÐÎª·ÖÎöÄ¿±êµþ¼Ó½Ó¿Ú
NET_DVR_API BOOL __stdcall NET_DVR_GetVCADrawMode(LONG lUserID, LONG lChannel, LPNET_VCA_DRAW_MODE lpDrawMode);



NET_DVR_API BOOL __stdcall NET_DVR_SetVCADrawMode(LONG lUserID, LONG lChannel, LPNET_VCA_DRAW_MODE lpDrawMode);

//Çò»ú¸ú×ÙÄ£Ê½ÉèÖÃ½Ó¿Ú
NET_DVR_API BOOL __stdcall NET_DVR_SetTrackMode(LONG lUserID, LONG lChannel, LPNET_DVR_TRACK_MODE lpTrackMode);
NET_DVR_API BOOL __stdcall NET_DVR_GetTrackMode(LONG lUserID, LONG lChannel, LPNET_DVR_TRACK_MODE lpTrackMode);

//ÖØÆôÖÇÄÜ¿â
NET_DVR_API BOOL __stdcall NET_VCA_RestartLib(LONG lUserID, LONG lChannel);

NET_DVR_API BOOL __stdcall NET_DVR_SaveRealData_V30(LONG lRealHandle, DWORD dwTransType, char *sFileName);

NET_DVR_API BOOL __stdcall NET_DVR_EncodeG711Frame(DWORD iType, BYTE *pInBuffer, BYTE *pOutBuffer);
NET_DVR_API BOOL __stdcall NET_DVR_DecodeG711Frame(DWORD iType, BYTE *pInBuffer, BYTE *pOutBuffer);
NET_DVR_API LONG __stdcall NET_DVR_FindFileByEvent(LONG lUserID, LPNET_DVR_SEARCH_EVENT_PARAM  lpSearchEventParam);
NET_DVR_API LONG __stdcall NET_DVR_FindFileByEvent_V40(LONG lUserID, LPNET_DVR_SEARCH_EVENT_PARAM_V40  lpSearchEventParam);
NET_DVR_API LONG __stdcall NET_DVR_FindNextEvent(LONG lSearchHandle, LPNET_DVR_SEARCH_EVENT_RET lpSearchEventRet);
NET_DVR_API LONG __stdcall NET_DVR_FindNextEvent_V40(LONG lSearchHandle, LPNET_DVR_SEARCH_EVENT_RET_V40 lpSearchEventRet);
//Í£Ö¹²ÉÓÃ NET_DVR_FindClose

NET_DVR_API LONG __stdcall NET_DVR_FindPDCInfo(LONG lUserID, LONG lChannel, LPNET_DVR_TIME lpStartTime, LPNET_DVR_TIME lpStopTime);
NET_DVR_API LONG __stdcall NET_DVR_FindNextPDCInfo(LONG lFindHandle,LPNET_DVR_PDC_QUERY lpFindData);
NET_DVR_API BOOL __stdcall NET_DVR_FindPDCClose(LONG lFindHandle);

// ±ê¶¨Ð£Ñé 
#define NET_DVR_PDC_VERIFY_CALIBRATION          1    //µ±ÖµÎª1ÊÇÎªPDC±ê¶¨Ð£Ñé pdc´«ÈëÖµÎªNET_VCA_POINT   ´«³öÖµÎª NET_VCA_RECT½á¹¹
#define NET_DVR_VERIFY_BEHAVIOR_CALIBRATION     2    // ÐÐÎª·ÖÎö±ê¶¨ÏßÐ£Ñé 
#define NET_DVR_VERIFY_ITS_CALIBRATION            3    // ÖÇÄÜ½»Í¨±ê¶¨Ð£Ñé 
#define NET_DVR_VERIFY_BV_CALIBRATION            5    //Ë«Ä¿±ê¶¨Ð£Ñé

NET_DVR_API BOOL __stdcall  NET_DVR_VerifyCalibration(LONG lUserID, DWORD dwCommand, LONG lChannel, LPVOID lpInBuffer, DWORD dwInBufferSize, LPVOID lpOuterBuffer, DWORD dwOuterBufferSize);
NET_DVR_API BOOL __stdcall  NET_DVR_ResetCounter(LONG lUserID,LONG lChannel);

NET_DVR_API BOOL __stdcall NET_DVR_GetPtzPosition(LONG lUserID, LONG lChannel, LONG lPositionID, LPNET_DVR_PTZ_POSITION lpPtzPosition);
NET_DVR_API BOOL __stdcall NET_DVR_SetPtzPosition(LONG lUserID, LONG lChannel, LONG lPositionID, LPNET_DVR_PTZ_POSITION lpPtzPosition);
NET_DVR_API BOOL __stdcall NET_DVR_SetPatrolTrack(LONG lUserID, LONG lChannel, LONG lPatrolIndex, LPNET_DVR_PATROL_TRACKCFG lpPatrolTrack);
NET_DVR_API BOOL __stdcall NET_DVR_GetPatrolTrack(LONG lUserID, LONG lChannel, LONG lPatrolIndex, LPNET_DVR_PATROL_TRACKCFG lpPatrolTrack);
NET_DVR_API LONG __stdcall NET_DVR_FindNextLog_MATRIX(LONG lLogHandle, LPNET_DVR_LOG_MATRIX lpLogData);
NET_DVR_API LONG __stdcall NET_DVR_FindDVRLog_Matrix(LONG lUserID, LONG lSelectMode, DWORD dwMajorType, DWORD dwMinorType, LPNET_DVR_VEDIOPLATLOG lpVedioPlatLog, LPNET_DVR_TIME lpStartTime, LPNET_DVR_TIME lpStopTime);

NET_DVR_API BOOL __stdcall NET_DVR_ManualSnap(LONG lUserID, NET_DVR_MANUALSNAP const* lpInter, LPNET_DVR_PLATE_RESULT lpOuter);
NET_DVR_API BOOL __stdcall NET_DVR_ContinuousShoot(LONG lUserID, LPNET_DVR_SNAPCFG lpInter);

NET_DVR_API BOOL __stdcall NET_DVR_GetPTZProtocol_Ex(LONG lUserID, LONG lChannel, NET_DVR_PTZCFG *pPtzcfg);

NET_DVR_API LONG __stdcall NET_DVR_StartEmailTest(LONG lUserID);
NET_DVR_API BOOL __stdcall NET_DVR_StopEmailTest(LONG lEmailTestHandle);
NET_DVR_API BOOL __stdcall NET_DVR_GetEmailTestProgress(LONG lEmailTestHandle, DWORD* pState);
NET_DVR_API BOOL __stdcall NET_DVR_GetIPCProtoList(LONG lUserID, LPNET_DVR_IPC_PROTO_LIST lpProtoList);
NET_DVR_API BOOL __stdcall NET_DVR_GetIPCProtoList_V41(LONG lUserID, LPNET_DVR_IPC_PROTO_LIST_V41 lpProtoList);
NET_DVR_API LONG __stdcall NET_DVR_SmartSearch(LONG lUserID,  LPNET_DVR_SMART_SEARCH_PARAM lpSmartSearchParam);
NET_DVR_API LONG __stdcall NET_DVR_SmartSearch_V40(LONG lUserID,  LPNET_DVR_SMART_SEARCH_PARAM_V40 lpSmartSearchParam);
NET_DVR_API LONG __stdcall NET_DVR_SearchNextInfo(LONG lSearchHandle, LPNET_DVR_SMART_SEARCH_RET lpSmartSearchRet);
NET_DVR_API BOOL __stdcall NET_DVR_StopSearch(LONG lSearchHandle);

// IP San ÎÄ¼þÄ¿Â¼²éÕÒ
NET_DVR_API LONG __stdcall NET_DVR_FindIpSanDirectory(LONG lUserID, LPNET_DVR_IPSAN_SERACH_PARAM lpIpsanSearchParam);
NET_DVR_API LONG __stdcall NET_DVR_FindNextDirectory(LONG lFindHandle, LPNET_DVR_IPSAN_SERACH_RET lpFindData);
NET_DVR_API BOOL __stdcall NET_DVR_FindDirectoryClose(LONG lFindHandle);

typedef void (CALLBACK *REALDATACALLBACK) (LONG lPlayHandle, DWORD dwDataType, BYTE *pBuffer, DWORD dwBufSize, void* pUser);

NET_DVR_API LONG __stdcall NET_DVR_ZeroStartPlay(LONG lUserID, LPNET_DVR_CLIENTINFO lpClientInfo, REALDATACALLBACK fRealDataCallBack_V30 = NULL, void* pUser = NULL, BOOL bBlocked = TRUE);

NET_DVR_API BOOL __stdcall NET_DVR_ZeroStopPlay(LONG lPlayHandle);
NET_DVR_API BOOL __stdcall NET_DVR_ZeroMakeKeyFrame(LONG lUserID, LONG lZeroChan);
NET_DVR_API BOOL __stdcall NET_DVR_PlayBackControl_V40(LONG lPlayHandle,DWORD dwControlCode, LPVOID lpInBuffer = NULL, DWORD dwInLen = 0, LPVOID lpOutBuffer = NULL, DWORD *lpOutLen = NULL);
NET_DVR_API BOOL __stdcall NET_DVR_ZeroTurnOver(LONG lUserID, LONG lChannel, BOOL bNextPreview);

NET_DVR_API BOOL __stdcall NET_DVR_GetDiskList(LONG lUserID, LPNET_DVR_DISKABILITY_LIST lpDiskList);
NET_DVR_API LONG __stdcall NET_DVR_Backup(LONG lUserID, DWORD dwBackupType, LPVOID lpBackupBuff, DWORD dwBackupBuffSize);
NET_DVR_API LONG __stdcall NET_DVR_BackupByName(LONG lUserID, LPNET_DVR_BACKUP_NAME_PARAM lpBackupByName);
NET_DVR_API LONG __stdcall NET_DVR_BackupByTime(LONG lUserID, LPNET_DVR_BACKUP_TIME_PARAM lpBackupBytime);
NET_DVR_API BOOL __stdcall NET_DVR_GetBackupProgress(LONG lHandle, DWORD* pState);
NET_DVR_API BOOL __stdcall NET_DVR_StopBackup(LONG lHandle);

NET_DVR_API BOOL __stdcall NET_DVR_GetSadpInfoList(LONG lUserID, LPNET_DVR_SADPINFO_LIST lpSadpInfoList);
NET_DVR_API BOOL __stdcall NET_DVR_UpdateSadpInfo(LONG lUserID, LPNET_DVR_SADP_VERIFY lpSadpVerify, LPNET_DVR_SADPINFO lpSadpInfo);

NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetSubDecSystemJoinInfo(LONG lUserID, LPNET_DVR_ALLDECSUBSYSTEMJOININFO lpInter);

NET_DVR_API BOOL __stdcall NET_DVR_SetCodeSplitterAssociate(LONG lUserID, DWORD dwDecoderChan, DWORD dwSlotNum, LPNET_DVR_CODESPLITTERASSOCIATE lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_GetCodeSplitterAssociate(LONG lUserID, DWORD dwDecoderChan, DWORD dwSlotNum, LPNET_DVR_CODESPLITTERASSOCIATE lpInter);

NET_DVR_API BOOL __stdcall NET_DVR_InquestGetCDRWScheme(LONG lUserID, LPNET_DVR_INQUEST_CDRW_CFG lpCDRWCfg);
NET_DVR_API BOOL __stdcall NET_DVR_InquestSetCDRWScheme(LONG lUserID, LPNET_DVR_INQUEST_CDRW_CFG lpCDRWCfg);
NET_DVR_API BOOL __stdcall NET_DVR_InquestDeleteFile(LONG lUserID, LPNET_DVR_INQUEST_FILES lpDeleteFile);
NET_DVR_API BOOL __stdcall NET_DVR_InquestCDWByFile(LONG lUserID, LPNET_DVR_INQUEST_FILES lpCdrwFile);
NET_DVR_API LONG __stdcall NET_DVR_InquestUploadFile(LONG lUserID, char *sFileName);
NET_DVR_API BOOL __stdcall NET_DVR_InquestUploadClose(LONG lUploadHandle);
NET_DVR_API LONG __stdcall NET_DVR_InquestGetUploadState(LONG lUploadHandle, LPDWORD pProgress);
NET_DVR_API BOOL __stdcall NET_DVR_InquestStartCDW( LONG lUserID, BOOL bPause);
NET_DVR_API BOOL __stdcall NET_DVR_InquestStopCDW(LONG lUserID, BOOL bCancelWrite);
NET_DVR_API BOOL __stdcall NET_DVR_InquestGetCDWState(LONG lUserID, LPNET_DVR_INQUEST_CDRW_STATUS pStatus);
NET_DVR_API BOOL __stdcall NET_DVR_InquestGetPIPStatus(LONG lUserID, LPNET_DVR_INQUEST_PIP_STATUS pStatus);
NET_DVR_API BOOL __stdcall NET_DVR_InquestSetPIPStatus(LONG lUserID, LPNET_DVR_INQUEST_PIP_STATUS pStatus);
NET_DVR_API BOOL __stdcall NET_DVR_InquestCheckSecretKey(LONG lUserID, BOOL *bSecretSet);
NET_DVR_API BOOL __stdcall NET_DVR_InquestSetSecretKey(LONG lUserID, LPNET_DVR_INQUEST_SECRET_INFO pSecretInfo);
NET_DVR_API BOOL __stdcall NET_DVR_InquestStreamEncrypt(LONG lUserID, LONG lChannel, BOOL bEncrypt);
NET_DVR_API BOOL __stdcall NET_DVR_InquestGetEncryptState(LONG  lUserID, LONG lChannel, BOOL *bEncrypt);
NET_DVR_API LONG __stdcall NET_DVR_InquestFindFile(LONG lUserID);
NET_DVR_API LONG __stdcall NET_DVR_InquestFindNextFile(LONG lFindHandle, LPNET_DVR_INQUEST_FILEINFO lpFindData);
NET_DVR_API BOOL __stdcall NET_DVR_InquestFindClose(LONG lFindHandle);

// 9000RH
NET_DVR_API LONG __stdcall NET_DVR_RaidFastConfig(LONG lUserID, char *sName);
NET_DVR_API BOOL __stdcall NET_DVR_FastConfigProcess(LONG lHandle, DWORD *pState);
NET_DVR_API BOOL __stdcall NET_DVR_CloseFastConfig(LONG lHandle);
NET_DVR_API BOOL __stdcall NET_DVR_GetArraySpaceAlloc(LONG lUserID, DWORD dwSlot, LPNET_DVR_ARRAY_SPACE_ALLOC_INFO lpOutBuf);
NET_DVR_API BOOL __stdcall NET_DVR_DelArray(LONG lUserID, DWORD dwID);
NET_DVR_API BOOL __stdcall NET_DVR_CreateArray(LONG lUserID, LPNET_DVR_OPERATE_ARRAY_PARAM lpArrayParam);
NET_DVR_API BOOL __stdcall NET_DVR_CalcArraySize(LONG lUserID, LPNET_DVR_OPERATE_ARRAY_PARAM lpArrayParam, UINT64* lpArraySize);
NET_DVR_API BOOL __stdcall NET_DVR_MigrateArray(LONG lUserID, LPNET_DVR_OPERATE_ARRAY_PARAM lpArrayParam);
NET_DVR_API BOOL __stdcall NET_DVR_RebuildArray(LONG lUserID, LPNET_DVR_OPERATE_ARRAY_PARAM lpArrayParam);
NET_DVR_API BOOL __stdcall NET_DVR_CreateVD(LONG lUserID, LPNET_DVR_OPERATE_VD_PARAM lpVDParam);
NET_DVR_API BOOL __stdcall NET_DVR_CreateVDEx(LONG lUserID, LPNET_DVR_OPERATE_VD_PARAM_EX lpVDParamEx);
NET_DVR_API BOOL __stdcall NET_DVR_DelVD(LONG lUserID, DWORD dwID);
NET_DVR_API BOOL __stdcall NET_DVR_RepairVD(LONG lUserID, DWORD dwID);
NET_DVR_API BOOL __stdcall NET_DVR_SetSpareDisk(LONG lUserID, LPNET_DVR_SPARE_DISK_PARAM lpSpareDisk);
NET_DVR_API BOOL __stdcall NET_DVR_GetPDList(LONG lUserID, LPNET_DVR_PHY_DISK_LIST lpPDList);
NET_DVR_API BOOL __stdcall NET_DVR_GetArrayList(LONG lUserID, LPNET_DVR_ARRAY_LIST lpArrayList);
NET_DVR_API BOOL __stdcall NET_DVR_GetVDList(LONG lUserID, LPNET_DVR_VD_LIST lpVDList);
NET_DVR_API LONG __stdcall NET_DVR_ExpandDisk(LONG lUserID,DWORD dwVDSLot);
NET_DVR_API BOOL __stdcall NET_DVR_GetExpandProgress(LONG lExpandHandle, DWORD* pState);
NET_DVR_API BOOL __stdcall NET_DVR_CloseExpandHandle(LONG lExpandHandle);
NET_DVR_API LONG __stdcall NET_DVR_AlgoDebugStart(LONG lUserID, LONG lCHannel, void(CALLBACK *fAlgoLibInfoCallBack)(LONG lHandle, LONG lChannel,char *pRecvDataBuffer, DWORD dwBufSize, void* pUser), void* pUser);
NET_DVR_API BOOL __stdcall NET_DVR_AlgoDebugSend(LONG lHandle, LONG lChannel, char *pSendBuf, DWORD dwBufSize);
NET_DVR_API BOOL __stdcall NET_DVR_AlgoDebugStop(LONG lHandle);
NET_DVR_API BOOL __stdcall NET_DVR_SetLogPrint(BOOL bLogPrint);
NET_DVR_API BOOL __stdcall NET_DVR_SetLogPrintAction(DWORD nLogLevel, DWORD nToDevice, BOOL bEnable, int Reserve1, int Reserve2);

NET_DVR_API BOOL __stdcall NET_DVR_GetPositionRule(LONG lUserID, LONG lChannel, LONG lPositionIndex, LPNET_DVR_POSITION_RULE_CFG lpPositionRule);
NET_DVR_API BOOL __stdcall NET_DVR_GetPositionRule_V41(LONG lUserID, LONG lChannel, LONG lPositionIndex, LPNET_DVR_POSITION_RULE_CFG_V41 lpPositionRule);
NET_DVR_API BOOL __stdcall NET_DVR_SetPositionRule(LONG lUserID, LONG lChannel, LONG lPositionIndex, LPNET_DVR_POSITION_RULE_CFG lpPositionRule);
NET_DVR_API BOOL __stdcall NET_DVR_SetPositionRule_V41(LONG lUserID, LONG lChannel, LONG lPositionIndex, LPNET_DVR_POSITION_RULE_CFG_V41 lpPositionRule);
NET_DVR_API BOOL __stdcall NET_DVR_SetPositionLimitAngle(LONG lUserID, LONG lChannel, LONG lPositionIndex, LPNET_DVR_LIMIT_ANGLE lpLimitAngle);
NET_DVR_API BOOL __stdcall NET_DVR_GetPositionLimitAngle(LONG lUserID, LONG lChannel, LONG lPositionIndex, LPNET_DVR_LIMIT_ANGLE lpLimitAngle);
NET_DVR_API BOOL __stdcall NET_DVR_GetPtzPosition(LONG lUserID, LONG lChannel, LONG lPositionID, LPNET_DVR_PTZ_POSITION lpPtzPosition);
NET_DVR_API BOOL __stdcall NET_DVR_SetPtzPosition(LONG lUserID, LONG lChannel, LONG lPositionID, LPNET_DVR_PTZ_POSITION lpPtzPosition);
NET_DVR_API BOOL __stdcall NET_DVR_SetPatrolTrack(LONG lUserID, LONG lChannel, LONG lPatrolIndex, LPNET_DVR_PATROL_TRACKCFG lpPatrolTrack);
NET_DVR_API BOOL __stdcall NET_DVR_GetPatrolTrack(LONG lUserID, LONG lChannel, LONG lPatrolIndex, LPNET_DVR_PATROL_TRACKCFG lpPatrolTrack);
NET_DVR_API BOOL __stdcall NET_DVR_SetPatrolLimitAngle(LONG lUserID, LONG lChannel, LONG lPatrolIndex, LPNET_DVR_LIMIT_ANGLE lpLimitAngle);
NET_DVR_API BOOL __stdcall NET_DVR_GetPatrolLimitAngle(LONG lUserID, LONG lChannel, LONG lPatrolIndex, LPNET_DVR_LIMIT_ANGLE lpLimitAngle);
NET_DVR_API BOOL __stdcall NET_DVR_SetSceneMode(LONG  lUserID, LONG lChannel, DWORD dwSceneMode);
NET_DVR_API BOOL __stdcall NET_DVR_GetSceneMode(LONG lUserID, LONG lChannel, DWORD  *pSceneMode);
NET_DVR_API BOOL __stdcall NET_DVR_GetVCAVersion(LONG lUserID, LONG lChannel, LPNET_DVR_VCA_VERSION lpVersion);

NET_DVR_API BOOL __stdcall NET_DVR_ContinuousShoot(LONG lUserID, LPNET_DVR_SNAPCFG lpInter);     
NET_DVR_API BOOL __stdcall NET_DVR_MatrixPicAdjust(LONG lUserID, DWORD dwDispChan, DWORD dwPicAdjust, DWORD dwCmdParam); 
NET_DVR_API BOOL __stdcall NET_DVR_AlarmJoinedRecord(LONG lUserID, DWORD dwChan, DWORD dwAlarmSeq, DWORD dwRecordTime, DWORD dwRes);
NET_DVR_API BOOL __stdcall NET_DVR_GetUnitedMatrixInfo(LONG lUserID, LPNET_DVR_UNITEDMATRIXINFO lpInter);
typedef LONG(CALLBACK * REGCallBack)(LONG lUserID, LPNET_DVR_REGCALLBACKPARAM pRegCallbackParam, LPNET_DVR_LOGONREPONSEPARAM pInterParam, void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetRegisterCallBack(REGCallBack fRegCallBack, void* pUser);
NET_DVR_API BOOL __stdcall NET_DVR_PreviewRequest(LONG lUserID, LONG lChannel, LPNET_DVR_PREVIEWPARAM lpPreviewParam, LPNET_DVR_DEVICENATINFO lpOuter);
typedef LONG(CALLBACK * PREVIEWRESPONSECallBack)(LONG lUserID, LONG lStreamHandle, LPNET_DVR_PREVIEWCALLBACKPARAM pPewviewCallbackParam,void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetPreviewResponseCallBack(PREVIEWRESPONSECallBack fPreviewResponseCallBack, void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_PlaybackRequest(LONG lUserID, LPNET_DVR_PLAYBACKREQUESTPARAM lpPlayBackRequestParam);
typedef LONG(CALLBACK * PLAYBACKRESPONSECallBack)(LONG lUserID, LONG lPlaybackHandle, LPNET_DVR_PLAYBACKCALLBACKPARAM lpPlaybackParam,void *pUser);     
NET_DVR_API BOOL __stdcall NET_DVR_SetPlaybackResponseCallBack(PLAYBACKRESPONSECallBack fPlaybackResponseCallBack, void *pUser);          
typedef LONG(CALLBACK * VOICERESPONSECallBack)(LONG lUserID, LONG lVoiceHandle, LONG lVoiceChannel, BYTE nAudioType, void *pUser);     
NET_DVR_API BOOL __stdcall NET_DVR_SetVoiceResponseCallBack(VOICERESPONSECallBack fVoiceResponseCallBack, void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_VoiceRequest(LONG lUserID, LPNET_DVR_VOICEREQUESTPARAM lpVoiceParam);           
NET_DVR_API BOOL __stdcall NET_DVR_AlarmSetupRequest(LONG lUserID, LPNET_DVR_ALARMSETUPREQUESTPARAM lpAlarmSetupParam);
NET_DVR_API BOOL __stdcall NET_DVR_GetDialParam(LONG lUserID, LPNET_DVR_DIALREQUEST lpDialRequest, LPNET_DVR_DIALPARAM lpDialParam);                      
NET_DVR_API BOOL __stdcall NET_DVR_SetDialParam(LONG lUserID, LPNET_DVR_DIALREQUEST lpDialRequest, LPNET_DVR_DIALPARAM lpDialParam);
NET_DVR_API BOOL __stdcall NET_DVR_GetSmsListInfo(LONG lUserID, LPNET_DVR_TIME_EX lpStartTime, LPNET_DVR_TIME_EX lpStopTime, LPNET_DVR_SMSLISTINFO lpSmsListInfo);
NET_DVR_API BOOL __stdcall NET_DVR_GetSmsContent(LONG lUserID, DWORD dwSmsIndex, LPNET_DVR_SMSCONTENT lpSmsContent);
NET_DVR_API BOOL __stdcall NET_DVR_SendSms(LONG lUserID, LPNET_DVR_SMSCONTENT lpSmsContent);
NET_DVR_API LONG __stdcall NET_DVR_StartServer(char *sLocalIP, WORD wLocalPort, BYTE byMode);
NET_DVR_API BOOL __stdcall NET_DVR_StopServer(LONG lServerHandle); 
NET_DVR_API LONG __stdcall NET_DVR_StartRecvNakedDataListen(NAKED_DATA_TYPE type, LPNET_DVR_NAKED_DATA_PARAM pParams);
NET_DVR_API BOOL __stdcall NET_DVR_StopRecvNakedDataListen(LONG lNakedDataRecvHandle);          
typedef void(CALLBACK * NAKEDDAtACALLBACK)(DWORD typeInfo, char *pInfo, DWORD dwInfoLen,DWORD dwIPLen, void* pUser);
NET_DVR_API BOOL __stdcall  NET_DVR_SetNakedDataRecvCallBack(LONG lNakedDataRecvHandle, void(CALLBACK *fNakedDataCallBack)(DWORD dwTypeInfo, NET_DVR_NAKED_DATA_INFO *pStruNakedDataInfo, char *pInfo, DWORD dwInfoLen, void* pUser), void* pUser);

typedef LONG(CALLBACK * ALARMSETUPRESPONSECallBack)(LONG lUserID, LONG lAlarmHandle, void * pUser);         
NET_DVR_API BOOL __stdcall NET_DVR_SetAlarmSetupResponseCallBack(ALARMSETUPRESPONSECallBack fAlarmSetupResponseCallBack, void * pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SpringJPEGPicture(LONG lUserID, LONG lChannel, NET_DVR_PUSHJPEGPARA const *lpJpegPara);
NET_DVR_API BOOL __stdcall NET_DVR_SetPushModeParam(LPNET_DVR_PUSHMODEPARAM pPushParam);

NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostSetupAlarmChan(LONG lUserID, NET_DVR_ALARMIN_SETUP *lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostCloseAlarmChan(LONG lUserID, NET_DVR_ALARMIN_SETUP *lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_BypassAlarmChan(LONG lUserID, NET_DVR_ALARMIN_SETUP *lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_UnBypassAlarmChan(LONG lUserID, NET_DVR_ALARMIN_SETUP *lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostAssistantControl(LONG lUserID, DWORD dwType, DWORD dwNumber, DWORD dwCmdParam);
NET_DVR_API BOOL __stdcall NET_DVR_SetAirCondition(LONG lUserID, LONG l485Index, NET_DVR_AIR_CONDITION_PARAM* lpAirConditionParam);
NET_DVR_API BOOL __stdcall NET_DVR_GetAirCondition(LONG lUserID, LONG l485Index, NET_DVR_AIR_CONDITION_PARAM* lpAirConditionParam);
NET_DVR_API BOOL __stdcall NET_DVR_GetDeviceTypeList(LONG lUserID, NET_DVR_DEVICE_TYPE_LIST *lpDeviceTypeList);
NET_DVR_API BOOL __stdcall NET_DVR_GetDeviceProtoList(LONG lUserID, LONG lDeviceType, NET_DVR_DEVICE_PROTO_LIST *lpDeviceProtoList);
NET_DVR_API BOOL __stdcall NET_DVR_GetBatteryVoltage(LONG lUserID, float *pVoltage);
NET_DVR_API BOOL __stdcall NET_DVR_SetAlarmDeviceUser(LONG lUserID, LONG lUserIndex, NET_DVR_ALARM_DEVICE_USER* lpDeviceUser);
NET_DVR_API BOOL __stdcall NET_DVR_GetAlarmDeviceUser(LONG lUserID, LONG lUserIndex, NET_DVR_ALARM_DEVICE_USER* lpDeviceUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetKeyboardUser(LONG lUserID, LONG lUserIndex, NET_DVR_KEYBOARD_USER* lpKeyboardUser);
NET_DVR_API BOOL __stdcall NET_DVR_GetKeyboardUser(LONG lUserID, LONG lUserIndex, NET_DVR_KEYBOARD_USER* lpKeyboardUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetOperateUser(LONG lUserID, LONG lUserIndex, NET_DVR_OPERATE_USER* lpOperateUser);
NET_DVR_API BOOL __stdcall NET_DVR_GetOperateUser(LONG lUserID, LONG lUserIndex, NET_DVR_OPERATE_USER* lpOperateUser);
NET_DVR_API BOOL __stdcall NET_DVR_ControlGateway(LONG lUserID, LONG lGatewayIndex, DWORD dwStaic);
NET_DVR_API BOOL __stdcall NET_DVR_SetAlarmHostOut(LONG lUserID, LONG lAlarmOutPort, LONG lAlarmOutStatic);
typedef void(CALLBACK *fAlarmHostSerialDataCallBack)
(LONG lSerialHandle, LONG lPort, LONG lDateType, char *pRecvDataBuffer, DWORD  dwBufSize,void *pUser);
NET_DVR_API LONG __stdcall NET_DVR_AlarmHostSerialStart(LONG lUserID, LONG lSerialType, fAlarmHostSerialDataCallBack cbSerialDataCallBack, void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostSerialSend(LONG lSerialHandle,LONG lPort,char *pSendBuf,DWORD dwBufSize);
NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostSerialStop(LONG  lSerialHandle);
NET_DVR_API BOOL __stdcall NET_DVR_GetMatrixPuChan(LONG lUserID, LONG lChanType, NET_DVR_PU_CHAN_LIST* lpChanList);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixAlarmOffMonitor(LONG lUserID, DWORD dwMonID, DWORD dwCamID);
NET_DVR_API BOOL __stdcall NET_DVR_GetCameraListInfo(LONG lUserID, DWORD dwCamNum, DWORD dwStartCam, LPNET_DVR_MATRIX_CAMERALIST lpCamListInfo);
NET_DVR_API BOOL __stdcall NET_DVR_GetMonitorListInfo(LONG lUserID, DWORD dwMonNum, DWORD dwStartMon, LPNET_DVR_MATRIX_MONITORLIST lpMonListInfo);
NET_DVR_API BOOL __stdcall NET_DVR_GetGlobalNum(LONG lUserID, DWORD *dwCamNum, DWORD *dwMonNum); 
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetUnitedMatrixInfo(LONG lUserID, LPNET_DVR_ALLUNITEDMATRIXINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetUnitedMatrixInfo(LONG lUserID, LPNET_DVR_ALLUNITEDMATRIXINFO lpInter); 
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetGatewayInfo(LONG lUserID, LPNET_DVR_MATRIXGATEWAYINFO lpInter);         
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetGatewayInfo(LONG lUserID, LPNET_DVR_MATRIXGATEWAYINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSpanSwitch(LONG lUserID, BYTE nSwitchMode, LPNET_DVR_MATRIXSWITCH lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixStartSwitch(LONG lUserID, LPNET_DVR_MATRIXSWITCHCTRL lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetConfigFile(LONG lUserID, LPNET_DVR_MATRIXDATABASE lpInter, char *sInBuffer,  DWORD dwInSize);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetConfigFile(LONG lUserID, LPNET_DVR_MATRIXDATABASE lpInter, char  *sOutBuffer,  DWORD   dwOutSize,  DWORD   *pReturnSize);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetSubSystemInfo_V40(LONG lUserID, LPNET_DVR_ALLSUBSYSTEMINFO_V40 lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetSubSystemInfo_V40(LONG lUserID, LPNET_DVR_ALLSUBSYSTEMINFO_V40 lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetSubDecSystemJoinInfo_V40(LONG lUserID, LPNET_DVR_ALLDECSUBSYSTEMJOININFO_V40 lpInter);
typedef void (CALLBACK *FLOWTESTCALLBACK)(LONG lFlowHandle, LPNET_DVR_FLOW_INFO pFlowInfo, void *pUser);
NET_DVR_API LONG __stdcall NET_DVR_StartNetworkFlowTest(LONG lUserID, NET_DVR_FLOW_TEST_PARAM* pFlowTest,  FLOWTESTCALLBACK fFlowTestCallback, void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_StopNetworkFlowTest(LONG lHandle);
NET_DVR_API LONG __stdcall NET_DVR_FindRecordLabel(LONG lUserID, LPNET_DVR_FIND_LABEL lpFindLabel);
NET_DVR_API LONG __stdcall NET_DVR_FindNextLabel(LONG lFindHandle, LPNET_DVR_FINDLABEL_DATA lpFindData);
NET_DVR_API BOOL __stdcall NET_DVR_StopFindLabel(LONG lFindHandle);
NET_DVR_API BOOL __stdcall NET_DVR_InsertRecordLabel(LONG lPlayHandle, NET_DVR_RECORD_LABEL* lpRecordLabel, NET_DVR_LABEL_IDENTIFY *lpLableIdentify);
NET_DVR_API BOOL __stdcall NET_DVR_DelRecordLabel(LONG lUserID, NET_DVR_DEL_LABEL_PARAM* lpDelLabelParam);
NET_DVR_API BOOL __stdcall NET_DVR_ModifyRecordLabel(LONG lUserID, NET_DVR_MOD_LABEL_PARAM * lpModLabelParam);
NET_DVR_API BOOL __stdcall NET_DVR_CapturePlaybackPictureBlock(LONG lPlayHandle, char *sPicFileName, DWORD dwTimeOut);
NET_DVR_API LONG __stdcall NET_DVR_FindPicture(LONG lUserID, NET_DVR_FIND_PICTURE_PARAM* pFindParam);
NET_DVR_API LONG __stdcall NET_DVR_FindNextPicture(LONG lFindHandle,LPNET_DVR_FIND_PICTURE lpFindData);
NET_DVR_API LONG __stdcall NET_DVR_FindNextPicture_V40(LONG lFindHandle,LPNET_DVR_FIND_PICTURE_V40 lpFindData);
NET_DVR_API BOOL __stdcall NET_DVR_CloseFindPicture(LONG lFindHandle);
NET_DVR_API BOOL __stdcall NET_DVR_GetPicture(LONG lUserID,char *sDVRFileName,const char *sSavedFileName);
NET_DVR_API BOOL __stdcall NET_DVR_GetPicture_V30(LONG lUserID, char *sDVRFileName, char *sSavedFileBuf, DWORD dwBufLen, DWORD *lpdwRetLen);
NET_DVR_API LONG __stdcall NET_DVR_BackupPicture(LONG lUserID, NET_DVR_BACKUP_PICTURE_PARAM *lpBackupPicture);
NET_DVR_API LONG __stdcall NET_DVR_GetUpgradeStep(LONG lUpgradeHandle, LONG *pSubProgress);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetEncodeJoint(LONG lUserID, LONG lChannel, LPNET_DVR_ENCODE_JOINT_PARAM lpEncodeJoint);
NET_DVR_API BOOL  __stdcall NET_DVR_GetLocalIP(char strIP[16][16], DWORD *pValidNum, BOOL *pEnableBind);
NET_DVR_API BOOL  __stdcall NET_DVR_SetValidIP(DWORD dwIPIndex, BOOL bEnableBind);
NET_DVR_API BOOL __stdcall NET_DVR_GetVcaDevWorkState(LONG lUserID, LPNET_DVR_VCA_DEV_WORKSTATUS lpWorkState);
NET_DVR_API BOOL  __stdcall NET_DVR_SetRecvTimeOut(DWORD nRecvTimeOut = 5000); //×îÐ¡3000ºÁÃë
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetDisplayCfg_V40(LONG lUserID, DWORD dwDispChanNum, LPNET_DVR_VGA_DISP_CHAN_CFG_V40 lpDisplayCfg);              
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetDisplayCfg_V40(LONG lUserID, DWORD dwDispChanNum, LPNET_DVR_VGA_DISP_CHAN_CFG_V40 lpDisplayCfg);
NET_DVR_API BOOL __stdcall NET_DVR_ShutterCompensation(LONG lUserID);
NET_DVR_API BOOL __stdcall NET_DVR_CorrectDeadPixel(LONG lUserID, LONG lChannel, LPNET_DVR_CORRECT_DEADPIXEL_PARAM lpInParam);
NET_DVR_API BOOL __stdcall NET_DVR_CustomConfig(LONG lUserID, LONG lChannel, LPVOID lpInBuffer, DWORD dwInBufferSize, LPVOID lpOutBuffer, DWORD dwOutBufferSize, LPDWORD lpBytesReturned);
NET_DVR_API BOOL __stdcall NET_DVR_GetHistoricDataInfo(LONG lUserID, LONG lChannel, LPNET_DVR_HISTORICDATACFG lpHisData);
NET_DVR_API BOOL __stdcall NET_DVR_GetHistoricData(LONG lUserID, LONG lChannel, LPNET_DVR_PLATE_RESULT lpOuter);
NET_DVR_API BOOL __stdcall NET_DVR_ClearHistoricData(LONG lUserID, LONG lChannel);
NET_DVR_API LONG  __stdcall NET_DVR_InquestUploadFile_V30(LONG lUserID, LPNET_DVR_INQUEST_ROOM lpInquestRoom,  char *sFileName);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestDeleteFile_V30(LONG lUserID, LPNET_DVR_INQUEST_ROOM lpInquestRoom, LPNET_DVR_INQUEST_FILES lpDeleteFile);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestGetPIPStatus_V30(LONG lUserID, LPNET_DVR_INQUEST_ROOM lpInquestRoom, LPNET_DVR_INQUEST_PIP_STATUS lpStatus);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestSetPIPStatus_V30(LONG lUserID, LPNET_DVR_INQUEST_ROOM lpInquestRoom, LPNET_DVR_INQUEST_PIP_STATUS lpStatus);
NET_DVR_API BOOL __stdcall NET_DVR_InquestGetPIPStatus_V40(LONG lUserID, NET_DVR_INQUEST_ROOM const *lpInquestRoom, LPNET_DVR_INQUEST_PIP_STATUS_V40 lpStatus);
NET_DVR_API BOOL __stdcall NET_DVR_InquestSetPIPStatus_V40(LONG lUserID, NET_DVR_INQUEST_ROOM const *lpInquestRoom, LPNET_DVR_INQUEST_PIP_STATUS_V40 lpStatus);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestGetSystemInfo(LONG lUserID, LPNET_DVR_INQUEST_SYSTEM_INFO lpSystemInfo);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestSetSystemInfo(LONG lUserID, LPNET_DVR_INQUEST_SYSTEM_INFO lpSystemInfo);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestSendMessage(LONG lUserID, LPNET_DVR_INQUEST_ROOM lpInquestRoom, LPNET_DVR_INQUEST_MESSAGE lpInquestMessage);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestStartCDW_V30(LONG lUserID, LPNET_DVR_INQUEST_ROOM lpInquestRoom, BOOL bNotBurn);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestStopCDW_V30(LONG lUserID, LPNET_DVR_INQUEST_ROOM lpInquestRoom, BOOL bCancelWrite);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestGetCDWState_V30(LONG lUserID, LPNET_DVR_INQUEST_ROOM lpInquestRoom, LPNET_DVR_INQUEST_CDRW_STATUS pStatus);
NET_DVR_API LONG  __stdcall NET_DVR_InquestResumeEvent(LONG lUserID, LPNET_DVR_INQUEST_RESUME_EVENT lpResumeEvent);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestGetResumeProgress(LONG lHandle, DWORD* pState);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestStopResume(LONG lHandle);
NET_DVR_API LONG  __stdcall NET_DVR_InquestFindFile_V30(LONG lUserID, LPNET_DVR_INQUEST_ROOM pInquestRoom);
NET_DVR_API BOOL  __stdcall NET_DVR_InquestGetDeviceVersion(LONG lUserID, LPNET_DVR_INQUEST_DEVICE_VERSION lpVersionInfo);
NET_DVR_API BOOL  __stdcall NET_DVR_SetSDKSecretKey(LONG lUserID, char *sSecretKey);
NET_DVR_API BOOL __stdcall NET_DVR_LockFileByTime(LONG lUserID, LPNET_DVR_TIME_LOCK lpLockPara, LPNET_DVR_LOCK_RETURN lpLockReturn);
NET_DVR_API BOOL __stdcall NET_DVR_UnlockFileByTime(LONG lUserID, LPNET_DVR_TIME_LOCK lpLockPara, LPNET_DVR_LOCK_RETURN lpLockReturn);
NET_DVR_API BOOL __stdcall NET_DVR_ScreenZoomIn(LONG lUserID, LPNET_DVR_SCREENZOOM pStruScreen);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetAllCameraInfo(LONG lUserID, LPNET_DVR_MATRIX_CAMERALIST lpCamListInfo);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetSingleCameraInfo(LONG lUserID, DWORD dwCameraId, LPNET_MATRIX_CAMERAINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixAddCamera(LONG lUserID, DWORD dwCameraNum, BYTE *pBuffer, DWORD dwBufLength);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixModCameraInfo(LONG lUserID, LPNET_MATRIX_CAMERAINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixDelCamera(LONG lUserID, DWORD dwCameraId);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetAllMonitorInfo(LONG lUserID, LPNET_DVR_MATRIX_MONITORLIST lpMonListInfo);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetSingleMonitorInfo(LONG lUserID, DWORD dwMonitorId, LPNET_MATRIX_MONITORINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixAddMonitor(LONG lUserID, DWORD dwMonitorNum, BYTE *pBuffer, DWORD dwBufLength);            
NET_DVR_API BOOL __stdcall NET_DVR_MatrixModMonitorInfo(LONG lUserID, LPNET_MATRIX_MONITORINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixDelMonitor(LONG lUserID, DWORD dwMonitorId);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetAllMatrixInfo(LONG lUserID, LPNET_DVR_MATRIXLIST lpMatrixListInfo);
NET_DVR_API BOOL __stdcall NET_DVR_GetSingleMatrixInfo(LONG lUserID, DWORD dwMatrixId, LPNET_MATRIX_MATRIXINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_AddMatrix(LONG lUserID, LPNET_MATRIX_MATRIXINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_ModMatrixInfo(LONG lUserID, LPNET_MATRIX_MATRIXINFO lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_DelMatrix(LONG lUserID, DWORD dwMatrixId);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetUartParam(LONG lUserID, DWORD dwSerialChan, LPNET_MATRIX_UARTPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetUartParam(LONG lUserID, DWORD dwSerialChan , LPNET_MATRIX_UARTPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetUserInfo(LONG lUserID, DWORD dwUserNum, LPNET_MATRIX_USERPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixAddUser(LONG lUserID, DWORD dwUserNum, LPNET_MATRIX_USERPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixModUserInfo(LONG lUserID, DWORD dwUserNum, LPNET_MATRIX_USERPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixDelUser(LONG lUserID, DWORD dwUserNum);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetResourceInfo(LONG lUserID, DWORD dwResourceNum, LPNET_MATRIX_RESOURSEGROUPPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixAddResourceInfo(LONG lUserID, DWORD dwResourceNum, LPNET_MATRIX_RESOURSEGROUPPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixModResourceInfo(LONG lUserID, DWORD dwResourceNum, LPNET_MATRIX_RESOURSEGROUPPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixDelResourceInfo(LONG lUserID, DWORD dwResourceNum);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetUserGroupInfo(LONG lUserID, DWORD dwUserGroupNum, LPNET_MATRIX_USERGROUPPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixAddUserGroupInfo(LONG lUserID, DWORD dwUserGroupNum, LPNET_MATRIX_USERGROUPPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixModUserGroupInfo(LONG lUserID, DWORD dwUserGroupNum, LPNET_MATRIX_USERGROUPPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixDelUserGroup (LONG lUserID, DWORD dwUserGroupNum);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetAllTrunkInfo(LONG lUserID, LPNET_DVR_MATRIX_TRUNKLIST lpTrunkListInfo);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetTrunkInfo(LONG lUserID, DWORD dwTrunkNum, LPNET_MATRIX_TRUNKPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixAddTrunk(LONG lUserID, LPNET_MATRIX_TRUNKPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixModTrunkInfo(LONG lUserID, LPNET_MATRIX_TRUNKPARAM lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixTrunkCtrl(LONG lUserID, DWORD dwTrunkNum, BYTE byCtrlMode);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixTrunkStatusQuery(LONG lUserID, DWORD dwTrunkNum, BYTE *byTrunkStatus);

NET_DVR_API BOOL __stdcall NET_DVR_FindBackgroundPic(LONG lUserID, DWORD dwPicID, BYTE *pPicBuffer, DWORD *lpPicLen);
NET_DVR_API BOOL __stdcall NET_DVR_DetectImage(LONG lUserID, LPNET_VCA_FD_PROCIMG_CFG lpFDProcImg,LPNET_VCA_FD_PROCIMG_RESULT lpOutBuf);
NET_DVR_API BOOL __stdcall NET_DVR_GetPictureModel(LONG lUserID, LPNET_VCA_REGISTER_PIC lpInBuf, LPNET_VCA_PICMODEL_RESULT lpOutBuf);
NET_DVR_API BOOL __stdcall NET_DVR_AddBlackList(LONG lUserID,LONG lChannel,LPNET_VCA_BLACKLIST_PARA lpInter);
NET_DVR_API LONG __stdcall NET_DVR_FindBlackList(LONG lUserID, LPNET_VCA_BLACKLIST_COND lpBlackListCond);
NET_DVR_API LONG __stdcall NET_DVR_FindNextBlackList(LONG lFindHandle,LPNET_VCA_BLACKLIST_INFO lpFindData);
NET_DVR_API BOOL __stdcall NET_DVR_FindBlackListClose(LONG lFindHandle);
NET_DVR_API BOOL __stdcall NET_DVR_GetBlackListPicture(LONG lUserID, DWORD dwRegisterID, LPNET_VCA_BLACKLIST_PIC lpOutBuffer);
NET_DVR_API BOOL __stdcall NET_DVR_UpdateBlackList(LONG lUserID,LONG lChannel, LPNET_VCA_BLACKLIST_PARA lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_DelBlackList(LONG lUserID,LONG lChannel, DWORD dwRegisterID);
NET_DVR_API LONG __stdcall NET_DVR_FindSnapPicture(LONG lUserID, LPNET_VCA_FIND_PICTURECOND lpFindParam);
NET_DVR_API LONG __stdcall NET_DVR_FindNextSnapPic(LONG lFindHandle,LPNET_VCA_SUB_SNAPPIC_DATA lpFindData);
NET_DVR_API BOOL __stdcall NET_DVR_FindSnapPicClose(LONG lFindHandle);
NET_DVR_API LONG __stdcall NET_DVR_AdvanceFindSnapPicture(LONG lUserID, LPNET_VCA_FIND_PICTURECOND_ADVANCE lpFindParam);
NET_DVR_API LONG __stdcall NET_DVR_FindFaceMatchAlarm(LONG lUserID, LPNET_VCA_FIND_PICTURECOND lpFindParam);
NET_DVR_API LONG __stdcall NET_DVR_FindNextFaceMatchAlarm(LONG lFindHandle, LPNET_VCA_FACESNAP_MATCH_ALARM_LOG lpFaceMatchAlarmLog);
NET_DVR_API BOOL __stdcall NET_DVR_FindFaceMatchAlarmClose(LONG lFindHandle);
NET_DVR_API BOOL __stdcall NET_DVR_GetFaceMatchPic(LONG lUserID, LPNET_VCA_FACEMATCH_PICCOND lpMatchCond, LPNET_VCA_FACEMATCH_PICTURE lpMatchPic);
NET_DVR_API BOOL __stdcall NET_DVR_FastAddBlackList(LONG lUserID,LONG lChannel,LPNET_VCA_BLACKLIST_FASTREGISTER_PARA lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetRemotePlay_V41(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_DEC_REMOTE_PLAY_V41 lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetDisplayCfg_V41(LONG lUserID, DWORD dwDispChanNum, LPNET_DVR_MATRIX_VOUTCFG lpVoutCfg);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetDisplayCfg_V41(LONG lUserID, DWORD dwDispChanNum, LPNET_DVR_MATRIX_VOUTCFG lpDisplayCfg);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetDeviceStatus_V41(LONG lUserID, LPNET_DVR_DECODER_WORK_STATUS_V41 lpDecoderCfg);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetSceneCfg(LONG lUserID, DWORD dwSceneNum, LPNET_DVR_MATRIX_SCENECFG lpSceneCfg);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetSceneCfg(LONG lUserID, DWORD dwSceneNum, LPNET_DVR_MATRIX_SCENECFG lpSceneCfg);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSceneControl(LONG lUserID, DWORD dwSceneNum, DWORD dwCmd, DWORD dwCmdParam);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetCurrentSceneMode(LONG lUserID, DWORD *dwSceneNum);
NET_DVR_API BOOL __stdcall NET_DVR_GetAllValidWinInfo(LONG lUserID, LPNET_DVR_WINLIST lpWinListInfo);
NET_DVR_API BOOL __stdcall NET_DVR_ScreenWinCtrl(LONG lUserID, DWORD dwWinIndex, DWORD dwCommand, LPNET_DVR_SCREEN_WINCFG lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_GetScreenInputStatus(LONG lUserID, LPNET_DVR_SCREENINPUTSTATUS lpStatus);
NET_DVR_API LONG __stdcall NET_DVR_PicUpload(LONG lUserID, char const *sFileName, LPNET_DVR_PICTURECFG lpPictureCfg);
NET_DVR_API LONG __stdcall NET_DVR_GetPicUploadProgress(LONG lUploadHandle);
NET_DVR_API BOOL __stdcall  NET_DVR_CloseUploadHandle(LONG lUploadHandle);        
NET_DVR_API BOOL __stdcall NET_DVR_PicControl(LONG lUserID, BYTE byUseType, BYTE byPicIndex, BYTE byCtrlCmd);
NET_DVR_API LONG __stdcall NET_DVR_GetPicUploadState(LONG lUploadHandle);
NET_DVR_API BOOL __stdcall NET_DVR_ScreenCtrl(LONG lUserID, DWORD dwDeviceNum, LPNET_DVR_SCREEN_CONTROL lpStruScreenCtrl);
typedef void (CALLBACK *SCREENPICDATACB)(LONG nScreenPicHandle, DWORD dwDataType, BYTE *pBuffer, DWORD dwBufSize, void *pUser);
NET_DVR_API LONG __stdcall NET_DVR_StartScreenPic(LONG nUserID, DWORD nInputNum, SCREENPICDATACB PicDataCallback, void *pUserData);
NET_DVR_API BOOL __stdcall NET_DVR_StopScreenPic(LONG nScreenPicHandle);
NET_DVR_API BOOL __stdcall NET_DVR_FocusOnePush(LONG lUserID, LONG lChannel);
NET_DVR_API BOOL __stdcall NET_DVR_ResetLens(LONG lUserID, LONG lChannel);

typedef void(CALLBACK *fRemoteConfigCallback)(DWORD dwType, void* lpBuffer, DWORD dwBufLen, void* pUserData);
NET_DVR_API LONG __stdcall NET_DVR_StartRemoteConfig(LONG lUserID, DWORD dwCommand, LPVOID lpInBuffer, DWORD dwInBufferLen, fRemoteConfigCallback cbStateCallback, LPVOID pUserData);
NET_DVR_API BOOL __stdcall NET_DVR_StopRemoteConfig(LONG lHandle);
NET_DVR_API LONG __stdcall NET_DVR_GetNextRemoteConfig(LONG lHandle, void* lpOutBuff, DWORD dwOutBuffSize);
NET_DVR_API BOOL __stdcall NET_DVR_GetRemoteConfigState(LONG lHandle, void *pState);
NET_DVR_API BOOL __stdcall NET_DVR_SendRemoteConfig(LONG lHandle, DWORD dwDataType, char *pSendBuf, DWORD dwBufSize);

typedef void(CALLBACK *fLongCfgStateCallback)(LONG lHandle,  DWORD dwState, LPVOID pUserData);
NET_DVR_API BOOL __stdcall NET_DVR_CloseLongCfgHandle(LONG lHandle);
NET_DVR_API LONG __stdcall NET_DVR_RaidPullDiskStart(LONG lUserID, LONG lRaidID, fLongCfgStateCallback cbStateCallback, LPVOID pUserData);
NET_DVR_API LONG __stdcall NET_DVR_ScanRaidStart(LONG lUserID, fLongCfgStateCallback cbStateCallback, LPVOID pUserData);
NET_DVR_API LONG __stdcall NET_DVR_SetAccessCameraInfo(LONG lUserID, DWORD dwChannel, LPNET_DVR_ACCESS_CAMERA_INFO lpCameraInfo, fLongCfgStateCallback cbStateCallback, LPVOID pUserData);

NET_DVR_API BOOL __stdcall NET_DVR_InquiryRecordTimeSpan(LONG lUserID, DWORD dwChannel,  NET_DVR_RECORD_TIME_SPAN_INQUIRY const *lpInquiry, LPNET_DVR_RECORD_TIME_SPAN lpResult);
NET_DVR_API BOOL __stdcall NET_DVR_UpdateRecordIndex(LONG lUserID, DWORD dwChannel);
NET_DVR_API BOOL __stdcall NET_DVR_GetUpnpNatState(LONG lUserID, LPNET_DVR_UPNP_NAT_STATE lpState);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetLoopDecChanInfo_EX(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_LOOP_DECINFO_EX lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetLoopDecChanInfo_EX(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_LOOP_DECINFO_EX lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixStartDynamic_EX(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_PU_STREAM_CFG_EX lpDynamicInfo);
NET_DVR_API BOOL __stdcall NET_DVR_GetTrunkListInfo(LONG lUserID, DWORD dwTrunkNum, DWORD dwStartTrunk, LPNET_DVR_MATRIX_TRUNKLIST lpTrunkListInfo, DWORD *pReturnSize);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetSubDecSystemJoinInfo_V41(LONG lUserID, LPNET_DVR_ALLDECSUBSYSTEMJOININFO_V41 lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostSubSystemSetupAlarmChan(LONG lUserID, DWORD dwSubSystemNum);
NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostSubSystemCloseAlarmChan(LONG lUserID, DWORD dwSubSystemNum);
NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostClearAlarm(LONG lUserID, DWORD dwSubSystemNum);
NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostArrayBypass(LONG lUserID);
NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostArrayBypassResume (LONG lUserID);
NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostSetReportMode(LONG lUserID, LONG lCenterNum, LPVOID lpInputBuf, DWORD dwInputBufLen);
NET_DVR_API BOOL __stdcall NET_DVR_AlarmHostGetReportMode(LONG lUserID, LPVOID lpOutputBuf, DWORD dwOutputBufLen);
NET_DVR_API LONG __stdcall NET_DVR_StartUploadAudio(LONG lUserID, DWORD dwAudioNum, DWORD dwAudioType, char const *sAudioFileName);
NET_DVR_API LONG __stdcall NET_DVR_StartDownloadAudio(LONG lUserID, DWORD dwAudioNum, char const *sAudioFileName);
NET_DVR_API BOOL __stdcall NET_DVR_StopAudioOperate(LONG lAudioHandle);
NET_DVR_API LONG __stdcall NET_DVR_GetAudioProgress(LONG lAudioHandle);
NET_DVR_API BOOL __stdcall NET_DVR_AudioCtrl(LONG lUserID, DWORD dwAudioNum, DWORD dwCtrlParam);
NET_DVR_API BOOL __stdcall NET_DVR_GetDeviceConfig(LONG lUserID, DWORD dwCommand, DWORD dwCount, LPVOID lpInBuffer, DWORD dwInBufferSize, LPVOID lpStatusList, LPVOID lpOutBuffer, DWORD dwOutBufferSize);
NET_DVR_API BOOL __stdcall NET_DVR_SetDeviceConfig(LONG lUserID, DWORD dwCommand, DWORD dwCount, LPVOID lpInBuffer, DWORD dwInBufferSize, LPVOID lpStatusList, LPVOID lpInParamBuffer, DWORD dwInParamBufferSize);
NET_DVR_API BOOL __stdcall NET_DVR_LockStreamFileByTime(LONG lUserID, LPNET_DVR_STREAM_TIME_LOCK lpLockPara, LPNET_DVR_LOCK_RETURN lpLockReturn);
NET_DVR_API BOOL __stdcall NET_DVR_UnlockStreamFileByTime(LONG lUserID, LPNET_DVR_STREAM_TIME_LOCK lpLockPara, LPNET_DVR_LOCK_RETURN lpLockReturn);
NET_DVR_API BOOL __stdcall NET_DVR_StartManualRecord(LONG lUserID, LPNET_DVR_MANUAL_RECORD_PARA lpManualRecPara);
NET_DVR_API BOOL __stdcall NET_DVR_StopManualRecord(LONG lUserID, LPNET_DVR_STREAM_INFO pIDInfo);
NET_DVR_API LONG __stdcall NET_DVR_PlayBackReverseByName(LONG lUserID, char *sPlayBackFileName, HWND hWnd);
NET_DVR_API LONG __stdcall NET_DVR_PlayBackByTime_V40(LONG lUserID, NET_DVR_VOD_PARA const* pVodPara);
NET_DVR_API LONG __stdcall NET_DVR_PlayBackReverseByTime_V40(LONG lUserID, HWND hWnd, LPNET_DVR_PLAYCOND pPlayCond);
NET_DVR_API LONG __stdcall NET_DVR_GetFileByTime_V40(LONG lUserID, char *sSavedFileName, LPNET_DVR_PLAYCOND  pDownloadCond);
NET_DVR_API LONG __stdcall NET_DVR_FindFile_V40(LONG lUserID, LPNET_DVR_FILECOND_V40 pFindCond);
NET_DVR_API LONG __stdcall NET_DVR_SetupAlarmChan_V41(LONG lUserID, LPNET_DVR_SETUPALARM_PARAM lpSetupParam);
NET_DVR_API BOOL __stdcall NET_DVR_AddDataBase(LONG lUserID, LPNET_VCA_DATABASE_PARAM lpInBuf);
NET_DVR_API LONG __stdcall NET_DVR_FindDataBase(LONG lUserID, LPNET_VCA_FIND_DATABASE_COND lpInBuf);
NET_DVR_API LONG __stdcall NET_DVR_FindNextDataBase(LONG lFindHandle, LPNET_VCA_DATABASE_PARAM lpOutBuf);
NET_DVR_API BOOL __stdcall NET_DVR_FindDataBaseClose(LONG lFindHandle);
NET_DVR_API BOOL __stdcall NET_DVR_UpdateDataBase(LONG lUserID, LPNET_VCA_DATABASE_PARAM lpInBuf);
NET_DVR_API BOOL __stdcall NET_DVR_DeleteDataBase(LONG lUserID, LPNET_VCA_DELETE_DATABASE_COND lpCond);
typedef void(CALLBACK *fSearchDBCallBack)(LONG lHandle, DWORD dwType, DWORD dwResultNum, BYTE* pBuffer, DWORD dwBufSize,void *pUser);
NET_DVR_API LONG __stdcall NET_DVR_InquireSnapDBRecord(LONG lUserID, DWORD dwDataBaseID, LPNET_VCA_INQUIRE_SNAPDB_COND lpInBuf, fSearchDBCallBack cbSearchDBCallBack, void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_GetInquireSnapDBProgress(LONG lInquireHandle, DWORD* pState);
NET_DVR_API BOOL __stdcall NET_DVR_DeleteSnapDBRecord(LONG lUserID, DWORD dwDataBaseID, LPNET_VCA_DELETE_SNAPRECORD_COND lpInBuf);
NET_DVR_API LONG __stdcall NET_DVR_SearchSnapDB(LONG lUserID, LPNET_VCA_SEARCH_SNAPDB_COND lpInBuf, fSearchDBCallBack cbSearchDBCallBack, void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_GetSearchSnapDBProgress(LONG lSearchHandle, DWORD* pState);
NET_DVR_API BOOL __stdcall NET_DVR_AddFaceDBRecord(LONG lUserID, DWORD dwDataBaseID, LPNET_VCA_DATARECORD_INFO lpInBuf);
NET_DVR_API BOOL __stdcall NET_DVR_FastAddFaceDBRecord(LONG lUserID, DWORD dwDataBaseID, LPNET_VCA_FAST_DATARECORD_INFO lpInBuf);
NET_DVR_API LONG __stdcall NET_DVR_InquireFaceDBRecord(LONG lUserID, LPNET_VCA_DATARECORD_COND lpInBuf,fSearchDBCallBack cbInquireDBCallBack, void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_GetInquireFaceDBProgress(LONG lInquireHandle, DWORD* pState);
NET_DVR_API BOOL __stdcall NET_DVR_UpdateFaceDBRecord(LONG lUserID, DWORD dwDataBaseID, LPNET_VCA_DATARECORD_INFO lpInBuf);
NET_DVR_API BOOL __stdcall NET_DVR_DeleteFaceDBRecord(LONG lUserID, DWORD dwDataBaseID, LPNET_VCA_DELETE_RECORD_COND lpInBuf);
typedef void(CALLBACK *fSearchDBCallBack)(LONG lSearchHandle, DWORD dwType, DWORD dwResultNum, BYTE* pBuffer, DWORD dwBufSize,void *pUser);
NET_DVR_API LONG __stdcall NET_DVR_SearchFaceDB(LONG lUserID, LPNET_VCA_SEARCH_FACEDB_COND lpInBuf,fSearchDBCallBack cbSearchDBCallBack, void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_GetSearchFaceDBProgress(LONG lSearchHandle, DWORD* pState);
NET_DVR_API BOOL __stdcall NET_DVR_StopSearchDB(LONG lHandle);
NET_DVR_API BOOL __stdcall NET_DVR_FindMatchPicture(LONG lUserID, LPNET_VCA_FIND_MATCHPIC_COND lpFindCond, LPNET_VCA_FIND_MATCHPIC_RESULT lpFindResult);
NET_DVR_API BOOL __stdcall NET_DVR_RemoteControl(LONG lUserID, DWORD dwCommand, LPVOID lpInBuffer, DWORD dwInBufferSize);

NET_DVR_API BOOL __stdcall NET_DVR_PicViewRequest(LONG lUserID, NET_DVR_PIC_VIEW_PARAM *lpPicViewParam);
typedef LONG (CALLBACK *PicViewCallBack)(LPNET_DVR_PICVIEW_CALLBACKPARAM pStruPicViewParam, void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetPicViewResponseCallBack(PicViewCallBack fPicViewResponseCallBack, void *pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetPicViewDataCallBack(LONG lPicViewHandle, SCREENPICDATACB fPicDataCallback, void *pUserData);
NET_DVR_API BOOL __stdcall NET_DVR_GetDevList(LONG lUserID, LPNET_DVR_DEVLIST lpDevListInfo);
NET_DVR_API BOOL __stdcall NET_DVR_GetScreenList(LONG lUserID, LPNET_DVR_SCREENLIST lpScreenListInfo);
NET_DVR_API BOOL __stdcall NET_DVR_SetScreenRelation(LONG lUserID, NET_DVR_DISP_SCREEN const* lpScreenInfo);
NET_DVR_API BOOL __stdcall NET_DVR_TextShowCtrl(LONG lUserID, DWORD dwDeviceIndex, LPNET_DVR_TEXTSHOW lpText);
NET_DVR_API LONG __stdcall NET_DVR_StartUpgrade(LONG lUserID, LPNET_DVR_OPERATE_DEVICE lpStruOperate, DVCS_UPGRADESTATE_CB UpgradeStateCallback, void *pUserData);
NET_DVR_API BOOL __stdcall NET_DVR_StopUpgrade(LONG lUserID, LPNET_DVR_OPERATE_DEVICE lpStruOperate, LONG lUpgradeHandle);
NET_DVR_API BOOL __stdcall NET_DVR_AddNetSignal(LONG lUserID, LPNET_DVR_NETSIGNAL_INFO lpStruSignal, void* lpOutBuf , DWORD dwBufLen);
NET_DVR_API LONG __stdcall NET_DVR_StartPicPreview(LONG lUserID, NET_DVR_START_PIC_VIEW_INFO const* lpStruStartPicView, SCREENPICDATACB PicDataCallback, void *pUserData);
NET_DVR_API BOOL __stdcall NET_DVR_GetDeviceStatus(LONG lUserID, DWORD dwCommand, DWORD dwCount, LPVOID lpInBuffer, DWORD dwInBufferSize, LPVOID lpStatusList, LPVOID lpOutBuffer, DWORD dwOutBufferSize);
NET_DVR_API BOOL __stdcall NET_DVR_GetPlanList(LONG lUserID, DWORD dwDevNum, LPNET_DVR_PLAN_LIST lpPlanList);
NET_DVR_API BOOL __stdcall NET_DVR_GetInputSignalList(LONG lUserID, DWORD dwDevNum, LPNET_DVR_INPUT_SIGNAL_LIST lpInputSignalList);
NET_DVR_API BOOL __stdcall NET_DVR_GetInputSignalList_V40(LONG lUserID, DWORD dwDevNum, LPNET_DVR_INPUT_SIGNAL_LIST lpInputSignalList);

NET_DVR_API LONG __stdcall NET_DVR_UploadFile(LONG lUserID, DWORD dwUploadType, LPVOID lpInBuffer, DWORD dwInBufferSize, char* sFileName);
NET_DVR_API LONG __stdcall NET_DVR_UploadFile_V40(LONG lUserID, DWORD dwUploadType, LPVOID lpInBuffer, DWORD dwInBufferSize, char const * sFileName, LPVOID lpOutBuffer, DWORD dwOutBufferSize);
NET_DVR_API LONG __stdcall NET_DVR_GetUploadState(LONG lUploadHandle, LPDWORD pProgress);
NET_DVR_API BOOL __stdcall NET_DVR_GetUploadResult(LONG lUploadHandle, LPVOID lpOutBuffer, DWORD dwOutBufferSize);
NET_DVR_API BOOL __stdcall NET_DVR_UploadClose(LONG lUploadHandle);
NET_DVR_API LONG __stdcall NET_DVR_StartUploadFile(LONG lUserID, LPNET_DVR_UPLOAD_PARAM  lpStruUploadParam);
NET_DVR_API LONG __stdcall NET_DVR_GetUploadFileProgress(LONG lFileHandle);
NET_DVR_API LONG __stdcall NET_DVR_GetUploadFileState(LONG lFileHandle);
NET_DVR_API BOOL __stdcall NET_DVR_StopUploadFile (LONG lFileHandle);
NET_DVR_API LONG __stdcall NET_DVR_StartDownloadFile(LONG lUserID, LPNET_DVR_DOWNLOAD_PARAM lpStruDownloadParam);
NET_DVR_API LONG __stdcall NET_DVR_GetDownloadFileProgress(LONG lFileHandle);
NET_DVR_API LONG __stdcall NET_DVR_GetDownloadFileState(LONG lFileHandle);
NET_DVR_API BOOL __stdcall NET_DVR_StopDownloadFile (LONG lFileHandle);
NET_DVR_API BOOL __stdcall NET_DVR_DownloadControl(LONG lDownloadHandle, NET_SDK_DOWNLOAD_CONTROL_TYPE_ENUM enumDownloadType, void* lpInBuffer, DWORD dwInBufferLen, void* lpOutBuffer, DWORD dwOutBufferLen);
NET_DVR_API LONG __stdcall NET_DVR_UploadSend(LONG lUploadHandle, const NET_DVR_SEND_PARAM_IN *pstruSendParamIN, void* lpOutBuffer);


NET_DVR_API BOOL __stdcall NET_DVR_GetMobileDevStatus(LONG lUserID, DWORD dwStatusType, LPNET_DVR_MB_MOBILEDEV_STATUS lpstruMobileDevStatus);
NET_DVR_API BOOL __stdcall NET_DVR_SetVoiceDataCallBack(LONG lVoiceComHandle, BOOL bNeedCBNoEncData, void(CALLBACK *fVoiceDataCallBack)(LONG lVoiceComHandle, char *pRecvDataBuffer, DWORD dwBufSize, BYTE byAudioFlag, void* pUser), void* pUser);
NET_DVR_API BOOL __stdcall NET_DVR_SetTransparentParam(LONG lUserID, char *sInBuffer, DWORD dwInSize);
NET_DVR_API BOOL __stdcall NET_DVR_GetTransparentParam(LONG lUserID, char *sInBuffer, DWORD dwInSize, char *sOutBuffer, DWORD dwOutSize);

NET_DVR_API BOOL __stdcall NET_DVR_SetSDKLocalConfig(LPNET_DVR_SDKLOCAL_CFG lpSdkLocalCfg);
NET_DVR_API BOOL __stdcall NET_DVR_GetSDKLocalConfig(LPNET_DVR_SDKLOCAL_CFG lpSdkLocalCfg);

NET_DVR_API BOOL __stdcall NET_DVR_SetSDKLocalCfg(NET_SDK_LOCAL_CFG_TYPE enumType, const void *lpInBuff);
NET_DVR_API BOOL __stdcall NET_DVR_GetSDKLocalCfg(NET_SDK_LOCAL_CFG_TYPE enumType, void* lpOutBuff);

NET_DVR_API LONG __stdcall NET_DVR_OpticalUpgrade(LONG lUserID, char const *sFileName, LPNET_DVR_OPTICAL_INFO lpOpticalInfo);
typedef void(CALLBACK *fGPSDataCallback)(LONG nHandle, DWORD dwState, void* lpBuffer, DWORD dwBufLen, void* pUserData);
NET_DVR_API LONG __stdcall NET_DVR_GetVehicleGpsInfo(LONG nUserID, LPNET_DVR_GET_GPS_DATA_PARAM lpGPSDataParam, fGPSDataCallback cbGPSDataCallback, void* pUser);

NET_DVR_API BOOL __stdcall NET_DVR_ClosePreview(LONG lUserID, DWORD nSessionID);
NET_DVR_API BOOL __stdcall NET_DVR_ClosePlayBack(LONG lUserID, DWORD nSessionID);
NET_DVR_API LONG __stdcall NET_DVR_RealPlay_V40(LONG lUserID, LPNET_DVR_PREVIEWINFO lpPreviewInfo, REALDATACALLBACK fRealDataCallBack_V30 = NULL, void* pUser = NULL);

NET_DVR_API LONG __stdcall NET_DVR_StartDownload(LONG lUserID, DWORD dwDownloadType, LPVOID lpInBuffer, DWORD dwInBufferSize, const char *sFileName);
NET_DVR_API LONG __stdcall NET_DVR_GetDownloadState(LONG lDownloadHandle, LPDWORD pProgress);
NET_DVR_API BOOL __stdcall NET_DVR_StopDownload(LONG lHandle);

NET_DVR_API BOOL __stdcall NET_DVR_MatrixStartDynamic_V41(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_PU_STREAM_CFG_V41 lpDynamicInfo);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetLoopDecChanInfo_V41(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_LOOP_DECINFO_V41 lpOuter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixSetLoopDecChanInfo_V41(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_LOOP_DECINFO_V41 lpInter);
NET_DVR_API BOOL __stdcall NET_DVR_MatrixGetDecChanInfo_V41(LONG lUserID, DWORD dwDecChanNum, LPNET_DVR_MATRIX_DEC_CHAN_INFO_V41 lpOuter);

NET_DVR_API LONG __stdcall NET_DVR_StartT1Test(LONG lUserID, LPNET_DVR_ALARMHOST_DOWNLOAD_PARAM lpStruDownloadParam);
NET_DVR_API BOOL __stdcall NET_DVR_StopTT1Test(BOOL lHandle);
NET_DVR_API BOOL __stdcall NET_DVR_GetT1TestStatus(LONG lHandle, LONG *pStatus);
NET_DVR_API BOOL __stdcall NET_DVR_SendT1TestData(LONG lHandle, DWORD dwDataType, char *pSendBuf, DWORD dwSendBufLen);

NET_DVR_API BOOL __stdcall NET_DVR_UploadLogo_NEW(LONG lUserID, DWORD dwLogoNo, LPNET_DVR_MATRIX_LOGO_INFO lpLogoInfo, char *sLogoBuffer);
NET_DVR_API BOOL __stdcall NET_DVR_DownloadLogo(LONG lUserID, DWORD dwLogoNo, LPNET_DVR_MATRIX_LOGO_INFO lpLogoInfo, char *sLogoBuffer, DWORD dwLogoBufferSize);
NET_DVR_API LONG __stdcall NET_DVR_StartPassiveTransCode(LONG lUserID, NET_DVR_STREAM_INFO const *pStreamInfo, NET_DVR_COMPRESSIONCFG_V30 const *pDstTransInfo, NET_DVR_PASSIVETRANSINFO const *pPassiveTransInfo, void(CALLBACK *fTransCodeDataCallBack) (LONG lPassiveHandle, DWORD dwDataType, BYTE *pBuffer, DWORD dwBufSize, void* pUser) = NULL, void* pUser = NULL);
NET_DVR_API BOOL __stdcall NET_DVR_TransCodeInputData(LONG lPassiveHandle, BYTE *pBuffer, DWORD dwBufSize);
NET_DVR_API BOOL __stdcall NET_DVR_StopPassiveTransCode(LONG lPassiveHandle);
NET_DVR_API LONG __stdcall NET_DVR_GetPassiveTransChanNum(LONG lPassiveHandle);
NET_DVR_API BOOL __stdcall NET_DVR_SetDeviceConfigEx(LONG lUserID, DWORD dwCommand, DWORD dwCount, NET_DVR_IN_PARAM *lpInParam, NET_DVR_OUT_PARAM *lpOutParam);

NET_DVR_API BOOL __stdcall NET_DVR_GetSTDConfig(LONG lUserID, DWORD dwCommand, LPNET_DVR_STD_CONFIG lpConfigParam);
NET_DVR_API BOOL __stdcall NET_DVR_SetSTDConfig(LONG lUserID, DWORD dwCommand, LPNET_DVR_STD_CONFIG lpConfigParam);
NET_DVR_API BOOL __stdcall NET_DVR_GetSTDAbility(LONG lUserID, DWORD dwAbilityType, LPNET_DVR_STD_ABILITY  lpAbilityParam);
NET_DVR_API BOOL __stdcall NET_DVR_STDControl(LONG lUserID, DWORD dwCommand, LPNET_DVR_STD_CONTROL lpControlParam);
NET_DVR_API BOOL __stdcall NET_DVR_STDXMLConfig(LONG lUserID, NET_DVR_XML_CONFIG_INPUT* lpInputParam, NET_DVR_XML_CONFIG_OUTPUT* lpOutputParam);
NET_DVR_API LONG __stdcall NET_DVR_Upgrade_V40(DWORD lUserID, DWORD dwUpgradeType, char const *sFileName, void *pInbuffer, DWORD dwBufferLen);

NET_DVR_API BOOL __stdcall NET_DVR_DetectImage_V50(LONG lUserID, LPNET_VCA_FD_PROCIMG_CFG lpFDProcImg,LPNET_VCA_FD_PROCIMG_RESULT_V50 lpOutBuf);

NET_DVR_API LONG __stdcall NET_DVR_SmartSearchPicture(LONG lUserID, NET_DVR_SMART_SEARCH_PIC_PARA * pFindParam);
NET_DVR_API LONG __stdcall NET_DVR_FindNextSmartPicture(LONG lFindHandle,LPNET_DVR_SMART_SEARCH_PIC_RET lpFindData);
NET_DVR_API BOOL __stdcall NET_DVR_CloseSmartSearchPicture(LONG lFindHandle);
NET_DVR_API BOOL __stdcall NET_DVR_SetESCallBack(LONG iRealHandle, void (__stdcall *fnESCallback)(LONG lPreviewHandle, DWORD dwDataType, BYTE *pBuffer, DWORD dwBufSize,  void* pUser), void* pUser);
NET_DVR_API BOOL __stdcall NET_DVR_ActivateDevice(char* sDVRIP, WORD wDVRPort, LPNET_DVR_ACTIVATECFG    lpActivateCfg);
NET_DVR_API BOOL __stdcall NET_DVR_GetAddrInfoByServer(DWORD     dwQueryType, void* pInBuf, DWORD dwInBufLen, void* pOutBuf, DWORD dwOutBufLen);
NET_DVR_API BOOL __stdcall NET_DVR_StartGetDevState(LPNET_DVR_CHECK_DEV_STATE pParams);
NET_DVR_API BOOL __stdcall NET_DVR_StopGetDevState();
NET_DVR_API BOOL __stdcall NET_DVR_RigisterPlayBackDrawFun(LONG lPlayHandle, void (__stdcall *fDrawFun)(LONG lPlayHandle, HDC hDc, DWORD dwUser), DWORD dwUser);

NET_DVR_API BOOL __stdcall NET_DVR_SetSDKInitCfg(NET_SDK_INIT_CFG_TYPE enumType, void* const lpInBuff);
NET_DVR_API BOOL __stdcall NET_DVR_ReleaseSDKMemPool(LPNET_DVR_SDKMEMPOOL_CFG lpSdkMemPoolCfg);


#endif //

